
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dc50  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  0801dd88  0801dd88  0002dd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801ecfc  0801ecfc  0002ecfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801edd4  0801edd4  00030148  2**0
                  CONTENTS
  5 .ARM          00000008  0801edd4  0801edd4  0002edd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801eddc  0801eddc  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801eddc  0801eddc  0002eddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801ede0  0801ede0  0002ede0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801ede4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002188  20000148  0801ef2c  00030148  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022d0  0801ef2c  000322d0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY
 14 .debug_info   000485a0  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b1da  00000000  00000000  00078755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003928  00000000  00000000  00083930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b7a  00000000  00000000  00087258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002acdf  00000000  00000000  00089dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046053  00000000  00000000  000b4ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1828  00000000  00000000  000fab04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ebec  00000000  00000000  001cc32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001daf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801dd70 	.word	0x0801dd70

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801dd70 	.word	0x0801dd70

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811b 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8118 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8106 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8103 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f7 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 808f 	bne.w	8000de6 <__udivmoddi4+0x20e>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80ba 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d90:	fb00 4413 	mls	r4, r0, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000db6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	46c6      	mov	lr, r8
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	d355      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc6:	d052      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb9 030e 	subs.w	r3, r9, lr
 8000dce:	eb64 0405 	sbc.w	r4, r4, r5
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40cb      	lsrs	r3, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	2100      	movs	r1, #0
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c3 0120 	rsb	r1, r3, #32
 8000dea:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dee:	fa20 f201 	lsr.w	r2, r0, r1
 8000df2:	fa25 f101 	lsr.w	r1, r5, r1
 8000df6:	409d      	lsls	r5, r3
 8000df8:	432a      	orrs	r2, r5
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e06:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0a:	0c11      	lsrs	r1, r2, #16
 8000e0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e10:	fb00 f50e 	mul.w	r5, r0, lr
 8000e14:	428d      	cmp	r5, r1
 8000e16:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428d      	cmp	r5, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1b49      	subs	r1, r1, r5
 8000e30:	b292      	uxth	r2, r2
 8000e32:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e36:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x280>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d216      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d914      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	1a52      	subs	r2, r2, r1
 8000e5a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5e:	e739      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e60:	4631      	mov	r1, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e66:	4639      	mov	r1, r7
 8000e68:	e6e7      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	e6fc      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e6e:	45c1      	cmp	r9, r8
 8000e70:	d2aa      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e76:	eb63 050c 	sbc.w	r5, r3, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4645      	mov	r5, r8
 8000e80:	e7ea      	b.n	8000e58 <__udivmoddi4+0x280>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4640      	mov	r0, r8
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	46d0      	mov	r8, sl
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70b      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e98:	4464      	add	r4, ip
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e743      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f2e:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <MX_ADC_Init+0x98>)
 8000f30:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f38:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_ADC_Init+0x94>)
 8000faa:	f002 f9a3 	bl	80032f4 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 fd10 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000164 	.word	0x20000164
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x54>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d113      	bne.n	800100e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f7ff ff73 	bl	8000ed4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff ff58 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin;
 8000ff4:	f242 0318 	movw	r3, #8216	; 0x2018
 8000ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <HAL_ADC_MspInit+0x58>)
 800100a:	f003 ff73 	bl	8004ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012400 	.word	0x40012400
 800101c:	48000400 	.word	0x48000400

08001020 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_ADC_MspDeInit+0x2c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d108      	bne.n	8001044 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001036:	f7ff ff65 	bl	8000f04 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin);
 800103a:	f242 0118 	movw	r1, #8216	; 0x2018
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <HAL_ADC_MspDeInit+0x30>)
 8001040:	f004 f8b8 	bl	80051b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012400 	.word	0x40012400
 8001050:	48000400 	.word	0x48000400

08001054 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SYS_InitMeasurement+0x14>)
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <SYS_InitMeasurement+0x18>)
 800105c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000164 	.word	0x20000164
 800106c:	40012400 	.word	0x40012400

08001070 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <SYS_GetBatteryLevel+0x5c>)
 8001080:	f000 f82a 	bl	80010d8 <ADC_ReadChannels>
 8001084:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	e016      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109a:	4293      	cmp	r3, r2
 800109c:	d00b      	beq.n	80010b6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010a8:	fb03 f202 	mul.w	r2, r3, r2
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	e004      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SYS_GetBatteryLevel+0x64>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	b4002000 	.word	0xb4002000
 80010d0:	1fff75aa 	.word	0x1fff75aa
 80010d4:	004c08d8 	.word	0x004c08d8

080010d8 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80010f0:	f7ff ff1a 	bl	8000f28 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80010f4:	481a      	ldr	r0, [pc, #104]	; (8001160 <ADC_ReadChannels+0x88>)
 80010f6:	f002 ff1c 	bl	8003f32 <HAL_ADCEx_Calibration_Start>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001100:	f000 fc6a 	bl	80019d8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <ADC_ReadChannels+0x88>)
 8001118:	f002 fc28 	bl	800396c <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001122:	f000 fc59 	bl	80019d8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <ADC_ReadChannels+0x88>)
 8001128:	f002 fb04 	bl	8003734 <HAL_ADC_Start>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001132:	f000 fc51 	bl	80019d8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001136:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <ADC_ReadChannels+0x88>)
 800113c:	f002 fb72 	bl	8003824 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <ADC_ReadChannels+0x88>)
 8001142:	f002 fb3d 	bl	80037c0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <ADC_ReadChannels+0x88>)
 8001148:	f002 fc03 	bl	8003952 <HAL_ADC_GetValue>
 800114c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <ADC_ReadChannels+0x88>)
 8001150:	f002 fa64 	bl	800361c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001154:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000164 	.word	0x20000164

08001164 <LL_AHB1_GRP1_EnableClock>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001198:	2004      	movs	r0, #4
 800119a:	f7ff ffe3 	bl	8001164 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff ffe0 	bl	8001164 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2102      	movs	r1, #2
 80011a8:	200b      	movs	r0, #11
 80011aa:	f003 f868 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011ae:	200b      	movs	r0, #11
 80011b0:	f003 f87f 	bl	80042b2 <HAL_NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011ce:	d311      	bcc.n	80011f4 <FLASH_IF_Write+0x3c>
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <FLASH_IF_Write+0x48>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	029a      	lsls	r2, r3, #10
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <FLASH_IF_Write+0x4c>)
 80011d8:	4013      	ands	r3, r2
 80011da:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011de:	3b01      	subs	r3, #1
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d306      	bcc.n	80011f4 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 f85a 	bl	80012a4 <FLASH_IF_INT_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	1fff75e0 	.word	0x1fff75e0
 8001204:	03fffc00 	.word	0x03fffc00

08001208 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800121e:	d311      	bcc.n	8001244 <FLASH_IF_Read+0x3c>
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <FLASH_IF_Read+0x48>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	029a      	lsls	r2, r3, #10
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <FLASH_IF_Read+0x4c>)
 8001228:	4013      	ands	r3, r2
 800122a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800122e:	3b01      	subs	r3, #1
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	4293      	cmp	r3, r2
 8001234:	d306      	bcc.n	8001244 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f93a 	bl	80014b4 <FLASH_IF_INT_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	1fff75e0 	.word	0x1fff75e0
 8001254:	03fffc00 	.word	0x03fffc00

08001258 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800126c:	d310      	bcc.n	8001290 <FLASH_IF_Erase+0x38>
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <FLASH_IF_Erase+0x44>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	029a      	lsls	r2, r3, #10
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <FLASH_IF_Erase+0x48>)
 8001276:	4013      	ands	r3, r2
 8001278:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800127c:	3b01      	subs	r3, #1
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4293      	cmp	r3, r2
 8001282:	d305      	bcc.n	8001290 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f932 	bl	80014f0 <FLASH_IF_INT_Erase>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	1fff75e0 	.word	0x1fff75e0
 80012a0:	03fffc00 	.word	0x03fffc00

080012a4 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <FLASH_IF_INT_Write+0x3e>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <FLASH_IF_INT_Write+0x3e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80012e2:	f06f 0305 	mvn.w	r3, #5
 80012e6:	e0da      	b.n	800149e <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80012e8:	f000 f992 	bl	8001610 <FLASH_IF_INT_Clear_Error>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80012f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80cf 	bne.w	800149a <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012fc:	f003 fc24 	bl	8004b48 <HAL_FLASH_Unlock>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 80c6 	bne.w	8001494 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800130e:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <FLASH_IF_INT_Write+0x204>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0299      	lsls	r1, r3, #10
 8001314:	4b65      	ldr	r3, [pc, #404]	; (80014ac <FLASH_IF_INT_Write+0x208>)
 8001316:	400b      	ands	r3, r1
 8001318:	fbb2 f1f3 	udiv	r1, r2, r3
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	0adb      	lsrs	r3, r3, #11
 8001324:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001330:	3b01      	subs	r3, #1
 8001332:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <FLASH_IF_INT_Write+0x204>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	0291      	lsls	r1, r2, #10
 8001338:	4a5c      	ldr	r2, [pc, #368]	; (80014ac <FLASH_IF_INT_Write+0x208>)
 800133a:	400a      	ands	r2, r1
 800133c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001340:	fb01 f202 	mul.w	r2, r1, r2
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	0ada      	lsrs	r2, r3, #11
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d905      	bls.n	8001362 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	e089      	b.n	800147c <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800136e:	02db      	lsls	r3, r3, #11
 8001370:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f925 	bl	80015c4 <FLASH_IF_INT_IsEmpty>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d031      	beq.n	80013e4 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001388:	23fa      	movs	r3, #250	; 0xfa
 800138a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 800138e:	e07e      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001390:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f88a 	bl	80014b4 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013aa:	4413      	add	r3, r2
 80013ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013b0:	b292      	uxth	r2, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f01b f96a 	bl	801c68c <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f896 	bl	80014f0 <FLASH_IF_INT_Erase>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80013ca:	23fe      	movs	r3, #254	; 0xfe
 80013cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80013d0:	e05d      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e005      	b.n	80013f0 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80013e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	623b      	str	r3, [r7, #32]
          current_length = length;
 80013ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ee:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f4:	e026      	b.n	8001444 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80013f6:	6a3a      	ldr	r2, [r7, #32]
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001402:	2001      	movs	r0, #1
 8001404:	f003 fb5c 	bl	8004ac0 <HAL_FLASH_Program>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001414:	6a3a      	ldr	r2, [r7, #32]
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	4413      	add	r3, r2
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	4299      	cmp	r1, r3
 8001420:	bf08      	it	eq
 8001422:	4290      	cmpeq	r0, r2
 8001424:	d003      	beq.n	800142e <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001426:	23fc      	movs	r3, #252	; 0xfc
 8001428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800142c:	e00e      	b.n	800144c <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	3308      	adds	r3, #8
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e003      	b.n	800143e <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001436:	23fc      	movs	r3, #252	; 0xfc
 8001438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 800143c:	e006      	b.n	800144c <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	3308      	adds	r3, #8
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
 8001444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3d4      	bcc.n	80013f6 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 800144c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11b      	bne.n	800148c <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	4413      	add	r3, r2
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 800145c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001460:	4413      	add	r3, r2
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800146e:	bf28      	it	cs
 8001470:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	3301      	adds	r3, #1
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001484:	429a      	cmp	r2, r3
 8001486:	f4ff af6f 	bcc.w	8001368 <FLASH_IF_INT_Write+0xc4>
 800148a:	e000      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          break;
 800148c:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800148e:	f003 fb7d 	bl	8004b8c <HAL_FLASH_Lock>
 8001492:	e002      	b.n	800149a <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001494:	23fb      	movs	r3, #251	; 0xfb
 8001496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800149a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3740      	adds	r7, #64	; 0x40
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	1fff75e0 	.word	0x1fff75e0
 80014ac:	03fffc00 	.word	0x03fffc00
 80014b0:	200001c8 	.word	0x200001c8

080014b4 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <FLASH_IF_INT_Read+0x1c>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80014d0:	f06f 0305 	mvn.w	r3, #5
 80014d4:	e008      	b.n	80014e8 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f01b f8d4 	bl	801c68c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80014e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001510:	f06f 0305 	mvn.w	r3, #5
 8001514:	e04e      	b.n	80015b4 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001516:	f000 f87b 	bl	8001610 <FLASH_IF_INT_Clear_Error>
 800151a:	4603      	mov	r3, r0
 800151c:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800151e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d144      	bne.n	80015b0 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001526:	f003 fb0f 	bl	8004b48 <HAL_FLASH_Unlock>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d13d      	bne.n	80015ac <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <FLASH_IF_INT_Erase+0xcc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0299      	lsls	r1, r3, #10
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <FLASH_IF_INT_Erase+0xd0>)
 8001542:	400b      	ands	r3, r1
 8001544:	fbb2 f1f3 	udiv	r1, r2, r3
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	0adb      	lsrs	r3, r3, #11
 8001550:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800155c:	3b01      	subs	r3, #1
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <FLASH_IF_INT_Erase+0xcc>)
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	0291      	lsls	r1, r2, #10
 8001564:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <FLASH_IF_INT_Erase+0xd0>)
 8001566:	400a      	ands	r2, r1
 8001568:	fbb3 f1f2 	udiv	r1, r3, r2
 800156c:	fb01 f202 	mul.w	r2, r1, r2
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	0ada      	lsrs	r2, r3, #11
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800157c:	f107 0214 	add.w	r2, r7, #20
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fbe0 	bl	8004d4c <HAL_FLASHEx_Erase>
 800158c:	4603      	mov	r3, r0
 800158e:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001590:	7fbb      	ldrb	r3, [r7, #30]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001596:	7fbb      	ldrb	r3, [r7, #30]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d101      	bne.n	80015a0 <FLASH_IF_INT_Erase+0xb0>
 800159c:	2301      	movs	r3, #1
 800159e:	e001      	b.n	80015a4 <FLASH_IF_INT_Erase+0xb4>
 80015a0:	f06f 0301 	mvn.w	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80015a6:	f003 faf1 	bl	8004b8c <HAL_FLASH_Lock>
 80015aa:	e001      	b.n	80015b0 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80015ac:	23fb      	movs	r3, #251	; 0xfb
 80015ae:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80015b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	1fff75e0 	.word	0x1fff75e0
 80015c0:	03fffc00 	.word	0x03fffc00

080015c4 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	e011      	b.n	80015fc <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e2:	bf08      	it	eq
 80015e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80015e8:	d002      	beq.n	80015f0 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      break;
 80015ee:	e009      	b.n	8001604 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3308      	adds	r3, #8
 80015f4:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3308      	adds	r3, #8
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3e9      	bcc.n	80015d8 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001616:	23fb      	movs	r3, #251	; 0xfb
 8001618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800161a:	f003 fa95 	bl	8004b48 <HAL_FLASH_Unlock>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d110      	bne.n	8001646 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 800162a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 8001632:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001636:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001638:	f003 faa8 	bl	8004b8c <HAL_FLASH_Lock>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	58004000 	.word	0x58004000

08001658 <LL_AHB2_GRP1_EnableClock>:
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4313      	orrs	r3, r2
 800166e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167c:	68fb      	ldr	r3, [r7, #12]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff ffdb 	bl	8001658 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff ffd8 	bl	8001658 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	2004      	movs	r0, #4
 80016aa:	f7ff ffd5 	bl	8001658 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Memory_CS_Pin|Status_LED_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80016b4:	481c      	ldr	r0, [pc, #112]	; (8001728 <MX_GPIO_Init+0xa0>)
 80016b6:	f003 fe4b 	bl	8005350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin
 80016ba:	2200      	movs	r2, #0
 80016bc:	f240 413d 	movw	r1, #1085	; 0x43d
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f003 fe44 	bl	8005350 <HAL_GPIO_WritePin>
                          |RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Memory_CS_Pin|Status_LED_Pin;
 80016c8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80016cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <MX_GPIO_Init+0xa0>)
 80016e0:	f003 fc08 	bl	8004ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin;
 80016e4:	f240 430d 	movw	r3, #1037	; 0x40d
 80016e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f003 fbf9 	bl	8004ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001702:	2330      	movs	r3, #48	; 0x30
 8001704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f003 fbeb 	bl	8004ef4 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	48000400 	.word	0x48000400

0800172c <LL_AHB2_GRP1_EnableClock>:
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <LL_APB1_GRP1_EnableClock>:
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001780:	68fb      	ldr	r3, [r7, #12]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_I2C2_Init+0x74>)
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <MX_I2C2_Init+0x78>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_I2C2_Init+0x74>)
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <MX_I2C2_Init+0x7c>)
 800179a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_I2C2_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_I2C2_Init+0x74>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_I2C2_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_I2C2_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_I2C2_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_I2C2_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_I2C2_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <MX_I2C2_Init+0x74>)
 80017c8:	f003 fdd9 	bl	800537e <HAL_I2C_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017d2:	f000 f901 	bl	80019d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <MX_I2C2_Init+0x74>)
 80017da:	f003 fe5f 	bl	800549c <HAL_I2CEx_ConfigAnalogFilter>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f000 f8f8 	bl	80019d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017e8:	2100      	movs	r1, #0
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_I2C2_Init+0x74>)
 80017ec:	f003 fea0 	bl	8005530 <HAL_I2CEx_ConfigDigitalFilter>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017f6:	f000 f8ef 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200001cc 	.word	0x200001cc
 8001804:	40005800 	.word	0x40005800
 8001808:	20303e5d 	.word	0x20303e5d

0800180c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b096      	sub	sp, #88	; 0x58
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2238      	movs	r2, #56	; 0x38
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f01c f9f1 	bl	801dc14 <memset>
  if(i2cHandle->Instance==I2C2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_I2C_MspInit+0xb0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d13b      	bne.n	80018b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001840:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4618      	mov	r0, r3
 800184c:	f005 f92c 	bl	8006aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001856:	f000 f8bf 	bl	80019d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff ff66 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	2002      	movs	r0, #2
 8001862:	f7ff ff63 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	2312      	movs	r3, #18
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001878:	2304      	movs	r3, #4
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f003 fb35 	bl	8004ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800188a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001890:	2312      	movs	r3, #18
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800189c:	2304      	movs	r3, #4
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_I2C_MspInit+0xb4>)
 80018a8:	f003 fb24 	bl	8004ef4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018b0:	f7ff ff54 	bl	800175c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3758      	adds	r7, #88	; 0x58
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40005800 	.word	0x40005800
 80018c0:	48000400 	.word	0x48000400

080018c4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d4:	f023 0218 	bic.w	r2, r3, #24
 80018d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f2:	f001 fb11 	bl	8002f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f6:	f000 f811 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fa:	f7ff fec5 	bl	8001688 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80018fe:	f008 fd3f 	bl	800a380 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001902:	f7ff ff43 	bl	800178c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001906:	f000 f953 	bl	8001bb0 <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800190a:	f008 fd41 	bl	800a390 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
    testGPIO();
 800190e:	f001 f9f1 	bl	8002cf4 <testGPIO>
    HAL_Delay(500);
 8001912:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001916:	f000 fc7b 	bl	8002210 <HAL_Delay>
    MX_LoRaWAN_Process();
 800191a:	e7f6      	b.n	800190a <main+0x1c>

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b09a      	sub	sp, #104	; 0x68
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2248      	movs	r2, #72	; 0x48
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f01c f972 	bl	801dc14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001942:	f003 fe41 	bl	80055c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff ffbc 	bl	80018c4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <SystemClock_Config+0xb8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001954:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <SystemClock_Config+0xb8>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <SystemClock_Config+0xb8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001968:	2326      	movs	r3, #38	; 0x26
 800196a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800196c:	2381      	movs	r3, #129	; 0x81
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001976:	2301      	movs	r3, #1
 8001978:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197a:	2340      	movs	r3, #64	; 0x40
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800197e:	2300      	movs	r3, #0
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001982:	23b0      	movs	r3, #176	; 0xb0
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	4618      	mov	r0, r3
 8001990:	f004 f966 	bl	8005c60 <HAL_RCC_OscConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800199a:	f000 f81d 	bl	80019d8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800199e:	234f      	movs	r3, #79	; 0x4f
 80019a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fcd1 	bl	8006364 <HAL_RCC_ClockConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80019c8:	f000 f806 	bl	80019d8 <Error_Handler>
  }
}
 80019cc:	bf00      	nop
 80019ce:	3768      	adds	r7, #104	; 0x68
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	58000400 	.word	0x58000400

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <Error_Handler+0x8>

080019e2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <LL_APB1_GRP1_EnableClock>:
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	222c      	movs	r2, #44	; 0x2c
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f01c f8e7 	bl	801dc14 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <MX_RTC_Init+0xa0>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a4e:	221f      	movs	r2, #31
 8001a50:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a7a:	4815      	ldr	r0, [pc, #84]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a7c:	f005 f92e 	bl	8006cdc <HAL_RTC_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a86:	f7ff ffa7 	bl	80019d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a8a:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001a8c:	f005 fc24 	bl	80072d8 <HAL_RTCEx_SetSSRU_IT>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a96:	f7ff ff9f 	bl	80019d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001aa6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001aaa:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_RTC_Init+0x9c>)
 8001aba:	f005 f991 	bl	8006de0 <HAL_RTC_SetAlarm_IT>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ac4:	f7ff ff88 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	3730      	adds	r7, #48	; 0x30
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000220 	.word	0x20000220
 8001ad4:	40002800 	.word	0x40002800

08001ad8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b090      	sub	sp, #64	; 0x40
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	2238      	movs	r2, #56	; 0x38
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f01c f893 	bl	801dc14 <memset>
  if(rtcHandle->Instance==RTC)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_RTC_MspInit+0x74>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d125      	bne.n	8001b44 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 ffcd 	bl	8006aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b14:	f7ff ff60 	bl	80019d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b18:	f7ff ff63 	bl	80019e2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b20:	f7ff ff6f 	bl	8001a02 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f002 fba8 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f002 fbbf 	bl	80042b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	202a      	movs	r0, #42	; 0x2a
 8001b3a:	f002 fba0 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b3e:	202a      	movs	r0, #42	; 0x2a
 8001b40:	f002 fbb7 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b44:	bf00      	nop
 8001b46:	3740      	adds	r7, #64	; 0x40
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40002800 	.word	0x40002800

08001b50 <LL_AHB2_GRP1_EnableClock>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <LL_APB1_GRP1_EnableClock>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <MX_SPI2_Init+0x78>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001bfe:	2207      	movs	r2, #7
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_SPI2_Init+0x74>)
 8001c10:	f005 fbf0 	bl	80073f4 <HAL_SPI_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c1a:	f7ff fedd 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000258 	.word	0x20000258
 8001c28:	40003800 	.word	0x40003800

08001c2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b096      	sub	sp, #88	; 0x58
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2238      	movs	r2, #56	; 0x38
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f01b ffe1 	bl	801dc14 <memset>
  if(spiHandle->Instance==SPI2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <HAL_SPI_MspInit+0xd8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d14e      	bne.n	8001cfa <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 ff1c 	bl	8006aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c76:	f7ff feaf 	bl	80019d8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c7e:	f7ff ff7f 	bl	8001b80 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2002      	movs	r0, #2
 8001c84:	f7ff ff64 	bl	8001b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff ff61 	bl	8001b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	2004      	movs	r0, #4
 8001c90:	f7ff ff5e 	bl	8001b50 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c98:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4815      	ldr	r0, [pc, #84]	; (8001d08 <HAL_SPI_MspInit+0xdc>)
 8001cb2:	f003 f91f 	bl	8004ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc8:	2305      	movs	r3, #5
 8001cca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd6:	f003 f90d 	bl	8004ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001cea:	2303      	movs	r3, #3
 8001cec:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <HAL_SPI_MspInit+0xe0>)
 8001cf6:	f003 f8fd 	bl	8004ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3758      	adds	r7, #88	; 0x58
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40003800 	.word	0x40003800
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800

08001d10 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	58000400 	.word	0x58000400

08001d28 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d44:	f001 f908 	bl	8002f58 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001d48:	f7ff ffe2 	bl	8001d10 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f003 fccd 	bl	80056ec <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d5a:	f001 f90b 	bl	8002f74 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d5e:	f000 fec7 	bl	8002af0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d6a:	f001 f8f5 	bl	8002f58 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2000      	movs	r0, #0
 8001d72:	f003 fc37 	bl	80055e4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d7e:	f001 f8f9 	bl	8002f74 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <NMI_Handler+0x4>

08001d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <HardFault_Handler+0x4>

08001d9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <MemManage_Handler+0x4>

08001da4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <BusFault_Handler+0x4>

08001daa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <UsageFault_Handler+0x4>

08001db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001de6:	f005 fab3 	bl	8007350 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000220 	.word	0x20000220

08001df4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <DMA1_Channel1_IRQHandler+0x10>)
 8001dfa:	f002 fcf1 	bl	80047e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000364 	.word	0x20000364

08001e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART1_IRQHandler+0x10>)
 8001e0e:	f006 f9bd 	bl	800818c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200002d0 	.word	0x200002d0

08001e1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <RTC_Alarm_IRQHandler+0x10>)
 8001e22:	f005 f945 	bl	80070b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000220 	.word	0x20000220

08001e30 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e36:	f005 fecd 	bl	8007bd4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200002bc 	.word	0x200002bc

08001e44 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e68:	68fb      	ldr	r3, [r7, #12]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_SUBGHZ_Init+0x20>)
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_SUBGHZ_Init+0x20>)
 8001e80:	f005 fc26 	bl	80076d0 <HAL_SUBGHZ_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e8a:	f7ff fda5 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200002bc 	.word	0x200002bc

08001e98 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ffcf 	bl	8001e44 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2032      	movs	r0, #50	; 0x32
 8001eac:	f002 f9e7 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001eb0:	2032      	movs	r0, #50	; 0x32
 8001eb2:	f002 f9fe 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <LL_FLASH_GetUDN+0x10>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	1fff7580 	.word	0x1fff7580

08001ef8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <LL_FLASH_GetDeviceID+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	1fff7584 	.word	0x1fff7584

08001f10 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <LL_FLASH_GetSTCompanyID+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0a1b      	lsrs	r3, r3, #8
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	1fff7584 	.word	0x1fff7584

08001f28 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff ffc6 	bl	8001ebe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f32:	f01b f939 	bl	801d1a8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <SystemApp_Init+0x48>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f3c:	f000 f974 	bl	8002228 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f40:	f01b fbc2 	bl	801d6c8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f44:	480b      	ldr	r0, [pc, #44]	; (8001f74 <SystemApp_Init+0x4c>)
 8001f46:	f01b fc6d 	bl	801d824 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <SystemApp_Init+0x50>)
 8001f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f50:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f52:	2002      	movs	r0, #2
 8001f54:	f01b fc74 	bl	801d840 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f58:	f7ff f87c 	bl	8001054 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f5c:	f000 f998 	bl	8002290 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f60:	f01a faee 	bl	801c540 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f64:	2101      	movs	r1, #1
 8001f66:	2001      	movs	r0, #1
 8001f68:	f01a fb2a 	bl	801c5c0 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200002c8 	.word	0x200002c8
 8001f74:	08002149 	.word	0x08002149
 8001f78:	58004000 	.word	0x58004000

08001f7c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f80:	f01a fb4e 	bl	801c620 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f92:	f7ff f86d 	bl	8001070 <SYS_GetBatteryLevel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d902      	bls.n	8001faa <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001fa4:	23fe      	movs	r3, #254	; 0xfe
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	e014      	b.n	8001fd4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001faa:	88bb      	ldrh	r3, [r7, #4]
 8001fac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001fb0:	d202      	bcs.n	8001fb8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	71fb      	strb	r3, [r7, #7]
 8001fb6:	e00d      	b.n	8001fd4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	01db      	lsls	r3, r3, #7
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <GetBatteryLevel+0x58>)
 8001fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8001fd0:	09db      	lsrs	r3, r3, #7
 8001fd2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	1b4e81b5 	.word	0x1b4e81b5

08001fe4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f923 	bl	800223c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fd8f 	bl	8000b1c <__aeabi_f2iz>
 8001ffe:	4603      	mov	r3, r0
 8002000:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002002:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800200e:	b590      	push	{r4, r7, lr}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800201a:	f7ff ff63 	bl	8001ee4 <LL_FLASH_GetUDN>
 800201e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002026:	d138      	bne.n	800209a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002028:	f000 ffb2 	bl	8002f90 <HAL_GetUIDw0>
 800202c:	4604      	mov	r4, r0
 800202e:	f000 ffc3 	bl	8002fb8 <HAL_GetUIDw2>
 8002032:	4603      	mov	r3, r0
 8002034:	4423      	add	r3, r4
 8002036:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002038:	f000 ffb4 	bl	8002fa4 <HAL_GetUIDw1>
 800203c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	0e1a      	lsrs	r2, r3, #24
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3307      	adds	r3, #7
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	0c1a      	lsrs	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3306      	adds	r3, #6
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	0a1a      	lsrs	r2, r3, #8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3305      	adds	r3, #5
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	0e1a      	lsrs	r2, r3, #24
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3303      	adds	r3, #3
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0c1a      	lsrs	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3302      	adds	r3, #2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	0a1a      	lsrs	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3301      	adds	r3, #1
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002098:	e031      	b.n	80020fe <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3307      	adds	r3, #7
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	0a1a      	lsrs	r2, r3, #8
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3306      	adds	r3, #6
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	0c1a      	lsrs	r2, r3, #16
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3305      	adds	r3, #5
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	0e1a      	lsrs	r2, r3, #24
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020c8:	f7ff ff16 	bl	8001ef8 <LL_FLASH_GetDeviceID>
 80020cc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3303      	adds	r3, #3
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80020d8:	f7ff ff1a 	bl	8001f10 <LL_FLASH_GetSTCompanyID>
 80020dc:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3302      	adds	r3, #2
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	0a1a      	lsrs	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3301      	adds	r3, #1
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	0c1b      	lsrs	r3, r3, #16
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	701a      	strb	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}

08002106 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002106:	b590      	push	{r4, r7, lr}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800210e:	f7ff fee9 	bl	8001ee4 <LL_FLASH_GetUDN>
 8002112:	4602      	mov	r2, r0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002120:	d10d      	bne.n	800213e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002122:	f000 ff35 	bl	8002f90 <HAL_GetUIDw0>
 8002126:	4604      	mov	r4, r0
 8002128:	f000 ff3c 	bl	8002fa4 <HAL_GetUIDw1>
 800212c:	4603      	mov	r3, r0
 800212e:	405c      	eors	r4, r3
 8002130:	f000 ff42 	bl	8002fb8 <HAL_GetUIDw2>
 8002134:	4603      	mov	r3, r0
 8002136:	ea84 0203 	eor.w	r2, r4, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
	...

08002148 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af02      	add	r7, sp, #8
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	4618      	mov	r0, r3
 8002158:	f01a fb72 	bl	801c840 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002162:	9200      	str	r2, [sp, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <TimestampNow+0x3c>)
 8002166:	2110      	movs	r1, #16
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f81d 	bl	80021a8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe f802 	bl	8000178 <strlen>
 8002174:	4603      	mov	r3, r0
 8002176:	b29a      	uxth	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	0801dd88 	.word	0x0801dd88

08002188 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800218c:	2101      	movs	r1, #1
 800218e:	2002      	movs	r0, #2
 8002190:	f01a f9e6 	bl	801c560 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800219c:	2100      	movs	r1, #0
 800219e:	2002      	movs	r0, #2
 80021a0:	f01a f9de 	bl	801c560 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80021a8:	b40c      	push	{r2, r3}
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f01a fd0f 	bl	801cbe4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021d0:	b002      	add	sp, #8
 80021d2:	4770      	bx	lr

080021d4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_GetTick+0x24>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80021fa:	f000 f915 	bl	8002428 <TIMER_IF_GetTimerValue>
 80021fe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200002c8 	.word	0x200002c8

08002210 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f98b 	bl	8002536 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800222c:	f000 fece 	bl	8002fcc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002230:	f000 fed2 	bl	8002fd8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002234:	f000 fed6 	bl	8002fe4 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <EnvSensors_Read+0x40>)
 8002246:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <EnvSensors_Read+0x44>)
 800224a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <EnvSensors_Read+0x48>)
 800224e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <EnvSensors_Read+0x4c>)
 8002266:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <EnvSensors_Read+0x50>)
 800226c:	611a      	str	r2, [r3, #16]

  return 0;
 800226e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	42480000 	.word	0x42480000
 8002280:	41900000 	.word	0x41900000
 8002284:	447a0000 	.word	0x447a0000
 8002288:	003e090d 	.word	0x003e090d
 800228c:	000503ab 	.word	0x000503ab

08002290 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800229a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <TIMER_IF_Init+0x5c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <TIMER_IF_Init+0x60>)
 80022e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80022e8:	f7ff fba4 	bl	8001a34 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80022ec:	f000 f856 	bl	800239c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <TIMER_IF_Init+0x60>)
 80022f6:	f004 fe7f 	bl	8006ff8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <TIMER_IF_Init+0x60>)
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002300:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <TIMER_IF_Init+0x60>)
 8002304:	f004 ffb6 	bl	8007274 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002308:	2000      	movs	r0, #0
 800230a:	f000 f9d3 	bl	80026b4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800230e:	f000 f85f 	bl	80023d0 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <TIMER_IF_Init+0x5c>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002318:	79fb      	ldrb	r3, [r7, #7]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200002c9 	.word	0x200002c9
 8002328:	20000220 	.word	0x20000220

0800232c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08e      	sub	sp, #56	; 0x38
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	222c      	movs	r2, #44	; 0x2c
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f01b fc66 	bl	801dc14 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002348:	f000 f828 	bl	800239c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <TIMER_IF_StartTimer+0x68>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	43db      	mvns	r3, r3
 800235e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002364:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002368:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800236a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	2201      	movs	r2, #1
 8002376:	4619      	mov	r1, r3
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <TIMER_IF_StartTimer+0x6c>)
 800237a:	f004 fd31 	bl	8006de0 <HAL_RTC_SetAlarm_IT>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002384:	f7ff fb28 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800238c:	4618      	mov	r0, r3
 800238e:	3738      	adds	r7, #56	; 0x38
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200002cc 	.word	0x200002cc
 8002398:	20000220 	.word	0x20000220

0800239c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <TIMER_IF_StopTimer+0x2c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b0:	4806      	ldr	r0, [pc, #24]	; (80023cc <TIMER_IF_StopTimer+0x30>)
 80023b2:	f004 fe21 	bl	8006ff8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <TIMER_IF_StopTimer+0x30>)
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80023be:	79fb      	ldrb	r3, [r7, #7]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40002800 	.word	0x40002800
 80023cc:	20000220 	.word	0x20000220

080023d0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80023d4:	f000 f98e 	bl	80026f4 <GetTimerTicks>
 80023d8:	4603      	mov	r3, r0
 80023da:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <TIMER_IF_SetTimerContext+0x18>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023de:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <TIMER_IF_SetTimerContext+0x18>)
 80023e0:	681b      	ldr	r3, [r3, #0]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200002cc 	.word	0x200002cc

080023ec <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023f0:	4b02      	ldr	r3, [pc, #8]	; (80023fc <TIMER_IF_GetTimerContext+0x10>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	200002cc 	.word	0x200002cc

08002400 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800240a:	f000 f973 	bl	80026f4 <GetTimerTicks>
 800240e:	4602      	mov	r2, r0
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200002cc 	.word	0x200002cc

08002428 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <TIMER_IF_GetTimerValue+0x24>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800243a:	f000 f95b 	bl	80026f4 <GetTimerTicks>
 800243e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200002c9 	.word	0x200002c9

08002450 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800245a:	2303      	movs	r3, #3
 800245c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800246a:	b5b0      	push	{r4, r5, r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002472:	2100      	movs	r1, #0
 8002474:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	2000      	movs	r0, #0
 800247a:	460a      	mov	r2, r1
 800247c:	4603      	mov	r3, r0
 800247e:	0d95      	lsrs	r5, r2, #22
 8002480:	0294      	lsls	r4, r2, #10
 8002482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	4620      	mov	r0, r4
 800248c:	4629      	mov	r1, r5
 800248e:	f7fe fb8b 	bl	8000ba8 <__aeabi_uldivmod>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4613      	mov	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bdb0      	pop	{r4, r5, r7, pc}

080024a4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80024a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024ae:	2100      	movs	r1, #0
 80024b0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	2000      	movs	r0, #0
 80024b6:	460c      	mov	r4, r1
 80024b8:	4605      	mov	r5, r0
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f04f 0a00 	mov.w	sl, #0
 80024c2:	f04f 0b00 	mov.w	fp, #0
 80024c6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80024ca:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80024ce:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80024d2:	4650      	mov	r0, sl
 80024d4:	4659      	mov	r1, fp
 80024d6:	1b02      	subs	r2, r0, r4
 80024d8:	eb61 0305 	sbc.w	r3, r1, r5
 80024dc:	f04f 0000 	mov.w	r0, #0
 80024e0:	f04f 0100 	mov.w	r1, #0
 80024e4:	0099      	lsls	r1, r3, #2
 80024e6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80024ea:	0090      	lsls	r0, r2, #2
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	eb12 0804 	adds.w	r8, r2, r4
 80024f4:	eb43 0905 	adc.w	r9, r3, r5
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002504:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002508:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800250c:	4690      	mov	r8, r2
 800250e:	4699      	mov	r9, r3
 8002510:	4640      	mov	r0, r8
 8002512:	4649      	mov	r1, r9
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	0a82      	lsrs	r2, r0, #10
 800251e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002522:	0a8b      	lsrs	r3, r1, #10
 8002524:	4613      	mov	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002534:	4770      	bx	lr

08002536 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff93 	bl	800246a <TIMER_IF_Convert_ms2Tick>
 8002544:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002546:	f000 f8d5 	bl	80026f4 <GetTimerTicks>
 800254a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800254c:	e000      	b.n	8002550 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800254e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002550:	f000 f8d0 	bl	80026f4 <GetTimerTicks>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f6      	bhi.n	800254e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002572:	f01a ff67 	bl	801d444 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002586:	f000 f8a5 	bl	80026d4 <TIMER_IF_BkUp_Read_MSBticks>
 800258a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3301      	adds	r3, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f88f 	bl	80026b4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800259e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80025ac:	f000 f8a2 	bl	80026f4 <GetTimerTicks>
 80025b0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80025b2:	f000 f88f 	bl	80026d4 <TIMER_IF_BkUp_Read_MSBticks>
 80025b6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	2200      	movs	r2, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	60fa      	str	r2, [r7, #12]
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	000b      	movs	r3, r1
 80025cc:	2200      	movs	r2, #0
 80025ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025d0:	2000      	movs	r0, #0
 80025d2:	460c      	mov	r4, r1
 80025d4:	4605      	mov	r5, r0
 80025d6:	eb12 0804 	adds.w	r8, r2, r4
 80025da:	eb43 0905 	adc.w	r9, r3, r5
 80025de:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80025e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	0a82      	lsrs	r2, r0, #10
 80025f0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80025f4:	0a8b      	lsrs	r3, r1, #10
 80025f6:	4613      	mov	r3, r2
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2200      	movs	r2, #0
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002608:	f04f 0b00 	mov.w	fp, #0
 800260c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff46 	bl	80024a4 <TIMER_IF_Convert_Tick2ms>
 8002618:	4603      	mov	r3, r0
 800261a:	b29a      	uxth	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002622:	4618      	mov	r0, r3
 8002624:	3730      	adds	r7, #48	; 0x30
 8002626:	46bd      	mov	sp, r7
 8002628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800262c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	2100      	movs	r1, #0
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800263a:	f004 fead 	bl	8007398 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000220 	.word	0x20000220

0800264c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	2101      	movs	r1, #1
 8002658:	4803      	ldr	r0, [pc, #12]	; (8002668 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800265a:	f004 fe9d 	bl	8007398 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000220 	.word	0x20000220

0800266c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002676:	2100      	movs	r1, #0
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800267a:	f004 fea5 	bl	80073c8 <HAL_RTCEx_BKUPRead>
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000220 	.word	0x20000220

08002690 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800269a:	2101      	movs	r1, #1
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800269e:	f004 fe93 	bl	80073c8 <HAL_RTCEx_BKUPRead>
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80026a4:	687b      	ldr	r3, [r7, #4]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000220 	.word	0x20000220

080026b4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	2102      	movs	r1, #2
 80026c0:	4803      	ldr	r0, [pc, #12]	; (80026d0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80026c2:	f004 fe69 	bl	8007398 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000220 	.word	0x20000220

080026d4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026da:	2102      	movs	r1, #2
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80026de:	f004 fe73 	bl	80073c8 <HAL_RTCEx_BKUPRead>
 80026e2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80026e4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000220 	.word	0x20000220

080026f4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026fa:	480b      	ldr	r0, [pc, #44]	; (8002728 <GetTimerTicks+0x34>)
 80026fc:	f7ff fdd9 	bl	80022b2 <LL_RTC_TIME_GetSubSecond>
 8002700:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002702:	e003      	b.n	800270c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002704:	4808      	ldr	r0, [pc, #32]	; (8002728 <GetTimerTicks+0x34>)
 8002706:	f7ff fdd4 	bl	80022b2 <LL_RTC_TIME_GetSubSecond>
 800270a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800270c:	4806      	ldr	r0, [pc, #24]	; (8002728 <GetTimerTicks+0x34>)
 800270e:	f7ff fdd0 	bl	80022b2 <LL_RTC_TIME_GetSubSecond>
 8002712:	4602      	mov	r2, r0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4293      	cmp	r3, r2
 8002718:	d1f4      	bne.n	8002704 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40002800 	.word	0x40002800

0800272c <LL_AHB2_GRP1_EnableClock>:
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800273a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4013      	ands	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <LL_APB2_GRP1_EnableClock>:
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800276a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4313      	orrs	r3, r2
 8002772:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <LL_APB2_GRP1_DisableClock>:
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	43db      	mvns	r3, r3
 800279e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a2:	4013      	ands	r3, r2
 80027a4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <MX_USART1_UART_Init+0x94>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027f8:	4811      	ldr	r0, [pc, #68]	; (8002840 <MX_USART1_UART_Init+0x90>)
 80027fa:	f005 fbaa 	bl	8007f52 <HAL_UART_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002804:	f7ff f8e8 	bl	80019d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002808:	2100      	movs	r1, #0
 800280a:	480d      	ldr	r0, [pc, #52]	; (8002840 <MX_USART1_UART_Init+0x90>)
 800280c:	f007 fccd 	bl	800a1aa <HAL_UARTEx_SetTxFifoThreshold>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002816:	f7ff f8df 	bl	80019d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800281a:	2100      	movs	r1, #0
 800281c:	4808      	ldr	r0, [pc, #32]	; (8002840 <MX_USART1_UART_Init+0x90>)
 800281e:	f007 fd02 	bl	800a226 <HAL_UARTEx_SetRxFifoThreshold>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002828:	f7ff f8d6 	bl	80019d8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800282c:	4804      	ldr	r0, [pc, #16]	; (8002840 <MX_USART1_UART_Init+0x90>)
 800282e:	f007 fc81 	bl	800a134 <HAL_UARTEx_EnableFifoMode>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002838:	f7ff f8ce 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200002d0 	.word	0x200002d0
 8002844:	40013800 	.word	0x40013800

08002848 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b096      	sub	sp, #88	; 0x58
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	2238      	movs	r2, #56	; 0x38
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f01b f9d3 	bl	801dc14 <memset>
  if(uartHandle->Instance==USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <HAL_UART_MspInit+0xe8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d156      	bne.n	8002926 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002878:	2301      	movs	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800287c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002880:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	4618      	mov	r0, r3
 8002888:	f004 f90e 	bl	8006aa8 <HAL_RCCEx_PeriphCLKConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002892:	f7ff f8a1 	bl	80019d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800289a:	f7ff ff5f 	bl	800275c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	2002      	movs	r0, #2
 80028a0:	f7ff ff44 	bl	800272c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b4:	2307      	movs	r3, #7
 80028b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028bc:	4619      	mov	r1, r3
 80028be:	481d      	ldr	r0, [pc, #116]	; (8002934 <HAL_UART_MspInit+0xec>)
 80028c0:	f002 fb18 	bl	8004ef4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028c6:	4a1d      	ldr	r2, [pc, #116]	; (800293c <HAL_UART_MspInit+0xf4>)
 80028c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028cc:	2212      	movs	r2, #18
 80028ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028d2:	2210      	movs	r2, #16
 80028d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028fa:	480f      	ldr	r0, [pc, #60]	; (8002938 <HAL_UART_MspInit+0xf0>)
 80028fc:	f001 fcf6 	bl	80042ec <HAL_DMA_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002906:	f7ff f867 	bl	80019d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_UART_MspInit+0xf0>)
 800290e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002910:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_UART_MspInit+0xf0>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2102      	movs	r1, #2
 800291a:	2024      	movs	r0, #36	; 0x24
 800291c:	f001 fcaf 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002920:	2024      	movs	r0, #36	; 0x24
 8002922:	f001 fcc6 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002926:	bf00      	nop
 8002928:	3758      	adds	r7, #88	; 0x58
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40013800 	.word	0x40013800
 8002934:	48000400 	.word	0x48000400
 8002938:	20000364 	.word	0x20000364
 800293c:	40020008 	.word	0x40020008

08002940 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_UART_MspDeInit+0x3c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10f      	bne.n	8002972 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002952:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002956:	f7ff ff19 	bl	800278c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800295a:	21c0      	movs	r1, #192	; 0xc0
 800295c:	4808      	ldr	r0, [pc, #32]	; (8002980 <HAL_UART_MspDeInit+0x40>)
 800295e:	f002 fc29 	bl	80051b4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fd68 	bl	800443c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800296c:	2024      	movs	r0, #36	; 0x24
 800296e:	f001 fcae 	bl	80042ce <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40013800 	.word	0x40013800
 8002980:	48000400 	.word	0x48000400

08002984 <LL_APB2_GRP1_ForceReset>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4313      	orrs	r3, r2
 800299a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_APB2_GRP1_ReleaseReset>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029bc:	4013      	ands	r3, r2
 80029be:	640b      	str	r3, [r1, #64]	; 0x40
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
	...

080029cc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80029d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80029da:	4905      	ldr	r1, [pc, #20]	; (80029f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	58000800 	.word	0x58000800

080029f4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <vcom_Init+0x28>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002a02:	f7fe fbc7 	bl	8001194 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002a06:	f7ff fed3 	bl	80027b0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002a0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a0e:	f7ff ffdd 	bl	80029cc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002a12:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200003c8 	.word	0x200003c8

08002a20 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002a24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a28:	f7ff ffac 	bl	8002984 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002a2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a30:	f7ff ffb9 	bl	80029a6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <vcom_DeInit+0x28>)
 8002a36:	f7ff ff83 	bl	8002940 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002a3a:	200f      	movs	r0, #15
 8002a3c:	f001 fc47 	bl	80042ce <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002a40:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200002d0 	.word	0x200002d0

08002a4c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4804      	ldr	r0, [pc, #16]	; (8002a70 <vcom_Trace_DMA+0x24>)
 8002a60:	f005 fb14 	bl	800808c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002a64:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200002d0 	.word	0x200002d0

08002a74 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <vcom_ReceiveInit+0x70>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a86:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a90:	4815      	ldr	r0, [pc, #84]	; (8002ae8 <vcom_ReceiveInit+0x74>)
 8002a92:	f007 fac2 	bl	800a01a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002a96:	bf00      	nop
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <vcom_ReceiveInit+0x74>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d0f7      	beq.n	8002a98 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002aa8:	bf00      	nop
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <vcom_ReceiveInit+0x74>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab8:	d1f7      	bne.n	8002aaa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <vcom_ReceiveInit+0x74>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <vcom_ReceiveInit+0x74>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ac8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002aca:	4807      	ldr	r0, [pc, #28]	; (8002ae8 <vcom_ReceiveInit+0x74>)
 8002acc:	f007 fb00 	bl	800a0d0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4906      	ldr	r1, [pc, #24]	; (8002aec <vcom_ReceiveInit+0x78>)
 8002ad4:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <vcom_ReceiveInit+0x74>)
 8002ad6:	f005 fa8d 	bl	8007ff4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002ada:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200003cc 	.word	0x200003cc
 8002ae8:	200002d0 	.word	0x200002d0
 8002aec:	200003c4 	.word	0x200003c4

08002af0 <vcom_Resume>:

void vcom_Resume(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002af4:	4808      	ldr	r0, [pc, #32]	; (8002b18 <vcom_Resume+0x28>)
 8002af6:	f005 fa2c 	bl	8007f52 <HAL_UART_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002b00:	f7fe ff6a 	bl	80019d8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <vcom_Resume+0x2c>)
 8002b06:	f001 fbf1 	bl	80042ec <HAL_DMA_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002b10:	f7fe ff62 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200002d0 	.word	0x200002d0
 8002b1c:	20000364 	.word	0x20000364

08002b20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <HAL_UART_TxCpltCallback+0x24>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d103      	bne.n	8002b3a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_UART_TxCpltCallback+0x28>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2000      	movs	r0, #0
 8002b38:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40013800 	.word	0x40013800
 8002b48:	200003c8 	.word	0x200003c8

08002b4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_UART_RxCpltCallback+0x44>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d113      	bne.n	8002b86 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_UART_RxCpltCallback+0x48>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_UART_RxCpltCallback+0x30>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_UART_RxCpltCallback+0x48>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2101      	movs	r1, #1
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <HAL_UART_RxCpltCallback+0x4c>)
 8002b7a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4906      	ldr	r1, [pc, #24]	; (8002b98 <HAL_UART_RxCpltCallback+0x4c>)
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f005 fa37 	bl	8007ff4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40013800 	.word	0x40013800
 8002b94:	200003cc 	.word	0x200003cc
 8002b98:	200003c4 	.word	0x200003c4

08002b9c <Reset_Handler>:
 8002b9c:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <LoopForever+0x2>)
 8002b9e:	4685      	mov	sp, r0
 8002ba0:	f7ff fb81 	bl	80022a6 <SystemInit>
 8002ba4:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <LoopForever+0x6>)
 8002ba6:	490d      	ldr	r1, [pc, #52]	; (8002bdc <LoopForever+0xa>)
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <LoopForever+0xe>)
 8002baa:	2300      	movs	r3, #0
 8002bac:	e002      	b.n	8002bb4 <LoopCopyDataInit>

08002bae <CopyDataInit>:
 8002bae:	58d4      	ldr	r4, [r2, r3]
 8002bb0:	50c4      	str	r4, [r0, r3]
 8002bb2:	3304      	adds	r3, #4

08002bb4 <LoopCopyDataInit>:
 8002bb4:	18c4      	adds	r4, r0, r3
 8002bb6:	428c      	cmp	r4, r1
 8002bb8:	d3f9      	bcc.n	8002bae <CopyDataInit>
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <LoopForever+0x12>)
 8002bbc:	4c0a      	ldr	r4, [pc, #40]	; (8002be8 <LoopForever+0x16>)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e001      	b.n	8002bc6 <LoopFillZerobss>

08002bc2 <FillZerobss>:
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	3204      	adds	r2, #4

08002bc6 <LoopFillZerobss>:
 8002bc6:	42a2      	cmp	r2, r4
 8002bc8:	d3fb      	bcc.n	8002bc2 <FillZerobss>
 8002bca:	f01b f82b 	bl	801dc24 <__libc_init_array>
 8002bce:	f7fe fe8e 	bl	80018ee <main>

08002bd2 <LoopForever>:
 8002bd2:	e7fe      	b.n	8002bd2 <LoopForever>
 8002bd4:	20010000 	.word	0x20010000
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000148 	.word	0x20000148
 8002be0:	0801ede4 	.word	0x0801ede4
 8002be4:	20000148 	.word	0x20000148
 8002be8:	200022d0 	.word	0x200022d0

08002bec <ADC_IRQHandler>:
 8002bec:	e7fe      	b.n	8002bec <ADC_IRQHandler>
	...

08002bf0 <Enable_Memory_CS>:
#include "stm32wlxx_nucleo.h"

// Memory_CS
void Enable_Memory_CS(void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Memory_CS_GPIO_Port, Memory_CS_Pin, GPIO_PIN_SET);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bfa:	4802      	ldr	r0, [pc, #8]	; (8002c04 <Enable_Memory_CS+0x14>)
 8002bfc:	f002 fba8 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	48000400 	.word	0x48000400

08002c08 <Disable_Memory_CS>:

void Disable_Memory_CS(void) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Memory_CS_GPIO_Port, Memory_CS_Pin, GPIO_PIN_RESET);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c12:	4802      	ldr	r0, [pc, #8]	; (8002c1c <Disable_Memory_CS+0x14>)
 8002c14:	f002 fb9c 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	48000400 	.word	0x48000400

08002c20 <Enable_Bias_CS>:

// Bias_CS
void Enable_Bias_CS(void) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 8002c24:	2201      	movs	r2, #1
 8002c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2e:	f002 fb8f 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <Disable_Bias_CS>:

void Disable_Bias_CS(void) {
 8002c36:	b580      	push	{r7, lr}
 8002c38:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_RESET);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c44:	f002 fb84 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <Status_LED_Off>:

// Staus LED
void Status_LED_Off(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
 8002c50:	2201      	movs	r2, #1
 8002c52:	2120      	movs	r1, #32
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <Status_LED_Off+0x14>)
 8002c56:	f002 fb7b 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	48000400 	.word	0x48000400

08002c64 <Status_LED_On>:

void Status_LED_On(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <Status_LED_On+0x14>)
 8002c6e:	f002 fb6f 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	48000400 	.word	0x48000400

08002c7c <Enable_Anneal_LED>:

// Anneal_Enable
void Enable_Anneal_LED(void) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_SET);
 8002c80:	2201      	movs	r2, #1
 8002c82:	2101      	movs	r1, #1
 8002c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c88:	f002 fb62 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <Disable_Anneal_LED>:

void Disable_Anneal_LED(void) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2101      	movs	r1, #1
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9c:	f002 fb58 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <Enable_Bias>:

    // Bias_Enable
void Enable_Bias(void) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Bias_Enable_GPIO_Port, Bias_Enable_Pin, GPIO_PIN_SET);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2108      	movs	r1, #8
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f002 fb4e 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <Disable_Bias>:

void Disable_Bias(void) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Bias_Enable_GPIO_Port, Bias_Enable_Pin, GPIO_PIN_RESET);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc4:	f002 fb44 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <Enable_Stim_LED>:

// Stim_Enable
void Enable_Stim_LED(void) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_SET);
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd8:	f002 fb3a 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <Disable_Stim_LED>:

void Disable_Stim_LED(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cec:	f002 fb30 	bl	8005350 <HAL_GPIO_WritePin>
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <testGPIO>:

void testGPIO(void) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	// Memory_CS
	Enable_Memory_CS();
 8002cf8:	f7ff ff7a 	bl	8002bf0 <Enable_Memory_CS>
	HAL_Delay(20);
 8002cfc:	2014      	movs	r0, #20
 8002cfe:	f7ff fa87 	bl	8002210 <HAL_Delay>
	Disable_Memory_CS();
 8002d02:	f7ff ff81 	bl	8002c08 <Disable_Memory_CS>
	HAL_Delay(20);
 8002d06:	2014      	movs	r0, #20
 8002d08:	f7ff fa82 	bl	8002210 <HAL_Delay>

	// Bias_CS
	Enable_Bias_CS();
 8002d0c:	f7ff ff88 	bl	8002c20 <Enable_Bias_CS>
	HAL_Delay(20);
 8002d10:	2014      	movs	r0, #20
 8002d12:	f7ff fa7d 	bl	8002210 <HAL_Delay>
	Disable_Bias_CS();
 8002d16:	f7ff ff8e 	bl	8002c36 <Disable_Bias_CS>
	HAL_Delay(20);
 8002d1a:	2014      	movs	r0, #20
 8002d1c:	f7ff fa78 	bl	8002210 <HAL_Delay>

	// Status LED
	Status_LED_Off();
 8002d20:	f7ff ff94 	bl	8002c4c <Status_LED_Off>
	HAL_Delay(20);
 8002d24:	2014      	movs	r0, #20
 8002d26:	f7ff fa73 	bl	8002210 <HAL_Delay>
	Status_LED_On();
 8002d2a:	f7ff ff9b 	bl	8002c64 <Status_LED_On>
	HAL_Delay(20);
 8002d2e:	2014      	movs	r0, #20
 8002d30:	f7ff fa6e 	bl	8002210 <HAL_Delay>

	// Anneal_Enable
	Enable_Anneal_LED();
 8002d34:	f7ff ffa2 	bl	8002c7c <Enable_Anneal_LED>
	HAL_Delay(20);
 8002d38:	2014      	movs	r0, #20
 8002d3a:	f7ff fa69 	bl	8002210 <HAL_Delay>
	Disable_Anneal_LED();
 8002d3e:	f7ff ffa7 	bl	8002c90 <Disable_Anneal_LED>
	HAL_Delay(20);
 8002d42:	2014      	movs	r0, #20
 8002d44:	f7ff fa64 	bl	8002210 <HAL_Delay>

	// Bias_Enable
	Enable_Bias();
 8002d48:	f7ff ffac 	bl	8002ca4 <Enable_Bias>
	HAL_Delay(20);
 8002d4c:	2014      	movs	r0, #20
 8002d4e:	f7ff fa5f 	bl	8002210 <HAL_Delay>
	Disable_Bias();
 8002d52:	f7ff ffb1 	bl	8002cb8 <Disable_Bias>
	HAL_Delay(20);
 8002d56:	2014      	movs	r0, #20
 8002d58:	f7ff fa5a 	bl	8002210 <HAL_Delay>

	// Stim_Enable
	Enable_Stim_LED();
 8002d5c:	f7ff ffb6 	bl	8002ccc <Enable_Stim_LED>
	HAL_Delay(20);
 8002d60:	2014      	movs	r0, #20
 8002d62:	f7ff fa55 	bl	8002210 <HAL_Delay>
	Disable_Stim_LED();
 8002d66:	f7ff ffbb 	bl	8002ce0 <Disable_Stim_LED>
	HAL_Delay(20);
 8002d6a:	2014      	movs	r0, #20
 8002d6c:	f7ff fa50 	bl	8002210 <HAL_Delay>

}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002d88:	2310      	movs	r3, #16
 8002d8a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da0:	f002 f8a8 	bl	8004ef4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002da4:	2320      	movs	r3, #32
 8002da6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db0:	f002 f8a0 	bl	8004ef4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002db4:	2200      	movs	r2, #0
 8002db6:	2120      	movs	r1, #32
 8002db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbc:	f002 fac8 	bl	8005350 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2110      	movs	r1, #16
 8002dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc8:	f002 fac2 	bl	8005350 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d83f      	bhi.n	8002e68 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e1b 	.word	0x08002e1b
 8002df8:	08002e35 	.word	0x08002e35
 8002dfc:	08002e4f 	.word	0x08002e4f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2110      	movs	r1, #16
 8002e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e08:	f002 faa2 	bl	8005350 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2120      	movs	r1, #32
 8002e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e14:	f002 fa9c 	bl	8005350 <HAL_GPIO_WritePin>
      break;      
 8002e18:	e027      	b.n	8002e6a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e22:	f002 fa95 	bl	8005350 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e26:	2200      	movs	r2, #0
 8002e28:	2120      	movs	r1, #32
 8002e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2e:	f002 fa8f 	bl	8005350 <HAL_GPIO_WritePin>
      break;
 8002e32:	e01a      	b.n	8002e6a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e34:	2201      	movs	r2, #1
 8002e36:	2110      	movs	r1, #16
 8002e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3c:	f002 fa88 	bl	8005350 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e40:	2201      	movs	r2, #1
 8002e42:	2120      	movs	r1, #32
 8002e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e48:	f002 fa82 	bl	8005350 <HAL_GPIO_WritePin>
      break;
 8002e4c:	e00d      	b.n	8002e6a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2110      	movs	r1, #16
 8002e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e56:	f002 fa7b 	bl	8005350 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2120      	movs	r1, #32
 8002e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e62:	f002 fa75 	bl	8005350 <HAL_GPIO_WritePin>
      break;
 8002e66:	e000      	b.n	8002e6a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002e68:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002e78:	2302      	movs	r3, #2
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002e94:	2301      	movs	r3, #1
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002eae:	230f      	movs	r3, #15
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e001      	b.n	8002eb8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002eb4:	2316      	movs	r3, #22
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a03      	ldr	r2, [pc, #12]	; (8002edc <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6053      	str	r3, [r2, #4]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	e0042000 	.word	0xe0042000

08002ee0 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a03      	ldr	r2, [pc, #12]	; (8002ef8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002eea:	f023 0302 	bic.w	r3, r3, #2
 8002eee:	6053      	str	r3, [r2, #4]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	e0042000 	.word	0xe0042000

08002efc <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a03      	ldr	r2, [pc, #12]	; (8002f14 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6053      	str	r3, [r2, #4]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	e0042000 	.word	0xe0042000

08002f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f001 f9a0 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f28:	f003 fbe0 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_Init+0x3c>)
 8002f30:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f32:	200f      	movs	r0, #15
 8002f34:	f7ff f94e 	bl	80021d4 <HAL_InitTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	e001      	b.n	8002f48 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f44:	f7fe ff1f 	bl	8001d86 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f48:	79fb      	ldrb	r3, [r7, #7]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_SuspendTick+0x18>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a03      	ldr	r2, [pc, #12]	; (8002f70 <HAL_SuspendTick+0x18>)
 8002f62:	f023 0302 	bic.w	r3, r3, #2
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	e000e010 	.word	0xe000e010

08002f74 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <HAL_ResumeTick+0x18>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a03      	ldr	r2, [pc, #12]	; (8002f8c <HAL_ResumeTick+0x18>)
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <HAL_GetUIDw0+0x10>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	1fff7590 	.word	0x1fff7590

08002fa4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002fa8:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <HAL_GetUIDw1+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	1fff7594 	.word	0x1fff7594

08002fb8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <HAL_GetUIDw2+0x10>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	1fff7598 	.word	0x1fff7598

08002fcc <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002fd0:	f7ff ff78 	bl	8002ec4 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002fdc:	f7ff ff80 	bl	8002ee0 <LL_DBGMCU_DisableDBGStopMode>
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002fe8:	f7ff ff88 	bl	8002efc <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2107      	movs	r1, #7
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	401a      	ands	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2107      	movs	r1, #7
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	210f      	movs	r1, #15
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	401a      	ands	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	f003 010f 	and.w	r1, r3, #15
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	431a      	orrs	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003138:	43db      	mvns	r3, r3
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	43db      	mvns	r3, r3
 8003160:	401a      	ands	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	0219      	lsls	r1, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	400b      	ands	r3, r1
 800316a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800316e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003172:	431a      	orrs	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003192:	f023 0317 	bic.w	r3, r3, #23
 8003196:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031b8:	f023 0317 	bic.w	r3, r3, #23
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6093      	str	r3, [r2, #8]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031de:	d101      	bne.n	80031e4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003200:	f023 0317 	bic.w	r3, r3, #23
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003226:	f023 0317 	bic.w	r3, r3, #23
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <LL_ADC_IsEnabled+0x18>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <LL_ADC_IsEnabled+0x1a>
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d101      	bne.n	8003278 <LL_ADC_IsDisableOngoing+0x18>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_IsDisableOngoing+0x1a>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003294:	f023 0317 	bic.w	r3, r3, #23
 8003298:	f043 0204 	orr.w	r2, r3, #4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ba:	f023 0317 	bic.w	r3, r3, #23
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d101      	bne.n	80032e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e17e      	b.n	8003614 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fd fe4d 	bl	8000fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff44 	bl	80031ca <LL_ADC_IsInternalRegulatorEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d115      	bne.n	8003374 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff18 	bl	8003182 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003352:	4b9e      	ldr	r3, [pc, #632]	; (80035cc <HAL_ADC_Init+0x2d8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	4a9d      	ldr	r2, [pc, #628]	; (80035d0 <HAL_ADC_Init+0x2dc>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	3301      	adds	r3, #1
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003366:	e002      	b.n	800336e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3b01      	subs	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f9      	bne.n	8003368 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff26 	bl	80031ca <LL_ADC_IsInternalRegulatorEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff93 	bl	80032d0 <LL_ADC_REG_IsConversionOngoing>
 80033aa:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 8124 	bne.w	8003602 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 8120 	bne.w	8003602 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033ca:	f043 0202 	orr.w	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff30 	bl	800323c <LL_ADC_IsEnabled>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 80a7 	bne.w	8003532 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7e1b      	ldrb	r3, [r3, #24]
 80033ec:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80033ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7e5b      	ldrb	r3, [r3, #25]
 80033f4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e9b      	ldrb	r3, [r3, #26]
 80033fc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033fe:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003404:	2a00      	cmp	r2, #0
 8003406:	d002      	beq.n	800340e <HAL_ADC_Init+0x11a>
 8003408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800340c:	e000      	b.n	8003410 <HAL_ADC_Init+0x11c>
 800340e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003410:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003416:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	da04      	bge.n	800342a <HAL_ADC_Init+0x136>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003428:	e001      	b.n	800342e <HAL_ADC_Init+0x13a>
 800342a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800342e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003436:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003438:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d114      	bne.n	8003474 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7e9b      	ldrb	r3, [r3, #26]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e00b      	b.n	8003474 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003488:	4313      	orrs	r3, r2
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800349a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	69b9      	ldr	r1, [r7, #24]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034b4:	4313      	orrs	r3, r2
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d111      	bne.n	80034ea <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80034d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80034de:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <HAL_ADC_Init+0x2e0>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	6979      	ldr	r1, [r7, #20]
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003506:	d014      	beq.n	8003532 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d00f      	beq.n	8003532 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351a:	d00a      	beq.n	8003532 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800351c:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <HAL_ADC_Init+0x2e4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800352c:	492a      	ldr	r1, [pc, #168]	; (80035d8 <HAL_ADC_Init+0x2e4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	461a      	mov	r2, r3
 800353c:	2100      	movs	r1, #0
 800353e:	f7ff fd76 	bl	800302e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	461a      	mov	r2, r3
 800354c:	4923      	ldr	r1, [pc, #140]	; (80035dc <HAL_ADC_Init+0x2e8>)
 800354e:	f7ff fd6e 	bl	800302e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d108      	bne.n	800356c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f062 020f 	orn	r2, r2, #15
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
 800356a:	e017      	b.n	800359c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003574:	d112      	bne.n	800359c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	3b01      	subs	r3, #1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	f003 031c 	and.w	r3, r3, #28
 8003588:	f06f 020f 	mvn.w	r2, #15
 800358c:	fa02 f103 	lsl.w	r1, r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fd61 	bl	800306a <LL_ADC_GetSamplingTimeCommonChannels>
 80035a8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d116      	bne.n	80035e0 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f023 0303 	bic.w	r3, r3, #3
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035c8:	e023      	b.n	8003612 <HAL_ADC_Init+0x31e>
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000
 80035d0:	053e2d63 	.word	0x053e2d63
 80035d4:	1ffffc02 	.word	0x1ffffc02
 80035d8:	40012708 	.word	0x40012708
 80035dc:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f023 0312 	bic.w	r3, r3, #18
 80035e8:	f043 0210 	orr.w	r2, r3, #16
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003600:	e007      	b.n	8003612 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	f043 0210 	orr.w	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003612:	7ffb      	ldrb	r3, [r7, #31]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07a      	b.n	8003724 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 face 	bl	8003bdc <ADC_ConversionStop>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fb92 	bl	8003d74 <ADC_Disable>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fd9f 	bl	80031a8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003678:	f023 0303 	bic.w	r3, r3, #3
 800367c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f240 329f 	movw	r2, #927	; 0x39f
 8003686:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <HAL_ADC_DeInit+0x110>)
 8003694:	400b      	ands	r3, r1
 8003696:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80036a6:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0207 	bic.w	r2, r2, #7
 80036b6:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80036c6:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_ADC_DeInit+0x114>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_ADC_DeInit+0x114>)
 80036fc:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003700:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fc8c 	bl	8001020 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	833e0200 	.word	0x833e0200
 8003730:	40012708 	.word	0x40012708

08003734 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fdc5 	bl	80032d0 <LL_ADC_REG_IsConversionOngoing>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d132      	bne.n	80037b2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_ADC_Start+0x26>
 8003756:	2302      	movs	r3, #2
 8003758:	e02e      	b.n	80037b8 <HAL_ADC_Start+0x84>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fa80 	bl	8003c68 <ADC_Enable>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11a      	bne.n	80037a8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	221c      	movs	r2, #28
 8003792:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fd6f 	bl	8003284 <LL_ADC_REG_StartConversion>
 80037a6:	e006      	b.n	80037b6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80037b0:	e001      	b.n	80037b6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
 80037b4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_Stop+0x16>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e022      	b.n	800381c <HAL_ADC_Stop+0x5c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9fc 	bl	8003bdc <ADC_ConversionStop>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d111      	bne.n	8003812 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fac0 	bl	8003d74 <ADC_Disable>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d102      	bne.n	800383c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003836:	2308      	movs	r3, #8
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e010      	b.n	800385e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e077      	b.n	800394a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800385a:	2304      	movs	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800385e:	f7fe fcc3 	bl	80021e8 <HAL_GetTick>
 8003862:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003864:	e021      	b.n	80038aa <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386c:	d01d      	beq.n	80038aa <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800386e:	f7fe fcbb 	bl	80021e8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <HAL_ADC_PollForConversion+0x60>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d112      	bne.n	80038aa <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e04f      	b.n	800394a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0d6      	beq.n	8003866 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fbe6 	bl	800309a <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d031      	beq.n	8003938 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7e9b      	ldrb	r3, [r3, #26]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d12d      	bne.n	8003938 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d126      	bne.n	8003938 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fcee 	bl	80032d0 <LL_ADC_REG_IsConversionOngoing>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d112      	bne.n	8003920 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 020c 	bic.w	r2, r2, #12
 8003908:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	659a      	str	r2, [r3, #88]	; 0x58
 800391e:	e00b      	b.n	8003938 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7e1b      	ldrb	r3, [r3, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	220c      	movs	r2, #12
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
	...

0800396c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x28>
 8003990:	2302      	movs	r3, #2
 8003992:	e110      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x24a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fc95 	bl	80032d0 <LL_ADC_REG_IsConversionOngoing>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 80f7 	bne.w	8003b9c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	f000 80b1 	beq.w	8003b1a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c0:	d004      	beq.n	80039cc <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039c6:	4a7e      	ldr	r2, [pc, #504]	; (8003bc0 <HAL_ADC_ConfigChannel+0x254>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f7ff fb92 	bl	8003100 <LL_ADC_REG_SetSequencerChAdd>
 80039dc:	e041      	b.n	8003a62 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	210f      	movs	r1, #15
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0xa0>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0e9b      	lsrs	r3, r3, #26
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	e011      	b.n	8003a30 <HAL_ADC_ConfigChannel+0xc4>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e003      	b.n	8003a30 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	6849      	ldr	r1, [r1, #4]
 8003a34:	f001 011f 	and.w	r1, r1, #31
 8003a38:	408b      	lsls	r3, r1
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d808      	bhi.n	8003a62 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f7ff fb2e 	bl	80030be <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f7ff fb6b 	bl	800314a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f280 8097 	bge.w	8003bac <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a7e:	4851      	ldr	r0, [pc, #324]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003a80:	f7ff fac8 	bl	8003014 <LL_ADC_GetCommonPathInternalCh>
 8003a84:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a4f      	ldr	r2, [pc, #316]	; (8003bc8 <HAL_ADC_ConfigChannel+0x25c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d120      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11b      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4848      	ldr	r0, [pc, #288]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003aa4:	f7ff faa4 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aa8:	4b48      	ldr	r3, [pc, #288]	; (8003bcc <HAL_ADC_ConfigChannel+0x260>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	4a48      	ldr	r2, [pc, #288]	; (8003bd0 <HAL_ADC_ConfigChannel+0x264>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ac2:	e002      	b.n	8003aca <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f9      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ad0:	e06c      	b.n	8003bac <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <HAL_ADC_ConfigChannel+0x268>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d10c      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aec:	4619      	mov	r1, r3
 8003aee:	4835      	ldr	r0, [pc, #212]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003af0:	f7ff fa7e 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003af4:	e05a      	b.n	8003bac <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a37      	ldr	r2, [pc, #220]	; (8003bd8 <HAL_ADC_ConfigChannel+0x26c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d155      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d150      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b10:	4619      	mov	r1, r3
 8003b12:	482c      	ldr	r0, [pc, #176]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003b14:	f7ff fa6c 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003b18:	e048      	b.n	8003bac <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <HAL_ADC_ConfigChannel+0x254>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d107      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7ff faf3 	bl	8003124 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da32      	bge.n	8003bac <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b46:	481f      	ldr	r0, [pc, #124]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003b48:	f7ff fa64 	bl	8003014 <LL_ADC_GetCommonPathInternalCh>
 8003b4c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_ADC_ConfigChannel+0x25c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d107      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4818      	ldr	r0, [pc, #96]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003b62:	f7ff fa45 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003b66:	e021      	b.n	8003bac <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_ADC_ConfigChannel+0x268>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d107      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4812      	ldr	r0, [pc, #72]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003b7c:	f7ff fa38 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003b80:	e014      	b.n	8003bac <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_ADC_ConfigChannel+0x26c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10f      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b92:	4619      	mov	r1, r3
 8003b94:	480b      	ldr	r0, [pc, #44]	; (8003bc4 <HAL_ADC_ConfigChannel+0x258>)
 8003b96:	f7ff fa2b 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003b9a:	e007      	b.n	8003bac <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003bb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	80000004 	.word	0x80000004
 8003bc4:	40012708 	.word	0x40012708
 8003bc8:	b0001000 	.word	0xb0001000
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	053e2d63 	.word	0x053e2d63
 8003bd4:	b8004000 	.word	0xb8004000
 8003bd8:	b4002000 	.word	0xb4002000

08003bdc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fb71 	bl	80032d0 <LL_ADC_REG_IsConversionOngoing>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d033      	beq.n	8003c5c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fb31 	bl	8003260 <LL_ADC_IsDisableOngoing>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fb4e 	bl	80032aa <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c0e:	f7fe faeb 	bl	80021e8 <HAL_GetTick>
 8003c12:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c14:	e01b      	b.n	8003c4e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c16:	f7fe fae7 	bl	80021e8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d914      	bls.n	8003c4e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	f043 0210 	orr.w	r2, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e007      	b.n	8003c5e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1dc      	bne.n	8003c16 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fadf 	bl	800323c <LL_ADC_IsEnabled>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d169      	bne.n	8003d58 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <ADC_Enable+0xfc>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e055      	b.n	8003d5a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fa9c 	bl	80031f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003cb8:	482b      	ldr	r0, [pc, #172]	; (8003d68 <ADC_Enable+0x100>)
 8003cba:	f7ff f9ab 	bl	8003014 <LL_ADC_GetCommonPathInternalCh>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00f      	beq.n	8003ce8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc8:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <ADC_Enable+0x104>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	4a28      	ldr	r2, [pc, #160]	; (8003d70 <ADC_Enable+0x108>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003cd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cda:	e002      	b.n	8003ce2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f9      	bne.n	8003cdc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7e5b      	ldrb	r3, [r3, #25]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d033      	beq.n	8003d58 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003cf0:	f7fe fa7a 	bl	80021e8 <HAL_GetTick>
 8003cf4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cf6:	e028      	b.n	8003d4a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fa9d 	bl	800323c <LL_ADC_IsEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fa6f 	bl	80031f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d12:	f7fe fa69 	bl	80021e8 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d914      	bls.n	8003d4a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d00d      	beq.n	8003d4a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f043 0210 	orr.w	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e007      	b.n	8003d5a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d1cf      	bne.n	8003cf8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	80000017 	.word	0x80000017
 8003d68:	40012708 	.word	0x40012708
 8003d6c:	20000000 	.word	0x20000000
 8003d70:	053e2d63 	.word	0x053e2d63

08003d74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fa6d 	bl	8003260 <LL_ADC_IsDisableOngoing>
 8003d86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fa55 	bl	800323c <LL_ADC_IsEnabled>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d047      	beq.n	8003e28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d144      	bne.n	8003e28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0305 	and.w	r3, r3, #5
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10c      	bne.n	8003dc6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fa30 	bl	8003216 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dbe:	f7fe fa13 	bl	80021e8 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dc4:	e029      	b.n	8003e1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f043 0210 	orr.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e023      	b.n	8003e2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003de2:	f7fe fa01 	bl	80021e8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d914      	bls.n	8003e1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	f043 0210 	orr.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e007      	b.n	8003e2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1dc      	bne.n	8003de2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <LL_ADC_SetCalibrationFactor>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e42:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <LL_ADC_GetCalibrationFactor>:
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <LL_ADC_Enable>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e86:	f023 0317 	bic.w	r3, r3, #23
 8003e8a:	f043 0201 	orr.w	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_Disable>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eac:	f023 0317 	bic.w	r3, r3, #23
 8003eb0:	f043 0202 	orr.w	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_IsEnabled>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_IsEnabled+0x18>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_IsEnabled+0x1a>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <LL_ADC_StartCalibration>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ef6:	f023 0317 	bic.w	r3, r3, #23
 8003efa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	609a      	str	r2, [r3, #8]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <LL_ADC_IsCalibrationOnGoing>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f20:	d101      	bne.n	8003f26 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b088      	sub	sp, #32
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0b9      	b.n	80040c4 <HAL_ADCEx_Calibration_Start+0x192>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff0b 	bl	8003d74 <ADC_Disable>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ffab 	bl	8003ec2 <LL_ADC_IsEnabled>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 809d 	bne.w	80040ae <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f7c:	f043 0202 	orr.w	r2, r3, #2
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	f248 0303 	movw	r3, #32771	; 0x8003
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fa0:	f023 0303 	bic.w	r3, r3, #3
 8003fa4:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e02e      	b.n	800400a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff98 	bl	8003ee6 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fb6:	e014      	b.n	8003fe2 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003fc4:	d30d      	bcc.n	8003fe2 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f023 0312 	bic.w	r3, r3, #18
 8003fce:	f043 0210 	orr.w	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e070      	b.n	80040c4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ff90 	bl	8003f0c <LL_ADC_IsCalibrationOnGoing>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e2      	bne.n	8003fb8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff2f 	bl	8003e5a <LL_ADC_GetCalibrationFactor>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b07      	cmp	r3, #7
 800400e:	d9cd      	bls.n	8003fac <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff29 	bl	8003e76 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff01 	bl	8003e32 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff31 	bl	8003e9c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800403a:	f7fe f8d5 	bl	80021e8 <HAL_GetTick>
 800403e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004040:	e01c      	b.n	800407c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004042:	f7fe f8d1 	bl	80021e8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d915      	bls.n	800407c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff34 	bl	8003ec2 <LL_ADC_IsEnabled>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f043 0210 	orr.w	r2, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	f043 0201 	orr.w	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e023      	b.n	80040c4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff1e 	bl	8003ec2 <LL_ADC_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1da      	bne.n	8004042 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68d9      	ldr	r1, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	430a      	orrs	r2, r1
 800409a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	f023 0303 	bic.w	r3, r3, #3
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58
 80040ac:	e005      	b.n	80040ba <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e8:	4013      	ands	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fe:	4a04      	ldr	r2, [pc, #16]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	60d3      	str	r3, [r2, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <__NVIC_GetPriorityGrouping+0x18>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 0307 	and.w	r3, r3, #7
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	2b00      	cmp	r3, #0
 8004140:	db0b      	blt.n	800415a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4906      	ldr	r1, [pc, #24]	; (8004164 <__NVIC_EnableIRQ+0x34>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2001      	movs	r0, #1
 8004152:	fa00 f202 	lsl.w	r2, r0, r2
 8004156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	db12      	blt.n	80041a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	f003 021f 	and.w	r2, r3, #31
 8004180:	490a      	ldr	r1, [pc, #40]	; (80041ac <__NVIC_DisableIRQ+0x44>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2001      	movs	r0, #1
 800418a:	fa00 f202 	lsl.w	r2, r0, r2
 800418e:	3320      	adds	r3, #32
 8004190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004194:	f3bf 8f4f 	dsb	sy
}
 8004198:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800419a:	f3bf 8f6f 	isb	sy
}
 800419e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000e100 	.word	0xe000e100

080041b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	6039      	str	r1, [r7, #0]
 80041ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	db0a      	blt.n	80041da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	490c      	ldr	r1, [pc, #48]	; (80041fc <__NVIC_SetPriority+0x4c>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	440b      	add	r3, r1
 80041d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041d8:	e00a      	b.n	80041f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4908      	ldr	r1, [pc, #32]	; (8004200 <__NVIC_SetPriority+0x50>)
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	3b04      	subs	r3, #4
 80041e8:	0112      	lsls	r2, r2, #4
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	440b      	add	r3, r1
 80041ee:	761a      	strb	r2, [r3, #24]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000e100 	.word	0xe000e100
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f1c3 0307 	rsb	r3, r3, #7
 800421e:	2b04      	cmp	r3, #4
 8004220:	bf28      	it	cs
 8004222:	2304      	movcs	r3, #4
 8004224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	3304      	adds	r3, #4
 800422a:	2b06      	cmp	r3, #6
 800422c:	d902      	bls.n	8004234 <NVIC_EncodePriority+0x30>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3b03      	subs	r3, #3
 8004232:	e000      	b.n	8004236 <NVIC_EncodePriority+0x32>
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	401a      	ands	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800424c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	43d9      	mvns	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425c:	4313      	orrs	r3, r2
         );
}
 800425e:	4618      	mov	r0, r3
 8004260:	3724      	adds	r7, #36	; 0x24
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff2b 	bl	80040cc <__NVIC_SetPriorityGrouping>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800428c:	f7ff ff42 	bl	8004114 <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ffb4 	bl	8004204 <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff83 	bl	80041b0 <__NVIC_SetPriority>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff35 	bl	8004130 <__NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff43 	bl	8004168 <__NVIC_DisableIRQ>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e08e      	b.n	800441c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_DMA_Init+0x138>)
 8004306:	429a      	cmp	r2, r3
 8004308:	d80f      	bhi.n	800432a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	4b45      	ldr	r3, [pc, #276]	; (8004428 <HAL_DMA_Init+0x13c>)
 8004312:	4413      	add	r3, r2
 8004314:	4a45      	ldr	r2, [pc, #276]	; (800442c <HAL_DMA_Init+0x140>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	009a      	lsls	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a42      	ldr	r2, [pc, #264]	; (8004430 <HAL_DMA_Init+0x144>)
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
 8004328:	e00e      	b.n	8004348 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4b40      	ldr	r3, [pc, #256]	; (8004434 <HAL_DMA_Init+0x148>)
 8004332:	4413      	add	r3, r2
 8004334:	4a3d      	ldr	r2, [pc, #244]	; (800442c <HAL_DMA_Init+0x140>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	009a      	lsls	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <HAL_DMA_Init+0x14c>)
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fb24 	bl	80049e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a8:	d102      	bne.n	80043b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d010      	beq.n	80043f2 <HAL_DMA_Init+0x106>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d80c      	bhi.n	80043f2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fb4d 	bl	8004a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	e008      	b.n	8004404 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40020407 	.word	0x40020407
 8004428:	bffdfff8 	.word	0xbffdfff8
 800442c:	cccccccd 	.word	0xcccccccd
 8004430:	40020000 	.word	0x40020000
 8004434:	bffdfbf8 	.word	0xbffdfbf8
 8004438:	40020400 	.word	0x40020400

0800443c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07b      	b.n	8004546 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <HAL_DMA_DeInit+0x114>)
 8004466:	429a      	cmp	r2, r3
 8004468:	d80f      	bhi.n	800448a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	4b38      	ldr	r3, [pc, #224]	; (8004554 <HAL_DMA_DeInit+0x118>)
 8004472:	4413      	add	r3, r2
 8004474:	4a38      	ldr	r2, [pc, #224]	; (8004558 <HAL_DMA_DeInit+0x11c>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	009a      	lsls	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a35      	ldr	r2, [pc, #212]	; (800455c <HAL_DMA_DeInit+0x120>)
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
 8004488:	e00e      	b.n	80044a8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	4b33      	ldr	r3, [pc, #204]	; (8004560 <HAL_DMA_DeInit+0x124>)
 8004492:	4413      	add	r3, r2
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <HAL_DMA_DeInit+0x11c>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	009a      	lsls	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2f      	ldr	r2, [pc, #188]	; (8004564 <HAL_DMA_DeInit+0x128>)
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	f003 021c 	and.w	r2, r3, #28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2101      	movs	r1, #1
 80044be:	fa01 f202 	lsl.w	r2, r1, r2
 80044c2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fa8f 	bl	80049e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044da:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00f      	beq.n	8004504 <HAL_DMA_DeInit+0xc8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d80b      	bhi.n	8004504 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fac3 	bl	8004a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004502:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40020407 	.word	0x40020407
 8004554:	bffdfff8 	.word	0xbffdfff8
 8004558:	cccccccd 	.word	0xcccccccd
 800455c:	40020000 	.word	0x40020000
 8004560:	bffdfbf8 	.word	0xbffdfbf8
 8004564:	40020400 	.word	0x40020400

08004568 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_DMA_Start_IT+0x20>
 8004584:	2302      	movs	r3, #2
 8004586:	e069      	b.n	800465c <HAL_DMA_Start_IT+0xf4>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d155      	bne.n	8004648 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f9d3 	bl	800496c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 020e 	orr.w	r2, r2, #14
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e00f      	b.n	8004600 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0204 	bic.w	r2, r2, #4
 80045ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 020a 	orr.w	r2, r2, #10
 80045fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800461c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004634:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e008      	b.n	800465a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800465a:	7dfb      	ldrb	r3, [r7, #23]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e04f      	b.n	8004716 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d008      	beq.n	8004694 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2204      	movs	r2, #4
 8004686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e040      	b.n	8004716 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 020e 	bic.w	r2, r2, #14
 80046a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	f003 021c 	and.w	r2, r3, #28
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f202 	lsl.w	r2, r1, r2
 80046d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00c      	beq.n	8004704 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004702:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d005      	beq.n	8004744 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2204      	movs	r2, #4
 800473c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e047      	b.n	80047d4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 020e 	bic.w	r2, r2, #14
 8004752:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004778:	f003 021c 	and.w	r2, r3, #28
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2101      	movs	r1, #1
 8004782:	fa01 f202 	lsl.w	r2, r1, r2
 8004786:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004790:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
    }
  }
  return status;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	f003 031c 	and.w	r3, r3, #28
 8004800:	2204      	movs	r2, #4
 8004802:	409a      	lsls	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d027      	beq.n	800485c <HAL_DMA_IRQHandler+0x7c>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d022      	beq.n	800485c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	f003 021c 	and.w	r2, r3, #28
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	2104      	movs	r1, #4
 8004842:	fa01 f202 	lsl.w	r2, r1, r2
 8004846:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8081 	beq.w	8004954 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800485a:	e07b      	b.n	8004954 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f003 031c 	and.w	r3, r3, #28
 8004864:	2202      	movs	r2, #2
 8004866:	409a      	lsls	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03d      	beq.n	80048ec <HAL_DMA_IRQHandler+0x10c>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d038      	beq.n	80048ec <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 020a 	bic.w	r2, r2, #10
 8004896:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_DMA_IRQHandler+0x180>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d909      	bls.n	80048c0 <HAL_DMA_IRQHandler+0xe0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	f003 031c 	and.w	r3, r3, #28
 80048b4:	4a2b      	ldr	r2, [pc, #172]	; (8004964 <HAL_DMA_IRQHandler+0x184>)
 80048b6:	2102      	movs	r1, #2
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	6053      	str	r3, [r2, #4]
 80048be:	e008      	b.n	80048d2 <HAL_DMA_IRQHandler+0xf2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	f003 031c 	and.w	r3, r3, #28
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <HAL_DMA_IRQHandler+0x188>)
 80048ca:	2102      	movs	r1, #2
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d038      	beq.n	8004954 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80048ea:	e033      	b.n	8004954 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	f003 031c 	and.w	r3, r3, #28
 80048f4:	2208      	movs	r2, #8
 80048f6:	409a      	lsls	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d02a      	beq.n	8004956 <HAL_DMA_IRQHandler+0x176>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d025      	beq.n	8004956 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 020e 	bic.w	r2, r2, #14
 8004918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	f003 021c 	and.w	r2, r3, #28
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2101      	movs	r1, #1
 8004928:	fa01 f202 	lsl.w	r2, r1, r2
 800492c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004954:	bf00      	nop
 8004956:	bf00      	nop
}
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40020080 	.word	0x40020080
 8004964:	40020400 	.word	0x40020400
 8004968:	40020000 	.word	0x40020000

0800496c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004982:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	f003 021c 	and.w	r2, r3, #28
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2101      	movs	r1, #1
 80049a4:	fa01 f202 	lsl.w	r2, r1, r2
 80049a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d108      	bne.n	80049cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ca:	e007      	b.n	80049dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	60da      	str	r2, [r3, #12]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr
	...

080049e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d813      	bhi.n	8004a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a08:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	3b08      	subs	r3, #8
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e011      	b.n	8004a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	009a      	lsls	r2, r3, #2
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004a2e:	4413      	add	r3, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	3b08      	subs	r3, #8
 8004a3c:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	3307      	adds	r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004a4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2201      	movs	r2, #1
 8004a56:	409a      	lsls	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40020407 	.word	0x40020407
 8004a6c:	cccccccd 	.word	0xcccccccd
 8004a70:	4002081c 	.word	0x4002081c
 8004a74:	40020880 	.word	0x40020880

08004a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a88:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	1000823f 	.word	0x1000823f
 8004abc:	40020940 	.word	0x40020940

08004ac0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <HAL_FLASH_Program+0x80>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_FLASH_Program+0x1a>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e02d      	b.n	8004b36 <HAL_FLASH_Program+0x76>
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <HAL_FLASH_Program+0x80>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <HAL_FLASH_Program+0x80>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aea:	f000 f869 	bl	8004bc0 <FLASH_WaitForLastOperation>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11a      	bne.n	8004b2e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d105      	bne.n	8004b0a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b02:	68b8      	ldr	r0, [r7, #8]
 8004b04:	f000 f8be 	bl	8004c84 <FLASH_Program_DoubleWord>
 8004b08:	e004      	b.n	8004b14 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	68b8      	ldr	r0, [r7, #8]
 8004b10:	f000 f8de 	bl	8004cd0 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b18:	f000 f852 	bl	8004bc0 <FLASH_WaitForLastOperation>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_FLASH_Program+0x84>)
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	4906      	ldr	r1, [pc, #24]	; (8004b44 <HAL_FLASH_Program+0x84>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_FLASH_Program+0x80>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200003d0 	.word	0x200003d0
 8004b44:	58004000 	.word	0x58004000

08004b48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da0b      	bge.n	8004b72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <HAL_FLASH_Unlock+0x3c>)
 8004b5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_FLASH_Unlock+0x40>)
 8004b64:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_FLASH_Unlock+0x38>)
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da01      	bge.n	8004b72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b72:	79fb      	ldrb	r3, [r7, #7]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	58004000 	.word	0x58004000
 8004b84:	45670123 	.word	0x45670123
 8004b88:	cdef89ab 	.word	0xcdef89ab

08004b8c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_FLASH_Lock+0x30>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <HAL_FLASH_Lock+0x30>)
 8004b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ba0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_FLASH_Lock+0x30>)
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db01      	blt.n	8004bae <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004bae:	79fb      	ldrb	r3, [r7, #7]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	58004000 	.word	0x58004000

08004bc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7fd fb0e 	bl	80021e8 <HAL_GetTick>
 8004bcc:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004bce:	e009      	b.n	8004be4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004bd0:	f7fd fb0a 	bl	80021e8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d801      	bhi.n	8004be4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e047      	b.n	8004c74 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <FLASH_WaitForLastOperation+0xbc>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d0ee      	beq.n	8004bd0 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004bf2:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <FLASH_WaitForLastOperation+0xbc>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <FLASH_WaitForLastOperation+0xbc>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <FLASH_WaitForLastOperation+0x6c>
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <FLASH_WaitForLastOperation+0xbc>)
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c26:	4915      	ldr	r1, [pc, #84]	; (8004c7c <FLASH_WaitForLastOperation+0xbc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	618b      	str	r3, [r1, #24]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <FLASH_WaitForLastOperation+0x80>
 8004c36:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <FLASH_WaitForLastOperation+0xbc>)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c3e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00e      	beq.n	8004c64 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004c46:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <FLASH_WaitForLastOperation+0xc0>)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e011      	b.n	8004c74 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004c50:	f7fd faca 	bl	80021e8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d801      	bhi.n	8004c64 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e007      	b.n	8004c74 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <FLASH_WaitForLastOperation+0xbc>)
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c70:	d0ee      	beq.n	8004c50 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	58004000 	.word	0x58004000
 8004c80:	200003d0 	.word	0x200003d0

08004c84 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004c90:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <FLASH_Program_DoubleWord+0x48>)
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <FLASH_Program_DoubleWord+0x48>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004ca2:	f3bf 8f6f 	isb	sy
}
 8004ca6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	000a      	movs	r2, r1
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	68f9      	ldr	r1, [r7, #12]
 8004cba:	3104      	adds	r1, #4
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	58004000 	.word	0x58004000

08004cd0 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b089      	sub	sp, #36	; 0x24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004ce6:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <FLASH_Program_Fast+0x78>)
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <FLASH_Program_Fast+0x78>)
 8004cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cfc:	b672      	cpsid	i
}
 8004cfe:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	3304      	adds	r3, #4
 8004d12:	617b      	str	r3, [r7, #20]
    row_index--;
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004d1a:	7ffb      	ldrb	r3, [r7, #31]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1ef      	bne.n	8004d00 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004d20:	bf00      	nop
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <FLASH_Program_Fast+0x78>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d0f8      	beq.n	8004d22 <FLASH_Program_Fast+0x52>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004d3c:	bf00      	nop
 8004d3e:	3724      	adds	r7, #36	; 0x24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	58004000 	.word	0x58004000

08004d4c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d56:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <HAL_FLASHEx_Erase+0xac>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_FLASHEx_Erase+0x16>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e046      	b.n	8004df0 <HAL_FLASHEx_Erase+0xa4>
 8004d62:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <HAL_FLASHEx_Erase+0xac>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d68:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <HAL_FLASHEx_Erase+0xac>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d72:	f7ff ff25 	bl	8004bc0 <FLASH_WaitForLastOperation>
 8004d76:	4603      	mov	r3, r0
 8004d78:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d133      	bne.n	8004de8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d108      	bne.n	8004d9a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004d88:	f000 f838 	bl	8004dfc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d90:	f7ff ff16 	bl	8004bc0 <FLASH_WaitForLastOperation>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
 8004d98:	e024      	b.n	8004de4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	e012      	b.n	8004dd0 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004daa:	68b8      	ldr	r0, [r7, #8]
 8004dac:	f000 f836 	bl	8004e1c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004db4:	f7ff ff04 	bl	8004bc0 <FLASH_WaitForLastOperation>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	601a      	str	r2, [r3, #0]
          break;
 8004dc8:	e00a      	b.n	8004de0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d3e4      	bcc.n	8004daa <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004de0:	f000 f878 	bl	8004ed4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004de4:	f000 f832 	bl	8004e4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <HAL_FLASHEx_Erase+0xac>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]

  return status;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	200003d0 	.word	0x200003d0

08004dfc <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <FLASH_MassErase+0x1c>)
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	4a04      	ldr	r2, [pc, #16]	; (8004e18 <FLASH_MassErase+0x1c>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0a:	f043 0304 	orr.w	r3, r3, #4
 8004e0e:	6153      	str	r3, [r2, #20]
#endif
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	58004000 	.word	0x58004000

08004e1c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <FLASH_PageErase+0x2c>)
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4313      	orrs	r3, r2
 8004e32:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <FLASH_PageErase+0x2c>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	6153      	str	r3, [r2, #20]
#endif
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	58004000 	.word	0x58004000

08004e4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004e50:	4b1f      	ldr	r3, [pc, #124]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d117      	bne.n	8004e8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004e68:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d117      	bne.n	8004ec8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a06      	ldr	r2, [pc, #24]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a03      	ldr	r2, [pc, #12]	; (8004ed0 <FLASH_FlushCaches+0x84>)
 8004ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ec6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	58004000 	.word	0x58004000

08004ed4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <FLASH_AcknowledgePageErase+0x1c>)
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <FLASH_AcknowledgePageErase+0x1c>)
 8004ede:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004ee2:	f023 0302 	bic.w	r3, r3, #2
 8004ee6:	6153      	str	r3, [r2, #20]
#endif
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	58004000 	.word	0x58004000

08004ef4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f02:	e140      	b.n	8005186 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	4013      	ands	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8132 	beq.w	8005180 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d005      	beq.n	8004f34 <HAL_GPIO_Init+0x40>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d130      	bne.n	8004f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	2203      	movs	r2, #3
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43db      	mvns	r3, r3
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0201 	and.w	r2, r3, #1
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d017      	beq.n	8004fd2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	2203      	movs	r2, #3
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d123      	bne.n	8005026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	08da      	lsrs	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3208      	adds	r2, #8
 8004fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	08da      	lsrs	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3208      	adds	r2, #8
 8005020:	6939      	ldr	r1, [r7, #16]
 8005022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2203      	movs	r2, #3
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0203 	and.w	r2, r3, #3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 808c 	beq.w	8005180 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005068:	4a4e      	ldr	r2, [pc, #312]	; (80051a4 <HAL_GPIO_Init+0x2b0>)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	3302      	adds	r3, #2
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	2207      	movs	r2, #7
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005092:	d00d      	beq.n	80050b0 <HAL_GPIO_Init+0x1bc>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a44      	ldr	r2, [pc, #272]	; (80051a8 <HAL_GPIO_Init+0x2b4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <HAL_GPIO_Init+0x1b8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a43      	ldr	r2, [pc, #268]	; (80051ac <HAL_GPIO_Init+0x2b8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_GPIO_Init+0x1b4>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e004      	b.n	80050b2 <HAL_GPIO_Init+0x1be>
 80050a8:	2307      	movs	r3, #7
 80050aa:	e002      	b.n	80050b2 <HAL_GPIO_Init+0x1be>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_GPIO_Init+0x1be>
 80050b0:	2300      	movs	r3, #0
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	f002 0203 	and.w	r2, r2, #3
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	4093      	lsls	r3, r2
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050c2:	4938      	ldr	r1, [pc, #224]	; (80051a4 <HAL_GPIO_Init+0x2b0>)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	3302      	adds	r3, #2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050d0:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	43db      	mvns	r3, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050f4:	4a2e      	ldr	r2, [pc, #184]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	43db      	mvns	r3, r3
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4013      	ands	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800511e:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005124:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 8005126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800514a:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005152:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 8005154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005158:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	43db      	mvns	r3, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005178:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <HAL_GPIO_Init+0x2bc>)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3301      	adds	r3, #1
 8005184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f aeb7 	bne.w	8004f04 <HAL_GPIO_Init+0x10>
  }
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	48000400 	.word	0x48000400
 80051ac:	48000800 	.word	0x48000800
 80051b0:	58000800 	.word	0x58000800

080051b4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80051c2:	e0af      	b.n	8005324 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80051c4:	2201      	movs	r2, #1
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80a2 	beq.w	800531e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80051da:	4a59      	ldr	r2, [pc, #356]	; (8005340 <HAL_GPIO_DeInit+0x18c>)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	089b      	lsrs	r3, r3, #2
 80051e0:	3302      	adds	r3, #2
 80051e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	2207      	movs	r2, #7
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005202:	d00d      	beq.n	8005220 <HAL_GPIO_DeInit+0x6c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a4f      	ldr	r2, [pc, #316]	; (8005344 <HAL_GPIO_DeInit+0x190>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <HAL_GPIO_DeInit+0x68>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a4e      	ldr	r2, [pc, #312]	; (8005348 <HAL_GPIO_DeInit+0x194>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d101      	bne.n	8005218 <HAL_GPIO_DeInit+0x64>
 8005214:	2302      	movs	r3, #2
 8005216:	e004      	b.n	8005222 <HAL_GPIO_DeInit+0x6e>
 8005218:	2307      	movs	r3, #7
 800521a:	e002      	b.n	8005222 <HAL_GPIO_DeInit+0x6e>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_GPIO_DeInit+0x6e>
 8005220:	2300      	movs	r3, #0
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	f002 0203 	and.w	r2, r2, #3
 8005228:	0092      	lsls	r2, r2, #2
 800522a:	4093      	lsls	r3, r2
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	429a      	cmp	r2, r3
 8005230:	d136      	bne.n	80052a0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005232:	4b46      	ldr	r3, [pc, #280]	; (800534c <HAL_GPIO_DeInit+0x198>)
 8005234:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	43db      	mvns	r3, r3
 800523c:	4943      	ldr	r1, [pc, #268]	; (800534c <HAL_GPIO_DeInit+0x198>)
 800523e:	4013      	ands	r3, r2
 8005240:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005244:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_GPIO_DeInit+0x198>)
 8005246:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	43db      	mvns	r3, r3
 800524e:	493f      	ldr	r1, [pc, #252]	; (800534c <HAL_GPIO_DeInit+0x198>)
 8005250:	4013      	ands	r3, r2
 8005252:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_GPIO_DeInit+0x198>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	43db      	mvns	r3, r3
 800525e:	493b      	ldr	r1, [pc, #236]	; (800534c <HAL_GPIO_DeInit+0x198>)
 8005260:	4013      	ands	r3, r2
 8005262:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005264:	4b39      	ldr	r3, [pc, #228]	; (800534c <HAL_GPIO_DeInit+0x198>)
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	43db      	mvns	r3, r3
 800526c:	4937      	ldr	r1, [pc, #220]	; (800534c <HAL_GPIO_DeInit+0x198>)
 800526e:	4013      	ands	r3, r2
 8005270:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	2207      	movs	r2, #7
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005282:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <HAL_GPIO_DeInit+0x18c>)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	3302      	adds	r3, #2
 800528a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	43da      	mvns	r2, r3
 8005292:	482b      	ldr	r0, [pc, #172]	; (8005340 <HAL_GPIO_DeInit+0x18c>)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	400a      	ands	r2, r1
 800529a:	3302      	adds	r3, #2
 800529c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	2103      	movs	r1, #3
 80052aa:	fa01 f303 	lsl.w	r3, r1, r3
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	08da      	lsrs	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3208      	adds	r2, #8
 80052bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	220f      	movs	r2, #15
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	08d2      	lsrs	r2, r2, #3
 80052d4:	4019      	ands	r1, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3208      	adds	r2, #8
 80052da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	2103      	movs	r1, #3
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	2101      	movs	r1, #1
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	2103      	movs	r1, #3
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	43db      	mvns	r3, r3
 8005318:	401a      	ands	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3301      	adds	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	f47f af49 	bne.w	80051c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	48000400 	.word	0x48000400
 8005348:	48000800 	.word	0x48000800
 800534c:	58000800 	.word	0x58000800

08005350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	807b      	strh	r3, [r7, #2]
 800535c:	4613      	mov	r3, r2
 800535e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005360:	787b      	ldrb	r3, [r7, #1]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005366:	887a      	ldrh	r2, [r7, #2]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800536c:	e002      	b.n	8005374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800536e:	887a      	ldrh	r2, [r7, #2]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e081      	b.n	8005494 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fc fa31 	bl	800180c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2224      	movs	r2, #36	; 0x24
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d107      	bne.n	80053f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f4:	609a      	str	r2, [r3, #8]
 80053f6:	e006      	b.n	8005406 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005404:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d104      	bne.n	8005418 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005416:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800543a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69d9      	ldr	r1, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d138      	bne.n	8005524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054bc:	2302      	movs	r3, #2
 80054be:	e032      	b.n	8005526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	; 0x24
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6819      	ldr	r1, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b20      	cmp	r3, #32
 8005544:	d139      	bne.n	80055ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005550:	2302      	movs	r3, #2
 8005552:	e033      	b.n	80055bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2224      	movs	r2, #36	; 0x24
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005582:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
	...

080055c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a03      	ldr	r2, [pc, #12]	; (80055e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d6:	6013      	str	r3, [r2, #0]
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	58000400 	.word	0x58000400

080055e4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10c      	bne.n	8005610 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <HAL_PWR_EnterSLEEPMode+0x60>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005602:	d10d      	bne.n	8005620 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005604:	f000 f83c 	bl	8005680 <HAL_PWREx_DisableLowPowerRunMode>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800560e:	e015      	b.n	800563c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800561c:	f000 f822 	bl	8005664 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005626:	f023 0304 	bic.w	r3, r3, #4
 800562a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005632:	bf30      	wfi
 8005634:	e002      	b.n	800563c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005636:	bf40      	sev
    __WFE();
 8005638:	bf20      	wfe
    __WFE();
 800563a:	bf20      	wfe
  }
}
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	58000400 	.word	0x58000400
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <HAL_PWREx_GetVoltageRange+0x14>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr
 8005660:	58000400 	.word	0x58000400

08005664 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a03      	ldr	r2, [pc, #12]	; (800567c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800566e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	58000400 	.word	0x58000400

08005680 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005686:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800568c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005690:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005692:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2232      	movs	r2, #50	; 0x32
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	0c9b      	lsrs	r3, r3, #18
 80056a4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056a6:	e002      	b.n	80056ae <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ba:	d102      	bne.n	80056c2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f2      	bne.n	80056a8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ce:	d101      	bne.n	80056d4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e000      	b.n	80056d6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr
 80056e0:	58000400 	.word	0x58000400
 80056e4:	20000000 	.word	0x20000000
 80056e8:	431bde83 	.word	0x431bde83

080056ec <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80056f6:	4b10      	ldr	r3, [pc, #64]	; (8005738 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005718:	bf30      	wfi
 800571a:	e002      	b.n	8005722 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800571c:	bf40      	sev
    __WFE();
 800571e:	bf20      	wfe
    __WFE();
 8005720:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	4a05      	ldr	r2, [pc, #20]	; (800573c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005728:	f023 0304 	bic.w	r3, r3, #4
 800572c:	6113      	str	r3, [r2, #16]
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	58000400 	.word	0x58000400
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005750:	d101      	bne.n	8005756 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	58000400 	.word	0x58000400

08005764 <LL_RCC_HSE_EnableTcxo>:
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005776:	6013      	str	r3, [r2, #0]
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <LL_RCC_HSE_DisableTcxo>:
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005792:	6013      	str	r3, [r2, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr

0800579c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d101      	bne.n	80057b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <LL_RCC_HSE_Enable>:
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <LL_RCC_HSE_Disable>:
{
 80057da:	b480      	push	{r7}
 80057dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
}
 80057ee:	bf00      	nop
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <LL_RCC_HSE_IsReady>:
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80057fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005808:	d101      	bne.n	800580e <LL_RCC_HSE_IsReady+0x18>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <LL_RCC_HSE_IsReady+0x1a>
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <LL_RCC_HSI_Enable>:
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <LL_RCC_HSI_Disable>:
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005846:	6013      	str	r3, [r2, #0]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <LL_RCC_HSI_IsReady>:
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005862:	d101      	bne.n	8005868 <LL_RCC_HSI_IsReady+0x18>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <LL_RCC_HSI_IsReady+0x1a>
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800587a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800588c:	4313      	orrs	r3, r2
 800588e:	604b      	str	r3, [r1, #4]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <LL_RCC_LSE_IsReady>:
{
 800589a:	b480      	push	{r7}
 800589c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d101      	bne.n	80058b2 <LL_RCC_LSE_IsReady+0x18>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <LL_RCC_LSE_IsReady+0x1a>
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <LL_RCC_LSI_Enable>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <LL_RCC_LSI_Disable>:
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80058e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <LL_RCC_LSI_IsReady>:
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d101      	bne.n	8005914 <LL_RCC_LSI_IsReady+0x18>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <LL_RCC_LSI_IsReady+0x1a>
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <LL_RCC_MSI_Enable>:
{
 800591e:	b480      	push	{r7}
 8005920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	6013      	str	r3, [r2, #0]
}
 8005932:	bf00      	nop
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr

0800593a <LL_RCC_MSI_Disable>:
{
 800593a:	b480      	push	{r7}
 800593c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6013      	str	r3, [r2, #0]
}
 800594e:	bf00      	nop
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <LL_RCC_MSI_IsReady>:
{
 8005956:	b480      	push	{r7}
 8005958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d101      	bne.n	800596c <LL_RCC_MSI_IsReady+0x16>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <LL_RCC_MSI_IsReady+0x18>
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005976:	b480      	push	{r7}
 8005978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800597a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b08      	cmp	r3, #8
 8005986:	d101      	bne.n	800598c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <LL_RCC_MSI_GetRange>:
{
 8005996:	b480      	push	{r7}
 8005998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80059b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <LL_RCC_SetSysClkSource>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f023 0203 	bic.w	r2, r3, #3
 80059fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <LL_RCC_GetSysClkSource>:
{
 8005a12:	b480      	push	{r7}
 8005a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <LL_RCC_SetAHBPrescaler>:
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	608b      	str	r3, [r1, #8]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <LL_RCC_SetAHB3Prescaler>:
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a5e:	f023 020f 	bic.w	r2, r3, #15
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <LL_RCC_SetAPB1Prescaler>:
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	608b      	str	r3, [r1, #8]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_SetAPB2Prescaler>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	608b      	str	r3, [r1, #8]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <LL_RCC_GetAHBPrescaler>:
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <LL_RCC_GetAHB3Prescaler>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_GetAPB1Prescaler>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr

08005b0c <LL_RCC_GetAPB2Prescaler>:
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b34:	6013      	str	r3, [r2, #0]
}
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b50:	6013      	str	r3, [r2, #0]
}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6c:	d101      	bne.n	8005b72 <LL_RCC_PLL_IsReady+0x18>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <LL_RCC_PLL_IsReady+0x1a>
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005baa:	b480      	push	{r7}
 8005bac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0303 	and.w	r3, r3, #3
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d101      	bne.n	8005bee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0c:	d101      	bne.n	8005c12 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c2e:	d101      	bne.n	8005c34 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c50:	d101      	bne.n	8005c56 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e36f      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c72:	f7ff fece 	bl	8005a12 <LL_RCC_GetSysClkSource>
 8005c76:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c78:	f7ff ffa2 	bl	8005bc0 <LL_RCC_PLL_GetMainSource>
 8005c7c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80c4 	beq.w	8005e14 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_RCC_OscConfig+0x3e>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	2b0c      	cmp	r3, #12
 8005c96:	d176      	bne.n	8005d86 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d173      	bne.n	8005d86 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e353      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x68>
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc6:	e006      	b.n	8005cd6 <HAL_RCC_OscConfig+0x76>
 8005cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d222      	bcs.n	8005d20 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fd3c 	bl	800675c <RCC_SetFlashLatencyFromMSIRange>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e331      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf8:	f043 0308 	orr.w	r3, r3, #8
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fe53 	bl	80059c4 <LL_RCC_MSI_SetCalibTrimming>
 8005d1e:	e021      	b.n	8005d64 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d2a:	f043 0308 	orr.w	r3, r3, #8
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fe3a 	bl	80059c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fd01 	bl	800675c <RCC_SetFlashLatencyFromMSIRange>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e2f6      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d64:	f000 fcc2 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4aa7      	ldr	r2, [pc, #668]	; (8006008 <HAL_RCC_OscConfig+0x3a8>)
 8005d6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005d6e:	4ba7      	ldr	r3, [pc, #668]	; (800600c <HAL_RCC_OscConfig+0x3ac>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fc fa2e 	bl	80021d4 <HAL_InitTick>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005d7c:	7cfb      	ldrb	r3, [r7, #19]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d047      	beq.n	8005e12 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	e2e5      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02c      	beq.n	8005de8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d8e:	f7ff fdc6 	bl	800591e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d92:	f7fc fa29 	bl	80021e8 <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d9a:	f7fc fa25 	bl	80021e8 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e2d2      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005dac:	f7ff fdd3 	bl	8005956 <LL_RCC_MSI_IsReady>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f1      	beq.n	8005d9a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc0:	f043 0308 	orr.w	r3, r3, #8
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fdef 	bl	80059c4 <LL_RCC_MSI_SetCalibTrimming>
 8005de6:	e015      	b.n	8005e14 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005de8:	f7ff fda7 	bl	800593a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005dec:	f7fc f9fc 	bl	80021e8 <HAL_GetTick>
 8005df0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005df4:	f7fc f9f8 	bl	80021e8 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e2a5      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e06:	f7ff fda6 	bl	8005956 <LL_RCC_MSI_IsReady>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f1      	bne.n	8005df4 <HAL_RCC_OscConfig+0x194>
 8005e10:	e000      	b.n	8005e14 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e12:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d058      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d005      	beq.n	8005e32 <HAL_RCC_OscConfig+0x1d2>
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d108      	bne.n	8005e3e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d105      	bne.n	8005e3e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d14b      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e289      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e50:	4313      	orrs	r3, r2
 8005e52:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d102      	bne.n	8005e64 <HAL_RCC_OscConfig+0x204>
 8005e5e:	f7ff fcae 	bl	80057be <LL_RCC_HSE_Enable>
 8005e62:	e00d      	b.n	8005e80 <HAL_RCC_OscConfig+0x220>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005e6c:	d104      	bne.n	8005e78 <HAL_RCC_OscConfig+0x218>
 8005e6e:	f7ff fc79 	bl	8005764 <LL_RCC_HSE_EnableTcxo>
 8005e72:	f7ff fca4 	bl	80057be <LL_RCC_HSE_Enable>
 8005e76:	e003      	b.n	8005e80 <HAL_RCC_OscConfig+0x220>
 8005e78:	f7ff fcaf 	bl	80057da <LL_RCC_HSE_Disable>
 8005e7c:	f7ff fc80 	bl	8005780 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d012      	beq.n	8005eae <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e88:	f7fc f9ae 	bl	80021e8 <HAL_GetTick>
 8005e8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fc f9aa 	bl	80021e8 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e257      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005ea2:	f7ff fca8 	bl	80057f6 <LL_RCC_HSE_IsReady>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f1      	beq.n	8005e90 <HAL_RCC_OscConfig+0x230>
 8005eac:	e011      	b.n	8005ed2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eae:	f7fc f99b 	bl	80021e8 <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb6:	f7fc f997 	bl	80021e8 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b64      	cmp	r3, #100	; 0x64
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e244      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005ec8:	f7ff fc95 	bl	80057f6 <LL_RCC_HSE_IsReady>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f1      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d046      	beq.n	8005f6c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x290>
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d10e      	bne.n	8005f08 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d10b      	bne.n	8005f08 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e22a      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fcb6 	bl	8005872 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005f06:	e031      	b.n	8005f6c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d019      	beq.n	8005f44 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f10:	f7ff fc82 	bl	8005818 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fc f968 	bl	80021e8 <HAL_GetTick>
 8005f18:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f1c:	f7fc f964 	bl	80021e8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e211      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f2e:	f7ff fc8f 	bl	8005850 <LL_RCC_HSI_IsReady>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f1      	beq.n	8005f1c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fc98 	bl	8005872 <LL_RCC_HSI_SetCalibTrimming>
 8005f42:	e013      	b.n	8005f6c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f44:	f7ff fc76 	bl	8005834 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fc f94e 	bl	80021e8 <HAL_GetTick>
 8005f4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fc f94a 	bl	80021e8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e1f7      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f62:	f7ff fc75 	bl	8005850 <LL_RCC_HSI_IsReady>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f1      	bne.n	8005f50 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d06e      	beq.n	8006056 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d056      	beq.n	800602e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f88:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d031      	beq.n	8005ffc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d006      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e1d0      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d013      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005fba:	f7ff fc8f 	bl	80058dc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fbe:	f7fc f913 	bl	80021e8 <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fc f90f 	bl	80021e8 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b11      	cmp	r3, #17
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e1bc      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005fd8:	f7ff fc90 	bl	80058fc <LL_RCC_LSI_IsReady>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f1      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fea:	f023 0210 	bic.w	r2, r3, #16
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffc:	f7ff fc5e 	bl	80058bc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006000:	f7fc f8f2 	bl	80021e8 <HAL_GetTick>
 8006004:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006006:	e00c      	b.n	8006022 <HAL_RCC_OscConfig+0x3c2>
 8006008:	20000000 	.word	0x20000000
 800600c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006010:	f7fc f8ea 	bl	80021e8 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b11      	cmp	r3, #17
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e197      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006022:	f7ff fc6b 	bl	80058fc <LL_RCC_LSI_IsReady>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f1      	beq.n	8006010 <HAL_RCC_OscConfig+0x3b0>
 800602c:	e013      	b.n	8006056 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602e:	f7ff fc55 	bl	80058dc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006032:	f7fc f8d9 	bl	80021e8 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800603a:	f7fc f8d5 	bl	80021e8 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b11      	cmp	r3, #17
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e182      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800604c:	f7ff fc56 	bl	80058fc <LL_RCC_LSI_IsReady>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f1      	bne.n	800603a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80d8 	beq.w	8006214 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006064:	f7ff fb6c 	bl	8005740 <LL_PWR_IsEnabledBkUpAccess>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d113      	bne.n	8006096 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800606e:	f7ff faab 	bl	80055c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006072:	f7fc f8b9 	bl	80021e8 <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607a:	f7fc f8b5 	bl	80021e8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e162      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800608c:	f7ff fb58 	bl	8005740 <LL_PWR_IsEnabledBkUpAccess>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0f1      	beq.n	800607a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d07b      	beq.n	8006196 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b85      	cmp	r3, #133	; 0x85
 80060a4:	d003      	beq.n	80060ae <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	d109      	bne.n	80060c2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ba:	f043 0304 	orr.w	r3, r3, #4
 80060be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c2:	f7fc f891 	bl	80021e8 <HAL_GetTick>
 80060c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060dc:	e00a      	b.n	80060f4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060de:	f7fc f883 	bl	80021e8 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e12e      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060f4:	f7ff fbd1 	bl	800589a <LL_RCC_LSE_IsReady>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0ef      	beq.n	80060de <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b81      	cmp	r3, #129	; 0x81
 8006104:	d003      	beq.n	800610e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b85      	cmp	r3, #133	; 0x85
 800610c:	d121      	bne.n	8006152 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610e:	f7fc f86b 	bl	80021e8 <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006128:	e00a      	b.n	8006140 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fc f85d 	bl	80021e8 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	; 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e108      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ec      	beq.n	800612a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006150:	e060      	b.n	8006214 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006152:	f7fc f849 	bl	80021e8 <HAL_GetTick>
 8006156:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fc f83b 	bl	80021e8 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e0e6      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ec      	bne.n	800616e <HAL_RCC_OscConfig+0x50e>
 8006194:	e03e      	b.n	8006214 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006196:	f7fc f827 	bl	80021e8 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061b0:	e00a      	b.n	80061c8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fc f819 	bl	80021e8 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e0c4      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1ec      	bne.n	80061b2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d8:	f7fc f806 	bl	80021e8 <HAL_GetTick>
 80061dc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80061f2:	e00a      	b.n	800620a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f4:	f7fb fff8 	bl	80021e8 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e0a3      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800620a:	f7ff fb46 	bl	800589a <LL_RCC_LSE_IsReady>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1ef      	bne.n	80061f4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8099 	beq.w	8006350 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d06c      	beq.n	80062fe <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	2b02      	cmp	r3, #2
 800622a:	d14b      	bne.n	80062c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622c:	f7ff fc87 	bl	8005b3e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fb ffda 	bl	80021e8 <HAL_GetTick>
 8006234:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fb ffd6 	bl	80021e8 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b0a      	cmp	r3, #10
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e083      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800624a:	f7ff fc86 	bl	8005b5a <LL_RCC_PLL_IsReady>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f1      	bne.n	8006238 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	4b40      	ldr	r3, [pc, #256]	; (800635c <HAL_RCC_OscConfig+0x6fc>)
 800625c:	4013      	ands	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006266:	4311      	orrs	r1, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800626c:	0212      	lsls	r2, r2, #8
 800626e:	4311      	orrs	r1, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006274:	4311      	orrs	r1, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800627a:	4311      	orrs	r1, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006280:	430a      	orrs	r2, r1
 8006282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006286:	4313      	orrs	r3, r2
 8006288:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800628a:	f7ff fc4a 	bl	8005b22 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629e:	f7fb ffa3 	bl	80021e8 <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a6:	f7fb ff9f 	bl	80021e8 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b0a      	cmp	r3, #10
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e04c      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80062b8:	f7ff fc4f 	bl	8005b5a <LL_RCC_PLL_IsReady>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f1      	beq.n	80062a6 <HAL_RCC_OscConfig+0x646>
 80062c2:	e045      	b.n	8006350 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c4:	f7ff fc3b 	bl	8005b3e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c8:	f7fb ff8e 	bl	80021e8 <HAL_GetTick>
 80062cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d0:	f7fb ff8a 	bl	80021e8 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b0a      	cmp	r3, #10
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e037      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80062e2:	f7ff fc3a 	bl	8005b5a <LL_RCC_PLL_IsReady>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f1      	bne.n	80062d0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f6:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <HAL_RCC_OscConfig+0x700>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	60cb      	str	r3, [r1, #12]
 80062fc:	e028      	b.n	8006350 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e023      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f003 0203 	and.w	r2, r3, #3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	429a      	cmp	r2, r3
 800631e:	d115      	bne.n	800634c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632a:	429a      	cmp	r2, r3
 800632c:	d10e      	bne.n	800634c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	429a      	cmp	r2, r3
 800633c:	d106      	bne.n	800634c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	11c1808c 	.word	0x11c1808c
 8006360:	eefefffc 	.word	0xeefefffc

08006364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e10f      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006378:	4b89      	ldr	r3, [pc, #548]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d91b      	bls.n	80063be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b86      	ldr	r3, [pc, #536]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 0207 	bic.w	r2, r3, #7
 800638e:	4984      	ldr	r1, [pc, #528]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006396:	f7fb ff27 	bl	80021e8 <HAL_GetTick>
 800639a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800639e:	f7fb ff23 	bl	80021e8 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e0f3      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b0:	4b7b      	ldr	r3, [pc, #492]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d1ef      	bne.n	800639e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fb2a 	bl	8005a28 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063d4:	f7fb ff08 	bl	80021e8 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063dc:	f7fb ff04 	bl	80021e8 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e0d4      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063ee:	f7ff fbf2 	bl	8005bd6 <LL_RCC_IsActiveFlag_HPRE>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f1      	beq.n	80063dc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d016      	beq.n	8006432 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff fb20 	bl	8005a4e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800640e:	f7fb feeb 	bl	80021e8 <HAL_GetTick>
 8006412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006416:	f7fb fee7 	bl	80021e8 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e0b7      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006428:	f7ff fbe6 	bl	8005bf8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f1      	beq.n	8006416 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fb19 	bl	8005a7a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006448:	f7fb fece 	bl	80021e8 <HAL_GetTick>
 800644c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800644e:	e008      	b.n	8006462 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006450:	f7fb feca 	bl	80021e8 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e09a      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006462:	f7ff fbdb 	bl	8005c1c <LL_RCC_IsActiveFlag_PPRE1>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0f1      	beq.n	8006450 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d017      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fb0e 	bl	8005aa0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006484:	f7fb feb0 	bl	80021e8 <HAL_GetTick>
 8006488:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800648c:	f7fb feac 	bl	80021e8 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e07c      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800649e:	f7ff fbce 	bl	8005c3e <LL_RCC_IsActiveFlag_PPRE2>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f1      	beq.n	800648c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d043      	beq.n	800653c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d106      	bne.n	80064ca <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80064bc:	f7ff f99b 	bl	80057f6 <LL_RCC_HSE_IsReady>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d11e      	bne.n	8006504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e066      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d106      	bne.n	80064e0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80064d2:	f7ff fb42 	bl	8005b5a <LL_RCC_PLL_IsReady>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d113      	bne.n	8006504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e05b      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80064e8:	f7ff fa35 	bl	8005956 <LL_RCC_MSI_IsReady>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d108      	bne.n	8006504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e050      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80064f6:	f7ff f9ab 	bl	8005850 <LL_RCC_HSI_IsReady>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e049      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fa6f 	bl	80059ec <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800650e:	f7fb fe6b 	bl	80021e8 <HAL_GetTick>
 8006512:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006514:	e00a      	b.n	800652c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006516:	f7fb fe67 	bl	80021e8 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e035      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652c:	f7ff fa71 	bl	8005a12 <LL_RCC_GetSysClkSource>
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	429a      	cmp	r2, r3
 800653a:	d1ec      	bne.n	8006516 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800653c:	4b18      	ldr	r3, [pc, #96]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d21b      	bcs.n	8006582 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f023 0207 	bic.w	r2, r3, #7
 8006552:	4913      	ldr	r1, [pc, #76]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	4313      	orrs	r3, r2
 8006558:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800655a:	f7fb fe45 	bl	80021e8 <HAL_GetTick>
 800655e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006560:	e008      	b.n	8006574 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006562:	f7fb fe41 	bl	80021e8 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e011      	b.n	8006598 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <HAL_RCC_ClockConfig+0x23c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d1ef      	bne.n	8006562 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006582:	f000 f8b3 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006586:	4603      	mov	r3, r0
 8006588:	4a06      	ldr	r2, [pc, #24]	; (80065a4 <HAL_RCC_ClockConfig+0x240>)
 800658a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_RCC_ClockConfig+0x244>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f7fb fe1f 	bl	80021d4 <HAL_InitTick>
 8006596:	4603      	mov	r3, r0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	58004000 	.word	0x58004000
 80065a4:	20000000 	.word	0x20000000
 80065a8:	20000004 	.word	0x20000004

080065ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065ac:	b590      	push	{r4, r7, lr}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ba:	f7ff fa2a 	bl	8005a12 <LL_RCC_GetSysClkSource>
 80065be:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065c0:	f7ff fafe 	bl	8005bc0 <LL_RCC_PLL_GetMainSource>
 80065c4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b0c      	cmp	r3, #12
 80065d0:	d139      	bne.n	8006646 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d136      	bne.n	8006646 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80065d8:	f7ff f9cd 	bl	8005976 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d115      	bne.n	800660e <HAL_RCC_GetSysClockFreq+0x62>
 80065e2:	f7ff f9c8 	bl	8005976 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d106      	bne.n	80065fa <HAL_RCC_GetSysClockFreq+0x4e>
 80065ec:	f7ff f9d3 	bl	8005996 <LL_RCC_MSI_GetRange>
 80065f0:	4603      	mov	r3, r0
 80065f2:	0a1b      	lsrs	r3, r3, #8
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	e005      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0x5a>
 80065fa:	f7ff f9d7 	bl	80059ac <LL_RCC_MSI_GetRangeAfterStandby>
 80065fe:	4603      	mov	r3, r0
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	4a36      	ldr	r2, [pc, #216]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660c:	e014      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x8c>
 800660e:	f7ff f9b2 	bl	8005976 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006612:	4603      	mov	r3, r0
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <HAL_RCC_GetSysClockFreq+0x7a>
 8006618:	f7ff f9bd 	bl	8005996 <LL_RCC_MSI_GetRange>
 800661c:	4603      	mov	r3, r0
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	e005      	b.n	8006632 <HAL_RCC_GetSysClockFreq+0x86>
 8006626:	f7ff f9c1 	bl	80059ac <LL_RCC_MSI_GetRangeAfterStandby>
 800662a:	4603      	mov	r3, r0
 800662c:	091b      	lsrs	r3, r3, #4
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	4a2b      	ldr	r2, [pc, #172]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006638:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d115      	bne.n	800666c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006644:	e012      	b.n	800666c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b04      	cmp	r3, #4
 800664a:	d102      	bne.n	8006652 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e00c      	b.n	800666c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d109      	bne.n	800666c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006658:	f7ff f8a0 	bl	800579c <LL_RCC_HSE_IsEnabledDiv2>
 800665c:	4603      	mov	r3, r0
 800665e:	2b01      	cmp	r3, #1
 8006660:	d102      	bne.n	8006668 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006662:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e001      	b.n	800666c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006668:	4b1f      	ldr	r3, [pc, #124]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800666a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800666c:	f7ff f9d1 	bl	8005a12 <LL_RCC_GetSysClkSource>
 8006670:	4603      	mov	r3, r0
 8006672:	2b0c      	cmp	r3, #12
 8006674:	d12f      	bne.n	80066d6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006676:	f7ff faa3 	bl	8005bc0 <LL_RCC_PLL_GetMainSource>
 800667a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d003      	beq.n	800668a <HAL_RCC_GetSysClockFreq+0xde>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d003      	beq.n	8006690 <HAL_RCC_GetSysClockFreq+0xe4>
 8006688:	e00d      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800668a:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800668c:	60fb      	str	r3, [r7, #12]
        break;
 800668e:	e00d      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006690:	f7ff f884 	bl	800579c <LL_RCC_HSE_IsEnabledDiv2>
 8006694:	4603      	mov	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d102      	bne.n	80066a0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800669a:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800669c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800669e:	e005      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80066a0:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80066a2:	60fb      	str	r3, [r7, #12]
        break;
 80066a4:	e002      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	60fb      	str	r3, [r7, #12]
        break;
 80066aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80066ac:	f7ff fa66 	bl	8005b7c <LL_RCC_PLL_GetN>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	fb03 f402 	mul.w	r4, r3, r2
 80066b8:	f7ff fa77 	bl	8005baa <LL_RCC_PLL_GetDivider>
 80066bc:	4603      	mov	r3, r0
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	3301      	adds	r3, #1
 80066c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80066c6:	f7ff fa65 	bl	8005b94 <LL_RCC_PLL_GetR>
 80066ca:	4603      	mov	r3, r0
 80066cc:	0f5b      	lsrs	r3, r3, #29
 80066ce:	3301      	adds	r3, #1
 80066d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80066d4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80066d6:	697b      	ldr	r3, [r7, #20]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd90      	pop	{r4, r7, pc}
 80066e0:	0801e6a4 	.word	0x0801e6a4
 80066e4:	00f42400 	.word	0x00f42400
 80066e8:	01e84800 	.word	0x01e84800

080066ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ec:	b598      	push	{r3, r4, r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066f0:	f7ff ff5c 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 80066f4:	4604      	mov	r4, r0
 80066f6:	f7ff f9e6 	bl	8005ac6 <LL_RCC_GetAHBPrescaler>
 80066fa:	4603      	mov	r3, r0
 80066fc:	091b      	lsrs	r3, r3, #4
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	4a03      	ldr	r2, [pc, #12]	; (8006710 <HAL_RCC_GetHCLKFreq+0x24>)
 8006704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006708:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd98      	pop	{r3, r4, r7, pc}
 8006710:	0801e644 	.word	0x0801e644

08006714 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006714:	b598      	push	{r3, r4, r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006718:	f7ff ffe8 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 800671c:	4604      	mov	r4, r0
 800671e:	f7ff f9ea 	bl	8005af6 <LL_RCC_GetAPB1Prescaler>
 8006722:	4603      	mov	r3, r0
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	4a03      	ldr	r2, [pc, #12]	; (8006734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd98      	pop	{r3, r4, r7, pc}
 8006734:	0801e684 	.word	0x0801e684

08006738 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006738:	b598      	push	{r3, r4, r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800673c:	f7ff ffd6 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006740:	4604      	mov	r4, r0
 8006742:	f7ff f9e3 	bl	8005b0c <LL_RCC_GetAPB2Prescaler>
 8006746:	4603      	mov	r3, r0
 8006748:	0adb      	lsrs	r3, r3, #11
 800674a:	4a03      	ldr	r2, [pc, #12]	; (8006758 <HAL_RCC_GetPCLK2Freq+0x20>)
 800674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006750:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	bd98      	pop	{r3, r4, r7, pc}
 8006758:	0801e684 	.word	0x0801e684

0800675c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	091b      	lsrs	r3, r3, #4
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	4a10      	ldr	r2, [pc, #64]	; (80067b0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800676e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006772:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006774:	f7ff f9b2 	bl	8005adc <LL_RCC_GetAHB3Prescaler>
 8006778:	4603      	mov	r3, r0
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	0c9c      	lsrs	r4, r3, #18
 8006798:	f7fe ff58 	bl	800564c <HAL_PWREx_GetVoltageRange>
 800679c:	4603      	mov	r3, r0
 800679e:	4619      	mov	r1, r3
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 f80b 	bl	80067bc <RCC_SetFlashLatency>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd90      	pop	{r4, r7, pc}
 80067b0:	0801e6a4 	.word	0x0801e6a4
 80067b4:	0801e644 	.word	0x0801e644
 80067b8:	431bde83 	.word	0x431bde83

080067bc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08e      	sub	sp, #56	; 0x38
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80067c6:	4a3a      	ldr	r2, [pc, #232]	; (80068b0 <RCC_SetFlashLatency+0xf4>)
 80067c8:	f107 0320 	add.w	r3, r7, #32
 80067cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067d0:	6018      	str	r0, [r3, #0]
 80067d2:	3304      	adds	r3, #4
 80067d4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80067d6:	4a37      	ldr	r2, [pc, #220]	; (80068b4 <RCC_SetFlashLatency+0xf8>)
 80067d8:	f107 0318 	add.w	r3, r7, #24
 80067dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067e0:	6018      	str	r0, [r3, #0]
 80067e2:	3304      	adds	r3, #4
 80067e4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80067e6:	4a34      	ldr	r2, [pc, #208]	; (80068b8 <RCC_SetFlashLatency+0xfc>)
 80067e8:	f107 030c 	add.w	r3, r7, #12
 80067ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80067ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80067f2:	2300      	movs	r3, #0
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	d11b      	bne.n	8006836 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067fe:	2300      	movs	r3, #0
 8006800:	633b      	str	r3, [r7, #48]	; 0x30
 8006802:	e014      	b.n	800682e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	3338      	adds	r3, #56	; 0x38
 800680a:	443b      	add	r3, r7
 800680c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006810:	461a      	mov	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4293      	cmp	r3, r2
 8006816:	d807      	bhi.n	8006828 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	3338      	adds	r3, #56	; 0x38
 800681e:	443b      	add	r3, r7
 8006820:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006826:	e021      	b.n	800686c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	3301      	adds	r3, #1
 800682c:	633b      	str	r3, [r7, #48]	; 0x30
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2b02      	cmp	r3, #2
 8006832:	d9e7      	bls.n	8006804 <RCC_SetFlashLatency+0x48>
 8006834:	e01a      	b.n	800686c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006836:	2300      	movs	r3, #0
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683a:	e014      	b.n	8006866 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	3338      	adds	r3, #56	; 0x38
 8006842:	443b      	add	r3, r7
 8006844:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006848:	461a      	mov	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4293      	cmp	r3, r2
 800684e:	d807      	bhi.n	8006860 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	3338      	adds	r3, #56	; 0x38
 8006856:	443b      	add	r3, r7
 8006858:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800685e:	e005      	b.n	800686c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	3301      	adds	r3, #1
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	2b02      	cmp	r3, #2
 800686a:	d9e7      	bls.n	800683c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <RCC_SetFlashLatency+0x100>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f023 0207 	bic.w	r2, r3, #7
 8006874:	4911      	ldr	r1, [pc, #68]	; (80068bc <RCC_SetFlashLatency+0x100>)
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	4313      	orrs	r3, r2
 800687a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800687c:	f7fb fcb4 	bl	80021e8 <HAL_GetTick>
 8006880:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006882:	e008      	b.n	8006896 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006884:	f7fb fcb0 	bl	80021e8 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e007      	b.n	80068a6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006896:	4b09      	ldr	r3, [pc, #36]	; (80068bc <RCC_SetFlashLatency+0x100>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d1ef      	bne.n	8006884 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3738      	adds	r7, #56	; 0x38
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	0801dd94 	.word	0x0801dd94
 80068b4:	0801dd9c 	.word	0x0801dd9c
 80068b8:	0801dda4 	.word	0x0801dda4
 80068bc:	58004000 	.word	0x58004000

080068c0 <LL_RCC_LSE_IsReady>:
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d101      	bne.n	80068d8 <LL_RCC_LSE_IsReady+0x18>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <LL_RCC_LSE_IsReady+0x1a>
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <LL_RCC_SetUSARTClockSource>:
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80068ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	43db      	mvns	r3, r3
 80068f8:	401a      	ands	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr

08006912 <LL_RCC_SetI2SClockSource>:
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800691a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr

0800693c <LL_RCC_SetLPUARTClockSource>:
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr

08006966 <LL_RCC_SetI2CClockSource>:
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800696e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006972:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	091b      	lsrs	r3, r3, #4
 800697a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800697e:	43db      	mvns	r3, r3
 8006980:	401a      	ands	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800698a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <LL_RCC_SetLPTIMClockSource>:
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <LL_RCC_SetRNGClockSource>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80069e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr

080069fa <LL_RCC_SetADCClockSource>:
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <LL_RCC_SetRTCClockSource>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <LL_RCC_GetRTCClockSource>:
{
 8006a4e:	b480      	push	{r7}
 8006a50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <LL_RCC_ForceBackupDomainReset>:
{
 8006a66:	b480      	push	{r7}
 8006a68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a7e:	bf00      	nop
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006a86:	b480      	push	{r7}
 8006a88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a9e:	bf00      	nop
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
	...

08006aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ab8:	2300      	movs	r3, #0
 8006aba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d058      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006ac8:	f7fe fd7e 	bl	80055c8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006acc:	f7fb fb8c 	bl	80021e8 <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ad2:	e009      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad4:	f7fb fb88 	bl	80021e8 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d902      	bls.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	74fb      	strb	r3, [r7, #19]
        break;
 8006ae6:	e006      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ae8:	4b7b      	ldr	r3, [pc, #492]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af4:	d1ee      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006af6:	7cfb      	ldrb	r3, [r7, #19]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d13c      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006afc:	f7ff ffa7 	bl	8006a4e <LL_RCC_GetRTCClockSource>
 8006b00:	4602      	mov	r2, r0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d00f      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b16:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b18:	f7ff ffa5 	bl	8006a66 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b1c:	f7ff ffb3 	bl	8006a86 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d014      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fb fb58 	bl	80021e8 <HAL_GetTick>
 8006b38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b3a:	e00b      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3c:	f7fb fb54 	bl	80021e8 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d902      	bls.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	74fb      	strb	r3, [r7, #19]
            break;
 8006b52:	e004      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b54:	f7ff feb4 	bl	80068c0 <LL_RCC_LSE_IsReady>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d1ee      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006b5e:	7cfb      	ldrb	r3, [r7, #19]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff ff5b 	bl	8006a24 <LL_RCC_SetRTCClockSource>
 8006b6e:	e004      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b70:	7cfb      	ldrb	r3, [r7, #19]
 8006b72:	74bb      	strb	r3, [r7, #18]
 8006b74:	e001      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b76:	7cfb      	ldrb	r3, [r7, #19]
 8006b78:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fea9 	bl	80068e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fe9e 	bl	80068e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff fec0 	bl	800693c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fee6 	bl	800699e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fedb 	bl	800699e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fed0 	bl	800699e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fea9 	bl	8006966 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fe9e 	bl	8006966 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fe93 	bl	8006966 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d011      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fe5e 	bl	8006912 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fea5 	bl	80069d0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d011      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fea3 	bl	80069fa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cbc:	d107      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ccc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006cce:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	58000400 	.word	0x58000400

08006cdc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d071      	beq.n	8006dd2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fa fee8 	bl	8001ad8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d10:	4b32      	ldr	r3, [pc, #200]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d051      	beq.n	8006dc0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d1c:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d1e:	22ca      	movs	r2, #202	; 0xca
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d24:	2253      	movs	r2, #83	; 0x53
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa11 	bl	8007150 <RTC_EnterInitMode>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d13f      	bne.n	8006db8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006d38:	4b28      	ldr	r3, [pc, #160]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d3e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d46:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006d48:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	4319      	orrs	r1, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	491f      	ldr	r1, [pc, #124]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	491b      	ldr	r1, [pc, #108]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006d72:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	430b      	orrs	r3, r1
 8006d84:	4915      	ldr	r1, [pc, #84]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa14 	bl	80071b8 <RTC_ExitInitMode>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10e      	bne.n	8006db8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006d9a:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a19      	ldr	r1, [r3, #32]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	4319      	orrs	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	430b      	orrs	r3, r1
 8006db2:	490a      	ldr	r1, [pc, #40]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006db8:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <HAL_RTC_Init+0x100>)
 8006dba:	22ff      	movs	r2, #255	; 0xff
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24
 8006dbe:	e001      	b.n	8006dc4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40002800 	.word	0x40002800

08006de0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_RTC_SetAlarm_IT+0x1e>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e0f3      	b.n	8006fe6 <HAL_RTC_SetAlarm_IT+0x206>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006e0e:	4b78      	ldr	r3, [pc, #480]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e16:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1e:	d06a      	beq.n	8006ef6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d13a      	bne.n	8006e9c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006e26:	4b72      	ldr	r3, [pc, #456]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 f9f5 	bl	8007234 <RTC_ByteToBcd2>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 f9ee 	bl	8007234 <RTC_ByteToBcd2>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e5c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	789b      	ldrb	r3, [r3, #2]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f9e6 	bl	8007234 <RTC_ByteToBcd2>
 8006e68:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e6a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	78db      	ldrb	r3, [r3, #3]
 8006e72:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e74:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f9d8 	bl	8007234 <RTC_ByteToBcd2>
 8006e84:	4603      	mov	r3, r0
 8006e86:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e88:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e90:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e96:	4313      	orrs	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	e02c      	b.n	8006ef6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006ea4:	d00d      	beq.n	8006ec2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eae:	d008      	beq.n	8006ec2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006eb0:	4b4f      	ldr	r3, [pc, #316]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ece:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ed4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	78db      	ldrb	r3, [r3, #3]
 8006eda:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006edc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ee4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ee6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006eec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ef6:	4b3e      	ldr	r3, [pc, #248]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ef8:	22ca      	movs	r2, #202	; 0xca
 8006efa:	625a      	str	r2, [r3, #36]	; 0x24
 8006efc:	4b3c      	ldr	r3, [pc, #240]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006efe:	2253      	movs	r2, #83	; 0x53
 8006f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0a:	d12c      	bne.n	8006f66 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f0c:	4b38      	ldr	r3, [pc, #224]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	4a37      	ldr	r2, [pc, #220]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f16:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f18:	4b35      	ldr	r3, [pc, #212]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f24:	d107      	bne.n	8006f36 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	4930      	ldr	r1, [pc, #192]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	644b      	str	r3, [r1, #68]	; 0x44
 8006f34:	e006      	b.n	8006f44 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006f36:	4a2e      	ldr	r2, [pc, #184]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006f3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006f44:	4a2a      	ldr	r2, [pc, #168]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	f043 0201 	orr.w	r2, r3, #1
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	4a24      	ldr	r2, [pc, #144]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f5e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006f62:	6193      	str	r3, [r2, #24]
 8006f64:	e02b      	b.n	8006fbe <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f66:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	4a21      	ldr	r2, [pc, #132]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f6c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006f70:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f72:	4b1f      	ldr	r3, [pc, #124]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f74:	2202      	movs	r2, #2
 8006f76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7e:	d107      	bne.n	8006f90 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	699a      	ldr	r2, [r3, #24]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	4919      	ldr	r1, [pc, #100]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f8e:	e006      	b.n	8006f9e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006f90:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006f96:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006f9e:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	f043 0202 	orr.w	r2, r3, #2
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fb8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006fbc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <HAL_RTC_SetAlarm_IT+0x214>)
 8006fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc4:	4a0b      	ldr	r2, [pc, #44]	; (8006ff4 <HAL_RTC_SetAlarm_IT+0x214>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fd0:	22ff      	movs	r2, #255	; 0xff
 8006fd2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	40002800 	.word	0x40002800
 8006ff4:	58000800 	.word	0x58000800

08006ff8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_RTC_DeactivateAlarm+0x18>
 800700c:	2302      	movs	r3, #2
 800700e:	e048      	b.n	80070a2 <HAL_RTC_DeactivateAlarm+0xaa>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007020:	4b22      	ldr	r3, [pc, #136]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007022:	22ca      	movs	r2, #202	; 0xca
 8007024:	625a      	str	r2, [r3, #36]	; 0x24
 8007026:	4b21      	ldr	r3, [pc, #132]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007028:	2253      	movs	r2, #83	; 0x53
 800702a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007032:	d115      	bne.n	8007060 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007034:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800703a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800703e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007044:	4a19      	ldr	r2, [pc, #100]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800704a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	f023 0201 	bic.w	r2, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007058:	4b14      	ldr	r3, [pc, #80]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800705a:	2201      	movs	r2, #1
 800705c:	65da      	str	r2, [r3, #92]	; 0x5c
 800705e:	e014      	b.n	800708a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007060:	4b12      	ldr	r3, [pc, #72]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	4a11      	ldr	r2, [pc, #68]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007066:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800706a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800706e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007070:	4a0e      	ldr	r2, [pc, #56]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007072:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007076:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	f023 0202 	bic.w	r2, r3, #2
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007084:	4b09      	ldr	r3, [pc, #36]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007086:	2202      	movs	r2, #2
 8007088:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	40002800 	.word	0x40002800

080070b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <HAL_RTC_AlarmIRQHandler+0x50>)
 80070ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	4013      	ands	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <HAL_RTC_AlarmIRQHandler+0x50>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fb fa48 	bl	800256a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <HAL_RTC_AlarmIRQHandler+0x50>)
 80070e6:	2202      	movs	r2, #2
 80070e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f94a 	bl	8007384 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40002800 	.word	0x40002800

08007104 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800710c:	4b0f      	ldr	r3, [pc, #60]	; (800714c <HAL_RTC_WaitForSynchro+0x48>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4a0e      	ldr	r2, [pc, #56]	; (800714c <HAL_RTC_WaitForSynchro+0x48>)
 8007112:	f023 0320 	bic.w	r3, r3, #32
 8007116:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007118:	f7fb f866 	bl	80021e8 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800711e:	e009      	b.n	8007134 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007120:	f7fb f862 	bl	80021e8 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712e:	d901      	bls.n	8007134 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e006      	b.n	8007142 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RTC_WaitForSynchro+0x48>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0ef      	beq.n	8007120 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40002800 	.word	0x40002800

08007150 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800715c:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <RTC_EnterInitMode+0x64>)
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d120      	bne.n	80071aa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007168:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <RTC_EnterInitMode+0x64>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <RTC_EnterInitMode+0x64>)
 800716e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007172:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007174:	f7fb f838 	bl	80021e8 <HAL_GetTick>
 8007178:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800717a:	e00d      	b.n	8007198 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800717c:	f7fb f834 	bl	80021e8 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718a:	d905      	bls.n	8007198 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2203      	movs	r2, #3
 8007194:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <RTC_EnterInitMode+0x64>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <RTC_EnterInitMode+0x5a>
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d1e8      	bne.n	800717c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40002800 	.word	0x40002800

080071b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80071c4:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <RTC_ExitInitMode+0x78>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4a19      	ldr	r2, [pc, #100]	; (8007230 <RTC_ExitInitMode+0x78>)
 80071ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80071d0:	4b17      	ldr	r3, [pc, #92]	; (8007230 <RTC_ExitInitMode+0x78>)
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10c      	bne.n	80071f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff ff91 	bl	8007104 <HAL_RTC_WaitForSynchro>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01e      	beq.n	8007226 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2203      	movs	r2, #3
 80071ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	73fb      	strb	r3, [r7, #15]
 80071f4:	e017      	b.n	8007226 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <RTC_ExitInitMode+0x78>)
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	4a0d      	ldr	r2, [pc, #52]	; (8007230 <RTC_ExitInitMode+0x78>)
 80071fc:	f023 0320 	bic.w	r3, r3, #32
 8007200:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff ff7e 	bl	8007104 <HAL_RTC_WaitForSynchro>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2203      	movs	r2, #3
 8007212:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <RTC_ExitInitMode+0x78>)
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	4a04      	ldr	r2, [pc, #16]	; (8007230 <RTC_ExitInitMode+0x78>)
 8007220:	f043 0320 	orr.w	r3, r3, #32
 8007224:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40002800 	.word	0x40002800

08007234 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007246:	e005      	b.n	8007254 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	3b0a      	subs	r3, #10
 8007252:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	2b09      	cmp	r3, #9
 8007258:	d8f6      	bhi.n	8007248 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	b2da      	uxtb	r2, r3
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	4313      	orrs	r3, r2
 8007266:	b2db      	uxtb	r3, r3
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr
	...

08007274 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_RTCEx_EnableBypassShadow+0x16>
 8007286:	2302      	movs	r3, #2
 8007288:	e01f      	b.n	80072ca <HAL_RTCEx_EnableBypassShadow+0x56>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800729c:	22ca      	movs	r2, #202	; 0xca
 800729e:	625a      	str	r2, [r3, #36]	; 0x24
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072a2:	2253      	movs	r2, #83	; 0x53
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	4a0a      	ldr	r2, [pc, #40]	; (80072d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072ac:	f043 0320 	orr.w	r3, r3, #32
 80072b0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072b2:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	40002800 	.word	0x40002800

080072d8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_RTCEx_SetSSRU_IT+0x16>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e027      	b.n	800733e <HAL_RTCEx_SetSSRU_IT+0x66>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2202      	movs	r2, #2
 80072fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007300:	22ca      	movs	r2, #202	; 0xca
 8007302:	625a      	str	r2, [r3, #36]	; 0x24
 8007304:	4b10      	ldr	r3, [pc, #64]	; (8007348 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007306:	2253      	movs	r2, #83	; 0x53
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	4a0e      	ldr	r2, [pc, #56]	; (8007348 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007314:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007316:	4b0d      	ldr	r3, [pc, #52]	; (800734c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800731c:	4a0b      	ldr	r2, [pc, #44]	; (800734c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800731e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007322:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007328:	22ff      	movs	r2, #255	; 0xff
 800732a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	40002800 	.word	0x40002800
 800734c:	58000800 	.word	0x58000800

08007350 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007358:	4b09      	ldr	r3, [pc, #36]	; (8007380 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800735a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007364:	4b06      	ldr	r3, [pc, #24]	; (8007380 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007366:	2240      	movs	r2, #64	; 0x40
 8007368:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fb f907 	bl	800257e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40002800 	.word	0x40002800

08007384 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr
	...

08007398 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80073a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4413      	add	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	4000b100 	.word	0x4000b100

080073c8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80073d2:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <HAL_RTCEx_BKUPRead+0x28>)
 80073d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	4000b100 	.word	0x4000b100

080073f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e0c6      	b.n	8007594 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007416:	d009      	beq.n	800742c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	61da      	str	r2, [r3, #28]
 800741e:	e005      	b.n	800742c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fa fbf3 	bl	8001c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007466:	d902      	bls.n	800746e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e002      	b.n	8007474 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800746e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007472:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800747c:	d007      	beq.n	800748e <HAL_SPI_Init+0x9a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007486:	d002      	beq.n	800748e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d0:	ea42 0103 	orr.w	r1, r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ec:	d11b      	bne.n	8007526 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074fe:	d903      	bls.n	8007508 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
 8007506:	e002      	b.n	800750e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	2b02      	cmp	r3, #2
 8007514:	d107      	bne.n	8007526 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007524:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f003 0204 	and.w	r2, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800754c:	ea42 0103 	orr.w	r1, r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007566:	d105      	bne.n	8007574 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	b292      	uxth	r2, r2
 8007572:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007582:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <LL_PWR_SetRadioBusyTrigger>:
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075ac:	4904      	ldr	r1, [pc, #16]	; (80075c0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	608b      	str	r3, [r1, #8]
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	58000400 	.word	0x58000400

080075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	4a04      	ldr	r2, [pc, #16]	; (80075e0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80075d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80075d8:	bf00      	nop
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr
 80075e0:	58000400 	.word	0x58000400

080075e4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075e8:	4b05      	ldr	r3, [pc, #20]	; (8007600 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ee:	4a04      	ldr	r2, [pc, #16]	; (8007600 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80075f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80075f8:	bf00      	nop
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bc80      	pop	{r7}
 80075fe:	4770      	bx	lr
 8007600:	58000400 	.word	0x58000400

08007604 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007608:	4b03      	ldr	r3, [pc, #12]	; (8007618 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800760a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800760e:	619a      	str	r2, [r3, #24]
}
 8007610:	bf00      	nop
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr
 8007618:	58000400 	.word	0x58000400

0800761c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b02      	cmp	r3, #2
 800762a:	d101      	bne.n	8007630 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	58000400 	.word	0x58000400

08007640 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007644:	4b06      	ldr	r3, [pc, #24]	; (8007660 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d101      	bne.n	8007654 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	58000400 	.word	0x58000400

08007664 <LL_RCC_RF_DisableReset>:
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800766c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800767c:	bf00      	nop
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr

08007684 <LL_RCC_IsRFUnderReset>:
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007698:	d101      	bne.n	800769e <LL_RCC_IsRFUnderReset+0x1a>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <LL_RCC_IsRFUnderReset+0x1c>
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr

080076a8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <LL_EXTI_EnableIT_32_63+0x24>)
 80076b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80076b6:	4905      	ldr	r1, [pc, #20]	; (80076cc <LL_EXTI_EnableIT_32_63+0x24>)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	58000800 	.word	0x58000800

080076d0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
    return status;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	e052      	b.n	800778c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	799b      	ldrb	r3, [r3, #6]
 80076ee:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_SUBGHZ_Init+0x2c>
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d109      	bne.n	8007710 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fa fbc8 	bl	8001e98 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007708:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800770c:	f7ff ffcc 	bl	80076a8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d126      	bne.n	8007764 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800771c:	f7ff ffa2 	bl	8007664 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007720:	4b1c      	ldr	r3, [pc, #112]	; (8007794 <HAL_SUBGHZ_Init+0xc4>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	0cdb      	lsrs	r3, r3, #19
 800772e:	2264      	movs	r2, #100	; 0x64
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d105      	bne.n	8007748 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	609a      	str	r2, [r3, #8]
        break;
 8007746:	e007      	b.n	8007758 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	3b01      	subs	r3, #1
 800774c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800774e:	f7ff ff99 	bl	8007684 <LL_RCC_IsRFUnderReset>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1ee      	bne.n	8007736 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007758:	f7ff ff34 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800775c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007760:	f7ff ff1c 	bl	800759c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007764:	f7ff ff4e 	bl	8007604 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 faac 	bl	8007cd0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	719a      	strb	r2, [r3, #6]

  return status;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000000 	.word	0x20000000

08007798 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	461a      	mov	r2, r3
 80077a4:	460b      	mov	r3, r1
 80077a6:	817b      	strh	r3, [r7, #10]
 80077a8:	4613      	mov	r3, r2
 80077aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	799b      	ldrb	r3, [r3, #6]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d14a      	bne.n	800784c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	795b      	ldrb	r3, [r3, #5]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d101      	bne.n	80077c2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80077be:	2302      	movs	r3, #2
 80077c0:	e045      	b.n	800784e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2202      	movs	r2, #2
 80077cc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fb4c 	bl	8007e6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077d4:	f7ff ff06 	bl	80075e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80077d8:	210d      	movs	r1, #13
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 fa98 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80077e0:	897b      	ldrh	r3, [r7, #10]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fa90 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80077f0:	897b      	ldrh	r3, [r7, #10]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	4619      	mov	r1, r3
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 fa8a 	bl	8007d10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077fc:	2300      	movs	r3, #0
 80077fe:	82bb      	strh	r3, [r7, #20]
 8007800:	e00a      	b.n	8007818 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007802:	8abb      	ldrh	r3, [r7, #20]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	4413      	add	r3, r2
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	4619      	mov	r1, r3
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fa7f 	bl	8007d10 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007812:	8abb      	ldrh	r3, [r7, #20]
 8007814:	3301      	adds	r3, #1
 8007816:	82bb      	strh	r3, [r7, #20]
 8007818:	8aba      	ldrh	r2, [r7, #20]
 800781a:	893b      	ldrh	r3, [r7, #8]
 800781c:	429a      	cmp	r2, r3
 800781e:	d3f0      	bcc.n	8007802 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007820:	f7ff fed0 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fb45 	bl	8007eb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	75fb      	strb	r3, [r7, #23]
 8007836:	e001      	b.n	800783c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	715a      	strb	r2, [r3, #5]

    return status;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	e000      	b.n	800784e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800784c:	2302      	movs	r3, #2
  }
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b088      	sub	sp, #32
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	461a      	mov	r2, r3
 8007862:	460b      	mov	r3, r1
 8007864:	817b      	strh	r3, [r7, #10]
 8007866:	4613      	mov	r3, r2
 8007868:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	799b      	ldrb	r3, [r3, #6]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	d14a      	bne.n	800790e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007880:	2302      	movs	r3, #2
 8007882:	e045      	b.n	8007910 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 faee 	bl	8007e6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007890:	f7ff fea8 	bl	80075e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007894:	211d      	movs	r1, #29
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fa3a 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800789c:	897b      	ldrh	r3, [r7, #10]
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	4619      	mov	r1, r3
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fa32 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80078ac:	897b      	ldrh	r3, [r7, #10]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	4619      	mov	r1, r3
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fa2c 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80078b8:	2100      	movs	r1, #0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fa28 	bl	8007d10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078c0:	2300      	movs	r3, #0
 80078c2:	82fb      	strh	r3, [r7, #22]
 80078c4:	e009      	b.n	80078da <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078c6:	69b9      	ldr	r1, [r7, #24]
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fa77 	bl	8007dbc <SUBGHZSPI_Receive>
      pData++;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	3301      	adds	r3, #1
 80078d2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078d4:	8afb      	ldrh	r3, [r7, #22]
 80078d6:	3301      	adds	r3, #1
 80078d8:	82fb      	strh	r3, [r7, #22]
 80078da:	8afa      	ldrh	r2, [r7, #22]
 80078dc:	893b      	ldrh	r3, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d3f1      	bcc.n	80078c6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078e2:	f7ff fe6f 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fae4 	bl	8007eb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e001      	b.n	80078fe <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	715a      	strb	r2, [r3, #5]

    return status;
 800790a:	7ffb      	ldrb	r3, [r7, #31]
 800790c:	e000      	b.n	8007910 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800790e:	2302      	movs	r3, #2
  }
}
 8007910:	4618      	mov	r0, r3
 8007912:	3720      	adds	r7, #32
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	607a      	str	r2, [r7, #4]
 8007922:	461a      	mov	r2, r3
 8007924:	460b      	mov	r3, r1
 8007926:	72fb      	strb	r3, [r7, #11]
 8007928:	4613      	mov	r3, r2
 800792a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	799b      	ldrb	r3, [r3, #6]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	d14a      	bne.n	80079cc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800793e:	2302      	movs	r3, #2
 8007940:	e045      	b.n	80079ce <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fa8f 	bl	8007e6c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800794e:	7afb      	ldrb	r3, [r7, #11]
 8007950:	2b84      	cmp	r3, #132	; 0x84
 8007952:	d002      	beq.n	800795a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	2b94      	cmp	r3, #148	; 0x94
 8007958:	d103      	bne.n	8007962 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	711a      	strb	r2, [r3, #4]
 8007960:	e002      	b.n	8007968 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007968:	f7ff fe3c 	bl	80075e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	4619      	mov	r1, r3
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 f9cd 	bl	8007d10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007976:	2300      	movs	r3, #0
 8007978:	82bb      	strh	r3, [r7, #20]
 800797a:	e00a      	b.n	8007992 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800797c:	8abb      	ldrh	r3, [r7, #20]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4413      	add	r3, r2
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 f9c2 	bl	8007d10 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800798c:	8abb      	ldrh	r3, [r7, #20]
 800798e:	3301      	adds	r3, #1
 8007990:	82bb      	strh	r3, [r7, #20]
 8007992:	8aba      	ldrh	r2, [r7, #20]
 8007994:	893b      	ldrh	r3, [r7, #8]
 8007996:	429a      	cmp	r2, r3
 8007998:	d3f0      	bcc.n	800797c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800799a:	f7ff fe13 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800799e:	7afb      	ldrb	r3, [r7, #11]
 80079a0:	2b84      	cmp	r3, #132	; 0x84
 80079a2:	d002      	beq.n	80079aa <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fa85 	bl	8007eb4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
 80079b6:	e001      	b.n	80079bc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	715a      	strb	r2, [r3, #5]

    return status;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	e000      	b.n	80079ce <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80079cc:	2302      	movs	r3, #2
  }
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b088      	sub	sp, #32
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	461a      	mov	r2, r3
 80079e2:	460b      	mov	r3, r1
 80079e4:	72fb      	strb	r3, [r7, #11]
 80079e6:	4613      	mov	r3, r2
 80079e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	799b      	ldrb	r3, [r3, #6]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d13d      	bne.n	8007a74 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	795b      	ldrb	r3, [r3, #5]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e038      	b.n	8007a76 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fa2e 	bl	8007e6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a10:	f7ff fde8 	bl	80075e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f979 	bl	8007d10 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a1e:	2100      	movs	r1, #0
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f975 	bl	8007d10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	82fb      	strh	r3, [r7, #22]
 8007a2a:	e009      	b.n	8007a40 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a2c:	69b9      	ldr	r1, [r7, #24]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f9c4 	bl	8007dbc <SUBGHZSPI_Receive>
      pData++;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a3a:	8afb      	ldrh	r3, [r7, #22]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	82fb      	strh	r3, [r7, #22]
 8007a40:	8afa      	ldrh	r2, [r7, #22]
 8007a42:	893b      	ldrh	r3, [r7, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d3f1      	bcc.n	8007a2c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a48:	f7ff fdbc 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fa31 	bl	8007eb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	77fb      	strb	r3, [r7, #31]
 8007a5e:	e001      	b.n	8007a64 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	715a      	strb	r2, [r3, #5]

    return status;
 8007a70:	7ffb      	ldrb	r3, [r7, #31]
 8007a72:	e000      	b.n	8007a76 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a74:	2302      	movs	r3, #2
  }
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	72fb      	strb	r3, [r7, #11]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	799b      	ldrb	r3, [r3, #6]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d13e      	bne.n	8007b1a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	795b      	ldrb	r3, [r3, #5]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e039      	b.n	8007b1c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f9dc 	bl	8007e6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ab4:	f7ff fd96 	bl	80075e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007ab8:	210e      	movs	r1, #14
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f928 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f923 	bl	8007d10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	82bb      	strh	r3, [r7, #20]
 8007ace:	e00a      	b.n	8007ae6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007ad0:	8abb      	ldrh	r3, [r7, #20]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 f918 	bl	8007d10 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007ae0:	8abb      	ldrh	r3, [r7, #20]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	82bb      	strh	r3, [r7, #20]
 8007ae6:	8aba      	ldrh	r2, [r7, #20]
 8007ae8:	893b      	ldrh	r3, [r7, #8]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d3f0      	bcc.n	8007ad0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007aee:	f7ff fd69 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f9de 	bl	8007eb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
 8007b04:	e001      	b.n	8007b0a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	715a      	strb	r2, [r3, #5]

    return status;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	e000      	b.n	8007b1c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	72fb      	strb	r3, [r7, #11]
 8007b34:	4613      	mov	r3, r2
 8007b36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	799b      	ldrb	r3, [r3, #6]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d141      	bne.n	8007bca <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	795b      	ldrb	r3, [r3, #5]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d101      	bne.n	8007b52 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e03c      	b.n	8007bcc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f987 	bl	8007e6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b5e:	f7ff fd41 	bl	80075e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007b62:	211e      	movs	r1, #30
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f8d3 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f8ce 	bl	8007d10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007b74:	2100      	movs	r1, #0
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f8ca 	bl	8007d10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	82fb      	strh	r3, [r7, #22]
 8007b80:	e009      	b.n	8007b96 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f919 	bl	8007dbc <SUBGHZSPI_Receive>
      pData++;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007b90:	8afb      	ldrh	r3, [r7, #22]
 8007b92:	3301      	adds	r3, #1
 8007b94:	82fb      	strh	r3, [r7, #22]
 8007b96:	8afa      	ldrh	r2, [r7, #22]
 8007b98:	893b      	ldrh	r3, [r7, #8]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d3f1      	bcc.n	8007b82 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b9e:	f7ff fd11 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f986 	bl	8007eb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e001      	b.n	8007bba <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	715a      	strb	r2, [r3, #5]

    return status;
 8007bc6:	7ffb      	ldrb	r3, [r7, #31]
 8007bc8:	e000      	b.n	8007bcc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007bca:	2302      	movs	r3, #2
  }
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3720      	adds	r7, #32
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007bdc:	2300      	movs	r3, #0
 8007bde:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007be0:	f107 020c 	add.w	r2, r7, #12
 8007be4:	2302      	movs	r3, #2
 8007be6:	2112      	movs	r1, #18
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fef4 	bl	80079d6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007bee:	7b3b      	ldrb	r3, [r7, #12]
 8007bf0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007bf2:	89fb      	ldrh	r3, [r7, #14]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	b21a      	sxth	r2, r3
 8007bf8:	7b7b      	ldrb	r3, [r7, #13]
 8007bfa:	b21b      	sxth	r3, r3
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b21b      	sxth	r3, r3
 8007c00:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007c02:	f107 020c 	add.w	r2, r7, #12
 8007c06:	2302      	movs	r3, #2
 8007c08:	2102      	movs	r1, #2
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fe84 	bl	8007918 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007c10:	89fb      	ldrh	r3, [r7, #14]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f014 fab4 	bl	801c188 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007c20:	89fb      	ldrh	r3, [r7, #14]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f014 faba 	bl	801c1a4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007c30:	89fb      	ldrh	r3, [r7, #14]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f014 fb0a 	bl	801c254 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007c40:	89fb      	ldrh	r3, [r7, #14]
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f014 fb10 	bl	801c270 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007c50:	89fb      	ldrh	r3, [r7, #14]
 8007c52:	f003 0310 	and.w	r3, r3, #16
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f014 fb16 	bl	801c28c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007c60:	89fb      	ldrh	r3, [r7, #14]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f014 fae4 	bl	801c238 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f014 faa0 	bl	801c1c0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007c80:	89fb      	ldrh	r3, [r7, #14]
 8007c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00d      	beq.n	8007ca6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007c8a:	89fb      	ldrh	r3, [r7, #14]
 8007c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f014 faa0 	bl	801c1dc <HAL_SUBGHZ_CADStatusCallback>
 8007c9c:	e003      	b.n	8007ca6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f014 fa9b 	bl	801c1dc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007ca6:	89fb      	ldrh	r3, [r7, #14]
 8007ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f014 fab1 	bl	801c218 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007cb6:	89fb      	ldrh	r3, [r7, #14]
 8007cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f014 faf1 	bl	801c2a8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <SUBGHZSPI_Init+0x3c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <SUBGHZSPI_Init+0x3c>)
 8007cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007ce4:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <SUBGHZSPI_Init+0x3c>)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007cec:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <SUBGHZSPI_Init+0x3c>)
 8007cf0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007cf4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <SUBGHZSPI_Init+0x3c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <SUBGHZSPI_Init+0x3c>)
 8007cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d00:	6013      	str	r3, [r2, #0]
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr
 8007d0c:	58010000 	.word	0x58010000

08007d10 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d20:	4b23      	ldr	r3, [pc, #140]	; (8007db0 <SUBGHZSPI_Transmit+0xa0>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	1a9b      	subs	r3, r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	0cdb      	lsrs	r3, r3, #19
 8007d2e:	2264      	movs	r2, #100	; 0x64
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	609a      	str	r2, [r3, #8]
      break;
 8007d46:	e008      	b.n	8007d5a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d4e:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <SUBGHZSPI_Transmit+0xa4>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d1ed      	bne.n	8007d36 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007d5a:	4b17      	ldr	r3, [pc, #92]	; (8007db8 <SUBGHZSPI_Transmit+0xa8>)
 8007d5c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d64:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <SUBGHZSPI_Transmit+0xa0>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	0cdb      	lsrs	r3, r3, #19
 8007d72:	2264      	movs	r2, #100	; 0x64
 8007d74:	fb02 f303 	mul.w	r3, r2, r3
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d105      	bne.n	8007d8c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	609a      	str	r2, [r3, #8]
      break;
 8007d8a:	e008      	b.n	8007d9e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007d92:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <SUBGHZSPI_Transmit+0xa4>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d1ed      	bne.n	8007d7a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <SUBGHZSPI_Transmit+0xa4>)
 8007da0:	68db      	ldr	r3, [r3, #12]

  return status;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20000000 	.word	0x20000000
 8007db4:	58010000 	.word	0x58010000
 8007db8:	5801000c 	.word	0x5801000c

08007dbc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007dca:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <SUBGHZSPI_Receive+0xa4>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	0cdb      	lsrs	r3, r3, #19
 8007dd8:	2264      	movs	r2, #100	; 0x64
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d105      	bne.n	8007df2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	609a      	str	r2, [r3, #8]
      break;
 8007df0:	e008      	b.n	8007e04 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007df8:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <SUBGHZSPI_Receive+0xa8>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d1ed      	bne.n	8007de0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007e04:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <SUBGHZSPI_Receive+0xac>)
 8007e06:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	22ff      	movs	r2, #255	; 0xff
 8007e0c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e0e:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <SUBGHZSPI_Receive+0xa4>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	4613      	mov	r3, r2
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	0cdb      	lsrs	r3, r3, #19
 8007e1c:	2264      	movs	r2, #100	; 0x64
 8007e1e:	fb02 f303 	mul.w	r3, r2, r3
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	609a      	str	r2, [r3, #8]
      break;
 8007e34:	e008      	b.n	8007e48 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007e3c:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <SUBGHZSPI_Receive+0xa8>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d1ed      	bne.n	8007e24 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007e48:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <SUBGHZSPI_Receive+0xa8>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	701a      	strb	r2, [r3, #0]

  return status;
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	20000000 	.word	0x20000000
 8007e64:	58010000 	.word	0x58010000
 8007e68:	5801000c 	.word	0x5801000c

08007e6c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d111      	bne.n	8007ea0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <SUBGHZ_CheckDeviceReady+0x44>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	4413      	add	r3, r2
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	0c1b      	lsrs	r3, r3, #16
 8007e8a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007e8c:	f7ff fbaa 	bl	80075e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1f9      	bne.n	8007e90 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e9c:	f7ff fb92 	bl	80075c4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f807 	bl	8007eb4 <SUBGHZ_WaitOnBusy>
 8007ea6:	4603      	mov	r3, r0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20000000 	.word	0x20000000

08007eb4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007ec0:	4b12      	ldr	r3, [pc, #72]	; (8007f0c <SUBGHZ_WaitOnBusy+0x58>)
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	4413      	add	r3, r2
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	0d1b      	lsrs	r3, r3, #20
 8007ece:	2264      	movs	r2, #100	; 0x64
 8007ed0:	fb02 f303 	mul.w	r3, r2, r3
 8007ed4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007ed6:	f7ff fbb3 	bl	8007640 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007eda:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	609a      	str	r2, [r3, #8]
      break;
 8007eec:	e009      	b.n	8007f02 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007ef4:	f7ff fb92 	bl	800761c <LL_PWR_IsActiveFlag_RFBUSYS>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d0e9      	beq.n	8007ed6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000000 	.word	0x20000000

08007f10 <LL_RCC_GetUSARTClockSource>:
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	401a      	ands	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	4313      	orrs	r3, r2
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bc80      	pop	{r7}
 8007f32:	4770      	bx	lr

08007f34 <LL_RCC_GetLPUARTClockSource>:
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4013      	ands	r3, r2
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e042      	b.n	8007fea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fa fc66 	bl	8002848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2224      	movs	r2, #36	; 0x24
 8007f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0201 	bic.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fc3b 	bl	8008810 <UART_SetConfig>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e022      	b.n	8007fea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fea3 	bl	8008cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0201 	orr.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 ff29 	bl	8008e3a <UART_CheckIdleState>
 8007fe8:	4603      	mov	r3, r0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008008:	2b20      	cmp	r3, #32
 800800a:	d137      	bne.n	800807c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_UART_Receive_IT+0x24>
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e030      	b.n	800807e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	; (8008088 <HAL_UART_Receive_IT+0x94>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d01f      	beq.n	800806c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d018      	beq.n	800806c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	613b      	str	r3, [r7, #16]
   return(result);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	623b      	str	r3, [r7, #32]
 800805a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	69f9      	ldr	r1, [r7, #28]
 800805e:	6a3a      	ldr	r2, [r7, #32]
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	61bb      	str	r3, [r7, #24]
   return(result);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e6      	bne.n	800803a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800806c:	88fb      	ldrh	r3, [r7, #6]
 800806e:	461a      	mov	r2, r3
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fff8 	bl	8009068 <UART_Start_Receive_IT>
 8008078:	4603      	mov	r3, r0
 800807a:	e000      	b.n	800807e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800807c:	2302      	movs	r3, #2
  }
}
 800807e:	4618      	mov	r0, r3
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40008000 	.word	0x40008000

0800808c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	; 0x28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d167      	bne.n	8008174 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <HAL_UART_Transmit_DMA+0x24>
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e060      	b.n	8008176 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	88fa      	ldrh	r2, [r7, #6]
 80080be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	88fa      	ldrh	r2, [r7, #6]
 80080c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2221      	movs	r2, #33	; 0x21
 80080d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d028      	beq.n	8008134 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e6:	4a26      	ldr	r2, [pc, #152]	; (8008180 <HAL_UART_Transmit_DMA+0xf4>)
 80080e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ee:	4a25      	ldr	r2, [pc, #148]	; (8008184 <HAL_UART_Transmit_DMA+0xf8>)
 80080f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f6:	4a24      	ldr	r2, [pc, #144]	; (8008188 <HAL_UART_Transmit_DMA+0xfc>)
 80080f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fe:	2200      	movs	r2, #0
 8008100:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810a:	4619      	mov	r1, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3328      	adds	r3, #40	; 0x28
 8008112:	461a      	mov	r2, r3
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	f7fc fa27 	bl	8004568 <HAL_DMA_Start_IT>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2210      	movs	r2, #16
 8008124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e020      	b.n	8008176 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2240      	movs	r2, #64	; 0x40
 800813a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	613b      	str	r3, [r7, #16]
   return(result);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3308      	adds	r3, #8
 800815a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815c:	623a      	str	r2, [r7, #32]
 800815e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	69f9      	ldr	r1, [r7, #28]
 8008162:	6a3a      	ldr	r2, [r7, #32]
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	61bb      	str	r3, [r7, #24]
   return(result);
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e5      	bne.n	800813c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e000      	b.n	8008176 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3728      	adds	r7, #40	; 0x28
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	080093f3 	.word	0x080093f3
 8008184:	0800948d 	.word	0x0800948d
 8008188:	080094a9 	.word	0x080094a9

0800818c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b0ba      	sub	sp, #232	; 0xe8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80081ba:	4013      	ands	r3, r2
 80081bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80081c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11b      	bne.n	8008200 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081cc:	f003 0320 	and.w	r3, r3, #32
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d015      	beq.n	8008200 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 82e3 	beq.w	80087bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	4798      	blx	r3
      }
      return;
 80081fe:	e2dd      	b.n	80087bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8123 	beq.w	8008450 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800820a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800820e:	4b8d      	ldr	r3, [pc, #564]	; (8008444 <HAL_UART_IRQHandler+0x2b8>)
 8008210:	4013      	ands	r3, r2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008216:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800821a:	4b8b      	ldr	r3, [pc, #556]	; (8008448 <HAL_UART_IRQHandler+0x2bc>)
 800821c:	4013      	ands	r3, r2
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 8116 	beq.w	8008450 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d011      	beq.n	8008254 <HAL_UART_IRQHandler+0xc8>
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2201      	movs	r2, #1
 8008242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824a:	f043 0201 	orr.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d011      	beq.n	8008284 <HAL_UART_IRQHandler+0xf8>
 8008260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2202      	movs	r2, #2
 8008272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827a:	f043 0204 	orr.w	r2, r3, #4
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	d011      	beq.n	80082b4 <HAL_UART_IRQHandler+0x128>
 8008290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2204      	movs	r2, #4
 80082a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	f043 0202 	orr.w	r2, r3, #2
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b8:	f003 0308 	and.w	r3, r3, #8
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d017      	beq.n	80082f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d105      	bne.n	80082d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082d0:	4b5c      	ldr	r3, [pc, #368]	; (8008444 <HAL_UART_IRQHandler+0x2b8>)
 80082d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2208      	movs	r2, #8
 80082de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f043 0208 	orr.w	r2, r3, #8
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d012      	beq.n	8008322 <HAL_UART_IRQHandler+0x196>
 80082fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00c      	beq.n	8008322 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008318:	f043 0220 	orr.w	r2, r3, #32
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8249 	beq.w	80087c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	d013      	beq.n	8008362 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800833a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b00      	cmp	r3, #0
 8008344:	d105      	bne.n	8008352 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800834a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d005      	beq.n	8008386 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800837a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800837e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008382:	2b00      	cmp	r3, #0
 8008384:	d054      	beq.n	8008430 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 ffce 	bl	8009328 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d146      	bne.n	8008428 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1d9      	bne.n	800839a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d017      	beq.n	8008420 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083f6:	4a15      	ldr	r2, [pc, #84]	; (800844c <HAL_UART_IRQHandler+0x2c0>)
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008400:	4618      	mov	r0, r3
 8008402:	f7fc f98d 	bl	8004720 <HAL_DMA_Abort_IT>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d019      	beq.n	8008440 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800841a:	4610      	mov	r0, r2
 800841c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841e:	e00f      	b.n	8008440 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f9e0 	bl	80087e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008426:	e00b      	b.n	8008440 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f9dc 	bl	80087e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842e:	e007      	b.n	8008440 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f9d8 	bl	80087e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800843e:	e1bf      	b.n	80087c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008440:	bf00      	nop
    return;
 8008442:	e1bd      	b.n	80087c0 <HAL_UART_IRQHandler+0x634>
 8008444:	10000001 	.word	0x10000001
 8008448:	04000120 	.word	0x04000120
 800844c:	08009529 	.word	0x08009529

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008454:	2b01      	cmp	r3, #1
 8008456:	f040 8153 	bne.w	8008700 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845e:	f003 0310 	and.w	r3, r3, #16
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 814c 	beq.w	8008700 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800846c:	f003 0310 	and.w	r3, r3, #16
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 8145 	beq.w	8008700 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2210      	movs	r2, #16
 800847c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	f040 80bb 	bne.w	8008604 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800849c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 818f 	beq.w	80087c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084b0:	429a      	cmp	r2, r3
 80084b2:	f080 8187 	bcs.w	80087c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 8087 	bne.w	80085e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008502:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800850a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1da      	bne.n	80084d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800852e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800854a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e1      	bne.n	800851e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800856a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800856c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800857e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800858c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e3      	bne.n	800855a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b0:	f023 0310 	bic.w	r3, r3, #16
 80085b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80085c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e4      	bne.n	80085a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fc f841 	bl	8004664 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2202      	movs	r2, #2
 80085e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f8fb 	bl	80087f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008602:	e0df      	b.n	80087c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008610:	b29b      	uxth	r3, r3
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80d1 	beq.w	80087c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80cc 	beq.w	80087c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800863e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008640:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008644:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
 8008654:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e4      	bne.n	8008630 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3308      	adds	r3, #8
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	623b      	str	r3, [r7, #32]
   return(result);
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800867c:	f023 0301 	bic.w	r3, r3, #1
 8008680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800868e:	633a      	str	r2, [r7, #48]	; 0x30
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e1      	bne.n	8008666 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0310 	bic.w	r3, r3, #16
 80086ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	69b9      	ldr	r1, [r7, #24]
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	617b      	str	r3, [r7, #20]
   return(result);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e4      	bne.n	80086b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f87d 	bl	80087f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086fe:	e063      	b.n	80087c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00e      	beq.n	800872a <HAL_UART_IRQHandler+0x59e>
 800870c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d008      	beq.n	800872a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008720:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fc5e 	bl	8009fe4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008728:	e051      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b00      	cmp	r3, #0
 8008734:	d014      	beq.n	8008760 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873e:	2b00      	cmp	r3, #0
 8008740:	d105      	bne.n	800874e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d008      	beq.n	8008760 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008752:	2b00      	cmp	r3, #0
 8008754:	d03a      	beq.n	80087cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
    }
    return;
 800875e:	e035      	b.n	80087cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <HAL_UART_IRQHandler+0x5f4>
 800876c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 feeb 	bl	8009554 <UART_EndTransmit_IT>
    return;
 800877e:	e026      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_UART_IRQHandler+0x614>
 800878c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008790:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 fc35 	bl	800a008 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800879e:	e016      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d010      	beq.n	80087ce <HAL_UART_IRQHandler+0x642>
 80087ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da0c      	bge.n	80087ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fc1e 	bl	8009ff6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087ba:	e008      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
      return;
 80087bc:	bf00      	nop
 80087be:	e006      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
    return;
 80087c0:	bf00      	nop
 80087c2:	e004      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
      return;
 80087c4:	bf00      	nop
 80087c6:	e002      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
      return;
 80087c8:	bf00      	nop
 80087ca:	e000      	b.n	80087ce <HAL_UART_IRQHandler+0x642>
    return;
 80087cc:	bf00      	nop
  }
}
 80087ce:	37e8      	adds	r7, #232	; 0xe8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr

080087e6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc80      	pop	{r7}
 80087f6:	4770      	bx	lr

080087f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr
	...

08008810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008814:	b08c      	sub	sp, #48	; 0x30
 8008816:	af00      	add	r7, sp, #0
 8008818:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	431a      	orrs	r2, r3
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	431a      	orrs	r2, r3
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	4313      	orrs	r3, r2
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4b94      	ldr	r3, [pc, #592]	; (8008a90 <UART_SetConfig+0x280>)
 8008840:	4013      	ands	r3, r2
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008848:	430b      	orrs	r3, r1
 800884a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a89      	ldr	r2, [pc, #548]	; (8008a94 <UART_SetConfig+0x284>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008878:	4313      	orrs	r3, r2
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008886:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008890:	430b      	orrs	r3, r1
 8008892:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	f023 010f 	bic.w	r1, r3, #15
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a7a      	ldr	r2, [pc, #488]	; (8008a98 <UART_SetConfig+0x288>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d127      	bne.n	8008904 <UART_SetConfig+0xf4>
 80088b4:	2003      	movs	r0, #3
 80088b6:	f7ff fb2b 	bl	8007f10 <LL_RCC_GetUSARTClockSource>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d81b      	bhi.n	80088fc <UART_SetConfig+0xec>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <UART_SetConfig+0xbc>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	080088ed 	.word	0x080088ed
 80088d4:	080088e5 	.word	0x080088e5
 80088d8:	080088f5 	.word	0x080088f5
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e2:	e080      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80088e4:	2302      	movs	r3, #2
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ea:	e07c      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f2:	e078      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fa:	e074      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008902:	e070      	b.n	80089e6 <UART_SetConfig+0x1d6>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a64      	ldr	r2, [pc, #400]	; (8008a9c <UART_SetConfig+0x28c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d138      	bne.n	8008980 <UART_SetConfig+0x170>
 800890e:	200c      	movs	r0, #12
 8008910:	f7ff fafe 	bl	8007f10 <LL_RCC_GetUSARTClockSource>
 8008914:	4603      	mov	r3, r0
 8008916:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800891a:	2b0c      	cmp	r3, #12
 800891c:	d82c      	bhi.n	8008978 <UART_SetConfig+0x168>
 800891e:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <UART_SetConfig+0x114>)
 8008920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008924:	08008959 	.word	0x08008959
 8008928:	08008979 	.word	0x08008979
 800892c:	08008979 	.word	0x08008979
 8008930:	08008979 	.word	0x08008979
 8008934:	08008969 	.word	0x08008969
 8008938:	08008979 	.word	0x08008979
 800893c:	08008979 	.word	0x08008979
 8008940:	08008979 	.word	0x08008979
 8008944:	08008961 	.word	0x08008961
 8008948:	08008979 	.word	0x08008979
 800894c:	08008979 	.word	0x08008979
 8008950:	08008979 	.word	0x08008979
 8008954:	08008971 	.word	0x08008971
 8008958:	2300      	movs	r3, #0
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800895e:	e042      	b.n	80089e6 <UART_SetConfig+0x1d6>
 8008960:	2302      	movs	r3, #2
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008966:	e03e      	b.n	80089e6 <UART_SetConfig+0x1d6>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896e:	e03a      	b.n	80089e6 <UART_SetConfig+0x1d6>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008976:	e036      	b.n	80089e6 <UART_SetConfig+0x1d6>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e032      	b.n	80089e6 <UART_SetConfig+0x1d6>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a43      	ldr	r2, [pc, #268]	; (8008a94 <UART_SetConfig+0x284>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d12a      	bne.n	80089e0 <UART_SetConfig+0x1d0>
 800898a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800898e:	f7ff fad1 	bl	8007f34 <LL_RCC_GetLPUARTClockSource>
 8008992:	4603      	mov	r3, r0
 8008994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008998:	d01a      	beq.n	80089d0 <UART_SetConfig+0x1c0>
 800899a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800899e:	d81b      	bhi.n	80089d8 <UART_SetConfig+0x1c8>
 80089a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a4:	d00c      	beq.n	80089c0 <UART_SetConfig+0x1b0>
 80089a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089aa:	d815      	bhi.n	80089d8 <UART_SetConfig+0x1c8>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <UART_SetConfig+0x1a8>
 80089b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b4:	d008      	beq.n	80089c8 <UART_SetConfig+0x1b8>
 80089b6:	e00f      	b.n	80089d8 <UART_SetConfig+0x1c8>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089be:	e012      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80089c0:	2302      	movs	r3, #2
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c6:	e00e      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ce:	e00a      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d6:	e006      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e002      	b.n	80089e6 <UART_SetConfig+0x1d6>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a2a      	ldr	r2, [pc, #168]	; (8008a94 <UART_SetConfig+0x284>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	f040 80a4 	bne.w	8008b3a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	d823      	bhi.n	8008a42 <UART_SetConfig+0x232>
 80089fa:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UART_SetConfig+0x1f0>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a43 	.word	0x08008a43
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a43 	.word	0x08008a43
 8008a10:	08008a33 	.word	0x08008a33
 8008a14:	08008a43 	.word	0x08008a43
 8008a18:	08008a43 	.word	0x08008a43
 8008a1c:	08008a43 	.word	0x08008a43
 8008a20:	08008a3b 	.word	0x08008a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a24:	f7fd fe76 	bl	8006714 <HAL_RCC_GetPCLK1Freq>
 8008a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a2a:	e010      	b.n	8008a4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a2c:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <UART_SetConfig+0x290>)
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a30:	e00d      	b.n	8008a4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a32:	f7fd fdbb 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 8008a36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a38:	e009      	b.n	8008a4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a40:	e005      	b.n	8008a4e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 8137 	beq.w	8008cc4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	4a12      	ldr	r2, [pc, #72]	; (8008aa4 <UART_SetConfig+0x294>)
 8008a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	4413      	add	r3, r2
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d305      	bcc.n	8008a86 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d910      	bls.n	8008aa8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a8c:	e11a      	b.n	8008cc4 <UART_SetConfig+0x4b4>
 8008a8e:	bf00      	nop
 8008a90:	cfff69f3 	.word	0xcfff69f3
 8008a94:	40008000 	.word	0x40008000
 8008a98:	40013800 	.word	0x40013800
 8008a9c:	40004400 	.word	0x40004400
 8008aa0:	00f42400 	.word	0x00f42400
 8008aa4:	0801e734 	.word	0x0801e734
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	2200      	movs	r2, #0
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	60fa      	str	r2, [r7, #12]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	4a8e      	ldr	r2, [pc, #568]	; (8008cf0 <UART_SetConfig+0x4e0>)
 8008ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	2200      	movs	r2, #0
 8008abe:	603b      	str	r3, [r7, #0]
 8008ac0:	607a      	str	r2, [r7, #4]
 8008ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aca:	f7f8 f86d 	bl	8000ba8 <__aeabi_uldivmod>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	f04f 0300 	mov.w	r3, #0
 8008ade:	020b      	lsls	r3, r1, #8
 8008ae0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ae4:	0202      	lsls	r2, r0, #8
 8008ae6:	6979      	ldr	r1, [r7, #20]
 8008ae8:	6849      	ldr	r1, [r1, #4]
 8008aea:	0849      	lsrs	r1, r1, #1
 8008aec:	2000      	movs	r0, #0
 8008aee:	460c      	mov	r4, r1
 8008af0:	4605      	mov	r5, r0
 8008af2:	eb12 0804 	adds.w	r8, r2, r4
 8008af6:	eb43 0905 	adc.w	r9, r3, r5
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	469a      	mov	sl, r3
 8008b02:	4693      	mov	fp, r2
 8008b04:	4652      	mov	r2, sl
 8008b06:	465b      	mov	r3, fp
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	f7f8 f84c 	bl	8000ba8 <__aeabi_uldivmod>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4613      	mov	r3, r2
 8008b16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b1e:	d308      	bcc.n	8008b32 <UART_SetConfig+0x322>
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b26:	d204      	bcs.n	8008b32 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6a3a      	ldr	r2, [r7, #32]
 8008b2e:	60da      	str	r2, [r3, #12]
 8008b30:	e0c8      	b.n	8008cc4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b38:	e0c4      	b.n	8008cc4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b42:	d167      	bne.n	8008c14 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008b44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b48:	2b08      	cmp	r3, #8
 8008b4a:	d828      	bhi.n	8008b9e <UART_SetConfig+0x38e>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <UART_SetConfig+0x344>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b79 	.word	0x08008b79
 8008b58:	08008b81 	.word	0x08008b81
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b9f 	.word	0x08008b9f
 8008b64:	08008b8f 	.word	0x08008b8f
 8008b68:	08008b9f 	.word	0x08008b9f
 8008b6c:	08008b9f 	.word	0x08008b9f
 8008b70:	08008b9f 	.word	0x08008b9f
 8008b74:	08008b97 	.word	0x08008b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b78:	f7fd fdcc 	bl	8006714 <HAL_RCC_GetPCLK1Freq>
 8008b7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b7e:	e014      	b.n	8008baa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b80:	f7fd fdda 	bl	8006738 <HAL_RCC_GetPCLK2Freq>
 8008b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b86:	e010      	b.n	8008baa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b88:	4b5a      	ldr	r3, [pc, #360]	; (8008cf4 <UART_SetConfig+0x4e4>)
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b8c:	e00d      	b.n	8008baa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b8e:	f7fd fd0d 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b94:	e009      	b.n	8008baa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b9c:	e005      	b.n	8008baa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8089 	beq.w	8008cc4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	4a4e      	ldr	r2, [pc, #312]	; (8008cf0 <UART_SetConfig+0x4e0>)
 8008bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bc4:	005a      	lsls	r2, r3, #1
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	441a      	add	r2, r3
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	2b0f      	cmp	r3, #15
 8008bdc:	d916      	bls.n	8008c0c <UART_SetConfig+0x3fc>
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be4:	d212      	bcs.n	8008c0c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	f023 030f 	bic.w	r3, r3, #15
 8008bee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	8bfb      	ldrh	r3, [r7, #30]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	8bfa      	ldrh	r2, [r7, #30]
 8008c08:	60da      	str	r2, [r3, #12]
 8008c0a:	e05b      	b.n	8008cc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c12:	e057      	b.n	8008cc4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d828      	bhi.n	8008c6e <UART_SetConfig+0x45e>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <UART_SetConfig+0x414>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c49 	.word	0x08008c49
 8008c28:	08008c51 	.word	0x08008c51
 8008c2c:	08008c59 	.word	0x08008c59
 8008c30:	08008c6f 	.word	0x08008c6f
 8008c34:	08008c5f 	.word	0x08008c5f
 8008c38:	08008c6f 	.word	0x08008c6f
 8008c3c:	08008c6f 	.word	0x08008c6f
 8008c40:	08008c6f 	.word	0x08008c6f
 8008c44:	08008c67 	.word	0x08008c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c48:	f7fd fd64 	bl	8006714 <HAL_RCC_GetPCLK1Freq>
 8008c4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c4e:	e014      	b.n	8008c7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c50:	f7fd fd72 	bl	8006738 <HAL_RCC_GetPCLK2Freq>
 8008c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c56:	e010      	b.n	8008c7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c58:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <UART_SetConfig+0x4e4>)
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c5c:	e00d      	b.n	8008c7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c5e:	f7fd fca5 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 8008c62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c64:	e009      	b.n	8008c7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c6c:	e005      	b.n	8008c7a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c78:	bf00      	nop
    }

    if (pclk != 0U)
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d021      	beq.n	8008cc4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	4a1a      	ldr	r2, [pc, #104]	; (8008cf0 <UART_SetConfig+0x4e0>)
 8008c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	085b      	lsrs	r3, r3, #1
 8008c98:	441a      	add	r2, r3
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d909      	bls.n	8008cbe <UART_SetConfig+0x4ae>
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb0:	d205      	bcs.n	8008cbe <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60da      	str	r2, [r3, #12]
 8008cbc:	e002      	b.n	8008cc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008ce0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3730      	adds	r7, #48	; 0x30
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cee:	bf00      	nop
 8008cf0:	0801e734 	.word	0x0801e734
 8008cf4:	00f42400 	.word	0x00f42400

08008cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8c:	f003 0310 	and.w	r3, r3, #16
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01a      	beq.n	8008e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008df6:	d10a      	bne.n	8008e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  }
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr

08008e3a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b086      	sub	sp, #24
 8008e3e:	af02      	add	r7, sp, #8
 8008e40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e4a:	f7f9 f9cd 	bl	80021e8 <HAL_GetTick>
 8008e4e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d10e      	bne.n	8008e7c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f832 	bl	8008ed6 <UART_WaitOnFlagUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e028      	b.n	8008ece <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d10e      	bne.n	8008ea8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f81c 	bl	8008ed6 <UART_WaitOnFlagUntilTimeout>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e012      	b.n	8008ece <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b09c      	sub	sp, #112	; 0x70
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	603b      	str	r3, [r7, #0]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ee6:	e0a9      	b.n	800903c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eee:	f000 80a5 	beq.w	800903c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef2:	f7f9 f979 	bl	80021e8 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d302      	bcc.n	8008f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d140      	bne.n	8008f8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e6      	bne.n	8008f08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	f023 0301 	bic.w	r3, r3, #1
 8008f50:	663b      	str	r3, [r7, #96]	; 0x60
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3308      	adds	r3, #8
 8008f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e5      	bne.n	8008f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e069      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d051      	beq.n	800903c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa6:	d149      	bne.n	800903c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e6      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009004:	623a      	str	r2, [r7, #32]
 8009006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	69f9      	ldr	r1, [r7, #28]
 800900a:	6a3a      	ldr	r2, [r7, #32]
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	61bb      	str	r3, [r7, #24]
   return(result);
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e5      	bne.n	8008fe4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e010      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	69da      	ldr	r2, [r3, #28]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	4013      	ands	r3, r2
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	429a      	cmp	r2, r3
 800904a:	bf0c      	ite	eq
 800904c:	2301      	moveq	r3, #1
 800904e:	2300      	movne	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	429a      	cmp	r2, r3
 8009058:	f43f af46 	beq.w	8008ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3770      	adds	r7, #112	; 0x70
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009068:	b480      	push	{r7}
 800906a:	b0a3      	sub	sp, #140	; 0x8c
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	88fa      	ldrh	r2, [r7, #6]
 8009080:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	88fa      	ldrh	r2, [r7, #6]
 8009088:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800909a:	d10e      	bne.n	80090ba <UART_Start_Receive_IT+0x52>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d105      	bne.n	80090b0 <UART_Start_Receive_IT+0x48>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ae:	e02d      	b.n	800910c <UART_Start_Receive_IT+0xa4>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	22ff      	movs	r2, #255	; 0xff
 80090b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090b8:	e028      	b.n	800910c <UART_Start_Receive_IT+0xa4>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10d      	bne.n	80090de <UART_Start_Receive_IT+0x76>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d104      	bne.n	80090d4 <UART_Start_Receive_IT+0x6c>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	22ff      	movs	r2, #255	; 0xff
 80090ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090d2:	e01b      	b.n	800910c <UART_Start_Receive_IT+0xa4>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	227f      	movs	r2, #127	; 0x7f
 80090d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090dc:	e016      	b.n	800910c <UART_Start_Receive_IT+0xa4>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090e6:	d10d      	bne.n	8009104 <UART_Start_Receive_IT+0x9c>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d104      	bne.n	80090fa <UART_Start_Receive_IT+0x92>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	227f      	movs	r2, #127	; 0x7f
 80090f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090f8:	e008      	b.n	800910c <UART_Start_Receive_IT+0xa4>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	223f      	movs	r2, #63	; 0x3f
 80090fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009102:	e003      	b.n	800910c <UART_Start_Receive_IT+0xa4>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2222      	movs	r2, #34	; 0x22
 8009118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3308      	adds	r3, #8
 8009122:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800912c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800912e:	f043 0301 	orr.w	r3, r3, #1
 8009132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3308      	adds	r3, #8
 800913c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009140:	673a      	str	r2, [r7, #112]	; 0x70
 8009142:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009146:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800914e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e3      	bne.n	800911c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800915c:	d14f      	bne.n	80091fe <UART_Start_Receive_IT+0x196>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	429a      	cmp	r2, r3
 8009168:	d349      	bcc.n	80091fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009172:	d107      	bne.n	8009184 <UART_Start_Receive_IT+0x11c>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d103      	bne.n	8009184 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4a46      	ldr	r2, [pc, #280]	; (8009298 <UART_Start_Receive_IT+0x230>)
 8009180:	675a      	str	r2, [r3, #116]	; 0x74
 8009182:	e002      	b.n	800918a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a45      	ldr	r2, [pc, #276]	; (800929c <UART_Start_Receive_IT+0x234>)
 8009188:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d01a      	beq.n	80091c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e4      	bne.n	8009192 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3308      	adds	r3, #8
 80091e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80091ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e5      	bne.n	80091c8 <UART_Start_Receive_IT+0x160>
 80091fc:	e046      	b.n	800928c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009206:	d107      	bne.n	8009218 <UART_Start_Receive_IT+0x1b0>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4a23      	ldr	r2, [pc, #140]	; (80092a0 <UART_Start_Receive_IT+0x238>)
 8009214:	675a      	str	r2, [r3, #116]	; 0x74
 8009216:	e002      	b.n	800921e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4a22      	ldr	r2, [pc, #136]	; (80092a4 <UART_Start_Receive_IT+0x23c>)
 800921c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d019      	beq.n	800925a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800923a:	677b      	str	r3, [r7, #116]	; 0x74
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009244:	637b      	str	r3, [r7, #52]	; 0x34
 8009246:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800924a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e6      	bne.n	8009226 <UART_Start_Receive_IT+0x1be>
 8009258:	e018      	b.n	800928c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	613b      	str	r3, [r7, #16]
   return(result);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f043 0320 	orr.w	r3, r3, #32
 800926e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009278:	623b      	str	r3, [r7, #32]
 800927a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	69f9      	ldr	r1, [r7, #28]
 800927e:	6a3a      	ldr	r2, [r7, #32]
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	61bb      	str	r3, [r7, #24]
   return(result);
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e6      	bne.n	800925a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	378c      	adds	r7, #140	; 0x8c
 8009292:	46bd      	mov	sp, r7
 8009294:	bc80      	pop	{r7}
 8009296:	4770      	bx	lr
 8009298:	08009c7d 	.word	0x08009c7d
 800929c:	0800991d 	.word	0x0800991d
 80092a0:	08009765 	.word	0x08009765
 80092a4:	080095ad 	.word	0x080095ad

080092a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b08f      	sub	sp, #60	; 0x3c
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092c4:	637b      	str	r3, [r7, #52]	; 0x34
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e6      	bne.n	80092b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80092f8:	633b      	str	r3, [r7, #48]	; 0x30
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3308      	adds	r3, #8
 8009300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009302:	61ba      	str	r2, [r7, #24]
 8009304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	6979      	ldr	r1, [r7, #20]
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	613b      	str	r3, [r7, #16]
   return(result);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e5      	bne.n	80092e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800931e:	bf00      	nop
 8009320:	373c      	adds	r7, #60	; 0x3c
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr

08009328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b095      	sub	sp, #84	; 0x54
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934e:	643b      	str	r3, [r7, #64]	; 0x40
 8009350:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e6      	bne.n	8009330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	61fb      	str	r3, [r7, #28]
   return(result);
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	64bb      	str	r3, [r7, #72]	; 0x48
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800938c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e3      	bne.n	8009362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d118      	bne.n	80093d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f023 0310 	bic.w	r3, r3, #16
 80093b6:	647b      	str	r3, [r7, #68]	; 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c0:	61bb      	str	r3, [r7, #24]
 80093c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6979      	ldr	r1, [r7, #20]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	613b      	str	r3, [r7, #16]
   return(result);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e6      	bne.n	80093a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80093e8:	bf00      	nop
 80093ea:	3754      	adds	r7, #84	; 0x54
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr

080093f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b090      	sub	sp, #64	; 0x40
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0320 	and.w	r3, r3, #32
 800940a:	2b00      	cmp	r3, #0
 800940c:	d137      	bne.n	800947e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	2200      	movs	r2, #0
 8009412:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3308      	adds	r3, #8
 800941c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	623b      	str	r3, [r7, #32]
   return(result);
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800942c:	63bb      	str	r3, [r7, #56]	; 0x38
 800942e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009436:	633a      	str	r2, [r7, #48]	; 0x30
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800943c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e5      	bne.n	8009416 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800944a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	60fb      	str	r3, [r7, #12]
   return(result);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800945e:	637b      	str	r3, [r7, #52]	; 0x34
 8009460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009468:	61fb      	str	r3, [r7, #28]
 800946a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	69b9      	ldr	r1, [r7, #24]
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	617b      	str	r3, [r7, #20]
   return(result);
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e6      	bne.n	800944a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800947c:	e002      	b.n	8009484 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800947e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009480:	f7f9 fb4e 	bl	8002b20 <HAL_UART_TxCpltCallback>
}
 8009484:	bf00      	nop
 8009486:	3740      	adds	r7, #64	; 0x40
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009498:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff f99a 	bl	80087d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d0:	2b80      	cmp	r3, #128	; 0x80
 80094d2:	d109      	bne.n	80094e8 <UART_DMAError+0x40>
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b21      	cmp	r3, #33	; 0x21
 80094d8:	d106      	bne.n	80094e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80094e2:	6978      	ldr	r0, [r7, #20]
 80094e4:	f7ff fee0 	bl	80092a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f2:	2b40      	cmp	r3, #64	; 0x40
 80094f4:	d109      	bne.n	800950a <UART_DMAError+0x62>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b22      	cmp	r3, #34	; 0x22
 80094fa:	d106      	bne.n	800950a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009504:	6978      	ldr	r0, [r7, #20]
 8009506:	f7ff ff0f 	bl	8009328 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009510:	f043 0210 	orr.w	r2, r3, #16
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800951a:	6978      	ldr	r0, [r7, #20]
 800951c:	f7ff f963 	bl	80087e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009520:	bf00      	nop
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f7ff f94d 	bl	80087e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	60bb      	str	r3, [r7, #8]
   return(result);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009570:	61fb      	str	r3, [r7, #28]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	6979      	ldr	r1, [r7, #20]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	613b      	str	r3, [r7, #16]
   return(result);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e6      	bne.n	800955c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2220      	movs	r2, #32
 8009592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7f9 fabf 	bl	8002b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a2:	bf00      	nop
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b09c      	sub	sp, #112	; 0x70
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c4:	2b22      	cmp	r3, #34	; 0x22
 80095c6:	f040 80be 	bne.w	8009746 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80095d8:	b2d9      	uxtb	r1, r3
 80095da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e4:	400a      	ands	r2, r1
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	3b01      	subs	r3, #1
 80095fe:	b29a      	uxth	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	f040 80a1 	bne.w	8009756 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009628:	66bb      	str	r3, [r7, #104]	; 0x68
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009632:	65bb      	str	r3, [r7, #88]	; 0x58
 8009634:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e6      	bne.n	8009614 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009658:	f023 0301 	bic.w	r3, r3, #1
 800965c:	667b      	str	r3, [r7, #100]	; 0x64
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3308      	adds	r3, #8
 8009664:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009666:	647a      	str	r2, [r7, #68]	; 0x44
 8009668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800966c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e5      	bne.n	8009646 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a33      	ldr	r2, [pc, #204]	; (8009760 <UART_RxISR_8BIT+0x1b4>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d01f      	beq.n	80096d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d018      	beq.n	80096d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	623b      	str	r3, [r7, #32]
   return(result);
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096ba:	663b      	str	r3, [r7, #96]	; 0x60
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c4:	633b      	str	r3, [r7, #48]	; 0x30
 80096c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e6      	bne.n	80096a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d12e      	bne.n	800973e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0310 	bic.w	r3, r3, #16
 80096fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009704:	61fb      	str	r3, [r7, #28]
 8009706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	69b9      	ldr	r1, [r7, #24]
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	617b      	str	r3, [r7, #20]
   return(result);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e6      	bne.n	80096e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	f003 0310 	and.w	r3, r3, #16
 8009722:	2b10      	cmp	r3, #16
 8009724:	d103      	bne.n	800972e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2210      	movs	r2, #16
 800972c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff f85e 	bl	80087f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800973c:	e00b      	b.n	8009756 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7f9 fa04 	bl	8002b4c <HAL_UART_RxCpltCallback>
}
 8009744:	e007      	b.n	8009756 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0208 	orr.w	r2, r2, #8
 8009754:	619a      	str	r2, [r3, #24]
}
 8009756:	bf00      	nop
 8009758:	3770      	adds	r7, #112	; 0x70
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	40008000 	.word	0x40008000

08009764 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b09c      	sub	sp, #112	; 0x70
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009772:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800977c:	2b22      	cmp	r3, #34	; 0x22
 800977e:	f040 80be 	bne.w	80098fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009790:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009792:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009796:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800979a:	4013      	ands	r3, r2
 800979c:	b29a      	uxth	r2, r3
 800979e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a6:	1c9a      	adds	r2, r3, #2
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f040 80a1 	bne.w	800990e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097e0:	667b      	str	r3, [r7, #100]	; 0x64
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ea:	657b      	str	r3, [r7, #84]	; 0x54
 80097ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e6      	bne.n	80097cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	f023 0301 	bic.w	r3, r3, #1
 8009814:	663b      	str	r3, [r7, #96]	; 0x60
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800981e:	643a      	str	r2, [r7, #64]	; 0x40
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a33      	ldr	r2, [pc, #204]	; (8009918 <UART_RxISR_16BIT+0x1b4>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d01f      	beq.n	8009890 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d018      	beq.n	8009890 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	61fb      	str	r3, [r7, #28]
   return(result);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800987e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009884:	e841 2300 	strex	r3, r2, [r1]
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1e6      	bne.n	800985e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009894:	2b01      	cmp	r3, #1
 8009896:	d12e      	bne.n	80098f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f023 0310 	bic.w	r3, r3, #16
 80098b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e6      	bne.n	800989e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	f003 0310 	and.w	r3, r3, #16
 80098da:	2b10      	cmp	r3, #16
 80098dc:	d103      	bne.n	80098e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2210      	movs	r2, #16
 80098e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fe ff82 	bl	80087f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098f4:	e00b      	b.n	800990e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7f9 f928 	bl	8002b4c <HAL_UART_RxCpltCallback>
}
 80098fc:	e007      	b.n	800990e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	699a      	ldr	r2, [r3, #24]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0208 	orr.w	r2, r2, #8
 800990c:	619a      	str	r2, [r3, #24]
}
 800990e:	bf00      	nop
 8009910:	3770      	adds	r7, #112	; 0x70
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40008000 	.word	0x40008000

0800991c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b0ac      	sub	sp, #176	; 0xb0
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800992a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009952:	2b22      	cmp	r3, #34	; 0x22
 8009954:	f040 8182 	bne.w	8009c5c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800995e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009962:	e125      	b.n	8009bb0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800996e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009972:	b2d9      	uxtb	r1, r3
 8009974:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009978:	b2da      	uxtb	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997e:	400a      	ands	r2, r1
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d053      	beq.n	8009a5e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d011      	beq.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80099c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80099c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2201      	movs	r2, #1
 80099d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099dc:	f043 0201 	orr.w	r2, r3, #1
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d011      	beq.n	8009a16 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2202      	movs	r2, #2
 8009a04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0c:	f043 0204 	orr.w	r2, r3, #4
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a1a:	f003 0304 	and.w	r3, r3, #4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d011      	beq.n	8009a46 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2204      	movs	r2, #4
 8009a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a3c:	f043 0202 	orr.w	r2, r3, #2
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d006      	beq.n	8009a5e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7fe fec8 	bl	80087e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f040 80a2 	bne.w	8009bb0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a90:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009a94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e4      	bne.n	8009a6c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ab8:	f023 0301 	bic.w	r3, r3, #1
 8009abc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aca:	66ba      	str	r2, [r7, #104]	; 0x68
 8009acc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009ad0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e1      	bne.n	8009aa2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a5f      	ldr	r2, [pc, #380]	; (8009c74 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d021      	beq.n	8009b40 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01a      	beq.n	8009b40 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b12:	e853 3f00 	ldrex	r3, [r3]
 8009b16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8009b2e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b34:	e841 2300 	strex	r3, r2, [r1]
 8009b38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e4      	bne.n	8009b0a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d130      	bne.n	8009baa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	f023 0310 	bic.w	r3, r3, #16
 8009b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b70:	643b      	str	r3, [r7, #64]	; 0x40
 8009b72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b78:	e841 2300 	strex	r3, r2, [r1]
 8009b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1e4      	bne.n	8009b4e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f003 0310 	and.w	r3, r3, #16
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d103      	bne.n	8009b9a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2210      	movs	r2, #16
 8009b98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fe fe28 	bl	80087f8 <HAL_UARTEx_RxEventCallback>
 8009ba8:	e002      	b.n	8009bb0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7f8 ffce 	bl	8002b4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bb0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d006      	beq.n	8009bc6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f47f aecf 	bne.w	8009964 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bcc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d049      	beq.n	8009c6c <UART_RxISR_8BIT_FIFOEN+0x350>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bde:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d242      	bcs.n	8009c6c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3308      	adds	r3, #8
 8009bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e3      	bne.n	8009be6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a15      	ldr	r2, [pc, #84]	; (8009c78 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009c22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	e853 3f00 	ldrex	r3, [r3]
 8009c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f043 0320 	orr.w	r3, r3, #32
 8009c38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4a:	6979      	ldr	r1, [r7, #20]
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	613b      	str	r3, [r7, #16]
   return(result);
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e4      	bne.n	8009c24 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c5a:	e007      	b.n	8009c6c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0208 	orr.w	r2, r2, #8
 8009c6a:	619a      	str	r2, [r3, #24]
}
 8009c6c:	bf00      	nop
 8009c6e:	37b0      	adds	r7, #176	; 0xb0
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	40008000 	.word	0x40008000
 8009c78:	080095ad 	.word	0x080095ad

08009c7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b0ae      	sub	sp, #184	; 0xb8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cb2:	2b22      	cmp	r3, #34	; 0x22
 8009cb4:	f040 8186 	bne.w	8009fc4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cc2:	e129      	b.n	8009f18 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009cd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009cda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009cde:	4013      	ands	r3, r2
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ce6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cec:	1c9a      	adds	r2, r3, #2
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d053      	beq.n	8009dc2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d011      	beq.n	8009d4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2201      	movs	r2, #1
 8009d38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d40:	f043 0201 	orr.w	r2, r3, #1
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d011      	beq.n	8009d7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2202      	movs	r2, #2
 8009d68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d70:	f043 0204 	orr.w	r2, r3, #4
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d011      	beq.n	8009daa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2204      	movs	r2, #4
 8009d98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da0:	f043 0202 	orr.w	r2, r3, #2
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7fe fd16 	bl	80087e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 80a4 	bne.w	8009f18 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dd8:	e853 3f00 	ldrex	r3, [r3]
 8009ddc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009df6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009dfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e2      	bne.n	8009dd0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3308      	adds	r3, #8
 8009e10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e20:	f023 0301 	bic.w	r3, r3, #1
 8009e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009e32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e3a:	e841 2300 	strex	r3, r2, [r1]
 8009e3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e1      	bne.n	8009e0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2220      	movs	r2, #32
 8009e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a5f      	ldr	r2, [pc, #380]	; (8009fdc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d021      	beq.n	8009ea8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d01a      	beq.n	8009ea8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e9c:	e841 2300 	strex	r3, r2, [r1]
 8009ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1e4      	bne.n	8009e72 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d130      	bne.n	8009f12 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	f023 0310 	bic.w	r3, r3, #16
 8009eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8009eda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ee0:	e841 2300 	strex	r3, r2, [r1]
 8009ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e4      	bne.n	8009eb6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	f003 0310 	and.w	r3, r3, #16
 8009ef6:	2b10      	cmp	r3, #16
 8009ef8:	d103      	bne.n	8009f02 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2210      	movs	r2, #16
 8009f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7fe fc74 	bl	80087f8 <HAL_UARTEx_RxEventCallback>
 8009f10:	e002      	b.n	8009f18 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7f8 fe1a 	bl	8002b4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f18:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f24:	f003 0320 	and.w	r3, r3, #32
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f47f aecb 	bne.w	8009cc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f34:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f38:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d049      	beq.n	8009fd4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f46:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d242      	bcs.n	8009fd4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3308      	adds	r3, #8
 8009f54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f72:	633a      	str	r2, [r7, #48]	; 0x30
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e3      	bne.n	8009f4e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a15      	ldr	r2, [pc, #84]	; (8009fe0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f043 0320 	orr.w	r3, r3, #32
 8009fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb2:	69b9      	ldr	r1, [r7, #24]
 8009fb4:	69fa      	ldr	r2, [r7, #28]
 8009fb6:	e841 2300 	strex	r3, r2, [r1]
 8009fba:	617b      	str	r3, [r7, #20]
   return(result);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e4      	bne.n	8009f8c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fc2:	e007      	b.n	8009fd4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0208 	orr.w	r2, r2, #8
 8009fd2:	619a      	str	r2, [r3, #24]
}
 8009fd4:	bf00      	nop
 8009fd6:	37b8      	adds	r7, #184	; 0xb8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	40008000 	.word	0x40008000
 8009fe0:	08009765 	.word	0x08009765

08009fe4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bc80      	pop	{r7}
 8009ff4:	4770      	bx	lr

08009ff6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	bc80      	pop	{r7}
 800a006:	4770      	bx	lr

0800a008 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	bc80      	pop	{r7}
 800a018:	4770      	bx	lr

0800a01a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b088      	sub	sp, #32
 800a01e:	af02      	add	r7, sp, #8
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	1d3b      	adds	r3, r7, #4
 800a024:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a036:	2302      	movs	r3, #2
 800a038:	e046      	b.n	800a0c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2224      	movs	r2, #36	; 0x24
 800a046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 0201 	bic.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d105      	bne.n	800a080 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a074:	1d3b      	adds	r3, r7, #4
 800a076:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 f911 	bl	800a2a2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a090:	f7f8 f8aa 	bl	80021e8 <HAL_GetTick>
 800a094:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a096:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7fe ff16 	bl	8008ed6 <UART_WaitOnFlagUntilTimeout>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	75fb      	strb	r3, [r7, #23]
 800a0b4:	e003      	b.n	800a0be <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b089      	sub	sp, #36	; 0x24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UARTEx_EnableStopMode+0x16>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e021      	b.n	800a12a <HAL_UARTEx_EnableStopMode+0x5a>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	f043 0302 	orr.w	r3, r3, #2
 800a102:	61fb      	str	r3, [r7, #28]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	61bb      	str	r3, [r7, #24]
 800a10e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	6979      	ldr	r1, [r7, #20]
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	613b      	str	r3, [r7, #16]
   return(result);
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e6      	bne.n	800a0ee <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3724      	adds	r7, #36	; 0x24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bc80      	pop	{r7}
 800a132:	4770      	bx	lr

0800a134 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_UARTEx_EnableFifoMode+0x16>
 800a146:	2302      	movs	r3, #2
 800a148:	e02b      	b.n	800a1a2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2224      	movs	r2, #36	; 0x24
 800a156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f022 0201 	bic.w	r2, r2, #1
 800a170:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a178:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a180:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f8ac 	bl	800a2e8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2220      	movs	r2, #32
 800a194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d101      	bne.n	800a1c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1be:	2302      	movs	r3, #2
 800a1c0:	e02d      	b.n	800a21e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2224      	movs	r2, #36	; 0x24
 800a1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0201 	bic.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f872 	bl	800a2e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a236:	2b01      	cmp	r3, #1
 800a238:	d101      	bne.n	800a23e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a23a:	2302      	movs	r3, #2
 800a23c:	e02d      	b.n	800a29a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2224      	movs	r2, #36	; 0x24
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f834 	bl	800a2e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	1d3b      	adds	r3, r7, #4
 800a2ac:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f023 0210 	bic.w	r2, r3, #16
 800a2ba:	893b      	ldrh	r3, [r7, #8]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a2d0:	7abb      	ldrb	r3, [r7, #10]
 800a2d2:	061a      	lsls	r2, r3, #24
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	605a      	str	r2, [r3, #4]
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bc80      	pop	{r7}
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d108      	bne.n	800a30a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a308:	e031      	b.n	800a36e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a30a:	2308      	movs	r3, #8
 800a30c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a30e:	2308      	movs	r3, #8
 800a310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	0e5b      	lsrs	r3, r3, #25
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 0307 	and.w	r3, r3, #7
 800a320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	0f5b      	lsrs	r3, r3, #29
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	f003 0307 	and.w	r3, r3, #7
 800a330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	7b3a      	ldrb	r2, [r7, #12]
 800a336:	4910      	ldr	r1, [pc, #64]	; (800a378 <UARTEx_SetNbDataToProcess+0x90>)
 800a338:	5c8a      	ldrb	r2, [r1, r2]
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a33e:	7b3a      	ldrb	r2, [r7, #12]
 800a340:	490e      	ldr	r1, [pc, #56]	; (800a37c <UARTEx_SetNbDataToProcess+0x94>)
 800a342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a344:	fb93 f3f2 	sdiv	r3, r3, r2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	7b7a      	ldrb	r2, [r7, #13]
 800a354:	4908      	ldr	r1, [pc, #32]	; (800a378 <UARTEx_SetNbDataToProcess+0x90>)
 800a356:	5c8a      	ldrb	r2, [r1, r2]
 800a358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a35c:	7b7a      	ldrb	r2, [r7, #13]
 800a35e:	4907      	ldr	r1, [pc, #28]	; (800a37c <UARTEx_SetNbDataToProcess+0x94>)
 800a360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a362:	fb93 f3f2 	sdiv	r3, r3, r2
 800a366:	b29a      	uxth	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a36e:	bf00      	nop
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr
 800a378:	0801e74c 	.word	0x0801e74c
 800a37c:	0801e754 	.word	0x0801e754

0800a380 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a384:	f7f7 fdd0 	bl	8001f28 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a388:	f000 f820 	bl	800a3cc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a38c:	bf00      	nop
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a398:	f012 fd76 	bl	801ce88 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a39c:	bf00      	nop
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a3a4:	f3bf 8f4f 	dsb	sy
}
 800a3a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a3aa:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <__NVIC_SystemReset+0x24>)
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a3b2:	4904      	ldr	r1, [pc, #16]	; (800a3c4 <__NVIC_SystemReset+0x24>)
 800a3b4:	4b04      	ldr	r3, [pc, #16]	; (800a3c8 <__NVIC_SystemReset+0x28>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3ba:	f3bf 8f4f 	dsb	sy
}
 800a3be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a3c0:	bf00      	nop
 800a3c2:	e7fd      	b.n	800a3c0 <__NVIC_SystemReset+0x20>
 800a3c4:	e000ed00 	.word	0xe000ed00
 800a3c8:	05fa0004 	.word	0x05fa0004

0800a3cc <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9302      	str	r3, [sp, #8]
 800a3da:	2303      	movs	r3, #3
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	4b59      	ldr	r3, [pc, #356]	; (800a548 <LoRaWAN_Init+0x17c>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	2002      	movs	r0, #2
 800a3ea:	f013 f99b 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	2305      	movs	r3, #5
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	4b54      	ldr	r3, [pc, #336]	; (800a54c <LoRaWAN_Init+0x180>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2100      	movs	r1, #0
 800a400:	2002      	movs	r0, #2
 800a402:	f013 f98f 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a406:	2300      	movs	r3, #0
 800a408:	9302      	str	r3, [sp, #8]
 800a40a:	2303      	movs	r3, #3
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	2301      	movs	r3, #1
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	4b4f      	ldr	r3, [pc, #316]	; (800a550 <LoRaWAN_Init+0x184>)
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	2002      	movs	r0, #2
 800a41a:	f013 f983 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a41e:	1d3b      	adds	r3, r7, #4
 800a420:	4619      	mov	r1, r3
 800a422:	2000      	movs	r0, #0
 800a424:	f003 fa16 	bl	800d854 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	0e1b      	lsrs	r3, r3, #24
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	461a      	mov	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	0c1b      	lsrs	r3, r3, #16
 800a434:	b2db      	uxtb	r3, r3
 800a436:	4619      	mov	r1, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	0a1b      	lsrs	r3, r3, #8
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	9302      	str	r3, [sp, #8]
 800a440:	9101      	str	r1, [sp, #4]
 800a442:	9200      	str	r2, [sp, #0]
 800a444:	4b43      	ldr	r3, [pc, #268]	; (800a554 <LoRaWAN_Init+0x188>)
 800a446:	2200      	movs	r2, #0
 800a448:	2100      	movs	r1, #0
 800a44a:	2002      	movs	r0, #2
 800a44c:	f013 f96a 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a450:	1d3b      	adds	r3, r7, #4
 800a452:	4619      	mov	r1, r3
 800a454:	2001      	movs	r0, #1
 800a456:	f003 f9fd 	bl	800d854 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	0e1b      	lsrs	r3, r3, #24
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	461a      	mov	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	0c1b      	lsrs	r3, r3, #16
 800a466:	b2db      	uxtb	r3, r3
 800a468:	4619      	mov	r1, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	0a1b      	lsrs	r3, r3, #8
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	b2c0      	uxtb	r0, r0
 800a474:	9003      	str	r0, [sp, #12]
 800a476:	9302      	str	r3, [sp, #8]
 800a478:	9101      	str	r1, [sp, #4]
 800a47a:	9200      	str	r2, [sp, #0]
 800a47c:	4b36      	ldr	r3, [pc, #216]	; (800a558 <LoRaWAN_Init+0x18c>)
 800a47e:	2200      	movs	r2, #0
 800a480:	2100      	movs	r1, #0
 800a482:	2002      	movs	r0, #2
 800a484:	f013 f94e 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a488:	2300      	movs	r3, #0
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	4b33      	ldr	r3, [pc, #204]	; (800a55c <LoRaWAN_Init+0x190>)
 800a48e:	2200      	movs	r2, #0
 800a490:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a494:	4832      	ldr	r0, [pc, #200]	; (800a560 <LoRaWAN_Init+0x194>)
 800a496:	f012 fe97 	bl	801d1c8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a49a:	2300      	movs	r3, #0
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	4b31      	ldr	r3, [pc, #196]	; (800a564 <LoRaWAN_Init+0x198>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a4a6:	4830      	ldr	r0, [pc, #192]	; (800a568 <LoRaWAN_Init+0x19c>)
 800a4a8:	f012 fe8e 	bl	801d1c8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	4b2e      	ldr	r3, [pc, #184]	; (800a56c <LoRaWAN_Init+0x1a0>)
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a4b8:	482d      	ldr	r0, [pc, #180]	; (800a570 <LoRaWAN_Init+0x1a4>)
 800a4ba:	f012 fe85 	bl	801d1c8 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	4b2c      	ldr	r3, [pc, #176]	; (800a574 <LoRaWAN_Init+0x1a8>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a4ca:	482b      	ldr	r0, [pc, #172]	; (800a578 <LoRaWAN_Init+0x1ac>)
 800a4cc:	f012 fe7c 	bl	801d1c8 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a4d0:	4a2a      	ldr	r2, [pc, #168]	; (800a57c <LoRaWAN_Init+0x1b0>)
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	f012 fdd3 	bl	801d080 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a4da:	4a29      	ldr	r2, [pc, #164]	; (800a580 <LoRaWAN_Init+0x1b4>)
 800a4dc:	2100      	movs	r1, #0
 800a4de:	2002      	movs	r0, #2
 800a4e0:	f012 fdce 	bl	801d080 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a4e4:	4a27      	ldr	r2, [pc, #156]	; (800a584 <LoRaWAN_Init+0x1b8>)
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	2004      	movs	r0, #4
 800a4ea:	f012 fdc9 	bl	801d080 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a4ee:	4a26      	ldr	r2, [pc, #152]	; (800a588 <LoRaWAN_Init+0x1bc>)
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	2008      	movs	r0, #8
 800a4f4:	f012 fdc4 	bl	801d080 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a4f8:	f000 fd04 	bl	800af04 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a4fc:	4923      	ldr	r1, [pc, #140]	; (800a58c <LoRaWAN_Init+0x1c0>)
 800a4fe:	4824      	ldr	r0, [pc, #144]	; (800a590 <LoRaWAN_Init+0x1c4>)
 800a500:	f002 fa1a 	bl	800c938 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a504:	4823      	ldr	r0, [pc, #140]	; (800a594 <LoRaWAN_Init+0x1c8>)
 800a506:	f002 fa85 	bl	800ca14 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a50a:	4819      	ldr	r0, [pc, #100]	; (800a570 <LoRaWAN_Init+0x1a4>)
 800a50c:	f012 fe92 	bl	801d234 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a510:	4b21      	ldr	r3, [pc, #132]	; (800a598 <LoRaWAN_Init+0x1cc>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	4a21      	ldr	r2, [pc, #132]	; (800a59c <LoRaWAN_Init+0x1d0>)
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f002 fbd2 	bl	800ccc4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a520:	4b1f      	ldr	r3, [pc, #124]	; (800a5a0 <LoRaWAN_Init+0x1d4>)
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10b      	bne.n	800a540 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a528:	4b1e      	ldr	r3, [pc, #120]	; (800a5a4 <LoRaWAN_Init+0x1d8>)
 800a52a:	6819      	ldr	r1, [r3, #0]
 800a52c:	2300      	movs	r3, #0
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	4b1d      	ldr	r3, [pc, #116]	; (800a5a8 <LoRaWAN_Init+0x1dc>)
 800a532:	2200      	movs	r2, #0
 800a534:	481d      	ldr	r0, [pc, #116]	; (800a5ac <LoRaWAN_Init+0x1e0>)
 800a536:	f012 fe47 	bl	801d1c8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a53a:	481c      	ldr	r0, [pc, #112]	; (800a5ac <LoRaWAN_Init+0x1e0>)
 800a53c:	f012 fe7a 	bl	801d234 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	0801ddd0 	.word	0x0801ddd0
 800a54c:	0801ddf4 	.word	0x0801ddf4
 800a550:	0801de18 	.word	0x0801de18
 800a554:	0801de3c 	.word	0x0801de3c
 800a558:	0801de60 	.word	0x0801de60
 800a55c:	0800aa25 	.word	0x0800aa25
 800a560:	20000510 	.word	0x20000510
 800a564:	0800aa37 	.word	0x0800aa37
 800a568:	20000528 	.word	0x20000528
 800a56c:	0800aa49 	.word	0x0800aa49
 800a570:	20000540 	.word	0x20000540
 800a574:	0800ae05 	.word	0x0800ae05
 800a578:	20000404 	.word	0x20000404
 800a57c:	0800cc59 	.word	0x0800cc59
 800a580:	0800a6e5 	.word	0x0800a6e5
 800a584:	0800ae29 	.word	0x0800ae29
 800a588:	0800ad85 	.word	0x0800ad85
 800a58c:	01030000 	.word	0x01030000
 800a590:	20000024 	.word	0x20000024
 800a594:	20000070 	.word	0x20000070
 800a598:	20000020 	.word	0x20000020
 800a59c:	20000021 	.word	0x20000021
 800a5a0:	200003e8 	.word	0x200003e8
 800a5a4:	20000088 	.word	0x20000088
 800a5a8:	0800aa01 	.word	0x0800aa01
 800a5ac:	200003ec 	.word	0x200003ec

0800a5b0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a5b0:	b5b0      	push	{r4, r5, r7, lr}
 800a5b2:	b08a      	sub	sp, #40	; 0x28
 800a5b4:	af06      	add	r7, sp, #24
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d07f      	beq.n	800a6c4 <OnRxData+0x114>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a5c4:	4841      	ldr	r0, [pc, #260]	; (800a6cc <OnRxData+0x11c>)
 800a5c6:	f012 fe35 	bl	801d234 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d054      	beq.n	800a67c <OnRxData+0xcc>
    {
      if (appData != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d051      	beq.n	800a67c <OnRxData+0xcc>
      {
        RxPort = appData->Port;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d04a      	beq.n	800a67c <OnRxData+0xcc>
        {
          switch (appData->Port)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d01f      	beq.n	800a62e <OnRxData+0x7e>
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d13f      	bne.n	800a672 <OnRxData+0xc2>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d13d      	bne.n	800a676 <OnRxData+0xc6>
              {
                switch (appData->Buffer[0])
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b02      	cmp	r3, #2
 800a602:	d00e      	beq.n	800a622 <OnRxData+0x72>
 800a604:	2b02      	cmp	r3, #2
 800a606:	dc10      	bgt.n	800a62a <OnRxData+0x7a>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <OnRxData+0x62>
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d004      	beq.n	800a61a <OnRxData+0x6a>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a610:	e00b      	b.n	800a62a <OnRxData+0x7a>
                    LmHandlerRequestClass(CLASS_A);
 800a612:	2000      	movs	r0, #0
 800a614:	f002 fd0a 	bl	800d02c <LmHandlerRequestClass>
                    break;
 800a618:	e008      	b.n	800a62c <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_B);
 800a61a:	2001      	movs	r0, #1
 800a61c:	f002 fd06 	bl	800d02c <LmHandlerRequestClass>
                    break;
 800a620:	e004      	b.n	800a62c <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_C);
 800a622:	2002      	movs	r0, #2
 800a624:	f002 fd02 	bl	800d02c <LmHandlerRequestClass>
                    break;
 800a628:	e000      	b.n	800a62c <OnRxData+0x7c>
                    break;
 800a62a:	bf00      	nop
                }
              }
              break;
 800a62c:	e023      	b.n	800a676 <OnRxData+0xc6>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d121      	bne.n	800a67a <OnRxData+0xca>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	b2da      	uxtb	r2, r3
 800a642:	4b23      	ldr	r3, [pc, #140]	; (800a6d0 <OnRxData+0x120>)
 800a644:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a646:	4b22      	ldr	r3, [pc, #136]	; (800a6d0 <OnRxData+0x120>)
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d108      	bne.n	800a660 <OnRxData+0xb0>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a64e:	4b21      	ldr	r3, [pc, #132]	; (800a6d4 <OnRxData+0x124>)
 800a650:	2200      	movs	r2, #0
 800a652:	2100      	movs	r1, #0
 800a654:	2003      	movs	r0, #3
 800a656:	f013 f865 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
                  Status_LED_Off();
 800a65a:	f7f8 faf7 	bl	8002c4c <Status_LED_Off>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  Status_LED_On();
                }
              }
              break;
 800a65e:	e00c      	b.n	800a67a <OnRxData+0xca>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a660:	4b1d      	ldr	r3, [pc, #116]	; (800a6d8 <OnRxData+0x128>)
 800a662:	2200      	movs	r2, #0
 800a664:	2100      	movs	r1, #0
 800a666:	2003      	movs	r0, #3
 800a668:	f013 f85c 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
                  Status_LED_On();
 800a66c:	f7f8 fafa 	bl	8002c64 <Status_LED_On>
              break;
 800a670:	e003      	b.n	800a67a <OnRxData+0xca>

            default:

              break;
 800a672:	bf00      	nop
 800a674:	e002      	b.n	800a67c <OnRxData+0xcc>
              break;
 800a676:	bf00      	nop
 800a678:	e000      	b.n	800a67c <OnRxData+0xcc>
              break;
 800a67a:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	7c1b      	ldrb	r3, [r3, #16]
 800a680:	2b05      	cmp	r3, #5
 800a682:	d81f      	bhi.n	800a6c4 <OnRxData+0x114>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	7bfa      	ldrb	r2, [r7, #15]
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a690:	460c      	mov	r4, r1
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	7c09      	ldrb	r1, [r1, #16]
 800a696:	4608      	mov	r0, r1
 800a698:	4910      	ldr	r1, [pc, #64]	; (800a6dc <OnRxData+0x12c>)
 800a69a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a69e:	6838      	ldr	r0, [r7, #0]
 800a6a0:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	6838      	ldr	r0, [r7, #0]
 800a6a8:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a6ac:	9005      	str	r0, [sp, #20]
 800a6ae:	9504      	str	r5, [sp, #16]
 800a6b0:	9103      	str	r1, [sp, #12]
 800a6b2:	9402      	str	r4, [sp, #8]
 800a6b4:	9201      	str	r2, [sp, #4]
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <OnRxData+0x130>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2100      	movs	r1, #0
 800a6be:	2003      	movs	r0, #3
 800a6c0:	f013 f830 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a6cc:	20000528 	.word	0x20000528
 800a6d0:	2000050e 	.word	0x2000050e
 800a6d4:	0801de84 	.word	0x0801de84
 800a6d8:	0801de90 	.word	0x0801de90
 800a6dc:	20000008 	.word	0x20000008
 800a6e0:	0801de9c 	.word	0x0801de9c

0800a6e4 <SendTxData>:

static void SendTxData(void)
{
 800a6e4:	b590      	push	{r4, r7, lr}
 800a6e6:	b091      	sub	sp, #68	; 0x44
 800a6e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a6ea:	23ff      	movs	r3, #255	; 0xff
 800a6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a6f0:	f7f7 fc4a 	bl	8001f88 <GetBatteryLevel>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a71a:	1d3b      	adds	r3, r7, #4
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7f7 fd8d 	bl	800223c <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a722:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	4b8f      	ldr	r3, [pc, #572]	; (800a968 <SendTxData+0x284>)
 800a72a:	2201      	movs	r2, #1
 800a72c:	2100      	movs	r1, #0
 800a72e:	2002      	movs	r0, #2
 800a730:	f012 fff8 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4618      	mov	r0, r3
 800a738:	f7f6 f9f0 	bl	8000b1c <__aeabi_f2iz>
 800a73c:	4603      	mov	r3, r0
 800a73e:	b21b      	sxth	r3, r3
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	4b8a      	ldr	r3, [pc, #552]	; (800a96c <SendTxData+0x288>)
 800a744:	2201      	movs	r2, #1
 800a746:	2100      	movs	r1, #0
 800a748:	2002      	movs	r0, #2
 800a74a:	f012 ffeb 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a74e:	4b88      	ldr	r3, [pc, #544]	; (800a970 <SendTxData+0x28c>)
 800a750:	2202      	movs	r2, #2
 800a752:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4987      	ldr	r1, [pc, #540]	; (800a974 <SendTxData+0x290>)
 800a758:	4618      	mov	r0, r3
 800a75a:	f7f6 f88f 	bl	800087c <__aeabi_fmul>
 800a75e:	4603      	mov	r3, r0
 800a760:	4618      	mov	r0, r3
 800a762:	f7f6 fa01 	bl	8000b68 <__aeabi_f2uiz>
 800a766:	4603      	mov	r3, r0
 800a768:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7f6 f9d5 	bl	8000b1c <__aeabi_f2iz>
 800a772:	4603      	mov	r3, r0
 800a774:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	497f      	ldr	r1, [pc, #508]	; (800a978 <SendTxData+0x294>)
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f6 f87e 	bl	800087c <__aeabi_fmul>
 800a780:	4603      	mov	r3, r0
 800a782:	497c      	ldr	r1, [pc, #496]	; (800a974 <SendTxData+0x290>)
 800a784:	4618      	mov	r0, r3
 800a786:	f7f6 f92d 	bl	80009e4 <__aeabi_fdiv>
 800a78a:	4603      	mov	r3, r0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f6 f9eb 	bl	8000b68 <__aeabi_f2uiz>
 800a792:	4603      	mov	r3, r0
 800a794:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a796:	4b76      	ldr	r3, [pc, #472]	; (800a970 <SendTxData+0x28c>)
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79c:	1c59      	adds	r1, r3, #1
 800a79e:	6339      	str	r1, [r7, #48]	; 0x30
 800a7a0:	4413      	add	r3, r2
 800a7a2:	4a76      	ldr	r2, [pc, #472]	; (800a97c <SendTxData+0x298>)
 800a7a4:	7812      	ldrb	r2, [r2, #0]
 800a7a6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a7a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	b298      	uxth	r0, r3
 800a7ae:	4b70      	ldr	r3, [pc, #448]	; (800a970 <SendTxData+0x28c>)
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	1c59      	adds	r1, r3, #1
 800a7b6:	6339      	str	r1, [r7, #48]	; 0x30
 800a7b8:	4413      	add	r3, r2
 800a7ba:	b2c2      	uxtb	r2, r0
 800a7bc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a7be:	4b6c      	ldr	r3, [pc, #432]	; (800a970 <SendTxData+0x28c>)
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	1c59      	adds	r1, r3, #1
 800a7c6:	6339      	str	r1, [r7, #48]	; 0x30
 800a7c8:	4413      	add	r3, r2
 800a7ca:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a7cc:	b2d2      	uxtb	r2, r2
 800a7ce:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a7d0:	4b67      	ldr	r3, [pc, #412]	; (800a970 <SendTxData+0x28c>)
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	1c59      	adds	r1, r3, #1
 800a7d8:	6339      	str	r1, [r7, #48]	; 0x30
 800a7da:	4413      	add	r3, r2
 800a7dc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a7e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7e4:	0a1b      	lsrs	r3, r3, #8
 800a7e6:	b298      	uxth	r0, r3
 800a7e8:	4b61      	ldr	r3, [pc, #388]	; (800a970 <SendTxData+0x28c>)
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	1c59      	adds	r1, r3, #1
 800a7f0:	6339      	str	r1, [r7, #48]	; 0x30
 800a7f2:	4413      	add	r3, r2
 800a7f4:	b2c2      	uxtb	r2, r0
 800a7f6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a7f8:	4b5d      	ldr	r3, [pc, #372]	; (800a970 <SendTxData+0x28c>)
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	1c59      	adds	r1, r3, #1
 800a800:	6339      	str	r1, [r7, #48]	; 0x30
 800a802:	4413      	add	r3, r2
 800a804:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a80a:	4b5d      	ldr	r3, [pc, #372]	; (800a980 <SendTxData+0x29c>)
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b08      	cmp	r3, #8
 800a810:	d007      	beq.n	800a822 <SendTxData+0x13e>
 800a812:	4b5b      	ldr	r3, [pc, #364]	; (800a980 <SendTxData+0x29c>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d003      	beq.n	800a822 <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a81a:	4b59      	ldr	r3, [pc, #356]	; (800a980 <SendTxData+0x29c>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d120      	bne.n	800a864 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800a822:	4b53      	ldr	r3, [pc, #332]	; (800a970 <SendTxData+0x28c>)
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	1c59      	adds	r1, r3, #1
 800a82a:	6339      	str	r1, [r7, #48]	; 0x30
 800a82c:	4413      	add	r3, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a832:	4b4f      	ldr	r3, [pc, #316]	; (800a970 <SendTxData+0x28c>)
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	1c59      	adds	r1, r3, #1
 800a83a:	6339      	str	r1, [r7, #48]	; 0x30
 800a83c:	4413      	add	r3, r2
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a842:	4b4b      	ldr	r3, [pc, #300]	; (800a970 <SendTxData+0x28c>)
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	1c59      	adds	r1, r3, #1
 800a84a:	6339      	str	r1, [r7, #48]	; 0x30
 800a84c:	4413      	add	r3, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a852:	4b47      	ldr	r3, [pc, #284]	; (800a970 <SendTxData+0x28c>)
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	1c59      	adds	r1, r3, #1
 800a85a:	6339      	str	r1, [r7, #48]	; 0x30
 800a85c:	4413      	add	r3, r2
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]
 800a862:	e05b      	b.n	800a91c <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a86c:	4b40      	ldr	r3, [pc, #256]	; (800a970 <SendTxData+0x28c>)
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	1c59      	adds	r1, r3, #1
 800a874:	6339      	str	r1, [r7, #48]	; 0x30
 800a876:	18d4      	adds	r4, r2, r3
 800a878:	f7f7 fb86 	bl	8001f88 <GetBatteryLevel>
 800a87c:	4603      	mov	r3, r0
 800a87e:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	1418      	asrs	r0, r3, #16
 800a884:	4b3a      	ldr	r3, [pc, #232]	; (800a970 <SendTxData+0x28c>)
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	1c59      	adds	r1, r3, #1
 800a88c:	6339      	str	r1, [r7, #48]	; 0x30
 800a88e:	4413      	add	r3, r2
 800a890:	b2c2      	uxtb	r2, r0
 800a892:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	1218      	asrs	r0, r3, #8
 800a898:	4b35      	ldr	r3, [pc, #212]	; (800a970 <SendTxData+0x28c>)
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	1c59      	adds	r1, r3, #1
 800a8a0:	6339      	str	r1, [r7, #48]	; 0x30
 800a8a2:	4413      	add	r3, r2
 800a8a4:	b2c2      	uxtb	r2, r0
 800a8a6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a8a8:	4b31      	ldr	r3, [pc, #196]	; (800a970 <SendTxData+0x28c>)
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	1c59      	adds	r1, r3, #1
 800a8b0:	6339      	str	r1, [r7, #48]	; 0x30
 800a8b2:	4413      	add	r3, r2
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	1418      	asrs	r0, r3, #16
 800a8be:	4b2c      	ldr	r3, [pc, #176]	; (800a970 <SendTxData+0x28c>)
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	1c59      	adds	r1, r3, #1
 800a8c6:	6339      	str	r1, [r7, #48]	; 0x30
 800a8c8:	4413      	add	r3, r2
 800a8ca:	b2c2      	uxtb	r2, r0
 800a8cc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	1218      	asrs	r0, r3, #8
 800a8d2:	4b27      	ldr	r3, [pc, #156]	; (800a970 <SendTxData+0x28c>)
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	1c59      	adds	r1, r3, #1
 800a8da:	6339      	str	r1, [r7, #48]	; 0x30
 800a8dc:	4413      	add	r3, r2
 800a8de:	b2c2      	uxtb	r2, r0
 800a8e0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a8e2:	4b23      	ldr	r3, [pc, #140]	; (800a970 <SendTxData+0x28c>)
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	1c59      	adds	r1, r3, #1
 800a8ea:	6339      	str	r1, [r7, #48]	; 0x30
 800a8ec:	4413      	add	r3, r2
 800a8ee:	6a3a      	ldr	r2, [r7, #32]
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a8f4:	8bfb      	ldrh	r3, [r7, #30]
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	b298      	uxth	r0, r3
 800a8fa:	4b1d      	ldr	r3, [pc, #116]	; (800a970 <SendTxData+0x28c>)
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	1c59      	adds	r1, r3, #1
 800a902:	6339      	str	r1, [r7, #48]	; 0x30
 800a904:	4413      	add	r3, r2
 800a906:	b2c2      	uxtb	r2, r0
 800a908:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a90a:	4b19      	ldr	r3, [pc, #100]	; (800a970 <SendTxData+0x28c>)
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	1c59      	adds	r1, r3, #1
 800a912:	6339      	str	r1, [r7, #48]	; 0x30
 800a914:	4413      	add	r3, r2
 800a916:	8bfa      	ldrh	r2, [r7, #30]
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	4b13      	ldr	r3, [pc, #76]	; (800a970 <SendTxData+0x28c>)
 800a922:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a924:	4b17      	ldr	r3, [pc, #92]	; (800a984 <SendTxData+0x2a0>)
 800a926:	7a5b      	ldrb	r3, [r3, #9]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d007      	beq.n	800a93c <SendTxData+0x258>
 800a92c:	f002 fa6c 	bl	800ce08 <LmHandlerJoinStatus>
 800a930:	4603      	mov	r3, r0
 800a932:	2b01      	cmp	r3, #1
 800a934:	d102      	bne.n	800a93c <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a936:	4813      	ldr	r0, [pc, #76]	; (800a984 <SendTxData+0x2a0>)
 800a938:	f012 fcea 	bl	801d310 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a93c:	4b10      	ldr	r3, [pc, #64]	; (800a980 <SendTxData+0x29c>)
 800a93e:	78db      	ldrb	r3, [r3, #3]
 800a940:	2200      	movs	r2, #0
 800a942:	4619      	mov	r1, r3
 800a944:	480a      	ldr	r0, [pc, #40]	; (800a970 <SendTxData+0x28c>)
 800a946:	f002 fa7b 	bl	800ce40 <LmHandlerSend>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a950:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a954:	2b00      	cmp	r3, #0
 800a956:	d119      	bne.n	800a98c <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a958:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <SendTxData+0x2a4>)
 800a95a:	2201      	movs	r2, #1
 800a95c:	2100      	movs	r1, #0
 800a95e:	2001      	movs	r0, #1
 800a960:	f012 fee0 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
 800a964:	e029      	b.n	800a9ba <SendTxData+0x2d6>
 800a966:	bf00      	nop
 800a968:	0801dee4 	.word	0x0801dee4
 800a96c:	0801def0 	.word	0x0801def0
 800a970:	2000008c 	.word	0x2000008c
 800a974:	41200000 	.word	0x41200000
 800a978:	42c80000 	.word	0x42c80000
 800a97c:	2000050e 	.word	0x2000050e
 800a980:	20000070 	.word	0x20000070
 800a984:	20000540 	.word	0x20000540
 800a988:	0801defc 	.word	0x0801defc
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a98c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a990:	f113 0f06 	cmn.w	r3, #6
 800a994:	d111      	bne.n	800a9ba <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a996:	f002 f98b 	bl	800ccb0 <LmHandlerGetDutyCycleWaitTime>
 800a99a:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00b      	beq.n	800a9ba <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a4:	4a11      	ldr	r2, [pc, #68]	; (800a9ec <SendTxData+0x308>)
 800a9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9aa:	099b      	lsrs	r3, r3, #6
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <SendTxData+0x30c>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	f012 feb5 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a9ba:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <SendTxData+0x310>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10f      	bne.n	800a9e2 <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a9c2:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <SendTxData+0x314>)
 800a9c4:	f012 fca4 	bl	801d310 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <SendTxData+0x318>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	bf38      	it	cc
 800a9d2:	4613      	movcc	r3, r2
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4808      	ldr	r0, [pc, #32]	; (800a9f8 <SendTxData+0x314>)
 800a9d8:	f012 fd0a 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a9dc:	4806      	ldr	r0, [pc, #24]	; (800a9f8 <SendTxData+0x314>)
 800a9de:	f012 fc29 	bl	801d234 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a9e2:	bf00      	nop
 800a9e4:	373c      	adds	r7, #60	; 0x3c
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd90      	pop	{r4, r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	10624dd3 	.word	0x10624dd3
 800a9f0:	0801df0c 	.word	0x0801df0c
 800a9f4:	200003e8 	.word	0x200003e8
 800a9f8:	200003ec 	.word	0x200003ec
 800a9fc:	20000088 	.word	0x20000088

0800aa00 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800aa08:	2100      	movs	r1, #0
 800aa0a:	2002      	movs	r0, #2
 800aa0c:	f012 fb5a 	bl	801d0c4 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800aa10:	4803      	ldr	r0, [pc, #12]	; (800aa20 <OnTxTimerEvent+0x20>)
 800aa12:	f012 fc0f 	bl	801d234 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	200003ec 	.word	0x200003ec

0800aa24 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr

0800aa36 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800aa3e:	bf00      	nop
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bc80      	pop	{r7}
 800aa46:	4770      	bx	lr

0800aa48 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bc80      	pop	{r7}
 800aa58:	4770      	bx	lr
	...

0800aa5c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af04      	add	r7, sp, #16
 800aa62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d041      	beq.n	800aaee <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d03d      	beq.n	800aaee <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800aa72:	4821      	ldr	r0, [pc, #132]	; (800aaf8 <OnTxData+0x9c>)
 800aa74:	f012 fbde 	bl	801d234 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800aa78:	4b20      	ldr	r3, [pc, #128]	; (800aafc <OnTxData+0xa0>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	2002      	movs	r0, #2
 800aa80:	f012 fe50 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	7c12      	ldrb	r2, [r2, #16]
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800aa94:	4610      	mov	r0, r2
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800aa9c:	9203      	str	r2, [sp, #12]
 800aa9e:	9002      	str	r0, [sp, #8]
 800aaa0:	9101      	str	r1, [sp, #4]
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <OnTxData+0xa4>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	2003      	movs	r0, #3
 800aaac:	f012 fe3a 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800aab0:	4b14      	ldr	r3, [pc, #80]	; (800ab04 <OnTxData+0xa8>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	2100      	movs	r1, #0
 800aab6:	2003      	movs	r0, #3
 800aab8:	f012 fe34 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	7a1b      	ldrb	r3, [r3, #8]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d10e      	bne.n	800aae2 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	7a5b      	ldrb	r3, [r3, #9]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <OnTxData+0x74>
 800aacc:	4b0e      	ldr	r3, [pc, #56]	; (800ab08 <OnTxData+0xac>)
 800aace:	e000      	b.n	800aad2 <OnTxData+0x76>
 800aad0:	4b0e      	ldr	r3, [pc, #56]	; (800ab0c <OnTxData+0xb0>)
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <OnTxData+0xb4>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	2100      	movs	r1, #0
 800aada:	2003      	movs	r0, #3
 800aadc:	f012 fe22 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800aae0:	e005      	b.n	800aaee <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800aae2:	4b0c      	ldr	r3, [pc, #48]	; (800ab14 <OnTxData+0xb8>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	2100      	movs	r1, #0
 800aae8:	2003      	movs	r0, #3
 800aaea:	f012 fe1b 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000510 	.word	0x20000510
 800aafc:	0801df2c 	.word	0x0801df2c
 800ab00:	0801df60 	.word	0x0801df60
 800ab04:	0801df94 	.word	0x0801df94
 800ab08:	0801dfa4 	.word	0x0801dfa4
 800ab0c:	0801dfa8 	.word	0x0801dfa8
 800ab10:	0801dfb0 	.word	0x0801dfb0
 800ab14:	0801dfc4 	.word	0x0801dfc4

0800ab18 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d039      	beq.n	800ab9a <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d11e      	bne.n	800ab6e <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800ab30:	2100      	movs	r1, #0
 800ab32:	2004      	movs	r0, #4
 800ab34:	f012 fac6 	bl	801d0c4 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800ab38:	481a      	ldr	r0, [pc, #104]	; (800aba4 <OnJoinRequest+0x8c>)
 800ab3a:	f012 fbe9 	bl	801d310 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800ab3e:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <OnJoinRequest+0x90>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	2100      	movs	r1, #0
 800ab44:	2002      	movs	r0, #2
 800ab46:	f012 fded 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	79db      	ldrb	r3, [r3, #7]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d106      	bne.n	800ab60 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800ab52:	4b16      	ldr	r3, [pc, #88]	; (800abac <OnJoinRequest+0x94>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	2100      	movs	r1, #0
 800ab58:	2002      	movs	r0, #2
 800ab5a:	f012 fde3 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800ab5e:	e01c      	b.n	800ab9a <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800ab60:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <OnJoinRequest+0x98>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	2100      	movs	r1, #0
 800ab66:	2002      	movs	r0, #2
 800ab68:	f012 fddc 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab6c:	e015      	b.n	800ab9a <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800ab6e:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <OnJoinRequest+0x9c>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	2100      	movs	r1, #0
 800ab74:	2002      	movs	r0, #2
 800ab76:	f012 fdd5 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	79db      	ldrb	r3, [r3, #7]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d10b      	bne.n	800ab9a <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800ab82:	4b0d      	ldr	r3, [pc, #52]	; (800abb8 <OnJoinRequest+0xa0>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	2100      	movs	r1, #0
 800ab88:	2002      	movs	r0, #2
 800ab8a:	f012 fdcb 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <OnJoinRequest+0xa4>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	2101      	movs	r1, #1
 800ab94:	4618      	mov	r0, r3
 800ab96:	f002 f895 	bl	800ccc4 <LmHandlerJoin>
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000540 	.word	0x20000540
 800aba8:	0801dfd4 	.word	0x0801dfd4
 800abac:	0801dfec 	.word	0x0801dfec
 800abb0:	0801e00c 	.word	0x0801e00c
 800abb4:	0801e02c 	.word	0x0801e02c
 800abb8:	0801e048 	.word	0x0801e048
 800abbc:	20000020 	.word	0x20000020

0800abc0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc2:	b093      	sub	sp, #76	; 0x4c
 800abc4:	af0c      	add	r7, sp, #48	; 0x30
 800abc6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d056      	beq.n	800ac7c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d008      	beq.n	800abe8 <OnBeaconStatusChange+0x28>
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d049      	beq.n	800ac6e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800abda:	4b2a      	ldr	r3, [pc, #168]	; (800ac84 <OnBeaconStatusChange+0xc4>)
 800abdc:	2200      	movs	r2, #0
 800abde:	2100      	movs	r1, #0
 800abe0:	2002      	movs	r0, #2
 800abe2:	f012 fd9f 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800abe6:	e049      	b.n	800ac7c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	7c1b      	ldrb	r3, [r3, #16]
 800abec:	4618      	mov	r0, r3
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800abf4:	461c      	mov	r4, r3
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800abfc:	461d      	mov	r5, r3
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	6852      	ldr	r2, [r2, #4]
 800ac06:	6979      	ldr	r1, [r7, #20]
 800ac08:	7d89      	ldrb	r1, [r1, #22]
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	6979      	ldr	r1, [r7, #20]
 800ac0e:	7dc9      	ldrb	r1, [r1, #23]
 800ac10:	6139      	str	r1, [r7, #16]
 800ac12:	6979      	ldr	r1, [r7, #20]
 800ac14:	7e09      	ldrb	r1, [r1, #24]
 800ac16:	60f9      	str	r1, [r7, #12]
 800ac18:	6979      	ldr	r1, [r7, #20]
 800ac1a:	7e49      	ldrb	r1, [r1, #25]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	6979      	ldr	r1, [r7, #20]
 800ac20:	7e89      	ldrb	r1, [r1, #26]
 800ac22:	6079      	str	r1, [r7, #4]
 800ac24:	6979      	ldr	r1, [r7, #20]
 800ac26:	7ec9      	ldrb	r1, [r1, #27]
 800ac28:	6039      	str	r1, [r7, #0]
 800ac2a:	6979      	ldr	r1, [r7, #20]
 800ac2c:	7f09      	ldrb	r1, [r1, #28]
 800ac2e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ac30:	f8d7 c000 	ldr.w	ip, [r7]
 800ac34:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800ac38:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800ac3c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ac40:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ac44:	f8cd c020 	str.w	ip, [sp, #32]
 800ac48:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800ac4c:	f8cd c01c 	str.w	ip, [sp, #28]
 800ac50:	6939      	ldr	r1, [r7, #16]
 800ac52:	9106      	str	r1, [sp, #24]
 800ac54:	9605      	str	r6, [sp, #20]
 800ac56:	9204      	str	r2, [sp, #16]
 800ac58:	9303      	str	r3, [sp, #12]
 800ac5a:	9502      	str	r5, [sp, #8]
 800ac5c:	9401      	str	r4, [sp, #4]
 800ac5e:	9000      	str	r0, [sp, #0]
 800ac60:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <OnBeaconStatusChange+0xc8>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	2100      	movs	r1, #0
 800ac66:	2002      	movs	r0, #2
 800ac68:	f012 fd5c 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800ac6c:	e006      	b.n	800ac7c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800ac6e:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <OnBeaconStatusChange+0xcc>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	2100      	movs	r1, #0
 800ac74:	2002      	movs	r0, #2
 800ac76:	f012 fd55 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ac7a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800ac7c:	bf00      	nop
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac84:	0801e06c 	.word	0x0801e06c
 800ac88:	0801e084 	.word	0x0801e084
 800ac8c:	0801e0f8 	.word	0x0801e0f8

0800ac90 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800ac94:	bf00      	nop
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bc80      	pop	{r7}
 800ac9a:	4770      	bx	lr

0800ac9c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af02      	add	r7, sp, #8
 800aca2:	4603      	mov	r3, r0
 800aca4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	4a06      	ldr	r2, [pc, #24]	; (800acc4 <OnClassChange+0x28>)
 800acaa:	5cd3      	ldrb	r3, [r2, r3]
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <OnClassChange+0x2c>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	2100      	movs	r1, #0
 800acb4:	2002      	movs	r0, #2
 800acb6:	f012 fd35 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800acba:	bf00      	nop
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	0801e134 	.word	0x0801e134
 800acc8:	0801e118 	.word	0x0801e118

0800accc <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800acd0:	2100      	movs	r1, #0
 800acd2:	2001      	movs	r0, #1
 800acd4:	f012 f9f6 	bl	801d0c4 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800acd8:	bf00      	nop
 800acda:	bd80      	pop	{r7, pc}

0800acdc <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800ace4:	4a0d      	ldr	r2, [pc, #52]	; (800ad1c <OnTxPeriodicityChanged+0x40>)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800acea:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <OnTxPeriodicityChanged+0x40>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d103      	bne.n	800acfa <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800acf2:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <OnTxPeriodicityChanged+0x40>)
 800acf4:	f242 7210 	movw	r2, #10000	; 0x2710
 800acf8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800acfa:	4809      	ldr	r0, [pc, #36]	; (800ad20 <OnTxPeriodicityChanged+0x44>)
 800acfc:	f012 fb08 	bl	801d310 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800ad00:	4b06      	ldr	r3, [pc, #24]	; (800ad1c <OnTxPeriodicityChanged+0x40>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4619      	mov	r1, r3
 800ad06:	4806      	ldr	r0, [pc, #24]	; (800ad20 <OnTxPeriodicityChanged+0x44>)
 800ad08:	f012 fb72 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800ad0c:	4804      	ldr	r0, [pc, #16]	; (800ad20 <OnTxPeriodicityChanged+0x44>)
 800ad0e:	f012 fa91 	bl	801d234 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20000088 	.word	0x20000088
 800ad20:	200003ec 	.word	0x200003ec

0800ad24 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ad2e:	4a04      	ldr	r2, [pc, #16]	; (800ad40 <OnTxFrameCtrlChanged+0x1c>)
 800ad30:	79fb      	ldrb	r3, [r7, #7]
 800ad32:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bc80      	pop	{r7}
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	20000070 	.word	0x20000070

0800ad44 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ad4e:	4a04      	ldr	r2, [pc, #16]	; (800ad60 <OnPingSlotPeriodicityChanged+0x1c>)
 800ad50:	79fb      	ldrb	r3, [r7, #7]
 800ad52:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bc80      	pop	{r7}
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20000070 	.word	0x20000070

0800ad64 <OnSystemReset>:

static void OnSystemReset(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ad68:	f002 fda5 	bl	800d8b6 <LmHandlerHalt>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <OnSystemReset+0x1c>
 800ad72:	f002 f849 	bl	800ce08 <LmHandlerJoinStatus>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d101      	bne.n	800ad80 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ad7c:	f7ff fb10 	bl	800a3a0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ad80:	bf00      	nop
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <StopJoin>:

static void StopJoin(void)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ad88:	4817      	ldr	r0, [pc, #92]	; (800ade8 <StopJoin+0x64>)
 800ad8a:	f012 fac1 	bl	801d310 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800ad8e:	f002 fd85 	bl	800d89c <LmHandlerStop>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d006      	beq.n	800ada6 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ad98:	4b14      	ldr	r3, [pc, #80]	; (800adec <StopJoin+0x68>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	2002      	movs	r0, #2
 800ada0:	f012 fcc0 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
 800ada4:	e01a      	b.n	800addc <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ada6:	4b12      	ldr	r3, [pc, #72]	; (800adf0 <StopJoin+0x6c>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	2100      	movs	r1, #0
 800adac:	2002      	movs	r0, #2
 800adae:	f012 fcb9 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800adb2:	4b10      	ldr	r3, [pc, #64]	; (800adf4 <StopJoin+0x70>)
 800adb4:	2201      	movs	r2, #1
 800adb6:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800adb8:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <StopJoin+0x74>)
 800adba:	2200      	movs	r2, #0
 800adbc:	2100      	movs	r1, #0
 800adbe:	2002      	movs	r0, #2
 800adc0:	f012 fcb0 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800adc4:	480d      	ldr	r0, [pc, #52]	; (800adfc <StopJoin+0x78>)
 800adc6:	f001 fe25 	bl	800ca14 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800adca:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <StopJoin+0x70>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2101      	movs	r1, #1
 800add0:	4618      	mov	r0, r3
 800add2:	f001 ff77 	bl	800ccc4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800add6:	4804      	ldr	r0, [pc, #16]	; (800ade8 <StopJoin+0x64>)
 800add8:	f012 fa2c 	bl	801d234 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800addc:	4808      	ldr	r0, [pc, #32]	; (800ae00 <StopJoin+0x7c>)
 800adde:	f012 fa29 	bl	801d234 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ade2:	bf00      	nop
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	200003ec 	.word	0x200003ec
 800adec:	0801e138 	.word	0x0801e138
 800adf0:	0801e158 	.word	0x0801e158
 800adf4:	20000020 	.word	0x20000020
 800adf8:	0801e16c 	.word	0x0801e16c
 800adfc:	20000070 	.word	0x20000070
 800ae00:	20000404 	.word	0x20000404

0800ae04 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800ae0c:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <OnStopJoinTimerEvent+0x20>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d103      	bne.n	800ae1c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ae14:	2100      	movs	r1, #0
 800ae16:	2008      	movs	r0, #8
 800ae18:	f012 f954 	bl	801d0c4 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20000020 	.word	0x20000020

0800ae28 <StoreContext>:

static void StoreContext(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ae2e:	23ff      	movs	r3, #255	; 0xff
 800ae30:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ae32:	f002 fd75 	bl	800d920 <LmHandlerNvmDataStore>
 800ae36:	4603      	mov	r3, r0
 800ae38:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800ae3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae3e:	f113 0f08 	cmn.w	r3, #8
 800ae42:	d106      	bne.n	800ae52 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800ae44:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <StoreContext+0x48>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	2100      	movs	r1, #0
 800ae4a:	2002      	movs	r0, #2
 800ae4c:	f012 fc6a 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800ae50:	e00a      	b.n	800ae68 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800ae52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae5a:	d105      	bne.n	800ae68 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800ae5c:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <StoreContext+0x4c>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2100      	movs	r1, #0
 800ae62:	2002      	movs	r0, #2
 800ae64:	f012 fc5e 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0801e18c 	.word	0x0801e18c
 800ae74:	0801e1a4 	.word	0x0801e1a4

0800ae78 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d106      	bne.n	800ae96 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800ae88:	4b08      	ldr	r3, [pc, #32]	; (800aeac <OnNvmDataChange+0x34>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	2002      	movs	r0, #2
 800ae90:	f012 fc48 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ae94:	e005      	b.n	800aea2 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ae96:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <OnNvmDataChange+0x38>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	2002      	movs	r0, #2
 800ae9e:	f012 fc41 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	0801e1bc 	.word	0x0801e1bc
 800aeb0:	0801e1d0 	.word	0x0801e1d0

0800aeb4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800aebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aec2:	4807      	ldr	r0, [pc, #28]	; (800aee0 <OnStoreContextRequest+0x2c>)
 800aec4:	f7f6 f9c8 	bl	8001258 <FLASH_IF_Erase>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d104      	bne.n	800aed8 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	4803      	ldr	r0, [pc, #12]	; (800aee0 <OnStoreContextRequest+0x2c>)
 800aed4:	f7f6 f970 	bl	80011b8 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	0803f000 	.word	0x0803f000

0800aee4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4903      	ldr	r1, [pc, #12]	; (800af00 <OnRestoreContextRequest+0x1c>)
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7f6 f988 	bl	8001208 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	0803f000 	.word	0x0803f000

0800af04 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800af08:	4b18      	ldr	r3, [pc, #96]	; (800af6c <LoraInfo_Init+0x68>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800af0e:	4b17      	ldr	r3, [pc, #92]	; (800af6c <LoraInfo_Init+0x68>)
 800af10:	2200      	movs	r2, #0
 800af12:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800af14:	4b15      	ldr	r3, [pc, #84]	; (800af6c <LoraInfo_Init+0x68>)
 800af16:	2200      	movs	r2, #0
 800af18:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800af1a:	4b14      	ldr	r3, [pc, #80]	; (800af6c <LoraInfo_Init+0x68>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800af20:	4b12      	ldr	r3, [pc, #72]	; (800af6c <LoraInfo_Init+0x68>)
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	f043 0320 	orr.w	r3, r3, #32
 800af28:	4a10      	ldr	r2, [pc, #64]	; (800af6c <LoraInfo_Init+0x68>)
 800af2a:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800af2c:	4b0f      	ldr	r3, [pc, #60]	; (800af6c <LoraInfo_Init+0x68>)
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af34:	4a0d      	ldr	r2, [pc, #52]	; (800af6c <LoraInfo_Init+0x68>)
 800af36:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800af38:	4b0c      	ldr	r3, [pc, #48]	; (800af6c <LoraInfo_Init+0x68>)
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10c      	bne.n	800af5a <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800af40:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <LoraInfo_Init+0x6c>)
 800af42:	2200      	movs	r2, #0
 800af44:	2100      	movs	r1, #0
 800af46:	2000      	movs	r0, #0
 800af48:	f012 fbec 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800af4c:	bf00      	nop
 800af4e:	f012 fbd7 	bl	801d700 <UTIL_ADV_TRACE_IsBufferEmpty>
 800af52:	4603      	mov	r3, r0
 800af54:	2b01      	cmp	r3, #1
 800af56:	d1fa      	bne.n	800af4e <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800af58:	e7fe      	b.n	800af58 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800af5a:	4b04      	ldr	r3, [pc, #16]	; (800af6c <LoraInfo_Init+0x68>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <LoraInfo_Init+0x68>)
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800af66:	bf00      	nop
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20000558 	.word	0x20000558
 800af70:	0801e1e4 	.word	0x0801e1e4

0800af74 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800af74:	b480      	push	{r7}
 800af76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800af78:	4b02      	ldr	r3, [pc, #8]	; (800af84 <LoraInfo_GetPtr+0x10>)
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000558 	.word	0x20000558

0800af88 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800af8c:	f7f7 fef2 	bl	8002d74 <BSP_RADIO_Init>
 800af90:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800af92:	4618      	mov	r0, r3
 800af94:	bd80      	pop	{r7, pc}

0800af96 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	4603      	mov	r3, r0
 800af9e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800afa0:	79fb      	ldrb	r3, [r7, #7]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7f7 ff18 	bl	8002dd8 <BSP_RADIO_ConfigRFSwitch>
 800afa8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800afb6:	f7f7 ff5d 	bl	8002e74 <BSP_RADIO_GetTxConfig>
 800afba:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800afc4:	f7f7 ff5d 	bl	8002e82 <BSP_RADIO_IsTCXO>
 800afc8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800afca:	4618      	mov	r0, r3
 800afcc:	bd80      	pop	{r7, pc}

0800afce <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800afd2:	f7f7 ff5d 	bl	8002e90 <BSP_RADIO_IsDCDC>
 800afd6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800afd8:	4618      	mov	r0, r3
 800afda:	bd80      	pop	{r7, pc}

0800afdc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f7 ff58 	bl	8002e9e <BSP_RADIO_GetRFOMaxPowerConfig>
 800afee:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	33f1      	adds	r3, #241	; 0xf1
 800b004:	2210      	movs	r2, #16
 800b006:	2100      	movs	r1, #0
 800b008:	4618      	mov	r0, r3
 800b00a:	f00e f821 	bl	8019050 <memset1>
    ctx->M_n = 0;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	22f0      	movs	r2, #240	; 0xf0
 800b01a:	2100      	movs	r1, #0
 800b01c:	4618      	mov	r0, r3
 800b01e:	f00e f817 	bl	8019050 <memset1>
}
 800b022:	bf00      	nop
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b082      	sub	sp, #8
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	461a      	mov	r2, r3
 800b038:	2110      	movs	r1, #16
 800b03a:	6838      	ldr	r0, [r7, #0]
 800b03c:	f000 fe5c 	bl	800bcf8 <lorawan_aes_set_key>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08c      	sub	sp, #48	; 0x30
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 80a1 	beq.w	800b1a2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b066:	f1c3 0310 	rsb	r3, r3, #16
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4293      	cmp	r3, r2
 800b06e:	bf28      	it	cs
 800b070:	4613      	movcs	r3, r2
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f203 1201 	addw	r2, r3, #257	; 0x101
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b080:	4413      	add	r3, r2
 800b082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b084:	b292      	uxth	r2, r2
 800b086:	68b9      	ldr	r1, [r7, #8]
 800b088:	4618      	mov	r0, r3
 800b08a:	f00d ffa6 	bl	8018fda <memcpy1>
        ctx->M_n += mlen;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	441a      	add	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b0a4:	2b0f      	cmp	r3, #15
 800b0a6:	f240 808d 	bls.w	800b1c4 <AES_CMAC_Update+0x17c>
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	f000 8088 	beq.w	800b1c4 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0b8:	e015      	b.n	800b0e6 <AES_CMAC_Update+0x9e>
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0be:	4413      	add	r3, r2
 800b0c0:	33f1      	adds	r3, #241	; 0xf1
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	68f9      	ldr	r1, [r7, #12]
 800b0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c8:	440b      	add	r3, r1
 800b0ca:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	4053      	eors	r3, r2
 800b0d2:	b2d9      	uxtb	r1, r3
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	4413      	add	r3, r2
 800b0da:	33f1      	adds	r3, #241	; 0xf1
 800b0dc:	460a      	mov	r2, r1
 800b0de:	701a      	strb	r2, [r3, #0]
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e8:	2b0f      	cmp	r3, #15
 800b0ea:	dde6      	ble.n	800b0ba <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b0f2:	f107 0314 	add.w	r3, r7, #20
 800b0f6:	2210      	movs	r2, #16
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f00d ff6e 	bl	8018fda <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	f107 0114 	add.w	r1, r7, #20
 800b104:	f107 0314 	add.w	r3, r7, #20
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fed3 	bl	800beb4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	33f1      	adds	r3, #241	; 0xf1
 800b112:	f107 0114 	add.w	r1, r7, #20
 800b116:	2210      	movs	r2, #16
 800b118:	4618      	mov	r0, r3
 800b11a:	f00d ff5e 	bl	8018fda <memcpy1>

        data += mlen;
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	4413      	add	r3, r2
 800b124:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b12e:	e038      	b.n	800b1a2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b130:	2300      	movs	r3, #0
 800b132:	62bb      	str	r3, [r7, #40]	; 0x28
 800b134:	e013      	b.n	800b15e <AES_CMAC_Update+0x116>
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	4413      	add	r3, r2
 800b13c:	33f1      	adds	r3, #241	; 0xf1
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	440b      	add	r3, r1
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	4053      	eors	r3, r2
 800b14a:	b2d9      	uxtb	r1, r3
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	4413      	add	r3, r2
 800b152:	33f1      	adds	r3, #241	; 0xf1
 800b154:	460a      	mov	r2, r1
 800b156:	701a      	strb	r2, [r3, #0]
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	3301      	adds	r3, #1
 800b15c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	2b0f      	cmp	r3, #15
 800b162:	dde8      	ble.n	800b136 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b16a:	f107 0314 	add.w	r3, r7, #20
 800b16e:	2210      	movs	r2, #16
 800b170:	4618      	mov	r0, r3
 800b172:	f00d ff32 	bl	8018fda <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	f107 0114 	add.w	r1, r7, #20
 800b17c:	f107 0314 	add.w	r3, r7, #20
 800b180:	4618      	mov	r0, r3
 800b182:	f000 fe97 	bl	800beb4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	33f1      	adds	r3, #241	; 0xf1
 800b18a:	f107 0114 	add.w	r1, r7, #20
 800b18e:	2210      	movs	r2, #16
 800b190:	4618      	mov	r0, r3
 800b192:	f00d ff22 	bl	8018fda <memcpy1>

        data += 16;
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	3310      	adds	r3, #16
 800b19a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3b10      	subs	r3, #16
 800b1a0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b10      	cmp	r3, #16
 800b1a6:	d8c3      	bhi.n	800b130 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	b292      	uxth	r2, r2
 800b1b2:	68b9      	ldr	r1, [r7, #8]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f00d ff10 	bl	8018fda <memcpy1>
    ctx->M_n = len;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b1c2:	e000      	b.n	800b1c6 <AES_CMAC_Update+0x17e>
            return;
 800b1c4:	bf00      	nop
}
 800b1c6:	3730      	adds	r7, #48	; 0x30
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b092      	sub	sp, #72	; 0x48
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b1d6:	f107 031c 	add.w	r3, r7, #28
 800b1da:	2210      	movs	r2, #16
 800b1dc:	2100      	movs	r1, #0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f00d ff36 	bl	8019050 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	f107 011c 	add.w	r1, r7, #28
 800b1ea:	f107 031c 	add.w	r3, r7, #28
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fe60 	bl	800beb4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b1f4:	7f3b      	ldrb	r3, [r7, #28]
 800b1f6:	b25b      	sxtb	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	da30      	bge.n	800b25e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800b200:	e01b      	b.n	800b23a <AES_CMAC_Final+0x6e>
 800b202:	f107 021c 	add.w	r2, r7, #28
 800b206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b208:	4413      	add	r3, r2
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	b25a      	sxtb	r2, r3
 800b210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b212:	3301      	adds	r3, #1
 800b214:	3348      	adds	r3, #72	; 0x48
 800b216:	443b      	add	r3, r7
 800b218:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b21c:	09db      	lsrs	r3, r3, #7
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	b25b      	sxtb	r3, r3
 800b222:	4313      	orrs	r3, r2
 800b224:	b25b      	sxtb	r3, r3
 800b226:	b2d9      	uxtb	r1, r3
 800b228:	f107 021c 	add.w	r2, r7, #28
 800b22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b22e:	4413      	add	r3, r2
 800b230:	460a      	mov	r2, r1
 800b232:	701a      	strb	r2, [r3, #0]
 800b234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b236:	3301      	adds	r3, #1
 800b238:	647b      	str	r3, [r7, #68]	; 0x44
 800b23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b23c:	2b0e      	cmp	r3, #14
 800b23e:	dde0      	ble.n	800b202 <AES_CMAC_Final+0x36>
 800b240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800b24c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b250:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b254:	43db      	mvns	r3, r3
 800b256:	b2db      	uxtb	r3, r3
 800b258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b25c:	e027      	b.n	800b2ae <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b25e:	2300      	movs	r3, #0
 800b260:	643b      	str	r3, [r7, #64]	; 0x40
 800b262:	e01b      	b.n	800b29c <AES_CMAC_Final+0xd0>
 800b264:	f107 021c 	add.w	r2, r7, #28
 800b268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b26a:	4413      	add	r3, r2
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	b25a      	sxtb	r2, r3
 800b272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b274:	3301      	adds	r3, #1
 800b276:	3348      	adds	r3, #72	; 0x48
 800b278:	443b      	add	r3, r7
 800b27a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b27e:	09db      	lsrs	r3, r3, #7
 800b280:	b2db      	uxtb	r3, r3
 800b282:	b25b      	sxtb	r3, r3
 800b284:	4313      	orrs	r3, r2
 800b286:	b25b      	sxtb	r3, r3
 800b288:	b2d9      	uxtb	r1, r3
 800b28a:	f107 021c 	add.w	r2, r7, #28
 800b28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b290:	4413      	add	r3, r2
 800b292:	460a      	mov	r2, r1
 800b294:	701a      	strb	r2, [r3, #0]
 800b296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b298:	3301      	adds	r3, #1
 800b29a:	643b      	str	r3, [r7, #64]	; 0x40
 800b29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b29e:	2b0e      	cmp	r3, #14
 800b2a0:	dde0      	ble.n	800b264 <AES_CMAC_Final+0x98>
 800b2a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b2b4:	2b10      	cmp	r3, #16
 800b2b6:	d11d      	bne.n	800b2f4 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2bc:	e016      	b.n	800b2ec <AES_CMAC_Final+0x120>
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2c8:	781a      	ldrb	r2, [r3, #0]
 800b2ca:	f107 011c 	add.w	r1, r7, #28
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d0:	440b      	add	r3, r1
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	4053      	eors	r3, r2
 800b2d6:	b2d9      	uxtb	r1, r3
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2dc:	4413      	add	r3, r2
 800b2de:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2e2:	460a      	mov	r2, r1
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ee:	2b0f      	cmp	r3, #15
 800b2f0:	dde5      	ble.n	800b2be <AES_CMAC_Final+0xf2>
 800b2f2:	e096      	b.n	800b422 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b2f4:	7f3b      	ldrb	r3, [r7, #28]
 800b2f6:	b25b      	sxtb	r3, r3
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	da30      	bge.n	800b35e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800b300:	e01b      	b.n	800b33a <AES_CMAC_Final+0x16e>
 800b302:	f107 021c 	add.w	r2, r7, #28
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	4413      	add	r3, r2
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	b25a      	sxtb	r2, r3
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	3301      	adds	r3, #1
 800b314:	3348      	adds	r3, #72	; 0x48
 800b316:	443b      	add	r3, r7
 800b318:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b31c:	09db      	lsrs	r3, r3, #7
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	b25b      	sxtb	r3, r3
 800b322:	4313      	orrs	r3, r2
 800b324:	b25b      	sxtb	r3, r3
 800b326:	b2d9      	uxtb	r1, r3
 800b328:	f107 021c 	add.w	r2, r7, #28
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	4413      	add	r3, r2
 800b330:	460a      	mov	r2, r1
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	3301      	adds	r3, #1
 800b338:	63bb      	str	r3, [r7, #56]	; 0x38
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	2b0e      	cmp	r3, #14
 800b33e:	dde0      	ble.n	800b302 <AES_CMAC_Final+0x136>
 800b340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	b2db      	uxtb	r3, r3
 800b348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b34c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b350:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b354:	43db      	mvns	r3, r3
 800b356:	b2db      	uxtb	r3, r3
 800b358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b35c:	e027      	b.n	800b3ae <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b35e:	2300      	movs	r3, #0
 800b360:	637b      	str	r3, [r7, #52]	; 0x34
 800b362:	e01b      	b.n	800b39c <AES_CMAC_Final+0x1d0>
 800b364:	f107 021c 	add.w	r2, r7, #28
 800b368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36a:	4413      	add	r3, r2
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	b25a      	sxtb	r2, r3
 800b372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b374:	3301      	adds	r3, #1
 800b376:	3348      	adds	r3, #72	; 0x48
 800b378:	443b      	add	r3, r7
 800b37a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b37e:	09db      	lsrs	r3, r3, #7
 800b380:	b2db      	uxtb	r3, r3
 800b382:	b25b      	sxtb	r3, r3
 800b384:	4313      	orrs	r3, r2
 800b386:	b25b      	sxtb	r3, r3
 800b388:	b2d9      	uxtb	r1, r3
 800b38a:	f107 021c 	add.w	r2, r7, #28
 800b38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b390:	4413      	add	r3, r2
 800b392:	460a      	mov	r2, r1
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b398:	3301      	adds	r3, #1
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
 800b39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39e:	2b0e      	cmp	r3, #14
 800b3a0:	dde0      	ble.n	800b364 <AES_CMAC_Final+0x198>
 800b3a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3a6:	005b      	lsls	r3, r3, #1
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	2280      	movs	r2, #128	; 0x80
 800b3ba:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b3be:	e007      	b.n	800b3d0 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b3e4:	2b0f      	cmp	r3, #15
 800b3e6:	d9eb      	bls.n	800b3c0 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b3ec:	e016      	b.n	800b41c <AES_CMAC_Final+0x250>
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b3f8:	781a      	ldrb	r2, [r3, #0]
 800b3fa:	f107 011c 	add.w	r1, r7, #28
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	440b      	add	r3, r1
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	4053      	eors	r3, r2
 800b406:	b2d9      	uxtb	r1, r3
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	4413      	add	r3, r2
 800b40e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b412:	460a      	mov	r2, r1
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	3301      	adds	r3, #1
 800b41a:	633b      	str	r3, [r7, #48]	; 0x30
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	2b0f      	cmp	r3, #15
 800b420:	dde5      	ble.n	800b3ee <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b422:	2300      	movs	r3, #0
 800b424:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b426:	e015      	b.n	800b454 <AES_CMAC_Final+0x288>
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	4413      	add	r3, r2
 800b42e:	33f1      	adds	r3, #241	; 0xf1
 800b430:	781a      	ldrb	r2, [r3, #0]
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	440b      	add	r3, r1
 800b438:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	4053      	eors	r3, r2
 800b440:	b2d9      	uxtb	r1, r3
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	4413      	add	r3, r2
 800b448:	33f1      	adds	r3, #241	; 0xf1
 800b44a:	460a      	mov	r2, r1
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b450:	3301      	adds	r3, #1
 800b452:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b456:	2b0f      	cmp	r3, #15
 800b458:	dde6      	ble.n	800b428 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b460:	f107 030c 	add.w	r3, r7, #12
 800b464:	2210      	movs	r2, #16
 800b466:	4618      	mov	r0, r3
 800b468:	f00d fdb7 	bl	8018fda <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	f107 030c 	add.w	r3, r7, #12
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fd1d 	bl	800beb4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b47a:	f107 031c 	add.w	r3, r7, #28
 800b47e:	2210      	movs	r2, #16
 800b480:	2100      	movs	r1, #0
 800b482:	4618      	mov	r0, r3
 800b484:	f00d fde4 	bl	8019050 <memset1>
}
 800b488:	bf00      	nop
 800b48a:	3748      	adds	r7, #72	; 0x48
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781a      	ldrb	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	7852      	ldrb	r2, [r2, #1]
 800b4aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3302      	adds	r3, #2
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	7892      	ldrb	r2, [r2, #2]
 800b4b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3303      	adds	r3, #3
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	78d2      	ldrb	r2, [r2, #3]
 800b4be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	7912      	ldrb	r2, [r2, #4]
 800b4c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3305      	adds	r3, #5
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	7952      	ldrb	r2, [r2, #5]
 800b4d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3306      	adds	r3, #6
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	7992      	ldrb	r2, [r2, #6]
 800b4dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3307      	adds	r3, #7
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	79d2      	ldrb	r2, [r2, #7]
 800b4e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	7a12      	ldrb	r2, [r2, #8]
 800b4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3309      	adds	r3, #9
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	7a52      	ldrb	r2, [r2, #9]
 800b4fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	330a      	adds	r3, #10
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	7a92      	ldrb	r2, [r2, #10]
 800b504:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	330b      	adds	r3, #11
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	7ad2      	ldrb	r2, [r2, #11]
 800b50e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	330c      	adds	r3, #12
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	7b12      	ldrb	r2, [r2, #12]
 800b518:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	330d      	adds	r3, #13
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	7b52      	ldrb	r2, [r2, #13]
 800b522:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	330e      	adds	r3, #14
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	7b92      	ldrb	r2, [r2, #14]
 800b52c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	330f      	adds	r3, #15
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	7bd2      	ldrb	r2, [r2, #15]
 800b536:	701a      	strb	r2, [r3, #0]
#endif
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b542:	b480      	push	{r7}
 800b544:	b085      	sub	sp, #20
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	4613      	mov	r3, r2
 800b54e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b550:	e007      	b.n	800b562 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	1c53      	adds	r3, r2, #1
 800b556:	60bb      	str	r3, [r7, #8]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	1c59      	adds	r1, r3, #1
 800b55c:	60f9      	str	r1, [r7, #12]
 800b55e:	7812      	ldrb	r2, [r2, #0]
 800b560:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	1e5a      	subs	r2, r3, #1
 800b566:	71fa      	strb	r2, [r7, #7]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1f2      	bne.n	800b552 <copy_block_nn+0x10>
}
 800b56c:	bf00      	nop
 800b56e:	bf00      	nop
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	bc80      	pop	{r7}
 800b576:	4770      	bx	lr

0800b578 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	781a      	ldrb	r2, [r3, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	4053      	eors	r3, r2
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3301      	adds	r3, #1
 800b596:	7819      	ldrb	r1, [r3, #0]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	781a      	ldrb	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	404a      	eors	r2, r1
 800b5a4:	b2d2      	uxtb	r2, r2
 800b5a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3302      	adds	r3, #2
 800b5ac:	7819      	ldrb	r1, [r3, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	781a      	ldrb	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3302      	adds	r3, #2
 800b5b8:	404a      	eors	r2, r1
 800b5ba:	b2d2      	uxtb	r2, r2
 800b5bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	3303      	adds	r3, #3
 800b5c2:	7819      	ldrb	r1, [r3, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	3303      	adds	r3, #3
 800b5c8:	781a      	ldrb	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3303      	adds	r3, #3
 800b5ce:	404a      	eors	r2, r1
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	7819      	ldrb	r1, [r3, #0]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	404a      	eors	r2, r1
 800b5e6:	b2d2      	uxtb	r2, r2
 800b5e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3305      	adds	r3, #5
 800b5ee:	7819      	ldrb	r1, [r3, #0]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	3305      	adds	r3, #5
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3305      	adds	r3, #5
 800b5fa:	404a      	eors	r2, r1
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3306      	adds	r3, #6
 800b604:	7819      	ldrb	r1, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	3306      	adds	r3, #6
 800b60a:	781a      	ldrb	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3306      	adds	r3, #6
 800b610:	404a      	eors	r2, r1
 800b612:	b2d2      	uxtb	r2, r2
 800b614:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3307      	adds	r3, #7
 800b61a:	7819      	ldrb	r1, [r3, #0]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	3307      	adds	r3, #7
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3307      	adds	r3, #7
 800b626:	404a      	eors	r2, r1
 800b628:	b2d2      	uxtb	r2, r2
 800b62a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3308      	adds	r3, #8
 800b630:	7819      	ldrb	r1, [r3, #0]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	3308      	adds	r3, #8
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3308      	adds	r3, #8
 800b63c:	404a      	eors	r2, r1
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	3309      	adds	r3, #9
 800b646:	7819      	ldrb	r1, [r3, #0]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	3309      	adds	r3, #9
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3309      	adds	r3, #9
 800b652:	404a      	eors	r2, r1
 800b654:	b2d2      	uxtb	r2, r2
 800b656:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	330a      	adds	r3, #10
 800b65c:	7819      	ldrb	r1, [r3, #0]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	330a      	adds	r3, #10
 800b662:	781a      	ldrb	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	330a      	adds	r3, #10
 800b668:	404a      	eors	r2, r1
 800b66a:	b2d2      	uxtb	r2, r2
 800b66c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	330b      	adds	r3, #11
 800b672:	7819      	ldrb	r1, [r3, #0]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	330b      	adds	r3, #11
 800b678:	781a      	ldrb	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	330b      	adds	r3, #11
 800b67e:	404a      	eors	r2, r1
 800b680:	b2d2      	uxtb	r2, r2
 800b682:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	330c      	adds	r3, #12
 800b688:	7819      	ldrb	r1, [r3, #0]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	330c      	adds	r3, #12
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	330c      	adds	r3, #12
 800b694:	404a      	eors	r2, r1
 800b696:	b2d2      	uxtb	r2, r2
 800b698:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	330d      	adds	r3, #13
 800b69e:	7819      	ldrb	r1, [r3, #0]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	330d      	adds	r3, #13
 800b6a4:	781a      	ldrb	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	330d      	adds	r3, #13
 800b6aa:	404a      	eors	r2, r1
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	330e      	adds	r3, #14
 800b6b4:	7819      	ldrb	r1, [r3, #0]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	330e      	adds	r3, #14
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	330e      	adds	r3, #14
 800b6c0:	404a      	eors	r2, r1
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	330f      	adds	r3, #15
 800b6ca:	7819      	ldrb	r1, [r3, #0]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	330f      	adds	r3, #15
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	330f      	adds	r3, #15
 800b6d6:	404a      	eors	r2, r1
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	701a      	strb	r2, [r3, #0]
#endif
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bc80      	pop	{r7}
 800b6e4:	4770      	bx	lr

0800b6e6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	60b9      	str	r1, [r7, #8]
 800b6f0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	781a      	ldrb	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	4053      	eors	r3, r2
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	3301      	adds	r3, #1
 800b706:	7819      	ldrb	r1, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3301      	adds	r3, #1
 800b70c:	781a      	ldrb	r2, [r3, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3301      	adds	r3, #1
 800b712:	404a      	eors	r2, r1
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	3302      	adds	r3, #2
 800b71c:	7819      	ldrb	r1, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3302      	adds	r3, #2
 800b722:	781a      	ldrb	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3302      	adds	r3, #2
 800b728:	404a      	eors	r2, r1
 800b72a:	b2d2      	uxtb	r2, r2
 800b72c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	3303      	adds	r3, #3
 800b732:	7819      	ldrb	r1, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3303      	adds	r3, #3
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3303      	adds	r3, #3
 800b73e:	404a      	eors	r2, r1
 800b740:	b2d2      	uxtb	r2, r2
 800b742:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	3304      	adds	r3, #4
 800b748:	7819      	ldrb	r1, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	3304      	adds	r3, #4
 800b74e:	781a      	ldrb	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3304      	adds	r3, #4
 800b754:	404a      	eors	r2, r1
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	3305      	adds	r3, #5
 800b75e:	7819      	ldrb	r1, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3305      	adds	r3, #5
 800b764:	781a      	ldrb	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3305      	adds	r3, #5
 800b76a:	404a      	eors	r2, r1
 800b76c:	b2d2      	uxtb	r2, r2
 800b76e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3306      	adds	r3, #6
 800b774:	7819      	ldrb	r1, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3306      	adds	r3, #6
 800b77a:	781a      	ldrb	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3306      	adds	r3, #6
 800b780:	404a      	eors	r2, r1
 800b782:	b2d2      	uxtb	r2, r2
 800b784:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	3307      	adds	r3, #7
 800b78a:	7819      	ldrb	r1, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3307      	adds	r3, #7
 800b790:	781a      	ldrb	r2, [r3, #0]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3307      	adds	r3, #7
 800b796:	404a      	eors	r2, r1
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	3308      	adds	r3, #8
 800b7a0:	7819      	ldrb	r1, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	781a      	ldrb	r2, [r3, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	404a      	eors	r2, r1
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	3309      	adds	r3, #9
 800b7b6:	7819      	ldrb	r1, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3309      	adds	r3, #9
 800b7bc:	781a      	ldrb	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3309      	adds	r3, #9
 800b7c2:	404a      	eors	r2, r1
 800b7c4:	b2d2      	uxtb	r2, r2
 800b7c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	330a      	adds	r3, #10
 800b7cc:	7819      	ldrb	r1, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	330a      	adds	r3, #10
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	330a      	adds	r3, #10
 800b7d8:	404a      	eors	r2, r1
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	330b      	adds	r3, #11
 800b7e2:	7819      	ldrb	r1, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	330b      	adds	r3, #11
 800b7e8:	781a      	ldrb	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	330b      	adds	r3, #11
 800b7ee:	404a      	eors	r2, r1
 800b7f0:	b2d2      	uxtb	r2, r2
 800b7f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	330c      	adds	r3, #12
 800b7f8:	7819      	ldrb	r1, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	330c      	adds	r3, #12
 800b7fe:	781a      	ldrb	r2, [r3, #0]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	330c      	adds	r3, #12
 800b804:	404a      	eors	r2, r1
 800b806:	b2d2      	uxtb	r2, r2
 800b808:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	330d      	adds	r3, #13
 800b80e:	7819      	ldrb	r1, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	330d      	adds	r3, #13
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	330d      	adds	r3, #13
 800b81a:	404a      	eors	r2, r1
 800b81c:	b2d2      	uxtb	r2, r2
 800b81e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	330e      	adds	r3, #14
 800b824:	7819      	ldrb	r1, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	330e      	adds	r3, #14
 800b82a:	781a      	ldrb	r2, [r3, #0]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	330e      	adds	r3, #14
 800b830:	404a      	eors	r2, r1
 800b832:	b2d2      	uxtb	r2, r2
 800b834:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	330f      	adds	r3, #15
 800b83a:	7819      	ldrb	r1, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	330f      	adds	r3, #15
 800b840:	781a      	ldrb	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	330f      	adds	r3, #15
 800b846:	404a      	eors	r2, r1
 800b848:	b2d2      	uxtb	r2, r2
 800b84a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b84c:	bf00      	nop
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	bc80      	pop	{r7}
 800b854:	4770      	bx	lr

0800b856 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7ff fe88 	bl	800b578 <xor_block>
}
 800b868:	bf00      	nop
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	461a      	mov	r2, r3
 800b87e:	4b48      	ldr	r3, [pc, #288]	; (800b9a0 <shift_sub_rows+0x130>)
 800b880:	5c9a      	ldrb	r2, [r3, r2]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3304      	adds	r3, #4
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	4619      	mov	r1, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3304      	adds	r3, #4
 800b892:	4a43      	ldr	r2, [pc, #268]	; (800b9a0 <shift_sub_rows+0x130>)
 800b894:	5c52      	ldrb	r2, [r2, r1]
 800b896:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3308      	adds	r3, #8
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	4a3e      	ldr	r2, [pc, #248]	; (800b9a0 <shift_sub_rows+0x130>)
 800b8a6:	5c52      	ldrb	r2, [r2, r1]
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	330c      	adds	r3, #12
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	4a3a      	ldr	r2, [pc, #232]	; (800b9a0 <shift_sub_rows+0x130>)
 800b8b8:	5c52      	ldrb	r2, [r2, r1]
 800b8ba:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	785b      	ldrb	r3, [r3, #1]
 800b8c0:	73fb      	strb	r3, [r7, #15]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3305      	adds	r3, #5
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	4a34      	ldr	r2, [pc, #208]	; (800b9a0 <shift_sub_rows+0x130>)
 800b8d0:	5c52      	ldrb	r2, [r2, r1]
 800b8d2:	701a      	strb	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3309      	adds	r3, #9
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3305      	adds	r3, #5
 800b8e0:	4a2f      	ldr	r2, [pc, #188]	; (800b9a0 <shift_sub_rows+0x130>)
 800b8e2:	5c52      	ldrb	r2, [r2, r1]
 800b8e4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	330d      	adds	r3, #13
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3309      	adds	r3, #9
 800b8f2:	4a2b      	ldr	r2, [pc, #172]	; (800b9a0 <shift_sub_rows+0x130>)
 800b8f4:	5c52      	ldrb	r2, [r2, r1]
 800b8f6:	701a      	strb	r2, [r3, #0]
 800b8f8:	7bfa      	ldrb	r2, [r7, #15]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	330d      	adds	r3, #13
 800b8fe:	4928      	ldr	r1, [pc, #160]	; (800b9a0 <shift_sub_rows+0x130>)
 800b900:	5c8a      	ldrb	r2, [r1, r2]
 800b902:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	789b      	ldrb	r3, [r3, #2]
 800b908:	73fb      	strb	r3, [r7, #15]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	330a      	adds	r3, #10
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	4619      	mov	r1, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	3302      	adds	r3, #2
 800b916:	4a22      	ldr	r2, [pc, #136]	; (800b9a0 <shift_sub_rows+0x130>)
 800b918:	5c52      	ldrb	r2, [r2, r1]
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	7bfa      	ldrb	r2, [r7, #15]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	330a      	adds	r3, #10
 800b922:	491f      	ldr	r1, [pc, #124]	; (800b9a0 <shift_sub_rows+0x130>)
 800b924:	5c8a      	ldrb	r2, [r1, r2]
 800b926:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	799b      	ldrb	r3, [r3, #6]
 800b92c:	73fb      	strb	r3, [r7, #15]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	330e      	adds	r3, #14
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	4619      	mov	r1, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	3306      	adds	r3, #6
 800b93a:	4a19      	ldr	r2, [pc, #100]	; (800b9a0 <shift_sub_rows+0x130>)
 800b93c:	5c52      	ldrb	r2, [r2, r1]
 800b93e:	701a      	strb	r2, [r3, #0]
 800b940:	7bfa      	ldrb	r2, [r7, #15]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	330e      	adds	r3, #14
 800b946:	4916      	ldr	r1, [pc, #88]	; (800b9a0 <shift_sub_rows+0x130>)
 800b948:	5c8a      	ldrb	r2, [r1, r2]
 800b94a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7bdb      	ldrb	r3, [r3, #15]
 800b950:	73fb      	strb	r3, [r7, #15]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	330b      	adds	r3, #11
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	4619      	mov	r1, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	330f      	adds	r3, #15
 800b95e:	4a10      	ldr	r2, [pc, #64]	; (800b9a0 <shift_sub_rows+0x130>)
 800b960:	5c52      	ldrb	r2, [r2, r1]
 800b962:	701a      	strb	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3307      	adds	r3, #7
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	4619      	mov	r1, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	330b      	adds	r3, #11
 800b970:	4a0b      	ldr	r2, [pc, #44]	; (800b9a0 <shift_sub_rows+0x130>)
 800b972:	5c52      	ldrb	r2, [r2, r1]
 800b974:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	3303      	adds	r3, #3
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	4619      	mov	r1, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3307      	adds	r3, #7
 800b982:	4a07      	ldr	r2, [pc, #28]	; (800b9a0 <shift_sub_rows+0x130>)
 800b984:	5c52      	ldrb	r2, [r2, r1]
 800b986:	701a      	strb	r2, [r3, #0]
 800b988:	7bfa      	ldrb	r2, [r7, #15]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	3303      	adds	r3, #3
 800b98e:	4904      	ldr	r1, [pc, #16]	; (800b9a0 <shift_sub_rows+0x130>)
 800b990:	5c8a      	ldrb	r2, [r1, r2]
 800b992:	701a      	strb	r2, [r3, #0]
}
 800b994:	bf00      	nop
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	bc80      	pop	{r7}
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	0801e75c 	.word	0x0801e75c

0800b9a4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b9ac:	f107 0308 	add.w	r3, r7, #8
 800b9b0:	6879      	ldr	r1, [r7, #4]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7ff fd6c 	bl	800b490 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b9b8:	7a3b      	ldrb	r3, [r7, #8]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4b9a      	ldr	r3, [pc, #616]	; (800bc28 <mix_sub_columns+0x284>)
 800b9be:	5c9a      	ldrb	r2, [r3, r2]
 800b9c0:	7b7b      	ldrb	r3, [r7, #13]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4b99      	ldr	r3, [pc, #612]	; (800bc2c <mix_sub_columns+0x288>)
 800b9c6:	5c5b      	ldrb	r3, [r3, r1]
 800b9c8:	4053      	eors	r3, r2
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	7cbb      	ldrb	r3, [r7, #18]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4b97      	ldr	r3, [pc, #604]	; (800bc30 <mix_sub_columns+0x28c>)
 800b9d2:	5c5b      	ldrb	r3, [r3, r1]
 800b9d4:	4053      	eors	r3, r2
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4b94      	ldr	r3, [pc, #592]	; (800bc30 <mix_sub_columns+0x28c>)
 800b9de:	5c5b      	ldrb	r3, [r3, r1]
 800b9e0:	4053      	eors	r3, r2
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b9e8:	7a3b      	ldrb	r3, [r7, #8]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	4b90      	ldr	r3, [pc, #576]	; (800bc30 <mix_sub_columns+0x28c>)
 800b9ee:	5c9a      	ldrb	r2, [r3, r2]
 800b9f0:	7b7b      	ldrb	r3, [r7, #13]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4b8c      	ldr	r3, [pc, #560]	; (800bc28 <mix_sub_columns+0x284>)
 800b9f6:	5c5b      	ldrb	r3, [r3, r1]
 800b9f8:	4053      	eors	r3, r2
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	7cbb      	ldrb	r3, [r7, #18]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4b8a      	ldr	r3, [pc, #552]	; (800bc2c <mix_sub_columns+0x288>)
 800ba02:	5c5b      	ldrb	r3, [r3, r1]
 800ba04:	4053      	eors	r3, r2
 800ba06:	b2d9      	uxtb	r1, r3
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	4b88      	ldr	r3, [pc, #544]	; (800bc30 <mix_sub_columns+0x28c>)
 800ba0e:	5c9a      	ldrb	r2, [r3, r2]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3301      	adds	r3, #1
 800ba14:	404a      	eors	r2, r1
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ba1a:	7a3b      	ldrb	r3, [r7, #8]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4b84      	ldr	r3, [pc, #528]	; (800bc30 <mix_sub_columns+0x28c>)
 800ba20:	5c9a      	ldrb	r2, [r3, r2]
 800ba22:	7b7b      	ldrb	r3, [r7, #13]
 800ba24:	4619      	mov	r1, r3
 800ba26:	4b82      	ldr	r3, [pc, #520]	; (800bc30 <mix_sub_columns+0x28c>)
 800ba28:	5c5b      	ldrb	r3, [r3, r1]
 800ba2a:	4053      	eors	r3, r2
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	7cbb      	ldrb	r3, [r7, #18]
 800ba30:	4619      	mov	r1, r3
 800ba32:	4b7d      	ldr	r3, [pc, #500]	; (800bc28 <mix_sub_columns+0x284>)
 800ba34:	5c5b      	ldrb	r3, [r3, r1]
 800ba36:	4053      	eors	r3, r2
 800ba38:	b2d9      	uxtb	r1, r3
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	4b7b      	ldr	r3, [pc, #492]	; (800bc2c <mix_sub_columns+0x288>)
 800ba40:	5c9a      	ldrb	r2, [r3, r2]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	3302      	adds	r3, #2
 800ba46:	404a      	eors	r2, r1
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ba4c:	7a3b      	ldrb	r3, [r7, #8]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4b76      	ldr	r3, [pc, #472]	; (800bc2c <mix_sub_columns+0x288>)
 800ba52:	5c9a      	ldrb	r2, [r3, r2]
 800ba54:	7b7b      	ldrb	r3, [r7, #13]
 800ba56:	4619      	mov	r1, r3
 800ba58:	4b75      	ldr	r3, [pc, #468]	; (800bc30 <mix_sub_columns+0x28c>)
 800ba5a:	5c5b      	ldrb	r3, [r3, r1]
 800ba5c:	4053      	eors	r3, r2
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	7cbb      	ldrb	r3, [r7, #18]
 800ba62:	4619      	mov	r1, r3
 800ba64:	4b72      	ldr	r3, [pc, #456]	; (800bc30 <mix_sub_columns+0x28c>)
 800ba66:	5c5b      	ldrb	r3, [r3, r1]
 800ba68:	4053      	eors	r3, r2
 800ba6a:	b2d9      	uxtb	r1, r3
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	4b6d      	ldr	r3, [pc, #436]	; (800bc28 <mix_sub_columns+0x284>)
 800ba72:	5c9a      	ldrb	r2, [r3, r2]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3303      	adds	r3, #3
 800ba78:	404a      	eors	r2, r1
 800ba7a:	b2d2      	uxtb	r2, r2
 800ba7c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ba7e:	7b3b      	ldrb	r3, [r7, #12]
 800ba80:	461a      	mov	r2, r3
 800ba82:	4b69      	ldr	r3, [pc, #420]	; (800bc28 <mix_sub_columns+0x284>)
 800ba84:	5c9a      	ldrb	r2, [r3, r2]
 800ba86:	7c7b      	ldrb	r3, [r7, #17]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4b68      	ldr	r3, [pc, #416]	; (800bc2c <mix_sub_columns+0x288>)
 800ba8c:	5c5b      	ldrb	r3, [r3, r1]
 800ba8e:	4053      	eors	r3, r2
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	7dbb      	ldrb	r3, [r7, #22]
 800ba94:	4619      	mov	r1, r3
 800ba96:	4b66      	ldr	r3, [pc, #408]	; (800bc30 <mix_sub_columns+0x28c>)
 800ba98:	5c5b      	ldrb	r3, [r3, r1]
 800ba9a:	4053      	eors	r3, r2
 800ba9c:	b2d9      	uxtb	r1, r3
 800ba9e:	7afb      	ldrb	r3, [r7, #11]
 800baa0:	461a      	mov	r2, r3
 800baa2:	4b63      	ldr	r3, [pc, #396]	; (800bc30 <mix_sub_columns+0x28c>)
 800baa4:	5c9a      	ldrb	r2, [r3, r2]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3304      	adds	r3, #4
 800baaa:	404a      	eors	r2, r1
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800bab0:	7b3b      	ldrb	r3, [r7, #12]
 800bab2:	461a      	mov	r2, r3
 800bab4:	4b5e      	ldr	r3, [pc, #376]	; (800bc30 <mix_sub_columns+0x28c>)
 800bab6:	5c9a      	ldrb	r2, [r3, r2]
 800bab8:	7c7b      	ldrb	r3, [r7, #17]
 800baba:	4619      	mov	r1, r3
 800babc:	4b5a      	ldr	r3, [pc, #360]	; (800bc28 <mix_sub_columns+0x284>)
 800babe:	5c5b      	ldrb	r3, [r3, r1]
 800bac0:	4053      	eors	r3, r2
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	7dbb      	ldrb	r3, [r7, #22]
 800bac6:	4619      	mov	r1, r3
 800bac8:	4b58      	ldr	r3, [pc, #352]	; (800bc2c <mix_sub_columns+0x288>)
 800baca:	5c5b      	ldrb	r3, [r3, r1]
 800bacc:	4053      	eors	r3, r2
 800bace:	b2d9      	uxtb	r1, r3
 800bad0:	7afb      	ldrb	r3, [r7, #11]
 800bad2:	461a      	mov	r2, r3
 800bad4:	4b56      	ldr	r3, [pc, #344]	; (800bc30 <mix_sub_columns+0x28c>)
 800bad6:	5c9a      	ldrb	r2, [r3, r2]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3305      	adds	r3, #5
 800badc:	404a      	eors	r2, r1
 800bade:	b2d2      	uxtb	r2, r2
 800bae0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800bae2:	7b3b      	ldrb	r3, [r7, #12]
 800bae4:	461a      	mov	r2, r3
 800bae6:	4b52      	ldr	r3, [pc, #328]	; (800bc30 <mix_sub_columns+0x28c>)
 800bae8:	5c9a      	ldrb	r2, [r3, r2]
 800baea:	7c7b      	ldrb	r3, [r7, #17]
 800baec:	4619      	mov	r1, r3
 800baee:	4b50      	ldr	r3, [pc, #320]	; (800bc30 <mix_sub_columns+0x28c>)
 800baf0:	5c5b      	ldrb	r3, [r3, r1]
 800baf2:	4053      	eors	r3, r2
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	7dbb      	ldrb	r3, [r7, #22]
 800baf8:	4619      	mov	r1, r3
 800bafa:	4b4b      	ldr	r3, [pc, #300]	; (800bc28 <mix_sub_columns+0x284>)
 800bafc:	5c5b      	ldrb	r3, [r3, r1]
 800bafe:	4053      	eors	r3, r2
 800bb00:	b2d9      	uxtb	r1, r3
 800bb02:	7afb      	ldrb	r3, [r7, #11]
 800bb04:	461a      	mov	r2, r3
 800bb06:	4b49      	ldr	r3, [pc, #292]	; (800bc2c <mix_sub_columns+0x288>)
 800bb08:	5c9a      	ldrb	r2, [r3, r2]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3306      	adds	r3, #6
 800bb0e:	404a      	eors	r2, r1
 800bb10:	b2d2      	uxtb	r2, r2
 800bb12:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800bb14:	7b3b      	ldrb	r3, [r7, #12]
 800bb16:	461a      	mov	r2, r3
 800bb18:	4b44      	ldr	r3, [pc, #272]	; (800bc2c <mix_sub_columns+0x288>)
 800bb1a:	5c9a      	ldrb	r2, [r3, r2]
 800bb1c:	7c7b      	ldrb	r3, [r7, #17]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	4b43      	ldr	r3, [pc, #268]	; (800bc30 <mix_sub_columns+0x28c>)
 800bb22:	5c5b      	ldrb	r3, [r3, r1]
 800bb24:	4053      	eors	r3, r2
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	7dbb      	ldrb	r3, [r7, #22]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4b40      	ldr	r3, [pc, #256]	; (800bc30 <mix_sub_columns+0x28c>)
 800bb2e:	5c5b      	ldrb	r3, [r3, r1]
 800bb30:	4053      	eors	r3, r2
 800bb32:	b2d9      	uxtb	r1, r3
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	461a      	mov	r2, r3
 800bb38:	4b3b      	ldr	r3, [pc, #236]	; (800bc28 <mix_sub_columns+0x284>)
 800bb3a:	5c9a      	ldrb	r2, [r3, r2]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3307      	adds	r3, #7
 800bb40:	404a      	eors	r2, r1
 800bb42:	b2d2      	uxtb	r2, r2
 800bb44:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800bb46:	7c3b      	ldrb	r3, [r7, #16]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	4b37      	ldr	r3, [pc, #220]	; (800bc28 <mix_sub_columns+0x284>)
 800bb4c:	5c9a      	ldrb	r2, [r3, r2]
 800bb4e:	7d7b      	ldrb	r3, [r7, #21]
 800bb50:	4619      	mov	r1, r3
 800bb52:	4b36      	ldr	r3, [pc, #216]	; (800bc2c <mix_sub_columns+0x288>)
 800bb54:	5c5b      	ldrb	r3, [r3, r1]
 800bb56:	4053      	eors	r3, r2
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	7abb      	ldrb	r3, [r7, #10]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4b34      	ldr	r3, [pc, #208]	; (800bc30 <mix_sub_columns+0x28c>)
 800bb60:	5c5b      	ldrb	r3, [r3, r1]
 800bb62:	4053      	eors	r3, r2
 800bb64:	b2d9      	uxtb	r1, r3
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4b31      	ldr	r3, [pc, #196]	; (800bc30 <mix_sub_columns+0x28c>)
 800bb6c:	5c9a      	ldrb	r2, [r3, r2]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	3308      	adds	r3, #8
 800bb72:	404a      	eors	r2, r1
 800bb74:	b2d2      	uxtb	r2, r2
 800bb76:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800bb78:	7c3b      	ldrb	r3, [r7, #16]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	4b2c      	ldr	r3, [pc, #176]	; (800bc30 <mix_sub_columns+0x28c>)
 800bb7e:	5c9a      	ldrb	r2, [r3, r2]
 800bb80:	7d7b      	ldrb	r3, [r7, #21]
 800bb82:	4619      	mov	r1, r3
 800bb84:	4b28      	ldr	r3, [pc, #160]	; (800bc28 <mix_sub_columns+0x284>)
 800bb86:	5c5b      	ldrb	r3, [r3, r1]
 800bb88:	4053      	eors	r3, r2
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	7abb      	ldrb	r3, [r7, #10]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4b26      	ldr	r3, [pc, #152]	; (800bc2c <mix_sub_columns+0x288>)
 800bb92:	5c5b      	ldrb	r3, [r3, r1]
 800bb94:	4053      	eors	r3, r2
 800bb96:	b2d9      	uxtb	r1, r3
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4b24      	ldr	r3, [pc, #144]	; (800bc30 <mix_sub_columns+0x28c>)
 800bb9e:	5c9a      	ldrb	r2, [r3, r2]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	3309      	adds	r3, #9
 800bba4:	404a      	eors	r2, r1
 800bba6:	b2d2      	uxtb	r2, r2
 800bba8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800bbaa:	7c3b      	ldrb	r3, [r7, #16]
 800bbac:	461a      	mov	r2, r3
 800bbae:	4b20      	ldr	r3, [pc, #128]	; (800bc30 <mix_sub_columns+0x28c>)
 800bbb0:	5c9a      	ldrb	r2, [r3, r2]
 800bbb2:	7d7b      	ldrb	r3, [r7, #21]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4b1e      	ldr	r3, [pc, #120]	; (800bc30 <mix_sub_columns+0x28c>)
 800bbb8:	5c5b      	ldrb	r3, [r3, r1]
 800bbba:	4053      	eors	r3, r2
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	7abb      	ldrb	r3, [r7, #10]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <mix_sub_columns+0x284>)
 800bbc4:	5c5b      	ldrb	r3, [r3, r1]
 800bbc6:	4053      	eors	r3, r2
 800bbc8:	b2d9      	uxtb	r1, r3
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	4b17      	ldr	r3, [pc, #92]	; (800bc2c <mix_sub_columns+0x288>)
 800bbd0:	5c9a      	ldrb	r2, [r3, r2]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	330a      	adds	r3, #10
 800bbd6:	404a      	eors	r2, r1
 800bbd8:	b2d2      	uxtb	r2, r2
 800bbda:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800bbdc:	7c3b      	ldrb	r3, [r7, #16]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4b12      	ldr	r3, [pc, #72]	; (800bc2c <mix_sub_columns+0x288>)
 800bbe2:	5c9a      	ldrb	r2, [r3, r2]
 800bbe4:	7d7b      	ldrb	r3, [r7, #21]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	4b11      	ldr	r3, [pc, #68]	; (800bc30 <mix_sub_columns+0x28c>)
 800bbea:	5c5b      	ldrb	r3, [r3, r1]
 800bbec:	4053      	eors	r3, r2
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	7abb      	ldrb	r3, [r7, #10]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <mix_sub_columns+0x28c>)
 800bbf6:	5c5b      	ldrb	r3, [r3, r1]
 800bbf8:	4053      	eors	r3, r2
 800bbfa:	b2d9      	uxtb	r1, r3
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <mix_sub_columns+0x284>)
 800bc02:	5c9a      	ldrb	r2, [r3, r2]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	330b      	adds	r3, #11
 800bc08:	404a      	eors	r2, r1
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800bc0e:	7d3b      	ldrb	r3, [r7, #20]
 800bc10:	461a      	mov	r2, r3
 800bc12:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <mix_sub_columns+0x284>)
 800bc14:	5c9a      	ldrb	r2, [r3, r2]
 800bc16:	7a7b      	ldrb	r3, [r7, #9]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <mix_sub_columns+0x288>)
 800bc1c:	5c5b      	ldrb	r3, [r3, r1]
 800bc1e:	4053      	eors	r3, r2
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	4619      	mov	r1, r3
 800bc26:	e005      	b.n	800bc34 <mix_sub_columns+0x290>
 800bc28:	0801e85c 	.word	0x0801e85c
 800bc2c:	0801e95c 	.word	0x0801e95c
 800bc30:	0801e75c 	.word	0x0801e75c
 800bc34:	4b2d      	ldr	r3, [pc, #180]	; (800bcec <mix_sub_columns+0x348>)
 800bc36:	5c5b      	ldrb	r3, [r3, r1]
 800bc38:	4053      	eors	r3, r2
 800bc3a:	b2d9      	uxtb	r1, r3
 800bc3c:	7cfb      	ldrb	r3, [r7, #19]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	4b2a      	ldr	r3, [pc, #168]	; (800bcec <mix_sub_columns+0x348>)
 800bc42:	5c9a      	ldrb	r2, [r3, r2]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	330c      	adds	r3, #12
 800bc48:	404a      	eors	r2, r1
 800bc4a:	b2d2      	uxtb	r2, r2
 800bc4c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800bc4e:	7d3b      	ldrb	r3, [r7, #20]
 800bc50:	461a      	mov	r2, r3
 800bc52:	4b26      	ldr	r3, [pc, #152]	; (800bcec <mix_sub_columns+0x348>)
 800bc54:	5c9a      	ldrb	r2, [r3, r2]
 800bc56:	7a7b      	ldrb	r3, [r7, #9]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4b25      	ldr	r3, [pc, #148]	; (800bcf0 <mix_sub_columns+0x34c>)
 800bc5c:	5c5b      	ldrb	r3, [r3, r1]
 800bc5e:	4053      	eors	r3, r2
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	7bbb      	ldrb	r3, [r7, #14]
 800bc64:	4619      	mov	r1, r3
 800bc66:	4b23      	ldr	r3, [pc, #140]	; (800bcf4 <mix_sub_columns+0x350>)
 800bc68:	5c5b      	ldrb	r3, [r3, r1]
 800bc6a:	4053      	eors	r3, r2
 800bc6c:	b2d9      	uxtb	r1, r3
 800bc6e:	7cfb      	ldrb	r3, [r7, #19]
 800bc70:	461a      	mov	r2, r3
 800bc72:	4b1e      	ldr	r3, [pc, #120]	; (800bcec <mix_sub_columns+0x348>)
 800bc74:	5c9a      	ldrb	r2, [r3, r2]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	330d      	adds	r3, #13
 800bc7a:	404a      	eors	r2, r1
 800bc7c:	b2d2      	uxtb	r2, r2
 800bc7e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800bc80:	7d3b      	ldrb	r3, [r7, #20]
 800bc82:	461a      	mov	r2, r3
 800bc84:	4b19      	ldr	r3, [pc, #100]	; (800bcec <mix_sub_columns+0x348>)
 800bc86:	5c9a      	ldrb	r2, [r3, r2]
 800bc88:	7a7b      	ldrb	r3, [r7, #9]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4b17      	ldr	r3, [pc, #92]	; (800bcec <mix_sub_columns+0x348>)
 800bc8e:	5c5b      	ldrb	r3, [r3, r1]
 800bc90:	4053      	eors	r3, r2
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	4619      	mov	r1, r3
 800bc98:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <mix_sub_columns+0x34c>)
 800bc9a:	5c5b      	ldrb	r3, [r3, r1]
 800bc9c:	4053      	eors	r3, r2
 800bc9e:	b2d9      	uxtb	r1, r3
 800bca0:	7cfb      	ldrb	r3, [r7, #19]
 800bca2:	461a      	mov	r2, r3
 800bca4:	4b13      	ldr	r3, [pc, #76]	; (800bcf4 <mix_sub_columns+0x350>)
 800bca6:	5c9a      	ldrb	r2, [r3, r2]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	330e      	adds	r3, #14
 800bcac:	404a      	eors	r2, r1
 800bcae:	b2d2      	uxtb	r2, r2
 800bcb0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bcb2:	7d3b      	ldrb	r3, [r7, #20]
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <mix_sub_columns+0x350>)
 800bcb8:	5c9a      	ldrb	r2, [r3, r2]
 800bcba:	7a7b      	ldrb	r3, [r7, #9]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <mix_sub_columns+0x348>)
 800bcc0:	5c5b      	ldrb	r3, [r3, r1]
 800bcc2:	4053      	eors	r3, r2
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4b08      	ldr	r3, [pc, #32]	; (800bcec <mix_sub_columns+0x348>)
 800bccc:	5c5b      	ldrb	r3, [r3, r1]
 800bcce:	4053      	eors	r3, r2
 800bcd0:	b2d9      	uxtb	r1, r3
 800bcd2:	7cfb      	ldrb	r3, [r7, #19]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <mix_sub_columns+0x34c>)
 800bcd8:	5c9a      	ldrb	r2, [r3, r2]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	330f      	adds	r3, #15
 800bcde:	404a      	eors	r2, r1
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	701a      	strb	r2, [r3, #0]
  }
 800bce4:	bf00      	nop
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	0801e75c 	.word	0x0801e75c
 800bcf0:	0801e85c 	.word	0x0801e85c
 800bcf4:	0801e95c 	.word	0x0801e95c

0800bcf8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	460b      	mov	r3, r1
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bd06:	7afb      	ldrb	r3, [r7, #11]
 800bd08:	3b10      	subs	r3, #16
 800bd0a:	2b10      	cmp	r3, #16
 800bd0c:	bf8c      	ite	hi
 800bd0e:	2201      	movhi	r2, #1
 800bd10:	2200      	movls	r2, #0
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	2a00      	cmp	r2, #0
 800bd16:	d10b      	bne.n	800bd30 <lorawan_aes_set_key+0x38>
 800bd18:	4a64      	ldr	r2, [pc, #400]	; (800beac <lorawan_aes_set_key+0x1b4>)
 800bd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	bf14      	ite	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	2300      	moveq	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d105      	bne.n	800bd3c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800bd38:	23ff      	movs	r3, #255	; 0xff
 800bd3a:	e0b2      	b.n	800bea2 <lorawan_aes_set_key+0x1aa>
        break;
 800bd3c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	7afa      	ldrb	r2, [r7, #11]
 800bd42:	68f9      	ldr	r1, [r7, #12]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff fbfc 	bl	800b542 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800bd4a:	7afb      	ldrb	r3, [r7, #11]
 800bd4c:	331c      	adds	r3, #28
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800bd54:	7c7b      	ldrb	r3, [r7, #17]
 800bd56:	091b      	lsrs	r3, r3, #4
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bd64:	7afb      	ldrb	r3, [r7, #11]
 800bd66:	75fb      	strb	r3, [r7, #23]
 800bd68:	2301      	movs	r3, #1
 800bd6a:	75bb      	strb	r3, [r7, #22]
 800bd6c:	e093      	b.n	800be96 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
 800bd70:	3b04      	subs	r3, #4
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	5cd3      	ldrb	r3, [r2, r3]
 800bd76:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	3b03      	subs	r3, #3
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	5cd3      	ldrb	r3, [r2, r3]
 800bd80:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800bd82:	7dfb      	ldrb	r3, [r7, #23]
 800bd84:	3b02      	subs	r3, #2
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	5cd3      	ldrb	r3, [r2, r3]
 800bd8a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	5cd3      	ldrb	r3, [r2, r3]
 800bd94:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	7afa      	ldrb	r2, [r7, #11]
 800bd9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd9e:	fb01 f202 	mul.w	r2, r1, r2
 800bda2:	1a9b      	subs	r3, r3, r2
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d127      	bne.n	800bdfa <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800bdaa:	7d7b      	ldrb	r3, [r7, #21]
 800bdac:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800bdae:	7d3b      	ldrb	r3, [r7, #20]
 800bdb0:	4a3f      	ldr	r2, [pc, #252]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800bdb2:	5cd2      	ldrb	r2, [r2, r3]
 800bdb4:	7dbb      	ldrb	r3, [r7, #22]
 800bdb6:	4053      	eors	r3, r2
 800bdb8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800bdba:	7cfb      	ldrb	r3, [r7, #19]
 800bdbc:	4a3c      	ldr	r2, [pc, #240]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800bdbe:	5cd3      	ldrb	r3, [r2, r3]
 800bdc0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800bdc2:	7cbb      	ldrb	r3, [r7, #18]
 800bdc4:	4a3a      	ldr	r2, [pc, #232]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800bdc6:	5cd3      	ldrb	r3, [r2, r3]
 800bdc8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800bdca:	7c3b      	ldrb	r3, [r7, #16]
 800bdcc:	4a38      	ldr	r2, [pc, #224]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800bdce:	5cd3      	ldrb	r3, [r2, r3]
 800bdd0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800bdd2:	7dbb      	ldrb	r3, [r7, #22]
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	b25a      	sxtb	r2, r3
 800bdd8:	7dbb      	ldrb	r3, [r7, #22]
 800bdda:	09db      	lsrs	r3, r3, #7
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	4619      	mov	r1, r3
 800bde0:	0049      	lsls	r1, r1, #1
 800bde2:	440b      	add	r3, r1
 800bde4:	4619      	mov	r1, r3
 800bde6:	00c8      	lsls	r0, r1, #3
 800bde8:	4619      	mov	r1, r3
 800bdea:	4603      	mov	r3, r0
 800bdec:	440b      	add	r3, r1
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	b25b      	sxtb	r3, r3
 800bdf2:	4053      	eors	r3, r2
 800bdf4:	b25b      	sxtb	r3, r3
 800bdf6:	75bb      	strb	r3, [r7, #22]
 800bdf8:	e01c      	b.n	800be34 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800bdfa:	7afb      	ldrb	r3, [r7, #11]
 800bdfc:	2b18      	cmp	r3, #24
 800bdfe:	d919      	bls.n	800be34 <lorawan_aes_set_key+0x13c>
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	7afa      	ldrb	r2, [r7, #11]
 800be04:	fbb3 f1f2 	udiv	r1, r3, r2
 800be08:	fb01 f202 	mul.w	r2, r1, r2
 800be0c:	1a9b      	subs	r3, r3, r2
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b10      	cmp	r3, #16
 800be12:	d10f      	bne.n	800be34 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800be14:	7d7b      	ldrb	r3, [r7, #21]
 800be16:	4a26      	ldr	r2, [pc, #152]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800be18:	5cd3      	ldrb	r3, [r2, r3]
 800be1a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800be1c:	7d3b      	ldrb	r3, [r7, #20]
 800be1e:	4a24      	ldr	r2, [pc, #144]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800be20:	5cd3      	ldrb	r3, [r2, r3]
 800be22:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800be24:	7cfb      	ldrb	r3, [r7, #19]
 800be26:	4a22      	ldr	r2, [pc, #136]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800be28:	5cd3      	ldrb	r3, [r2, r3]
 800be2a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800be2c:	7cbb      	ldrb	r3, [r7, #18]
 800be2e:	4a20      	ldr	r2, [pc, #128]	; (800beb0 <lorawan_aes_set_key+0x1b8>)
 800be30:	5cd3      	ldrb	r3, [r2, r3]
 800be32:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800be34:	7dfa      	ldrb	r2, [r7, #23]
 800be36:	7afb      	ldrb	r3, [r7, #11]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800be3c:	7c3b      	ldrb	r3, [r7, #16]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	5cd1      	ldrb	r1, [r2, r3]
 800be42:	7dfb      	ldrb	r3, [r7, #23]
 800be44:	7d7a      	ldrb	r2, [r7, #21]
 800be46:	404a      	eors	r2, r1
 800be48:	b2d1      	uxtb	r1, r2
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800be4e:	7c3b      	ldrb	r3, [r7, #16]
 800be50:	3301      	adds	r3, #1
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	5cd1      	ldrb	r1, [r2, r3]
 800be56:	7dfb      	ldrb	r3, [r7, #23]
 800be58:	3301      	adds	r3, #1
 800be5a:	7d3a      	ldrb	r2, [r7, #20]
 800be5c:	404a      	eors	r2, r1
 800be5e:	b2d1      	uxtb	r1, r2
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800be64:	7c3b      	ldrb	r3, [r7, #16]
 800be66:	3302      	adds	r3, #2
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	5cd1      	ldrb	r1, [r2, r3]
 800be6c:	7dfb      	ldrb	r3, [r7, #23]
 800be6e:	3302      	adds	r3, #2
 800be70:	7cfa      	ldrb	r2, [r7, #19]
 800be72:	404a      	eors	r2, r1
 800be74:	b2d1      	uxtb	r1, r2
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800be7a:	7c3b      	ldrb	r3, [r7, #16]
 800be7c:	3303      	adds	r3, #3
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	5cd1      	ldrb	r1, [r2, r3]
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	3303      	adds	r3, #3
 800be86:	7cba      	ldrb	r2, [r7, #18]
 800be88:	404a      	eors	r2, r1
 800be8a:	b2d1      	uxtb	r1, r2
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	3304      	adds	r3, #4
 800be94:	75fb      	strb	r3, [r7, #23]
 800be96:	7dfa      	ldrb	r2, [r7, #23]
 800be98:	7c7b      	ldrb	r3, [r7, #17]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	f4ff af67 	bcc.w	800bd6e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	00010101 	.word	0x00010101
 800beb0:	0801e75c 	.word	0x0801e75c

0800beb4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d038      	beq.n	800bf3c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	f107 0314 	add.w	r3, r7, #20
 800bed0:	68f9      	ldr	r1, [r7, #12]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff fc07 	bl	800b6e6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bed8:	2301      	movs	r3, #1
 800beda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bede:	e014      	b.n	800bf0a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bee0:	f107 0314 	add.w	r3, r7, #20
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff fd5d 	bl	800b9a4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bef0:	0112      	lsls	r2, r2, #4
 800bef2:	441a      	add	r2, r3
 800bef4:	f107 0314 	add.w	r3, r7, #20
 800bef8:	4611      	mov	r1, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff fcab 	bl	800b856 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bf00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf04:	3301      	adds	r3, #1
 800bf06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bf10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d3e3      	bcc.n	800bee0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bf18:	f107 0314 	add.w	r3, r7, #20
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff fca7 	bl	800b870 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bf28:	0112      	lsls	r2, r2, #4
 800bf2a:	441a      	add	r2, r3
 800bf2c:	f107 0314 	add.w	r3, r7, #20
 800bf30:	4619      	mov	r1, r3
 800bf32:	68b8      	ldr	r0, [r7, #8]
 800bf34:	f7ff fbd7 	bl	800b6e6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e000      	b.n	800bf3e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bf3c:	23ff      	movs	r3, #255	; 0xff
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3728      	adds	r7, #40	; 0x28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800bf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4a:	b0a1      	sub	sp, #132	; 0x84
 800bf4c:	af12      	add	r7, sp, #72	; 0x48
 800bf4e:	4603      	mov	r3, r0
 800bf50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800bf54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bf58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 fa12 	bl	800c388 <SecureElementGetKeyByID>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d174      	bne.n	800c054 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bf70:	e06c      	b.n	800c04c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800bf72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bf76:	4939      	ldr	r1, [pc, #228]	; (800c05c <PrintKey+0x114>)
 800bf78:	4613      	mov	r3, r2
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	4413      	add	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	440b      	add	r3, r1
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d15a      	bne.n	800c042 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800bf8c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bf90:	4932      	ldr	r1, [pc, #200]	; (800c05c <PrintKey+0x114>)
 800bf92:	4613      	mov	r3, r2
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4413      	add	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	440b      	add	r3, r1
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	6819      	ldr	r1, [r3, #0]
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	785b      	ldrb	r3, [r3, #1]
 800bfa4:	461d      	mov	r5, r3
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	789b      	ldrb	r3, [r3, #2]
 800bfaa:	461e      	mov	r6, r3
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	78db      	ldrb	r3, [r3, #3]
 800bfb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	795b      	ldrb	r3, [r3, #5]
 800bfbc:	623b      	str	r3, [r7, #32]
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	799b      	ldrb	r3, [r3, #6]
 800bfc2:	61fb      	str	r3, [r7, #28]
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	79db      	ldrb	r3, [r3, #7]
 800bfc8:	61bb      	str	r3, [r7, #24]
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	7a1b      	ldrb	r3, [r3, #8]
 800bfce:	617b      	str	r3, [r7, #20]
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	7a5b      	ldrb	r3, [r3, #9]
 800bfd4:	613b      	str	r3, [r7, #16]
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	7a9b      	ldrb	r3, [r3, #10]
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	7adb      	ldrb	r3, [r3, #11]
 800bfe0:	60bb      	str	r3, [r7, #8]
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	7b1b      	ldrb	r3, [r3, #12]
 800bfe6:	607b      	str	r3, [r7, #4]
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	7b5b      	ldrb	r3, [r3, #13]
 800bfec:	461c      	mov	r4, r3
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	7b9b      	ldrb	r3, [r3, #14]
 800bff2:	4618      	mov	r0, r3
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	7bdb      	ldrb	r3, [r3, #15]
 800bff8:	461a      	mov	r2, r3
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	7c1b      	ldrb	r3, [r3, #16]
 800bffe:	9310      	str	r3, [sp, #64]	; 0x40
 800c000:	920f      	str	r2, [sp, #60]	; 0x3c
 800c002:	900e      	str	r0, [sp, #56]	; 0x38
 800c004:	940d      	str	r4, [sp, #52]	; 0x34
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	920c      	str	r2, [sp, #48]	; 0x30
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	920a      	str	r2, [sp, #40]	; 0x28
 800c012:	693a      	ldr	r2, [r7, #16]
 800c014:	9209      	str	r2, [sp, #36]	; 0x24
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	9208      	str	r2, [sp, #32]
 800c01a:	69ba      	ldr	r2, [r7, #24]
 800c01c:	9207      	str	r2, [sp, #28]
 800c01e:	69fa      	ldr	r2, [r7, #28]
 800c020:	9206      	str	r2, [sp, #24]
 800c022:	6a3a      	ldr	r2, [r7, #32]
 800c024:	9205      	str	r2, [sp, #20]
 800c026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c028:	9204      	str	r2, [sp, #16]
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	9303      	str	r3, [sp, #12]
 800c02e:	9602      	str	r6, [sp, #8]
 800c030:	9501      	str	r5, [sp, #4]
 800c032:	9100      	str	r1, [sp, #0]
 800c034:	4b0a      	ldr	r3, [pc, #40]	; (800c060 <PrintKey+0x118>)
 800c036:	2200      	movs	r2, #0
 800c038:	2100      	movs	r1, #0
 800c03a:	2002      	movs	r0, #2
 800c03c:	f011 fb72 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
 800c040:	e008      	b.n	800c054 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c046:	3301      	adds	r3, #1
 800c048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c04c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c050:	2b0a      	cmp	r3, #10
 800c052:	d98e      	bls.n	800bf72 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800c054:	373c      	adds	r7, #60	; 0x3c
 800c056:	46bd      	mov	sp, r7
 800c058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05a:	bf00      	nop
 800c05c:	0801ea5c 	.word	0x0801ea5c
 800c060:	0801e2c8 	.word	0x0801e2c8

0800c064 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800c064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c066:	b091      	sub	sp, #68	; 0x44
 800c068:	af08      	add	r7, sp, #32
 800c06a:	4603      	mov	r3, r0
 800c06c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800c072:	f107 0310 	add.w	r3, r7, #16
 800c076:	4618      	mov	r0, r3
 800c078:	f000 fbda 	bl	800c830 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800c07c:	7c3b      	ldrb	r3, [r7, #16]
 800c07e:	7c7a      	ldrb	r2, [r7, #17]
 800c080:	7cb9      	ldrb	r1, [r7, #18]
 800c082:	7cf8      	ldrb	r0, [r7, #19]
 800c084:	7d3c      	ldrb	r4, [r7, #20]
 800c086:	7d7d      	ldrb	r5, [r7, #21]
 800c088:	7dbe      	ldrb	r6, [r7, #22]
 800c08a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800c08e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c092:	9606      	str	r6, [sp, #24]
 800c094:	9505      	str	r5, [sp, #20]
 800c096:	9404      	str	r4, [sp, #16]
 800c098:	9003      	str	r0, [sp, #12]
 800c09a:	9102      	str	r1, [sp, #8]
 800c09c:	9201      	str	r2, [sp, #4]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	4b24      	ldr	r3, [pc, #144]	; (800c134 <PrintIds+0xd0>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	2002      	movs	r0, #2
 800c0a8:	f011 fb3c 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800c0ac:	f107 0318 	add.w	r3, r7, #24
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fbed 	bl	800c890 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800c0b6:	7e3b      	ldrb	r3, [r7, #24]
 800c0b8:	7e7a      	ldrb	r2, [r7, #25]
 800c0ba:	7eb9      	ldrb	r1, [r7, #26]
 800c0bc:	7ef8      	ldrb	r0, [r7, #27]
 800c0be:	7f3c      	ldrb	r4, [r7, #28]
 800c0c0:	7f7d      	ldrb	r5, [r7, #29]
 800c0c2:	7fbe      	ldrb	r6, [r7, #30]
 800c0c4:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800c0c8:	f8cd c01c 	str.w	ip, [sp, #28]
 800c0cc:	9606      	str	r6, [sp, #24]
 800c0ce:	9505      	str	r5, [sp, #20]
 800c0d0:	9404      	str	r4, [sp, #16]
 800c0d2:	9003      	str	r0, [sp, #12]
 800c0d4:	9102      	str	r1, [sp, #8]
 800c0d6:	9201      	str	r2, [sp, #4]
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	4b17      	ldr	r3, [pc, #92]	; (800c138 <PrintIds+0xd4>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2100      	movs	r1, #0
 800c0e0:	2002      	movs	r0, #2
 800c0e2:	f011 fb1f 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800c0e6:	f107 020c 	add.w	r2, r7, #12
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fc00 	bl	800c8f4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c0f4:	f107 030c 	add.w	r3, r7, #12
 800c0f8:	3303      	adds	r3, #3
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f107 030c 	add.w	r3, r7, #12
 800c102:	3302      	adds	r3, #2
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	4619      	mov	r1, r3
 800c108:	f107 030c 	add.w	r3, r7, #12
 800c10c:	3301      	adds	r3, #1
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	9303      	str	r3, [sp, #12]
 800c11a:	9002      	str	r0, [sp, #8]
 800c11c:	9101      	str	r1, [sp, #4]
 800c11e:	9200      	str	r2, [sp, #0]
 800c120:	4b06      	ldr	r3, [pc, #24]	; (800c13c <PrintIds+0xd8>)
 800c122:	2200      	movs	r2, #0
 800c124:	2100      	movs	r1, #0
 800c126:	2002      	movs	r0, #2
 800c128:	f011 fafc 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800c12c:	bf00      	nop
 800c12e:	3724      	adds	r7, #36	; 0x24
 800c130:	46bd      	mov	sp, r7
 800c132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c134:	0801e324 	.word	0x0801e324
 800c138:	0801e364 	.word	0x0801e364
 800c13c:	0801e3a4 	.word	0x0801e3a4

0800c140 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	6039      	str	r1, [r7, #0]
 800c14a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c14c:	2300      	movs	r3, #0
 800c14e:	73fb      	strb	r3, [r7, #15]
 800c150:	e01a      	b.n	800c188 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c152:	4b12      	ldr	r3, [pc, #72]	; (800c19c <GetKeyByID+0x5c>)
 800c154:	6819      	ldr	r1, [r3, #0]
 800c156:	7bfa      	ldrb	r2, [r7, #15]
 800c158:	4613      	mov	r3, r2
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	4413      	add	r3, r2
 800c15e:	440b      	add	r3, r1
 800c160:	3318      	adds	r3, #24
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	79fa      	ldrb	r2, [r7, #7]
 800c166:	429a      	cmp	r2, r3
 800c168:	d10b      	bne.n	800c182 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c16a:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <GetKeyByID+0x5c>)
 800c16c:	6819      	ldr	r1, [r3, #0]
 800c16e:	7bfa      	ldrb	r2, [r7, #15]
 800c170:	4613      	mov	r3, r2
 800c172:	011b      	lsls	r3, r3, #4
 800c174:	4413      	add	r3, r2
 800c176:	3318      	adds	r3, #24
 800c178:	18ca      	adds	r2, r1, r3
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c17e:	2300      	movs	r3, #0
 800c180:	e006      	b.n	800c190 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	3301      	adds	r3, #1
 800c186:	73fb      	strb	r3, [r7, #15]
 800c188:	7bfb      	ldrb	r3, [r7, #15]
 800c18a:	2b0a      	cmp	r3, #10
 800c18c:	d9e1      	bls.n	800c152 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c18e:	2303      	movs	r3, #3
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	bc80      	pop	{r7}
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	20000568 	.word	0x20000568

0800c1a0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800c1a0:	b590      	push	{r4, r7, lr}
 800c1a2:	b0d1      	sub	sp, #324	; 0x144
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800c1aa:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800c1b4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800c1b8:	6001      	str	r1, [r0, #0]
 800c1ba:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800c1be:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800c1c2:	600a      	str	r2, [r1, #0]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c1ca:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c1ce:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c1d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c1d4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <ComputeCmac+0x46>
 800c1de:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e05d      	b.n	800c2a6 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c1ea:	f107 0314 	add.w	r3, r7, #20
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe ff02 	bl	800aff8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c1f4:	f107 0210 	add.w	r2, r7, #16
 800c1f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c1fc:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	4611      	mov	r1, r2
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff ff9b 	bl	800c140 <GetKeyByID>
 800c20a:	4603      	mov	r3, r0
 800c20c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c210:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c214:	2b00      	cmp	r3, #0
 800c216:	d144      	bne.n	800c2a2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c218:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c21c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	f107 0314 	add.w	r3, r7, #20
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fefd 	bl	800b02a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c230:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c234:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d009      	beq.n	800c252 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800c23e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c242:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c246:	f107 0014 	add.w	r0, r7, #20
 800c24a:	2210      	movs	r2, #16
 800c24c:	6819      	ldr	r1, [r3, #0]
 800c24e:	f7fe fefb 	bl	800b048 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c252:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c256:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800c25a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c25e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c262:	f107 0014 	add.w	r0, r7, #20
 800c266:	6812      	ldr	r2, [r2, #0]
 800c268:	6819      	ldr	r1, [r3, #0]
 800c26a:	f7fe feed 	bl	800b048 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c26e:	f107 0214 	add.w	r2, r7, #20
 800c272:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fe ffa7 	bl	800b1cc <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800c27e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800c282:	461a      	mov	r2, r3
 800c284:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800c288:	021b      	lsls	r3, r3, #8
 800c28a:	431a      	orrs	r2, r3
 800c28c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800c290:	041b      	lsls	r3, r3, #16
 800c292:	431a      	orrs	r2, r3
 800c294:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800c298:	061b      	lsls	r3, r3, #24
 800c29a:	431a      	orrs	r2, r3
 800c29c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c2a0:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c2a2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd90      	pop	{r4, r7, pc}

0800c2b0 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2be:	2302      	movs	r3, #2
 800c2c0:	e00a      	b.n	800c2d8 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800c2c2:	4a07      	ldr	r2, [pc, #28]	; (800c2e0 <SecureElementInit+0x30>)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800c2c8:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <SecureElementInit+0x30>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	22d8      	movs	r2, #216	; 0xd8
 800c2ce:	4905      	ldr	r1, [pc, #20]	; (800c2e4 <SecureElementInit+0x34>)
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f00c fe82 	bl	8018fda <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	20000568 	.word	0x20000568
 800c2e4:	0801ecfc 	.word	0x0801ecfc

0800c2e8 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800c2f6:	f107 030c 	add.w	r3, r7, #12
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 fa98 	bl	800c830 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800c300:	f107 0308 	add.w	r3, r7, #8
 800c304:	4619      	mov	r1, r3
 800c306:	2001      	movs	r0, #1
 800c308:	f000 faf4 	bl	800c8f4 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d024      	beq.n	800c35c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800c312:	2300      	movs	r3, #0
 800c314:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c316:	2300      	movs	r3, #0
 800c318:	75bb      	strb	r3, [r7, #22]
 800c31a:	e00c      	b.n	800c336 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800c31c:	7dbb      	ldrb	r3, [r7, #22]
 800c31e:	3318      	adds	r3, #24
 800c320:	443b      	add	r3, r7
 800c322:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800c32a:	2301      	movs	r3, #1
 800c32c:	75fb      	strb	r3, [r7, #23]
                break;
 800c32e:	e005      	b.n	800c33c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c330:	7dbb      	ldrb	r3, [r7, #22]
 800c332:	3301      	adds	r3, #1
 800c334:	75bb      	strb	r3, [r7, #22]
 800c336:	7dbb      	ldrb	r3, [r7, #22]
 800c338:	2b07      	cmp	r3, #7
 800c33a:	d9ef      	bls.n	800c31c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	f083 0301 	eor.w	r3, r3, #1
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d009      	beq.n	800c35c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800c348:	f107 020c 	add.w	r2, r7, #12
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4610      	mov	r0, r2
 800c350:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800c352:	f107 030c 	add.w	r3, r7, #12
 800c356:	4618      	mov	r0, r3
 800c358:	f000 fa52 	bl	800c800 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00c      	beq.n	800c37c <SecureElementInitMcuID+0x94>
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d109      	bne.n	800c37c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800c368:	f107 0208 	add.w	r2, r7, #8
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	4610      	mov	r0, r2
 800c370:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	4619      	mov	r1, r3
 800c376:	2001      	movs	r0, #1
 800c378:	f000 faa2 	bl	800c8c0 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	6039      	str	r1, [r7, #0]
 800c392:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c394:	2300      	movs	r3, #0
 800c396:	73fb      	strb	r3, [r7, #15]
 800c398:	e01a      	b.n	800c3d0 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c39a:	4b12      	ldr	r3, [pc, #72]	; (800c3e4 <SecureElementGetKeyByID+0x5c>)
 800c39c:	6819      	ldr	r1, [r3, #0]
 800c39e:	7bfa      	ldrb	r2, [r7, #15]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	4413      	add	r3, r2
 800c3a6:	440b      	add	r3, r1
 800c3a8:	3318      	adds	r3, #24
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	79fa      	ldrb	r2, [r7, #7]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d10b      	bne.n	800c3ca <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <SecureElementGetKeyByID+0x5c>)
 800c3b4:	6819      	ldr	r1, [r3, #0]
 800c3b6:	7bfa      	ldrb	r2, [r7, #15]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	011b      	lsls	r3, r3, #4
 800c3bc:	4413      	add	r3, r2
 800c3be:	3318      	adds	r3, #24
 800c3c0:	18ca      	adds	r2, r1, r3
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	e006      	b.n	800c3d8 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	73fb      	strb	r3, [r7, #15]
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	2b0a      	cmp	r3, #10
 800c3d4:	d9e1      	bls.n	800c39a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c3d6:	2303      	movs	r3, #3
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	20000568 	.word	0x20000568

0800c3e8 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	f7ff fdab 	bl	800bf48 <PrintKey>
    PrintKey( NWK_KEY );
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	f7ff fda8 	bl	800bf48 <PrintKey>
    PrintKey( APP_S_KEY );
 800c3f8:	2009      	movs	r0, #9
 800c3fa:	f7ff fda5 	bl	800bf48 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c3fe:	2008      	movs	r0, #8
 800c400:	f7ff fda2 	bl	800bf48 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800c404:	2000      	movs	r0, #0
 800c406:	f7ff fe2d 	bl	800c064 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800c41a:	200b      	movs	r0, #11
 800c41c:	f7ff fd94 	bl	800bf48 <PrintKey>
    PrintKey( MC_KE_KEY );
 800c420:	200c      	movs	r0, #12
 800c422:	f7ff fd91 	bl	800bf48 <PrintKey>
    PrintKey( APP_S_KEY );
 800c426:	2009      	movs	r0, #9
 800c428:	f7ff fd8e 	bl	800bf48 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c42c:	2008      	movs	r0, #8
 800c42e:	f7ff fd8b 	bl	800bf48 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800c432:	200a      	movs	r0, #10
 800c434:	f7ff fd88 	bl	800bf48 <PrintKey>
    PrintIds( mode );
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff fe12 	bl	800c064 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	6039      	str	r1, [r7, #0]
 800c456:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c45e:	2302      	movs	r3, #2
 800c460:	e04c      	b.n	800c4fc <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c462:	2300      	movs	r3, #0
 800c464:	77fb      	strb	r3, [r7, #31]
 800c466:	e045      	b.n	800c4f4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c468:	4b26      	ldr	r3, [pc, #152]	; (800c504 <SecureElementSetKey+0xb8>)
 800c46a:	6819      	ldr	r1, [r3, #0]
 800c46c:	7ffa      	ldrb	r2, [r7, #31]
 800c46e:	4613      	mov	r3, r2
 800c470:	011b      	lsls	r3, r3, #4
 800c472:	4413      	add	r3, r2
 800c474:	440b      	add	r3, r1
 800c476:	3318      	adds	r3, #24
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	79fa      	ldrb	r2, [r7, #7]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d136      	bne.n	800c4ee <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	2b0d      	cmp	r3, #13
 800c484:	d123      	bne.n	800c4ce <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c486:	2306      	movs	r3, #6
 800c488:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
 800c48e:	f107 0310 	add.w	r3, r7, #16
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	605a      	str	r2, [r3, #4]
 800c498:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800c49a:	f107 030c 	add.w	r3, r7, #12
 800c49e:	220c      	movs	r2, #12
 800c4a0:	2110      	movs	r1, #16
 800c4a2:	6838      	ldr	r0, [r7, #0]
 800c4a4:	f000 f876 	bl	800c594 <SecureElementAesEncrypt>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c4ac:	4b15      	ldr	r3, [pc, #84]	; (800c504 <SecureElementSetKey+0xb8>)
 800c4ae:	6819      	ldr	r1, [r3, #0]
 800c4b0:	7ffa      	ldrb	r2, [r7, #31]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	011b      	lsls	r3, r3, #4
 800c4b6:	4413      	add	r3, r2
 800c4b8:	3318      	adds	r3, #24
 800c4ba:	440b      	add	r3, r1
 800c4bc:	3301      	adds	r3, #1
 800c4be:	f107 010c 	add.w	r1, r7, #12
 800c4c2:	2210      	movs	r2, #16
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f00c fd88 	bl	8018fda <memcpy1>
                return retval;
 800c4ca:	7fbb      	ldrb	r3, [r7, #30]
 800c4cc:	e016      	b.n	800c4fc <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c4ce:	4b0d      	ldr	r3, [pc, #52]	; (800c504 <SecureElementSetKey+0xb8>)
 800c4d0:	6819      	ldr	r1, [r3, #0]
 800c4d2:	7ffa      	ldrb	r2, [r7, #31]
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	4413      	add	r3, r2
 800c4da:	3318      	adds	r3, #24
 800c4dc:	440b      	add	r3, r1
 800c4de:	3301      	adds	r3, #1
 800c4e0:	2210      	movs	r2, #16
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f00c fd78 	bl	8018fda <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	e006      	b.n	800c4fc <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c4ee:	7ffb      	ldrb	r3, [r7, #31]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	77fb      	strb	r3, [r7, #31]
 800c4f4:	7ffb      	ldrb	r3, [r7, #31]
 800c4f6:	2b0a      	cmp	r3, #10
 800c4f8:	d9b6      	bls.n	800c468 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c4fa:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3720      	adds	r7, #32
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	20000568 	.word	0x20000568

0800c508 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af02      	add	r7, sp, #8
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800c516:	78fb      	ldrb	r3, [r7, #3]
 800c518:	2b0b      	cmp	r3, #11
 800c51a:	d901      	bls.n	800c520 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e009      	b.n	800c534 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c520:	78fa      	ldrb	r2, [r7, #3]
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	4613      	mov	r3, r2
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	68b9      	ldr	r1, [r7, #8]
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f7ff fe37 	bl	800c1a0 <ComputeCmac>
 800c532:	4603      	mov	r3, r0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c550:	2302      	movs	r3, #2
 800c552:	e01b      	b.n	800c58c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c554:	2306      	movs	r3, #6
 800c556:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800c558:	2300      	movs	r3, #0
 800c55a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c55c:	78fa      	ldrb	r2, [r7, #3]
 800c55e:	f107 0310 	add.w	r3, r7, #16
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4613      	mov	r3, r2
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	68f9      	ldr	r1, [r7, #12]
 800c56a:	2000      	movs	r0, #0
 800c56c:	f7ff fe18 	bl	800c1a0 <ComputeCmac>
 800c570:	4603      	mov	r3, r0
 800c572:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c574:	7dfb      	ldrb	r3, [r7, #23]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
 800c57c:	e006      	b.n	800c58c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	429a      	cmp	r2, r3
 800c584:	d001      	beq.n	800c58a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c586:	2301      	movs	r3, #1
 800c588:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b0c2      	sub	sp, #264	; 0x108
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c5a0:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800c5a4:	6001      	str	r1, [r0, #0]
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c5ac:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c5ba:	460a      	mov	r2, r1
 800c5bc:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d006      	beq.n	800c5d2 <SecureElementAesEncrypt+0x3e>
 800c5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d101      	bne.n	800c5d6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	e059      	b.n	800c68a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800c5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 030f 	and.w	r3, r3, #15
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c5e8:	2305      	movs	r3, #5
 800c5ea:	e04e      	b.n	800c68a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c5ec:	f107 0314 	add.w	r3, r7, #20
 800c5f0:	22f0      	movs	r2, #240	; 0xf0
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f00c fd2b 	bl	8019050 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c5fa:	f107 0210 	add.w	r2, r7, #16
 800c5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c602:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	4611      	mov	r1, r2
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff fd98 	bl	800c140 <GetKeyByID>
 800c610:	4603      	mov	r3, r0
 800c612:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c616:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d133      	bne.n	800c686 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	3301      	adds	r3, #1
 800c622:	f107 0214 	add.w	r2, r7, #20
 800c626:	2110      	movs	r1, #16
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fb65 	bl	800bcf8 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c634:	e020      	b.n	800c678 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800c636:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	18d0      	adds	r0, r2, r3
 800c63e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c642:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c646:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c64a:	6812      	ldr	r2, [r2, #0]
 800c64c:	4413      	add	r3, r2
 800c64e:	f107 0214 	add.w	r2, r7, #20
 800c652:	4619      	mov	r1, r3
 800c654:	f7ff fc2e 	bl	800beb4 <lorawan_aes_encrypt>
            block = block + 16;
 800c658:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c65c:	3310      	adds	r3, #16
 800c65e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c666:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c66a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c66e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800c672:	6812      	ldr	r2, [r2, #0]
 800c674:	3a10      	subs	r2, #16
 800c676:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800c678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c67c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1d7      	bne.n	800c636 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c686:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	e02e      	b.n	800c70c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c6ae:	2306      	movs	r3, #6
 800c6b0:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c6b2:	78bb      	ldrb	r3, [r7, #2]
 800c6b4:	2b0c      	cmp	r3, #12
 800c6b6:	d104      	bne.n	800c6c2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c6b8:	78fb      	ldrb	r3, [r7, #3]
 800c6ba:	2b0b      	cmp	r3, #11
 800c6bc:	d001      	beq.n	800c6c2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e024      	b.n	800c70c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	60fb      	str	r3, [r7, #12]
 800c6c6:	f107 0310 	add.w	r3, r7, #16
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	601a      	str	r2, [r3, #0]
 800c6ce:	605a      	str	r2, [r3, #4]
 800c6d0:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c6d2:	f107 030c 	add.w	r3, r7, #12
 800c6d6:	78fa      	ldrb	r2, [r7, #3]
 800c6d8:	2110      	movs	r1, #16
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff ff5a 	bl	800c594 <SecureElementAesEncrypt>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c6e4:	7ffb      	ldrb	r3, [r7, #31]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d001      	beq.n	800c6ee <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c6ea:	7ffb      	ldrb	r3, [r7, #31]
 800c6ec:	e00e      	b.n	800c70c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c6ee:	f107 020c 	add.w	r2, r7, #12
 800c6f2:	78bb      	ldrb	r3, [r7, #2]
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff fea8 	bl	800c44c <SecureElementSetKey>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c700:	7ffb      	ldrb	r3, [r7, #31]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c706:	7ffb      	ldrb	r3, [r7, #31]
 800c708:	e000      	b.n	800c70c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c70a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60b9      	str	r1, [r7, #8]
 800c71c:	607b      	str	r3, [r7, #4]
 800c71e:	4603      	mov	r3, r0
 800c720:	73fb      	strb	r3, [r7, #15]
 800c722:	4613      	mov	r3, r2
 800c724:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d005      	beq.n	800c738 <SecureElementProcessJoinAccept+0x24>
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <SecureElementProcessJoinAccept+0x24>
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c738:	2302      	movs	r3, #2
 800c73a:	e05c      	b.n	800c7f6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c73c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c740:	2b21      	cmp	r3, #33	; 0x21
 800c742:	d901      	bls.n	800c748 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c744:	2305      	movs	r3, #5
 800c746:	e056      	b.n	800c7f6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c748:	2301      	movs	r3, #1
 800c74a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c74c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c750:	b29b      	uxth	r3, r3
 800c752:	461a      	mov	r2, r3
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c758:	f00c fc3f 	bl	8018fda <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1c58      	adds	r0, r3, #1
 800c760:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c764:	3b01      	subs	r3, #1
 800c766:	4619      	mov	r1, r3
 800c768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76a:	3301      	adds	r3, #1
 800c76c:	7dfa      	ldrb	r2, [r7, #23]
 800c76e:	f7ff ff11 	bl	800c594 <SecureElementAesEncrypt>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c778:	2307      	movs	r3, #7
 800c77a:	e03c      	b.n	800c7f6 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	330b      	adds	r3, #11
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	09db      	lsrs	r3, r3, #7
 800c784:	b2da      	uxtb	r2, r3
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c78a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c78e:	3b04      	subs	r3, #4
 800c790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c792:	4413      	add	r3, r2
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	4619      	mov	r1, r3
 800c798:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c79c:	3b03      	subs	r3, #3
 800c79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	021b      	lsls	r3, r3, #8
 800c7a6:	ea41 0203 	orr.w	r2, r1, r3
 800c7aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7ae:	3b02      	subs	r3, #2
 800c7b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7b2:	440b      	add	r3, r1
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	041b      	lsls	r3, r3, #16
 800c7b8:	431a      	orrs	r2, r3
 800c7ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7c2:	440b      	add	r3, r1
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	061b      	lsls	r3, r3, #24
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10d      	bne.n	800c7f0 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c7d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7d8:	3b04      	subs	r3, #4
 800c7da:	4619      	mov	r1, r3
 800c7dc:	2301      	movs	r3, #1
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7e2:	f7ff feab 	bl	800c53c <SecureElementVerifyAesCmac>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e002      	b.n	800c7f6 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c7f0:	2304      	movs	r3, #4
 800c7f2:	e000      	b.n	800c7f6 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
	...

0800c800 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c80e:	2302      	movs	r3, #2
 800c810:	e007      	b.n	800c822 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c812:	4b06      	ldr	r3, [pc, #24]	; (800c82c <SecureElementSetDevEui+0x2c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2208      	movs	r2, #8
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f00c fbdd 	bl	8018fda <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c820:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	20000568 	.word	0x20000568

0800c830 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c83e:	2302      	movs	r3, #2
 800c840:	e007      	b.n	800c852 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c842:	4b06      	ldr	r3, [pc, #24]	; (800c85c <SecureElementGetDevEui+0x2c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2208      	movs	r2, #8
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f00c fbc5 	bl	8018fda <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c850:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20000568 	.word	0x20000568

0800c860 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d101      	bne.n	800c872 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c86e:	2302      	movs	r3, #2
 800c870:	e008      	b.n	800c884 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c872:	4b06      	ldr	r3, [pc, #24]	; (800c88c <SecureElementSetJoinEui+0x2c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	3308      	adds	r3, #8
 800c878:	2208      	movs	r2, #8
 800c87a:	6879      	ldr	r1, [r7, #4]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f00c fbac 	bl	8018fda <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c882:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	20000568 	.word	0x20000568

0800c890 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d101      	bne.n	800c8a2 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c89e:	2302      	movs	r3, #2
 800c8a0:	e008      	b.n	800c8b4 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c8a2:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <SecureElementGetJoinEui+0x2c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3308      	adds	r3, #8
 800c8a8:	2208      	movs	r2, #8
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f00c fb94 	bl	8018fda <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c8b2:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20000568 	.word	0x20000568

0800c8c0 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	6039      	str	r1, [r7, #0]
 800c8ca:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d104      	bne.n	800c8dc <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c8d2:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <SecureElementSetDevAddr+0x30>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	611a      	str	r2, [r3, #16]
 800c8da:	e003      	b.n	800c8e4 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c8dc:	4b04      	ldr	r3, [pc, #16]	; (800c8f0 <SecureElementSetDevAddr+0x30>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c8e4:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bc80      	pop	{r7}
 800c8ee:	4770      	bx	lr
 800c8f0:	20000568 	.word	0x20000568

0800c8f4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	6039      	str	r1, [r7, #0]
 800c8fe:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c906:	2302      	movs	r3, #2
 800c908:	e00e      	b.n	800c928 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c90a:	79fb      	ldrb	r3, [r7, #7]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d105      	bne.n	800c91c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c910:	4b08      	ldr	r3, [pc, #32]	; (800c934 <SecureElementGetDevAddr+0x40>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	691a      	ldr	r2, [r3, #16]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	e004      	b.n	800c926 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c91c:	4b05      	ldr	r3, [pc, #20]	; (800c934 <SecureElementGetDevAddr+0x40>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	695a      	ldr	r2, [r3, #20]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c926:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c928:	4618      	mov	r0, r3
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bc80      	pop	{r7}
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20000568 	.word	0x20000568

0800c938 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c942:	4a29      	ldr	r2, [pc, #164]	; (800c9e8 <LmHandlerInit+0xb0>)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c948:	4b28      	ldr	r3, [pc, #160]	; (800c9ec <LmHandlerInit+0xb4>)
 800c94a:	4a29      	ldr	r2, [pc, #164]	; (800c9f0 <LmHandlerInit+0xb8>)
 800c94c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c94e:	4b27      	ldr	r3, [pc, #156]	; (800c9ec <LmHandlerInit+0xb4>)
 800c950:	4a28      	ldr	r2, [pc, #160]	; (800c9f4 <LmHandlerInit+0xbc>)
 800c952:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c954:	4b25      	ldr	r3, [pc, #148]	; (800c9ec <LmHandlerInit+0xb4>)
 800c956:	4a28      	ldr	r2, [pc, #160]	; (800c9f8 <LmHandlerInit+0xc0>)
 800c958:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c95a:	4b24      	ldr	r3, [pc, #144]	; (800c9ec <LmHandlerInit+0xb4>)
 800c95c:	4a27      	ldr	r2, [pc, #156]	; (800c9fc <LmHandlerInit+0xc4>)
 800c95e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c960:	4b21      	ldr	r3, [pc, #132]	; (800c9e8 <LmHandlerInit+0xb0>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a26      	ldr	r2, [pc, #152]	; (800ca00 <LmHandlerInit+0xc8>)
 800c968:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c96a:	4b1f      	ldr	r3, [pc, #124]	; (800c9e8 <LmHandlerInit+0xb0>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	4a23      	ldr	r2, [pc, #140]	; (800ca00 <LmHandlerInit+0xc8>)
 800c972:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c974:	4b1c      	ldr	r3, [pc, #112]	; (800c9e8 <LmHandlerInit+0xb0>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	4a21      	ldr	r2, [pc, #132]	; (800ca00 <LmHandlerInit+0xc8>)
 800c97c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c97e:	4b1a      	ldr	r3, [pc, #104]	; (800c9e8 <LmHandlerInit+0xb0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	4a1e      	ldr	r2, [pc, #120]	; (800ca00 <LmHandlerInit+0xc8>)
 800c986:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c988:	4b1d      	ldr	r3, [pc, #116]	; (800ca00 <LmHandlerInit+0xc8>)
 800c98a:	4a1e      	ldr	r2, [pc, #120]	; (800ca04 <LmHandlerInit+0xcc>)
 800c98c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c98e:	4b16      	ldr	r3, [pc, #88]	; (800c9e8 <LmHandlerInit+0xb0>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	4a1a      	ldr	r2, [pc, #104]	; (800ca00 <LmHandlerInit+0xc8>)
 800c996:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	4a1b      	ldr	r2, [pc, #108]	; (800ca08 <LmHandlerInit+0xd0>)
 800c99c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c99e:	4b12      	ldr	r3, [pc, #72]	; (800c9e8 <LmHandlerInit+0xb0>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9a4:	4a18      	ldr	r2, [pc, #96]	; (800ca08 <LmHandlerInit+0xd0>)
 800c9a6:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800c9a8:	4b17      	ldr	r3, [pc, #92]	; (800ca08 <LmHandlerInit+0xd0>)
 800c9aa:	4a18      	ldr	r2, [pc, #96]	; (800ca0c <LmHandlerInit+0xd4>)
 800c9ac:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800c9ae:	4b16      	ldr	r3, [pc, #88]	; (800ca08 <LmHandlerInit+0xd0>)
 800c9b0:	4a17      	ldr	r2, [pc, #92]	; (800ca10 <LmHandlerInit+0xd8>)
 800c9b2:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c9b4:	4914      	ldr	r1, [pc, #80]	; (800ca08 <LmHandlerInit+0xd0>)
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	f000 fdb4 	bl	800d524 <LmHandlerPackageRegister>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9c6:	e00a      	b.n	800c9de <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f001 fd2a 	bl	800e424 <LmhpPackagesRegistrationInit>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d002      	beq.n	800c9dc <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9da:	e000      	b.n	800c9de <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	200005c0 	.word	0x200005c0
 800c9ec:	200005c4 	.word	0x200005c4
 800c9f0:	0800d1fd 	.word	0x0800d1fd
 800c9f4:	0800d271 	.word	0x0800d271
 800c9f8:	0800d341 	.word	0x0800d341
 800c9fc:	0800d491 	.word	0x0800d491
 800ca00:	200005d4 	.word	0x200005d4
 800ca04:	0800d9d1 	.word	0x0800d9d1
 800ca08:	20000584 	.word	0x20000584
 800ca0c:	0800d7e5 	.word	0x0800d7e5
 800ca10:	0800d81d 	.word	0x0800d81d

0800ca14 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b092      	sub	sp, #72	; 0x48
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800ca1c:	2218      	movs	r2, #24
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	4884      	ldr	r0, [pc, #528]	; (800cc34 <LmHandlerConfigure+0x220>)
 800ca22:	f00c fada 	bl	8018fda <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800ca26:	4b84      	ldr	r3, [pc, #528]	; (800cc38 <LmHandlerConfigure+0x224>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800ca2c:	f7fe faa2 	bl	800af74 <LoraInfo_GetPtr>
 800ca30:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800ca32:	4b80      	ldr	r3, [pc, #512]	; (800cc34 <LmHandlerConfigure+0x220>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	2301      	movs	r3, #1
 800ca3a:	4093      	lsls	r3, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	4013      	ands	r3, r2
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d106      	bne.n	800ca56 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800ca48:	4b7c      	ldr	r3, [pc, #496]	; (800cc3c <LmHandlerConfigure+0x228>)
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	2000      	movs	r0, #0
 800ca50:	f010 fe68 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800ca54:	e7fe      	b.n	800ca54 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800ca56:	4b77      	ldr	r3, [pc, #476]	; (800cc34 <LmHandlerConfigure+0x220>)
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	4978      	ldr	r1, [pc, #480]	; (800cc40 <LmHandlerConfigure+0x22c>)
 800ca5e:	4879      	ldr	r0, [pc, #484]	; (800cc44 <LmHandlerConfigure+0x230>)
 800ca60:	f004 ffd4 	bl	8011a0c <LoRaMacInitialization>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca6e:	e0dc      	b.n	800cc2a <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800ca70:	2327      	movs	r3, #39	; 0x27
 800ca72:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ca74:	f107 0318 	add.w	r3, r7, #24
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f005 fd53 	bl	8012524 <LoRaMacMibSetRequestConfirm>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d103      	bne.n	800ca8c <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800ca84:	4b70      	ldr	r3, [pc, #448]	; (800cc48 <LmHandlerConfigure+0x234>)
 800ca86:	2201      	movs	r2, #1
 800ca88:	701a      	strb	r2, [r3, #0]
 800ca8a:	e02a      	b.n	800cae2 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800ca8c:	2328      	movs	r3, #40	; 0x28
 800ca8e:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800ca90:	4b6e      	ldr	r3, [pc, #440]	; (800cc4c <LmHandlerConfigure+0x238>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00c      	beq.n	800cab4 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ca9a:	f107 0318 	add.w	r3, r7, #24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f005 fb68 	bl	8012174 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800caa4:	4b69      	ldr	r3, [pc, #420]	; (800cc4c <LmHandlerConfigure+0x238>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	69fa      	ldr	r2, [r7, #28]
 800caac:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800cab0:	4610      	mov	r0, r2
 800cab2:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800cab4:	2327      	movs	r3, #39	; 0x27
 800cab6:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cab8:	f107 0318 	add.w	r3, r7, #24
 800cabc:	4618      	mov	r0, r3
 800cabe:	f005 fd31 	bl	8012524 <LoRaMacMibSetRequestConfirm>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10c      	bne.n	800cae2 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cac8:	2301      	movs	r3, #1
 800caca:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cacc:	f107 0318 	add.w	r3, r7, #24
 800cad0:	4618      	mov	r0, r3
 800cad2:	f005 fb4f 	bl	8012174 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cad6:	7f3b      	ldrb	r3, [r7, #28]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800cadc:	4b5a      	ldr	r3, [pc, #360]	; (800cc48 <LmHandlerConfigure+0x234>)
 800cade:	2201      	movs	r2, #1
 800cae0:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800cae2:	4b59      	ldr	r3, [pc, #356]	; (800cc48 <LmHandlerConfigure+0x234>)
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d022      	beq.n	800cb30 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800caea:	4b58      	ldr	r3, [pc, #352]	; (800cc4c <LmHandlerConfigure+0x238>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	69db      	ldr	r3, [r3, #28]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d004      	beq.n	800cafe <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800caf4:	4b55      	ldr	r3, [pc, #340]	; (800cc4c <LmHandlerConfigure+0x238>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	2000      	movs	r0, #0
 800cafc:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800cafe:	2327      	movs	r3, #39	; 0x27
 800cb00:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800cb02:	f107 0318 	add.w	r3, r7, #24
 800cb06:	4618      	mov	r0, r3
 800cb08:	f005 fb34 	bl	8012174 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800cb10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb12:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cb16:	4b47      	ldr	r3, [pc, #284]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cb18:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800cb1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb1c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800cb20:	4b44      	ldr	r3, [pc, #272]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cb22:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800cb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb26:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800cb2a:	4b42      	ldr	r3, [pc, #264]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cb2c:	709a      	strb	r2, [r3, #2]
 800cb2e:	e008      	b.n	800cb42 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800cb30:	2305      	movs	r3, #5
 800cb32:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800cb34:	2300      	movs	r3, #0
 800cb36:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cb38:	f107 0318 	add.w	r3, r7, #24
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f005 fcf1 	bl	8012524 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800cb42:	4b3f      	ldr	r3, [pc, #252]	; (800cc40 <LmHandlerConfigure+0x22c>)
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	4a3e      	ldr	r2, [pc, #248]	; (800cc40 <LmHandlerConfigure+0x22c>)
 800cb48:	68d2      	ldr	r2, [r2, #12]
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff fbcb 	bl	800c2e8 <SecureElementInitMcuID>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb5c:	e065      	b.n	800cc2a <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800cb5e:	2306      	movs	r3, #6
 800cb60:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cb62:	f107 0318 	add.w	r3, r7, #24
 800cb66:	4618      	mov	r0, r3
 800cb68:	f005 fb04 	bl	8012174 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	4a38      	ldr	r2, [pc, #224]	; (800cc50 <LmHandlerConfigure+0x23c>)
 800cb70:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb72:	f107 0318 	add.w	r3, r7, #24
 800cb76:	4618      	mov	r0, r3
 800cb78:	f005 fcd4 	bl	8012524 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800cb80:	4b33      	ldr	r3, [pc, #204]	; (800cc50 <LmHandlerConfigure+0x23c>)
 800cb82:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cb84:	f107 0318 	add.w	r3, r7, #24
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f005 faf3 	bl	8012174 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800cb92:	4b30      	ldr	r3, [pc, #192]	; (800cc54 <LmHandlerConfigure+0x240>)
 800cb94:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cb96:	f107 0318 	add.w	r3, r7, #24
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f005 faea 	bl	8012174 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800cba0:	f7ff fc22 	bl	800c3e8 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800cba4:	230f      	movs	r3, #15
 800cba6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cbac:	f107 0318 	add.w	r3, r7, #24
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f005 fcb7 	bl	8012524 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800cbb6:	2310      	movs	r3, #16
 800cbb8:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cbbe:	f107 0318 	add.w	r3, r7, #24
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f005 fcae 	bl	8012524 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800cbc8:	2304      	movs	r3, #4
 800cbca:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800cbcc:	4b19      	ldr	r3, [pc, #100]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cbce:	789b      	ldrb	r3, [r3, #2]
 800cbd0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cbd2:	f107 0318 	add.w	r3, r7, #24
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f005 fca4 	bl	8012524 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800cbdc:	233a      	movs	r3, #58	; 0x3a
 800cbde:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800cbe0:	4b14      	ldr	r3, [pc, #80]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cbe6:	f107 0318 	add.w	r3, r7, #24
 800cbea:	4618      	mov	r0, r3
 800cbec:	f005 fc9a 	bl	8012524 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800cbf0:	230f      	movs	r3, #15
 800cbf2:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800cbf4:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	f107 0210 	add.w	r2, r7, #16
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f008 fbea 	bl	80153d8 <RegionGetPhyParam>
 800cc04:	4603      	mov	r3, r0
 800cc06:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bf14      	ite	ne
 800cc0e:	2301      	movne	r3, #1
 800cc10:	2300      	moveq	r3, #0
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cc16:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800cc18:	2014      	movs	r0, #20
 800cc1a:	f000 fad7 	bl	800d1cc <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800cc1e:	4b05      	ldr	r3, [pc, #20]	; (800cc34 <LmHandlerConfigure+0x220>)
 800cc20:	79db      	ldrb	r3, [r3, #7]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f006 faf8 	bl	8013218 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3748      	adds	r7, #72	; 0x48
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	200005a8 	.word	0x200005a8
 800cc38:	200005f0 	.word	0x200005f0
 800cc3c:	0801e3d0 	.word	0x0801e3d0
 800cc40:	200005d4 	.word	0x200005d4
 800cc44:	200005c4 	.word	0x200005c4
 800cc48:	200006e6 	.word	0x200006e6
 800cc4c:	200005c0 	.word	0x200005c0
 800cc50:	2000056c 	.word	0x2000056c
 800cc54:	20000574 	.word	0x20000574

0800cc58 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800cc5e:	f002 fe49 	bl	800f8f4 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800cc62:	f000 fd8b 	bl	800d77c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800cc66:	f000 fd5f 	bl	800d728 <LmHandlerPackageIsTxPending>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d117      	bne.n	800cca0 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800cc70:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <LmHandlerProcess+0x50>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d014      	beq.n	800cca2 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800cc78:	2300      	movs	r3, #0
 800cc7a:	703b      	strb	r3, [r7, #0]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	707b      	strb	r3, [r7, #1]
 800cc80:	2300      	movs	r3, #0
 800cc82:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800cc84:	4b09      	ldr	r3, [pc, #36]	; (800ccac <LmHandlerProcess+0x54>)
 800cc86:	78d9      	ldrb	r1, [r3, #3]
 800cc88:	463b      	mov	r3, r7
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 f8d7 	bl	800ce40 <LmHandlerSend>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d104      	bne.n	800cca2 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800cc98:	4b03      	ldr	r3, [pc, #12]	; (800cca8 <LmHandlerProcess+0x50>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	701a      	strb	r2, [r3, #0]
 800cc9e:	e000      	b.n	800cca2 <LmHandlerProcess+0x4a>
        return;
 800cca0:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	200005f0 	.word	0x200005f0
 800ccac:	200005a8 	.word	0x200005a8

0800ccb0 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bc80      	pop	{r7}
 800ccbe:	4770      	bx	lr
 800ccc0:	200005ec 	.word	0x200005ec

0800ccc4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b092      	sub	sp, #72	; 0x48
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	4603      	mov	r3, r0
 800cccc:	460a      	mov	r2, r1
 800ccce:	71fb      	strb	r3, [r7, #7]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800ccda:	4b46      	ldr	r3, [pc, #280]	; (800cdf4 <LmHandlerJoin+0x130>)
 800ccdc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800cce6:	4b43      	ldr	r3, [pc, #268]	; (800cdf4 <LmHandlerJoin+0x130>)
 800cce8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ccec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	d10b      	bne.n	800cd0e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800ccfc:	4b3e      	ldr	r3, [pc, #248]	; (800cdf8 <LmHandlerJoin+0x134>)
 800ccfe:	2202      	movs	r2, #2
 800cd00:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800cd02:	4a3d      	ldr	r2, [pc, #244]	; (800cdf8 <LmHandlerJoin+0x134>)
 800cd04:	79bb      	ldrb	r3, [r7, #6]
 800cd06:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800cd08:	f005 f936 	bl	8011f78 <LoRaMacStart>
 800cd0c:	e05c      	b.n	800cdc8 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cd14:	4b38      	ldr	r3, [pc, #224]	; (800cdf8 <LmHandlerJoin+0x134>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cd1a:	4b36      	ldr	r3, [pc, #216]	; (800cdf4 <LmHandlerJoin+0x130>)
 800cd1c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cd20:	4b35      	ldr	r3, [pc, #212]	; (800cdf8 <LmHandlerJoin+0x134>)
 800cd22:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800cd24:	4b33      	ldr	r3, [pc, #204]	; (800cdf4 <LmHandlerJoin+0x130>)
 800cd26:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800cd2a:	4b33      	ldr	r3, [pc, #204]	; (800cdf8 <LmHandlerJoin+0x134>)
 800cd2c:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cd2e:	4b32      	ldr	r3, [pc, #200]	; (800cdf8 <LmHandlerJoin+0x134>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cd34:	4a30      	ldr	r2, [pc, #192]	; (800cdf8 <LmHandlerJoin+0x134>)
 800cd36:	79bb      	ldrb	r3, [r7, #6]
 800cd38:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800cd3a:	4b30      	ldr	r3, [pc, #192]	; (800cdfc <LmHandlerJoin+0x138>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	f083 0301 	eor.w	r3, r3, #1
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d034      	beq.n	800cdb2 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800cd48:	231f      	movs	r3, #31
 800cd4a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800cd4c:	4b29      	ldr	r3, [pc, #164]	; (800cdf4 <LmHandlerJoin+0x130>)
 800cd4e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cd52:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cd54:	f107 030c 	add.w	r3, r7, #12
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f005 fbe3 	bl	8012524 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800cd5e:	2320      	movs	r3, #32
 800cd60:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800cd62:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <LmHandlerJoin+0x130>)
 800cd64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cd68:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cd6a:	f107 030c 	add.w	r3, r7, #12
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f005 fbd8 	bl	8012524 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800cd74:	2322      	movs	r3, #34	; 0x22
 800cd76:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800cd78:	4b1e      	ldr	r3, [pc, #120]	; (800cdf4 <LmHandlerJoin+0x130>)
 800cd7a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cd7e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cd80:	f107 030c 	add.w	r3, r7, #12
 800cd84:	4618      	mov	r0, r3
 800cd86:	f005 fbcd 	bl	8012524 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cd8a:	2321      	movs	r3, #33	; 0x21
 800cd8c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800cd8e:	4b19      	ldr	r3, [pc, #100]	; (800cdf4 <LmHandlerJoin+0x130>)
 800cd90:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cd94:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cd96:	f107 030c 	add.w	r3, r7, #12
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f005 fbc2 	bl	8012524 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800cda0:	2329      	movs	r3, #41	; 0x29
 800cda2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cda4:	4b16      	ldr	r3, [pc, #88]	; (800ce00 <LmHandlerJoin+0x13c>)
 800cda6:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cda8:	f107 030c 	add.w	r3, r7, #12
 800cdac:	4618      	mov	r0, r3
 800cdae:	f005 fbb9 	bl	8012524 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800cdb2:	f005 f8e1 	bl	8011f78 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cdbe:	f107 030c 	add.w	r3, r7, #12
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f005 fbae 	bl	8012524 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800cdc8:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <LmHandlerJoin+0x138>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	f083 0301 	eor.w	r3, r3, #1
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d102      	bne.n	800cddc <LmHandlerJoin+0x118>
 800cdd6:	79bb      	ldrb	r3, [r7, #6]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800cddc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cde0:	4618      	mov	r0, r3
 800cde2:	f005 ff49 	bl	8012c78 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cde6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cde8:	4a06      	ldr	r2, [pc, #24]	; (800ce04 <LmHandlerJoin+0x140>)
 800cdea:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800cdec:	bf00      	nop
 800cdee:	3748      	adds	r7, #72	; 0x48
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	200005a8 	.word	0x200005a8
 800cdf8:	20000094 	.word	0x20000094
 800cdfc:	200006e6 	.word	0x200006e6
 800ce00:	01000400 	.word	0x01000400
 800ce04:	200005ec 	.word	0x200005ec

0800ce08 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08c      	sub	sp, #48	; 0x30
 800ce0c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800ce12:	1d3b      	adds	r3, r7, #4
 800ce14:	4618      	mov	r0, r3
 800ce16:	f005 f9ad 	bl	8012174 <LoRaMacMibGetRequestConfirm>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800ce20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d106      	bne.n	800ce36 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ce28:	7a3b      	ldrb	r3, [r7, #8]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e002      	b.n	800ce38 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800ce36:	2300      	movs	r3, #0
    }
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3730      	adds	r7, #48	; 0x30
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08a      	sub	sp, #40	; 0x28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70fb      	strb	r3, [r7, #3]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ce50:	23ff      	movs	r3, #255	; 0xff
 800ce52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800ce56:	f002 faa7 	bl	800f3a8 <LoRaMacIsBusy>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ce60:	f06f 0301 	mvn.w	r3, #1
 800ce64:	e0ab      	b.n	800cfbe <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800ce66:	f002 fac7 	bl	800f3f8 <LoRaMacIsStopped>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ce70:	f06f 0302 	mvn.w	r3, #2
 800ce74:	e0a3      	b.n	800cfbe <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800ce76:	f7ff ffc7 	bl	800ce08 <LmHandlerJoinStatus>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d00a      	beq.n	800ce96 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800ce80:	4b51      	ldr	r3, [pc, #324]	; (800cfc8 <LmHandlerSend+0x188>)
 800ce82:	79db      	ldrb	r3, [r3, #7]
 800ce84:	4a50      	ldr	r2, [pc, #320]	; (800cfc8 <LmHandlerSend+0x188>)
 800ce86:	7a12      	ldrb	r2, [r2, #8]
 800ce88:	4611      	mov	r1, r2
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7ff ff1a 	bl	800ccc4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ce90:	f06f 0302 	mvn.w	r3, #2
 800ce94:	e093      	b.n	800cfbe <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800ce96:	4a4d      	ldr	r2, [pc, #308]	; (800cfcc <LmHandlerSend+0x18c>)
 800ce98:	78fb      	ldrb	r3, [r7, #3]
 800ce9a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800ce9c:	78fb      	ldrb	r3, [r7, #3]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	bf14      	ite	ne
 800cea2:	2301      	movne	r3, #1
 800cea4:	2300      	moveq	r3, #0
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ceaa:	4b49      	ldr	r3, [pc, #292]	; (800cfd0 <LmHandlerSend+0x190>)
 800ceac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ceb0:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	f107 020c 	add.w	r2, r7, #12
 800ceba:	4611      	mov	r1, r2
 800cebc:	4618      	mov	r0, r3
 800cebe:	f005 f8c9 	bl	8012054 <LoRaMacQueryTxPossible>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d009      	beq.n	800cedc <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800cec8:	2300      	movs	r3, #0
 800ceca:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800cecc:	2300      	movs	r3, #0
 800cece:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ced0:	2300      	movs	r3, #0
 800ced2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ced4:	23f9      	movs	r3, #249	; 0xf9
 800ced6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ceda:	e009      	b.n	800cef0 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800cef0:	4b36      	ldr	r3, [pc, #216]	; (800cfcc <LmHandlerSend+0x18c>)
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	3310      	adds	r3, #16
 800cef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cefa:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800cefe:	4b34      	ldr	r3, [pc, #208]	; (800cfd0 <LmHandlerSend+0x190>)
 800cf00:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cf04:	4b31      	ldr	r3, [pc, #196]	; (800cfcc <LmHandlerSend+0x18c>)
 800cf06:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800cf08:	78ba      	ldrb	r2, [r7, #2]
 800cf0a:	f107 0310 	add.w	r3, r7, #16
 800cf0e:	4611      	mov	r1, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	f006 f849 	bl	8012fa8 <LoRaMacMcpsRequest>
 800cf16:	4603      	mov	r3, r0
 800cf18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	4a2d      	ldr	r2, [pc, #180]	; (800cfd4 <LmHandlerSend+0x194>)
 800cf20:	6013      	str	r3, [r2, #0]

    switch( status )
 800cf22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf26:	2b11      	cmp	r3, #17
 800cf28:	d842      	bhi.n	800cfb0 <LmHandlerSend+0x170>
 800cf2a:	a201      	add	r2, pc, #4	; (adr r2, 800cf30 <LmHandlerSend+0xf0>)
 800cf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf30:	0800cf79 	.word	0x0800cf79
 800cf34:	0800cf91 	.word	0x0800cf91
 800cf38:	0800cfb1 	.word	0x0800cfb1
 800cf3c:	0800cfb1 	.word	0x0800cfb1
 800cf40:	0800cfb1 	.word	0x0800cfb1
 800cf44:	0800cfb1 	.word	0x0800cfb1
 800cf48:	0800cfb1 	.word	0x0800cfb1
 800cf4c:	0800cf99 	.word	0x0800cf99
 800cf50:	0800cfb1 	.word	0x0800cfb1
 800cf54:	0800cfb1 	.word	0x0800cfb1
 800cf58:	0800cfb1 	.word	0x0800cfb1
 800cf5c:	0800cfa9 	.word	0x0800cfa9
 800cf60:	0800cfb1 	.word	0x0800cfb1
 800cf64:	0800cfb1 	.word	0x0800cfb1
 800cf68:	0800cf91 	.word	0x0800cf91
 800cf6c:	0800cf91 	.word	0x0800cf91
 800cf70:	0800cf91 	.word	0x0800cf91
 800cf74:	0800cfa1 	.word	0x0800cfa1
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800cf78:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <LmHandlerSend+0x198>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800cf7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf82:	f113 0f07 	cmn.w	r3, #7
 800cf86:	d017      	beq.n	800cfb8 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800cf8e:	e013      	b.n	800cfb8 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800cf90:	23fe      	movs	r3, #254	; 0xfe
 800cf92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cf96:	e010      	b.n	800cfba <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cf98:	23fd      	movs	r3, #253	; 0xfd
 800cf9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cf9e:	e00c      	b.n	800cfba <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800cfa0:	23fb      	movs	r3, #251	; 0xfb
 800cfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cfa6:	e008      	b.n	800cfba <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cfa8:	23fa      	movs	r3, #250	; 0xfa
 800cfaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cfae:	e004      	b.n	800cfba <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cfb0:	23ff      	movs	r3, #255	; 0xff
 800cfb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cfb6:	e000      	b.n	800cfba <LmHandlerSend+0x17a>
            break;
 800cfb8:	bf00      	nop
    }

    return lmhStatus;
 800cfba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3728      	adds	r7, #40	; 0x28
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20000094 	.word	0x20000094
 800cfcc:	200000a0 	.word	0x200000a0
 800cfd0:	200005a8 	.word	0x200005a8
 800cfd4:	200005ec 	.word	0x200005ec
 800cfd8:	200005f0 	.word	0x200005f0

0800cfdc <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800cfe2:	2309      	movs	r3, #9
 800cfe4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cfe6:	463b      	mov	r3, r7
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f005 fe45 	bl	8012c78 <LoRaMacMlmeRequest>
 800cfee:	4603      	mov	r3, r0
 800cff0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	4a06      	ldr	r2, [pc, #24]	; (800d010 <LmHandlerDeviceTimeReq+0x34>)
 800cff6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cff8:	7dfb      	ldrb	r3, [r7, #23]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cffe:	2300      	movs	r3, #0
 800d000:	e001      	b.n	800d006 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800d006:	4618      	mov	r0, r3
 800d008:	3718      	adds	r7, #24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	200005ec 	.word	0x200005ec

0800d014 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	bc80      	pop	{r7}
 800d02a:	4770      	bx	lr

0800d02c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08e      	sub	sp, #56	; 0x38
 800d030:	af00      	add	r7, sp, #0
 800d032:	4603      	mov	r3, r0
 800d034:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d036:	2300      	movs	r3, #0
 800d038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800d03c:	f002 f9b4 	bl	800f3a8 <LoRaMacIsBusy>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d002      	beq.n	800d04c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d046:	f06f 0301 	mvn.w	r3, #1
 800d04a:	e071      	b.n	800d130 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800d04c:	f7ff fedc 	bl	800ce08 <LmHandlerJoinStatus>
 800d050:	4603      	mov	r3, r0
 800d052:	2b01      	cmp	r3, #1
 800d054:	d002      	beq.n	800d05c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d056:	f06f 0302 	mvn.w	r3, #2
 800d05a:	e069      	b.n	800d130 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d05c:	2300      	movs	r3, #0
 800d05e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d060:	f107 030c 	add.w	r3, r7, #12
 800d064:	4618      	mov	r0, r3
 800d066:	f005 f885 	bl	8012174 <LoRaMacMibGetRequestConfirm>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d074:	e05c      	b.n	800d130 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800d076:	7c3b      	ldrb	r3, [r7, #16]
 800d078:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800d07c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800d080:	79fb      	ldrb	r3, [r7, #7]
 800d082:	429a      	cmp	r2, r3
 800d084:	d052      	beq.n	800d12c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800d086:	79fb      	ldrb	r3, [r7, #7]
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d028      	beq.n	800d0de <LmHandlerRequestClass+0xb2>
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	dc48      	bgt.n	800d122 <LmHandlerRequestClass+0xf6>
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <LmHandlerRequestClass+0x6e>
 800d094:	2b01      	cmp	r3, #1
 800d096:	d01e      	beq.n	800d0d6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800d098:	e043      	b.n	800d122 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800d09a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d041      	beq.n	800d126 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d0a6:	f107 030c 	add.w	r3, r7, #12
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f005 fa3a 	bl	8012524 <LoRaMacMibSetRequestConfirm>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10b      	bne.n	800d0ce <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d0b6:	4b20      	ldr	r3, [pc, #128]	; (800d138 <LmHandlerRequestClass+0x10c>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d032      	beq.n	800d126 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d0c0:	4b1d      	ldr	r3, [pc, #116]	; (800d138 <LmHandlerRequestClass+0x10c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c6:	79fa      	ldrb	r2, [r7, #7]
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4798      	blx	r3
                break;
 800d0cc:	e02b      	b.n	800d126 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d0ce:	23ff      	movs	r3, #255	; 0xff
 800d0d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d0d4:	e027      	b.n	800d126 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d0d6:	23ff      	movs	r3, #255	; 0xff
 800d0d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d0dc:	e026      	b.n	800d12c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800d0de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d003      	beq.n	800d0ee <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d0e6:	23ff      	movs	r3, #255	; 0xff
 800d0e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d0ec:	e01d      	b.n	800d12a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d0f2:	f107 030c 	add.w	r3, r7, #12
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f005 fa14 	bl	8012524 <LoRaMacMibSetRequestConfirm>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d10b      	bne.n	800d11a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d102:	4b0d      	ldr	r3, [pc, #52]	; (800d138 <LmHandlerRequestClass+0x10c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00e      	beq.n	800d12a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d10c:	4b0a      	ldr	r3, [pc, #40]	; (800d138 <LmHandlerRequestClass+0x10c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d112:	79fa      	ldrb	r2, [r7, #7]
 800d114:	4610      	mov	r0, r2
 800d116:	4798      	blx	r3
                break;
 800d118:	e007      	b.n	800d12a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d11a:	23ff      	movs	r3, #255	; 0xff
 800d11c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d120:	e003      	b.n	800d12a <LmHandlerRequestClass+0xfe>
                break;
 800d122:	bf00      	nop
 800d124:	e002      	b.n	800d12c <LmHandlerRequestClass+0x100>
                break;
 800d126:	bf00      	nop
 800d128:	e000      	b.n	800d12c <LmHandlerRequestClass+0x100>
                break;
 800d12a:	bf00      	nop
        }
    }
    return errorStatus;
 800d12c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d130:	4618      	mov	r0, r3
 800d132:	3738      	adds	r7, #56	; 0x38
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	200005c0 	.word	0x200005c0

0800d13c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08c      	sub	sp, #48	; 0x30
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d102      	bne.n	800d150 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d14e:	e010      	b.n	800d172 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d150:	2300      	movs	r3, #0
 800d152:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d154:	f107 0308 	add.w	r3, r7, #8
 800d158:	4618      	mov	r0, r3
 800d15a:	f005 f80b 	bl	8012174 <LoRaMacMibGetRequestConfirm>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d168:	e003      	b.n	800d172 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d16a:	7b3a      	ldrb	r2, [r7, #12]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3730      	adds	r7, #48	; 0x30
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b08c      	sub	sp, #48	; 0x30
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d18a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d18e:	e016      	b.n	800d1be <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d190:	2320      	movs	r3, #32
 800d192:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800d194:	f107 0308 	add.w	r3, r7, #8
 800d198:	4618      	mov	r0, r3
 800d19a:	f004 ffeb 	bl	8012174 <LoRaMacMibGetRequestConfirm>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d1a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1a8:	e009      	b.n	800d1be <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d1aa:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f993 2000 	ldrsb.w	r2, [r3]
 800d1b8:	4b03      	ldr	r3, [pc, #12]	; (800d1c8 <LmHandlerGetTxDatarate+0x4c>)
 800d1ba:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3730      	adds	r7, #48	; 0x30
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	200005a8 	.word	0x200005a8

0800d1cc <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b08c      	sub	sp, #48	; 0x30
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d1d4:	2323      	movs	r3, #35	; 0x23
 800d1d6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d1dc:	f107 0308 	add.w	r3, r7, #8
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f005 f99f 	bl	8012524 <LoRaMacMibSetRequestConfirm>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d1ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1f0:	e000      	b.n	800d1f4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3730      	adds	r7, #48	; 0x30
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d204:	4b18      	ldr	r3, [pc, #96]	; (800d268 <McpsConfirm+0x6c>)
 800d206:	2201      	movs	r2, #1
 800d208:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	785a      	ldrb	r2, [r3, #1]
 800d20e:	4b16      	ldr	r3, [pc, #88]	; (800d268 <McpsConfirm+0x6c>)
 800d210:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	789b      	ldrb	r3, [r3, #2]
 800d216:	b25a      	sxtb	r2, r3
 800d218:	4b13      	ldr	r3, [pc, #76]	; (800d268 <McpsConfirm+0x6c>)
 800d21a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	4a11      	ldr	r2, [pc, #68]	; (800d268 <McpsConfirm+0x6c>)
 800d222:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d22a:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <McpsConfirm+0x6c>)
 800d22c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	b2da      	uxtb	r2, r3
 800d234:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <McpsConfirm+0x6c>)
 800d236:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	791b      	ldrb	r3, [r3, #4]
 800d23c:	461a      	mov	r2, r3
 800d23e:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <McpsConfirm+0x6c>)
 800d240:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800d242:	4b0a      	ldr	r3, [pc, #40]	; (800d26c <McpsConfirm+0x70>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d24c:	4b07      	ldr	r3, [pc, #28]	; (800d26c <McpsConfirm+0x70>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	4805      	ldr	r0, [pc, #20]	; (800d268 <McpsConfirm+0x6c>)
 800d254:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d256:	6879      	ldr	r1, [r7, #4]
 800d258:	2000      	movs	r0, #0
 800d25a:	f000 f9e9 	bl	800d630 <LmHandlerPackagesNotify>
}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	200000a0 	.word	0x200000a0
 800d26c:	200005c0 	.word	0x200005c0

0800d270 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d27e:	4b2d      	ldr	r3, [pc, #180]	; (800d334 <McpsIndication+0xc4>)
 800d280:	2201      	movs	r2, #1
 800d282:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	785a      	ldrb	r2, [r3, #1]
 800d288:	4b2a      	ldr	r3, [pc, #168]	; (800d334 <McpsIndication+0xc4>)
 800d28a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d28c:	4b29      	ldr	r3, [pc, #164]	; (800d334 <McpsIndication+0xc4>)
 800d28e:	785b      	ldrb	r3, [r3, #1]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d14b      	bne.n	800d32c <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	791b      	ldrb	r3, [r3, #4]
 800d298:	b25a      	sxtb	r2, r3
 800d29a:	4b26      	ldr	r3, [pc, #152]	; (800d334 <McpsIndication+0xc4>)
 800d29c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2a4:	b25a      	sxtb	r2, r3
 800d2a6:	4b23      	ldr	r3, [pc, #140]	; (800d334 <McpsIndication+0xc4>)
 800d2a8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d2b0:	4b20      	ldr	r3, [pc, #128]	; (800d334 <McpsIndication+0xc4>)
 800d2b2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	78da      	ldrb	r2, [r3, #3]
 800d2b8:	4b1e      	ldr	r3, [pc, #120]	; (800d334 <McpsIndication+0xc4>)
 800d2ba:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	4a1c      	ldr	r2, [pc, #112]	; (800d334 <McpsIndication+0xc4>)
 800d2c2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	78db      	ldrb	r3, [r3, #3]
 800d2c8:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7b1b      	ldrb	r3, [r3, #12]
 800d2ce:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <McpsIndication+0xc8>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d2e0:	4b15      	ldr	r3, [pc, #84]	; (800d338 <McpsIndication+0xc8>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e6:	f107 0210 	add.w	r2, r7, #16
 800d2ea:	4912      	ldr	r1, [pc, #72]	; (800d334 <McpsIndication+0xc4>)
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800d2f0:	4b11      	ldr	r3, [pc, #68]	; (800d338 <McpsIndication+0xc8>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d007      	beq.n	800d30a <McpsIndication+0x9a>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7e1b      	ldrb	r3, [r3, #24]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d003      	beq.n	800d30a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d302:	4b0d      	ldr	r3, [pc, #52]	; (800d338 <McpsIndication+0xc8>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d308:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d30a:	6879      	ldr	r1, [r7, #4]
 800d30c:	2001      	movs	r0, #1
 800d30e:	f000 f98f 	bl	800d630 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d312:	f107 030f 	add.w	r3, r7, #15
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff ff10 	bl	800d13c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	795b      	ldrb	r3, [r3, #5]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d004      	beq.n	800d32e <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800d324:	4b05      	ldr	r3, [pc, #20]	; (800d33c <McpsIndication+0xcc>)
 800d326:	2201      	movs	r2, #1
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	e000      	b.n	800d32e <McpsIndication+0xbe>
        return;
 800d32c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	200000bc 	.word	0x200000bc
 800d338:	200005c0 	.word	0x200005c0
 800d33c:	200005f0 	.word	0x200005f0

0800d340 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08c      	sub	sp, #48	; 0x30
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d348:	4b49      	ldr	r3, [pc, #292]	; (800d470 <MlmeConfirm+0x130>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	785a      	ldrb	r2, [r3, #1]
 800d352:	4b47      	ldr	r3, [pc, #284]	; (800d470 <MlmeConfirm+0x130>)
 800d354:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d356:	4b47      	ldr	r3, [pc, #284]	; (800d474 <MlmeConfirm+0x134>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d004      	beq.n	800d36a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d360:	4b44      	ldr	r3, [pc, #272]	; (800d474 <MlmeConfirm+0x134>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d366:	4842      	ldr	r0, [pc, #264]	; (800d470 <MlmeConfirm+0x130>)
 800d368:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d36a:	6879      	ldr	r1, [r7, #4]
 800d36c:	2002      	movs	r0, #2
 800d36e:	f000 f95f 	bl	800d630 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	3b01      	subs	r3, #1
 800d378:	2b0b      	cmp	r3, #11
 800d37a:	d872      	bhi.n	800d462 <MlmeConfirm+0x122>
 800d37c:	a201      	add	r2, pc, #4	; (adr r2, 800d384 <MlmeConfirm+0x44>)
 800d37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d382:	bf00      	nop
 800d384:	0800d3b5 	.word	0x0800d3b5
 800d388:	0800d463 	.word	0x0800d463
 800d38c:	0800d463 	.word	0x0800d463
 800d390:	0800d463 	.word	0x0800d463
 800d394:	0800d431 	.word	0x0800d431
 800d398:	0800d463 	.word	0x0800d463
 800d39c:	0800d463 	.word	0x0800d463
 800d3a0:	0800d463 	.word	0x0800d463
 800d3a4:	0800d463 	.word	0x0800d463
 800d3a8:	0800d463 	.word	0x0800d463
 800d3ac:	0800d449 	.word	0x0800d449
 800d3b0:	0800d463 	.word	0x0800d463
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800d3b4:	2306      	movs	r3, #6
 800d3b6:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d3b8:	f107 0308 	add.w	r3, r7, #8
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f004 fed9 	bl	8012174 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d3c2:	4b2d      	ldr	r3, [pc, #180]	; (800d478 <MlmeConfirm+0x138>)
 800d3c4:	79db      	ldrb	r3, [r3, #7]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7ff fa78 	bl	800c8c0 <SecureElementSetDevAddr>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d102      	bne.n	800d3dc <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	4a28      	ldr	r2, [pc, #160]	; (800d47c <MlmeConfirm+0x13c>)
 800d3da:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d3dc:	4828      	ldr	r0, [pc, #160]	; (800d480 <MlmeConfirm+0x140>)
 800d3de:	f7ff fecd 	bl	800d17c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d3e2:	4828      	ldr	r0, [pc, #160]	; (800d484 <MlmeConfirm+0x144>)
 800d3e4:	f000 fa74 	bl	800d8d0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d3e8:	4b21      	ldr	r3, [pc, #132]	; (800d470 <MlmeConfirm+0x130>)
 800d3ea:	785b      	ldrb	r3, [r3, #1]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d108      	bne.n	800d402 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d3f0:	4b21      	ldr	r3, [pc, #132]	; (800d478 <MlmeConfirm+0x138>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d3f6:	4b24      	ldr	r3, [pc, #144]	; (800d488 <MlmeConfirm+0x148>)
 800d3f8:	785b      	ldrb	r3, [r3, #1]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fe16 	bl	800d02c <LmHandlerRequestClass>
 800d400:	e002      	b.n	800d408 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d402:	4b1d      	ldr	r3, [pc, #116]	; (800d478 <MlmeConfirm+0x138>)
 800d404:	22ff      	movs	r2, #255	; 0xff
 800d406:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d408:	4b1a      	ldr	r3, [pc, #104]	; (800d474 <MlmeConfirm+0x134>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d004      	beq.n	800d41c <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d412:	4b18      	ldr	r3, [pc, #96]	; (800d474 <MlmeConfirm+0x134>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d418:	4817      	ldr	r0, [pc, #92]	; (800d478 <MlmeConfirm+0x138>)
 800d41a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d41c:	4b14      	ldr	r3, [pc, #80]	; (800d470 <MlmeConfirm+0x130>)
 800d41e:	785b      	ldrb	r3, [r3, #1]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d120      	bne.n	800d466 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800d424:	4b14      	ldr	r3, [pc, #80]	; (800d478 <MlmeConfirm+0x138>)
 800d426:	79db      	ldrb	r3, [r3, #7]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe fff1 	bl	800c410 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800d42e:	e01a      	b.n	800d466 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800d430:	4b16      	ldr	r3, [pc, #88]	; (800d48c <MlmeConfirm+0x14c>)
 800d432:	2201      	movs	r2, #1
 800d434:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	7a1a      	ldrb	r2, [r3, #8]
 800d43a:	4b14      	ldr	r3, [pc, #80]	; (800d48c <MlmeConfirm+0x14c>)
 800d43c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7a5a      	ldrb	r2, [r3, #9]
 800d442:	4b12      	ldr	r3, [pc, #72]	; (800d48c <MlmeConfirm+0x14c>)
 800d444:	74da      	strb	r2, [r3, #19]
            }
            break;
 800d446:	e00f      	b.n	800d468 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	785b      	ldrb	r3, [r3, #1]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d105      	bne.n	800d45c <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d450:	4b0d      	ldr	r3, [pc, #52]	; (800d488 <MlmeConfirm+0x148>)
 800d452:	7c1b      	ldrb	r3, [r3, #16]
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff fddd 	bl	800d014 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800d45a:	e005      	b.n	800d468 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800d45c:	f7ff fdbe 	bl	800cfdc <LmHandlerDeviceTimeReq>
            break;
 800d460:	e002      	b.n	800d468 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d462:	bf00      	nop
 800d464:	e000      	b.n	800d468 <MlmeConfirm+0x128>
            break;
 800d466:	bf00      	nop
    }
}
 800d468:	bf00      	nop
 800d46a:	3730      	adds	r7, #48	; 0x30
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	200000a0 	.word	0x200000a0
 800d474:	200005c0 	.word	0x200005c0
 800d478:	20000094 	.word	0x20000094
 800d47c:	2000056c 	.word	0x2000056c
 800d480:	20000098 	.word	0x20000098
 800d484:	20000099 	.word	0x20000099
 800d488:	200005a8 	.word	0x200005a8
 800d48c:	200000bc 	.word	0x200000bc

0800d490 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d49a:	4b20      	ldr	r3, [pc, #128]	; (800d51c <MlmeIndication+0x8c>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	785a      	ldrb	r2, [r3, #1]
 800d4a4:	4b1d      	ldr	r3, [pc, #116]	; (800d51c <MlmeIndication+0x8c>)
 800d4a6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	789b      	ldrb	r3, [r3, #2]
 800d4ac:	b25a      	sxtb	r2, r3
 800d4ae:	4b1b      	ldr	r3, [pc, #108]	; (800d51c <MlmeIndication+0x8c>)
 800d4b0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4b8:	b25a      	sxtb	r2, r3
 800d4ba:	4b18      	ldr	r3, [pc, #96]	; (800d51c <MlmeIndication+0x8c>)
 800d4bc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d4c4:	4b15      	ldr	r3, [pc, #84]	; (800d51c <MlmeIndication+0x8c>)
 800d4c6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	78da      	ldrb	r2, [r3, #3]
 800d4cc:	4b13      	ldr	r3, [pc, #76]	; (800d51c <MlmeIndication+0x8c>)
 800d4ce:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	4a11      	ldr	r2, [pc, #68]	; (800d51c <MlmeIndication+0x8c>)
 800d4d6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800d4d8:	4b11      	ldr	r3, [pc, #68]	; (800d520 <MlmeIndication+0x90>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00d      	beq.n	800d4fe <MlmeIndication+0x6e>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	2b0a      	cmp	r3, #10
 800d4e8:	d009      	beq.n	800d4fe <MlmeIndication+0x6e>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2b0e      	cmp	r3, #14
 800d4f0:	d005      	beq.n	800d4fe <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d4f2:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <MlmeIndication+0x90>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	4908      	ldr	r1, [pc, #32]	; (800d51c <MlmeIndication+0x8c>)
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	2003      	movs	r0, #3
 800d502:	f000 f895 	bl	800d630 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	2b0a      	cmp	r3, #10
 800d50c:	d001      	beq.n	800d512 <MlmeIndication+0x82>
 800d50e:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d510:	e000      	b.n	800d514 <MlmeIndication+0x84>
            break;
 800d512:	bf00      	nop
    }
}
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	200000bc 	.word	0x200000bc
 800d520:	200005c0 	.word	0x200005c0

0800d524 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	6039      	str	r1, [r7, #0]
 800d52e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d104      	bne.n	800d544 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800d53a:	f000 fa8b 	bl	800da54 <LmhpCompliancePackageFactory>
 800d53e:	4603      	mov	r3, r0
 800d540:	60fb      	str	r3, [r7, #12]
                break;
 800d542:	e00d      	b.n	800d560 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800d544:	f107 020c 	add.w	r2, r7, #12
 800d548:	79fb      	ldrb	r3, [r7, #7]
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 ff73 	bl	800e438 <LmhpPackagesRegister>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800d558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d55c:	e03b      	b.n	800d5d6 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800d55e:	bf00      	nop
            }
    }
    if( package != NULL )
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d035      	beq.n	800d5d2 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	491d      	ldr	r1, [pc, #116]	; (800d5e0 <LmHandlerPackageRegister+0xbc>)
 800d56c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d570:	79fb      	ldrb	r3, [r7, #7]
 800d572:	4a1b      	ldr	r2, [pc, #108]	; (800d5e0 <LmHandlerPackageRegister+0xbc>)
 800d574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d578:	4a1a      	ldr	r2, [pc, #104]	; (800d5e4 <LmHandlerPackageRegister+0xc0>)
 800d57a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d57c:	4b1a      	ldr	r3, [pc, #104]	; (800d5e8 <LmHandlerPackageRegister+0xc4>)
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	79fb      	ldrb	r3, [r7, #7]
 800d582:	4917      	ldr	r1, [pc, #92]	; (800d5e0 <LmHandlerPackageRegister+0xbc>)
 800d584:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d588:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d58a:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d58c:	4b16      	ldr	r3, [pc, #88]	; (800d5e8 <LmHandlerPackageRegister+0xc4>)
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	4913      	ldr	r1, [pc, #76]	; (800d5e0 <LmHandlerPackageRegister+0xbc>)
 800d594:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d598:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d59a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d59c:	79fb      	ldrb	r3, [r7, #7]
 800d59e:	4a10      	ldr	r2, [pc, #64]	; (800d5e0 <LmHandlerPackageRegister+0xbc>)
 800d5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5a4:	4a11      	ldr	r2, [pc, #68]	; (800d5ec <LmHandlerPackageRegister+0xc8>)
 800d5a6:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d5a8:	4b0f      	ldr	r3, [pc, #60]	; (800d5e8 <LmHandlerPackageRegister+0xc4>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	490c      	ldr	r1, [pc, #48]	; (800d5e0 <LmHandlerPackageRegister+0xbc>)
 800d5b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d5b4:	6992      	ldr	r2, [r2, #24]
 800d5b6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	4a09      	ldr	r2, [pc, #36]	; (800d5e0 <LmHandlerPackageRegister+0xbc>)
 800d5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	4a0b      	ldr	r2, [pc, #44]	; (800d5f0 <LmHandlerPackageRegister+0xcc>)
 800d5c4:	6851      	ldr	r1, [r2, #4]
 800d5c6:	4a0a      	ldr	r2, [pc, #40]	; (800d5f0 <LmHandlerPackageRegister+0xcc>)
 800d5c8:	7852      	ldrb	r2, [r2, #1]
 800d5ca:	6838      	ldr	r0, [r7, #0]
 800d5cc:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e001      	b.n	800d5d6 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	20000594 	.word	0x20000594
 800d5e4:	0800ccc5 	.word	0x0800ccc5
 800d5e8:	200005c0 	.word	0x200005c0
 800d5ec:	0800cfdd 	.word	0x0800cfdd
 800d5f0:	200000d0 	.word	0x200000d0

0800d5f4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d5fe:	79fb      	ldrb	r3, [r7, #7]
 800d600:	2b04      	cmp	r3, #4
 800d602:	d80e      	bhi.n	800d622 <LmHandlerPackageIsInitialized+0x2e>
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	4a09      	ldr	r2, [pc, #36]	; (800d62c <LmHandlerPackageIsInitialized+0x38>)
 800d608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d007      	beq.n	800d622 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	4a05      	ldr	r2, [pc, #20]	; (800d62c <LmHandlerPackageIsInitialized+0x38>)
 800d616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	4798      	blx	r3
 800d61e:	4603      	mov	r3, r0
 800d620:	e000      	b.n	800d624 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d622:	2300      	movs	r3, #0
    }
}
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20000594 	.word	0x20000594

0800d630 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	6039      	str	r1, [r7, #0]
 800d63a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d63c:	2300      	movs	r3, #0
 800d63e:	73fb      	strb	r3, [r7, #15]
 800d640:	e067      	b.n	800d712 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d646:	4a37      	ldr	r2, [pc, #220]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d05a      	beq.n	800d706 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d650:	79fb      	ldrb	r3, [r7, #7]
 800d652:	2b03      	cmp	r3, #3
 800d654:	d84e      	bhi.n	800d6f4 <LmHandlerPackagesNotify+0xc4>
 800d656:	a201      	add	r2, pc, #4	; (adr r2, 800d65c <LmHandlerPackagesNotify+0x2c>)
 800d658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65c:	0800d66d 	.word	0x0800d66d
 800d660:	0800d68f 	.word	0x0800d68f
 800d664:	0800d6b1 	.word	0x0800d6b1
 800d668:	0800d6d3 	.word	0x0800d6d3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d66c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d670:	4a2c      	ldr	r2, [pc, #176]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d03d      	beq.n	800d6f8 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800d67c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d680:	4a28      	ldr	r2, [pc, #160]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	6838      	ldr	r0, [r7, #0]
 800d68a:	4798      	blx	r3
                        }
                        break;
 800d68c:	e034      	b.n	800d6f8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d692:	4a24      	ldr	r2, [pc, #144]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d698:	69db      	ldr	r3, [r3, #28]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d02e      	beq.n	800d6fc <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800d69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6a2:	4a20      	ldr	r2, [pc, #128]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	6838      	ldr	r0, [r7, #0]
 800d6ac:	4798      	blx	r3
                        }
                        break;
 800d6ae:	e025      	b.n	800d6fc <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6b4:	4a1b      	ldr	r2, [pc, #108]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ba:	6a1b      	ldr	r3, [r3, #32]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d01f      	beq.n	800d700 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800d6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c4:	4a17      	ldr	r2, [pc, #92]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ca:	6a1b      	ldr	r3, [r3, #32]
 800d6cc:	6838      	ldr	r0, [r7, #0]
 800d6ce:	4798      	blx	r3
                        }
                        break;
 800d6d0:	e016      	b.n	800d700 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d6:	4a13      	ldr	r2, [pc, #76]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d010      	beq.n	800d704 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6e6:	4a0f      	ldr	r2, [pc, #60]	; (800d724 <LmHandlerPackagesNotify+0xf4>)
 800d6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ee:	6838      	ldr	r0, [r7, #0]
 800d6f0:	4798      	blx	r3
                        }
                        break;
 800d6f2:	e007      	b.n	800d704 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800d6f4:	bf00      	nop
 800d6f6:	e006      	b.n	800d706 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d6f8:	bf00      	nop
 800d6fa:	e004      	b.n	800d706 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d6fc:	bf00      	nop
 800d6fe:	e002      	b.n	800d706 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d700:	bf00      	nop
 800d702:	e000      	b.n	800d706 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d704:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	3301      	adds	r3, #1
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	73fb      	strb	r3, [r7, #15]
 800d712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d716:	2b04      	cmp	r3, #4
 800d718:	dd93      	ble.n	800d642 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800d71a:	bf00      	nop
 800d71c:	bf00      	nop
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	20000594 	.word	0x20000594

0800d728 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d72e:	2300      	movs	r3, #0
 800d730:	71fb      	strb	r3, [r7, #7]
 800d732:	e018      	b.n	800d766 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800d734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d738:	4a0f      	ldr	r2, [pc, #60]	; (800d778 <LmHandlerPackageIsTxPending+0x50>)
 800d73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00b      	beq.n	800d75a <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d746:	4a0c      	ldr	r2, [pc, #48]	; (800d778 <LmHandlerPackageIsTxPending+0x50>)
 800d748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	4798      	blx	r3
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d001      	beq.n	800d75a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d756:	2301      	movs	r3, #1
 800d758:	e00a      	b.n	800d770 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d75a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	3301      	adds	r3, #1
 800d762:	b2db      	uxtb	r3, r3
 800d764:	71fb      	strb	r3, [r7, #7]
 800d766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d76a:	2b04      	cmp	r3, #4
 800d76c:	dde2      	ble.n	800d734 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20000594 	.word	0x20000594

0800d77c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d782:	2300      	movs	r3, #0
 800d784:	71fb      	strb	r3, [r7, #7]
 800d786:	e022      	b.n	800d7ce <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d78c:	4a14      	ldr	r2, [pc, #80]	; (800d7e0 <LmHandlerPackagesProcess+0x64>)
 800d78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d015      	beq.n	800d7c2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d79a:	4a11      	ldr	r2, [pc, #68]	; (800d7e0 <LmHandlerPackagesProcess+0x64>)
 800d79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00d      	beq.n	800d7c2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d7a6:	79fb      	ldrb	r3, [r7, #7]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff ff23 	bl	800d5f4 <LmHandlerPackageIsInitialized>
 800d7ae:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d006      	beq.n	800d7c2 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d7b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7b8:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <LmHandlerPackagesProcess+0x64>)
 800d7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	71fb      	strb	r3, [r7, #7]
 800d7ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7d2:	2b04      	cmp	r3, #4
 800d7d4:	ddd8      	ble.n	800d788 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d7d6:	bf00      	nop
 800d7d8:	bf00      	nop
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	20000594 	.word	0x20000594

0800d7e4 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d7ee:	4a09      	ldr	r2, [pc, #36]	; (800d814 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800d7f4:	4b08      	ldr	r3, [pc, #32]	; (800d818 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d005      	beq.n	800d80a <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800d7fe:	4b06      	ldr	r3, [pc, #24]	; (800d818 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d804:	79fa      	ldrb	r2, [r7, #7]
 800d806:	4610      	mov	r0, r2
 800d808:	4798      	blx	r3
    }
}
 800d80a:	bf00      	nop
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	200005a8 	.word	0x200005a8
 800d818:	200005c0 	.word	0x200005c0

0800d81c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	4603      	mov	r3, r0
 800d824:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d826:	4a09      	ldr	r2, [pc, #36]	; (800d84c <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800d828:	79fb      	ldrb	r3, [r7, #7]
 800d82a:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800d82c:	4b08      	ldr	r3, [pc, #32]	; (800d850 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800d836:	4b06      	ldr	r3, [pc, #24]	; (800d850 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83c:	79fa      	ldrb	r2, [r7, #7]
 800d83e:	4610      	mov	r0, r2
 800d840:	4798      	blx	r3
    }
}
 800d842:	bf00      	nop
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	200005a8 	.word	0x200005a8
 800d850:	200005c0 	.word	0x200005c0

0800d854 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	4603      	mov	r3, r0
 800d85c:	6039      	str	r1, [r7, #0]
 800d85e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d102      	bne.n	800d86c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d86a:	e00e      	b.n	800d88a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800d86c:	79fb      	ldrb	r3, [r7, #7]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d002      	beq.n	800d878 <LmHandlerGetVersion+0x24>
 800d872:	2b01      	cmp	r3, #1
 800d874:	d004      	beq.n	800d880 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800d876:	e007      	b.n	800d888 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	4a06      	ldr	r2, [pc, #24]	; (800d894 <LmHandlerGetVersion+0x40>)
 800d87c:	601a      	str	r2, [r3, #0]
            break;
 800d87e:	e003      	b.n	800d888 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	4a05      	ldr	r2, [pc, #20]	; (800d898 <LmHandlerGetVersion+0x44>)
 800d884:	601a      	str	r2, [r3, #0]
            break;
 800d886:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	bc80      	pop	{r7}
 800d892:	4770      	bx	lr
 800d894:	01000400 	.word	0x01000400
 800d898:	02010001 	.word	0x02010001

0800d89c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d8a0:	f005 fce0 	bl	8013264 <LoRaMacDeInitialization>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d101      	bne.n	800d8ae <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	e001      	b.n	800d8b2 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d8ae:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d8ba:	f004 fb93 	bl	8011fe4 <LoRaMacHalt>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e001      	b.n	800d8cc <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d8c8:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b08c      	sub	sp, #48	; 0x30
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d102      	bne.n	800d8e4 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d8de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8e2:	e016      	b.n	800d912 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d8e4:	2321      	movs	r3, #33	; 0x21
 800d8e6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d8e8:	f107 0308 	add.w	r3, r7, #8
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f004 fc41 	bl	8012174 <LoRaMacMibGetRequestConfirm>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d8f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8fc:	e009      	b.n	800d912 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d8fe:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f993 2000 	ldrsb.w	r2, [r3]
 800d90c:	4b03      	ldr	r3, [pc, #12]	; (800d91c <LmHandlerGetTxPower+0x4c>)
 800d90e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3730      	adds	r7, #48	; 0x30
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	200005a8 	.word	0x200005a8

0800d920 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08e      	sub	sp, #56	; 0x38
 800d924:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d926:	2300      	movs	r3, #0
 800d928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d930:	f7ff ffc1 	bl	800d8b6 <LmHandlerHalt>
 800d934:	4603      	mov	r3, r0
 800d936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800d93a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d12f      	bne.n	800d9a2 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d942:	f000 f859 	bl	800d9f8 <NvmDataMgmtStoreBegin>
 800d946:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	f113 0f02 	cmn.w	r3, #2
 800d94e:	d103      	bne.n	800d958 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d950:	23f8      	movs	r3, #248	; 0xf8
 800d952:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d956:	e01c      	b.n	800d992 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800d958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d104      	bne.n	800d968 <LmHandlerNvmDataStore+0x48>
 800d95e:	4b1b      	ldr	r3, [pc, #108]	; (800d9cc <LmHandlerNvmDataStore+0xac>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	695b      	ldr	r3, [r3, #20]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d103      	bne.n	800d970 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d968:	23ff      	movs	r3, #255	; 0xff
 800d96a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d96e:	e010      	b.n	800d992 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800d970:	2327      	movs	r3, #39	; 0x27
 800d972:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d974:	463b      	mov	r3, r7
 800d976:	4618      	mov	r0, r3
 800d978:	f004 fbfc 	bl	8012174 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800d980:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800d984:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d986:	4b11      	ldr	r3, [pc, #68]	; (800d9cc <LmHandlerNvmDataStore+0xac>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	695b      	ldr	r3, [r3, #20]
 800d98c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d98e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d990:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d992:	f000 f847 	bl	800da24 <NvmDataMgmtStoreEnd>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d99c:	23ff      	movs	r3, #255	; 0xff
 800d99e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d9a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d109      	bne.n	800d9be <LmHandlerNvmDataStore+0x9e>
 800d9aa:	4b08      	ldr	r3, [pc, #32]	; (800d9cc <LmHandlerNvmDataStore+0xac>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d9b4:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <LmHandlerNvmDataStore+0xac>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	69db      	ldr	r3, [r3, #28]
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	4798      	blx	r3
    }

    return lmhStatus;
 800d9be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3738      	adds	r7, #56	; 0x38
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	200005c0 	.word	0x200005c0

0800d9d0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d9da:	4b06      	ldr	r3, [pc, #24]	; (800d9f4 <NvmDataMgmtEvent+0x24>)
 800d9dc:	881a      	ldrh	r2, [r3, #0]
 800d9de:	88fb      	ldrh	r3, [r7, #6]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	4b03      	ldr	r3, [pc, #12]	; (800d9f4 <NvmDataMgmtEvent+0x24>)
 800d9e6:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bc80      	pop	{r7}
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	200006e8 	.word	0x200006e8

0800d9f8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d9fc:	4b08      	ldr	r3, [pc, #32]	; (800da20 <NvmDataMgmtStoreBegin+0x28>)
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d102      	bne.n	800da0a <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800da04:	f06f 0301 	mvn.w	r3, #1
 800da08:	e008      	b.n	800da1c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800da0a:	f004 fac3 	bl	8011f94 <LoRaMacStop>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800da14:	f06f 0302 	mvn.w	r3, #2
 800da18:	e000      	b.n	800da1c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800da1a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	200006e8 	.word	0x200006e8

0800da24 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800da28:	4b03      	ldr	r3, [pc, #12]	; (800da38 <NvmDataMgmtStoreEnd+0x14>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800da2e:	f004 faa3 	bl	8011f78 <LoRaMacStart>
    return NVM_DATA_OK;
 800da32:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800da34:	4618      	mov	r0, r3
 800da36:	bd80      	pop	{r7, pc}
 800da38:	200006e8 	.word	0x200006e8

0800da3c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800da40:	2220      	movs	r2, #32
 800da42:	2100      	movs	r1, #0
 800da44:	4802      	ldr	r0, [pc, #8]	; (800da50 <ClassBStatusReset+0x14>)
 800da46:	f00b fb03 	bl	8019050 <memset1>
}
 800da4a:	bf00      	nop
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20000700 	.word	0x20000700

0800da54 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800da54:	b480      	push	{r7}
 800da56:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800da58:	4b02      	ldr	r3, [pc, #8]	; (800da64 <LmhpCompliancePackageFactory+0x10>)
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bc80      	pop	{r7}
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	200000d8 	.word	0x200000d8

0800da68 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d018      	beq.n	800daae <LmhpComplianceInit+0x46>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d015      	beq.n	800daae <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800da82:	4a19      	ldr	r2, [pc, #100]	; (800dae8 <LmhpComplianceInit+0x80>)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800da88:	4a18      	ldr	r2, [pc, #96]	; (800daec <LmhpComplianceInit+0x84>)
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800da8e:	4a17      	ldr	r2, [pc, #92]	; (800daec <LmhpComplianceInit+0x84>)
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800da94:	4b15      	ldr	r3, [pc, #84]	; (800daec <LmhpComplianceInit+0x84>)
 800da96:	2201      	movs	r2, #1
 800da98:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800da9a:	2300      	movs	r3, #0
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	4b14      	ldr	r3, [pc, #80]	; (800daf0 <LmhpComplianceInit+0x88>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800daa6:	4813      	ldr	r0, [pc, #76]	; (800daf4 <LmhpComplianceInit+0x8c>)
 800daa8:	f00f fb8e 	bl	801d1c8 <UTIL_TIMER_Create>
 800daac:	e005      	b.n	800daba <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800daae:	4b0e      	ldr	r3, [pc, #56]	; (800dae8 <LmhpComplianceInit+0x80>)
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800dab4:	4b0d      	ldr	r3, [pc, #52]	; (800daec <LmhpComplianceInit+0x84>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800daba:	4b0c      	ldr	r3, [pc, #48]	; (800daec <LmhpComplianceInit+0x84>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800dac0:	f7ff ffbc 	bl	800da3c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800dac4:	4b09      	ldr	r3, [pc, #36]	; (800daec <LmhpComplianceInit+0x84>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800daca:	4b08      	ldr	r3, [pc, #32]	; (800daec <LmhpComplianceInit+0x84>)
 800dacc:	2200      	movs	r2, #0
 800dace:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800dad0:	4b06      	ldr	r3, [pc, #24]	; (800daec <LmhpComplianceInit+0x84>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800dad8:	4b04      	ldr	r3, [pc, #16]	; (800daec <LmhpComplianceInit+0x84>)
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800dae0:	bf00      	nop
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	20000724 	.word	0x20000724
 800daec:	200006ec 	.word	0x200006ec
 800daf0:	0800e3f1 	.word	0x0800e3f1
 800daf4:	20000728 	.word	0x20000728

0800daf8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800daf8:	b480      	push	{r7}
 800dafa:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800dafc:	4b02      	ldr	r3, [pc, #8]	; (800db08 <LmhpComplianceIsInitialized+0x10>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
}
 800db00:	4618      	mov	r0, r3
 800db02:	46bd      	mov	sp, r7
 800db04:	bc80      	pop	{r7}
 800db06:	4770      	bx	lr
 800db08:	200006ec 	.word	0x200006ec

0800db0c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800db0c:	b480      	push	{r7}
 800db0e:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800db10:	4b02      	ldr	r3, [pc, #8]	; (800db1c <LmhpComplianceIsTxPending+0x10>)
 800db12:	785b      	ldrb	r3, [r3, #1]
}
 800db14:	4618      	mov	r0, r3
 800db16:	46bd      	mov	sp, r7
 800db18:	bc80      	pop	{r7}
 800db1a:	4770      	bx	lr
 800db1c:	200006ec 	.word	0x200006ec

0800db20 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800db20:	b590      	push	{r4, r7, lr}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800db26:	4b33      	ldr	r3, [pc, #204]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db28:	785b      	ldrb	r3, [r3, #1]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d03e      	beq.n	800dbac <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800db2e:	f00f fd09 	bl	801d544 <UTIL_TIMER_GetCurrentTime>
 800db32:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800db34:	4b2f      	ldr	r3, [pc, #188]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db36:	685c      	ldr	r4, [r3, #4]
 800db38:	f7ff f8ba 	bl	800ccb0 <LmHandlerGetDutyCycleWaitTime>
 800db3c:	4603      	mov	r3, r0
 800db3e:	4423      	add	r3, r4
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	429a      	cmp	r2, r3
 800db44:	d941      	bls.n	800dbca <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800db46:	4b2b      	ldr	r3, [pc, #172]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db48:	7a9b      	ldrb	r3, [r3, #10]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d03d      	beq.n	800dbca <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800db4e:	23e0      	movs	r3, #224	; 0xe0
 800db50:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800db52:	4b28      	ldr	r3, [pc, #160]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db54:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800db56:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800db58:	4b26      	ldr	r3, [pc, #152]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db5a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800db5c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800db5e:	23ff      	movs	r3, #255	; 0xff
 800db60:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800db62:	4b24      	ldr	r3, [pc, #144]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db64:	7a19      	ldrb	r1, [r3, #8]
 800db66:	463b      	mov	r3, r7
 800db68:	2201      	movs	r2, #1
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7ff f968 	bl	800ce40 <LmHandlerSend>
 800db70:	4603      	mov	r3, r0
 800db72:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800db74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <LmhpComplianceProcess+0x66>
 800db7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800db80:	f113 0f07 	cmn.w	r3, #7
 800db84:	d106      	bne.n	800db94 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800db86:	4b1b      	ldr	r3, [pc, #108]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db88:	2200      	movs	r2, #0
 800db8a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800db8c:	4b19      	ldr	r3, [pc, #100]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800db8e:	2200      	movs	r2, #0
 800db90:	729a      	strb	r2, [r3, #10]
 800db92:	e007      	b.n	800dba4 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800db94:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800db98:	4817      	ldr	r0, [pc, #92]	; (800dbf8 <LmhpComplianceProcess+0xd8>)
 800db9a:	f00f fc29 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800db9e:	4816      	ldr	r0, [pc, #88]	; (800dbf8 <LmhpComplianceProcess+0xd8>)
 800dba0:	f00f fb48 	bl	801d234 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800dba4:	4a13      	ldr	r2, [pc, #76]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6053      	str	r3, [r2, #4]
 800dbaa:	e00e      	b.n	800dbca <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800dbac:	4b11      	ldr	r3, [pc, #68]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800dbae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d009      	beq.n	800dbca <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800dbbe:	4b0d      	ldr	r3, [pc, #52]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800dbc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fa31 	bl	800d02c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800dbca:	4b0a      	ldr	r3, [pc, #40]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800dbcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00a      	beq.n	800dbea <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800dbd4:	4b07      	ldr	r3, [pc, #28]	; (800dbf4 <LmhpComplianceProcess+0xd4>)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800dbdc:	4b07      	ldr	r3, [pc, #28]	; (800dbfc <LmhpComplianceProcess+0xdc>)
 800dbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800dbe4:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <LmhpComplianceProcess+0xdc>)
 800dbe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe8:	4798      	blx	r3
        }
    }
}
 800dbea:	bf00      	nop
 800dbec:	3714      	adds	r7, #20
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd90      	pop	{r4, r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	200006ec 	.word	0x200006ec
 800dbf8:	20000728 	.word	0x20000728
 800dbfc:	200000d8 	.word	0x200000d8

0800dc00 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800dc00:	b5b0      	push	{r4, r5, r7, lr}
 800dc02:	b0a4      	sub	sp, #144	; 0x90
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800dc0e:	4bd0      	ldr	r3, [pc, #832]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	f083 0301 	eor.w	r3, r3, #1
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f040 83bf 	bne.w	800e39c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	78db      	ldrb	r3, [r3, #3]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d103      	bne.n	800dc2e <LmhpComplianceOnMcpsIndication+0x2e>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	7b9b      	ldrb	r3, [r3, #14]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d005      	beq.n	800dc3a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800dc2e:	4bc8      	ldr	r3, [pc, #800]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800dc30:	8a1b      	ldrh	r3, [r3, #16]
 800dc32:	3301      	adds	r3, #1
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	4bc6      	ldr	r3, [pc, #792]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800dc38:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	7b5b      	ldrb	r3, [r3, #13]
 800dc3e:	f083 0301 	eor.w	r3, r3, #1
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f040 83ab 	bne.w	800e3a0 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	78db      	ldrb	r3, [r3, #3]
 800dc4e:	2be0      	cmp	r3, #224	; 0xe0
 800dc50:	f040 83a8 	bne.w	800e3a4 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800dc54:	4bbe      	ldr	r3, [pc, #760]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	689a      	ldr	r2, [r3, #8]
 800dc5e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dc62:	1c59      	adds	r1, r3, #1
 800dc64:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dc68:	4413      	add	r3, r2
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b7f      	cmp	r3, #127	; 0x7f
 800dc6e:	f200 8372 	bhi.w	800e356 <LmhpComplianceOnMcpsIndication+0x756>
 800dc72:	a201      	add	r2, pc, #4	; (adr r2, 800dc78 <LmhpComplianceOnMcpsIndication+0x78>)
 800dc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc78:	0800de79 	.word	0x0800de79
 800dc7c:	0800debd 	.word	0x0800debd
 800dc80:	0800dec7 	.word	0x0800dec7
 800dc84:	0800dedd 	.word	0x0800dedd
 800dc88:	0800deff 	.word	0x0800deff
 800dc8c:	0800df2d 	.word	0x0800df2d
 800dc90:	0800df59 	.word	0x0800df59
 800dc94:	0800dfb7 	.word	0x0800dfb7
 800dc98:	0800e00f 	.word	0x0800e00f
 800dc9c:	0800e07b 	.word	0x0800e07b
 800dca0:	0800e0cb 	.word	0x0800e0cb
 800dca4:	0800e357 	.word	0x0800e357
 800dca8:	0800e357 	.word	0x0800e357
 800dcac:	0800e357 	.word	0x0800e357
 800dcb0:	0800e357 	.word	0x0800e357
 800dcb4:	0800e357 	.word	0x0800e357
 800dcb8:	0800e357 	.word	0x0800e357
 800dcbc:	0800e357 	.word	0x0800e357
 800dcc0:	0800e357 	.word	0x0800e357
 800dcc4:	0800e357 	.word	0x0800e357
 800dcc8:	0800e357 	.word	0x0800e357
 800dccc:	0800e357 	.word	0x0800e357
 800dcd0:	0800e357 	.word	0x0800e357
 800dcd4:	0800e357 	.word	0x0800e357
 800dcd8:	0800e357 	.word	0x0800e357
 800dcdc:	0800e357 	.word	0x0800e357
 800dce0:	0800e357 	.word	0x0800e357
 800dce4:	0800e357 	.word	0x0800e357
 800dce8:	0800e357 	.word	0x0800e357
 800dcec:	0800e357 	.word	0x0800e357
 800dcf0:	0800e357 	.word	0x0800e357
 800dcf4:	0800e357 	.word	0x0800e357
 800dcf8:	0800e0d3 	.word	0x0800e0d3
 800dcfc:	0800e0e5 	.word	0x0800e0e5
 800dd00:	0800e0ed 	.word	0x0800e0ed
 800dd04:	0800e357 	.word	0x0800e357
 800dd08:	0800e357 	.word	0x0800e357
 800dd0c:	0800e357 	.word	0x0800e357
 800dd10:	0800e357 	.word	0x0800e357
 800dd14:	0800e357 	.word	0x0800e357
 800dd18:	0800e357 	.word	0x0800e357
 800dd1c:	0800e357 	.word	0x0800e357
 800dd20:	0800e357 	.word	0x0800e357
 800dd24:	0800e357 	.word	0x0800e357
 800dd28:	0800e357 	.word	0x0800e357
 800dd2c:	0800e357 	.word	0x0800e357
 800dd30:	0800e357 	.word	0x0800e357
 800dd34:	0800e357 	.word	0x0800e357
 800dd38:	0800e357 	.word	0x0800e357
 800dd3c:	0800e357 	.word	0x0800e357
 800dd40:	0800e357 	.word	0x0800e357
 800dd44:	0800e357 	.word	0x0800e357
 800dd48:	0800e357 	.word	0x0800e357
 800dd4c:	0800e357 	.word	0x0800e357
 800dd50:	0800e357 	.word	0x0800e357
 800dd54:	0800e357 	.word	0x0800e357
 800dd58:	0800e357 	.word	0x0800e357
 800dd5c:	0800e357 	.word	0x0800e357
 800dd60:	0800e357 	.word	0x0800e357
 800dd64:	0800e357 	.word	0x0800e357
 800dd68:	0800e357 	.word	0x0800e357
 800dd6c:	0800e357 	.word	0x0800e357
 800dd70:	0800e357 	.word	0x0800e357
 800dd74:	0800e357 	.word	0x0800e357
 800dd78:	0800e357 	.word	0x0800e357
 800dd7c:	0800e357 	.word	0x0800e357
 800dd80:	0800e357 	.word	0x0800e357
 800dd84:	0800e357 	.word	0x0800e357
 800dd88:	0800e357 	.word	0x0800e357
 800dd8c:	0800e357 	.word	0x0800e357
 800dd90:	0800e357 	.word	0x0800e357
 800dd94:	0800e357 	.word	0x0800e357
 800dd98:	0800e357 	.word	0x0800e357
 800dd9c:	0800e357 	.word	0x0800e357
 800dda0:	0800e357 	.word	0x0800e357
 800dda4:	0800e357 	.word	0x0800e357
 800dda8:	0800e357 	.word	0x0800e357
 800ddac:	0800e357 	.word	0x0800e357
 800ddb0:	0800e357 	.word	0x0800e357
 800ddb4:	0800e357 	.word	0x0800e357
 800ddb8:	0800e357 	.word	0x0800e357
 800ddbc:	0800e357 	.word	0x0800e357
 800ddc0:	0800e357 	.word	0x0800e357
 800ddc4:	0800e357 	.word	0x0800e357
 800ddc8:	0800e357 	.word	0x0800e357
 800ddcc:	0800e357 	.word	0x0800e357
 800ddd0:	0800e357 	.word	0x0800e357
 800ddd4:	0800e357 	.word	0x0800e357
 800ddd8:	0800e357 	.word	0x0800e357
 800dddc:	0800e357 	.word	0x0800e357
 800dde0:	0800e357 	.word	0x0800e357
 800dde4:	0800e357 	.word	0x0800e357
 800dde8:	0800e357 	.word	0x0800e357
 800ddec:	0800e357 	.word	0x0800e357
 800ddf0:	0800e357 	.word	0x0800e357
 800ddf4:	0800e357 	.word	0x0800e357
 800ddf8:	0800e357 	.word	0x0800e357
 800ddfc:	0800e357 	.word	0x0800e357
 800de00:	0800e357 	.word	0x0800e357
 800de04:	0800e357 	.word	0x0800e357
 800de08:	0800e357 	.word	0x0800e357
 800de0c:	0800e357 	.word	0x0800e357
 800de10:	0800e357 	.word	0x0800e357
 800de14:	0800e357 	.word	0x0800e357
 800de18:	0800e357 	.word	0x0800e357
 800de1c:	0800e357 	.word	0x0800e357
 800de20:	0800e357 	.word	0x0800e357
 800de24:	0800e357 	.word	0x0800e357
 800de28:	0800e357 	.word	0x0800e357
 800de2c:	0800e357 	.word	0x0800e357
 800de30:	0800e357 	.word	0x0800e357
 800de34:	0800e357 	.word	0x0800e357
 800de38:	0800e357 	.word	0x0800e357
 800de3c:	0800e357 	.word	0x0800e357
 800de40:	0800e357 	.word	0x0800e357
 800de44:	0800e357 	.word	0x0800e357
 800de48:	0800e357 	.word	0x0800e357
 800de4c:	0800e357 	.word	0x0800e357
 800de50:	0800e357 	.word	0x0800e357
 800de54:	0800e357 	.word	0x0800e357
 800de58:	0800e357 	.word	0x0800e357
 800de5c:	0800e357 	.word	0x0800e357
 800de60:	0800e357 	.word	0x0800e357
 800de64:	0800e357 	.word	0x0800e357
 800de68:	0800e357 	.word	0x0800e357
 800de6c:	0800e11f 	.word	0x0800e11f
 800de70:	0800e1cf 	.word	0x0800e1cf
 800de74:	0800e201 	.word	0x0800e201
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800de78:	4b35      	ldr	r3, [pc, #212]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800de7a:	68da      	ldr	r2, [r3, #12]
 800de7c:	4b34      	ldr	r3, [pc, #208]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800de7e:	7a9b      	ldrb	r3, [r3, #10]
 800de80:	1c59      	adds	r1, r3, #1
 800de82:	b2c8      	uxtb	r0, r1
 800de84:	4932      	ldr	r1, [pc, #200]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800de86:	7288      	strb	r0, [r1, #10]
 800de88:	4413      	add	r3, r2
 800de8a:	2200      	movs	r2, #0
 800de8c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800de8e:	4b30      	ldr	r3, [pc, #192]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800de90:	68da      	ldr	r2, [r3, #12]
 800de92:	4b2f      	ldr	r3, [pc, #188]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800de94:	7a9b      	ldrb	r3, [r3, #10]
 800de96:	1c59      	adds	r1, r3, #1
 800de98:	b2c8      	uxtb	r0, r1
 800de9a:	492d      	ldr	r1, [pc, #180]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800de9c:	7288      	strb	r0, [r1, #10]
 800de9e:	4413      	add	r3, r2
 800dea0:	2206      	movs	r2, #6
 800dea2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800dea4:	4b2a      	ldr	r3, [pc, #168]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800dea6:	68da      	ldr	r2, [r3, #12]
 800dea8:	4b29      	ldr	r3, [pc, #164]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800deaa:	7a9b      	ldrb	r3, [r3, #10]
 800deac:	1c59      	adds	r1, r3, #1
 800deae:	b2c8      	uxtb	r0, r1
 800deb0:	4927      	ldr	r1, [pc, #156]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800deb2:	7288      	strb	r0, [r1, #10]
 800deb4:	4413      	add	r3, r2
 800deb6:	2201      	movs	r2, #1
 800deb8:	701a      	strb	r2, [r3, #0]
                break;
 800deba:	e257      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800debc:	4b24      	ldr	r3, [pc, #144]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800dec4:	e252      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800dec6:	4b23      	ldr	r3, [pc, #140]	; (800df54 <LmhpComplianceOnMcpsIndication+0x354>)
 800dec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deca:	2b00      	cmp	r3, #0
 800decc:	f000 8245 	beq.w	800e35a <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800ded0:	4b20      	ldr	r3, [pc, #128]	; (800df54 <LmhpComplianceOnMcpsIndication+0x354>)
 800ded2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded4:	2101      	movs	r1, #1
 800ded6:	2002      	movs	r0, #2
 800ded8:	4798      	blx	r3
                }
                break;
 800deda:	e23e      	b.n	800e35a <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689a      	ldr	r2, [r3, #8]
 800dee0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dee4:	1c59      	adds	r1, r3, #1
 800dee6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800deea:	4413      	add	r3, r2
 800deec:	781a      	ldrb	r2, [r3, #0]
 800deee:	4b18      	ldr	r3, [pc, #96]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800def0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800def4:	4b16      	ldr	r3, [pc, #88]	; (800df50 <LmhpComplianceOnMcpsIndication+0x350>)
 800def6:	2201      	movs	r2, #1
 800def8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800defc:	e236      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800defe:	2304      	movs	r3, #4
 800df00:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	689a      	ldr	r2, [r3, #8]
 800df06:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800df0a:	1c59      	adds	r1, r3, #1
 800df0c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800df10:	4413      	add	r3, r2
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	bf14      	ite	ne
 800df18:	2301      	movne	r3, #1
 800df1a:	2300      	moveq	r3, #0
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800df20:	f107 0308 	add.w	r3, r7, #8
 800df24:	4618      	mov	r0, r3
 800df26:	f004 fafd 	bl	8012524 <LoRaMacMibSetRequestConfirm>
                break;
 800df2a:	e21f      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	689a      	ldr	r2, [r3, #8]
 800df30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800df34:	1c59      	adds	r1, r3, #1
 800df36:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800df3a:	4413      	add	r3, r2
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	bf14      	ite	ne
 800df42:	2301      	movne	r3, #1
 800df44:	2300      	moveq	r3, #0
 800df46:	b2db      	uxtb	r3, r3
 800df48:	4618      	mov	r0, r3
 800df4a:	f005 f965 	bl	8013218 <LoRaMacTestSetDutyCycleOn>
                break;
 800df4e:	e20d      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
 800df50:	200006ec 	.word	0x200006ec
 800df54:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800df58:	4ba5      	ldr	r3, [pc, #660]	; (800e1f0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800df5a:	f107 0408 	add.w	r4, r7, #8
 800df5e:	461d      	mov	r5, r3
 800df60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800df6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	689a      	ldr	r2, [r3, #8]
 800df74:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800df78:	1c59      	adds	r1, r3, #1
 800df7a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800df7e:	4413      	add	r3, r2
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800df86:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800df8a:	2b0a      	cmp	r3, #10
 800df8c:	f200 81e7 	bhi.w	800e35e <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800df90:	4b98      	ldr	r3, [pc, #608]	; (800e1f4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	f000 81e1 	beq.w	800e35e <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800df9c:	4b95      	ldr	r3, [pc, #596]	; (800e1f4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	685a      	ldr	r2, [r3, #4]
 800dfa2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	3390      	adds	r3, #144	; 0x90
 800dfaa:	443b      	add	r3, r7
 800dfac:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	4790      	blx	r2
                    }
                }
                break;
 800dfb4:	e1d3      	b.n	800e35e <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	689a      	ldr	r2, [r3, #8]
 800dfba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dfbe:	1c59      	adds	r1, r3, #1
 800dfc0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dfc4:	4413      	add	r3, r2
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800dfcc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d004      	beq.n	800dfde <LmhpComplianceOnMcpsIndication+0x3de>
 800dfd4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	f040 81c2 	bne.w	800e362 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800dfde:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	bf14      	ite	ne
 800dfe6:	2301      	movne	r3, #1
 800dfe8:	2300      	moveq	r3, #0
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	461a      	mov	r2, r3
 800dfee:	4b82      	ldr	r3, [pc, #520]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dff0:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800dff2:	4b80      	ldr	r3, [pc, #512]	; (800e1f4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f000 81b2 	beq.w	800e362 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800dffe:	4b7d      	ldr	r3, [pc, #500]	; (800e1f4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	4a7c      	ldr	r2, [pc, #496]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e006:	7a12      	ldrb	r2, [r2, #8]
 800e008:	4610      	mov	r0, r2
 800e00a:	4798      	blx	r3
                    }
                }
                break;
 800e00c:	e1a9      	b.n	800e362 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800e00e:	4b7a      	ldr	r3, [pc, #488]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e010:	68da      	ldr	r2, [r3, #12]
 800e012:	4b79      	ldr	r3, [pc, #484]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e014:	7a9b      	ldrb	r3, [r3, #10]
 800e016:	1c59      	adds	r1, r3, #1
 800e018:	b2c8      	uxtb	r0, r1
 800e01a:	4977      	ldr	r1, [pc, #476]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e01c:	7288      	strb	r0, [r1, #10]
 800e01e:	4413      	add	r3, r2
 800e020:	2208      	movs	r2, #8
 800e022:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e024:	2301      	movs	r3, #1
 800e026:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800e02a:	e019      	b.n	800e060 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	689a      	ldr	r2, [r3, #8]
 800e030:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e034:	1c59      	adds	r1, r3, #1
 800e036:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e03a:	4413      	add	r3, r2
 800e03c:	781a      	ldrb	r2, [r3, #0]
 800e03e:	4b6e      	ldr	r3, [pc, #440]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e040:	68d9      	ldr	r1, [r3, #12]
 800e042:	4b6d      	ldr	r3, [pc, #436]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e044:	7a9b      	ldrb	r3, [r3, #10]
 800e046:	1c58      	adds	r0, r3, #1
 800e048:	b2c4      	uxtb	r4, r0
 800e04a:	486b      	ldr	r0, [pc, #428]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e04c:	7284      	strb	r4, [r0, #10]
 800e04e:	440b      	add	r3, r1
 800e050:	3201      	adds	r2, #1
 800e052:	b2d2      	uxtb	r2, r2
 800e054:	701a      	strb	r2, [r3, #0]
                     i++ )
 800e056:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e05a:	3301      	adds	r3, #1
 800e05c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e060:	4b65      	ldr	r3, [pc, #404]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e062:	7a5a      	ldrb	r2, [r3, #9]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	7b1b      	ldrb	r3, [r3, #12]
 800e068:	4293      	cmp	r3, r2
 800e06a:	bf28      	it	cs
 800e06c:	4613      	movcs	r3, r2
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800e074:	429a      	cmp	r2, r3
 800e076:	d3d9      	bcc.n	800e02c <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800e078:	e178      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800e07a:	4b5f      	ldr	r3, [pc, #380]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e07c:	68da      	ldr	r2, [r3, #12]
 800e07e:	4b5e      	ldr	r3, [pc, #376]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e080:	7a9b      	ldrb	r3, [r3, #10]
 800e082:	1c59      	adds	r1, r3, #1
 800e084:	b2c8      	uxtb	r0, r1
 800e086:	495c      	ldr	r1, [pc, #368]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e088:	7288      	strb	r0, [r1, #10]
 800e08a:	4413      	add	r3, r2
 800e08c:	2209      	movs	r2, #9
 800e08e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800e090:	4b59      	ldr	r3, [pc, #356]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e092:	8a18      	ldrh	r0, [r3, #16]
 800e094:	4b58      	ldr	r3, [pc, #352]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e096:	68da      	ldr	r2, [r3, #12]
 800e098:	4b57      	ldr	r3, [pc, #348]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e09a:	7a9b      	ldrb	r3, [r3, #10]
 800e09c:	1c59      	adds	r1, r3, #1
 800e09e:	b2cc      	uxtb	r4, r1
 800e0a0:	4955      	ldr	r1, [pc, #340]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0a2:	728c      	strb	r4, [r1, #10]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	b2c2      	uxtb	r2, r0
 800e0a8:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800e0aa:	4b53      	ldr	r3, [pc, #332]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0ac:	8a1b      	ldrh	r3, [r3, #16]
 800e0ae:	0a1b      	lsrs	r3, r3, #8
 800e0b0:	b298      	uxth	r0, r3
 800e0b2:	4b51      	ldr	r3, [pc, #324]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0b4:	68da      	ldr	r2, [r3, #12]
 800e0b6:	4b50      	ldr	r3, [pc, #320]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0b8:	7a9b      	ldrb	r3, [r3, #10]
 800e0ba:	1c59      	adds	r1, r3, #1
 800e0bc:	b2cc      	uxtb	r4, r1
 800e0be:	494e      	ldr	r1, [pc, #312]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0c0:	728c      	strb	r4, [r1, #10]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	b2c2      	uxtb	r2, r0
 800e0c6:	701a      	strb	r2, [r3, #0]
                break;
 800e0c8:	e150      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800e0ca:	4b4b      	ldr	r3, [pc, #300]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	821a      	strh	r2, [r3, #16]
                break;
 800e0d0:	e14c      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800e0d2:	2305      	movs	r3, #5
 800e0d4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800e0d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f004 fdcb 	bl	8012c78 <LoRaMacMlmeRequest>
                break;
 800e0e2:	e143      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800e0e4:	4b45      	ldr	r3, [pc, #276]	; (800e1fc <LmhpComplianceOnMcpsIndication+0x5fc>)
 800e0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e8:	4798      	blx	r3
                break;
 800e0ea:	e13f      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	689a      	ldr	r2, [r3, #8]
 800e0f0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0f4:	1c59      	adds	r1, r3, #1
 800e0f6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e0fa:	4413      	add	r3, r2
 800e0fc:	781a      	ldrb	r2, [r3, #0]
 800e0fe:	4b3e      	ldr	r3, [pc, #248]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e100:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800e102:	4b3c      	ldr	r3, [pc, #240]	; (800e1f4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 812c 	beq.w	800e366 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800e10e:	4b39      	ldr	r3, [pc, #228]	; (800e1f4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	4a38      	ldr	r2, [pc, #224]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e116:	7d52      	ldrb	r2, [r2, #21]
 800e118:	4610      	mov	r0, r2
 800e11a:	4798      	blx	r3
                }
                break;
 800e11c:	e123      	b.n	800e366 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	7b1b      	ldrb	r3, [r3, #12]
 800e122:	2b07      	cmp	r3, #7
 800e124:	f040 8121 	bne.w	800e36a <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e128:	2306      	movs	r3, #6
 800e12a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	689a      	ldr	r2, [r3, #8]
 800e132:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e136:	4413      	add	r3, r2
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	b21a      	sxth	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6899      	ldr	r1, [r3, #8]
 800e140:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e144:	3301      	adds	r3, #1
 800e146:	440b      	add	r3, r1
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	021b      	lsls	r3, r3, #8
 800e14c:	b21b      	sxth	r3, r3
 800e14e:	4313      	orrs	r3, r2
 800e150:	b21b      	sxth	r3, r3
 800e152:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800e154:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800e158:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e15c:	3302      	adds	r3, #2
 800e15e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	689a      	ldr	r2, [r3, #8]
 800e166:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e16a:	4413      	add	r3, r2
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	4619      	mov	r1, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	689a      	ldr	r2, [r3, #8]
 800e174:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e178:	3301      	adds	r3, #1
 800e17a:	4413      	add	r3, r2
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	021b      	lsls	r3, r3, #8
 800e180:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6899      	ldr	r1, [r3, #8]
 800e188:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e18c:	3302      	adds	r3, #2
 800e18e:	440b      	add	r3, r1
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e194:	4313      	orrs	r3, r2
 800e196:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e198:	2364      	movs	r3, #100	; 0x64
 800e19a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800e19e:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800e1a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e1a4:	3303      	adds	r3, #3
 800e1a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	689a      	ldr	r2, [r3, #8]
 800e1ae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e1b2:	1c59      	adds	r1, r3, #1
 800e1b4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e1b8:	4413      	add	r3, r2
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	b25b      	sxtb	r3, r3
 800e1be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800e1c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f004 fd56 	bl	8012c78 <LoRaMacMlmeRequest>
                }
                break;
 800e1cc:	e0cd      	b.n	800e36a <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e1ce:	233b      	movs	r3, #59	; 0x3b
 800e1d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e1da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f004 f9a0 	bl	8012524 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800e1e4:	4b04      	ldr	r3, [pc, #16]	; (800e1f8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800e1ec:	e0be      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
 800e1ee:	bf00      	nop
 800e1f0:	0801e41c 	.word	0x0801e41c
 800e1f4:	20000724 	.word	0x20000724
 800e1f8:	200006ec 	.word	0x200006ec
 800e1fc:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800e200:	232a      	movs	r3, #42	; 0x2a
 800e202:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800e204:	f107 0308 	add.w	r3, r7, #8
 800e208:	4618      	mov	r0, r3
 800e20a:	f003 ffb3 	bl	8012174 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e216:	4b65      	ldr	r3, [pc, #404]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e218:	68da      	ldr	r2, [r3, #12]
 800e21a:	4b64      	ldr	r3, [pc, #400]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e21c:	7a9b      	ldrb	r3, [r3, #10]
 800e21e:	1c59      	adds	r1, r3, #1
 800e220:	b2c8      	uxtb	r0, r1
 800e222:	4962      	ldr	r1, [pc, #392]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e224:	7288      	strb	r0, [r1, #10]
 800e226:	4413      	add	r3, r2
 800e228:	227f      	movs	r2, #127	; 0x7f
 800e22a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e22c:	4b60      	ldr	r3, [pc, #384]	; (800e3b0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	4b5e      	ldr	r3, [pc, #376]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e232:	68d9      	ldr	r1, [r3, #12]
 800e234:	4b5d      	ldr	r3, [pc, #372]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e236:	7a9b      	ldrb	r3, [r3, #10]
 800e238:	1c58      	adds	r0, r3, #1
 800e23a:	b2c4      	uxtb	r4, r0
 800e23c:	485b      	ldr	r0, [pc, #364]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e23e:	7284      	strb	r4, [r0, #10]
 800e240:	440b      	add	r3, r1
 800e242:	78d2      	ldrb	r2, [r2, #3]
 800e244:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e246:	4b5a      	ldr	r3, [pc, #360]	; (800e3b0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	4b58      	ldr	r3, [pc, #352]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e24c:	68d9      	ldr	r1, [r3, #12]
 800e24e:	4b57      	ldr	r3, [pc, #348]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e250:	7a9b      	ldrb	r3, [r3, #10]
 800e252:	1c58      	adds	r0, r3, #1
 800e254:	b2c4      	uxtb	r4, r0
 800e256:	4855      	ldr	r0, [pc, #340]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e258:	7284      	strb	r4, [r0, #10]
 800e25a:	440b      	add	r3, r1
 800e25c:	7892      	ldrb	r2, [r2, #2]
 800e25e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e260:	4b53      	ldr	r3, [pc, #332]	; (800e3b0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	4b51      	ldr	r3, [pc, #324]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e266:	68d9      	ldr	r1, [r3, #12]
 800e268:	4b50      	ldr	r3, [pc, #320]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e26a:	7a9b      	ldrb	r3, [r3, #10]
 800e26c:	1c58      	adds	r0, r3, #1
 800e26e:	b2c4      	uxtb	r4, r0
 800e270:	484e      	ldr	r0, [pc, #312]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e272:	7284      	strb	r4, [r0, #10]
 800e274:	440b      	add	r3, r1
 800e276:	7852      	ldrb	r2, [r2, #1]
 800e278:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e27a:	4b4d      	ldr	r3, [pc, #308]	; (800e3b0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	4b4b      	ldr	r3, [pc, #300]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e280:	68d9      	ldr	r1, [r3, #12]
 800e282:	4b4a      	ldr	r3, [pc, #296]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e284:	7a9b      	ldrb	r3, [r3, #10]
 800e286:	1c58      	adds	r0, r3, #1
 800e288:	b2c4      	uxtb	r4, r0
 800e28a:	4848      	ldr	r0, [pc, #288]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e28c:	7284      	strb	r4, [r0, #10]
 800e28e:	440b      	add	r3, r1
 800e290:	7812      	ldrb	r2, [r2, #0]
 800e292:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e294:	4b45      	ldr	r3, [pc, #276]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e296:	68da      	ldr	r2, [r3, #12]
 800e298:	4b44      	ldr	r3, [pc, #272]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e29a:	7a9b      	ldrb	r3, [r3, #10]
 800e29c:	1c59      	adds	r1, r3, #1
 800e29e:	b2c8      	uxtb	r0, r1
 800e2a0:	4942      	ldr	r1, [pc, #264]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2a2:	7288      	strb	r0, [r1, #10]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e2aa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e2ac:	4b3f      	ldr	r3, [pc, #252]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	4b3e      	ldr	r3, [pc, #248]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2b2:	7a9b      	ldrb	r3, [r3, #10]
 800e2b4:	1c59      	adds	r1, r3, #1
 800e2b6:	b2c8      	uxtb	r0, r1
 800e2b8:	493c      	ldr	r1, [pc, #240]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2ba:	7288      	strb	r0, [r1, #10]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800e2c2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e2c4:	4b39      	ldr	r3, [pc, #228]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2c6:	68da      	ldr	r2, [r3, #12]
 800e2c8:	4b38      	ldr	r3, [pc, #224]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2ca:	7a9b      	ldrb	r3, [r3, #10]
 800e2cc:	1c59      	adds	r1, r3, #1
 800e2ce:	b2c8      	uxtb	r0, r1
 800e2d0:	4936      	ldr	r1, [pc, #216]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2d2:	7288      	strb	r0, [r1, #10]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800e2da:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e2dc:	4b33      	ldr	r3, [pc, #204]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2de:	68da      	ldr	r2, [r3, #12]
 800e2e0:	4b32      	ldr	r3, [pc, #200]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2e2:	7a9b      	ldrb	r3, [r3, #10]
 800e2e4:	1c59      	adds	r1, r3, #1
 800e2e6:	b2c8      	uxtb	r0, r1
 800e2e8:	4930      	ldr	r1, [pc, #192]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2ea:	7288      	strb	r0, [r1, #10]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e2f2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e2f4:	4b2d      	ldr	r3, [pc, #180]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2f6:	68da      	ldr	r2, [r3, #12]
 800e2f8:	4b2c      	ldr	r3, [pc, #176]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2fa:	7a9b      	ldrb	r3, [r3, #10]
 800e2fc:	1c59      	adds	r1, r3, #1
 800e2fe:	b2c8      	uxtb	r0, r1
 800e300:	492a      	ldr	r1, [pc, #168]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e302:	7288      	strb	r0, [r1, #10]
 800e304:	4413      	add	r3, r2
 800e306:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e30a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e30c:	4b27      	ldr	r3, [pc, #156]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e30e:	68da      	ldr	r2, [r3, #12]
 800e310:	4b26      	ldr	r3, [pc, #152]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e312:	7a9b      	ldrb	r3, [r3, #10]
 800e314:	1c59      	adds	r1, r3, #1
 800e316:	b2c8      	uxtb	r0, r1
 800e318:	4924      	ldr	r1, [pc, #144]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e31a:	7288      	strb	r0, [r1, #10]
 800e31c:	4413      	add	r3, r2
 800e31e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e322:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e324:	4b21      	ldr	r3, [pc, #132]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e326:	68da      	ldr	r2, [r3, #12]
 800e328:	4b20      	ldr	r3, [pc, #128]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e32a:	7a9b      	ldrb	r3, [r3, #10]
 800e32c:	1c59      	adds	r1, r3, #1
 800e32e:	b2c8      	uxtb	r0, r1
 800e330:	491e      	ldr	r1, [pc, #120]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e332:	7288      	strb	r0, [r1, #10]
 800e334:	4413      	add	r3, r2
 800e336:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e33a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e33c:	4b1b      	ldr	r3, [pc, #108]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e33e:	68da      	ldr	r2, [r3, #12]
 800e340:	4b1a      	ldr	r3, [pc, #104]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e342:	7a9b      	ldrb	r3, [r3, #10]
 800e344:	1c59      	adds	r1, r3, #1
 800e346:	b2c8      	uxtb	r0, r1
 800e348:	4918      	ldr	r1, [pc, #96]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e34a:	7288      	strb	r0, [r1, #10]
 800e34c:	4413      	add	r3, r2
 800e34e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e352:	701a      	strb	r2, [r3, #0]
                break;
 800e354:	e00a      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800e356:	bf00      	nop
 800e358:	e008      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e35a:	bf00      	nop
 800e35c:	e006      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e35e:	bf00      	nop
 800e360:	e004      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e362:	bf00      	nop
 800e364:	e002      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e366:	bf00      	nop
 800e368:	e000      	b.n	800e36c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e36a:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e36c:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e36e:	7a9b      	ldrb	r3, [r3, #10]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00c      	beq.n	800e38e <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800e374:	4b0f      	ldr	r3, [pc, #60]	; (800e3b4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e376:	7a5b      	ldrb	r3, [r3, #9]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d114      	bne.n	800e3a6 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800e37c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e380:	480c      	ldr	r0, [pc, #48]	; (800e3b4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e382:	f00f f835 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800e386:	480b      	ldr	r0, [pc, #44]	; (800e3b4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e388:	f00e ff54 	bl	801d234 <UTIL_TIMER_Start>
 800e38c:	e00b      	b.n	800e3a6 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800e38e:	4809      	ldr	r0, [pc, #36]	; (800e3b4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e390:	f00e ffbe 	bl	801d310 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e394:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e396:	2200      	movs	r2, #0
 800e398:	705a      	strb	r2, [r3, #1]
 800e39a:	e004      	b.n	800e3a6 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e39c:	bf00      	nop
 800e39e:	e002      	b.n	800e3a6 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e3a0:	bf00      	nop
 800e3a2:	e000      	b.n	800e3a6 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e3a4:	bf00      	nop
    }
}
 800e3a6:	3790      	adds	r7, #144	; 0x90
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ac:	200006ec 	.word	0x200006ec
 800e3b0:	20000724 	.word	0x20000724
 800e3b4:	20000728 	.word	0x20000728

0800e3b8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800e3c0:	bf00      	nop
    }
}
 800e3c2:	bf00      	nop
 800e3c4:	370c      	adds	r7, #12
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bc80      	pop	{r7}
 800e3ca:	4770      	bx	lr

0800e3cc <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e3d4:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <LmhpComplianceOnMlmeIndication+0x20>)
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	f083 0301 	eor.w	r3, r3, #1
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b00      	cmp	r3, #0
    {
        return;
 800e3e0:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bc80      	pop	{r7}
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	200006ec 	.word	0x200006ec

0800e3f0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800e3f8:	4b08      	ldr	r3, [pc, #32]	; (800e41c <OnProcessTimer+0x2c>)
 800e3fa:	7a9b      	ldrb	r3, [r3, #10]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800e400:	4b06      	ldr	r3, [pc, #24]	; (800e41c <OnProcessTimer+0x2c>)
 800e402:	2201      	movs	r2, #1
 800e404:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800e406:	4b06      	ldr	r3, [pc, #24]	; (800e420 <OnProcessTimer+0x30>)
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800e40e:	4b04      	ldr	r3, [pc, #16]	; (800e420 <OnProcessTimer+0x30>)
 800e410:	695b      	ldr	r3, [r3, #20]
 800e412:	4798      	blx	r3
    }
}
 800e414:	bf00      	nop
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	200006ec 	.word	0x200006ec
 800e420:	200000d8 	.word	0x200000d8

0800e424 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	bc80      	pop	{r7}
 800e436:	4770      	bx	lr

0800e438 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	6039      	str	r1, [r7, #0]
 800e442:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800e444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bc80      	pop	{r7}
 800e450:	4770      	bx	lr
	...

0800e454 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800e454:	b590      	push	{r4, r7, lr}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e45a:	f00f f873 	bl	801d544 <UTIL_TIMER_GetCurrentTime>
 800e45e:	4603      	mov	r3, r0
 800e460:	4a0f      	ldr	r2, [pc, #60]	; (800e4a0 <OnRadioTxDone+0x4c>)
 800e462:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e464:	4c0f      	ldr	r4, [pc, #60]	; (800e4a4 <OnRadioTxDone+0x50>)
 800e466:	463b      	mov	r3, r7
 800e468:	4618      	mov	r0, r3
 800e46a:	f00e f9e9 	bl	801c840 <SysTimeGet>
 800e46e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e472:	463a      	mov	r2, r7
 800e474:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e478:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e47c:	4a0a      	ldr	r2, [pc, #40]	; (800e4a8 <OnRadioTxDone+0x54>)
 800e47e:	7813      	ldrb	r3, [r2, #0]
 800e480:	f043 0320 	orr.w	r3, r3, #32
 800e484:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e486:	f003 fa71 	bl	801196c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e48a:	4b08      	ldr	r3, [pc, #32]	; (800e4ac <OnRadioTxDone+0x58>)
 800e48c:	2201      	movs	r2, #1
 800e48e:	2100      	movs	r1, #0
 800e490:	2002      	movs	r0, #2
 800e492:	f00f f947 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800e496:	bf00      	nop
 800e498:	370c      	adds	r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd90      	pop	{r4, r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	20001888 	.word	0x20001888
 800e4a4:	20000740 	.word	0x20000740
 800e4a8:	20001884 	.word	0x20001884
 800e4ac:	0801e448 	.word	0x0801e448

0800e4b0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	4608      	mov	r0, r1
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	461a      	mov	r2, r3
 800e4be:	4603      	mov	r3, r0
 800e4c0:	817b      	strh	r3, [r7, #10]
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	813b      	strh	r3, [r7, #8]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e4ca:	f00f f83b 	bl	801d544 <UTIL_TIMER_GetCurrentTime>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	4a11      	ldr	r2, [pc, #68]	; (800e518 <OnRadioRxDone+0x68>)
 800e4d2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e4d4:	4a10      	ldr	r2, [pc, #64]	; (800e518 <OnRadioRxDone+0x68>)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e4da:	4a0f      	ldr	r2, [pc, #60]	; (800e518 <OnRadioRxDone+0x68>)
 800e4dc:	897b      	ldrh	r3, [r7, #10]
 800e4de:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e4e0:	4a0d      	ldr	r2, [pc, #52]	; (800e518 <OnRadioRxDone+0x68>)
 800e4e2:	893b      	ldrh	r3, [r7, #8]
 800e4e4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e4e6:	4a0c      	ldr	r2, [pc, #48]	; (800e518 <OnRadioRxDone+0x68>)
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e4ec:	4a0b      	ldr	r2, [pc, #44]	; (800e51c <OnRadioRxDone+0x6c>)
 800e4ee:	7813      	ldrb	r3, [r2, #0]
 800e4f0:	f043 0310 	orr.w	r3, r3, #16
 800e4f4:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e4f6:	4a09      	ldr	r2, [pc, #36]	; (800e51c <OnRadioRxDone+0x6c>)
 800e4f8:	7813      	ldrb	r3, [r2, #0]
 800e4fa:	f043 0301 	orr.w	r3, r3, #1
 800e4fe:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800e500:	f003 fa34 	bl	801196c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e504:	4b06      	ldr	r3, [pc, #24]	; (800e520 <OnRadioRxDone+0x70>)
 800e506:	2201      	movs	r2, #1
 800e508:	2100      	movs	r1, #0
 800e50a:	2002      	movs	r0, #2
 800e50c:	f00f f90a 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800e510:	bf00      	nop
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	2000188c 	.word	0x2000188c
 800e51c:	20001884 	.word	0x20001884
 800e520:	0801e458 	.word	0x0801e458

0800e524 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e528:	4a07      	ldr	r2, [pc, #28]	; (800e548 <OnRadioTxTimeout+0x24>)
 800e52a:	7813      	ldrb	r3, [r2, #0]
 800e52c:	f043 0308 	orr.w	r3, r3, #8
 800e530:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e532:	f003 fa1b 	bl	801196c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e536:	4b05      	ldr	r3, [pc, #20]	; (800e54c <OnRadioTxTimeout+0x28>)
 800e538:	2201      	movs	r2, #1
 800e53a:	2100      	movs	r1, #0
 800e53c:	2002      	movs	r0, #2
 800e53e:	f00f f8f1 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800e542:	bf00      	nop
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	20001884 	.word	0x20001884
 800e54c:	0801e468 	.word	0x0801e468

0800e550 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e554:	4a04      	ldr	r2, [pc, #16]	; (800e568 <OnRadioRxError+0x18>)
 800e556:	7813      	ldrb	r3, [r2, #0]
 800e558:	f043 0304 	orr.w	r3, r3, #4
 800e55c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e55e:	f003 fa05 	bl	801196c <OnMacProcessNotify>
}
 800e562:	bf00      	nop
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20001884 	.word	0x20001884

0800e56c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e570:	4a07      	ldr	r2, [pc, #28]	; (800e590 <OnRadioRxTimeout+0x24>)
 800e572:	7813      	ldrb	r3, [r2, #0]
 800e574:	f043 0302 	orr.w	r3, r3, #2
 800e578:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e57a:	f003 f9f7 	bl	801196c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e57e:	4b05      	ldr	r3, [pc, #20]	; (800e594 <OnRadioRxTimeout+0x28>)
 800e580:	2201      	movs	r2, #1
 800e582:	2100      	movs	r1, #0
 800e584:	2002      	movs	r0, #2
 800e586:	f00f f8cd 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 800e58a:	bf00      	nop
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	20001884 	.word	0x20001884
 800e594:	0801e478 	.word	0x0801e478

0800e598 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e598:	b480      	push	{r7}
 800e59a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e59c:	4b08      	ldr	r3, [pc, #32]	; (800e5c0 <UpdateRxSlotIdleState+0x28>)
 800e59e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	d004      	beq.n	800e5b0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e5a6:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <UpdateRxSlotIdleState+0x2c>)
 800e5a8:	2206      	movs	r2, #6
 800e5aa:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e5ae:	e003      	b.n	800e5b8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e5b0:	4b04      	ldr	r3, [pc, #16]	; (800e5c4 <UpdateRxSlotIdleState+0x2c>)
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 800e5b8:	bf00      	nop
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bc80      	pop	{r7}
 800e5be:	4770      	bx	lr
 800e5c0:	20000c5c 	.word	0x20000c5c
 800e5c4:	20000740 	.word	0x20000740

0800e5c8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b092      	sub	sp, #72	; 0x48
 800e5cc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e5ce:	4b4a      	ldr	r3, [pc, #296]	; (800e6f8 <ProcessRadioTxDone+0x130>)
 800e5d0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d002      	beq.n	800e5de <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e5d8:	4b48      	ldr	r3, [pc, #288]	; (800e6fc <ProcessRadioTxDone+0x134>)
 800e5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5dc:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5de:	f3ef 8310 	mrs	r3, PRIMASK
 800e5e2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800e5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800e5e8:	b672      	cpsid	i
}
 800e5ea:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800e5ec:	f00e ffaa 	bl	801d544 <UTIL_TIMER_GetCurrentTime>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	4b43      	ldr	r3, [pc, #268]	; (800e700 <ProcessRadioTxDone+0x138>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800e5fa:	4b42      	ldr	r3, [pc, #264]	; (800e704 <ProcessRadioTxDone+0x13c>)
 800e5fc:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	1ad3      	subs	r3, r2, r3
 800e604:	4619      	mov	r1, r3
 800e606:	4840      	ldr	r0, [pc, #256]	; (800e708 <ProcessRadioTxDone+0x140>)
 800e608:	f00e fef2 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e60c:	483e      	ldr	r0, [pc, #248]	; (800e708 <ProcessRadioTxDone+0x140>)
 800e60e:	f00e fe11 	bl	801d234 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800e612:	4b3c      	ldr	r3, [pc, #240]	; (800e704 <ProcessRadioTxDone+0x13c>)
 800e614:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	4619      	mov	r1, r3
 800e61e:	483b      	ldr	r0, [pc, #236]	; (800e70c <ProcessRadioTxDone+0x144>)
 800e620:	f00e fee6 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e624:	4839      	ldr	r0, [pc, #228]	; (800e70c <ProcessRadioTxDone+0x144>)
 800e626:	f00e fe05 	bl	801d234 <UTIL_TIMER_Start>
 800e62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e630:	f383 8810 	msr	PRIMASK, r3
}
 800e634:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800e636:	4b33      	ldr	r3, [pc, #204]	; (800e704 <ProcessRadioTxDone+0x13c>)
 800e638:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d01a      	beq.n	800e676 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e640:	2315      	movs	r3, #21
 800e642:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e646:	4b2c      	ldr	r3, [pc, #176]	; (800e6f8 <ProcessRadioTxDone+0x130>)
 800e648:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e64c:	f107 0220 	add.w	r2, r7, #32
 800e650:	4611      	mov	r1, r2
 800e652:	4618      	mov	r0, r3
 800e654:	f006 fec0 	bl	80153d8 <RegionGetPhyParam>
 800e658:	4603      	mov	r3, r0
 800e65a:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e65c:	4b29      	ldr	r3, [pc, #164]	; (800e704 <ProcessRadioTxDone+0x13c>)
 800e65e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	4413      	add	r3, r2
 800e666:	4619      	mov	r1, r3
 800e668:	4829      	ldr	r0, [pc, #164]	; (800e710 <ProcessRadioTxDone+0x148>)
 800e66a:	f00e fec1 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e66e:	4828      	ldr	r0, [pc, #160]	; (800e710 <ProcessRadioTxDone+0x148>)
 800e670:	f00e fde0 	bl	801d234 <UTIL_TIMER_Start>
 800e674:	e003      	b.n	800e67e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e676:	4b23      	ldr	r3, [pc, #140]	; (800e704 <ProcessRadioTxDone+0x13c>)
 800e678:	2200      	movs	r2, #0
 800e67a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e67e:	4b20      	ldr	r3, [pc, #128]	; (800e700 <ProcessRadioTxDone+0x138>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a1d      	ldr	r2, [pc, #116]	; (800e6f8 <ProcessRadioTxDone+0x130>)
 800e684:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e686:	4b1f      	ldr	r3, [pc, #124]	; (800e704 <ProcessRadioTxDone+0x13c>)
 800e688:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e68c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e68e:	4b1c      	ldr	r3, [pc, #112]	; (800e700 <ProcessRadioTxDone+0x138>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e698:	4618      	mov	r0, r3
 800e69a:	f00e f909 	bl	801c8b0 <SysTimeGetMcuTime>
 800e69e:	4638      	mov	r0, r7
 800e6a0:	4b15      	ldr	r3, [pc, #84]	; (800e6f8 <ProcessRadioTxDone+0x130>)
 800e6a2:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e6a6:	9200      	str	r2, [sp, #0]
 800e6a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800e6ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e6b0:	ca06      	ldmia	r2, {r1, r2}
 800e6b2:	f00e f85e 	bl	801c772 <SysTimeSub>
 800e6b6:	f107 0314 	add.w	r3, r7, #20
 800e6ba:	463a      	mov	r2, r7
 800e6bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e6c0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e6c4:	4b0f      	ldr	r3, [pc, #60]	; (800e704 <ProcessRadioTxDone+0x13c>)
 800e6c6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e6ca:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e6d0:	4b09      	ldr	r3, [pc, #36]	; (800e6f8 <ProcessRadioTxDone+0x130>)
 800e6d2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d101      	bne.n	800e6de <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e6de:	4b06      	ldr	r3, [pc, #24]	; (800e6f8 <ProcessRadioTxDone+0x130>)
 800e6e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e6e4:	f107 0208 	add.w	r2, r7, #8
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f006 fe95 	bl	801541a <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e6f0:	bf00      	nop
 800e6f2:	3740      	adds	r7, #64	; 0x40
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	20000c5c 	.word	0x20000c5c
 800e6fc:	0801ebac 	.word	0x0801ebac
 800e700:	20001888 	.word	0x20001888
 800e704:	20000740 	.word	0x20000740
 800e708:	20000ac0 	.word	0x20000ac0
 800e70c:	20000ad8 	.word	0x20000ad8
 800e710:	20000b40 	.word	0x20000b40

0800e714 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e718:	4b10      	ldr	r3, [pc, #64]	; (800e75c <PrepareRxDoneAbort+0x48>)
 800e71a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e722:	4a0e      	ldr	r2, [pc, #56]	; (800e75c <PrepareRxDoneAbort+0x48>)
 800e724:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800e728:	4b0c      	ldr	r3, [pc, #48]	; (800e75c <PrepareRxDoneAbort+0x48>)
 800e72a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d002      	beq.n	800e738 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e732:	2000      	movs	r0, #0
 800e734:	f001 f9fa 	bl	800fb2c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e738:	4a08      	ldr	r2, [pc, #32]	; (800e75c <PrepareRxDoneAbort+0x48>)
 800e73a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e73e:	f043 0302 	orr.w	r3, r3, #2
 800e742:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e746:	4a05      	ldr	r2, [pc, #20]	; (800e75c <PrepareRxDoneAbort+0x48>)
 800e748:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e74c:	f043 0310 	orr.w	r3, r3, #16
 800e750:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 800e754:	f7ff ff20 	bl	800e598 <UpdateRxSlotIdleState>
}
 800e758:	bf00      	nop
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	20000740 	.word	0x20000740

0800e760 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e760:	b590      	push	{r4, r7, lr}
 800e762:	b0ab      	sub	sp, #172	; 0xac
 800e764:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e766:	2312      	movs	r3, #18
 800e768:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e76c:	4b81      	ldr	r3, [pc, #516]	; (800e974 <ProcessRadioRxDone+0x214>)
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 800e774:	4b7f      	ldr	r3, [pc, #508]	; (800e974 <ProcessRadioRxDone+0x214>)
 800e776:	891b      	ldrh	r3, [r3, #8]
 800e778:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800e77c:	4b7d      	ldr	r3, [pc, #500]	; (800e974 <ProcessRadioRxDone+0x214>)
 800e77e:	895b      	ldrh	r3, [r3, #10]
 800e780:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 800e784:	4b7b      	ldr	r3, [pc, #492]	; (800e974 <ProcessRadioRxDone+0x214>)
 800e786:	7b1b      	ldrb	r3, [r3, #12]
 800e788:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 800e78c:	2300      	movs	r3, #0
 800e78e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 800e792:	2300      	movs	r3, #0
 800e794:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e796:	4b78      	ldr	r3, [pc, #480]	; (800e978 <ProcessRadioRxDone+0x218>)
 800e798:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e79c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e7b2:	4a72      	ldr	r2, [pc, #456]	; (800e97c <ProcessRadioRxDone+0x21c>)
 800e7b4:	7813      	ldrb	r3, [r2, #0]
 800e7b6:	f36f 0300 	bfc	r3, #0, #1
 800e7ba:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e7bc:	4b70      	ldr	r3, [pc, #448]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800e7c4:	4a6e      	ldr	r2, [pc, #440]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7c6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e7ca:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800e7ce:	4a6c      	ldr	r2, [pc, #432]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e7d4:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e7d8:	4b69      	ldr	r3, [pc, #420]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7da:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 800e7de:	4b68      	ldr	r3, [pc, #416]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7e0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800e7e4:	4b66      	ldr	r3, [pc, #408]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800e7ec:	4b64      	ldr	r3, [pc, #400]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e7f4:	4b62      	ldr	r3, [pc, #392]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800e7fc:	4b60      	ldr	r3, [pc, #384]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800e804:	4b5e      	ldr	r3, [pc, #376]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e806:	2200      	movs	r2, #0
 800e808:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800e80c:	4b5c      	ldr	r3, [pc, #368]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800e814:	4b5a      	ldr	r3, [pc, #360]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e816:	2200      	movs	r2, #0
 800e818:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e81c:	4b58      	ldr	r3, [pc, #352]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e81e:	2200      	movs	r2, #0
 800e820:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e824:	4b56      	ldr	r3, [pc, #344]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e826:	2200      	movs	r2, #0
 800e828:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800e82c:	4b54      	ldr	r3, [pc, #336]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e82e:	2200      	movs	r2, #0
 800e830:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e834:	4b52      	ldr	r3, [pc, #328]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e836:	2200      	movs	r2, #0
 800e838:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e83c:	4b50      	ldr	r3, [pc, #320]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e83e:	2200      	movs	r2, #0
 800e840:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e844:	4b4f      	ldr	r3, [pc, #316]	; (800e984 <ProcessRadioRxDone+0x224>)
 800e846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e848:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e84a:	4b4d      	ldr	r3, [pc, #308]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e84c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e850:	2b00      	cmp	r3, #0
 800e852:	d102      	bne.n	800e85a <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e854:	484c      	ldr	r0, [pc, #304]	; (800e988 <ProcessRadioRxDone+0x228>)
 800e856:	f00e fd5b 	bl	801d310 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e85a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e85e:	4619      	mov	r1, r3
 800e860:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e864:	f004 fe28 	bl	80134b8 <LoRaMacClassBRxBeacon>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00b      	beq.n	800e886 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e86e:	4a44      	ldr	r2, [pc, #272]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e870:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e874:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e878:	4a41      	ldr	r2, [pc, #260]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e87a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e87e:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 800e882:	f000 bc75 	b.w	800f170 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e886:	4b3c      	ldr	r3, [pc, #240]	; (800e978 <ProcessRadioRxDone+0x218>)
 800e888:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d11e      	bne.n	800e8ce <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e890:	f004 fe25 	bl	80134de <LoRaMacClassBIsPingExpected>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00a      	beq.n	800e8b0 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e89a:	2000      	movs	r0, #0
 800e89c:	f004 fdd6 	bl	801344c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	f004 fdf7 	bl	8013494 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e8a6:	4b36      	ldr	r3, [pc, #216]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e8a8:	2204      	movs	r2, #4
 800e8aa:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800e8ae:	e00e      	b.n	800e8ce <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e8b0:	f004 fe1c 	bl	80134ec <LoRaMacClassBIsMulticastExpected>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d009      	beq.n	800e8ce <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	f004 fdd0 	bl	8013460 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	f004 fdf0 	bl	80134a6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e8c6:	4b2e      	ldr	r3, [pc, #184]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e8c8:	2205      	movs	r2, #5
 800e8ca:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e8ce:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d107      	bne.n	800e8e6 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8d6:	4b2a      	ldr	r3, [pc, #168]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800e8de:	f7ff ff19 	bl	800e714 <PrepareRxDoneAbort>
        return;
 800e8e2:	f000 bc45 	b.w	800f170 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e8e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e8ea:	1c5a      	adds	r2, r3, #1
 800e8ec:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e8f6:	4413      	add	r3, r2
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e8fe:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e902:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e906:	b2db      	uxtb	r3, r3
 800e908:	3b01      	subs	r3, #1
 800e90a:	2b06      	cmp	r3, #6
 800e90c:	f200 8403 	bhi.w	800f116 <ProcessRadioRxDone+0x9b6>
 800e910:	a201      	add	r2, pc, #4	; (adr r2, 800e918 <ProcessRadioRxDone+0x1b8>)
 800e912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e916:	bf00      	nop
 800e918:	0800e935 	.word	0x0800e935
 800e91c:	0800f117 	.word	0x0800f117
 800e920:	0800eb33 	.word	0x0800eb33
 800e924:	0800f117 	.word	0x0800f117
 800e928:	0800eb2b 	.word	0x0800eb2b
 800e92c:	0800f117 	.word	0x0800f117
 800e930:	0800f0bb 	.word	0x0800f0bb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e934:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e938:	2b10      	cmp	r3, #16
 800e93a:	d807      	bhi.n	800e94c <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e93c:	4b10      	ldr	r3, [pc, #64]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e944:	f7ff fee6 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800e948:	f000 bc12 	b.w	800f170 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800e94c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e950:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800e952:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e956:	b2db      	uxtb	r3, r3
 800e958:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e95a:	4b07      	ldr	r3, [pc, #28]	; (800e978 <ProcessRadioRxDone+0x218>)
 800e95c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e960:	2b00      	cmp	r3, #0
 800e962:	d013      	beq.n	800e98c <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e964:	4b06      	ldr	r3, [pc, #24]	; (800e980 <ProcessRadioRxDone+0x220>)
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e96c:	f7ff fed2 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800e970:	e3fe      	b.n	800f170 <ProcessRadioRxDone+0xa10>
 800e972:	bf00      	nop
 800e974:	2000188c 	.word	0x2000188c
 800e978:	20000c5c 	.word	0x20000c5c
 800e97c:	20001884 	.word	0x20001884
 800e980:	20000740 	.word	0x20000740
 800e984:	0801ebac 	.word	0x0801ebac
 800e988:	20000ad8 	.word	0x20000ad8
            }

            SecureElementGetJoinEui( joinEui );
 800e98c:	f107 0308 	add.w	r3, r7, #8
 800e990:	4618      	mov	r0, r3
 800e992:	f7fd ff7d 	bl	800c890 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e996:	f107 0218 	add.w	r2, r7, #24
 800e99a:	f107 0308 	add.w	r3, r7, #8
 800e99e:	4619      	mov	r1, r3
 800e9a0:	20ff      	movs	r0, #255	; 0xff
 800e9a2:	f005 ff95 	bl	80148d0 <LoRaMacCryptoHandleJoinAccept>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e9b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	b25b      	sxtb	r3, r3
 800e9be:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e9c0:	4bb1      	ldr	r3, [pc, #708]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800e9c2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e9c6:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800e9c8:	4baf      	ldr	r3, [pc, #700]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800e9ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e9ce:	1d39      	adds	r1, r7, #4
 800e9d0:	2207      	movs	r2, #7
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f006 fd4e 	bl	8015474 <RegionVerify>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800e9de:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f040 8095 	bne.w	800eb12 <ProcessRadioRxDone+0x3b2>
 800e9e8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f000 8090 	beq.w	800eb12 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e9f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	4ba3      	ldr	r3, [pc, #652]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800e9fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e9fe:	4ba2      	ldr	r3, [pc, #648]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ea04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ea08:	021b      	lsls	r3, r3, #8
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	4a9e      	ldr	r2, [pc, #632]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ea12:	4b9d      	ldr	r3, [pc, #628]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ea18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea1c:	041b      	lsls	r3, r3, #16
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	4a99      	ldr	r2, [pc, #612]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ea26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea28:	4a97      	ldr	r2, [pc, #604]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea2a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800ea2e:	4b96      	ldr	r3, [pc, #600]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ea34:	4619      	mov	r1, r3
 800ea36:	2002      	movs	r0, #2
 800ea38:	f7fd ff42 	bl	800c8c0 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ea3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea40:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	461a      	mov	r2, r3
 800ea48:	4b8f      	ldr	r3, [pc, #572]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea4a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ea4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4b8b      	ldr	r3, [pc, #556]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ea60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	4b86      	ldr	r3, [pc, #536]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ea72:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ea76:	461a      	mov	r2, r3
 800ea78:	4b83      	ldr	r3, [pc, #524]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea7a:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800ea7c:	4b82      	ldr	r3, [pc, #520]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d102      	bne.n	800ea8a <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800ea84:	4b80      	ldr	r3, [pc, #512]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea86:	2201      	movs	r2, #1
 800ea88:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800ea8a:	4b7f      	ldr	r3, [pc, #508]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea92:	fb02 f303 	mul.w	r3, r2, r3
 800ea96:	4a7c      	ldr	r2, [pc, #496]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea98:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ea9a:	4b7b      	ldr	r3, [pc, #492]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ea9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea9e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800eaa2:	4a79      	ldr	r2, [pc, #484]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eaa4:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800eaa6:	4b78      	ldr	r3, [pc, #480]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800eaae:	4b76      	ldr	r3, [pc, #472]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800eab6:	f107 0318 	add.w	r3, r7, #24
 800eaba:	3312      	adds	r3, #18
 800eabc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800eac0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	3b11      	subs	r3, #17
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800eace:	4b6f      	ldr	r3, [pc, #444]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800ead0:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800ead4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ead8:	4b6b      	ldr	r3, [pc, #428]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eada:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eade:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800eae2:	4611      	mov	r1, r2
 800eae4:	4618      	mov	r0, r3
 800eae6:	f006 fce6 	bl	80154b6 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800eaea:	4b67      	ldr	r3, [pc, #412]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eaec:	2202      	movs	r2, #2
 800eaee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800eaf2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f005 f9f4 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f000 8311 	beq.w	800f126 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800eb04:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800eb08:	4619      	mov	r1, r3
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	f005 f95e 	bl	8013dcc <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800eb10:	e309      	b.n	800f126 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eb12:	2001      	movs	r0, #1
 800eb14:	f005 f9e6 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f000 8302 	beq.w	800f124 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800eb20:	2101      	movs	r1, #1
 800eb22:	2007      	movs	r0, #7
 800eb24:	f005 f952 	bl	8013dcc <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800eb28:	e2fc      	b.n	800f124 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800eb2a:	4b58      	ldr	r3, [pc, #352]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eb32:	4b55      	ldr	r3, [pc, #340]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eb34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800eb38:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800eb3c:	4b53      	ldr	r3, [pc, #332]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800eb3e:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800eb42:	b25b      	sxtb	r3, r3
 800eb44:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eb48:	230d      	movs	r3, #13
 800eb4a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800eb4e:	4b4e      	ldr	r3, [pc, #312]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eb50:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800eb58:	230e      	movs	r3, #14
 800eb5a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb5e:	4b4a      	ldr	r3, [pc, #296]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800eb60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eb64:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800eb68:	4611      	mov	r1, r2
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f006 fc34 	bl	80153d8 <RegionGetPhyParam>
 800eb70:	4603      	mov	r3, r0
 800eb72:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800eb74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800eb78:	3b0d      	subs	r3, #13
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	b21b      	sxth	r3, r3
 800eb7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eb82:	b21a      	sxth	r2, r3
 800eb84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb86:	b21b      	sxth	r3, r3
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	dc03      	bgt.n	800eb94 <ProcessRadioRxDone+0x434>
 800eb8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800eb90:	2b0b      	cmp	r3, #11
 800eb92:	d806      	bhi.n	800eba2 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb94:	4b3d      	ldr	r3, [pc, #244]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800eb9c:	f7ff fdba 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800eba0:	e2e6      	b.n	800f170 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800eba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eba6:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 800eba8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ebb2:	4b37      	ldr	r3, [pc, #220]	; (800ec90 <ProcessRadioRxDone+0x530>)
 800ebb4:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ebb6:	23ff      	movs	r3, #255	; 0xff
 800ebb8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ebbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f006 f987 	bl	8014ed4 <LoRaMacParserData>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d006      	beq.n	800ebda <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ebcc:	4b2f      	ldr	r3, [pc, #188]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ebd4:	f7ff fd9e 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800ebd8:	e2ca      	b.n	800f170 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ebda:	4b2b      	ldr	r3, [pc, #172]	; (800ec88 <ProcessRadioRxDone+0x528>)
 800ebdc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d132      	bne.n	800ec4a <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ebe4:	f004 fc7b 	bl	80134de <LoRaMacClassBIsPingExpected>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d014      	beq.n	800ec18 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ebee:	2000      	movs	r0, #0
 800ebf0:	f004 fc2c 	bl	801344c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ebf4:	2000      	movs	r0, #0
 800ebf6:	f004 fc4d 	bl	8013494 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ebfa:	4b24      	ldr	r3, [pc, #144]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800ebfc:	2204      	movs	r2, #4
 800ebfe:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ec02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec04:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ec08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	4619      	mov	r1, r3
 800ec10:	4610      	mov	r0, r2
 800ec12:	f004 fced 	bl	80135f0 <LoRaMacClassBSetFPendingBit>
 800ec16:	e018      	b.n	800ec4a <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec18:	f004 fc68 	bl	80134ec <LoRaMacClassBIsMulticastExpected>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d013      	beq.n	800ec4a <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec22:	2000      	movs	r0, #0
 800ec24:	f004 fc1c 	bl	8013460 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec28:	2000      	movs	r0, #0
 800ec2a:	f004 fc3c 	bl	80134a6 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ec2e:	4b17      	ldr	r3, [pc, #92]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800ec30:	2205      	movs	r2, #5
 800ec32:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ec36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec38:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ec3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	4619      	mov	r1, r3
 800ec44:	4610      	mov	r0, r2
 800ec46:	f004 fcd3 	bl	80135f0 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ec4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec4c:	4a0f      	ldr	r2, [pc, #60]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800ec4e:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ec52:	f107 0212 	add.w	r2, r7, #18
 800ec56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec5a:	4611      	mov	r1, r2
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f002 fd81 	bl	8011764 <DetermineFrameType>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d006      	beq.n	800ec76 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec68:	4b08      	ldr	r3, [pc, #32]	; (800ec8c <ProcessRadioRxDone+0x52c>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ec70:	f7ff fd50 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800ec74:	e27c      	b.n	800f170 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec80:	2300      	movs	r3, #0
 800ec82:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800ec86:	e055      	b.n	800ed34 <ProcessRadioRxDone+0x5d4>
 800ec88:	20000c5c 	.word	0x20000c5c
 800ec8c:	20000740 	.word	0x20000740
 800ec90:	20000978 	.word	0x20000978
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ec94:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ec98:	499f      	ldr	r1, [pc, #636]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4413      	add	r3, r2
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	440b      	add	r3, r1
 800eca4:	33ec      	adds	r3, #236	; 0xec
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d13d      	bne.n	800ed2a <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ecae:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ecb2:	4999      	ldr	r1, [pc, #612]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	4413      	add	r3, r2
 800ecba:	011b      	lsls	r3, r3, #4
 800ecbc:	440b      	add	r3, r1
 800ecbe:	33e9      	adds	r3, #233	; 0xe9
 800ecc0:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d031      	beq.n	800ed2a <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800eccc:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ecd0:	4991      	ldr	r1, [pc, #580]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	4413      	add	r3, r2
 800ecd8:	011b      	lsls	r3, r3, #4
 800ecda:	440b      	add	r3, r1
 800ecdc:	33ea      	adds	r3, #234	; 0xea
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ece4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ece8:	498b      	ldr	r1, [pc, #556]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ecea:	4613      	mov	r3, r2
 800ecec:	005b      	lsls	r3, r3, #1
 800ecee:	4413      	add	r3, r2
 800ecf0:	011b      	lsls	r3, r3, #4
 800ecf2:	440b      	add	r3, r1
 800ecf4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ecfe:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ed02:	4985      	ldr	r1, [pc, #532]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ed04:	4613      	mov	r3, r2
 800ed06:	005b      	lsls	r3, r3, #1
 800ed08:	4413      	add	r3, r2
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	440b      	add	r3, r1
 800ed0e:	33ec      	adds	r3, #236	; 0xec
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed16:	4b80      	ldr	r3, [pc, #512]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ed18:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d10e      	bne.n	800ed3e <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ed20:	4b7e      	ldr	r3, [pc, #504]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ed22:	2203      	movs	r2, #3
 800ed24:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 800ed28:	e009      	b.n	800ed3e <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ed2a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ed2e:	3301      	adds	r3, #1
 800ed30:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800ed34:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d0ab      	beq.n	800ec94 <ProcessRadioRxDone+0x534>
 800ed3c:	e000      	b.n	800ed40 <ProcessRadioRxDone+0x5e0>
                    break;
 800ed3e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ed40:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d117      	bne.n	800ed78 <ProcessRadioRxDone+0x618>
 800ed48:	7cbb      	ldrb	r3, [r7, #18]
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d10d      	bne.n	800ed6a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed4e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ed52:	f003 0320 	and.w	r3, r3, #32
 800ed56:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d106      	bne.n	800ed6a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ed5c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ed60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed64:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d006      	beq.n	800ed78 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed6a:	4b6c      	ldr	r3, [pc, #432]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ed72:	f7ff fccf 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800ed76:	e1fb      	b.n	800f170 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ed78:	7cb9      	ldrb	r1, [r7, #18]
 800ed7a:	4c67      	ldr	r4, [pc, #412]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ed7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ed80:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800ed84:	f107 0314 	add.w	r3, r7, #20
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	f107 0313 	add.w	r3, r7, #19
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ed94:	f000 fee4 	bl	800fb60 <GetFCntDown>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ed9e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d017      	beq.n	800edd6 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800eda6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800edaa:	2b07      	cmp	r3, #7
 800edac:	d104      	bne.n	800edb8 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800edae:	4b5b      	ldr	r3, [pc, #364]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800edb0:	2208      	movs	r2, #8
 800edb2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800edb6:	e003      	b.n	800edc0 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800edb8:	4b58      	ldr	r3, [pc, #352]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	4a56      	ldr	r2, [pc, #344]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800edc4:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	4a54      	ldr	r2, [pc, #336]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800edcc:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800edd0:	f7ff fca0 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800edd4:	e1cc      	b.n	800f170 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800edd6:	7cfa      	ldrb	r2, [r7, #19]
 800edd8:	6979      	ldr	r1, [r7, #20]
 800edda:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800edde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	460b      	mov	r3, r1
 800ede6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800edea:	f005 fed3 	bl	8014b94 <LoRaMacCryptoUnsecureMessage>
 800edee:	4603      	mov	r3, r0
 800edf0:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800edf4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00f      	beq.n	800ee1c <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800edfc:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d104      	bne.n	800ee0e <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ee04:	4b45      	ldr	r3, [pc, #276]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee06:	220a      	movs	r2, #10
 800ee08:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ee0c:	e003      	b.n	800ee16 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ee0e:	4b43      	ldr	r3, [pc, #268]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee10:	220b      	movs	r2, #11
 800ee12:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 800ee16:	f7ff fc7d 	bl	800e714 <PrepareRxDoneAbort>
                return;
 800ee1a:	e1a9      	b.n	800f170 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ee1c:	4b3f      	ldr	r3, [pc, #252]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800ee24:	4a3d      	ldr	r2, [pc, #244]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee26:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ee2a:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800ee2e:	4b3b      	ldr	r3, [pc, #236]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee30:	2200      	movs	r2, #0
 800ee32:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800ee36:	4b39      	ldr	r3, [pc, #228]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	4a36      	ldr	r2, [pc, #216]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee42:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	4a34      	ldr	r2, [pc, #208]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee4a:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ee4e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ee52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	bf14      	ite	ne
 800ee5c:	2301      	movne	r3, #1
 800ee5e:	2300      	moveq	r3, #0
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	4b2e      	ldr	r3, [pc, #184]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee64:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ee68:	4b2c      	ldr	r3, [pc, #176]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ee70:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ee74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	bf14      	ite	ne
 800ee7e:	2301      	movne	r3, #1
 800ee80:	2300      	moveq	r3, #0
 800ee82:	b2da      	uxtb	r2, r3
 800ee84:	4b25      	ldr	r3, [pc, #148]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee86:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ee8a:	4b24      	ldr	r3, [pc, #144]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee8c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d004      	beq.n	800ee9e <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ee94:	4b21      	ldr	r3, [pc, #132]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ee96:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d106      	bne.n	800eeac <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ee9e:	4b1e      	ldr	r3, [pc, #120]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800eea4:	4b1c      	ldr	r3, [pc, #112]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800eeac:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d104      	bne.n	800eebe <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800eeb4:	4b19      	ldr	r3, [pc, #100]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800eebc:	e03a      	b.n	800ef34 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800eebe:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800eec2:	f023 031f 	bic.w	r3, r3, #31
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2ba0      	cmp	r3, #160	; 0xa0
 800eeca:	d12b      	bne.n	800ef24 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800eecc:	4b12      	ldr	r3, [pc, #72]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800eed4:	4b10      	ldr	r3, [pc, #64]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800eed6:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d102      	bne.n	800eee4 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800eede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eee0:	4a0d      	ldr	r2, [pc, #52]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800eee2:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800eee4:	4b0d      	ldr	r3, [pc, #52]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800eeec:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800eeee:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d01e      	beq.n	800ef34 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800eef6:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800eef8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d019      	beq.n	800ef34 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ef00:	4b05      	ldr	r3, [pc, #20]	; (800ef18 <ProcessRadioRxDone+0x7b8>)
 800ef02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef06:	4a05      	ldr	r2, [pc, #20]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ef08:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ef0c:	4b04      	ldr	r3, [pc, #16]	; (800ef20 <ProcessRadioRxDone+0x7c0>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a02      	ldr	r2, [pc, #8]	; (800ef1c <ProcessRadioRxDone+0x7bc>)
 800ef12:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 800ef16:	e00d      	b.n	800ef34 <ProcessRadioRxDone+0x7d4>
 800ef18:	20000c5c 	.word	0x20000c5c
 800ef1c:	20000740 	.word	0x20000740
 800ef20:	2000188c 	.word	0x2000188c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ef24:	4b94      	ldr	r3, [pc, #592]	; (800f178 <ProcessRadioRxDone+0xa18>)
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ef2c:	4b93      	ldr	r3, [pc, #588]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800ef34:	4b90      	ldr	r3, [pc, #576]	; (800f178 <ProcessRadioRxDone+0xa18>)
 800ef36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d106      	bne.n	800ef4c <ProcessRadioRxDone+0x7ec>
 800ef3e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ef42:	f003 0310 	and.w	r3, r3, #16
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d008      	beq.n	800ef5e <ProcessRadioRxDone+0x7fe>
 800ef4c:	4b8a      	ldr	r3, [pc, #552]	; (800f178 <ProcessRadioRxDone+0xa18>)
 800ef4e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d103      	bne.n	800ef5e <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800ef56:	4b89      	ldr	r3, [pc, #548]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ef5e:	4b87      	ldr	r3, [pc, #540]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800ef60:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ef64:	4a85      	ldr	r2, [pc, #532]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800ef66:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 800ef6a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f001 ff8a 	bl	8010e88 <RemoveMacCommands>

            switch( fType )
 800ef74:	7cbb      	ldrb	r3, [r7, #18]
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	d873      	bhi.n	800f062 <ProcessRadioRxDone+0x902>
 800ef7a:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <ProcessRadioRxDone+0x820>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800ef91 	.word	0x0800ef91
 800ef84:	0800efe1 	.word	0x0800efe1
 800ef88:	0800f017 	.word	0x0800f017
 800ef8c:	0800f03d 	.word	0x0800f03d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ef90:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ef94:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	461c      	mov	r4, r3
 800ef9c:	4b77      	ldr	r3, [pc, #476]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800ef9e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800efa2:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800efa6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800efaa:	f102 0010 	add.w	r0, r2, #16
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	460b      	mov	r3, r1
 800efb2:	4622      	mov	r2, r4
 800efb4:	2100      	movs	r1, #0
 800efb6:	f000 ff4f 	bl	800fe58 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800efba:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800efbe:	4b6f      	ldr	r3, [pc, #444]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800efc0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800efc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efc6:	4a6d      	ldr	r2, [pc, #436]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800efc8:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800efcc:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800efd0:	4b6a      	ldr	r3, [pc, #424]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800efd2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800efd6:	4b69      	ldr	r3, [pc, #420]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800efde:	e047      	b.n	800f070 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800efe0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800efe4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	461c      	mov	r4, r3
 800efec:	4b63      	ldr	r3, [pc, #396]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800efee:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eff2:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800eff6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800effa:	f102 0010 	add.w	r0, r2, #16
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	460b      	mov	r3, r1
 800f002:	4622      	mov	r2, r4
 800f004:	2100      	movs	r1, #0
 800f006:	f000 ff27 	bl	800fe58 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f00a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f00e:	4b5b      	ldr	r3, [pc, #364]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f010:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800f014:	e02c      	b.n	800f070 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f016:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f018:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800f01c:	4b57      	ldr	r3, [pc, #348]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f01e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f022:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	460b      	mov	r3, r1
 800f02a:	2100      	movs	r1, #0
 800f02c:	f000 ff14 	bl	800fe58 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f030:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f034:	4b51      	ldr	r3, [pc, #324]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f036:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800f03a:	e019      	b.n	800f070 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f03c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f040:	4b4e      	ldr	r3, [pc, #312]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f042:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f048:	4a4c      	ldr	r2, [pc, #304]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f04a:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f04e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800f052:	4b4a      	ldr	r3, [pc, #296]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f054:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800f058:	4b48      	ldr	r3, [pc, #288]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800f060:	e006      	b.n	800f070 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f062:	4b46      	ldr	r3, [pc, #280]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f064:	2201      	movs	r2, #1
 800f066:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800f06a:	f7ff fb53 	bl	800e714 <PrepareRxDoneAbort>
                    break;
 800f06e:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f070:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800f074:	2be0      	cmp	r3, #224	; 0xe0
 800f076:	d118      	bne.n	800f0aa <ProcessRadioRxDone+0x94a>
 800f078:	4b3f      	ldr	r3, [pc, #252]	; (800f178 <ProcessRadioRxDone+0xa18>)
 800f07a:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800f07e:	f083 0301 	eor.w	r3, r3, #1
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d010      	beq.n	800f0aa <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f088:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800f08c:	4b3b      	ldr	r3, [pc, #236]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f08e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800f092:	4b3a      	ldr	r3, [pc, #232]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f094:	2200      	movs	r2, #0
 800f096:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800f09a:	4b38      	ldr	r3, [pc, #224]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800f0a2:	4b36      	ldr	r3, [pc, #216]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f0aa:	4a34      	ldr	r2, [pc, #208]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f0ac:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f0b0:	f043 0302 	orr.w	r3, r3, #2
 800f0b4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 800f0b8:	e035      	b.n	800f126 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f0ba:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f0be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f0c2:	18d1      	adds	r1, r2, r3
 800f0c4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800f0ce:	1ad3      	subs	r3, r2, r3
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	482a      	ldr	r0, [pc, #168]	; (800f180 <ProcessRadioRxDone+0xa20>)
 800f0d6:	f009 ff80 	bl	8018fda <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f0da:	4b28      	ldr	r3, [pc, #160]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f0dc:	2203      	movs	r2, #3
 800f0de:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f0e2:	4b26      	ldr	r3, [pc, #152]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f0ea:	4b24      	ldr	r3, [pc, #144]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f0ec:	4a24      	ldr	r2, [pc, #144]	; (800f180 <ProcessRadioRxDone+0xa20>)
 800f0ee:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f0f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	4b1e      	ldr	r3, [pc, #120]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f102:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f106:	4a1d      	ldr	r2, [pc, #116]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f108:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f10c:	f043 0302 	orr.w	r3, r3, #2
 800f110:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800f114:	e007      	b.n	800f126 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f116:	4b19      	ldr	r3, [pc, #100]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800f11e:	f7ff faf9 	bl	800e714 <PrepareRxDoneAbort>
            break;
 800f122:	e000      	b.n	800f126 <ProcessRadioRxDone+0x9c6>
            break;
 800f124:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f126:	4b15      	ldr	r3, [pc, #84]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f128:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d004      	beq.n	800f13a <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f130:	4b12      	ldr	r3, [pc, #72]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f132:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f136:	2b01      	cmp	r3, #1
 800f138:	d10c      	bne.n	800f154 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800f13a:	4b10      	ldr	r3, [pc, #64]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f13c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f140:	2b00      	cmp	r3, #0
 800f142:	d007      	beq.n	800f154 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f144:	4b0d      	ldr	r3, [pc, #52]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f146:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d002      	beq.n	800f154 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f14e:	2000      	movs	r0, #0
 800f150:	f000 fcec 	bl	800fb2c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f154:	4b09      	ldr	r3, [pc, #36]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f156:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f15a:	2b02      	cmp	r3, #2
 800f15c:	d006      	beq.n	800f16c <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f15e:	4a07      	ldr	r2, [pc, #28]	; (800f17c <ProcessRadioRxDone+0xa1c>)
 800f160:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f164:	f043 0310 	orr.w	r3, r3, #16
 800f168:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f16c:	f7ff fa14 	bl	800e598 <UpdateRxSlotIdleState>
}
 800f170:	37a4      	adds	r7, #164	; 0xa4
 800f172:	46bd      	mov	sp, r7
 800f174:	bd90      	pop	{r4, r7, pc}
 800f176:	bf00      	nop
 800f178:	20000c5c 	.word	0x20000c5c
 800f17c:	20000740 	.word	0x20000740
 800f180:	20000978 	.word	0x20000978

0800f184 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f188:	4b11      	ldr	r3, [pc, #68]	; (800f1d0 <ProcessRadioTxTimeout+0x4c>)
 800f18a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d002      	beq.n	800f198 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f192:	4b10      	ldr	r3, [pc, #64]	; (800f1d4 <ProcessRadioTxTimeout+0x50>)
 800f194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f196:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f198:	f7ff f9fe 	bl	800e598 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <ProcessRadioTxTimeout+0x54>)
 800f19e:	2202      	movs	r2, #2
 800f1a0:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f1a4:	2002      	movs	r0, #2
 800f1a6:	f004 fe69 	bl	8013e7c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f1aa:	4b0b      	ldr	r3, [pc, #44]	; (800f1d8 <ProcessRadioTxTimeout+0x54>)
 800f1ac:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d003      	beq.n	800f1bc <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800f1b4:	4b08      	ldr	r3, [pc, #32]	; (800f1d8 <ProcessRadioTxTimeout+0x54>)
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f1bc:	4a06      	ldr	r2, [pc, #24]	; (800f1d8 <ProcessRadioTxTimeout+0x54>)
 800f1be:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f1c2:	f043 0310 	orr.w	r3, r3, #16
 800f1c6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800f1ca:	bf00      	nop
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	20000c5c 	.word	0x20000c5c
 800f1d4:	0801ebac 	.word	0x0801ebac
 800f1d8:	20000740 	.word	0x20000740

0800f1dc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	460a      	mov	r2, r1
 800f1e6:	71fb      	strb	r3, [r7, #7]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f1f0:	4b3d      	ldr	r3, [pc, #244]	; (800f2e8 <HandleRadioRxErrorTimeout+0x10c>)
 800f1f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f1f6:	2b02      	cmp	r3, #2
 800f1f8:	d002      	beq.n	800f200 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f1fa:	4b3c      	ldr	r3, [pc, #240]	; (800f2ec <HandleRadioRxErrorTimeout+0x110>)
 800f1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fe:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f200:	f004 f966 	bl	80134d0 <LoRaMacClassBIsBeaconExpected>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d007      	beq.n	800f21a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f20a:	2002      	movs	r0, #2
 800f20c:	f004 f914 	bl	8013438 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f210:	2000      	movs	r0, #0
 800f212:	f004 f936 	bl	8013482 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f216:	2301      	movs	r3, #1
 800f218:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f21a:	4b33      	ldr	r3, [pc, #204]	; (800f2e8 <HandleRadioRxErrorTimeout+0x10c>)
 800f21c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f220:	2b01      	cmp	r3, #1
 800f222:	d119      	bne.n	800f258 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f224:	f004 f95b 	bl	80134de <LoRaMacClassBIsPingExpected>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d007      	beq.n	800f23e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f22e:	2000      	movs	r0, #0
 800f230:	f004 f90c 	bl	801344c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f234:	2000      	movs	r0, #0
 800f236:	f004 f92d 	bl	8013494 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f23a:	2301      	movs	r3, #1
 800f23c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f23e:	f004 f955 	bl	80134ec <LoRaMacClassBIsMulticastExpected>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f248:	2000      	movs	r0, #0
 800f24a:	f004 f909 	bl	8013460 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f24e:	2000      	movs	r0, #0
 800f250:	f004 f929 	bl	80134a6 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f254:	2301      	movs	r3, #1
 800f256:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f258:	7bfb      	ldrb	r3, [r7, #15]
 800f25a:	f083 0301 	eor.w	r3, r3, #1
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d03b      	beq.n	800f2dc <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f264:	4b22      	ldr	r3, [pc, #136]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f266:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d122      	bne.n	800f2b4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f26e:	4b20      	ldr	r3, [pc, #128]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f270:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f274:	2b00      	cmp	r3, #0
 800f276:	d003      	beq.n	800f280 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f278:	4a1d      	ldr	r2, [pc, #116]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f27a:	79fb      	ldrb	r3, [r7, #7]
 800f27c:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f280:	79fb      	ldrb	r3, [r7, #7]
 800f282:	4618      	mov	r0, r3
 800f284:	f004 fdfa 	bl	8013e7c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f288:	4b17      	ldr	r3, [pc, #92]	; (800f2e8 <HandleRadioRxErrorTimeout+0x10c>)
 800f28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28c:	4618      	mov	r0, r3
 800f28e:	f00e f96b 	bl	801d568 <UTIL_TIMER_GetElapsedTime>
 800f292:	4602      	mov	r2, r0
 800f294:	4b16      	ldr	r3, [pc, #88]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f296:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d31e      	bcc.n	800f2dc <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f29e:	4815      	ldr	r0, [pc, #84]	; (800f2f4 <HandleRadioRxErrorTimeout+0x118>)
 800f2a0:	f00e f836 	bl	801d310 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f2a4:	4a12      	ldr	r2, [pc, #72]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f2a6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f2aa:	f043 0310 	orr.w	r3, r3, #16
 800f2ae:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800f2b2:	e013      	b.n	800f2dc <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f2b4:	4b0e      	ldr	r3, [pc, #56]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f2b6:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d003      	beq.n	800f2c6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f2be:	4a0c      	ldr	r2, [pc, #48]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f2c0:	79bb      	ldrb	r3, [r7, #6]
 800f2c2:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f2c6:	79bb      	ldrb	r3, [r7, #6]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f004 fdd7 	bl	8013e7c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f2ce:	4a08      	ldr	r2, [pc, #32]	; (800f2f0 <HandleRadioRxErrorTimeout+0x114>)
 800f2d0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f2d4:	f043 0310 	orr.w	r3, r3, #16
 800f2d8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f2dc:	f7ff f95c 	bl	800e598 <UpdateRxSlotIdleState>
}
 800f2e0:	bf00      	nop
 800f2e2:	3710      	adds	r7, #16
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	20000c5c 	.word	0x20000c5c
 800f2ec:	0801ebac 	.word	0x0801ebac
 800f2f0:	20000740 	.word	0x20000740
 800f2f4:	20000ad8 	.word	0x20000ad8

0800f2f8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f2fc:	2106      	movs	r1, #6
 800f2fe:	2005      	movs	r0, #5
 800f300:	f7ff ff6c 	bl	800f1dc <HandleRadioRxErrorTimeout>
}
 800f304:	bf00      	nop
 800f306:	bd80      	pop	{r7, pc}

0800f308 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f30c:	2104      	movs	r1, #4
 800f30e:	2003      	movs	r0, #3
 800f310:	f7ff ff64 	bl	800f1dc <HandleRadioRxErrorTimeout>
}
 800f314:	bf00      	nop
 800f316:	bd80      	pop	{r7, pc}

0800f318 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f31e:	f3ef 8310 	mrs	r3, PRIMASK
 800f322:	607b      	str	r3, [r7, #4]
  return(result);
 800f324:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f326:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f328:	b672      	cpsid	i
}
 800f32a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f32c:	4b1d      	ldr	r3, [pc, #116]	; (800f3a4 <LoRaMacHandleIrqEvents+0x8c>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f332:	4b1c      	ldr	r3, [pc, #112]	; (800f3a4 <LoRaMacHandleIrqEvents+0x8c>)
 800f334:	2200      	movs	r2, #0
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	f383 8810 	msr	PRIMASK, r3
}
 800f342:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d027      	beq.n	800f39a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f34a:	783b      	ldrb	r3, [r7, #0]
 800f34c:	f003 0320 	and.w	r3, r3, #32
 800f350:	b2db      	uxtb	r3, r3
 800f352:	2b00      	cmp	r3, #0
 800f354:	d001      	beq.n	800f35a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f356:	f7ff f937 	bl	800e5c8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f35a:	783b      	ldrb	r3, [r7, #0]
 800f35c:	f003 0310 	and.w	r3, r3, #16
 800f360:	b2db      	uxtb	r3, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f366:	f7ff f9fb 	bl	800e760 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f36a:	783b      	ldrb	r3, [r7, #0]
 800f36c:	f003 0308 	and.w	r3, r3, #8
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d001      	beq.n	800f37a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f376:	f7ff ff05 	bl	800f184 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f37a:	783b      	ldrb	r3, [r7, #0]
 800f37c:	f003 0304 	and.w	r3, r3, #4
 800f380:	b2db      	uxtb	r3, r3
 800f382:	2b00      	cmp	r3, #0
 800f384:	d001      	beq.n	800f38a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f386:	f7ff ffb7 	bl	800f2f8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f38a:	783b      	ldrb	r3, [r7, #0]
 800f38c:	f003 0302 	and.w	r3, r3, #2
 800f390:	b2db      	uxtb	r3, r3
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f396:	f7ff ffb7 	bl	800f308 <ProcessRadioRxTimeout>
        }
    }
}
 800f39a:	bf00      	nop
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	20001884 	.word	0x20001884

0800f3a8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f3ac:	4b10      	ldr	r3, [pc, #64]	; (800f3f0 <LoRaMacIsBusy+0x48>)
 800f3ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d101      	bne.n	800f3ba <LoRaMacIsBusy+0x12>
    {
        return false;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	e015      	b.n	800f3e6 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f3ba:	4b0e      	ldr	r3, [pc, #56]	; (800f3f4 <LoRaMacIsBusy+0x4c>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	f003 0301 	and.w	r3, r3, #1
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d001      	beq.n	800f3cc <LoRaMacIsBusy+0x24>
    {
        return true;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e00c      	b.n	800f3e6 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f3cc:	4b08      	ldr	r3, [pc, #32]	; (800f3f0 <LoRaMacIsBusy+0x48>)
 800f3ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d106      	bne.n	800f3e4 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f3d6:	4b06      	ldr	r3, [pc, #24]	; (800f3f0 <LoRaMacIsBusy+0x48>)
 800f3d8:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d101      	bne.n	800f3e4 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	e000      	b.n	800f3e6 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800f3e4:	2301      	movs	r3, #1
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bc80      	pop	{r7}
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	20000740 	.word	0x20000740
 800f3f4:	20001884 	.word	0x20001884

0800f3f8 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f3fc:	4b05      	ldr	r3, [pc, #20]	; (800f414 <LoRaMacIsStopped+0x1c>)
 800f3fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f402:	2b01      	cmp	r3, #1
 800f404:	d101      	bne.n	800f40a <LoRaMacIsStopped+0x12>
    {
        return true;
 800f406:	2301      	movs	r3, #1
 800f408:	e000      	b.n	800f40c <LoRaMacIsStopped+0x14>
    }
    return false;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	46bd      	mov	sp, r7
 800f410:	bc80      	pop	{r7}
 800f412:	4770      	bx	lr
 800f414:	20000740 	.word	0x20000740

0800f418 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	4603      	mov	r3, r0
 800f420:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f422:	4a04      	ldr	r2, [pc, #16]	; (800f434 <LoRaMacEnableRequests+0x1c>)
 800f424:	79fb      	ldrb	r3, [r7, #7]
 800f426:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 800f42a:	bf00      	nop
 800f42c:	370c      	adds	r7, #12
 800f42e:	46bd      	mov	sp, r7
 800f430:	bc80      	pop	{r7}
 800f432:	4770      	bx	lr
 800f434:	20000740 	.word	0x20000740

0800f438 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f43e:	4b2c      	ldr	r3, [pc, #176]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f440:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f444:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f446:	4b2a      	ldr	r3, [pc, #168]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f448:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d14a      	bne.n	800f4e6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f450:	4b27      	ldr	r3, [pc, #156]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f452:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f456:	f003 0301 	and.w	r3, r3, #1
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d006      	beq.n	800f46e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f460:	4a23      	ldr	r2, [pc, #140]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f462:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f466:	f36f 0300 	bfc	r3, #0, #1
 800f46a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f46e:	4b20      	ldr	r3, [pc, #128]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f470:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f474:	f003 0304 	and.w	r3, r3, #4
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d006      	beq.n	800f48c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f47e:	4a1c      	ldr	r2, [pc, #112]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f480:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f484:	f36f 0382 	bfc	r3, #2, #1
 800f488:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f48c:	2001      	movs	r0, #1
 800f48e:	f7ff ffc3 	bl	800f418 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f492:	793b      	ldrb	r3, [r7, #4]
 800f494:	f003 0301 	and.w	r3, r3, #1
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d005      	beq.n	800f4aa <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f49e:	4b14      	ldr	r3, [pc, #80]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f4a0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4813      	ldr	r0, [pc, #76]	; (800f4f4 <LoRaMacHandleRequestEvents+0xbc>)
 800f4a8:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f4aa:	793b      	ldrb	r3, [r7, #4]
 800f4ac:	f003 0304 	and.w	r3, r3, #4
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00e      	beq.n	800f4d4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f4b6:	4810      	ldr	r0, [pc, #64]	; (800f4f8 <LoRaMacHandleRequestEvents+0xc0>)
 800f4b8:	f004 fd2e 	bl	8013f18 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f4bc:	f004 fd7e 	bl	8013fbc <LoRaMacConfirmQueueGetCnt>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d006      	beq.n	800f4d4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f4c6:	4a0a      	ldr	r2, [pc, #40]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f4c8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f4cc:	f043 0304 	orr.w	r3, r3, #4
 800f4d0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f4d4:	f004 f828 	bl	8013528 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f4d8:	4a05      	ldr	r2, [pc, #20]	; (800f4f0 <LoRaMacHandleRequestEvents+0xb8>)
 800f4da:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f4de:	f36f 1304 	bfc	r3, #4, #1
 800f4e2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800f4e6:	bf00      	nop
 800f4e8:	3708      	adds	r7, #8
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20000740 	.word	0x20000740
 800f4f4:	20000b80 	.word	0x20000b80
 800f4f8:	20000b94 	.word	0x20000b94

0800f4fc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f500:	4b16      	ldr	r3, [pc, #88]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f502:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f506:	f003 0308 	and.w	r3, r3, #8
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00d      	beq.n	800f52c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f510:	4a12      	ldr	r2, [pc, #72]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f512:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f516:	f36f 03c3 	bfc	r3, #3, #1
 800f51a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f51e:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f520:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	490e      	ldr	r1, [pc, #56]	; (800f560 <LoRaMacHandleIndicationEvents+0x64>)
 800f528:	480e      	ldr	r0, [pc, #56]	; (800f564 <LoRaMacHandleIndicationEvents+0x68>)
 800f52a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f52c:	4b0b      	ldr	r3, [pc, #44]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f52e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f532:	f003 0302 	and.w	r3, r3, #2
 800f536:	b2db      	uxtb	r3, r3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00d      	beq.n	800f558 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f53c:	4a07      	ldr	r2, [pc, #28]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f53e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f542:	f36f 0341 	bfc	r3, #1, #1
 800f546:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f54a:	4b04      	ldr	r3, [pc, #16]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f54c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	4903      	ldr	r1, [pc, #12]	; (800f560 <LoRaMacHandleIndicationEvents+0x64>)
 800f554:	4804      	ldr	r0, [pc, #16]	; (800f568 <LoRaMacHandleIndicationEvents+0x6c>)
 800f556:	4798      	blx	r3
    }
}
 800f558:	bf00      	nop
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	20000740 	.word	0x20000740
 800f560:	20000bcc 	.word	0x20000bcc
 800f564:	20000ba8 	.word	0x20000ba8
 800f568:	20000b60 	.word	0x20000b60

0800f56c <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f572:	4b2a      	ldr	r3, [pc, #168]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f574:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d048      	beq.n	800f614 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f582:	2300      	movs	r3, #0
 800f584:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f586:	2300      	movs	r3, #0
 800f588:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f58a:	4b24      	ldr	r3, [pc, #144]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f58c:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f590:	2b00      	cmp	r3, #0
 800f592:	d004      	beq.n	800f59e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f594:	4b21      	ldr	r3, [pc, #132]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f596:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f59a:	2b03      	cmp	r3, #3
 800f59c:	d104      	bne.n	800f5a8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f59e:	f002 f943 	bl	8011828 <CheckRetransUnconfirmedUplink>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	71fb      	strb	r3, [r7, #7]
 800f5a6:	e010      	b.n	800f5ca <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f5a8:	4b1c      	ldr	r3, [pc, #112]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5aa:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d10b      	bne.n	800f5ca <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f5b2:	4b1a      	ldr	r3, [pc, #104]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5b4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d004      	beq.n	800f5c6 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f5bc:	f002 f960 	bl	8011880 <CheckRetransConfirmedUplink>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	71fb      	strb	r3, [r7, #7]
 800f5c4:	e001      	b.n	800f5ca <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f5ca:	79fb      	ldrb	r3, [r7, #7]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00d      	beq.n	800f5ec <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f5d0:	4813      	ldr	r0, [pc, #76]	; (800f620 <LoRaMacHandleMcpsRequest+0xb4>)
 800f5d2:	f00d fe9d 	bl	801d310 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f5d6:	4b11      	ldr	r3, [pc, #68]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5dc:	f023 0320 	bic.w	r3, r3, #32
 800f5e0:	4a0e      	ldr	r2, [pc, #56]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5e2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f5e6:	f002 f985 	bl	80118f4 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f5ea:	e013      	b.n	800f614 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f5ec:	79bb      	ldrb	r3, [r7, #6]
 800f5ee:	f083 0301 	eor.w	r3, r3, #1
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00d      	beq.n	800f614 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f5f8:	4a08      	ldr	r2, [pc, #32]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f5fe:	f36f 1304 	bfc	r3, #4, #1
 800f602:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800f60e:	2000      	movs	r0, #0
 800f610:	f000 f9c8 	bl	800f9a4 <OnTxDelayedTimerEvent>
}
 800f614:	bf00      	nop
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	20000740 	.word	0x20000740
 800f620:	20000aa8 	.word	0x20000aa8

0800f624 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f628:	4b18      	ldr	r3, [pc, #96]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f62a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f62e:	f003 0304 	and.w	r3, r3, #4
 800f632:	b2db      	uxtb	r3, r3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d026      	beq.n	800f686 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f638:	2001      	movs	r0, #1
 800f63a:	f004 fc53 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d012      	beq.n	800f66a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f644:	2001      	movs	r0, #1
 800f646:	f004 fbef 	bl	8013e28 <LoRaMacConfirmQueueGetStatus>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d103      	bne.n	800f658 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f650:	4b0e      	ldr	r3, [pc, #56]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f652:	2200      	movs	r2, #0
 800f654:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f658:	4b0c      	ldr	r3, [pc, #48]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f65a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f65e:	f023 0302 	bic.w	r3, r3, #2
 800f662:	4a0a      	ldr	r2, [pc, #40]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f664:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f668:	e00d      	b.n	800f686 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f66a:	2006      	movs	r0, #6
 800f66c:	f004 fc3a 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d007      	beq.n	800f686 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f676:	4b05      	ldr	r3, [pc, #20]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f678:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f67c:	f023 0302 	bic.w	r3, r3, #2
 800f680:	4a02      	ldr	r2, [pc, #8]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f682:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f686:	bf00      	nop
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	20000740 	.word	0x20000740

0800f690 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f694:	200b      	movs	r0, #11
 800f696:	f004 fc25 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d019      	beq.n	800f6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f6a0:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6a2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d111      	bne.n	800f6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f6b0:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6b2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f6b6:	f003 0304 	and.w	r3, r3, #4
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d009      	beq.n	800f6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f6c0:	4b06      	ldr	r3, [pc, #24]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f6c6:	f023 0302 	bic.w	r3, r3, #2
 800f6ca:	4a04      	ldr	r2, [pc, #16]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e000      	b.n	800f6d6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	20000740 	.word	0x20000740

0800f6e0 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	71fb      	strb	r3, [r7, #7]
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	71bb      	strb	r3, [r7, #6]
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f6f2:	79fb      	ldrb	r3, [r7, #7]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00a      	beq.n	800f70e <CheckForMinimumAbpDatarate+0x2e>
 800f6f8:	79bb      	ldrb	r3, [r7, #6]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d107      	bne.n	800f70e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f6fe:	797b      	ldrb	r3, [r7, #5]
 800f700:	f083 0301 	eor.w	r3, r3, #1
 800f704:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f70a:	2301      	movs	r3, #1
 800f70c:	e000      	b.n	800f710 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	bc80      	pop	{r7}
 800f718:	4770      	bx	lr
	...

0800f71c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f720:	4b0d      	ldr	r3, [pc, #52]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f722:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00f      	beq.n	800f74e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f72e:	4b0a      	ldr	r3, [pc, #40]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f730:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f738:	4a07      	ldr	r2, [pc, #28]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f73a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f73e:	4b06      	ldr	r3, [pc, #24]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f740:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f744:	f023 0302 	bic.w	r3, r3, #2
 800f748:	4a03      	ldr	r2, [pc, #12]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f74a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800f74e:	bf00      	nop
 800f750:	46bd      	mov	sp, r7
 800f752:	bc80      	pop	{r7}
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	20000740 	.word	0x20000740

0800f75c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f764:	2300      	movs	r3, #0
 800f766:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f768:	2300      	movs	r3, #0
 800f76a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f76c:	4b51      	ldr	r3, [pc, #324]	; (800f8b4 <LoRaMacHandleNvm+0x158>)
 800f76e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f772:	2b00      	cmp	r3, #0
 800f774:	f040 8099 	bne.w	800f8aa <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2124      	movs	r1, #36	; 0x24
 800f77c:	4618      	mov	r0, r3
 800f77e:	f009 fc81 	bl	8019084 <Crc32>
 800f782:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d006      	beq.n	800f79c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f794:	89fb      	ldrh	r3, [r7, #14]
 800f796:	f043 0301 	orr.w	r3, r3, #1
 800f79a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3328      	adds	r3, #40	; 0x28
 800f7a0:	211c      	movs	r1, #28
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f009 fc6e 	bl	8019084 <Crc32>
 800f7a8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d006      	beq.n	800f7c2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f7ba:	89fb      	ldrh	r3, [r7, #14]
 800f7bc:	f043 0302 	orr.w	r3, r3, #2
 800f7c0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	3348      	adds	r3, #72	; 0x48
 800f7c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f009 fc5a 	bl	8019084 <Crc32>
 800f7d0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d007      	beq.n	800f7ee <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f7e6:	89fb      	ldrh	r3, [r7, #14]
 800f7e8:	f043 0304 	orr.w	r3, r3, #4
 800f7ec:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f7f4:	21d4      	movs	r1, #212	; 0xd4
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f009 fc44 	bl	8019084 <Crc32>
 800f7fc:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f804:	68ba      	ldr	r2, [r7, #8]
 800f806:	429a      	cmp	r2, r3
 800f808:	d007      	beq.n	800f81a <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f812:	89fb      	ldrh	r3, [r7, #14]
 800f814:	f043 0308 	orr.w	r3, r3, #8
 800f818:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800f820:	2110      	movs	r1, #16
 800f822:	4618      	mov	r0, r3
 800f824:	f009 fc2e 	bl	8019084 <Crc32>
 800f828:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	429a      	cmp	r2, r3
 800f834:	d007      	beq.n	800f846 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	68ba      	ldr	r2, [r7, #8]
 800f83a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f83e:	89fb      	ldrh	r3, [r7, #14]
 800f840:	f043 0310 	orr.w	r3, r3, #16
 800f844:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800f84c:	f44f 715e 	mov.w	r1, #888	; 0x378
 800f850:	4618      	mov	r0, r3
 800f852:	f009 fc17 	bl	8019084 <Crc32>
 800f856:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	429a      	cmp	r2, r3
 800f862:	d007      	beq.n	800f874 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	68ba      	ldr	r2, [r7, #8]
 800f868:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f86c:	89fb      	ldrh	r3, [r7, #14]
 800f86e:	f043 0320 	orr.w	r3, r3, #32
 800f872:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800f87a:	2114      	movs	r1, #20
 800f87c:	4618      	mov	r0, r3
 800f87e:	f009 fc01 	bl	8019084 <Crc32>
 800f882:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d007      	beq.n	800f8a0 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f898:	89fb      	ldrh	r3, [r7, #14]
 800f89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f89e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f8a0:	89fb      	ldrh	r3, [r7, #14]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f002 f878 	bl	8011998 <CallNvmDataChangeCallback>
 800f8a8:	e000      	b.n	800f8ac <LoRaMacHandleNvm+0x150>
        return;
 800f8aa:	bf00      	nop
}
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	20000740 	.word	0x20000740

0800f8b8 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00d      	beq.n	800f8e4 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f8c8:	6838      	ldr	r0, [r7, #0]
 800f8ca:	f00d fe4d 	bl	801d568 <UTIL_TIMER_GetElapsedTime>
 800f8ce:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d905      	bls.n	800f8e4 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f8d8:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <LoRaMacHandleResponseTimeout+0x38>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e000      	b.n	800f8e6 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	20000c5c 	.word	0x20000c5c

0800f8f4 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f8fe:	f7ff fd0b 	bl	800f318 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f902:	f003 fe80 	bl	8013606 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f906:	4b25      	ldr	r3, [pc, #148]	; (800f99c <LoRaMacProcess+0xa8>)
 800f908:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f90c:	f003 0310 	and.w	r3, r3, #16
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	d023      	beq.n	800f95e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f916:	2000      	movs	r0, #0
 800f918:	f7ff fd7e 	bl	800f418 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f91c:	f7ff fefe 	bl	800f71c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f920:	f002 f858 	bl	80119d4 <IsRequestPending>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d006      	beq.n	800f938 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f92a:	f7ff feb1 	bl	800f690 <LoRaMacCheckForBeaconAcquisition>
 800f92e:	4603      	mov	r3, r0
 800f930:	461a      	mov	r2, r3
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	4313      	orrs	r3, r2
 800f936:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f938:	79fb      	ldrb	r3, [r7, #7]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d103      	bne.n	800f946 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f93e:	f7ff fe71 	bl	800f624 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f942:	f7ff fe13 	bl	800f56c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f946:	f7ff fd77 	bl	800f438 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f94a:	2001      	movs	r0, #1
 800f94c:	f7ff fd64 	bl	800f418 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f950:	4a12      	ldr	r2, [pc, #72]	; (800f99c <LoRaMacProcess+0xa8>)
 800f952:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f956:	f043 0320 	orr.w	r3, r3, #32
 800f95a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800f95e:	f7ff fdcd 	bl	800f4fc <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f962:	4b0e      	ldr	r3, [pc, #56]	; (800f99c <LoRaMacProcess+0xa8>)
 800f964:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f968:	2b02      	cmp	r3, #2
 800f96a:	d101      	bne.n	800f970 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800f96c:	f001 fc1a 	bl	80111a4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <LoRaMacProcess+0xa8>)
 800f972:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f976:	f003 0320 	and.w	r3, r3, #32
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d009      	beq.n	800f994 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f980:	4a06      	ldr	r2, [pc, #24]	; (800f99c <LoRaMacProcess+0xa8>)
 800f982:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f986:	f36f 1345 	bfc	r3, #5, #1
 800f98a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800f98e:	4804      	ldr	r0, [pc, #16]	; (800f9a0 <LoRaMacProcess+0xac>)
 800f990:	f7ff fee4 	bl	800f75c <LoRaMacHandleNvm>
    }
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	20000740 	.word	0x20000740
 800f9a0:	20000c5c 	.word	0x20000c5c

0800f9a4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f9ac:	481e      	ldr	r0, [pc, #120]	; (800fa28 <OnTxDelayedTimerEvent+0x84>)
 800f9ae:	f00d fcaf 	bl	801d310 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f9b2:	4b1e      	ldr	r3, [pc, #120]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f9b8:	f023 0320 	bic.w	r3, r3, #32
 800f9bc:	4a1b      	ldr	r2, [pc, #108]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9be:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f9c2:	4b1b      	ldr	r3, [pc, #108]	; (800fa30 <OnTxDelayedTimerEvent+0x8c>)
 800f9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9c8:	4a18      	ldr	r2, [pc, #96]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9ca:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 800f9ce:	4611      	mov	r1, r2
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7ff ff71 	bl	800f8b8 <LoRaMacHandleResponseTimeout>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d11e      	bne.n	800fa1a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f9dc:	2001      	movs	r0, #1
 800f9de:	f001 f92b 	bl	8010c38 <ScheduleTx>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d01a      	beq.n	800fa1e <OnTxDelayedTimerEvent+0x7a>
 800f9e8:	2b0b      	cmp	r3, #11
 800f9ea:	d018      	beq.n	800fa1e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f9ec:	4b10      	ldr	r3, [pc, #64]	; (800fa30 <OnTxDelayedTimerEvent+0x8c>)
 800f9ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	4b0d      	ldr	r3, [pc, #52]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9f6:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f9fa:	4b0c      	ldr	r3, [pc, #48]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9fc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800fa00:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800fa02:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fa06:	4b09      	ldr	r3, [pc, #36]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800fa08:	2209      	movs	r2, #9
 800fa0a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fa0e:	2009      	movs	r0, #9
 800fa10:	f004 fa34 	bl	8013e7c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fa14:	f001 ff6e 	bl	80118f4 <StopRetransmission>
            break;
 800fa18:	e002      	b.n	800fa20 <OnTxDelayedTimerEvent+0x7c>
        return;
 800fa1a:	bf00      	nop
 800fa1c:	e000      	b.n	800fa20 <OnTxDelayedTimerEvent+0x7c>
            break;
 800fa1e:	bf00      	nop
        }
    }
}
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	20000aa8 	.word	0x20000aa8
 800fa2c:	20000740 	.word	0x20000740
 800fa30:	20000c5c 	.word	0x20000c5c

0800fa34 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fa3c:	4b17      	ldr	r3, [pc, #92]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa3e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800fa42:	4b16      	ldr	r3, [pc, #88]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa44:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fa48:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa4a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800fa4e:	b25a      	sxtb	r2, r3
 800fa50:	4b12      	ldr	r3, [pc, #72]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa52:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa56:	4b12      	ldr	r3, [pc, #72]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa58:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800fa5c:	4b0f      	ldr	r3, [pc, #60]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa5e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fa62:	4b0f      	ldr	r3, [pc, #60]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa64:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800fa68:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa6a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fa6e:	4b0b      	ldr	r3, [pc, #44]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fa76:	4b09      	ldr	r3, [pc, #36]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fa7e:	4b08      	ldr	r3, [pc, #32]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa80:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800fa84:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa86:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fa8a:	4906      	ldr	r1, [pc, #24]	; (800faa4 <OnRxWindow1TimerEvent+0x70>)
 800fa8c:	4806      	ldr	r0, [pc, #24]	; (800faa8 <OnRxWindow1TimerEvent+0x74>)
 800fa8e:	f001 fb55 	bl	801113c <RxWindowSetup>
}
 800fa92:	bf00      	nop
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	20000740 	.word	0x20000740
 800faa0:	20000c5c 	.word	0x20000c5c
 800faa4:	20000af8 	.word	0x20000af8
 800faa8:	20000ac0 	.word	0x20000ac0

0800faac <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fab4:	4b19      	ldr	r3, [pc, #100]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fab6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d029      	beq.n	800fb12 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fabe:	4b17      	ldr	r3, [pc, #92]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fac0:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800fac4:	4b15      	ldr	r3, [pc, #84]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fac6:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800faca:	4b15      	ldr	r3, [pc, #84]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800facc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800face:	4a13      	ldr	r2, [pc, #76]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fad0:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fad4:	4b12      	ldr	r3, [pc, #72]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800fad6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800fada:	4b10      	ldr	r3, [pc, #64]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fadc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fae0:	4b0f      	ldr	r3, [pc, #60]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800fae2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800fae6:	4b0d      	ldr	r3, [pc, #52]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fae8:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800faec:	4b0b      	ldr	r3, [pc, #44]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800faf4:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fafc:	4b08      	ldr	r3, [pc, #32]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800fafe:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800fb02:	4b06      	ldr	r3, [pc, #24]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fb04:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fb08:	4906      	ldr	r1, [pc, #24]	; (800fb24 <OnRxWindow2TimerEvent+0x78>)
 800fb0a:	4807      	ldr	r0, [pc, #28]	; (800fb28 <OnRxWindow2TimerEvent+0x7c>)
 800fb0c:	f001 fb16 	bl	801113c <RxWindowSetup>
 800fb10:	e000      	b.n	800fb14 <OnRxWindow2TimerEvent+0x68>
        return;
 800fb12:	bf00      	nop
}
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20000740 	.word	0x20000740
 800fb20:	20000c5c 	.word	0x20000c5c
 800fb24:	20000b10 	.word	0x20000b10
 800fb28:	20000ad8 	.word	0x20000ad8

0800fb2c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800fb34:	4808      	ldr	r0, [pc, #32]	; (800fb58 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800fb36:	f00d fbeb 	bl	801d310 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fb3a:	4b08      	ldr	r3, [pc, #32]	; (800fb5c <OnRetransmitTimeoutTimerEvent+0x30>)
 800fb3c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d003      	beq.n	800fb4c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800fb44:	4b05      	ldr	r3, [pc, #20]	; (800fb5c <OnRetransmitTimeoutTimerEvent+0x30>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 800fb4c:	f001 ff0e 	bl	801196c <OnMacProcessNotify>
}
 800fb50:	bf00      	nop
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	20000b40 	.word	0x20000b40
 800fb5c:	20000740 	.word	0x20000740

0800fb60 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60ba      	str	r2, [r7, #8]
 800fb68:	607b      	str	r3, [r7, #4]
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73fb      	strb	r3, [r7, #15]
 800fb6e:	460b      	mov	r3, r1
 800fb70:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d005      	beq.n	800fb84 <GetFCntDown+0x24>
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d002      	beq.n	800fb84 <GetFCntDown+0x24>
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d101      	bne.n	800fb88 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fb84:	2309      	movs	r3, #9
 800fb86:	e028      	b.n	800fbda <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d016      	beq.n	800fbbc <GetFCntDown+0x5c>
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d118      	bne.n	800fbc4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fb92:	79bb      	ldrb	r3, [r7, #6]
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d10d      	bne.n	800fbb4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fb98:	7bbb      	ldrb	r3, [r7, #14]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d002      	beq.n	800fba4 <GetFCntDown+0x44>
 800fb9e:	7bbb      	ldrb	r3, [r7, #14]
 800fba0:	2b03      	cmp	r3, #3
 800fba2:	d103      	bne.n	800fbac <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	2202      	movs	r2, #2
 800fba8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fbaa:	e00d      	b.n	800fbc8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	701a      	strb	r2, [r3, #0]
            break;
 800fbb2:	e009      	b.n	800fbc8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	2203      	movs	r2, #3
 800fbb8:	701a      	strb	r2, [r3, #0]
            break;
 800fbba:	e005      	b.n	800fbc8 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	2204      	movs	r2, #4
 800fbc0:	701a      	strb	r2, [r3, #0]
            break;
 800fbc2:	e001      	b.n	800fbc8 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fbc4:	2305      	movs	r3, #5
 800fbc6:	e008      	b.n	800fbda <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	7818      	ldrb	r0, [r3, #0]
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	89db      	ldrh	r3, [r3, #14]
 800fbd0:	69fa      	ldr	r2, [r7, #28]
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	f004 fd90 	bl	80146f8 <LoRaMacCryptoGetFCntDown>
 800fbd8:	4603      	mov	r3, r0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fbe4:	b5b0      	push	{r4, r5, r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	4603      	mov	r3, r0
 800fbec:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbee:	2303      	movs	r3, #3
 800fbf0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fbf2:	4b6e      	ldr	r3, [pc, #440]	; (800fdac <SwitchClass+0x1c8>)
 800fbf4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	f000 80bb 	beq.w	800fd74 <SwitchClass+0x190>
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	f300 80ce 	bgt.w	800fda0 <SwitchClass+0x1bc>
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d003      	beq.n	800fc10 <SwitchClass+0x2c>
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	f000 80a5 	beq.w	800fd58 <SwitchClass+0x174>
 800fc0e:	e0c7      	b.n	800fda0 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fc10:	79fb      	ldrb	r3, [r7, #7]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d109      	bne.n	800fc2a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fc16:	4b65      	ldr	r3, [pc, #404]	; (800fdac <SwitchClass+0x1c8>)
 800fc18:	4a64      	ldr	r2, [pc, #400]	; (800fdac <SwitchClass+0x1c8>)
 800fc1a:	3374      	adds	r3, #116	; 0x74
 800fc1c:	326c      	adds	r2, #108	; 0x6c
 800fc1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc22:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800fc26:	2300      	movs	r3, #0
 800fc28:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d10c      	bne.n	800fc4a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fc30:	79fb      	ldrb	r3, [r7, #7]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f003 fc7e 	bl	8013534 <LoRaMacClassBSwitchClass>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fc3c:	7bfb      	ldrb	r3, [r7, #15]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d103      	bne.n	800fc4a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc42:	4a5a      	ldr	r2, [pc, #360]	; (800fdac <SwitchClass+0x1c8>)
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800fc4a:	79fb      	ldrb	r3, [r7, #7]
 800fc4c:	2b02      	cmp	r3, #2
 800fc4e:	f040 80a2 	bne.w	800fd96 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc52:	4a56      	ldr	r2, [pc, #344]	; (800fdac <SwitchClass+0x1c8>)
 800fc54:	79fb      	ldrb	r3, [r7, #7]
 800fc56:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fc5a:	4a55      	ldr	r2, [pc, #340]	; (800fdb0 <SwitchClass+0x1cc>)
 800fc5c:	4b54      	ldr	r3, [pc, #336]	; (800fdb0 <SwitchClass+0x1cc>)
 800fc5e:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800fc62:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800fc66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fc6e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fc72:	4b4f      	ldr	r3, [pc, #316]	; (800fdb0 <SwitchClass+0x1cc>)
 800fc74:	2202      	movs	r2, #2
 800fc76:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	73bb      	strb	r3, [r7, #14]
 800fc7e:	e05b      	b.n	800fd38 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fc80:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc84:	4949      	ldr	r1, [pc, #292]	; (800fdac <SwitchClass+0x1c8>)
 800fc86:	4613      	mov	r3, r2
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	4413      	add	r3, r2
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	440b      	add	r3, r1
 800fc90:	33e9      	adds	r3, #233	; 0xe9
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d049      	beq.n	800fd2c <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800fc98:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc9c:	4943      	ldr	r1, [pc, #268]	; (800fdac <SwitchClass+0x1c8>)
 800fc9e:	4613      	mov	r3, r2
 800fca0:	005b      	lsls	r3, r3, #1
 800fca2:	4413      	add	r3, r2
 800fca4:	011b      	lsls	r3, r3, #4
 800fca6:	440b      	add	r3, r1
 800fca8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fcac:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d13c      	bne.n	800fd2c <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800fcb2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fcb6:	493d      	ldr	r1, [pc, #244]	; (800fdac <SwitchClass+0x1c8>)
 800fcb8:	4613      	mov	r3, r2
 800fcba:	005b      	lsls	r3, r3, #1
 800fcbc:	4413      	add	r3, r2
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	440b      	add	r3, r1
 800fcc2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4a38      	ldr	r2, [pc, #224]	; (800fdac <SwitchClass+0x1c8>)
 800fcca:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800fccc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fcd0:	4936      	ldr	r1, [pc, #216]	; (800fdac <SwitchClass+0x1c8>)
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	005b      	lsls	r3, r3, #1
 800fcd6:	4413      	add	r3, r2
 800fcd8:	011b      	lsls	r3, r3, #4
 800fcda:	440b      	add	r3, r1
 800fcdc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fce0:	f993 3000 	ldrsb.w	r3, [r3]
 800fce4:	b2da      	uxtb	r2, r3
 800fce6:	4b31      	ldr	r3, [pc, #196]	; (800fdac <SwitchClass+0x1c8>)
 800fce8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fcec:	4b30      	ldr	r3, [pc, #192]	; (800fdb0 <SwitchClass+0x1cc>)
 800fcee:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800fcf2:	4b2f      	ldr	r3, [pc, #188]	; (800fdb0 <SwitchClass+0x1cc>)
 800fcf4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fcf8:	4b2c      	ldr	r3, [pc, #176]	; (800fdac <SwitchClass+0x1c8>)
 800fcfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcfc:	4a2c      	ldr	r2, [pc, #176]	; (800fdb0 <SwitchClass+0x1cc>)
 800fcfe:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fd02:	4b2a      	ldr	r3, [pc, #168]	; (800fdac <SwitchClass+0x1c8>)
 800fd04:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800fd08:	4b29      	ldr	r3, [pc, #164]	; (800fdb0 <SwitchClass+0x1cc>)
 800fd0a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fd0e:	4b27      	ldr	r3, [pc, #156]	; (800fdac <SwitchClass+0x1c8>)
 800fd10:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800fd14:	4b26      	ldr	r3, [pc, #152]	; (800fdb0 <SwitchClass+0x1cc>)
 800fd16:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fd1a:	4b25      	ldr	r3, [pc, #148]	; (800fdb0 <SwitchClass+0x1cc>)
 800fd1c:	2203      	movs	r2, #3
 800fd1e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fd22:	4b23      	ldr	r3, [pc, #140]	; (800fdb0 <SwitchClass+0x1cc>)
 800fd24:	2201      	movs	r2, #1
 800fd26:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800fd2a:	e009      	b.n	800fd40 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	3301      	adds	r3, #1
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	73bb      	strb	r3, [r7, #14]
 800fd38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	dd9f      	ble.n	800fc80 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fd40:	4b1b      	ldr	r3, [pc, #108]	; (800fdb0 <SwitchClass+0x1cc>)
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fd48:	4b1a      	ldr	r3, [pc, #104]	; (800fdb4 <SwitchClass+0x1d0>)
 800fd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fd4e:	f001 fa29 	bl	80111a4 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800fd52:	2300      	movs	r3, #0
 800fd54:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fd56:	e01e      	b.n	800fd96 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f003 fbea 	bl	8013534 <LoRaMacClassBSwitchClass>
 800fd60:	4603      	mov	r3, r0
 800fd62:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fd64:	7bfb      	ldrb	r3, [r7, #15]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d117      	bne.n	800fd9a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd6a:	4a10      	ldr	r2, [pc, #64]	; (800fdac <SwitchClass+0x1c8>)
 800fd6c:	79fb      	ldrb	r3, [r7, #7]
 800fd6e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 800fd72:	e012      	b.n	800fd9a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d111      	bne.n	800fd9e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800fd7a:	4b0d      	ldr	r3, [pc, #52]	; (800fdb0 <SwitchClass+0x1cc>)
 800fd7c:	2206      	movs	r2, #6
 800fd7e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd82:	4a0a      	ldr	r2, [pc, #40]	; (800fdac <SwitchClass+0x1c8>)
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fd8a:	4b0a      	ldr	r3, [pc, #40]	; (800fdb4 <SwitchClass+0x1d0>)
 800fd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd8e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800fd94:	e003      	b.n	800fd9e <SwitchClass+0x1ba>
            break;
 800fd96:	bf00      	nop
 800fd98:	e002      	b.n	800fda0 <SwitchClass+0x1bc>
            break;
 800fd9a:	bf00      	nop
 800fd9c:	e000      	b.n	800fda0 <SwitchClass+0x1bc>
            break;
 800fd9e:	bf00      	nop
        }
    }

    return status;
 800fda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bdb0      	pop	{r4, r5, r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	20000c5c 	.word	0x20000c5c
 800fdb0:	20000740 	.word	0x20000740
 800fdb4:	0801ebac 	.word	0x0801ebac

0800fdb8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fdc2:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fdc4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fdc8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fdca:	79fb      	ldrb	r3, [r7, #7]
 800fdcc:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fdce:	230d      	movs	r3, #13
 800fdd0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fdd2:	4b0c      	ldr	r3, [pc, #48]	; (800fe04 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fdd4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d001      	beq.n	800fde0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fddc:	230e      	movs	r3, #14
 800fdde:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fde0:	4b08      	ldr	r3, [pc, #32]	; (800fe04 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fde2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fde6:	f107 0210 	add.w	r2, r7, #16
 800fdea:	4611      	mov	r1, r2
 800fdec:	4618      	mov	r0, r3
 800fdee:	f005 faf3 	bl	80153d8 <RegionGetPhyParam>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	b2db      	uxtb	r3, r3
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3718      	adds	r7, #24
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	20000c5c 	.word	0x20000c5c

0800fe08 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	4603      	mov	r3, r0
 800fe10:	71fb      	strb	r3, [r7, #7]
 800fe12:	460b      	mov	r3, r1
 800fe14:	71bb      	strb	r3, [r7, #6]
 800fe16:	4613      	mov	r3, r2
 800fe18:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fe22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff ffc6 	bl	800fdb8 <GetMaxAppPayloadWithoutFOptsLength>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	797b      	ldrb	r3, [r7, #5]
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	4413      	add	r3, r2
 800fe3a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fe3c:	89ba      	ldrh	r2, [r7, #12]
 800fe3e:	89fb      	ldrh	r3, [r7, #14]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d804      	bhi.n	800fe4e <ValidatePayloadLength+0x46>
 800fe44:	89bb      	ldrh	r3, [r7, #12]
 800fe46:	2bff      	cmp	r3, #255	; 0xff
 800fe48:	d801      	bhi.n	800fe4e <ValidatePayloadLength+0x46>
    {
        return true;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e000      	b.n	800fe50 <ValidatePayloadLength+0x48>
    }
    return false;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fe58:	b590      	push	{r4, r7, lr}
 800fe5a:	b0a5      	sub	sp, #148	; 0x94
 800fe5c:	af02      	add	r7, sp, #8
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	4608      	mov	r0, r1
 800fe62:	4611      	mov	r1, r2
 800fe64:	461a      	mov	r2, r3
 800fe66:	4603      	mov	r3, r0
 800fe68:	70fb      	strb	r3, [r7, #3]
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	70bb      	strb	r3, [r7, #2]
 800fe6e:	4613      	mov	r3, r2
 800fe70:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800fe72:	2300      	movs	r3, #0
 800fe74:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800fe84:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	f000 84ab 	beq.w	80107e4 <ProcessMacCommands+0x98c>
 800fe8e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	f040 84ac 	bne.w	80107f0 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800fe98:	f000 bca4 	b.w	80107e4 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fe9c:	78fb      	ldrb	r3, [r7, #3]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	4413      	add	r3, r2
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f003 fe45 	bl	8013b34 <LoRaMacCommandsGetCmdSize>
 800feaa:	4603      	mov	r3, r0
 800feac:	461a      	mov	r2, r3
 800feae:	78fb      	ldrb	r3, [r7, #3]
 800feb0:	441a      	add	r2, r3
 800feb2:	78bb      	ldrb	r3, [r7, #2]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	f300 849d 	bgt.w	80107f4 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800feba:	78fb      	ldrb	r3, [r7, #3]
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	70fa      	strb	r2, [r7, #3]
 800fec0:	461a      	mov	r2, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4413      	add	r3, r2
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	3b02      	subs	r3, #2
 800feca:	2b11      	cmp	r3, #17
 800fecc:	f200 8494 	bhi.w	80107f8 <ProcessMacCommands+0x9a0>
 800fed0:	a201      	add	r2, pc, #4	; (adr r2, 800fed8 <ProcessMacCommands+0x80>)
 800fed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed6:	bf00      	nop
 800fed8:	0800ff21 	.word	0x0800ff21
 800fedc:	0800ff63 	.word	0x0800ff63
 800fee0:	080100df 	.word	0x080100df
 800fee4:	0801011d 	.word	0x0801011d
 800fee8:	08010215 	.word	0x08010215
 800feec:	08010265 	.word	0x08010265
 800fef0:	08010321 	.word	0x08010321
 800fef4:	08010377 	.word	0x08010377
 800fef8:	0801045d 	.word	0x0801045d
 800fefc:	080107f9 	.word	0x080107f9
 800ff00:	080107f9 	.word	0x080107f9
 800ff04:	08010505 	.word	0x08010505
 800ff08:	080107f9 	.word	0x080107f9
 800ff0c:	080107f9 	.word	0x080107f9
 800ff10:	08010625 	.word	0x08010625
 800ff14:	08010659 	.word	0x08010659
 800ff18:	080106e9 	.word	0x080106e9
 800ff1c:	0801075f 	.word	0x0801075f
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ff20:	2005      	movs	r0, #5
 800ff22:	f003 ffdf 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 845b 	beq.w	80107e4 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ff2e:	2105      	movs	r1, #5
 800ff30:	2000      	movs	r0, #0
 800ff32:	f003 ff4b 	bl	8013dcc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ff36:	78fb      	ldrb	r3, [r7, #3]
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	70fa      	strb	r2, [r7, #3]
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4413      	add	r3, r2
 800ff42:	781a      	ldrb	r2, [r3, #0]
 800ff44:	4bb0      	ldr	r3, [pc, #704]	; (8010208 <ProcessMacCommands+0x3b0>)
 800ff46:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ff4a:	78fb      	ldrb	r3, [r7, #3]
 800ff4c:	1c5a      	adds	r2, r3, #1
 800ff4e:	70fa      	strb	r2, [r7, #3]
 800ff50:	461a      	mov	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4413      	add	r3, r2
 800ff56:	781a      	ldrb	r2, [r3, #0]
 800ff58:	4bab      	ldr	r3, [pc, #684]	; (8010208 <ProcessMacCommands+0x3b0>)
 800ff5a:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 800ff5e:	f000 bc41 	b.w	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ff74:	2300      	movs	r3, #0
 800ff76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800ff7a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ff7e:	f083 0301 	eor.w	r3, r3, #1
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	f000 80a5 	beq.w	80100d4 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800ff90:	78fb      	ldrb	r3, [r7, #3]
 800ff92:	3b01      	subs	r3, #1
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	4413      	add	r3, r2
 800ff98:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ff9a:	4b9c      	ldr	r3, [pc, #624]	; (801020c <ProcessMacCommands+0x3b4>)
 800ff9c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ffa0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ffa4:	4b99      	ldr	r3, [pc, #612]	; (801020c <ProcessMacCommands+0x3b4>)
 800ffa6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ffaa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ffae:	4b97      	ldr	r3, [pc, #604]	; (801020c <ProcessMacCommands+0x3b4>)
 800ffb0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ffb4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ffb8:	4b94      	ldr	r3, [pc, #592]	; (801020c <ProcessMacCommands+0x3b4>)
 800ffba:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ffbe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ffc2:	4b92      	ldr	r3, [pc, #584]	; (801020c <ProcessMacCommands+0x3b4>)
 800ffc4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ffc8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ffcc:	4b8f      	ldr	r3, [pc, #572]	; (801020c <ProcessMacCommands+0x3b4>)
 800ffce:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ffd2:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800ffd4:	4b8d      	ldr	r3, [pc, #564]	; (801020c <ProcessMacCommands+0x3b4>)
 800ffd6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d008      	beq.n	800fff0 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ffde:	78ba      	ldrb	r2, [r7, #2]
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800ffee:	e002      	b.n	800fff6 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800fff0:	2305      	movs	r3, #5
 800fff2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800fff6:	4b85      	ldr	r3, [pc, #532]	; (801020c <ProcessMacCommands+0x3b4>)
 800fff8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800fffc:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8010000:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8010004:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010008:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801000c:	9301      	str	r3, [sp, #4]
 801000e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	4623      	mov	r3, r4
 8010016:	f005 fae2 	bl	80155de <RegionLinkAdrReq>
 801001a:	4603      	mov	r3, r0
 801001c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010020:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010024:	f003 0307 	and.w	r3, r3, #7
 8010028:	2b07      	cmp	r3, #7
 801002a:	d119      	bne.n	8010060 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 801002c:	4b77      	ldr	r3, [pc, #476]	; (801020c <ProcessMacCommands+0x3b4>)
 801002e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8010032:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010036:	429a      	cmp	r2, r3
 8010038:	da03      	bge.n	8010042 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801003a:	4b74      	ldr	r3, [pc, #464]	; (801020c <ProcessMacCommands+0x3b4>)
 801003c:	2201      	movs	r2, #1
 801003e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010042:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8010046:	4b71      	ldr	r3, [pc, #452]	; (801020c <ProcessMacCommands+0x3b4>)
 8010048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801004c:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8010050:	4b6e      	ldr	r3, [pc, #440]	; (801020c <ProcessMacCommands+0x3b4>)
 8010052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010056:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 801005a:	4b6c      	ldr	r3, [pc, #432]	; (801020c <ProcessMacCommands+0x3b4>)
 801005c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010060:	2300      	movs	r3, #0
 8010062:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010066:	e00b      	b.n	8010080 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010068:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 801006c:	2201      	movs	r2, #1
 801006e:	4619      	mov	r1, r3
 8010070:	2003      	movs	r0, #3
 8010072:	f003 fbff 	bl	8013874 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010076:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801007a:	3301      	adds	r3, #1
 801007c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010080:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8010084:	4a62      	ldr	r2, [pc, #392]	; (8010210 <ProcessMacCommands+0x3b8>)
 8010086:	fba2 2303 	umull	r2, r3, r2, r3
 801008a:	089b      	lsrs	r3, r3, #2
 801008c:	b2db      	uxtb	r3, r3
 801008e:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8010092:	429a      	cmp	r2, r3
 8010094:	d3e8      	bcc.n	8010068 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010096:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801009a:	78fb      	ldrb	r3, [r7, #3]
 801009c:	4413      	add	r3, r2
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	3b01      	subs	r3, #1
 80100a2:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 80100a4:	78fa      	ldrb	r2, [r7, #3]
 80100a6:	78bb      	ldrb	r3, [r7, #2]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d20a      	bcs.n	80100c2 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80100ac:	78fb      	ldrb	r3, [r7, #3]
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	70fa      	strb	r2, [r7, #3]
 80100b2:	461a      	mov	r2, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4413      	add	r3, r2
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	2b03      	cmp	r3, #3
 80100bc:	f43f af68 	beq.w	800ff90 <ProcessMacCommands+0x138>
 80100c0:	e000      	b.n	80100c4 <ProcessMacCommands+0x26c>
                            break;
 80100c2:	bf00      	nop

                    if( macIndex < commandsSize )
 80100c4:	78fa      	ldrb	r2, [r7, #3]
 80100c6:	78bb      	ldrb	r3, [r7, #2]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d206      	bcs.n	80100da <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80100cc:	78fb      	ldrb	r3, [r7, #3]
 80100ce:	3b01      	subs	r3, #1
 80100d0:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80100d2:	e002      	b.n	80100da <ProcessMacCommands+0x282>
                    macIndex += 4;
 80100d4:	78fb      	ldrb	r3, [r7, #3]
 80100d6:	3304      	adds	r3, #4
 80100d8:	70fb      	strb	r3, [r7, #3]
                break;
 80100da:	bf00      	nop
 80100dc:	e382      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80100de:	78fb      	ldrb	r3, [r7, #3]
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	70fa      	strb	r2, [r7, #3]
 80100e4:	461a      	mov	r2, r3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4413      	add	r3, r2
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	f003 030f 	and.w	r3, r3, #15
 80100f0:	b2da      	uxtb	r2, r3
 80100f2:	4b46      	ldr	r3, [pc, #280]	; (801020c <ProcessMacCommands+0x3b4>)
 80100f4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80100f8:	4b44      	ldr	r3, [pc, #272]	; (801020c <ProcessMacCommands+0x3b4>)
 80100fa:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80100fe:	461a      	mov	r2, r3
 8010100:	2301      	movs	r3, #1
 8010102:	4093      	lsls	r3, r2
 8010104:	b29a      	uxth	r2, r3
 8010106:	4b41      	ldr	r3, [pc, #260]	; (801020c <ProcessMacCommands+0x3b4>)
 8010108:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801010c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010110:	2200      	movs	r2, #0
 8010112:	4619      	mov	r1, r3
 8010114:	2004      	movs	r0, #4
 8010116:	f003 fbad 	bl	8013874 <LoRaMacCommandsAddCmd>
                break;
 801011a:	e363      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801011c:	2307      	movs	r3, #7
 801011e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010122:	78fb      	ldrb	r3, [r7, #3]
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	4413      	add	r3, r2
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	091b      	lsrs	r3, r3, #4
 801012c:	b2db      	uxtb	r3, r3
 801012e:	b25b      	sxtb	r3, r3
 8010130:	f003 0307 	and.w	r3, r3, #7
 8010134:	b25b      	sxtb	r3, r3
 8010136:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801013a:	78fb      	ldrb	r3, [r7, #3]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	4413      	add	r3, r2
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	b25b      	sxtb	r3, r3
 8010144:	f003 030f 	and.w	r3, r3, #15
 8010148:	b25b      	sxtb	r3, r3
 801014a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801014e:	78fb      	ldrb	r3, [r7, #3]
 8010150:	3301      	adds	r3, #1
 8010152:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010154:	78fb      	ldrb	r3, [r7, #3]
 8010156:	1c5a      	adds	r2, r3, #1
 8010158:	70fa      	strb	r2, [r7, #3]
 801015a:	461a      	mov	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4413      	add	r3, r2
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010164:	78fb      	ldrb	r3, [r7, #3]
 8010166:	1c5a      	adds	r2, r3, #1
 8010168:	70fa      	strb	r2, [r7, #3]
 801016a:	461a      	mov	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4413      	add	r3, r2
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	021a      	lsls	r2, r3, #8
 8010174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010176:	4313      	orrs	r3, r2
 8010178:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801017a:	78fb      	ldrb	r3, [r7, #3]
 801017c:	1c5a      	adds	r2, r3, #1
 801017e:	70fa      	strb	r2, [r7, #3]
 8010180:	461a      	mov	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4413      	add	r3, r2
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	041a      	lsls	r2, r3, #16
 801018a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801018c:	4313      	orrs	r3, r2
 801018e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010192:	2264      	movs	r2, #100	; 0x64
 8010194:	fb02 f303 	mul.w	r3, r2, r3
 8010198:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801019a:	4b1c      	ldr	r3, [pc, #112]	; (801020c <ProcessMacCommands+0x3b4>)
 801019c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80101a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80101a4:	4611      	mov	r1, r2
 80101a6:	4618      	mov	r0, r3
 80101a8:	f005 fa40 	bl	801562c <RegionRxParamSetupReq>
 80101ac:	4603      	mov	r3, r0
 80101ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80101b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101b6:	f003 0307 	and.w	r3, r3, #7
 80101ba:	2b07      	cmp	r3, #7
 80101bc:	d117      	bne.n	80101ee <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80101be:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	4b11      	ldr	r3, [pc, #68]	; (801020c <ProcessMacCommands+0x3b4>)
 80101c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80101ca:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	4b0e      	ldr	r3, [pc, #56]	; (801020c <ProcessMacCommands+0x3b4>)
 80101d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80101d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d8:	4a0c      	ldr	r2, [pc, #48]	; (801020c <ProcessMacCommands+0x3b4>)
 80101da:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80101dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101de:	4a0b      	ldr	r2, [pc, #44]	; (801020c <ProcessMacCommands+0x3b4>)
 80101e0:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80101e2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80101e6:	b2da      	uxtb	r2, r3
 80101e8:	4b08      	ldr	r3, [pc, #32]	; (801020c <ProcessMacCommands+0x3b4>)
 80101ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80101ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101f2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80101f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101fa:	2201      	movs	r2, #1
 80101fc:	4619      	mov	r1, r3
 80101fe:	2005      	movs	r0, #5
 8010200:	f003 fb38 	bl	8013874 <LoRaMacCommandsAddCmd>
                break;
 8010204:	bf00      	nop
 8010206:	e2ed      	b.n	80107e4 <ProcessMacCommands+0x98c>
 8010208:	20000740 	.word	0x20000740
 801020c:	20000c5c 	.word	0x20000c5c
 8010210:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010214:	23ff      	movs	r3, #255	; 0xff
 8010216:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801021a:	4bb7      	ldr	r3, [pc, #732]	; (80104f8 <ProcessMacCommands+0x6a0>)
 801021c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00d      	beq.n	8010240 <ProcessMacCommands+0x3e8>
 8010224:	4bb4      	ldr	r3, [pc, #720]	; (80104f8 <ProcessMacCommands+0x6a0>)
 8010226:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d007      	beq.n	8010240 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010230:	4bb1      	ldr	r3, [pc, #708]	; (80104f8 <ProcessMacCommands+0x6a0>)
 8010232:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4798      	blx	r3
 801023a:	4603      	mov	r3, r0
 801023c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010240:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010244:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010248:	787b      	ldrb	r3, [r7, #1]
 801024a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801024e:	b2db      	uxtb	r3, r3
 8010250:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010254:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010258:	2202      	movs	r2, #2
 801025a:	4619      	mov	r1, r3
 801025c:	2006      	movs	r0, #6
 801025e:	f003 fb09 	bl	8013874 <LoRaMacCommandsAddCmd>
                break;
 8010262:	e2bf      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010264:	2303      	movs	r3, #3
 8010266:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	1c5a      	adds	r2, r3, #1
 801026e:	70fa      	strb	r2, [r7, #3]
 8010270:	461a      	mov	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4413      	add	r3, r2
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	b25b      	sxtb	r3, r3
 801027a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801027e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010282:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010284:	78fb      	ldrb	r3, [r7, #3]
 8010286:	1c5a      	adds	r2, r3, #1
 8010288:	70fa      	strb	r2, [r7, #3]
 801028a:	461a      	mov	r2, r3
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4413      	add	r3, r2
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010294:	78fb      	ldrb	r3, [r7, #3]
 8010296:	1c5a      	adds	r2, r3, #1
 8010298:	70fa      	strb	r2, [r7, #3]
 801029a:	461a      	mov	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4413      	add	r3, r2
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	021a      	lsls	r2, r3, #8
 80102a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a6:	4313      	orrs	r3, r2
 80102a8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80102aa:	78fb      	ldrb	r3, [r7, #3]
 80102ac:	1c5a      	adds	r2, r3, #1
 80102ae:	70fa      	strb	r2, [r7, #3]
 80102b0:	461a      	mov	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4413      	add	r3, r2
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	041a      	lsls	r2, r3, #16
 80102ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102bc:	4313      	orrs	r3, r2
 80102be:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80102c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c2:	2264      	movs	r2, #100	; 0x64
 80102c4:	fb02 f303 	mul.w	r3, r2, r3
 80102c8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80102ca:	2300      	movs	r3, #0
 80102cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80102ce:	78fb      	ldrb	r3, [r7, #3]
 80102d0:	1c5a      	adds	r2, r3, #1
 80102d2:	70fa      	strb	r2, [r7, #3]
 80102d4:	461a      	mov	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4413      	add	r3, r2
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	b25b      	sxtb	r3, r3
 80102de:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80102e2:	4b86      	ldr	r3, [pc, #536]	; (80104fc <ProcessMacCommands+0x6a4>)
 80102e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80102e8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80102ec:	4611      	mov	r1, r2
 80102ee:	4618      	mov	r0, r3
 80102f0:	f005 f9b7 	bl	8015662 <RegionNewChannelReq>
 80102f4:	4603      	mov	r3, r0
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80102fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010300:	b25b      	sxtb	r3, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	db0a      	blt.n	801031c <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8010306:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801030a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801030e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010312:	2201      	movs	r2, #1
 8010314:	4619      	mov	r1, r3
 8010316:	2007      	movs	r0, #7
 8010318:	f003 faac 	bl	8013874 <LoRaMacCommandsAddCmd>
                }
                break;
 801031c:	bf00      	nop
 801031e:	e261      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010320:	78fb      	ldrb	r3, [r7, #3]
 8010322:	1c5a      	adds	r2, r3, #1
 8010324:	70fa      	strb	r2, [r7, #3]
 8010326:	461a      	mov	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4413      	add	r3, r2
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	f003 030f 	and.w	r3, r3, #15
 8010332:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8010336:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801033a:	2b00      	cmp	r3, #0
 801033c:	d104      	bne.n	8010348 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 801033e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010342:	3301      	adds	r3, #1
 8010344:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010348:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801034c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010350:	fb02 f303 	mul.w	r3, r2, r3
 8010354:	461a      	mov	r2, r3
 8010356:	4b69      	ldr	r3, [pc, #420]	; (80104fc <ProcessMacCommands+0x6a4>)
 8010358:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801035a:	4b68      	ldr	r3, [pc, #416]	; (80104fc <ProcessMacCommands+0x6a4>)
 801035c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801035e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010362:	4a66      	ldr	r2, [pc, #408]	; (80104fc <ProcessMacCommands+0x6a4>)
 8010364:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010366:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801036a:	2200      	movs	r2, #0
 801036c:	4619      	mov	r1, r3
 801036e:	2008      	movs	r0, #8
 8010370:	f003 fa80 	bl	8013874 <LoRaMacCommandsAddCmd>
                break;
 8010374:	e236      	b.n	80107e4 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010376:	78fb      	ldrb	r3, [r7, #3]
 8010378:	1c5a      	adds	r2, r3, #1
 801037a:	70fa      	strb	r2, [r7, #3]
 801037c:	461a      	mov	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4413      	add	r3, r2
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010394:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010398:	f003 0320 	and.w	r3, r3, #32
 801039c:	2b00      	cmp	r3, #0
 801039e:	d002      	beq.n	80103a6 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80103a0:	2301      	movs	r3, #1
 80103a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80103a6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80103aa:	f003 0310 	and.w	r3, r3, #16
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d002      	beq.n	80103b8 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80103b2:	2301      	movs	r3, #1
 80103b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80103b8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80103bc:	f003 030f 	and.w	r3, r3, #15
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80103c6:	4b4d      	ldr	r3, [pc, #308]	; (80104fc <ProcessMacCommands+0x6a4>)
 80103c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80103cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80103d0:	4611      	mov	r1, r2
 80103d2:	4618      	mov	r0, r3
 80103d4:	f005 f960 	bl	8015698 <RegionTxParamSetupReq>
 80103d8:	4603      	mov	r3, r0
 80103da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103de:	d03b      	beq.n	8010458 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80103e0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80103e4:	4b45      	ldr	r3, [pc, #276]	; (80104fc <ProcessMacCommands+0x6a4>)
 80103e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80103ea:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80103ee:	4b43      	ldr	r3, [pc, #268]	; (80104fc <ProcessMacCommands+0x6a4>)
 80103f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80103f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80103f8:	461a      	mov	r2, r3
 80103fa:	4b41      	ldr	r3, [pc, #260]	; (8010500 <ProcessMacCommands+0x6a8>)
 80103fc:	5c9b      	ldrb	r3, [r3, r2]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7f0 f9e4 	bl	80007cc <__aeabi_ui2f>
 8010404:	4603      	mov	r3, r0
 8010406:	4a3d      	ldr	r2, [pc, #244]	; (80104fc <ProcessMacCommands+0x6a4>)
 8010408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801040c:	2302      	movs	r3, #2
 801040e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010412:	4b3a      	ldr	r3, [pc, #232]	; (80104fc <ProcessMacCommands+0x6a4>)
 8010414:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010418:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801041c:	4b37      	ldr	r3, [pc, #220]	; (80104fc <ProcessMacCommands+0x6a4>)
 801041e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010422:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010426:	4611      	mov	r1, r2
 8010428:	4618      	mov	r0, r3
 801042a:	f004 ffd5 	bl	80153d8 <RegionGetPhyParam>
 801042e:	4603      	mov	r3, r0
 8010430:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010434:	b25a      	sxtb	r2, r3
 8010436:	4b31      	ldr	r3, [pc, #196]	; (80104fc <ProcessMacCommands+0x6a4>)
 8010438:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801043c:	4293      	cmp	r3, r2
 801043e:	bfb8      	it	lt
 8010440:	4613      	movlt	r3, r2
 8010442:	b25a      	sxtb	r2, r3
 8010444:	4b2d      	ldr	r3, [pc, #180]	; (80104fc <ProcessMacCommands+0x6a4>)
 8010446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801044a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801044e:	2200      	movs	r2, #0
 8010450:	4619      	mov	r1, r3
 8010452:	2009      	movs	r0, #9
 8010454:	f003 fa0e 	bl	8013874 <LoRaMacCommandsAddCmd>
                }
                break;
 8010458:	bf00      	nop
 801045a:	e1c3      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801045c:	2303      	movs	r3, #3
 801045e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010462:	78fb      	ldrb	r3, [r7, #3]
 8010464:	1c5a      	adds	r2, r3, #1
 8010466:	70fa      	strb	r2, [r7, #3]
 8010468:	461a      	mov	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4413      	add	r3, r2
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010474:	78fb      	ldrb	r3, [r7, #3]
 8010476:	1c5a      	adds	r2, r3, #1
 8010478:	70fa      	strb	r2, [r7, #3]
 801047a:	461a      	mov	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4413      	add	r3, r2
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010484:	78fb      	ldrb	r3, [r7, #3]
 8010486:	1c5a      	adds	r2, r3, #1
 8010488:	70fa      	strb	r2, [r7, #3]
 801048a:	461a      	mov	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4413      	add	r3, r2
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	021a      	lsls	r2, r3, #8
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	4313      	orrs	r3, r2
 8010498:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801049a:	78fb      	ldrb	r3, [r7, #3]
 801049c:	1c5a      	adds	r2, r3, #1
 801049e:	70fa      	strb	r2, [r7, #3]
 80104a0:	461a      	mov	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4413      	add	r3, r2
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	041a      	lsls	r2, r3, #16
 80104aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ac:	4313      	orrs	r3, r2
 80104ae:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	2264      	movs	r2, #100	; 0x64
 80104b4:	fb02 f303 	mul.w	r3, r2, r3
 80104b8:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80104ba:	4b10      	ldr	r3, [pc, #64]	; (80104fc <ProcessMacCommands+0x6a4>)
 80104bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80104c0:	f107 0220 	add.w	r2, r7, #32
 80104c4:	4611      	mov	r1, r2
 80104c6:	4618      	mov	r0, r3
 80104c8:	f005 f901 	bl	80156ce <RegionDlChannelReq>
 80104cc:	4603      	mov	r3, r0
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80104d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80104d8:	b25b      	sxtb	r3, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	db0a      	blt.n	80104f4 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 80104de:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80104e2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80104e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80104ea:	2201      	movs	r2, #1
 80104ec:	4619      	mov	r1, r3
 80104ee:	200a      	movs	r0, #10
 80104f0:	f003 f9c0 	bl	8013874 <LoRaMacCommandsAddCmd>
                }
                break;
 80104f4:	bf00      	nop
 80104f6:	e175      	b.n	80107e4 <ProcessMacCommands+0x98c>
 80104f8:	20000740 	.word	0x20000740
 80104fc:	20000c5c 	.word	0x20000c5c
 8010500:	0801eae0 	.word	0x0801eae0
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010504:	2009      	movs	r0, #9
 8010506:	f003 fced 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	f000 8084 	beq.w	801061a <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010512:	2109      	movs	r1, #9
 8010514:	2000      	movs	r0, #0
 8010516:	f003 fc59 	bl	8013dcc <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801051a:	f107 0318 	add.w	r3, r7, #24
 801051e:	2200      	movs	r2, #0
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010524:	f107 0310 	add.w	r3, r7, #16
 8010528:	2200      	movs	r2, #0
 801052a:	601a      	str	r2, [r3, #0]
 801052c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801052e:	f107 0308 	add.w	r3, r7, #8
 8010532:	2200      	movs	r2, #0
 8010534:	601a      	str	r2, [r3, #0]
 8010536:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010538:	78fb      	ldrb	r3, [r7, #3]
 801053a:	1c5a      	adds	r2, r3, #1
 801053c:	70fa      	strb	r2, [r7, #3]
 801053e:	461a      	mov	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	4413      	add	r3, r2
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010548:	78fb      	ldrb	r3, [r7, #3]
 801054a:	1c5a      	adds	r2, r3, #1
 801054c:	70fa      	strb	r2, [r7, #3]
 801054e:	461a      	mov	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4413      	add	r3, r2
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	021a      	lsls	r2, r3, #8
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	4313      	orrs	r3, r2
 801055c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801055e:	78fb      	ldrb	r3, [r7, #3]
 8010560:	1c5a      	adds	r2, r3, #1
 8010562:	70fa      	strb	r2, [r7, #3]
 8010564:	461a      	mov	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4413      	add	r3, r2
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	041a      	lsls	r2, r3, #16
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	4313      	orrs	r3, r2
 8010572:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010574:	78fb      	ldrb	r3, [r7, #3]
 8010576:	1c5a      	adds	r2, r3, #1
 8010578:	70fa      	strb	r2, [r7, #3]
 801057a:	461a      	mov	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4413      	add	r3, r2
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	061a      	lsls	r2, r3, #24
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	4313      	orrs	r3, r2
 8010588:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	1c5a      	adds	r2, r3, #1
 801058e:	70fa      	strb	r2, [r7, #3]
 8010590:	461a      	mov	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4413      	add	r3, r2
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	b21b      	sxth	r3, r3
 801059a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801059c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80105a0:	461a      	mov	r2, r3
 80105a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80105a6:	fb02 f303 	mul.w	r3, r2, r3
 80105aa:	121b      	asrs	r3, r3, #8
 80105ac:	b21b      	sxth	r3, r3
 80105ae:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80105b0:	f107 0310 	add.w	r3, r7, #16
 80105b4:	f107 0218 	add.w	r2, r7, #24
 80105b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105bc:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80105c0:	693a      	ldr	r2, [r7, #16]
 80105c2:	4b8f      	ldr	r3, [pc, #572]	; (8010800 <ProcessMacCommands+0x9a8>)
 80105c4:	4413      	add	r3, r2
 80105c6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80105c8:	f107 0308 	add.w	r3, r7, #8
 80105cc:	4618      	mov	r0, r3
 80105ce:	f00c f937 	bl	801c840 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80105d2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80105d6:	4b8b      	ldr	r3, [pc, #556]	; (8010804 <ProcessMacCommands+0x9ac>)
 80105d8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80105dc:	9200      	str	r2, [sp, #0]
 80105de:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80105e2:	f107 0210 	add.w	r2, r7, #16
 80105e6:	ca06      	ldmia	r2, {r1, r2}
 80105e8:	f00c f8c3 	bl	801c772 <SysTimeSub>
 80105ec:	f107 0010 	add.w	r0, r7, #16
 80105f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f6:	f107 0208 	add.w	r2, r7, #8
 80105fa:	ca06      	ldmia	r2, {r1, r2}
 80105fc:	f00c f880 	bl	801c700 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010600:	f107 0310 	add.w	r3, r7, #16
 8010604:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010608:	f00c f8ec 	bl	801c7e4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801060c:	f002 ffd0 	bl	80135b0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010610:	4b7c      	ldr	r3, [pc, #496]	; (8010804 <ProcessMacCommands+0x9ac>)
 8010612:	2201      	movs	r2, #1
 8010614:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8010618:	e0e4      	b.n	80107e4 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801061a:	4b7a      	ldr	r3, [pc, #488]	; (8010804 <ProcessMacCommands+0x9ac>)
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8010622:	e0df      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010624:	200c      	movs	r0, #12
 8010626:	f003 fc5d 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 80d9 	beq.w	80107e4 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010632:	210c      	movs	r1, #12
 8010634:	2000      	movs	r0, #0
 8010636:	f003 fbc9 	bl	8013dcc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801063a:	4b72      	ldr	r3, [pc, #456]	; (8010804 <ProcessMacCommands+0x9ac>)
 801063c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8010640:	2b04      	cmp	r3, #4
 8010642:	f000 80cf 	beq.w	80107e4 <ProcessMacCommands+0x98c>
 8010646:	4b6f      	ldr	r3, [pc, #444]	; (8010804 <ProcessMacCommands+0x9ac>)
 8010648:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801064c:	2b05      	cmp	r3, #5
 801064e:	f000 80c9 	beq.w	80107e4 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010652:	f002 ff8e 	bl	8013572 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010656:	e0c5      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010658:	2303      	movs	r3, #3
 801065a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010662:	78fb      	ldrb	r3, [r7, #3]
 8010664:	1c5a      	adds	r2, r3, #1
 8010666:	70fa      	strb	r2, [r7, #3]
 8010668:	461a      	mov	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4413      	add	r3, r2
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010672:	78fb      	ldrb	r3, [r7, #3]
 8010674:	1c5a      	adds	r2, r3, #1
 8010676:	70fa      	strb	r2, [r7, #3]
 8010678:	461a      	mov	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4413      	add	r3, r2
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	021b      	lsls	r3, r3, #8
 8010682:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010684:	4313      	orrs	r3, r2
 8010686:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010688:	78fb      	ldrb	r3, [r7, #3]
 801068a:	1c5a      	adds	r2, r3, #1
 801068c:	70fa      	strb	r2, [r7, #3]
 801068e:	461a      	mov	r2, r3
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	4413      	add	r3, r2
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	041b      	lsls	r3, r3, #16
 8010698:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801069a:	4313      	orrs	r3, r2
 801069c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801069e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106a0:	2264      	movs	r2, #100	; 0x64
 80106a2:	fb02 f303 	mul.w	r3, r2, r3
 80106a6:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80106a8:	78fb      	ldrb	r3, [r7, #3]
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	70fa      	strb	r2, [r7, #3]
 80106ae:	461a      	mov	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4413      	add	r3, r2
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	f003 030f 	and.w	r3, r3, #15
 80106ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80106be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80106c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80106c4:	4618      	mov	r0, r3
 80106c6:	f002 ff5a 	bl	801357e <LoRaMacClassBPingSlotChannelReq>
 80106ca:	4603      	mov	r3, r0
 80106cc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80106d0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80106d4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80106d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80106dc:	2201      	movs	r2, #1
 80106de:	4619      	mov	r1, r3
 80106e0:	2011      	movs	r0, #17
 80106e2:	f003 f8c7 	bl	8013874 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80106e6:	e07d      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80106e8:	200d      	movs	r0, #13
 80106ea:	f003 fbfb 	bl	8013ee4 <LoRaMacConfirmQueueIsCmdActive>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d077      	beq.n	80107e4 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80106f4:	210d      	movs	r1, #13
 80106f6:	2000      	movs	r0, #0
 80106f8:	f003 fb68 	bl	8013dcc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80106fc:	2300      	movs	r3, #0
 80106fe:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010702:	2300      	movs	r3, #0
 8010704:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010708:	78fb      	ldrb	r3, [r7, #3]
 801070a:	1c5a      	adds	r2, r3, #1
 801070c:	70fa      	strb	r2, [r7, #3]
 801070e:	461a      	mov	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	4413      	add	r3, r2
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801071a:	78fb      	ldrb	r3, [r7, #3]
 801071c:	1c5a      	adds	r2, r3, #1
 801071e:	70fa      	strb	r2, [r7, #3]
 8010720:	461a      	mov	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	4413      	add	r3, r2
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	021b      	lsls	r3, r3, #8
 801072a:	b21a      	sxth	r2, r3
 801072c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8010730:	4313      	orrs	r3, r2
 8010732:	b21b      	sxth	r3, r3
 8010734:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010738:	78fb      	ldrb	r3, [r7, #3]
 801073a:	1c5a      	adds	r2, r3, #1
 801073c:	70fa      	strb	r2, [r7, #3]
 801073e:	461a      	mov	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	4413      	add	r3, r2
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801074a:	4b2f      	ldr	r3, [pc, #188]	; (8010808 <ProcessMacCommands+0x9b0>)
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8010752:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8010756:	4618      	mov	r0, r3
 8010758:	f002 ff1d 	bl	8013596 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801075c:	e042      	b.n	80107e4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010764:	78fb      	ldrb	r3, [r7, #3]
 8010766:	1c5a      	adds	r2, r3, #1
 8010768:	70fa      	strb	r2, [r7, #3]
 801076a:	461a      	mov	r2, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4413      	add	r3, r2
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010776:	78fb      	ldrb	r3, [r7, #3]
 8010778:	1c5a      	adds	r2, r3, #1
 801077a:	70fa      	strb	r2, [r7, #3]
 801077c:	461a      	mov	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4413      	add	r3, r2
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	021b      	lsls	r3, r3, #8
 8010786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801078a:	4313      	orrs	r3, r2
 801078c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010790:	78fb      	ldrb	r3, [r7, #3]
 8010792:	1c5a      	adds	r2, r3, #1
 8010794:	70fa      	strb	r2, [r7, #3]
 8010796:	461a      	mov	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4413      	add	r3, r2
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	041b      	lsls	r3, r3, #16
 80107a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80107a4:	4313      	orrs	r3, r2
 80107a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80107aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107ae:	2264      	movs	r2, #100	; 0x64
 80107b0:	fb02 f303 	mul.w	r3, r2, r3
 80107b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80107b8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80107bc:	f002 fefe 	bl	80135bc <LoRaMacClassBBeaconFreqReq>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d003      	beq.n	80107ce <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 80107c6:	2301      	movs	r3, #1
 80107c8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80107cc:	e002      	b.n	80107d4 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80107ce:	2300      	movs	r3, #0
 80107d0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80107d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80107d8:	2201      	movs	r2, #1
 80107da:	4619      	mov	r1, r3
 80107dc:	2013      	movs	r0, #19
 80107de:	f003 f849 	bl	8013874 <LoRaMacCommandsAddCmd>
                }
                break;
 80107e2:	bf00      	nop
    while( macIndex < commandsSize )
 80107e4:	78fa      	ldrb	r2, [r7, #3]
 80107e6:	78bb      	ldrb	r3, [r7, #2]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	f4ff ab57 	bcc.w	800fe9c <ProcessMacCommands+0x44>
 80107ee:	e004      	b.n	80107fa <ProcessMacCommands+0x9a2>
        return;
 80107f0:	bf00      	nop
 80107f2:	e002      	b.n	80107fa <ProcessMacCommands+0x9a2>
            return;
 80107f4:	bf00      	nop
 80107f6:	e000      	b.n	80107fa <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80107f8:	bf00      	nop
        }
    }
}
 80107fa:	378c      	adds	r7, #140	; 0x8c
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd90      	pop	{r4, r7, pc}
 8010800:	12d53d80 	.word	0x12d53d80
 8010804:	20000740 	.word	0x20000740
 8010808:	2000188c 	.word	0x2000188c

0801080c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b08e      	sub	sp, #56	; 0x38
 8010810:	af02      	add	r7, sp, #8
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	607a      	str	r2, [r7, #4]
 8010816:	461a      	mov	r2, r3
 8010818:	460b      	mov	r3, r1
 801081a:	72fb      	strb	r3, [r7, #11]
 801081c:	4613      	mov	r3, r2
 801081e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010820:	2303      	movs	r3, #3
 8010822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010826:	4b66      	ldr	r3, [pc, #408]	; (80109c0 <Send+0x1b4>)
 8010828:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801082c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010830:	4b63      	ldr	r3, [pc, #396]	; (80109c0 <Send+0x1b4>)
 8010832:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010836:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801083a:	4b61      	ldr	r3, [pc, #388]	; (80109c0 <Send+0x1b4>)
 801083c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801083e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010840:	4b5f      	ldr	r3, [pc, #380]	; (80109c0 <Send+0x1b4>)
 8010842:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801084a:	2307      	movs	r3, #7
 801084c:	e0b4      	b.n	80109b8 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801084e:	4b5c      	ldr	r3, [pc, #368]	; (80109c0 <Send+0x1b4>)
 8010850:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8010854:	2b00      	cmp	r3, #0
 8010856:	d102      	bne.n	801085e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010858:	4b59      	ldr	r3, [pc, #356]	; (80109c0 <Send+0x1b4>)
 801085a:	2200      	movs	r2, #0
 801085c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010864:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010868:	f36f 0303 	bfc	r3, #0, #4
 801086c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010870:	4b53      	ldr	r3, [pc, #332]	; (80109c0 <Send+0x1b4>)
 8010872:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8010876:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801087a:	f362 13c7 	bfi	r3, r2, #7, #1
 801087e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010882:	4b4f      	ldr	r3, [pc, #316]	; (80109c0 <Send+0x1b4>)
 8010884:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010888:	2b01      	cmp	r3, #1
 801088a:	d106      	bne.n	801089a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801088c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010890:	f043 0310 	orr.w	r3, r3, #16
 8010894:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010898:	e005      	b.n	80108a6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801089a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801089e:	f36f 1304 	bfc	r3, #4, #1
 80108a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80108a6:	4b46      	ldr	r3, [pc, #280]	; (80109c0 <Send+0x1b4>)
 80108a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d005      	beq.n	80108bc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80108b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80108b4:	f043 0320 	orr.w	r3, r3, #32
 80108b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80108bc:	2301      	movs	r3, #1
 80108be:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80108c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80108c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	bf14      	ite	ne
 80108ce:	2301      	movne	r3, #1
 80108d0:	2300      	moveq	r3, #0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80108d6:	4b3a      	ldr	r3, [pc, #232]	; (80109c0 <Send+0x1b4>)
 80108d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108da:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80108dc:	4b38      	ldr	r3, [pc, #224]	; (80109c0 <Send+0x1b4>)
 80108de:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80108e2:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80108e4:	4b36      	ldr	r3, [pc, #216]	; (80109c0 <Send+0x1b4>)
 80108e6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80108ea:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80108ec:	4b34      	ldr	r3, [pc, #208]	; (80109c0 <Send+0x1b4>)
 80108ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80108f2:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80108f6:	4b32      	ldr	r3, [pc, #200]	; (80109c0 <Send+0x1b4>)
 80108f8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80108fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010900:	4b2f      	ldr	r3, [pc, #188]	; (80109c0 <Send+0x1b4>)
 8010902:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801090a:	4b2d      	ldr	r3, [pc, #180]	; (80109c0 <Send+0x1b4>)
 801090c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010910:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010914:	4b2a      	ldr	r3, [pc, #168]	; (80109c0 <Send+0x1b4>)
 8010916:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801091a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801091e:	f107 0014 	add.w	r0, r7, #20
 8010922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	4b26      	ldr	r3, [pc, #152]	; (80109c4 <Send+0x1b8>)
 801092a:	4a27      	ldr	r2, [pc, #156]	; (80109c8 <Send+0x1bc>)
 801092c:	4927      	ldr	r1, [pc, #156]	; (80109cc <Send+0x1c0>)
 801092e:	f002 fcbf 	bl	80132b0 <LoRaMacAdrCalcNext>
 8010932:	4603      	mov	r3, r0
 8010934:	461a      	mov	r2, r3
 8010936:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801093a:	f362 1386 	bfi	r3, r2, #6, #1
 801093e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010942:	7afa      	ldrb	r2, [r7, #11]
 8010944:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010948:	893b      	ldrh	r3, [r7, #8]
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f000 fc72 	bl	8011238 <PrepareFrame>
 8010954:	4603      	mov	r3, r0
 8010956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801095a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801095e:	2b00      	cmp	r3, #0
 8010960:	d003      	beq.n	801096a <Send+0x15e>
 8010962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010966:	2b0a      	cmp	r3, #10
 8010968:	d107      	bne.n	801097a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801096a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801096e:	4618      	mov	r0, r3
 8010970:	f000 f962 	bl	8010c38 <ScheduleTx>
 8010974:	4603      	mov	r3, r0
 8010976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801097a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00a      	beq.n	8010998 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010982:	4a0f      	ldr	r2, [pc, #60]	; (80109c0 <Send+0x1b4>)
 8010984:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010988:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801098c:	4a0c      	ldr	r2, [pc, #48]	; (80109c0 <Send+0x1b4>)
 801098e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010992:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010996:	e00d      	b.n	80109b4 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010998:	4b09      	ldr	r3, [pc, #36]	; (80109c0 <Send+0x1b4>)
 801099a:	2200      	movs	r2, #0
 801099c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	4a07      	ldr	r2, [pc, #28]	; (80109c0 <Send+0x1b4>)
 80109a4:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80109a6:	f003 f80b 	bl	80139c0 <LoRaMacCommandsRemoveNoneStickyCmds>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d001      	beq.n	80109b4 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80109b0:	2313      	movs	r3, #19
 80109b2:	e001      	b.n	80109b8 <Send+0x1ac>
        }
    }
    return status;
 80109b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3730      	adds	r7, #48	; 0x30
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	20000c5c 	.word	0x20000c5c
 80109c4:	20000cc4 	.word	0x20000cc4
 80109c8:	20000c94 	.word	0x20000c94
 80109cc:	20000c95 	.word	0x20000c95

080109d0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	4603      	mov	r3, r0
 80109d8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80109de:	2300      	movs	r3, #0
 80109e0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80109e2:	2301      	movs	r3, #1
 80109e4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80109e6:	79fb      	ldrb	r3, [r7, #7]
 80109e8:	2bff      	cmp	r3, #255	; 0xff
 80109ea:	d11f      	bne.n	8010a2c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80109ec:	2000      	movs	r0, #0
 80109ee:	f7ff f8f9 	bl	800fbe4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80109f2:	4b15      	ldr	r3, [pc, #84]	; (8010a48 <SendReJoinReq+0x78>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80109fa:	4b13      	ldr	r3, [pc, #76]	; (8010a48 <SendReJoinReq+0x78>)
 80109fc:	4a13      	ldr	r2, [pc, #76]	; (8010a4c <SendReJoinReq+0x7c>)
 80109fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010a02:	4b11      	ldr	r3, [pc, #68]	; (8010a48 <SendReJoinReq+0x78>)
 8010a04:	22ff      	movs	r2, #255	; 0xff
 8010a06:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010a0a:	7b3b      	ldrb	r3, [r7, #12]
 8010a0c:	f36f 1347 	bfc	r3, #5, #3
 8010a10:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010a12:	7b3a      	ldrb	r2, [r7, #12]
 8010a14:	4b0c      	ldr	r3, [pc, #48]	; (8010a48 <SendReJoinReq+0x78>)
 8010a16:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8010a1a:	480d      	ldr	r0, [pc, #52]	; (8010a50 <SendReJoinReq+0x80>)
 8010a1c:	f7fb ff38 	bl	800c890 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8010a20:	480c      	ldr	r0, [pc, #48]	; (8010a54 <SendReJoinReq+0x84>)
 8010a22:	f7fb ff05 	bl	800c830 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8010a26:	2300      	movs	r3, #0
 8010a28:	73fb      	strb	r3, [r7, #15]

            break;
 8010a2a:	e002      	b.n	8010a32 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	73bb      	strb	r3, [r7, #14]
            break;
 8010a30:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
 8010a34:	4618      	mov	r0, r3
 8010a36:	f000 f8ff 	bl	8010c38 <ScheduleTx>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	73bb      	strb	r3, [r7, #14]
    return status;
 8010a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	20000740 	.word	0x20000740
 8010a4c:	20000742 	.word	0x20000742
 8010a50:	2000084e 	.word	0x2000084e
 8010a54:	20000856 	.word	0x20000856

08010a58 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010a5c:	f002 fd38 	bl	80134d0 <LoRaMacClassBIsBeaconExpected>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d001      	beq.n	8010a6a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010a66:	230e      	movs	r3, #14
 8010a68:	e013      	b.n	8010a92 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010a6a:	4b0b      	ldr	r3, [pc, #44]	; (8010a98 <CheckForClassBCollision+0x40>)
 8010a6c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d10d      	bne.n	8010a90 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010a74:	f002 fd33 	bl	80134de <LoRaMacClassBIsPingExpected>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d001      	beq.n	8010a82 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010a7e:	230f      	movs	r3, #15
 8010a80:	e007      	b.n	8010a92 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010a82:	f002 fd33 	bl	80134ec <LoRaMacClassBIsMulticastExpected>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d001      	beq.n	8010a90 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010a8c:	230f      	movs	r3, #15
 8010a8e:	e000      	b.n	8010a92 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010a90:	2300      	movs	r3, #0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	20000c5c 	.word	0x20000c5c

08010a9c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010a9c:	b590      	push	{r4, r7, lr}
 8010a9e:	b083      	sub	sp, #12
 8010aa0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010aa2:	4b2d      	ldr	r3, [pc, #180]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010aa4:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010aa8:	4b2b      	ldr	r3, [pc, #172]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010aaa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010aae:	4b2a      	ldr	r3, [pc, #168]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010ab0:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8010ab4:	4b28      	ldr	r3, [pc, #160]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010ab6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010aba:	4b27      	ldr	r3, [pc, #156]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010abc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010ac0:	b25b      	sxtb	r3, r3
 8010ac2:	f004 fe68 	bl	8015796 <RegionApplyDrOffset>
 8010ac6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010ac8:	b259      	sxtb	r1, r3
 8010aca:	4b23      	ldr	r3, [pc, #140]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010acc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010ad0:	4b21      	ldr	r3, [pc, #132]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ad4:	4821      	ldr	r0, [pc, #132]	; (8010b5c <ComputeRxWindowParameters+0xc0>)
 8010ad6:	9000      	str	r0, [sp, #0]
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f004 fd1e 	bl	801551a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010ade:	4b1e      	ldr	r3, [pc, #120]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010ae0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010ae4:	4b1c      	ldr	r3, [pc, #112]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010ae6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010aea:	b259      	sxtb	r1, r3
 8010aec:	4b1a      	ldr	r3, [pc, #104]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010aee:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010af2:	4b19      	ldr	r3, [pc, #100]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010af6:	4c1a      	ldr	r4, [pc, #104]	; (8010b60 <ComputeRxWindowParameters+0xc4>)
 8010af8:	9400      	str	r4, [sp, #0]
 8010afa:	f004 fd0e 	bl	801551a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010afe:	4b16      	ldr	r3, [pc, #88]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b02:	4a18      	ldr	r2, [pc, #96]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b04:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010b08:	4413      	add	r3, r2
 8010b0a:	4a16      	ldr	r2, [pc, #88]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b0c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010b10:	4b11      	ldr	r3, [pc, #68]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b14:	4a13      	ldr	r2, [pc, #76]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b16:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010b1a:	4413      	add	r3, r2
 8010b1c:	4a11      	ldr	r2, [pc, #68]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b1e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8010b22:	4b10      	ldr	r3, [pc, #64]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b24:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010b28:	2b04      	cmp	r3, #4
 8010b2a:	d011      	beq.n	8010b50 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010b2c:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b30:	4a0c      	ldr	r2, [pc, #48]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b32:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010b36:	4413      	add	r3, r2
 8010b38:	4a0a      	ldr	r2, [pc, #40]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b3a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010b3e:	4b06      	ldr	r3, [pc, #24]	; (8010b58 <ComputeRxWindowParameters+0xbc>)
 8010b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b42:	4a08      	ldr	r2, [pc, #32]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b44:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010b48:	4413      	add	r3, r2
 8010b4a:	4a06      	ldr	r2, [pc, #24]	; (8010b64 <ComputeRxWindowParameters+0xc8>)
 8010b4c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010b50:	bf00      	nop
 8010b52:	3704      	adds	r7, #4
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd90      	pop	{r4, r7, pc}
 8010b58:	20000c5c 	.word	0x20000c5c
 8010b5c:	20000af8 	.word	0x20000af8
 8010b60:	20000b10 	.word	0x20000b10
 8010b64:	20000740 	.word	0x20000740

08010b68 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010b72:	4b13      	ldr	r3, [pc, #76]	; (8010bc0 <VerifyTxFrame+0x58>)
 8010b74:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d01b      	beq.n	8010bb4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010b7c:	1d3b      	adds	r3, r7, #4
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f002 ff6e 	bl	8013a60 <LoRaMacCommandsGetSizeSerializedCmds>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d001      	beq.n	8010b8e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b8a:	2313      	movs	r3, #19
 8010b8c:	e013      	b.n	8010bb6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010b8e:	4b0d      	ldr	r3, [pc, #52]	; (8010bc4 <VerifyTxFrame+0x5c>)
 8010b90:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010b94:	4a0a      	ldr	r2, [pc, #40]	; (8010bc0 <VerifyTxFrame+0x58>)
 8010b96:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	b2d2      	uxtb	r2, r2
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7ff f932 	bl	800fe08 <ValidatePayloadLength>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	f083 0301 	eor.w	r3, r3, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d001      	beq.n	8010bb4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010bb0:	2308      	movs	r3, #8
 8010bb2:	e000      	b.n	8010bb6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	20000c5c 	.word	0x20000c5c
 8010bc4:	20000740 	.word	0x20000740

08010bc8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010bce:	4b18      	ldr	r3, [pc, #96]	; (8010c30 <SerializeTxFrame+0x68>)
 8010bd0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <SerializeTxFrame+0x16>
 8010bd8:	2b04      	cmp	r3, #4
 8010bda:	d011      	beq.n	8010c00 <SerializeTxFrame+0x38>
 8010bdc:	e021      	b.n	8010c22 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010bde:	4815      	ldr	r0, [pc, #84]	; (8010c34 <SerializeTxFrame+0x6c>)
 8010be0:	f004 fa6c 	bl	80150bc <LoRaMacSerializerJoinRequest>
 8010be4:	4603      	mov	r3, r0
 8010be6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010be8:	79fb      	ldrb	r3, [r7, #7]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d001      	beq.n	8010bf2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010bee:	2311      	movs	r3, #17
 8010bf0:	e01a      	b.n	8010c28 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010bf2:	4b0f      	ldr	r3, [pc, #60]	; (8010c30 <SerializeTxFrame+0x68>)
 8010bf4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	4b0d      	ldr	r3, [pc, #52]	; (8010c30 <SerializeTxFrame+0x68>)
 8010bfc:	801a      	strh	r2, [r3, #0]
            break;
 8010bfe:	e012      	b.n	8010c26 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010c00:	480c      	ldr	r0, [pc, #48]	; (8010c34 <SerializeTxFrame+0x6c>)
 8010c02:	f004 fadd 	bl	80151c0 <LoRaMacSerializerData>
 8010c06:	4603      	mov	r3, r0
 8010c08:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010c0a:	79fb      	ldrb	r3, [r7, #7]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d001      	beq.n	8010c14 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c10:	2311      	movs	r3, #17
 8010c12:	e009      	b.n	8010c28 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010c14:	4b06      	ldr	r3, [pc, #24]	; (8010c30 <SerializeTxFrame+0x68>)
 8010c16:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	4b04      	ldr	r3, [pc, #16]	; (8010c30 <SerializeTxFrame+0x68>)
 8010c1e:	801a      	strh	r2, [r3, #0]
            break;
 8010c20:	e001      	b.n	8010c26 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010c22:	2303      	movs	r3, #3
 8010c24:	e000      	b.n	8010c28 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	20000740 	.word	0x20000740
 8010c34:	20000848 	.word	0x20000848

08010c38 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b090      	sub	sp, #64	; 0x40
 8010c3c:	af02      	add	r7, sp, #8
 8010c3e:	4603      	mov	r3, r0
 8010c40:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c42:	2303      	movs	r3, #3
 8010c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010c48:	f7ff ff06 	bl	8010a58 <CheckForClassBCollision>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010c52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d002      	beq.n	8010c60 <ScheduleTx+0x28>
    {
        return status;
 8010c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c5e:	e092      	b.n	8010d86 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8010c60:	f000 f8f8 	bl	8010e54 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010c64:	f7ff ffb0 	bl	8010bc8 <SerializeTxFrame>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d002      	beq.n	8010c7c <ScheduleTx+0x44>
    {
        return status;
 8010c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c7a:	e084      	b.n	8010d86 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010c7c:	4b44      	ldr	r3, [pc, #272]	; (8010d90 <ScheduleTx+0x158>)
 8010c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c80:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010c82:	4b43      	ldr	r3, [pc, #268]	; (8010d90 <ScheduleTx+0x158>)
 8010c84:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010c88:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010c8a:	4b41      	ldr	r3, [pc, #260]	; (8010d90 <ScheduleTx+0x158>)
 8010c8c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010c90:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c96:	4618      	mov	r0, r3
 8010c98:	f00b fe0a 	bl	801c8b0 <SysTimeGetMcuTime>
 8010c9c:	4638      	mov	r0, r7
 8010c9e:	4b3c      	ldr	r3, [pc, #240]	; (8010d90 <ScheduleTx+0x158>)
 8010ca0:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010ca4:	9200      	str	r2, [sp, #0]
 8010ca6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010caa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010cae:	ca06      	ldmia	r2, {r1, r2}
 8010cb0:	f00b fd5f 	bl	801c772 <SysTimeSub>
 8010cb4:	f107 0320 	add.w	r3, r7, #32
 8010cb8:	463a      	mov	r2, r7
 8010cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cbe:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010cc2:	4b33      	ldr	r3, [pc, #204]	; (8010d90 <ScheduleTx+0x158>)
 8010cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010cd2:	4b30      	ldr	r3, [pc, #192]	; (8010d94 <ScheduleTx+0x15c>)
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010cd8:	4b2d      	ldr	r3, [pc, #180]	; (8010d90 <ScheduleTx+0x158>)
 8010cda:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d104      	bne.n	8010cec <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010cec:	4b28      	ldr	r3, [pc, #160]	; (8010d90 <ScheduleTx+0x158>)
 8010cee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010cf2:	f107 0114 	add.w	r1, r7, #20
 8010cf6:	4b28      	ldr	r3, [pc, #160]	; (8010d98 <ScheduleTx+0x160>)
 8010cf8:	9300      	str	r3, [sp, #0]
 8010cfa:	4b28      	ldr	r3, [pc, #160]	; (8010d9c <ScheduleTx+0x164>)
 8010cfc:	4a28      	ldr	r2, [pc, #160]	; (8010da0 <ScheduleTx+0x168>)
 8010cfe:	f004 fd27 	bl	8015750 <RegionNextChannel>
 8010d02:	4603      	mov	r3, r0
 8010d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d025      	beq.n	8010d5c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8010d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d14:	2b0b      	cmp	r3, #11
 8010d16:	d11e      	bne.n	8010d56 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010d18:	4b1e      	ldr	r3, [pc, #120]	; (8010d94 <ScheduleTx+0x15c>)
 8010d1a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d01c      	beq.n	8010d5c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8010d22:	7bfb      	ldrb	r3, [r7, #15]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d013      	beq.n	8010d50 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010d28:	4b1a      	ldr	r3, [pc, #104]	; (8010d94 <ScheduleTx+0x15c>)
 8010d2a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d2e:	f043 0320 	orr.w	r3, r3, #32
 8010d32:	4a18      	ldr	r2, [pc, #96]	; (8010d94 <ScheduleTx+0x15c>)
 8010d34:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010d38:	4b16      	ldr	r3, [pc, #88]	; (8010d94 <ScheduleTx+0x15c>)
 8010d3a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010d3e:	4619      	mov	r1, r3
 8010d40:	4818      	ldr	r0, [pc, #96]	; (8010da4 <ScheduleTx+0x16c>)
 8010d42:	f00c fb55 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8010d46:	4817      	ldr	r0, [pc, #92]	; (8010da4 <ScheduleTx+0x16c>)
 8010d48:	f00c fa74 	bl	801d234 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	e01a      	b.n	8010d86 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d54:	e017      	b.n	8010d86 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010d56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d5a:	e014      	b.n	8010d86 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010d5c:	f7ff fe9e 	bl	8010a9c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010d60:	f7ff ff02 	bl	8010b68 <VerifyTxFrame>
 8010d64:	4603      	mov	r3, r0
 8010d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010d6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d002      	beq.n	8010d78 <ScheduleTx+0x140>
    {
        return status;
 8010d72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d76:	e006      	b.n	8010d86 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010d78:	4b06      	ldr	r3, [pc, #24]	; (8010d94 <ScheduleTx+0x15c>)
 8010d7a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f000 fb76 	bl	8011470 <SendFrameOnChannel>
 8010d84:	4603      	mov	r3, r0
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3738      	adds	r7, #56	; 0x38
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	20000c5c 	.word	0x20000c5c
 8010d94:	20000740 	.word	0x20000740
 8010d98:	20000c8c 	.word	0x20000c8c
 8010d9c:	20000bd4 	.word	0x20000bd4
 8010da0:	20000b5b 	.word	0x20000b5b
 8010da4:	20000aa8 	.word	0x20000aa8

08010da8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	4603      	mov	r3, r0
 8010db0:	460a      	mov	r2, r1
 8010db2:	71fb      	strb	r3, [r7, #7]
 8010db4:	4613      	mov	r3, r2
 8010db6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010db8:	2312      	movs	r3, #18
 8010dba:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010dc0:	4b22      	ldr	r3, [pc, #136]	; (8010e4c <SecureFrame+0xa4>)
 8010dc2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d002      	beq.n	8010dd0 <SecureFrame+0x28>
 8010dca:	2b04      	cmp	r3, #4
 8010dcc:	d011      	beq.n	8010df2 <SecureFrame+0x4a>
 8010dce:	e036      	b.n	8010e3e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010dd0:	481f      	ldr	r0, [pc, #124]	; (8010e50 <SecureFrame+0xa8>)
 8010dd2:	f003 fd3f 	bl	8014854 <LoRaMacCryptoPrepareJoinRequest>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010dda:	7bfb      	ldrb	r3, [r7, #15]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d001      	beq.n	8010de4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010de0:	2311      	movs	r3, #17
 8010de2:	e02f      	b.n	8010e44 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010de4:	4b19      	ldr	r3, [pc, #100]	; (8010e4c <SecureFrame+0xa4>)
 8010de6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	4b17      	ldr	r3, [pc, #92]	; (8010e4c <SecureFrame+0xa4>)
 8010dee:	801a      	strh	r2, [r3, #0]
            break;
 8010df0:	e027      	b.n	8010e42 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010df2:	f107 0308 	add.w	r3, r7, #8
 8010df6:	4618      	mov	r0, r3
 8010df8:	f003 fc66 	bl	80146c8 <LoRaMacCryptoGetFCntUp>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d001      	beq.n	8010e06 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010e02:	2312      	movs	r3, #18
 8010e04:	e01e      	b.n	8010e44 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010e06:	4b11      	ldr	r3, [pc, #68]	; (8010e4c <SecureFrame+0xa4>)
 8010e08:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	3b01      	subs	r3, #1
 8010e14:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010e16:	68b8      	ldr	r0, [r7, #8]
 8010e18:	79ba      	ldrb	r2, [r7, #6]
 8010e1a:	79f9      	ldrb	r1, [r7, #7]
 8010e1c:	4b0c      	ldr	r3, [pc, #48]	; (8010e50 <SecureFrame+0xa8>)
 8010e1e:	f003 fe41 	bl	8014aa4 <LoRaMacCryptoSecureMessage>
 8010e22:	4603      	mov	r3, r0
 8010e24:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d001      	beq.n	8010e30 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e2c:	2311      	movs	r3, #17
 8010e2e:	e009      	b.n	8010e44 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010e30:	4b06      	ldr	r3, [pc, #24]	; (8010e4c <SecureFrame+0xa4>)
 8010e32:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	4b04      	ldr	r3, [pc, #16]	; (8010e4c <SecureFrame+0xa4>)
 8010e3a:	801a      	strh	r2, [r3, #0]
            break;
 8010e3c:	e001      	b.n	8010e42 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e3e:	2303      	movs	r3, #3
 8010e40:	e000      	b.n	8010e44 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010e42:	2300      	movs	r3, #0
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	20000740 	.word	0x20000740
 8010e50:	20000848 	.word	0x20000848

08010e54 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010e54:	b480      	push	{r7}
 8010e56:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010e58:	4b09      	ldr	r3, [pc, #36]	; (8010e80 <CalculateBackOff+0x2c>)
 8010e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d10a      	bne.n	8010e76 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010e60:	4b07      	ldr	r3, [pc, #28]	; (8010e80 <CalculateBackOff+0x2c>)
 8010e62:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8010e66:	3b01      	subs	r3, #1
 8010e68:	4a06      	ldr	r2, [pc, #24]	; (8010e84 <CalculateBackOff+0x30>)
 8010e6a:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8010e6e:	fb02 f303 	mul.w	r3, r2, r3
 8010e72:	4a03      	ldr	r2, [pc, #12]	; (8010e80 <CalculateBackOff+0x2c>)
 8010e74:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010e76:	bf00      	nop
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bc80      	pop	{r7}
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	20000c5c 	.word	0x20000c5c
 8010e84:	20000740 	.word	0x20000740

08010e88 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	4603      	mov	r3, r0
 8010e90:	7139      	strb	r1, [r7, #4]
 8010e92:	71fb      	strb	r3, [r7, #7]
 8010e94:	4613      	mov	r3, r2
 8010e96:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010e98:	79fb      	ldrb	r3, [r7, #7]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d002      	beq.n	8010ea4 <RemoveMacCommands+0x1c>
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d10d      	bne.n	8010ec0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010ea4:	79bb      	ldrb	r3, [r7, #6]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d108      	bne.n	8010ebc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010eaa:	793b      	ldrb	r3, [r7, #4]
 8010eac:	f003 0320 	and.w	r3, r3, #32
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d004      	beq.n	8010ec0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010eb6:	f002 fda7 	bl	8013a08 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010eba:	e001      	b.n	8010ec0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010ebc:	f002 fda4 	bl	8013a08 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010ec0:	bf00      	nop
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010ec8:	b5b0      	push	{r4, r5, r7, lr}
 8010eca:	b092      	sub	sp, #72	; 0x48
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	4603      	mov	r3, r0
 8010ed0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8010ed2:	79fb      	ldrb	r3, [r7, #7]
 8010ed4:	f083 0301 	eor.w	r3, r3, #1
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d003      	beq.n	8010ee6 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010ede:	4b88      	ldr	r3, [pc, #544]	; (8011100 <ResetMacParameters+0x238>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010ee6:	4b86      	ldr	r3, [pc, #536]	; (8011100 <ResetMacParameters+0x238>)
 8010ee8:	2200      	movs	r2, #0
 8010eea:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010eec:	4b85      	ldr	r3, [pc, #532]	; (8011104 <ResetMacParameters+0x23c>)
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010ef4:	4b83      	ldr	r3, [pc, #524]	; (8011104 <ResetMacParameters+0x23c>)
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8010efc:	4b81      	ldr	r3, [pc, #516]	; (8011104 <ResetMacParameters+0x23c>)
 8010efe:	2200      	movs	r2, #0
 8010f00:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010f04:	4b7e      	ldr	r3, [pc, #504]	; (8011100 <ResetMacParameters+0x238>)
 8010f06:	2200      	movs	r2, #0
 8010f08:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010f0c:	4b7c      	ldr	r3, [pc, #496]	; (8011100 <ResetMacParameters+0x238>)
 8010f0e:	2201      	movs	r2, #1
 8010f10:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010f14:	4b7a      	ldr	r3, [pc, #488]	; (8011100 <ResetMacParameters+0x238>)
 8010f16:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8010f1a:	4b79      	ldr	r3, [pc, #484]	; (8011100 <ResetMacParameters+0x238>)
 8010f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010f20:	4b77      	ldr	r3, [pc, #476]	; (8011100 <ResetMacParameters+0x238>)
 8010f22:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8010f26:	4b76      	ldr	r3, [pc, #472]	; (8011100 <ResetMacParameters+0x238>)
 8010f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010f2c:	4b74      	ldr	r3, [pc, #464]	; (8011100 <ResetMacParameters+0x238>)
 8010f2e:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8010f32:	4b73      	ldr	r3, [pc, #460]	; (8011100 <ResetMacParameters+0x238>)
 8010f34:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010f38:	4b71      	ldr	r3, [pc, #452]	; (8011100 <ResetMacParameters+0x238>)
 8010f3a:	4a71      	ldr	r2, [pc, #452]	; (8011100 <ResetMacParameters+0x238>)
 8010f3c:	336c      	adds	r3, #108	; 0x6c
 8010f3e:	32b4      	adds	r2, #180	; 0xb4
 8010f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f44:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010f48:	4b6d      	ldr	r3, [pc, #436]	; (8011100 <ResetMacParameters+0x238>)
 8010f4a:	4a6d      	ldr	r2, [pc, #436]	; (8011100 <ResetMacParameters+0x238>)
 8010f4c:	3374      	adds	r3, #116	; 0x74
 8010f4e:	32bc      	adds	r2, #188	; 0xbc
 8010f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f54:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010f58:	4b69      	ldr	r3, [pc, #420]	; (8011100 <ResetMacParameters+0x238>)
 8010f5a:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8010f5e:	4b68      	ldr	r3, [pc, #416]	; (8011100 <ResetMacParameters+0x238>)
 8010f60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010f64:	4b66      	ldr	r3, [pc, #408]	; (8011100 <ResetMacParameters+0x238>)
 8010f66:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8010f6a:	4b65      	ldr	r3, [pc, #404]	; (8011100 <ResetMacParameters+0x238>)
 8010f6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010f70:	4b63      	ldr	r3, [pc, #396]	; (8011100 <ResetMacParameters+0x238>)
 8010f72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010f76:	4a62      	ldr	r2, [pc, #392]	; (8011100 <ResetMacParameters+0x238>)
 8010f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010f7c:	4b60      	ldr	r3, [pc, #384]	; (8011100 <ResetMacParameters+0x238>)
 8010f7e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010f82:	4a5f      	ldr	r2, [pc, #380]	; (8011100 <ResetMacParameters+0x238>)
 8010f84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010f88:	4b5d      	ldr	r3, [pc, #372]	; (8011100 <ResetMacParameters+0x238>)
 8010f8a:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8010f8e:	4b5c      	ldr	r3, [pc, #368]	; (8011100 <ResetMacParameters+0x238>)
 8010f90:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010f94:	4b5a      	ldr	r3, [pc, #360]	; (8011100 <ResetMacParameters+0x238>)
 8010f96:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8010f9a:	4b59      	ldr	r3, [pc, #356]	; (8011100 <ResetMacParameters+0x238>)
 8010f9c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8010fa0:	4b58      	ldr	r3, [pc, #352]	; (8011104 <ResetMacParameters+0x23c>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8010fa8:	4b55      	ldr	r3, [pc, #340]	; (8011100 <ResetMacParameters+0x238>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010fb0:	4b53      	ldr	r3, [pc, #332]	; (8011100 <ResetMacParameters+0x238>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8010fb8:	4b51      	ldr	r3, [pc, #324]	; (8011100 <ResetMacParameters+0x238>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8010fc0:	4b4f      	ldr	r3, [pc, #316]	; (8011100 <ResetMacParameters+0x238>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010fc8:	4b4d      	ldr	r3, [pc, #308]	; (8011100 <ResetMacParameters+0x238>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8010fd0:	4b4b      	ldr	r3, [pc, #300]	; (8011100 <ResetMacParameters+0x238>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010fd8:	4b49      	ldr	r3, [pc, #292]	; (8011100 <ResetMacParameters+0x238>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8010fe0:	4b47      	ldr	r3, [pc, #284]	; (8011100 <ResetMacParameters+0x238>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010fe8:	4b45      	ldr	r3, [pc, #276]	; (8011100 <ResetMacParameters+0x238>)
 8010fea:	2200      	movs	r2, #0
 8010fec:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8010ff0:	4b43      	ldr	r3, [pc, #268]	; (8011100 <ResetMacParameters+0x238>)
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010ff8:	4b41      	ldr	r3, [pc, #260]	; (8011100 <ResetMacParameters+0x238>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011000:	2301      	movs	r3, #1
 8011002:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011004:	4b40      	ldr	r3, [pc, #256]	; (8011108 <ResetMacParameters+0x240>)
 8011006:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011008:	4b40      	ldr	r3, [pc, #256]	; (801110c <ResetMacParameters+0x244>)
 801100a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 801100c:	4b40      	ldr	r3, [pc, #256]	; (8011110 <ResetMacParameters+0x248>)
 801100e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011010:	4b3b      	ldr	r3, [pc, #236]	; (8011100 <ResetMacParameters+0x238>)
 8011012:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011016:	f107 020c 	add.w	r2, r7, #12
 801101a:	4611      	mov	r1, r2
 801101c:	4618      	mov	r0, r3
 801101e:	f004 fa12 	bl	8015446 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011022:	4b38      	ldr	r3, [pc, #224]	; (8011104 <ResetMacParameters+0x23c>)
 8011024:	2200      	movs	r2, #0
 8011026:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801102a:	4b36      	ldr	r3, [pc, #216]	; (8011104 <ResetMacParameters+0x23c>)
 801102c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011030:	4b34      	ldr	r3, [pc, #208]	; (8011104 <ResetMacParameters+0x23c>)
 8011032:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011036:	4b32      	ldr	r3, [pc, #200]	; (8011100 <ResetMacParameters+0x238>)
 8011038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801103a:	4a32      	ldr	r2, [pc, #200]	; (8011104 <ResetMacParameters+0x23c>)
 801103c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011040:	4b2f      	ldr	r3, [pc, #188]	; (8011100 <ResetMacParameters+0x238>)
 8011042:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011046:	4b2f      	ldr	r3, [pc, #188]	; (8011104 <ResetMacParameters+0x23c>)
 8011048:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801104c:	4b2c      	ldr	r3, [pc, #176]	; (8011100 <ResetMacParameters+0x238>)
 801104e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011052:	4b2c      	ldr	r3, [pc, #176]	; (8011104 <ResetMacParameters+0x23c>)
 8011054:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011058:	4b2a      	ldr	r3, [pc, #168]	; (8011104 <ResetMacParameters+0x23c>)
 801105a:	2200      	movs	r2, #0
 801105c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011060:	4b28      	ldr	r3, [pc, #160]	; (8011104 <ResetMacParameters+0x23c>)
 8011062:	2201      	movs	r2, #1
 8011064:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011068:	4b25      	ldr	r3, [pc, #148]	; (8011100 <ResetMacParameters+0x238>)
 801106a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801106e:	4b25      	ldr	r3, [pc, #148]	; (8011104 <ResetMacParameters+0x23c>)
 8011070:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011074:	4a23      	ldr	r2, [pc, #140]	; (8011104 <ResetMacParameters+0x23c>)
 8011076:	4b23      	ldr	r3, [pc, #140]	; (8011104 <ResetMacParameters+0x23c>)
 8011078:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 801107c:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8011080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011084:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011088:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801108c:	4b1d      	ldr	r3, [pc, #116]	; (8011104 <ResetMacParameters+0x23c>)
 801108e:	2201      	movs	r2, #1
 8011090:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011094:	4b1b      	ldr	r3, [pc, #108]	; (8011104 <ResetMacParameters+0x23c>)
 8011096:	2202      	movs	r2, #2
 8011098:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801109c:	2300      	movs	r3, #0
 801109e:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 80110a0:	2300      	movs	r3, #0
 80110a2:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 80110a4:	4b17      	ldr	r3, [pc, #92]	; (8011104 <ResetMacParameters+0x23c>)
 80110a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d009      	beq.n	80110c2 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80110ae:	4b15      	ldr	r3, [pc, #84]	; (8011104 <ResetMacParameters+0x23c>)
 80110b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80110b8:	4b12      	ldr	r3, [pc, #72]	; (8011104 <ResetMacParameters+0x23c>)
 80110ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80110be:	695b      	ldr	r3, [r3, #20]
 80110c0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80110c2:	4b14      	ldr	r3, [pc, #80]	; (8011114 <ResetMacParameters+0x24c>)
 80110c4:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80110c6:	4b14      	ldr	r3, [pc, #80]	; (8011118 <ResetMacParameters+0x250>)
 80110c8:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80110ca:	4b14      	ldr	r3, [pc, #80]	; (801111c <ResetMacParameters+0x254>)
 80110cc:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80110ce:	4b14      	ldr	r3, [pc, #80]	; (8011120 <ResetMacParameters+0x258>)
 80110d0:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80110d2:	4b14      	ldr	r3, [pc, #80]	; (8011124 <ResetMacParameters+0x25c>)
 80110d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80110d6:	4b14      	ldr	r3, [pc, #80]	; (8011128 <ResetMacParameters+0x260>)
 80110d8:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80110da:	4b14      	ldr	r3, [pc, #80]	; (801112c <ResetMacParameters+0x264>)
 80110dc:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80110de:	4b14      	ldr	r3, [pc, #80]	; (8011130 <ResetMacParameters+0x268>)
 80110e0:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80110e2:	4b14      	ldr	r3, [pc, #80]	; (8011134 <ResetMacParameters+0x26c>)
 80110e4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80110e6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80110ea:	f107 031c 	add.w	r3, r7, #28
 80110ee:	4a12      	ldr	r2, [pc, #72]	; (8011138 <ResetMacParameters+0x270>)
 80110f0:	4618      	mov	r0, r3
 80110f2:	f002 f996 	bl	8013422 <LoRaMacClassBInit>
}
 80110f6:	bf00      	nop
 80110f8:	3748      	adds	r7, #72	; 0x48
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bdb0      	pop	{r4, r5, r7, pc}
 80110fe:	bf00      	nop
 8011100:	20000c5c 	.word	0x20000c5c
 8011104:	20000740 	.word	0x20000740
 8011108:	20000e80 	.word	0x20000e80
 801110c:	20000e94 	.word	0x20000e94
 8011110:	200017f4 	.word	0x200017f4
 8011114:	20000ba8 	.word	0x20000ba8
 8011118:	20000b60 	.word	0x20000b60
 801111c:	20000b94 	.word	0x20000b94
 8011120:	20000bd1 	.word	0x20000bd1
 8011124:	20000d40 	.word	0x20000d40
 8011128:	20000ca4 	.word	0x20000ca4
 801112c:	20000ca8 	.word	0x20000ca8
 8011130:	20000d44 	.word	0x20000d44
 8011134:	20000d8c 	.word	0x20000d8c
 8011138:	20001210 	.word	0x20001210

0801113c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f00c f8e2 	bl	801d310 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 801114c:	4b11      	ldr	r3, [pc, #68]	; (8011194 <RxWindowSetup+0x58>)
 801114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011150:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011152:	4b11      	ldr	r3, [pc, #68]	; (8011198 <RxWindowSetup+0x5c>)
 8011154:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011158:	4a10      	ldr	r2, [pc, #64]	; (801119c <RxWindowSetup+0x60>)
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	4618      	mov	r0, r3
 801115e:	f004 f9ff 	bl	8015560 <RegionRxConfig>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d010      	beq.n	801118a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011168:	4b0d      	ldr	r3, [pc, #52]	; (80111a0 <RxWindowSetup+0x64>)
 801116a:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 801116e:	4b0c      	ldr	r3, [pc, #48]	; (80111a0 <RxWindowSetup+0x64>)
 8011170:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011174:	4b07      	ldr	r3, [pc, #28]	; (8011194 <RxWindowSetup+0x58>)
 8011176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011178:	4a07      	ldr	r2, [pc, #28]	; (8011198 <RxWindowSetup+0x5c>)
 801117a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801117c:	4610      	mov	r0, r2
 801117e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	7cda      	ldrb	r2, [r3, #19]
 8011184:	4b06      	ldr	r3, [pc, #24]	; (80111a0 <RxWindowSetup+0x64>)
 8011186:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 801118a:	bf00      	nop
 801118c:	3708      	adds	r7, #8
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	0801ebac 	.word	0x0801ebac
 8011198:	20000c5c 	.word	0x20000c5c
 801119c:	20000b64 	.word	0x20000b64
 80111a0:	20000740 	.word	0x20000740

080111a4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80111a4:	b590      	push	{r4, r7, lr}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80111aa:	4b1e      	ldr	r3, [pc, #120]	; (8011224 <OpenContinuousRxCWindow+0x80>)
 80111ac:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80111b0:	4b1c      	ldr	r3, [pc, #112]	; (8011224 <OpenContinuousRxCWindow+0x80>)
 80111b2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80111b6:	b259      	sxtb	r1, r3
 80111b8:	4b1a      	ldr	r3, [pc, #104]	; (8011224 <OpenContinuousRxCWindow+0x80>)
 80111ba:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80111be:	4b19      	ldr	r3, [pc, #100]	; (8011224 <OpenContinuousRxCWindow+0x80>)
 80111c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111c2:	4c19      	ldr	r4, [pc, #100]	; (8011228 <OpenContinuousRxCWindow+0x84>)
 80111c4:	9400      	str	r4, [sp, #0]
 80111c6:	f004 f9a8 	bl	801551a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80111ca:	4b18      	ldr	r3, [pc, #96]	; (801122c <OpenContinuousRxCWindow+0x88>)
 80111cc:	2202      	movs	r2, #2
 80111ce:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80111d2:	4b14      	ldr	r3, [pc, #80]	; (8011224 <OpenContinuousRxCWindow+0x80>)
 80111d4:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80111d8:	4b14      	ldr	r3, [pc, #80]	; (801122c <OpenContinuousRxCWindow+0x88>)
 80111da:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80111de:	4b13      	ldr	r3, [pc, #76]	; (801122c <OpenContinuousRxCWindow+0x88>)
 80111e0:	2201      	movs	r2, #1
 80111e2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80111e6:	4b0f      	ldr	r3, [pc, #60]	; (8011224 <OpenContinuousRxCWindow+0x80>)
 80111e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111ec:	4a10      	ldr	r2, [pc, #64]	; (8011230 <OpenContinuousRxCWindow+0x8c>)
 80111ee:	490e      	ldr	r1, [pc, #56]	; (8011228 <OpenContinuousRxCWindow+0x84>)
 80111f0:	4618      	mov	r0, r3
 80111f2:	f004 f9b5 	bl	8015560 <RegionRxConfig>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d00f      	beq.n	801121c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80111fc:	4b0b      	ldr	r3, [pc, #44]	; (801122c <OpenContinuousRxCWindow+0x88>)
 80111fe:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8011202:	4b0a      	ldr	r3, [pc, #40]	; (801122c <OpenContinuousRxCWindow+0x88>)
 8011204:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8011208:	4b0a      	ldr	r3, [pc, #40]	; (8011234 <OpenContinuousRxCWindow+0x90>)
 801120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120c:	2000      	movs	r0, #0
 801120e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011210:	4b06      	ldr	r3, [pc, #24]	; (801122c <OpenContinuousRxCWindow+0x88>)
 8011212:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8011216:	4b05      	ldr	r3, [pc, #20]	; (801122c <OpenContinuousRxCWindow+0x88>)
 8011218:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 801121c:	bf00      	nop
 801121e:	3704      	adds	r7, #4
 8011220:	46bd      	mov	sp, r7
 8011222:	bd90      	pop	{r4, r7, pc}
 8011224:	20000c5c 	.word	0x20000c5c
 8011228:	20000b28 	.word	0x20000b28
 801122c:	20000740 	.word	0x20000740
 8011230:	20000b64 	.word	0x20000b64
 8011234:	0801ebac 	.word	0x0801ebac

08011238 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b088      	sub	sp, #32
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	603b      	str	r3, [r7, #0]
 8011244:	4613      	mov	r3, r2
 8011246:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011248:	4b82      	ldr	r3, [pc, #520]	; (8011454 <PrepareFrame+0x21c>)
 801124a:	2200      	movs	r2, #0
 801124c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801124e:	4b81      	ldr	r3, [pc, #516]	; (8011454 <PrepareFrame+0x21c>)
 8011250:	2200      	movs	r2, #0
 8011252:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8011256:	2300      	movs	r3, #0
 8011258:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801125a:	2300      	movs	r3, #0
 801125c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801125e:	2300      	movs	r3, #0
 8011260:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011268:	2300      	movs	r3, #0
 801126a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801126c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801126e:	461a      	mov	r2, r3
 8011270:	6839      	ldr	r1, [r7, #0]
 8011272:	4879      	ldr	r0, [pc, #484]	; (8011458 <PrepareFrame+0x220>)
 8011274:	f007 feb1 	bl	8018fda <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011278:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801127a:	b2da      	uxtb	r2, r3
 801127c:	4b75      	ldr	r3, [pc, #468]	; (8011454 <PrepareFrame+0x21c>)
 801127e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	781a      	ldrb	r2, [r3, #0]
 8011286:	4b73      	ldr	r3, [pc, #460]	; (8011454 <PrepareFrame+0x21c>)
 8011288:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011292:	b2db      	uxtb	r3, r3
 8011294:	2b07      	cmp	r3, #7
 8011296:	f000 80b9 	beq.w	801140c <PrepareFrame+0x1d4>
 801129a:	2b07      	cmp	r3, #7
 801129c:	f300 80d0 	bgt.w	8011440 <PrepareFrame+0x208>
 80112a0:	2b02      	cmp	r3, #2
 80112a2:	d006      	beq.n	80112b2 <PrepareFrame+0x7a>
 80112a4:	2b04      	cmp	r3, #4
 80112a6:	f040 80cb 	bne.w	8011440 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80112aa:	4b6a      	ldr	r3, [pc, #424]	; (8011454 <PrepareFrame+0x21c>)
 80112ac:	2201      	movs	r2, #1
 80112ae:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80112b2:	4b68      	ldr	r3, [pc, #416]	; (8011454 <PrepareFrame+0x21c>)
 80112b4:	2204      	movs	r2, #4
 80112b6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80112ba:	4b66      	ldr	r3, [pc, #408]	; (8011454 <PrepareFrame+0x21c>)
 80112bc:	4a67      	ldr	r2, [pc, #412]	; (801145c <PrepareFrame+0x224>)
 80112be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80112c2:	4b64      	ldr	r3, [pc, #400]	; (8011454 <PrepareFrame+0x21c>)
 80112c4:	22ff      	movs	r2, #255	; 0xff
 80112c6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	781a      	ldrb	r2, [r3, #0]
 80112ce:	4b61      	ldr	r3, [pc, #388]	; (8011454 <PrepareFrame+0x21c>)
 80112d0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80112d4:	4a5f      	ldr	r2, [pc, #380]	; (8011454 <PrepareFrame+0x21c>)
 80112d6:	79fb      	ldrb	r3, [r7, #7]
 80112d8:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80112dc:	4b60      	ldr	r3, [pc, #384]	; (8011460 <PrepareFrame+0x228>)
 80112de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80112e2:	4a5c      	ldr	r2, [pc, #368]	; (8011454 <PrepareFrame+0x21c>)
 80112e4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	781a      	ldrb	r2, [r3, #0]
 80112ec:	4b59      	ldr	r3, [pc, #356]	; (8011454 <PrepareFrame+0x21c>)
 80112ee:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80112f2:	4b58      	ldr	r3, [pc, #352]	; (8011454 <PrepareFrame+0x21c>)
 80112f4:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80112f8:	4b56      	ldr	r3, [pc, #344]	; (8011454 <PrepareFrame+0x21c>)
 80112fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80112fe:	4b55      	ldr	r3, [pc, #340]	; (8011454 <PrepareFrame+0x21c>)
 8011300:	4a55      	ldr	r2, [pc, #340]	; (8011458 <PrepareFrame+0x220>)
 8011302:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011306:	f107 0318 	add.w	r3, r7, #24
 801130a:	4618      	mov	r0, r3
 801130c:	f003 f9dc 	bl	80146c8 <LoRaMacCryptoGetFCntUp>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d001      	beq.n	801131a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011316:	2312      	movs	r3, #18
 8011318:	e098      	b.n	801144c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801131a:	69bb      	ldr	r3, [r7, #24]
 801131c:	b29a      	uxth	r2, r3
 801131e:	4b4d      	ldr	r3, [pc, #308]	; (8011454 <PrepareFrame+0x21c>)
 8011320:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011324:	4b4b      	ldr	r3, [pc, #300]	; (8011454 <PrepareFrame+0x21c>)
 8011326:	2200      	movs	r2, #0
 8011328:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801132c:	4b49      	ldr	r3, [pc, #292]	; (8011454 <PrepareFrame+0x21c>)
 801132e:	2200      	movs	r2, #0
 8011330:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011334:	69bb      	ldr	r3, [r7, #24]
 8011336:	4a47      	ldr	r2, [pc, #284]	; (8011454 <PrepareFrame+0x21c>)
 8011338:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801133c:	f107 0314 	add.w	r3, r7, #20
 8011340:	4618      	mov	r0, r3
 8011342:	f002 fb8d 	bl	8013a60 <LoRaMacCommandsGetSizeSerializedCmds>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d001      	beq.n	8011350 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801134c:	2313      	movs	r3, #19
 801134e:	e07d      	b.n	801144c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d076      	beq.n	8011444 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011356:	4b42      	ldr	r3, [pc, #264]	; (8011460 <PrepareFrame+0x228>)
 8011358:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801135c:	4618      	mov	r0, r3
 801135e:	f7fe fd2b 	bl	800fdb8 <GetMaxAppPayloadWithoutFOptsLength>
 8011362:	4603      	mov	r3, r0
 8011364:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011366:	4b3b      	ldr	r3, [pc, #236]	; (8011454 <PrepareFrame+0x21c>)
 8011368:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01d      	beq.n	80113ac <PrepareFrame+0x174>
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	2b0f      	cmp	r3, #15
 8011374:	d81a      	bhi.n	80113ac <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011376:	f107 0314 	add.w	r3, r7, #20
 801137a:	4a3a      	ldr	r2, [pc, #232]	; (8011464 <PrepareFrame+0x22c>)
 801137c:	4619      	mov	r1, r3
 801137e:	200f      	movs	r0, #15
 8011380:	f002 fb84 	bl	8013a8c <LoRaMacCommandsSerializeCmds>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d001      	beq.n	801138e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801138a:	2313      	movs	r3, #19
 801138c:	e05e      	b.n	801144c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	f003 030f 	and.w	r3, r3, #15
 8011394:	b2d9      	uxtb	r1, r3
 8011396:	68ba      	ldr	r2, [r7, #8]
 8011398:	7813      	ldrb	r3, [r2, #0]
 801139a:	f361 0303 	bfi	r3, r1, #0, #4
 801139e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	781a      	ldrb	r2, [r3, #0]
 80113a4:	4b2b      	ldr	r3, [pc, #172]	; (8011454 <PrepareFrame+0x21c>)
 80113a6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80113aa:	e04b      	b.n	8011444 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80113ac:	4b29      	ldr	r3, [pc, #164]	; (8011454 <PrepareFrame+0x21c>)
 80113ae:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d010      	beq.n	80113d8 <PrepareFrame+0x1a0>
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	2b0f      	cmp	r3, #15
 80113ba:	d90d      	bls.n	80113d8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80113bc:	7ffb      	ldrb	r3, [r7, #31]
 80113be:	f107 0114 	add.w	r1, r7, #20
 80113c2:	4a29      	ldr	r2, [pc, #164]	; (8011468 <PrepareFrame+0x230>)
 80113c4:	4618      	mov	r0, r3
 80113c6:	f002 fb61 	bl	8013a8c <LoRaMacCommandsSerializeCmds>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d001      	beq.n	80113d4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113d0:	2313      	movs	r3, #19
 80113d2:	e03b      	b.n	801144c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80113d4:	230a      	movs	r3, #10
 80113d6:	e039      	b.n	801144c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80113d8:	7ffb      	ldrb	r3, [r7, #31]
 80113da:	f107 0114 	add.w	r1, r7, #20
 80113de:	4a22      	ldr	r2, [pc, #136]	; (8011468 <PrepareFrame+0x230>)
 80113e0:	4618      	mov	r0, r3
 80113e2:	f002 fb53 	bl	8013a8c <LoRaMacCommandsSerializeCmds>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d001      	beq.n	80113f0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113ec:	2313      	movs	r3, #19
 80113ee:	e02d      	b.n	801144c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80113f0:	4b18      	ldr	r3, [pc, #96]	; (8011454 <PrepareFrame+0x21c>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80113f8:	4b16      	ldr	r3, [pc, #88]	; (8011454 <PrepareFrame+0x21c>)
 80113fa:	4a1b      	ldr	r2, [pc, #108]	; (8011468 <PrepareFrame+0x230>)
 80113fc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	b2da      	uxtb	r2, r3
 8011404:	4b13      	ldr	r3, [pc, #76]	; (8011454 <PrepareFrame+0x21c>)
 8011406:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801140a:	e01b      	b.n	8011444 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d01a      	beq.n	8011448 <PrepareFrame+0x210>
 8011412:	4b10      	ldr	r3, [pc, #64]	; (8011454 <PrepareFrame+0x21c>)
 8011414:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011418:	2b00      	cmp	r3, #0
 801141a:	d015      	beq.n	8011448 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801141c:	4813      	ldr	r0, [pc, #76]	; (801146c <PrepareFrame+0x234>)
 801141e:	4b0d      	ldr	r3, [pc, #52]	; (8011454 <PrepareFrame+0x21c>)
 8011420:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011424:	b29b      	uxth	r3, r3
 8011426:	461a      	mov	r2, r3
 8011428:	6839      	ldr	r1, [r7, #0]
 801142a:	f007 fdd6 	bl	8018fda <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801142e:	4b09      	ldr	r3, [pc, #36]	; (8011454 <PrepareFrame+0x21c>)
 8011430:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011434:	b29b      	uxth	r3, r3
 8011436:	3301      	adds	r3, #1
 8011438:	b29a      	uxth	r2, r3
 801143a:	4b06      	ldr	r3, [pc, #24]	; (8011454 <PrepareFrame+0x21c>)
 801143c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801143e:	e003      	b.n	8011448 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011440:	2302      	movs	r3, #2
 8011442:	e003      	b.n	801144c <PrepareFrame+0x214>
            break;
 8011444:	bf00      	nop
 8011446:	e000      	b.n	801144a <PrepareFrame+0x212>
            break;
 8011448:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3720      	adds	r7, #32
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	20000740 	.word	0x20000740
 8011458:	20000878 	.word	0x20000878
 801145c:	20000742 	.word	0x20000742
 8011460:	20000c5c 	.word	0x20000c5c
 8011464:	20000858 	.word	0x20000858
 8011468:	20000bdc 	.word	0x20000bdc
 801146c:	20000743 	.word	0x20000743

08011470 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b08a      	sub	sp, #40	; 0x28
 8011474:	af00      	add	r7, sp, #0
 8011476:	4603      	mov	r3, r0
 8011478:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801147a:	2303      	movs	r3, #3
 801147c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011480:	2300      	movs	r3, #0
 8011482:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011484:	79fb      	ldrb	r3, [r7, #7]
 8011486:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011488:	4b4b      	ldr	r3, [pc, #300]	; (80115b8 <SendFrameOnChannel+0x148>)
 801148a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801148e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011490:	4b49      	ldr	r3, [pc, #292]	; (80115b8 <SendFrameOnChannel+0x148>)
 8011492:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011496:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011498:	4b47      	ldr	r3, [pc, #284]	; (80115b8 <SendFrameOnChannel+0x148>)
 801149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801149e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80114a0:	4b45      	ldr	r3, [pc, #276]	; (80115b8 <SendFrameOnChannel+0x148>)
 80114a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114a6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80114a8:	4b44      	ldr	r3, [pc, #272]	; (80115bc <SendFrameOnChannel+0x14c>)
 80114aa:	881b      	ldrh	r3, [r3, #0]
 80114ac:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80114ae:	4b42      	ldr	r3, [pc, #264]	; (80115b8 <SendFrameOnChannel+0x148>)
 80114b0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80114b4:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80114b6:	4b40      	ldr	r3, [pc, #256]	; (80115b8 <SendFrameOnChannel+0x148>)
 80114b8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80114bc:	f107 020f 	add.w	r2, r7, #15
 80114c0:	f107 0110 	add.w	r1, r7, #16
 80114c4:	4b3e      	ldr	r3, [pc, #248]	; (80115c0 <SendFrameOnChannel+0x150>)
 80114c6:	f004 f869 	bl	801559c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80114ca:	4b3c      	ldr	r3, [pc, #240]	; (80115bc <SendFrameOnChannel+0x14c>)
 80114cc:	2201      	movs	r2, #1
 80114ce:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80114d2:	4b39      	ldr	r3, [pc, #228]	; (80115b8 <SendFrameOnChannel+0x148>)
 80114d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80114d8:	b2da      	uxtb	r2, r3
 80114da:	4b38      	ldr	r3, [pc, #224]	; (80115bc <SendFrameOnChannel+0x14c>)
 80114dc:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 80114e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80114e4:	4b35      	ldr	r3, [pc, #212]	; (80115bc <SendFrameOnChannel+0x14c>)
 80114e6:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80114ea:	79fb      	ldrb	r3, [r7, #7]
 80114ec:	4a33      	ldr	r2, [pc, #204]	; (80115bc <SendFrameOnChannel+0x14c>)
 80114ee:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80114f2:	4b32      	ldr	r3, [pc, #200]	; (80115bc <SendFrameOnChannel+0x14c>)
 80114f4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80114f8:	4a30      	ldr	r2, [pc, #192]	; (80115bc <SendFrameOnChannel+0x14c>)
 80114fa:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80114fe:	4b2f      	ldr	r3, [pc, #188]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011500:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8011504:	4a2d      	ldr	r2, [pc, #180]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011506:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801150a:	f001 fff6 	bl	80134fa <LoRaMacClassBIsBeaconModeActive>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00b      	beq.n	801152c <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011514:	4b29      	ldr	r3, [pc, #164]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011516:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801151a:	4618      	mov	r0, r3
 801151c:	f002 f858 	bl	80135d0 <LoRaMacClassBIsUplinkCollision>
 8011520:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011522:	6a3b      	ldr	r3, [r7, #32]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d001      	beq.n	801152c <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011528:	2310      	movs	r3, #16
 801152a:	e040      	b.n	80115ae <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801152c:	4b22      	ldr	r3, [pc, #136]	; (80115b8 <SendFrameOnChannel+0x148>)
 801152e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011532:	2b01      	cmp	r3, #1
 8011534:	d101      	bne.n	801153a <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011536:	f002 f855 	bl	80135e4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801153a:	f001 ffef 	bl	801351c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801153e:	4b1e      	ldr	r3, [pc, #120]	; (80115b8 <SendFrameOnChannel+0x148>)
 8011540:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011544:	b2db      	uxtb	r3, r3
 8011546:	4a1d      	ldr	r2, [pc, #116]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011548:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 801154c:	4611      	mov	r1, r2
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff fc2a 	bl	8010da8 <SecureFrame>
 8011554:	4603      	mov	r3, r0
 8011556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801155a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801155e:	2b00      	cmp	r3, #0
 8011560:	d002      	beq.n	8011568 <SendFrameOnChannel+0xf8>
    {
        return status;
 8011562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011566:	e022      	b.n	80115ae <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011568:	4b14      	ldr	r3, [pc, #80]	; (80115bc <SendFrameOnChannel+0x14c>)
 801156a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801156e:	f043 0302 	orr.w	r3, r3, #2
 8011572:	4a12      	ldr	r2, [pc, #72]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011574:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8011578:	4b10      	ldr	r3, [pc, #64]	; (80115bc <SendFrameOnChannel+0x14c>)
 801157a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801157e:	3301      	adds	r3, #1
 8011580:	b2da      	uxtb	r2, r3
 8011582:	4b0e      	ldr	r3, [pc, #56]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011584:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011588:	4b0c      	ldr	r3, [pc, #48]	; (80115bc <SendFrameOnChannel+0x14c>)
 801158a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801158e:	4b0b      	ldr	r3, [pc, #44]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011590:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8011594:	4b09      	ldr	r3, [pc, #36]	; (80115bc <SendFrameOnChannel+0x14c>)
 8011596:	2200      	movs	r2, #0
 8011598:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801159c:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <SendFrameOnChannel+0x154>)
 801159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a0:	4a06      	ldr	r2, [pc, #24]	; (80115bc <SendFrameOnChannel+0x14c>)
 80115a2:	8812      	ldrh	r2, [r2, #0]
 80115a4:	b2d2      	uxtb	r2, r2
 80115a6:	4611      	mov	r1, r2
 80115a8:	4807      	ldr	r0, [pc, #28]	; (80115c8 <SendFrameOnChannel+0x158>)
 80115aa:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3728      	adds	r7, #40	; 0x28
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	20000c5c 	.word	0x20000c5c
 80115bc:	20000740 	.word	0x20000740
 80115c0:	20000b5c 	.word	0x20000b5c
 80115c4:	0801ebac 	.word	0x0801ebac
 80115c8:	20000742 	.word	0x20000742

080115cc <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	6039      	str	r1, [r7, #0]
 80115d6:	80fb      	strh	r3, [r7, #6]
 80115d8:	4613      	mov	r3, r2
 80115da:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80115dc:	4b09      	ldr	r3, [pc, #36]	; (8011604 <SetTxContinuousWave+0x38>)
 80115de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115e0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80115e4:	88fa      	ldrh	r2, [r7, #6]
 80115e6:	6838      	ldr	r0, [r7, #0]
 80115e8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80115ea:	4b07      	ldr	r3, [pc, #28]	; (8011608 <SetTxContinuousWave+0x3c>)
 80115ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80115f0:	f043 0302 	orr.w	r3, r3, #2
 80115f4:	4a04      	ldr	r2, [pc, #16]	; (8011608 <SetTxContinuousWave+0x3c>)
 80115f6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80115fa:	2300      	movs	r3, #0
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3708      	adds	r7, #8
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	0801ebac 	.word	0x0801ebac
 8011608:	20000740 	.word	0x20000740

0801160c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011616:	4b49      	ldr	r3, [pc, #292]	; (801173c <RestoreNvmData+0x130>)
 8011618:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801161c:	2b01      	cmp	r3, #1
 801161e:	d001      	beq.n	8011624 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011620:	2301      	movs	r3, #1
 8011622:	e087      	b.n	8011734 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011624:	2124      	movs	r1, #36	; 0x24
 8011626:	4846      	ldr	r0, [pc, #280]	; (8011740 <RestoreNvmData+0x134>)
 8011628:	f007 fd2c 	bl	8019084 <Crc32>
 801162c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801162e:	4b44      	ldr	r3, [pc, #272]	; (8011740 <RestoreNvmData+0x134>)
 8011630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	429a      	cmp	r2, r3
 8011636:	d001      	beq.n	801163c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011638:	2317      	movs	r3, #23
 801163a:	e07b      	b.n	8011734 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801163c:	211c      	movs	r1, #28
 801163e:	4841      	ldr	r0, [pc, #260]	; (8011744 <RestoreNvmData+0x138>)
 8011640:	f007 fd20 	bl	8019084 <Crc32>
 8011644:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011646:	4b3e      	ldr	r3, [pc, #248]	; (8011740 <RestoreNvmData+0x134>)
 8011648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	429a      	cmp	r2, r3
 801164e:	d001      	beq.n	8011654 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011650:	2317      	movs	r3, #23
 8011652:	e06f      	b.n	8011734 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011658:	483b      	ldr	r0, [pc, #236]	; (8011748 <RestoreNvmData+0x13c>)
 801165a:	f007 fd13 	bl	8019084 <Crc32>
 801165e:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8011660:	4b37      	ldr	r3, [pc, #220]	; (8011740 <RestoreNvmData+0x134>)
 8011662:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	429a      	cmp	r2, r3
 801166a:	d001      	beq.n	8011670 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801166c:	2317      	movs	r3, #23
 801166e:	e061      	b.n	8011734 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011670:	21d4      	movs	r1, #212	; 0xd4
 8011672:	4836      	ldr	r0, [pc, #216]	; (801174c <RestoreNvmData+0x140>)
 8011674:	f007 fd06 	bl	8019084 <Crc32>
 8011678:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 801167a:	4b31      	ldr	r3, [pc, #196]	; (8011740 <RestoreNvmData+0x134>)
 801167c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	429a      	cmp	r2, r3
 8011684:	d001      	beq.n	801168a <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011686:	2317      	movs	r3, #23
 8011688:	e054      	b.n	8011734 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 801168a:	2110      	movs	r1, #16
 801168c:	4830      	ldr	r0, [pc, #192]	; (8011750 <RestoreNvmData+0x144>)
 801168e:	f007 fcf9 	bl	8019084 <Crc32>
 8011692:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8011694:	4b2a      	ldr	r3, [pc, #168]	; (8011740 <RestoreNvmData+0x134>)
 8011696:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	429a      	cmp	r2, r3
 801169e:	d001      	beq.n	80116a4 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80116a0:	2317      	movs	r3, #23
 80116a2:	e047      	b.n	8011734 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80116a4:	f44f 715e 	mov.w	r1, #888	; 0x378
 80116a8:	482a      	ldr	r0, [pc, #168]	; (8011754 <RestoreNvmData+0x148>)
 80116aa:	f007 fceb 	bl	8019084 <Crc32>
 80116ae:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80116b0:	4b23      	ldr	r3, [pc, #140]	; (8011740 <RestoreNvmData+0x134>)
 80116b2:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d001      	beq.n	80116c0 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80116bc:	2317      	movs	r3, #23
 80116be:	e039      	b.n	8011734 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80116c0:	2114      	movs	r1, #20
 80116c2:	4825      	ldr	r0, [pc, #148]	; (8011758 <RestoreNvmData+0x14c>)
 80116c4:	f007 fcde 	bl	8019084 <Crc32>
 80116c8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80116ca:	4b1d      	ldr	r3, [pc, #116]	; (8011740 <RestoreNvmData+0x134>)
 80116cc:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d001      	beq.n	80116da <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80116d6:	2317      	movs	r3, #23
 80116d8:	e02c      	b.n	8011734 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80116da:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80116de:	4918      	ldr	r1, [pc, #96]	; (8011740 <RestoreNvmData+0x134>)
 80116e0:	481e      	ldr	r0, [pc, #120]	; (801175c <RestoreNvmData+0x150>)
 80116e2:	f007 fc7a 	bl	8018fda <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80116e6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80116ea:	2100      	movs	r1, #0
 80116ec:	4814      	ldr	r0, [pc, #80]	; (8011740 <RestoreNvmData+0x134>)
 80116ee:	f007 fcaf 	bl	8019050 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80116f2:	4b12      	ldr	r3, [pc, #72]	; (801173c <RestoreNvmData+0x130>)
 80116f4:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80116f8:	4b10      	ldr	r3, [pc, #64]	; (801173c <RestoreNvmData+0x130>)
 80116fa:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80116fe:	4b17      	ldr	r3, [pc, #92]	; (801175c <RestoreNvmData+0x150>)
 8011700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011702:	4a0e      	ldr	r2, [pc, #56]	; (801173c <RestoreNvmData+0x130>)
 8011704:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011708:	4b14      	ldr	r3, [pc, #80]	; (801175c <RestoreNvmData+0x150>)
 801170a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801170e:	4b0b      	ldr	r3, [pc, #44]	; (801173c <RestoreNvmData+0x130>)
 8011710:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011714:	4b09      	ldr	r3, [pc, #36]	; (801173c <RestoreNvmData+0x130>)
 8011716:	2201      	movs	r2, #1
 8011718:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801171c:	4b07      	ldr	r3, [pc, #28]	; (801173c <RestoreNvmData+0x130>)
 801171e:	2202      	movs	r2, #2
 8011720:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011724:	4b0e      	ldr	r3, [pc, #56]	; (8011760 <RestoreNvmData+0x154>)
 8011726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011728:	4a0c      	ldr	r2, [pc, #48]	; (801175c <RestoreNvmData+0x150>)
 801172a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801172e:	4610      	mov	r0, r2
 8011730:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8011732:	2300      	movs	r3, #0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	20000740 	.word	0x20000740
 8011740:	20001228 	.word	0x20001228
 8011744:	20001250 	.word	0x20001250
 8011748:	20001270 	.word	0x20001270
 801174c:	20001374 	.word	0x20001374
 8011750:	2000144c 	.word	0x2000144c
 8011754:	20001460 	.word	0x20001460
 8011758:	200017dc 	.word	0x200017dc
 801175c:	20000c5c 	.word	0x20000c5c
 8011760:	0801ebac 	.word	0x0801ebac

08011764 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <DetermineFrameType+0x16>
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d101      	bne.n	801177e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801177a:	2303      	movs	r3, #3
 801177c:	e03b      	b.n	80117f6 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7b1b      	ldrb	r3, [r3, #12]
 8011782:	f003 030f 	and.w	r3, r3, #15
 8011786:	b2db      	uxtb	r3, r3
 8011788:	2b00      	cmp	r3, #0
 801178a:	d008      	beq.n	801179e <DetermineFrameType+0x3a>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d003      	beq.n	801179e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2200      	movs	r2, #0
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	e02a      	b.n	80117f4 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d103      	bne.n	80117b0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	2201      	movs	r2, #1
 80117ac:	701a      	strb	r2, [r3, #0]
 80117ae:	e021      	b.n	80117f4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	7b1b      	ldrb	r3, [r3, #12]
 80117b4:	f003 030f 	and.w	r3, r3, #15
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d108      	bne.n	80117d0 <DetermineFrameType+0x6c>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d103      	bne.n	80117d0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	2202      	movs	r2, #2
 80117cc:	701a      	strb	r2, [r3, #0]
 80117ce:	e011      	b.n	80117f4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	7b1b      	ldrb	r3, [r3, #12]
 80117d4:	f003 030f 	and.w	r3, r3, #15
 80117d8:	b2db      	uxtb	r3, r3
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d108      	bne.n	80117f0 <DetermineFrameType+0x8c>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d003      	beq.n	80117f0 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	2203      	movs	r2, #3
 80117ec:	701a      	strb	r2, [r3, #0]
 80117ee:	e001      	b.n	80117f4 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80117f0:	2318      	movs	r3, #24
 80117f2:	e000      	b.n	80117f6 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	370c      	adds	r7, #12
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bc80      	pop	{r7}
 80117fe:	4770      	bx	lr

08011800 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	4603      	mov	r3, r0
 8011808:	460a      	mov	r2, r1
 801180a:	71fb      	strb	r3, [r7, #7]
 801180c:	4613      	mov	r3, r2
 801180e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011810:	79fa      	ldrb	r2, [r7, #7]
 8011812:	79bb      	ldrb	r3, [r7, #6]
 8011814:	429a      	cmp	r2, r3
 8011816:	d301      	bcc.n	801181c <CheckRetrans+0x1c>
    {
        return true;
 8011818:	2301      	movs	r3, #1
 801181a:	e000      	b.n	801181e <CheckRetrans+0x1e>
    }
    return false;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	370c      	adds	r7, #12
 8011822:	46bd      	mov	sp, r7
 8011824:	bc80      	pop	{r7}
 8011826:	4770      	bx	lr

08011828 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801182c:	4b12      	ldr	r3, [pc, #72]	; (8011878 <CheckRetransUnconfirmedUplink+0x50>)
 801182e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011832:	4a12      	ldr	r2, [pc, #72]	; (801187c <CheckRetransUnconfirmedUplink+0x54>)
 8011834:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8011838:	4611      	mov	r1, r2
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff ffe0 	bl	8011800 <CheckRetrans>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	d001      	beq.n	801184a <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011846:	2301      	movs	r3, #1
 8011848:	e014      	b.n	8011874 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801184a:	4b0b      	ldr	r3, [pc, #44]	; (8011878 <CheckRetransUnconfirmedUplink+0x50>)
 801184c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011850:	f003 0302 	and.w	r3, r3, #2
 8011854:	b2db      	uxtb	r3, r3
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00b      	beq.n	8011872 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801185a:	4b07      	ldr	r3, [pc, #28]	; (8011878 <CheckRetransUnconfirmedUplink+0x50>)
 801185c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011860:	2b00      	cmp	r3, #0
 8011862:	d004      	beq.n	801186e <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011864:	4b04      	ldr	r3, [pc, #16]	; (8011878 <CheckRetransUnconfirmedUplink+0x50>)
 8011866:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801186a:	2b01      	cmp	r3, #1
 801186c:	d101      	bne.n	8011872 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801186e:	2301      	movs	r3, #1
 8011870:	e000      	b.n	8011874 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	bd80      	pop	{r7, pc}
 8011878:	20000740 	.word	0x20000740
 801187c:	20000c5c 	.word	0x20000c5c

08011880 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011884:	4b10      	ldr	r3, [pc, #64]	; (80118c8 <CheckRetransConfirmedUplink+0x48>)
 8011886:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801188a:	4a10      	ldr	r2, [pc, #64]	; (80118cc <CheckRetransConfirmedUplink+0x4c>)
 801188c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8011890:	4611      	mov	r1, r2
 8011892:	4618      	mov	r0, r3
 8011894:	f7ff ffb4 	bl	8011800 <CheckRetrans>
 8011898:	4603      	mov	r3, r0
 801189a:	2b00      	cmp	r3, #0
 801189c:	d001      	beq.n	80118a2 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801189e:	2301      	movs	r3, #1
 80118a0:	e00f      	b.n	80118c2 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80118a2:	4b09      	ldr	r3, [pc, #36]	; (80118c8 <CheckRetransConfirmedUplink+0x48>)
 80118a4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118a8:	f003 0302 	and.w	r3, r3, #2
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d006      	beq.n	80118c0 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80118b2:	4b05      	ldr	r3, [pc, #20]	; (80118c8 <CheckRetransConfirmedUplink+0x48>)
 80118b4:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80118bc:	2301      	movs	r3, #1
 80118be:	e000      	b.n	80118c2 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	20000740 	.word	0x20000740
 80118cc:	20000c5c 	.word	0x20000c5c

080118d0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118de:	d002      	beq.n	80118e6 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	3301      	adds	r3, #1
 80118e4:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80118e6:	687b      	ldr	r3, [r7, #4]
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bc80      	pop	{r7}
 80118f0:	4770      	bx	lr
	...

080118f4 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80118f8:	4b1a      	ldr	r3, [pc, #104]	; (8011964 <StopRetransmission+0x70>)
 80118fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118fe:	f003 0302 	and.w	r3, r3, #2
 8011902:	b2db      	uxtb	r3, r3
 8011904:	2b00      	cmp	r3, #0
 8011906:	d009      	beq.n	801191c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011908:	4b16      	ldr	r3, [pc, #88]	; (8011964 <StopRetransmission+0x70>)
 801190a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801190e:	2b00      	cmp	r3, #0
 8011910:	d011      	beq.n	8011936 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011912:	4b14      	ldr	r3, [pc, #80]	; (8011964 <StopRetransmission+0x70>)
 8011914:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011918:	2b01      	cmp	r3, #1
 801191a:	d00c      	beq.n	8011936 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801191c:	4b12      	ldr	r3, [pc, #72]	; (8011968 <StopRetransmission+0x74>)
 801191e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011922:	2b00      	cmp	r3, #0
 8011924:	d007      	beq.n	8011936 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8011926:	4b10      	ldr	r3, [pc, #64]	; (8011968 <StopRetransmission+0x74>)
 8011928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff ffd0 	bl	80118d0 <IncreaseAdrAckCounter>
 8011930:	4603      	mov	r3, r0
 8011932:	4a0d      	ldr	r2, [pc, #52]	; (8011968 <StopRetransmission+0x74>)
 8011934:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011936:	4b0b      	ldr	r3, [pc, #44]	; (8011964 <StopRetransmission+0x70>)
 8011938:	2200      	movs	r2, #0
 801193a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 801193e:	4b09      	ldr	r3, [pc, #36]	; (8011964 <StopRetransmission+0x70>)
 8011940:	2200      	movs	r2, #0
 8011942:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011946:	4b07      	ldr	r3, [pc, #28]	; (8011964 <StopRetransmission+0x70>)
 8011948:	2200      	movs	r2, #0
 801194a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801194e:	4b05      	ldr	r3, [pc, #20]	; (8011964 <StopRetransmission+0x70>)
 8011950:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011954:	f023 0302 	bic.w	r3, r3, #2
 8011958:	4a02      	ldr	r2, [pc, #8]	; (8011964 <StopRetransmission+0x70>)
 801195a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801195e:	2301      	movs	r3, #1
}
 8011960:	4618      	mov	r0, r3
 8011962:	bd80      	pop	{r7, pc}
 8011964:	20000740 	.word	0x20000740
 8011968:	20000c5c 	.word	0x20000c5c

0801196c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 801196c:	b580      	push	{r7, lr}
 801196e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011970:	4b08      	ldr	r3, [pc, #32]	; (8011994 <OnMacProcessNotify+0x28>)
 8011972:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011976:	2b00      	cmp	r3, #0
 8011978:	d00a      	beq.n	8011990 <OnMacProcessNotify+0x24>
 801197a:	4b06      	ldr	r3, [pc, #24]	; (8011994 <OnMacProcessNotify+0x28>)
 801197c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011980:	695b      	ldr	r3, [r3, #20]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d004      	beq.n	8011990 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011986:	4b03      	ldr	r3, [pc, #12]	; (8011994 <OnMacProcessNotify+0x28>)
 8011988:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801198c:	695b      	ldr	r3, [r3, #20]
 801198e:	4798      	blx	r3
    }
}
 8011990:	bf00      	nop
 8011992:	bd80      	pop	{r7, pc}
 8011994:	20000740 	.word	0x20000740

08011998 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	4603      	mov	r3, r0
 80119a0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80119a2:	4b0b      	ldr	r3, [pc, #44]	; (80119d0 <CallNvmDataChangeCallback+0x38>)
 80119a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00c      	beq.n	80119c6 <CallNvmDataChangeCallback+0x2e>
 80119ac:	4b08      	ldr	r3, [pc, #32]	; (80119d0 <CallNvmDataChangeCallback+0x38>)
 80119ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80119b2:	691b      	ldr	r3, [r3, #16]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d006      	beq.n	80119c6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80119b8:	4b05      	ldr	r3, [pc, #20]	; (80119d0 <CallNvmDataChangeCallback+0x38>)
 80119ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	88fa      	ldrh	r2, [r7, #6]
 80119c2:	4610      	mov	r0, r2
 80119c4:	4798      	blx	r3
    }
}
 80119c6:	bf00      	nop
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	20000740 	.word	0x20000740

080119d4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80119d4:	b480      	push	{r7}
 80119d6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80119d8:	4b0b      	ldr	r3, [pc, #44]	; (8011a08 <IsRequestPending+0x34>)
 80119da:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80119de:	f003 0304 	and.w	r3, r3, #4
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d107      	bne.n	80119f8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80119e8:	4b07      	ldr	r3, [pc, #28]	; (8011a08 <IsRequestPending+0x34>)
 80119ea:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80119ee:	f003 0301 	and.w	r3, r3, #1
 80119f2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d001      	beq.n	80119fc <IsRequestPending+0x28>
    {
        return 1;
 80119f8:	2301      	movs	r3, #1
 80119fa:	e000      	b.n	80119fe <IsRequestPending+0x2a>
    }
    return 0;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bc80      	pop	{r7}
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop
 8011a08:	20000740 	.word	0x20000740

08011a0c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011a0c:	b590      	push	{r4, r7, lr}
 8011a0e:	b091      	sub	sp, #68	; 0x44
 8011a10:	af02      	add	r7, sp, #8
 8011a12:	6178      	str	r0, [r7, #20]
 8011a14:	6139      	str	r1, [r7, #16]
 8011a16:	4613      	mov	r3, r2
 8011a18:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d002      	beq.n	8011a26 <LoRaMacInitialization+0x1a>
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d101      	bne.n	8011a2a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a26:	2303      	movs	r3, #3
 8011a28:	e27a      	b.n	8011f20 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d00b      	beq.n	8011a4a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d007      	beq.n	8011a4a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d003      	beq.n	8011a4a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d101      	bne.n	8011a4e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a4a:	2303      	movs	r3, #3
 8011a4c:	e268      	b.n	8011f20 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011a4e:	7bfb      	ldrb	r3, [r7, #15]
 8011a50:	4618      	mov	r0, r3
 8011a52:	f003 fcac 	bl	80153ae <RegionIsActive>
 8011a56:	4603      	mov	r3, r0
 8011a58:	f083 0301 	eor.w	r3, r3, #1
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d001      	beq.n	8011a66 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011a62:	2309      	movs	r3, #9
 8011a64:	e25c      	b.n	8011f20 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011a66:	6978      	ldr	r0, [r7, #20]
 8011a68:	f002 f932 	bl	8013cd0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011a6c:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011a70:	2100      	movs	r1, #0
 8011a72:	48c7      	ldr	r0, [pc, #796]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011a74:	f007 faec 	bl	8019050 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011a78:	f240 521c 	movw	r2, #1308	; 0x51c
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	48c5      	ldr	r0, [pc, #788]	; (8011d94 <LoRaMacInitialization+0x388>)
 8011a80:	f007 fae6 	bl	8019050 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011a84:	4ac2      	ldr	r2, [pc, #776]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011a86:	7bfb      	ldrb	r3, [r7, #15]
 8011a88:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011a8c:	4bc0      	ldr	r3, [pc, #768]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8011a94:	4bbe      	ldr	r3, [pc, #760]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011a9c:	4bbc      	ldr	r3, [pc, #752]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011a9e:	4abe      	ldr	r2, [pc, #760]	; (8011d98 <LoRaMacInitialization+0x38c>)
 8011aa0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011aaa:	4bbc      	ldr	r3, [pc, #752]	; (8011d9c <LoRaMacInitialization+0x390>)
 8011aac:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011aae:	4bbc      	ldr	r3, [pc, #752]	; (8011da0 <LoRaMacInitialization+0x394>)
 8011ab0:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011ab2:	4bbc      	ldr	r3, [pc, #752]	; (8011da4 <LoRaMacInitialization+0x398>)
 8011ab4:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011ab6:	4bb6      	ldr	r3, [pc, #728]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011ab8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011abc:	f107 021c 	add.w	r2, r7, #28
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f003 fcbf 	bl	8015446 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011ac8:	230f      	movs	r3, #15
 8011aca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ace:	4bb0      	ldr	r3, [pc, #704]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011ad0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011ad4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ad8:	4611      	mov	r1, r2
 8011ada:	4618      	mov	r0, r3
 8011adc:	f003 fc7c 	bl	80153d8 <RegionGetPhyParam>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	bf14      	ite	ne
 8011aea:	2301      	movne	r3, #1
 8011aec:	2300      	moveq	r3, #0
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	4ba7      	ldr	r3, [pc, #668]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011af2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011af6:	230a      	movs	r3, #10
 8011af8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011afc:	4ba4      	ldr	r3, [pc, #656]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011afe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f003 fc65 	bl	80153d8 <RegionGetPhyParam>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b14:	b25a      	sxtb	r2, r3
 8011b16:	4b9e      	ldr	r3, [pc, #632]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b18:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011b1c:	2306      	movs	r3, #6
 8011b1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b22:	4b9b      	ldr	r3, [pc, #620]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b2c:	4611      	mov	r1, r2
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f003 fc52 	bl	80153d8 <RegionGetPhyParam>
 8011b34:	4603      	mov	r3, r0
 8011b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3a:	b25a      	sxtb	r2, r3
 8011b3c:	4b94      	ldr	r3, [pc, #592]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b3e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011b42:	2310      	movs	r3, #16
 8011b44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b48:	4b91      	ldr	r3, [pc, #580]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b52:	4611      	mov	r1, r2
 8011b54:	4618      	mov	r0, r3
 8011b56:	f003 fc3f 	bl	80153d8 <RegionGetPhyParam>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	4a8b      	ldr	r2, [pc, #556]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011b66:	2311      	movs	r3, #17
 8011b68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b6c:	4b88      	ldr	r3, [pc, #544]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b76:	4611      	mov	r1, r2
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f003 fc2d 	bl	80153d8 <RegionGetPhyParam>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b84:	4a82      	ldr	r2, [pc, #520]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b86:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011b8a:	2312      	movs	r3, #18
 8011b8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b90:	4b7f      	ldr	r3, [pc, #508]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011b92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b9a:	4611      	mov	r1, r2
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f003 fc1b 	bl	80153d8 <RegionGetPhyParam>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba8:	4a79      	ldr	r2, [pc, #484]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011baa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011bae:	2313      	movs	r3, #19
 8011bb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bb4:	4b76      	ldr	r3, [pc, #472]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011bb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f003 fc09 	bl	80153d8 <RegionGetPhyParam>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bcc:	4a70      	ldr	r2, [pc, #448]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011bce:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011bd2:	2314      	movs	r3, #20
 8011bd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bd8:	4b6d      	ldr	r3, [pc, #436]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011bda:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bde:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011be2:	4611      	mov	r1, r2
 8011be4:	4618      	mov	r0, r3
 8011be6:	f003 fbf7 	bl	80153d8 <RegionGetPhyParam>
 8011bea:	4603      	mov	r3, r0
 8011bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf0:	4a67      	ldr	r2, [pc, #412]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011bf2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011bf6:	2316      	movs	r3, #22
 8011bf8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bfc:	4b64      	ldr	r3, [pc, #400]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011bfe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c06:	4611      	mov	r1, r2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f003 fbe5 	bl	80153d8 <RegionGetPhyParam>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	4b5e      	ldr	r3, [pc, #376]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c18:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011c1c:	2317      	movs	r3, #23
 8011c1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c22:	4b5b      	ldr	r3, [pc, #364]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c2c:	4611      	mov	r1, r2
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f003 fbd2 	bl	80153d8 <RegionGetPhyParam>
 8011c34:	4603      	mov	r3, r0
 8011c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	4a55      	ldr	r2, [pc, #340]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c3c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c42:	4a53      	ldr	r2, [pc, #332]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c44:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011c48:	2318      	movs	r3, #24
 8011c4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c4e:	4b50      	ldr	r3, [pc, #320]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c58:	4611      	mov	r1, r2
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f003 fbbc 	bl	80153d8 <RegionGetPhyParam>
 8011c60:	4603      	mov	r3, r0
 8011c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c66:	b2da      	uxtb	r2, r3
 8011c68:	4b49      	ldr	r3, [pc, #292]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c6a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c70:	b2da      	uxtb	r2, r3
 8011c72:	4b47      	ldr	r3, [pc, #284]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c74:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011c78:	231d      	movs	r3, #29
 8011c7a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c7e:	4b44      	ldr	r3, [pc, #272]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c88:	4611      	mov	r1, r2
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f003 fba4 	bl	80153d8 <RegionGetPhyParam>
 8011c90:	4603      	mov	r3, r0
 8011c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	4b3d      	ldr	r3, [pc, #244]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011c9a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011c9e:	231e      	movs	r3, #30
 8011ca0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ca4:	4b3a      	ldr	r3, [pc, #232]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011ca6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011caa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011cae:	4611      	mov	r1, r2
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f003 fb91 	bl	80153d8 <RegionGetPhyParam>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cbc:	b2da      	uxtb	r2, r3
 8011cbe:	4b34      	ldr	r3, [pc, #208]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011cc0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011cc4:	231f      	movs	r3, #31
 8011cc6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cca:	4b31      	ldr	r3, [pc, #196]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011ccc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011cd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011cd4:	4611      	mov	r1, r2
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f003 fb7e 	bl	80153d8 <RegionGetPhyParam>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce2:	4a2b      	ldr	r2, [pc, #172]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011ce4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011ce8:	2320      	movs	r3, #32
 8011cea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cee:	4b28      	ldr	r3, [pc, #160]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011cf0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011cf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f003 fb6c 	bl	80153d8 <RegionGetPhyParam>
 8011d00:	4603      	mov	r3, r0
 8011d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d06:	4a22      	ldr	r2, [pc, #136]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d08:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011d0c:	230b      	movs	r3, #11
 8011d0e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d12:	4b1f      	ldr	r3, [pc, #124]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011d18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f003 fb5a 	bl	80153d8 <RegionGetPhyParam>
 8011d24:	4603      	mov	r3, r0
 8011d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8011d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	4b18      	ldr	r3, [pc, #96]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d2e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011d32:	230c      	movs	r3, #12
 8011d34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d38:	4b15      	ldr	r3, [pc, #84]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011d3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011d42:	4611      	mov	r1, r2
 8011d44:	4618      	mov	r0, r3
 8011d46:	f003 fb47 	bl	80153d8 <RegionGetPhyParam>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8011d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	4b0f      	ldr	r3, [pc, #60]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d54:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011d58:	4b0d      	ldr	r3, [pc, #52]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011d60:	4b0b      	ldr	r3, [pc, #44]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d62:	220a      	movs	r2, #10
 8011d64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011d68:	4b09      	ldr	r3, [pc, #36]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d6a:	2206      	movs	r2, #6
 8011d6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011d70:	4b07      	ldr	r3, [pc, #28]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011d76:	4a06      	ldr	r2, [pc, #24]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d78:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011d7a:	4b05      	ldr	r3, [pc, #20]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d7c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8011d80:	4b03      	ldr	r3, [pc, #12]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011d86:	4b02      	ldr	r3, [pc, #8]	; (8011d90 <LoRaMacInitialization+0x384>)
 8011d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011d8c:	e00c      	b.n	8011da8 <LoRaMacInitialization+0x39c>
 8011d8e:	bf00      	nop
 8011d90:	20000c5c 	.word	0x20000c5c
 8011d94:	20000740 	.word	0x20000740
 8011d98:	01000400 	.word	0x01000400
 8011d9c:	20000e80 	.word	0x20000e80
 8011da0:	20000e94 	.word	0x20000e94
 8011da4:	200017f4 	.word	0x200017f4
 8011da8:	4a5f      	ldr	r2, [pc, #380]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011daa:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011dac:	4b5e      	ldr	r3, [pc, #376]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011db2:	4a5d      	ldr	r2, [pc, #372]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011db4:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011db6:	4b5c      	ldr	r3, [pc, #368]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011db8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011dbc:	4a5a      	ldr	r2, [pc, #360]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011dbe:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011dc0:	4b59      	ldr	r3, [pc, #356]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011dc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011dc6:	4a58      	ldr	r2, [pc, #352]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011dc8:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011dca:	4b57      	ldr	r3, [pc, #348]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011dcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011dd0:	4a55      	ldr	r2, [pc, #340]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011dd2:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011dd4:	4b54      	ldr	r3, [pc, #336]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011dd6:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8011dda:	4b53      	ldr	r3, [pc, #332]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011ddc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011de0:	4b51      	ldr	r3, [pc, #324]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011de2:	2201      	movs	r2, #1
 8011de4:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011de8:	4a50      	ldr	r2, [pc, #320]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8011df0:	2000      	movs	r0, #0
 8011df2:	f7ff f869 	bl	8010ec8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011df6:	4b4c      	ldr	r3, [pc, #304]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011df8:	2201      	movs	r2, #1
 8011dfa:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8011dfe:	4a4b      	ldr	r2, [pc, #300]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011e06:	4b49      	ldr	r3, [pc, #292]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011e08:	2200      	movs	r2, #0
 8011e0a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8011e0e:	4b47      	ldr	r3, [pc, #284]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011e10:	2201      	movs	r2, #1
 8011e12:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011e16:	4b44      	ldr	r3, [pc, #272]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011e1c:	4b42      	ldr	r3, [pc, #264]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011e22:	2300      	movs	r3, #0
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	4b42      	ldr	r3, [pc, #264]	; (8011f30 <LoRaMacInitialization+0x524>)
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011e2e:	4841      	ldr	r0, [pc, #260]	; (8011f34 <LoRaMacInitialization+0x528>)
 8011e30:	f00b f9ca 	bl	801d1c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011e34:	2300      	movs	r3, #0
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	4b3f      	ldr	r3, [pc, #252]	; (8011f38 <LoRaMacInitialization+0x52c>)
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011e40:	483e      	ldr	r0, [pc, #248]	; (8011f3c <LoRaMacInitialization+0x530>)
 8011e42:	f00b f9c1 	bl	801d1c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011e46:	2300      	movs	r3, #0
 8011e48:	9300      	str	r3, [sp, #0]
 8011e4a:	4b3d      	ldr	r3, [pc, #244]	; (8011f40 <LoRaMacInitialization+0x534>)
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011e52:	483c      	ldr	r0, [pc, #240]	; (8011f44 <LoRaMacInitialization+0x538>)
 8011e54:	f00b f9b8 	bl	801d1c8 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011e58:	2300      	movs	r3, #0
 8011e5a:	9300      	str	r3, [sp, #0]
 8011e5c:	4b3a      	ldr	r3, [pc, #232]	; (8011f48 <LoRaMacInitialization+0x53c>)
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011e64:	4839      	ldr	r0, [pc, #228]	; (8011f4c <LoRaMacInitialization+0x540>)
 8011e66:	f00b f9af 	bl	801d1c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011e6a:	4c2f      	ldr	r4, [pc, #188]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011e6c:	463b      	mov	r3, r7
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f00a fd1e 	bl	801c8b0 <SysTimeGetMcuTime>
 8011e74:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8011e78:	463a      	mov	r2, r7
 8011e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e7e:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011e82:	4b33      	ldr	r3, [pc, #204]	; (8011f50 <LoRaMacInitialization+0x544>)
 8011e84:	2200      	movs	r2, #0
 8011e86:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011e88:	4b28      	ldr	r3, [pc, #160]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011e8a:	4a32      	ldr	r2, [pc, #200]	; (8011f54 <LoRaMacInitialization+0x548>)
 8011e8c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011e90:	4b26      	ldr	r3, [pc, #152]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011e92:	4a31      	ldr	r2, [pc, #196]	; (8011f58 <LoRaMacInitialization+0x54c>)
 8011e94:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011e98:	4b24      	ldr	r3, [pc, #144]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011e9a:	4a30      	ldr	r2, [pc, #192]	; (8011f5c <LoRaMacInitialization+0x550>)
 8011e9c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011ea0:	4b22      	ldr	r3, [pc, #136]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011ea2:	4a2f      	ldr	r2, [pc, #188]	; (8011f60 <LoRaMacInitialization+0x554>)
 8011ea4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011ea8:	4b20      	ldr	r3, [pc, #128]	; (8011f2c <LoRaMacInitialization+0x520>)
 8011eaa:	4a2e      	ldr	r2, [pc, #184]	; (8011f64 <LoRaMacInitialization+0x558>)
 8011eac:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011eb0:	4b2d      	ldr	r3, [pc, #180]	; (8011f68 <LoRaMacInitialization+0x55c>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	482d      	ldr	r0, [pc, #180]	; (8011f6c <LoRaMacInitialization+0x560>)
 8011eb6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011eb8:	482d      	ldr	r0, [pc, #180]	; (8011f70 <LoRaMacInitialization+0x564>)
 8011eba:	f7fa f9f9 	bl	800c2b0 <SecureElementInit>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d001      	beq.n	8011ec8 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ec4:	2311      	movs	r3, #17
 8011ec6:	e02b      	b.n	8011f20 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011ec8:	4817      	ldr	r0, [pc, #92]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011eca:	f002 fbc1 	bl	8014650 <LoRaMacCryptoInit>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ed4:	2311      	movs	r3, #17
 8011ed6:	e023      	b.n	8011f20 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011ed8:	f001 fcbc 	bl	8013854 <LoRaMacCommandsInit>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d001      	beq.n	8011ee6 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ee2:	2313      	movs	r3, #19
 8011ee4:	e01c      	b.n	8011f20 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011ee6:	4823      	ldr	r0, [pc, #140]	; (8011f74 <LoRaMacInitialization+0x568>)
 8011ee8:	f002 fc52 	bl	8014790 <LoRaMacCryptoSetMulticastReference>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ef2:	2311      	movs	r3, #17
 8011ef4:	e014      	b.n	8011f20 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011ef6:	4b1c      	ldr	r3, [pc, #112]	; (8011f68 <LoRaMacInitialization+0x55c>)
 8011ef8:	695b      	ldr	r3, [r3, #20]
 8011efa:	4798      	blx	r3
 8011efc:	4603      	mov	r3, r0
 8011efe:	4618      	mov	r0, r3
 8011f00:	f007 f846 	bl	8018f90 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011f04:	4b18      	ldr	r3, [pc, #96]	; (8011f68 <LoRaMacInitialization+0x55c>)
 8011f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f08:	4a07      	ldr	r2, [pc, #28]	; (8011f28 <LoRaMacInitialization+0x51c>)
 8011f0a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8011f0e:	4610      	mov	r0, r2
 8011f10:	4798      	blx	r3
    Radio.Sleep( );
 8011f12:	4b15      	ldr	r3, [pc, #84]	; (8011f68 <LoRaMacInitialization+0x55c>)
 8011f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f16:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011f18:	2001      	movs	r0, #1
 8011f1a:	f7fd fa7d 	bl	800f418 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011f1e:	2300      	movs	r3, #0
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	373c      	adds	r7, #60	; 0x3c
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd90      	pop	{r4, r7, pc}
 8011f28:	20000c5c 	.word	0x20000c5c
 8011f2c:	20000740 	.word	0x20000740
 8011f30:	0800f9a5 	.word	0x0800f9a5
 8011f34:	20000aa8 	.word	0x20000aa8
 8011f38:	0800fa35 	.word	0x0800fa35
 8011f3c:	20000ac0 	.word	0x20000ac0
 8011f40:	0800faad 	.word	0x0800faad
 8011f44:	20000ad8 	.word	0x20000ad8
 8011f48:	0800fb2d 	.word	0x0800fb2d
 8011f4c:	20000b40 	.word	0x20000b40
 8011f50:	20001884 	.word	0x20001884
 8011f54:	0800e455 	.word	0x0800e455
 8011f58:	0800e4b1 	.word	0x0800e4b1
 8011f5c:	0800e551 	.word	0x0800e551
 8011f60:	0800e525 	.word	0x0800e525
 8011f64:	0800e56d 	.word	0x0800e56d
 8011f68:	0801ebac 	.word	0x0801ebac
 8011f6c:	20000a8c 	.word	0x20000a8c
 8011f70:	20000da8 	.word	0x20000da8
 8011f74:	20000d44 	.word	0x20000d44

08011f78 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011f7c:	4b04      	ldr	r3, [pc, #16]	; (8011f90 <LoRaMacStart+0x18>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8011f84:	f7fc fb08 	bl	800e598 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	20000740 	.word	0x20000740

08011f94 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011f98:	f7fd fa06 	bl	800f3a8 <LoRaMacIsBusy>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	f083 0301 	eor.w	r3, r3, #1
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00d      	beq.n	8011fc4 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011fa8:	4b0b      	ldr	r3, [pc, #44]	; (8011fd8 <LoRaMacStop+0x44>)
 8011faa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011fae:	2b02      	cmp	r3, #2
 8011fb0:	d102      	bne.n	8011fb8 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8011fb2:	4b0a      	ldr	r3, [pc, #40]	; (8011fdc <LoRaMacStop+0x48>)
 8011fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb6:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011fb8:	4b09      	ldr	r3, [pc, #36]	; (8011fe0 <LoRaMacStop+0x4c>)
 8011fba:	2201      	movs	r2, #1
 8011fbc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e007      	b.n	8011fd4 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011fc4:	4b06      	ldr	r3, [pc, #24]	; (8011fe0 <LoRaMacStop+0x4c>)
 8011fc6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d101      	bne.n	8011fd2 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	e000      	b.n	8011fd4 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8011fd2:	2301      	movs	r3, #1
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	20000c5c 	.word	0x20000c5c
 8011fdc:	0801ebac 	.word	0x0801ebac
 8011fe0:	20000740 	.word	0x20000740

08011fe4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011fe8:	4812      	ldr	r0, [pc, #72]	; (8012034 <LoRaMacHalt+0x50>)
 8011fea:	f00b f991 	bl	801d310 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011fee:	4812      	ldr	r0, [pc, #72]	; (8012038 <LoRaMacHalt+0x54>)
 8011ff0:	f00b f98e 	bl	801d310 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011ff4:	4811      	ldr	r0, [pc, #68]	; (801203c <LoRaMacHalt+0x58>)
 8011ff6:	f00b f98b 	bl	801d310 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011ffa:	4811      	ldr	r0, [pc, #68]	; (8012040 <LoRaMacHalt+0x5c>)
 8011ffc:	f00b f988 	bl	801d310 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012000:	f001 fa8c 	bl	801351c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012004:	4b0f      	ldr	r3, [pc, #60]	; (8012044 <LoRaMacHalt+0x60>)
 8012006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012008:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801200a:	4b0f      	ldr	r3, [pc, #60]	; (8012048 <LoRaMacHalt+0x64>)
 801200c:	2200      	movs	r2, #0
 801200e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8012012:	480e      	ldr	r0, [pc, #56]	; (801204c <LoRaMacHalt+0x68>)
 8012014:	f7fd fba2 	bl	800f75c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012018:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801201c:	490b      	ldr	r1, [pc, #44]	; (801204c <LoRaMacHalt+0x68>)
 801201e:	480c      	ldr	r0, [pc, #48]	; (8012050 <LoRaMacHalt+0x6c>)
 8012020:	f006 ffdb 	bl	8018fda <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8012024:	4b08      	ldr	r3, [pc, #32]	; (8012048 <LoRaMacHalt+0x64>)
 8012026:	2201      	movs	r2, #1
 8012028:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801202c:	2300      	movs	r3, #0
}
 801202e:	4618      	mov	r0, r3
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	20000aa8 	.word	0x20000aa8
 8012038:	20000ac0 	.word	0x20000ac0
 801203c:	20000ad8 	.word	0x20000ad8
 8012040:	20000b40 	.word	0x20000b40
 8012044:	0801ebac 	.word	0x0801ebac
 8012048:	20000740 	.word	0x20000740
 801204c:	20000c5c 	.word	0x20000c5c
 8012050:	20001228 	.word	0x20001228

08012054 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012054:	b590      	push	{r4, r7, lr}
 8012056:	b08d      	sub	sp, #52	; 0x34
 8012058:	af02      	add	r7, sp, #8
 801205a:	4603      	mov	r3, r0
 801205c:	6039      	str	r1, [r7, #0]
 801205e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012060:	4b42      	ldr	r3, [pc, #264]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 8012062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012064:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012066:	4b41      	ldr	r3, [pc, #260]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 8012068:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 801206c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801206e:	4b3f      	ldr	r3, [pc, #252]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 8012070:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8012074:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8012076:	4b3e      	ldr	r3, [pc, #248]	; (8012170 <LoRaMacQueryTxPossible+0x11c>)
 8012078:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801207c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801207e:	2300      	movs	r3, #0
 8012080:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d101      	bne.n	801208c <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012088:	2303      	movs	r3, #3
 801208a:	e06b      	b.n	8012164 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801208c:	2300      	movs	r3, #0
 801208e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012090:	4b36      	ldr	r3, [pc, #216]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 8012092:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012096:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012098:	4b34      	ldr	r3, [pc, #208]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 801209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801209c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801209e:	4b33      	ldr	r3, [pc, #204]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 80120a0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80120a4:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80120a6:	4b31      	ldr	r3, [pc, #196]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 80120a8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80120ac:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80120ae:	4b2f      	ldr	r3, [pc, #188]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 80120b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80120b4:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80120b8:	4b2c      	ldr	r3, [pc, #176]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 80120ba:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80120be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80120c2:	4b2b      	ldr	r3, [pc, #172]	; (8012170 <LoRaMacQueryTxPossible+0x11c>)
 80120c4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80120c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80120cc:	4b27      	ldr	r3, [pc, #156]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 80120ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80120d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80120d6:	4b25      	ldr	r3, [pc, #148]	; (801216c <LoRaMacQueryTxPossible+0x118>)
 80120d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80120dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80120e0:	f107 040d 	add.w	r4, r7, #13
 80120e4:	f107 020e 	add.w	r2, r7, #14
 80120e8:	f107 010f 	add.w	r1, r7, #15
 80120ec:	f107 0014 	add.w	r0, r7, #20
 80120f0:	f107 0310 	add.w	r3, r7, #16
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	4623      	mov	r3, r4
 80120f8:	f001 f8da 	bl	80132b0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80120fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012100:	4618      	mov	r0, r3
 8012102:	f7fd fe59 	bl	800fdb8 <GetMaxAppPayloadWithoutFOptsLength>
 8012106:	4603      	mov	r3, r0
 8012108:	461a      	mov	r2, r3
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801210e:	f107 0308 	add.w	r3, r7, #8
 8012112:	4618      	mov	r0, r3
 8012114:	f001 fca4 	bl	8013a60 <LoRaMacCommandsGetSizeSerializedCmds>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d001      	beq.n	8012122 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801211e:	2313      	movs	r3, #19
 8012120:	e020      	b.n	8012164 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	2b0f      	cmp	r3, #15
 8012126:	d819      	bhi.n	801215c <LoRaMacQueryTxPossible+0x108>
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	785b      	ldrb	r3, [r3, #1]
 801212c:	461a      	mov	r2, r3
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	429a      	cmp	r2, r3
 8012132:	d313      	bcc.n	801215c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	785a      	ldrb	r2, [r3, #1]
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	b2db      	uxtb	r3, r3
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	b2da      	uxtb	r2, r3
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	785b      	ldrb	r3, [r3, #1]
 8012148:	4619      	mov	r1, r3
 801214a:	79fa      	ldrb	r2, [r7, #7]
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	4413      	add	r3, r2
 8012150:	4299      	cmp	r1, r3
 8012152:	d301      	bcc.n	8012158 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012154:	2300      	movs	r3, #0
 8012156:	e005      	b.n	8012164 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012158:	2308      	movs	r3, #8
 801215a:	e003      	b.n	8012164 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	2200      	movs	r2, #0
 8012160:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012162:	2308      	movs	r3, #8
    }
}
 8012164:	4618      	mov	r0, r3
 8012166:	372c      	adds	r7, #44	; 0x2c
 8012168:	46bd      	mov	sp, r7
 801216a:	bd90      	pop	{r4, r7, pc}
 801216c:	20000c5c 	.word	0x20000c5c
 8012170:	20000740 	.word	0x20000740

08012174 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012174:	b590      	push	{r4, r7, lr}
 8012176:	b087      	sub	sp, #28
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801217c:	2300      	movs	r3, #0
 801217e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d101      	bne.n	801218a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012186:	2303      	movs	r3, #3
 8012188:	e1c4      	b.n	8012514 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	2b41      	cmp	r3, #65	; 0x41
 8012190:	f200 81b9 	bhi.w	8012506 <LoRaMacMibGetRequestConfirm+0x392>
 8012194:	a201      	add	r2, pc, #4	; (adr r2, 801219c <LoRaMacMibGetRequestConfirm+0x28>)
 8012196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801219a:	bf00      	nop
 801219c:	080122a5 	.word	0x080122a5
 80121a0:	080122b1 	.word	0x080122b1
 80121a4:	080122bd 	.word	0x080122bd
 80121a8:	080122c9 	.word	0x080122c9
 80121ac:	080122d5 	.word	0x080122d5
 80121b0:	080122e1 	.word	0x080122e1
 80121b4:	080122ed 	.word	0x080122ed
 80121b8:	08012507 	.word	0x08012507
 80121bc:	08012507 	.word	0x08012507
 80121c0:	08012507 	.word	0x08012507
 80121c4:	08012507 	.word	0x08012507
 80121c8:	08012507 	.word	0x08012507
 80121cc:	08012507 	.word	0x08012507
 80121d0:	08012507 	.word	0x08012507
 80121d4:	08012507 	.word	0x08012507
 80121d8:	08012301 	.word	0x08012301
 80121dc:	0801230d 	.word	0x0801230d
 80121e0:	08012319 	.word	0x08012319
 80121e4:	0801233b 	.word	0x0801233b
 80121e8:	0801234d 	.word	0x0801234d
 80121ec:	0801235f 	.word	0x0801235f
 80121f0:	08012371 	.word	0x08012371
 80121f4:	080123a5 	.word	0x080123a5
 80121f8:	08012383 	.word	0x08012383
 80121fc:	080123c7 	.word	0x080123c7
 8012200:	080123d3 	.word	0x080123d3
 8012204:	080123dd 	.word	0x080123dd
 8012208:	080123e7 	.word	0x080123e7
 801220c:	080123f1 	.word	0x080123f1
 8012210:	080123fb 	.word	0x080123fb
 8012214:	08012405 	.word	0x08012405
 8012218:	08012431 	.word	0x08012431
 801221c:	0801243d 	.word	0x0801243d
 8012220:	08012455 	.word	0x08012455
 8012224:	08012449 	.word	0x08012449
 8012228:	08012461 	.word	0x08012461
 801222c:	0801246b 	.word	0x0801246b
 8012230:	08012477 	.word	0x08012477
 8012234:	08012493 	.word	0x08012493
 8012238:	08012483 	.word	0x08012483
 801223c:	0801248b 	.word	0x0801248b
 8012240:	08012507 	.word	0x08012507
 8012244:	0801249f 	.word	0x0801249f
 8012248:	08012507 	.word	0x08012507
 801224c:	08012507 	.word	0x08012507
 8012250:	08012507 	.word	0x08012507
 8012254:	08012507 	.word	0x08012507
 8012258:	08012507 	.word	0x08012507
 801225c:	08012507 	.word	0x08012507
 8012260:	08012507 	.word	0x08012507
 8012264:	08012507 	.word	0x08012507
 8012268:	08012507 	.word	0x08012507
 801226c:	08012507 	.word	0x08012507
 8012270:	08012507 	.word	0x08012507
 8012274:	08012507 	.word	0x08012507
 8012278:	08012507 	.word	0x08012507
 801227c:	08012507 	.word	0x08012507
 8012280:	08012507 	.word	0x08012507
 8012284:	080124b3 	.word	0x080124b3
 8012288:	080124bf 	.word	0x080124bf
 801228c:	080124cb 	.word	0x080124cb
 8012290:	080124d7 	.word	0x080124d7
 8012294:	080124e3 	.word	0x080124e3
 8012298:	080124ef 	.word	0x080124ef
 801229c:	080124fb 	.word	0x080124fb
 80122a0:	08012501 	.word	0x08012501
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80122a4:	4b9d      	ldr	r3, [pc, #628]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122a6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	711a      	strb	r2, [r3, #4]
            break;
 80122ae:	e130      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80122b0:	4b9a      	ldr	r3, [pc, #616]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122b2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	711a      	strb	r2, [r3, #4]
            break;
 80122ba:	e12a      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7fa fab5 	bl	800c830 <SecureElementGetDevEui>
            break;
 80122c6:	e124      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7fa fadf 	bl	800c890 <SecureElementGetJoinEui>
            break;
 80122d2:	e11e      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80122d4:	4b91      	ldr	r3, [pc, #580]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122d6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	711a      	strb	r2, [r3, #4]
            break;
 80122de:	e118      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80122e0:	4b8e      	ldr	r3, [pc, #568]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	605a      	str	r2, [r3, #4]
            break;
 80122ea:	e112      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80122ec:	4b8b      	ldr	r3, [pc, #556]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122ee:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	3304      	adds	r3, #4
 80122f6:	4619      	mov	r1, r3
 80122f8:	4610      	mov	r0, r2
 80122fa:	f7fa fafb 	bl	800c8f4 <SecureElementGetDevAddr>
            break;
 80122fe:	e108      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012300:	4b86      	ldr	r3, [pc, #536]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012302:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	711a      	strb	r2, [r3, #4]
            break;
 801230a:	e102      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801230c:	4b83      	ldr	r3, [pc, #524]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801230e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	711a      	strb	r2, [r3, #4]
            break;
 8012316:	e0fc      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012318:	231c      	movs	r3, #28
 801231a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801231c:	4b7f      	ldr	r3, [pc, #508]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801231e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012322:	f107 0210 	add.w	r2, r7, #16
 8012326:	4611      	mov	r1, r2
 8012328:	4618      	mov	r0, r3
 801232a:	f003 f855 	bl	80153d8 <RegionGetPhyParam>
 801232e:	4603      	mov	r3, r0
 8012330:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	605a      	str	r2, [r3, #4]
            break;
 8012338:	e0eb      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4a77      	ldr	r2, [pc, #476]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801233e:	3304      	adds	r3, #4
 8012340:	326c      	adds	r2, #108	; 0x6c
 8012342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012346:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801234a:	e0e2      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	4a73      	ldr	r2, [pc, #460]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012350:	3304      	adds	r3, #4
 8012352:	32b4      	adds	r2, #180	; 0xb4
 8012354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012358:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801235c:	e0d9      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4a6e      	ldr	r2, [pc, #440]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012362:	3304      	adds	r3, #4
 8012364:	3274      	adds	r2, #116	; 0x74
 8012366:	e892 0003 	ldmia.w	r2, {r0, r1}
 801236a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801236e:	e0d0      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	4a6a      	ldr	r2, [pc, #424]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012374:	3304      	adds	r3, #4
 8012376:	32bc      	adds	r2, #188	; 0xbc
 8012378:	e892 0003 	ldmia.w	r2, {r0, r1}
 801237c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012380:	e0c7      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012382:	231a      	movs	r3, #26
 8012384:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012386:	4b65      	ldr	r3, [pc, #404]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012388:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801238c:	f107 0210 	add.w	r2, r7, #16
 8012390:	4611      	mov	r1, r2
 8012392:	4618      	mov	r0, r3
 8012394:	f003 f820 	bl	80153d8 <RegionGetPhyParam>
 8012398:	4603      	mov	r3, r0
 801239a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801239c:	68fa      	ldr	r2, [r7, #12]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	605a      	str	r2, [r3, #4]
            break;
 80123a2:	e0b6      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80123a4:	2319      	movs	r3, #25
 80123a6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80123a8:	4b5c      	ldr	r3, [pc, #368]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80123ae:	f107 0210 	add.w	r2, r7, #16
 80123b2:	4611      	mov	r1, r2
 80123b4:	4618      	mov	r0, r3
 80123b6:	f003 f80f 	bl	80153d8 <RegionGetPhyParam>
 80123ba:	4603      	mov	r3, r0
 80123bc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	605a      	str	r2, [r3, #4]
            break;
 80123c4:	e0a5      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80123c6:	4b55      	ldr	r3, [pc, #340]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123c8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	711a      	strb	r2, [r3, #4]
            break;
 80123d0:	e09f      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80123d2:	4b52      	ldr	r3, [pc, #328]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	605a      	str	r2, [r3, #4]
            break;
 80123da:	e09a      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80123dc:	4b4f      	ldr	r3, [pc, #316]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	605a      	str	r2, [r3, #4]
            break;
 80123e4:	e095      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80123e6:	4b4d      	ldr	r3, [pc, #308]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	605a      	str	r2, [r3, #4]
            break;
 80123ee:	e090      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80123f0:	4b4a      	ldr	r3, [pc, #296]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	605a      	str	r2, [r3, #4]
            break;
 80123f8:	e08b      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80123fa:	4b48      	ldr	r3, [pc, #288]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	605a      	str	r2, [r3, #4]
            break;
 8012402:	e086      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012404:	2302      	movs	r3, #2
 8012406:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012408:	4b44      	ldr	r3, [pc, #272]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801240a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801240e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012410:	4b42      	ldr	r3, [pc, #264]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012412:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012416:	f107 0210 	add.w	r2, r7, #16
 801241a:	4611      	mov	r1, r2
 801241c:	4618      	mov	r0, r3
 801241e:	f002 ffdb 	bl	80153d8 <RegionGetPhyParam>
 8012422:	4603      	mov	r3, r0
 8012424:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	b25a      	sxtb	r2, r3
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	711a      	strb	r2, [r3, #4]
            break;
 801242e:	e070      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012430:	4b3a      	ldr	r3, [pc, #232]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012432:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	711a      	strb	r2, [r3, #4]
            break;
 801243a:	e06a      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801243c:	4b37      	ldr	r3, [pc, #220]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801243e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	711a      	strb	r2, [r3, #4]
            break;
 8012446:	e064      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012448:	4b34      	ldr	r3, [pc, #208]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801244a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	711a      	strb	r2, [r3, #4]
            break;
 8012452:	e05e      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012454:	4b31      	ldr	r3, [pc, #196]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012456:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	711a      	strb	r2, [r3, #4]
            break;
 801245e:	e058      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012460:	4b2e      	ldr	r3, [pc, #184]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	605a      	str	r2, [r3, #4]
            break;
 8012468:	e053      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801246a:	4b2c      	ldr	r3, [pc, #176]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801246c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	711a      	strb	r2, [r3, #4]
            break;
 8012474:	e04d      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012476:	4b29      	ldr	r3, [pc, #164]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012478:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	605a      	str	r2, [r3, #4]
            break;
 8012480:	e047      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	4a25      	ldr	r2, [pc, #148]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012486:	605a      	str	r2, [r3, #4]
            break;
 8012488:	e043      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4a24      	ldr	r2, [pc, #144]	; (8012520 <LoRaMacMibGetRequestConfirm+0x3ac>)
 801248e:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8012490:	e03f      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012492:	4b22      	ldr	r3, [pc, #136]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012494:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	605a      	str	r2, [r3, #4]
            break;
 801249c:	e039      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4a1e      	ldr	r2, [pc, #120]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124a2:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 80124a6:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80124a8:	687c      	ldr	r4, [r7, #4]
 80124aa:	f003 f9a3 	bl	80157f4 <RegionGetVersion>
 80124ae:	60a0      	str	r0, [r4, #8]
            break;
 80124b0:	e02f      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80124b2:	4b1a      	ldr	r3, [pc, #104]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	605a      	str	r2, [r3, #4]
            break;
 80124bc:	e029      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80124be:	4b17      	ldr	r3, [pc, #92]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124c0:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	711a      	strb	r2, [r3, #4]
            break;
 80124c8:	e023      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80124ca:	4b14      	ldr	r3, [pc, #80]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124cc:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	809a      	strh	r2, [r3, #4]
            break;
 80124d4:	e01d      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80124d6:	4b11      	ldr	r3, [pc, #68]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124d8:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	809a      	strh	r2, [r3, #4]
            break;
 80124e0:	e017      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80124e2:	4b0e      	ldr	r3, [pc, #56]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124e4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	809a      	strh	r2, [r3, #4]
            break;
 80124ec:	e011      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80124ee:	4b0b      	ldr	r3, [pc, #44]	; (801251c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124f0:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	809a      	strh	r2, [r3, #4]
            break;
 80124f8:	e00b      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80124fa:	2318      	movs	r3, #24
 80124fc:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80124fe:	e008      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012500:	2318      	movs	r3, #24
 8012502:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012504:	e005      	b.n	8012512 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f001 f81f 	bl	801354a <LoRaMacClassBMibGetRequestConfirm>
 801250c:	4603      	mov	r3, r0
 801250e:	75fb      	strb	r3, [r7, #23]
            break;
 8012510:	bf00      	nop
        }
    }
    return status;
 8012512:	7dfb      	ldrb	r3, [r7, #23]
}
 8012514:	4618      	mov	r0, r3
 8012516:	371c      	adds	r7, #28
 8012518:	46bd      	mov	sp, r7
 801251a:	bd90      	pop	{r4, r7, pc}
 801251c:	20000c5c 	.word	0x20000c5c
 8012520:	20001228 	.word	0x20001228

08012524 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b086      	sub	sp, #24
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801252c:	2300      	movs	r3, #0
 801252e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d101      	bne.n	801253a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012536:	2303      	movs	r3, #3
 8012538:	e396      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801253a:	4bbd      	ldr	r3, [pc, #756]	; (8012830 <LoRaMacMibSetRequestConfirm+0x30c>)
 801253c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012540:	f003 0302 	and.w	r3, r3, #2
 8012544:	2b00      	cmp	r3, #0
 8012546:	d001      	beq.n	801254c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012548:	2301      	movs	r3, #1
 801254a:	e38d      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	2b41      	cmp	r3, #65	; 0x41
 8012552:	f200 835d 	bhi.w	8012c10 <LoRaMacMibSetRequestConfirm+0x6ec>
 8012556:	a201      	add	r2, pc, #4	; (adr r2, 801255c <LoRaMacMibSetRequestConfirm+0x38>)
 8012558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801255c:	08012665 	.word	0x08012665
 8012560:	08012675 	.word	0x08012675
 8012564:	0801268f 	.word	0x0801268f
 8012568:	080126a7 	.word	0x080126a7
 801256c:	080126bf 	.word	0x080126bf
 8012570:	080126cb 	.word	0x080126cb
 8012574:	080126d7 	.word	0x080126d7
 8012578:	08012701 	.word	0x08012701
 801257c:	08012727 	.word	0x08012727
 8012580:	0801274d 	.word	0x0801274d
 8012584:	08012773 	.word	0x08012773
 8012588:	08012799 	.word	0x08012799
 801258c:	080127bf 	.word	0x080127bf
 8012590:	080127e5 	.word	0x080127e5
 8012594:	0801280b 	.word	0x0801280b
 8012598:	08012839 	.word	0x08012839
 801259c:	08012859 	.word	0x08012859
 80125a0:	08012c11 	.word	0x08012c11
 80125a4:	08012865 	.word	0x08012865
 80125a8:	080128d5 	.word	0x080128d5
 80125ac:	08012915 	.word	0x08012915
 80125b0:	08012977 	.word	0x08012977
 80125b4:	080129e7 	.word	0x080129e7
 80125b8:	080129b7 	.word	0x080129b7
 80125bc:	08012a17 	.word	0x08012a17
 80125c0:	08012a39 	.word	0x08012a39
 80125c4:	08012a43 	.word	0x08012a43
 80125c8:	08012a4d 	.word	0x08012a4d
 80125cc:	08012a57 	.word	0x08012a57
 80125d0:	08012a61 	.word	0x08012a61
 80125d4:	08012c11 	.word	0x08012c11
 80125d8:	08012a6b 	.word	0x08012a6b
 80125dc:	08012a9d 	.word	0x08012a9d
 80125e0:	08012b11 	.word	0x08012b11
 80125e4:	08012ad7 	.word	0x08012ad7
 80125e8:	08012b43 	.word	0x08012b43
 80125ec:	08012b59 	.word	0x08012b59
 80125f0:	08012b71 	.word	0x08012b71
 80125f4:	08012b7d 	.word	0x08012b7d
 80125f8:	08012b89 	.word	0x08012b89
 80125fc:	08012c11 	.word	0x08012c11
 8012600:	08012b93 	.word	0x08012b93
 8012604:	08012c11 	.word	0x08012c11
 8012608:	08012c11 	.word	0x08012c11
 801260c:	08012c11 	.word	0x08012c11
 8012610:	08012c11 	.word	0x08012c11
 8012614:	08012c11 	.word	0x08012c11
 8012618:	08012c11 	.word	0x08012c11
 801261c:	08012c11 	.word	0x08012c11
 8012620:	08012c11 	.word	0x08012c11
 8012624:	08012c11 	.word	0x08012c11
 8012628:	08012c11 	.word	0x08012c11
 801262c:	08012c11 	.word	0x08012c11
 8012630:	08012c11 	.word	0x08012c11
 8012634:	08012c11 	.word	0x08012c11
 8012638:	08012c11 	.word	0x08012c11
 801263c:	08012c11 	.word	0x08012c11
 8012640:	08012c11 	.word	0x08012c11
 8012644:	08012bbd 	.word	0x08012bbd
 8012648:	08012bc9 	.word	0x08012bc9
 801264c:	08012bd5 	.word	0x08012bd5
 8012650:	08012be1 	.word	0x08012be1
 8012654:	08012bed 	.word	0x08012bed
 8012658:	08012bf9 	.word	0x08012bf9
 801265c:	08012c05 	.word	0x08012c05
 8012660:	08012c0b 	.word	0x08012c0b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	791b      	ldrb	r3, [r3, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	f7fd fabb 	bl	800fbe4 <SwitchClass>
 801266e:	4603      	mov	r3, r0
 8012670:	75fb      	strb	r3, [r7, #23]
            break;
 8012672:	e2ee      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	791b      	ldrb	r3, [r3, #4]
 8012678:	2b02      	cmp	r3, #2
 801267a:	d005      	beq.n	8012688 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	791a      	ldrb	r2, [r3, #4]
 8012680:	4b6c      	ldr	r3, [pc, #432]	; (8012834 <LoRaMacMibSetRequestConfirm+0x310>)
 8012682:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012686:	e2e4      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012688:	2303      	movs	r3, #3
 801268a:	75fb      	strb	r3, [r7, #23]
            break;
 801268c:	e2e1      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	4618      	mov	r0, r3
 8012694:	f7fa f8b4 	bl	800c800 <SecureElementSetDevEui>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	f000 82be 	beq.w	8012c1c <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126a0:	2303      	movs	r3, #3
 80126a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126a4:	e2ba      	b.n	8012c1c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fa f8d8 	bl	800c860 <SecureElementSetJoinEui>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	f000 82b4 	beq.w	8012c20 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126b8:	2303      	movs	r3, #3
 80126ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126bc:	e2b0      	b.n	8012c20 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	791a      	ldrb	r2, [r3, #4]
 80126c2:	4b5c      	ldr	r3, [pc, #368]	; (8012834 <LoRaMacMibSetRequestConfirm+0x310>)
 80126c4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 80126c8:	e2c3      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	4a59      	ldr	r2, [pc, #356]	; (8012834 <LoRaMacMibSetRequestConfirm+0x310>)
 80126d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80126d4:	e2bd      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80126d6:	4b57      	ldr	r3, [pc, #348]	; (8012834 <LoRaMacMibSetRequestConfirm+0x310>)
 80126d8:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	4619      	mov	r1, r3
 80126e2:	4610      	mov	r0, r2
 80126e4:	f7fa f8ec 	bl	800c8c0 <SecureElementSetDevAddr>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d002      	beq.n	80126f4 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126ee:	2303      	movs	r3, #3
 80126f0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80126f2:	e2ae      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	4a4e      	ldr	r2, [pc, #312]	; (8012834 <LoRaMacMibSetRequestConfirm+0x310>)
 80126fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80126fe:	e2a8      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d00b      	beq.n	8012720 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	4619      	mov	r1, r3
 801270e:	2000      	movs	r0, #0
 8012710:	f002 f868 	bl	80147e4 <LoRaMacCryptoSetKey>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	f000 8284 	beq.w	8012c24 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801271c:	2311      	movs	r3, #17
 801271e:	e2a3      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012720:	2303      	movs	r3, #3
 8012722:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012724:	e27e      	b.n	8012c24 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d00b      	beq.n	8012746 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	4619      	mov	r1, r3
 8012734:	2001      	movs	r0, #1
 8012736:	f002 f855 	bl	80147e4 <LoRaMacCryptoSetKey>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	f000 8273 	beq.w	8012c28 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012742:	2311      	movs	r3, #17
 8012744:	e290      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012746:	2303      	movs	r3, #3
 8012748:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801274a:	e26d      	b.n	8012c28 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00b      	beq.n	801276c <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	4619      	mov	r1, r3
 801275a:	2008      	movs	r0, #8
 801275c:	f002 f842 	bl	80147e4 <LoRaMacCryptoSetKey>
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	f000 8262 	beq.w	8012c2c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012768:	2311      	movs	r3, #17
 801276a:	e27d      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801276c:	2303      	movs	r3, #3
 801276e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012770:	e25c      	b.n	8012c2c <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d00b      	beq.n	8012792 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	4619      	mov	r1, r3
 8012780:	2009      	movs	r0, #9
 8012782:	f002 f82f 	bl	80147e4 <LoRaMacCryptoSetKey>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	f000 8251 	beq.w	8012c30 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801278e:	2311      	movs	r3, #17
 8012790:	e26a      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012792:	2303      	movs	r3, #3
 8012794:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012796:	e24b      	b.n	8012c30 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d00b      	beq.n	80127b8 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	4619      	mov	r1, r3
 80127a6:	200c      	movs	r0, #12
 80127a8:	f002 f81c 	bl	80147e4 <LoRaMacCryptoSetKey>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	f000 8240 	beq.w	8012c34 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80127b4:	2311      	movs	r3, #17
 80127b6:	e257      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127b8:	2303      	movs	r3, #3
 80127ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127bc:	e23a      	b.n	8012c34 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d00b      	beq.n	80127de <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	4619      	mov	r1, r3
 80127cc:	200d      	movs	r0, #13
 80127ce:	f002 f809 	bl	80147e4 <LoRaMacCryptoSetKey>
 80127d2:	4603      	mov	r3, r0
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f000 822f 	beq.w	8012c38 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80127da:	2311      	movs	r3, #17
 80127dc:	e244      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127de:	2303      	movs	r3, #3
 80127e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127e2:	e229      	b.n	8012c38 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00b      	beq.n	8012804 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	4619      	mov	r1, r3
 80127f2:	200e      	movs	r0, #14
 80127f4:	f001 fff6 	bl	80147e4 <LoRaMacCryptoSetKey>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	f000 821e 	beq.w	8012c3c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012800:	2311      	movs	r3, #17
 8012802:	e231      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012804:	2303      	movs	r3, #3
 8012806:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012808:	e218      	b.n	8012c3c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d00b      	beq.n	801282a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	4619      	mov	r1, r3
 8012818:	200f      	movs	r0, #15
 801281a:	f001 ffe3 	bl	80147e4 <LoRaMacCryptoSetKey>
 801281e:	4603      	mov	r3, r0
 8012820:	2b00      	cmp	r3, #0
 8012822:	f000 820d 	beq.w	8012c40 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012826:	2311      	movs	r3, #17
 8012828:	e21e      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801282a:	2303      	movs	r3, #3
 801282c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801282e:	e207      	b.n	8012c40 <LoRaMacMibSetRequestConfirm+0x71c>
 8012830:	20000740 	.word	0x20000740
 8012834:	20000c5c 	.word	0x20000c5c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	791a      	ldrb	r2, [r3, #4]
 801283c:	4bb2      	ldr	r3, [pc, #712]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801283e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012842:	4bb2      	ldr	r3, [pc, #712]	; (8012b0c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012846:	4ab0      	ldr	r2, [pc, #704]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012848:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801284c:	4610      	mov	r0, r2
 801284e:	4798      	blx	r3
            Radio.Sleep( );
 8012850:	4bae      	ldr	r3, [pc, #696]	; (8012b0c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012854:	4798      	blx	r3
            break;
 8012856:	e1fc      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	791a      	ldrb	r2, [r3, #4]
 801285c:	4baa      	ldr	r3, [pc, #680]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801285e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8012862:	e1f6      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	7a1b      	ldrb	r3, [r3, #8]
 8012868:	b25b      	sxtb	r3, r3
 801286a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801286c:	4ba6      	ldr	r3, [pc, #664]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801286e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012872:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012874:	4ba4      	ldr	r3, [pc, #656]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012876:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801287a:	f107 0108 	add.w	r1, r7, #8
 801287e:	2207      	movs	r2, #7
 8012880:	4618      	mov	r0, r3
 8012882:	f002 fdf7 	bl	8015474 <RegionVerify>
 8012886:	4603      	mov	r3, r0
 8012888:	f083 0301 	eor.w	r3, r3, #1
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b00      	cmp	r3, #0
 8012890:	d002      	beq.n	8012898 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012892:	2303      	movs	r3, #3
 8012894:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8012896:	e1dc      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801289e:	4b9a      	ldr	r3, [pc, #616]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128a4:	f107 0108 	add.w	r1, r7, #8
 80128a8:	2200      	movs	r2, #0
 80128aa:	4618      	mov	r0, r3
 80128ac:	f002 fde2 	bl	8015474 <RegionVerify>
 80128b0:	4603      	mov	r3, r0
 80128b2:	f083 0301 	eor.w	r3, r3, #1
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d002      	beq.n	80128c2 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128bc:	2303      	movs	r3, #3
 80128be:	75fb      	strb	r3, [r7, #23]
            break;
 80128c0:	e1c7      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80128c2:	4b91      	ldr	r3, [pc, #580]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	336c      	adds	r3, #108	; 0x6c
 80128c8:	3204      	adds	r2, #4
 80128ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128ce:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80128d2:	e1be      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	7a1b      	ldrb	r3, [r3, #8]
 80128d8:	b25b      	sxtb	r3, r3
 80128da:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80128dc:	4b8a      	ldr	r3, [pc, #552]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128de:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80128e2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80128e4:	4b88      	ldr	r3, [pc, #544]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128ea:	f107 0108 	add.w	r1, r7, #8
 80128ee:	2207      	movs	r2, #7
 80128f0:	4618      	mov	r0, r3
 80128f2:	f002 fdbf 	bl	8015474 <RegionVerify>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d008      	beq.n	801290e <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80128fc:	4b82      	ldr	r3, [pc, #520]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	33b4      	adds	r3, #180	; 0xb4
 8012902:	3204      	adds	r2, #4
 8012904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012908:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801290c:	e1a1      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801290e:	2303      	movs	r3, #3
 8012910:	75fb      	strb	r3, [r7, #23]
            break;
 8012912:	e19e      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	7a1b      	ldrb	r3, [r3, #8]
 8012918:	b25b      	sxtb	r3, r3
 801291a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801291c:	4b7a      	ldr	r3, [pc, #488]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801291e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012922:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012924:	4b78      	ldr	r3, [pc, #480]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012926:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801292a:	f107 0108 	add.w	r1, r7, #8
 801292e:	2207      	movs	r2, #7
 8012930:	4618      	mov	r0, r3
 8012932:	f002 fd9f 	bl	8015474 <RegionVerify>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d019      	beq.n	8012970 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801293c:	4b72      	ldr	r3, [pc, #456]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	3374      	adds	r3, #116	; 0x74
 8012942:	3204      	adds	r2, #4
 8012944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012948:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801294c:	4b6e      	ldr	r3, [pc, #440]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801294e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012952:	2b02      	cmp	r3, #2
 8012954:	f040 8176 	bne.w	8012c44 <LoRaMacMibSetRequestConfirm+0x720>
 8012958:	4b6b      	ldr	r3, [pc, #428]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801295a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 8170 	beq.w	8012c44 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012964:	4b69      	ldr	r3, [pc, #420]	; (8012b0c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012968:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801296a:	f7fe fc1b 	bl	80111a4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801296e:	e169      	b.n	8012c44 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012970:	2303      	movs	r3, #3
 8012972:	75fb      	strb	r3, [r7, #23]
            break;
 8012974:	e166      	b.n	8012c44 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	7a1b      	ldrb	r3, [r3, #8]
 801297a:	b25b      	sxtb	r3, r3
 801297c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801297e:	4b62      	ldr	r3, [pc, #392]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012980:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012984:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012986:	4b60      	ldr	r3, [pc, #384]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012988:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801298c:	f107 0108 	add.w	r1, r7, #8
 8012990:	2207      	movs	r2, #7
 8012992:	4618      	mov	r0, r3
 8012994:	f002 fd6e 	bl	8015474 <RegionVerify>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d008      	beq.n	80129b0 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801299e:	4b5a      	ldr	r3, [pc, #360]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	33bc      	adds	r3, #188	; 0xbc
 80129a4:	3204      	adds	r2, #4
 80129a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129aa:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129ae:	e150      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129b0:	2303      	movs	r3, #3
 80129b2:	75fb      	strb	r3, [r7, #23]
            break;
 80129b4:	e14d      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80129bc:	2301      	movs	r3, #1
 80129be:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80129c0:	4b51      	ldr	r3, [pc, #324]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129c6:	f107 020c 	add.w	r2, r7, #12
 80129ca:	4611      	mov	r1, r2
 80129cc:	4618      	mov	r0, r3
 80129ce:	f002 fd89 	bl	80154e4 <RegionChanMaskSet>
 80129d2:	4603      	mov	r3, r0
 80129d4:	f083 0301 	eor.w	r3, r3, #1
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 8134 	beq.w	8012c48 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129e0:	2303      	movs	r3, #3
 80129e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80129e4:	e130      	b.n	8012c48 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80129ec:	2300      	movs	r3, #0
 80129ee:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80129f0:	4b45      	ldr	r3, [pc, #276]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129f6:	f107 020c 	add.w	r2, r7, #12
 80129fa:	4611      	mov	r1, r2
 80129fc:	4618      	mov	r0, r3
 80129fe:	f002 fd71 	bl	80154e4 <RegionChanMaskSet>
 8012a02:	4603      	mov	r3, r0
 8012a04:	f083 0301 	eor.w	r3, r3, #1
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f000 811e 	beq.w	8012c4c <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a10:	2303      	movs	r3, #3
 8012a12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012a14:	e11a      	b.n	8012c4c <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	791b      	ldrb	r3, [r3, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d009      	beq.n	8012a32 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012a22:	2b0f      	cmp	r3, #15
 8012a24:	d805      	bhi.n	8012a32 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	791a      	ldrb	r2, [r3, #4]
 8012a2a:	4b37      	ldr	r3, [pc, #220]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a2c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a30:	e10f      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a32:	2303      	movs	r3, #3
 8012a34:	75fb      	strb	r3, [r7, #23]
            break;
 8012a36:	e10c      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	4a32      	ldr	r2, [pc, #200]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a3e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8012a40:	e107      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	4a30      	ldr	r2, [pc, #192]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a48:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8012a4a:	e102      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	4a2d      	ldr	r2, [pc, #180]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a52:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8012a54:	e0fd      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	4a2b      	ldr	r2, [pc, #172]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a5c:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8012a5e:	e0f8      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	4a28      	ldr	r2, [pc, #160]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a66:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8012a68:	e0f3      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a70:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012a72:	4b25      	ldr	r3, [pc, #148]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a78:	f107 0108 	add.w	r1, r7, #8
 8012a7c:	2206      	movs	r2, #6
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f002 fcf8 	bl	8015474 <RegionVerify>
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d005      	beq.n	8012a96 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012a8a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a8e:	4b1e      	ldr	r3, [pc, #120]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a90:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a94:	e0dd      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a96:	2303      	movs	r3, #3
 8012a98:	75fb      	strb	r3, [r7, #23]
            break;
 8012a9a:	e0da      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012aa2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012aa4:	4b18      	ldr	r3, [pc, #96]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012aa6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012aaa:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012aac:	4b16      	ldr	r3, [pc, #88]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012aae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ab2:	f107 0108 	add.w	r1, r7, #8
 8012ab6:	2205      	movs	r2, #5
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f002 fcdb 	bl	8015474 <RegionVerify>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d005      	beq.n	8012ad0 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012ac4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012ac8:	4b0f      	ldr	r3, [pc, #60]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ace:	e0c0      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ad0:	2303      	movs	r3, #3
 8012ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8012ad4:	e0bd      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012adc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012ade:	4b0a      	ldr	r3, [pc, #40]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012ae0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ae4:	f107 0108 	add.w	r1, r7, #8
 8012ae8:	220a      	movs	r2, #10
 8012aea:	4618      	mov	r0, r3
 8012aec:	f002 fcc2 	bl	8015474 <RegionVerify>
 8012af0:	4603      	mov	r3, r0
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d005      	beq.n	8012b02 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012af6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012afa:	4b03      	ldr	r3, [pc, #12]	; (8012b08 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012afc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012b00:	e0a7      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b02:	2303      	movs	r3, #3
 8012b04:	75fb      	strb	r3, [r7, #23]
            break;
 8012b06:	e0a4      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
 8012b08:	20000c5c 	.word	0x20000c5c
 8012b0c:	0801ebac 	.word	0x0801ebac
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012b16:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012b18:	4b55      	ldr	r3, [pc, #340]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012b1e:	f107 0108 	add.w	r1, r7, #8
 8012b22:	2209      	movs	r2, #9
 8012b24:	4618      	mov	r0, r3
 8012b26:	f002 fca5 	bl	8015474 <RegionVerify>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d005      	beq.n	8012b3c <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012b30:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012b34:	4b4e      	ldr	r3, [pc, #312]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012b3a:	e08a      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b3c:	2303      	movs	r3, #3
 8012b3e:	75fb      	strb	r3, [r7, #23]
            break;
 8012b40:	e087      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	4a4a      	ldr	r2, [pc, #296]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8012b4c:	4b48      	ldr	r3, [pc, #288]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012b52:	4a47      	ldr	r2, [pc, #284]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b54:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012b56:	e07c      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	791a      	ldrb	r2, [r3, #4]
 8012b5c:	4b44      	ldr	r3, [pc, #272]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8012b62:	4b43      	ldr	r3, [pc, #268]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b64:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8012b68:	4b41      	ldr	r3, [pc, #260]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8012b6e:	e070      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	4a3e      	ldr	r2, [pc, #248]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8012b7a:	e06a      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	4a3b      	ldr	r2, [pc, #236]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b82:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8012b86:	e064      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012b88:	f7fe fd40 	bl	801160c <RestoreNvmData>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	75fb      	strb	r3, [r7, #23]
            break;
 8012b90:	e05f      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	799b      	ldrb	r3, [r3, #6]
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d80d      	bhi.n	8012bb6 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012b9a:	4a35      	ldr	r2, [pc, #212]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	6858      	ldr	r0, [r3, #4]
 8012ba8:	f001 fd7e 	bl	80146a8 <LoRaMacCryptoSetLrWanVersion>
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d04e      	beq.n	8012c50 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012bb2:	2311      	movs	r3, #17
 8012bb4:	e058      	b.n	8012c68 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012bb6:	2303      	movs	r3, #3
 8012bb8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012bba:	e049      	b.n	8012c50 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	4a2b      	ldr	r2, [pc, #172]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8012bc6:	e044      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	791a      	ldrb	r2, [r3, #4]
 8012bcc:	4b28      	ldr	r3, [pc, #160]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012bce:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8012bd2:	e03e      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	889a      	ldrh	r2, [r3, #4]
 8012bd8:	4b25      	ldr	r3, [pc, #148]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012bda:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8012bde:	e038      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	889a      	ldrh	r2, [r3, #4]
 8012be4:	4b22      	ldr	r3, [pc, #136]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012be6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8012bea:	e032      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	889a      	ldrh	r2, [r3, #4]
 8012bf0:	4b1f      	ldr	r3, [pc, #124]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012bf2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8012bf6:	e02c      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	889a      	ldrh	r2, [r3, #4]
 8012bfc:	4b1c      	ldr	r3, [pc, #112]	; (8012c70 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012bfe:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8012c02:	e026      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012c04:	2318      	movs	r3, #24
 8012c06:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012c08:	e023      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012c0a:	2318      	movs	r3, #24
 8012c0c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012c0e:	e020      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f000 fca4 	bl	801355e <LoRaMacMibClassBSetRequestConfirm>
 8012c16:	4603      	mov	r3, r0
 8012c18:	75fb      	strb	r3, [r7, #23]
            break;
 8012c1a:	e01a      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c1c:	bf00      	nop
 8012c1e:	e018      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c20:	bf00      	nop
 8012c22:	e016      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c24:	bf00      	nop
 8012c26:	e014      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c28:	bf00      	nop
 8012c2a:	e012      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c2c:	bf00      	nop
 8012c2e:	e010      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c30:	bf00      	nop
 8012c32:	e00e      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c34:	bf00      	nop
 8012c36:	e00c      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c38:	bf00      	nop
 8012c3a:	e00a      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c3c:	bf00      	nop
 8012c3e:	e008      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c40:	bf00      	nop
 8012c42:	e006      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c44:	bf00      	nop
 8012c46:	e004      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c48:	bf00      	nop
 8012c4a:	e002      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c4c:	bf00      	nop
 8012c4e:	e000      	b.n	8012c52 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012c50:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8012c52:	7dfb      	ldrb	r3, [r7, #23]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d106      	bne.n	8012c66 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012c58:	4a06      	ldr	r2, [pc, #24]	; (8012c74 <LoRaMacMibSetRequestConfirm+0x750>)
 8012c5a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012c5e:	f043 0320 	orr.w	r3, r3, #32
 8012c62:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3718      	adds	r7, #24
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	20000c5c 	.word	0x20000c5c
 8012c74:	20000740 	.word	0x20000740

08012c78 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b08a      	sub	sp, #40	; 0x28
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012c80:	2302      	movs	r3, #2
 8012c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012c86:	2300      	movs	r3, #0
 8012c88:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d101      	bne.n	8012c94 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c90:	2303      	movs	r3, #3
 8012c92:	e17e      	b.n	8012f92 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2200      	movs	r2, #0
 8012c98:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012c9a:	f7fc fb85 	bl	800f3a8 <LoRaMacIsBusy>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d001      	beq.n	8012ca8 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	e174      	b.n	8012f92 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012ca8:	f001 f994 	bl	8013fd4 <LoRaMacConfirmQueueIsFull>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d001      	beq.n	8012cb6 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e16d      	b.n	8012f92 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012cb6:	f001 f981 	bl	8013fbc <LoRaMacConfirmQueueGetCnt>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d104      	bne.n	8012cca <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012cc0:	2214      	movs	r2, #20
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	48b5      	ldr	r0, [pc, #724]	; (8012f9c <LoRaMacMlmeRequest+0x324>)
 8012cc6:	f006 f9c3 	bl	8019050 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012cca:	4bb5      	ldr	r3, [pc, #724]	; (8012fa0 <LoRaMacMlmeRequest+0x328>)
 8012ccc:	2201      	movs	r2, #1
 8012cce:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012cd2:	4ab3      	ldr	r2, [pc, #716]	; (8012fa0 <LoRaMacMlmeRequest+0x328>)
 8012cd4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012cd8:	f043 0304 	orr.w	r3, r3, #4
 8012cdc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	3b01      	subs	r3, #1
 8012d00:	2b0c      	cmp	r3, #12
 8012d02:	f200 811a 	bhi.w	8012f3a <LoRaMacMlmeRequest+0x2c2>
 8012d06:	a201      	add	r2, pc, #4	; (adr r2, 8012d0c <LoRaMacMlmeRequest+0x94>)
 8012d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d0c:	08012d41 	.word	0x08012d41
 8012d10:	08012f3b 	.word	0x08012f3b
 8012d14:	08012f3b 	.word	0x08012f3b
 8012d18:	08012f3b 	.word	0x08012f3b
 8012d1c:	08012e1f 	.word	0x08012e1f
 8012d20:	08012e43 	.word	0x08012e43
 8012d24:	08012f3b 	.word	0x08012f3b
 8012d28:	08012f3b 	.word	0x08012f3b
 8012d2c:	08012e61 	.word	0x08012e61
 8012d30:	08012f3b 	.word	0x08012f3b
 8012d34:	08012f09 	.word	0x08012f09
 8012d38:	08012e9d 	.word	0x08012e9d
 8012d3c:	08012ee7 	.word	0x08012ee7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012d40:	4b97      	ldr	r3, [pc, #604]	; (8012fa0 <LoRaMacMlmeRequest+0x328>)
 8012d42:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012d46:	f003 0320 	and.w	r3, r3, #32
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d001      	beq.n	8012d52 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e11f      	b.n	8012f92 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	791b      	ldrb	r3, [r3, #4]
 8012d56:	2b02      	cmp	r3, #2
 8012d58:	d135      	bne.n	8012dc6 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	f7fe f8b4 	bl	8010ec8 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012d60:	4b90      	ldr	r3, [pc, #576]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012d62:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	795b      	ldrb	r3, [r3, #5]
 8012d6a:	b25b      	sxtb	r3, r3
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	4619      	mov	r1, r3
 8012d70:	f002 fcc8 	bl	8015704 <RegionAlternateDr>
 8012d74:	4603      	mov	r3, r0
 8012d76:	461a      	mov	r2, r3
 8012d78:	4b8a      	ldr	r3, [pc, #552]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012d84:	4b87      	ldr	r3, [pc, #540]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012d8a:	2307      	movs	r3, #7
 8012d8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012d90:	20ff      	movs	r0, #255	; 0xff
 8012d92:	f7fd fe1d 	bl	80109d0 <SendReJoinReq>
 8012d96:	4603      	mov	r3, r0
 8012d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8012d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	f000 80cc 	beq.w	8012f3e <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012da6:	4b7f      	ldr	r3, [pc, #508]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012da8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	795b      	ldrb	r3, [r3, #5]
 8012db0:	b25b      	sxtb	r3, r3
 8012db2:	2201      	movs	r2, #1
 8012db4:	4619      	mov	r1, r3
 8012db6:	f002 fca5 	bl	8015704 <RegionAlternateDr>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	4b79      	ldr	r3, [pc, #484]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012dc4:	e0bb      	b.n	8012f3e <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	791b      	ldrb	r3, [r3, #4]
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	f040 80b7 	bne.w	8012f3e <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012dd0:	4b74      	ldr	r3, [pc, #464]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012dd8:	2302      	movs	r3, #2
 8012dda:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012ddc:	4b71      	ldr	r3, [pc, #452]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012dde:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012de2:	f107 020c 	add.w	r2, r7, #12
 8012de6:	4611      	mov	r1, r2
 8012de8:	4618      	mov	r0, r3
 8012dea:	f002 fb2c 	bl	8015446 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	791a      	ldrb	r2, [r3, #4]
 8012df2:	4b6c      	ldr	r3, [pc, #432]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012df4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8012dfe:	2301      	movs	r3, #1
 8012e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8012e04:	f7fe fdb2 	bl	801196c <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012e08:	4a65      	ldr	r2, [pc, #404]	; (8012fa0 <LoRaMacMlmeRequest+0x328>)
 8012e0a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012e0e:	f043 0310 	orr.w	r3, r3, #16
 8012e12:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8012e16:	2300      	movs	r3, #0
 8012e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012e1c:	e08f      	b.n	8012f3e <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012e24:	f107 031c 	add.w	r3, r7, #28
 8012e28:	2200      	movs	r2, #0
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	2002      	movs	r0, #2
 8012e2e:	f000 fd21 	bl	8013874 <LoRaMacCommandsAddCmd>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	f000 8084 	beq.w	8012f42 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e3a:	2313      	movs	r3, #19
 8012e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012e40:	e07f      	b.n	8012f42 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	8898      	ldrh	r0, [r3, #4]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6899      	ldr	r1, [r3, #8]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	461a      	mov	r2, r3
 8012e54:	f7fe fbba 	bl	80115cc <SetTxContinuousWave>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012e5e:	e077      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012e60:	2300      	movs	r3, #0
 8012e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8012e66:	f107 0308 	add.w	r3, r7, #8
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	200d      	movs	r0, #13
 8012e6e:	f000 fd81 	bl	8013974 <LoRaMacCommandsGetCmd>
 8012e72:	4603      	mov	r3, r0
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d103      	bne.n	8012e80 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8012e7e:	e062      	b.n	8012f46 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012e80:	f107 031c 	add.w	r3, r7, #28
 8012e84:	2200      	movs	r2, #0
 8012e86:	4619      	mov	r1, r3
 8012e88:	200d      	movs	r0, #13
 8012e8a:	f000 fcf3 	bl	8013874 <LoRaMacCommandsAddCmd>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d058      	beq.n	8012f46 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e94:	2313      	movs	r3, #19
 8012e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012e9a:	e054      	b.n	8012f46 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012e9c:	4b41      	ldr	r3, [pc, #260]	; (8012fa4 <LoRaMacMlmeRequest+0x32c>)
 8012e9e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d151      	bne.n	8012f4a <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	791b      	ldrb	r3, [r3, #4]
 8012eaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	791b      	ldrb	r3, [r3, #4]
 8012eb2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 fb25 	bl	8013508 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ec2:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012eca:	f107 031c 	add.w	r3, r7, #28
 8012ece:	2201      	movs	r2, #1
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	2010      	movs	r0, #16
 8012ed4:	f000 fcce 	bl	8013874 <LoRaMacCommandsAddCmd>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d035      	beq.n	8012f4a <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012ede:	2313      	movs	r3, #19
 8012ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8012ee4:	e031      	b.n	8012f4a <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012eec:	f107 031c 	add.w	r3, r7, #28
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	2012      	movs	r0, #18
 8012ef6:	f000 fcbd 	bl	8013874 <LoRaMacCommandsAddCmd>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d026      	beq.n	8012f4e <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f00:	2313      	movs	r3, #19
 8012f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012f06:	e022      	b.n	8012f4e <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012f0e:	f000 fab1 	bl	8013474 <LoRaMacClassBIsAcquisitionInProgress>
 8012f12:	4603      	mov	r3, r0
 8012f14:	f083 0301 	eor.w	r3, r3, #1
 8012f18:	b2db      	uxtb	r3, r3
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d009      	beq.n	8012f32 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012f1e:	2000      	movs	r0, #0
 8012f20:	f000 fa8a 	bl	8013438 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012f24:	2000      	movs	r0, #0
 8012f26:	f000 faac 	bl	8013482 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012f30:	e00e      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8012f32:	2301      	movs	r3, #1
 8012f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012f38:	e00a      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8012f3a:	bf00      	nop
 8012f3c:	e008      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012f3e:	bf00      	nop
 8012f40:	e006      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012f42:	bf00      	nop
 8012f44:	e004      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012f46:	bf00      	nop
 8012f48:	e002      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012f4a:	bf00      	nop
 8012f4c:	e000      	b.n	8012f50 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012f4e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012f50:	4b13      	ldr	r3, [pc, #76]	; (8012fa0 <LoRaMacMlmeRequest+0x328>)
 8012f52:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d010      	beq.n	8012f84 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012f62:	f001 f82b 	bl	8013fbc <LoRaMacConfirmQueueGetCnt>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d110      	bne.n	8012f8e <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8012f6c:	4b0c      	ldr	r3, [pc, #48]	; (8012fa0 <LoRaMacMlmeRequest+0x328>)
 8012f6e:	2200      	movs	r2, #0
 8012f70:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012f74:	4a0a      	ldr	r2, [pc, #40]	; (8012fa0 <LoRaMacMlmeRequest+0x328>)
 8012f76:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012f7a:	f36f 0382 	bfc	r3, #2, #1
 8012f7e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8012f82:	e004      	b.n	8012f8e <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012f84:	f107 0320 	add.w	r3, r7, #32
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f000 fec3 	bl	8013d14 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3728      	adds	r7, #40	; 0x28
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	20000b94 	.word	0x20000b94
 8012fa0:	20000740 	.word	0x20000740
 8012fa4:	20000c5c 	.word	0x20000c5c

08012fa8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012fa8:	b5b0      	push	{r4, r5, r7, lr}
 8012faa:	b092      	sub	sp, #72	; 0x48
 8012fac:	af02      	add	r7, sp, #8
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012fb4:	2302      	movs	r3, #2
 8012fb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d101      	bne.n	8012fda <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012fd6:	2303      	movs	r3, #3
 8012fd8:	e113      	b.n	8013202 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012fe0:	f7fc f9e2 	bl	800f3a8 <LoRaMacIsBusy>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d001      	beq.n	8012fee <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012fea:	2301      	movs	r3, #1
 8012fec:	e109      	b.n	8013202 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f107 040c 	add.w	r4, r7, #12
 8012ff4:	461d      	mov	r5, r3
 8012ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ffa:	682b      	ldr	r3, [r5, #0]
 8012ffc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012ffe:	2300      	movs	r3, #0
 8013000:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013004:	2214      	movs	r2, #20
 8013006:	2100      	movs	r1, #0
 8013008:	4880      	ldr	r0, [pc, #512]	; (801320c <LoRaMacMcpsRequest+0x264>)
 801300a:	f006 f821 	bl	8019050 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801300e:	4b80      	ldr	r3, [pc, #512]	; (8013210 <LoRaMacMcpsRequest+0x268>)
 8013010:	2201      	movs	r2, #1
 8013012:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013016:	4b7f      	ldr	r3, [pc, #508]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013018:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801301c:	2b02      	cmp	r3, #2
 801301e:	d111      	bne.n	8013044 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013020:	4b7c      	ldr	r3, [pc, #496]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013022:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013026:	2b02      	cmp	r3, #2
 8013028:	d10c      	bne.n	8013044 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801302a:	4b7a      	ldr	r3, [pc, #488]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 801302c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8013030:	f083 0301 	eor.w	r3, r3, #1
 8013034:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013036:	2b00      	cmp	r3, #0
 8013038:	d004      	beq.n	8013044 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801303a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801303c:	2b00      	cmp	r3, #0
 801303e:	d101      	bne.n	8013044 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013040:	2301      	movs	r3, #1
 8013042:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013044:	7b3b      	ldrb	r3, [r7, #12]
 8013046:	2b03      	cmp	r3, #3
 8013048:	d030      	beq.n	80130ac <LoRaMacMcpsRequest+0x104>
 801304a:	2b03      	cmp	r3, #3
 801304c:	dc3f      	bgt.n	80130ce <LoRaMacMcpsRequest+0x126>
 801304e:	2b00      	cmp	r3, #0
 8013050:	d002      	beq.n	8013058 <LoRaMacMcpsRequest+0xb0>
 8013052:	2b01      	cmp	r3, #1
 8013054:	d015      	beq.n	8013082 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013056:	e03a      	b.n	80130ce <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8013058:	2301      	movs	r3, #1
 801305a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801305e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013062:	2202      	movs	r2, #2
 8013064:	f362 1347 	bfi	r3, r2, #5, #3
 8013068:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801306c:	7c3b      	ldrb	r3, [r7, #16]
 801306e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8013076:	8b3b      	ldrh	r3, [r7, #24]
 8013078:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801307a:	7ebb      	ldrb	r3, [r7, #26]
 801307c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013080:	e026      	b.n	80130d0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013082:	2301      	movs	r3, #1
 8013084:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013088:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801308c:	2204      	movs	r2, #4
 801308e:	f362 1347 	bfi	r3, r2, #5, #3
 8013092:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8013096:	7c3b      	ldrb	r3, [r7, #16]
 8013098:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80130a0:	8b3b      	ldrh	r3, [r7, #24]
 80130a2:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 80130a4:	7ebb      	ldrb	r3, [r7, #26]
 80130a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80130aa:	e011      	b.n	80130d0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80130ac:	2301      	movs	r3, #1
 80130ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80130b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80130b6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80130ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80130c2:	8abb      	ldrh	r3, [r7, #20]
 80130c4:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 80130c6:	7dbb      	ldrb	r3, [r7, #22]
 80130c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80130cc:	e000      	b.n	80130d0 <LoRaMacMcpsRequest+0x128>
            break;
 80130ce:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80130d0:	2302      	movs	r3, #2
 80130d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130d6:	4b4f      	ldr	r3, [pc, #316]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 80130d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80130dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130e0:	4b4c      	ldr	r3, [pc, #304]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 80130e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80130ea:	4611      	mov	r1, r2
 80130ec:	4618      	mov	r0, r3
 80130ee:	f002 f973 	bl	80153d8 <RegionGetPhyParam>
 80130f2:	4603      	mov	r3, r0
 80130f4:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80130f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f8:	b25b      	sxtb	r3, r3
 80130fa:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80130fe:	4293      	cmp	r3, r2
 8013100:	bfb8      	it	lt
 8013102:	4613      	movlt	r3, r2
 8013104:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013108:	4b42      	ldr	r3, [pc, #264]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 801310a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801310e:	4a41      	ldr	r2, [pc, #260]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013110:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8013114:	4a3f      	ldr	r2, [pc, #252]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013116:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 801311a:	4618      	mov	r0, r3
 801311c:	f7fc fae0 	bl	800f6e0 <CheckForMinimumAbpDatarate>
 8013120:	4603      	mov	r3, r0
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8013126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013128:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 801312c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013130:	2b00      	cmp	r3, #0
 8013132:	d05f      	beq.n	80131f4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013134:	4b37      	ldr	r3, [pc, #220]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013136:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801313a:	f083 0301 	eor.w	r3, r3, #1
 801313e:	b2db      	uxtb	r3, r3
 8013140:	2b00      	cmp	r3, #0
 8013142:	d10e      	bne.n	8013162 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013144:	4b33      	ldr	r3, [pc, #204]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013146:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801314a:	4a32      	ldr	r2, [pc, #200]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 801314c:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8013150:	4a30      	ldr	r2, [pc, #192]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013152:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8013156:	4618      	mov	r0, r3
 8013158:	f7fc fac2 	bl	800f6e0 <CheckForMinimumAbpDatarate>
 801315c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801315e:	2b00      	cmp	r3, #0
 8013160:	d01c      	beq.n	801319c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8013162:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013166:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801316a:	4b2a      	ldr	r3, [pc, #168]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 801316c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013174:	4b27      	ldr	r3, [pc, #156]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013176:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801317a:	f107 0120 	add.w	r1, r7, #32
 801317e:	2205      	movs	r2, #5
 8013180:	4618      	mov	r0, r3
 8013182:	f002 f977 	bl	8015474 <RegionVerify>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d005      	beq.n	8013198 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801318c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013190:	4b20      	ldr	r3, [pc, #128]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 8013192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8013196:	e001      	b.n	801319c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013198:	2303      	movs	r3, #3
 801319a:	e032      	b.n	8013202 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801319c:	4b1d      	ldr	r3, [pc, #116]	; (8013214 <LoRaMacMcpsRequest+0x26c>)
 801319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131a2:	4a1b      	ldr	r2, [pc, #108]	; (8013210 <LoRaMacMcpsRequest+0x268>)
 80131a4:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 80131a8:	4611      	mov	r1, r2
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fc fb84 	bl	800f8b8 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80131b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80131b2:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80131b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80131ba:	78fb      	ldrb	r3, [r7, #3]
 80131bc:	9300      	str	r3, [sp, #0]
 80131be:	4613      	mov	r3, r2
 80131c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131c2:	f7fd fb23 	bl	801080c <Send>
 80131c6:	4603      	mov	r3, r0
 80131c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 80131cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d10b      	bne.n	80131ec <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80131d4:	7b3a      	ldrb	r2, [r7, #12]
 80131d6:	4b0e      	ldr	r3, [pc, #56]	; (8013210 <LoRaMacMcpsRequest+0x268>)
 80131d8:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80131dc:	4a0c      	ldr	r2, [pc, #48]	; (8013210 <LoRaMacMcpsRequest+0x268>)
 80131de:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80131e2:	f043 0301 	orr.w	r3, r3, #1
 80131e6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 80131ea:	e003      	b.n	80131f4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80131ec:	4b08      	ldr	r3, [pc, #32]	; (8013210 <LoRaMacMcpsRequest+0x268>)
 80131ee:	2200      	movs	r2, #0
 80131f0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80131f4:	4b06      	ldr	r3, [pc, #24]	; (8013210 <LoRaMacMcpsRequest+0x268>)
 80131f6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	611a      	str	r2, [r3, #16]

    return status;
 80131fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013202:	4618      	mov	r0, r3
 8013204:	3740      	adds	r7, #64	; 0x40
 8013206:	46bd      	mov	sp, r7
 8013208:	bdb0      	pop	{r4, r5, r7, pc}
 801320a:	bf00      	nop
 801320c:	20000b80 	.word	0x20000b80
 8013210:	20000740 	.word	0x20000740
 8013214:	20000c5c 	.word	0x20000c5c

08013218 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	4603      	mov	r3, r0
 8013220:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013222:	79fb      	ldrb	r3, [r7, #7]
 8013224:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013226:	4b0d      	ldr	r3, [pc, #52]	; (801325c <LoRaMacTestSetDutyCycleOn+0x44>)
 8013228:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801322c:	f107 010c 	add.w	r1, r7, #12
 8013230:	220f      	movs	r2, #15
 8013232:	4618      	mov	r0, r3
 8013234:	f002 f91e 	bl	8015474 <RegionVerify>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d00a      	beq.n	8013254 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801323e:	4a07      	ldr	r2, [pc, #28]	; (801325c <LoRaMacTestSetDutyCycleOn+0x44>)
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013246:	4a06      	ldr	r2, [pc, #24]	; (8013260 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013248:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801324c:	f043 0320 	orr.w	r3, r3, #32
 8013250:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8013254:	bf00      	nop
 8013256:	3710      	adds	r7, #16
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	20000c5c 	.word	0x20000c5c
 8013260:	20000740 	.word	0x20000740

08013264 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013264:	b580      	push	{r7, lr}
 8013266:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013268:	f7fe fe94 	bl	8011f94 <LoRaMacStop>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d112      	bne.n	8013298 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013272:	480b      	ldr	r0, [pc, #44]	; (80132a0 <LoRaMacDeInitialization+0x3c>)
 8013274:	f00a f84c 	bl	801d310 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013278:	480a      	ldr	r0, [pc, #40]	; (80132a4 <LoRaMacDeInitialization+0x40>)
 801327a:	f00a f849 	bl	801d310 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801327e:	480a      	ldr	r0, [pc, #40]	; (80132a8 <LoRaMacDeInitialization+0x44>)
 8013280:	f00a f846 	bl	801d310 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013284:	f000 f94a 	bl	801351c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8013288:	2000      	movs	r0, #0
 801328a:	f7fd fe1d 	bl	8010ec8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801328e:	4b07      	ldr	r3, [pc, #28]	; (80132ac <LoRaMacDeInitialization+0x48>)
 8013290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013292:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013294:	2300      	movs	r3, #0
 8013296:	e000      	b.n	801329a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013298:	2301      	movs	r3, #1
    }
}
 801329a:	4618      	mov	r0, r3
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	20000aa8 	.word	0x20000aa8
 80132a4:	20000ac0 	.word	0x20000ac0
 80132a8:	20000ad8 	.word	0x20000ad8
 80132ac:	0801ebac 	.word	0x0801ebac

080132b0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b08c      	sub	sp, #48	; 0x30
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
 80132bc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80132be:	2300      	movs	r3, #0
 80132c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	7b1b      	ldrb	r3, [r3, #12]
 80132c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	7b5b      	ldrb	r3, [r3, #13]
 80132d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	7b9b      	ldrb	r3, [r3, #14]
 80132d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	685a      	ldr	r2, [r3, #4]
 80132e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	785b      	ldrb	r3, [r3, #1]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	f000 8088 	beq.w	80133fe <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80132ee:	2302      	movs	r3, #2
 80132f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	7bdb      	ldrb	r3, [r3, #15]
 80132f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	7c1b      	ldrb	r3, [r3, #16]
 8013300:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013304:	4611      	mov	r1, r2
 8013306:	4618      	mov	r0, r3
 8013308:	f002 f866 	bl	80153d8 <RegionGetPhyParam>
 801330c:	4603      	mov	r3, r0
 801330e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013310:	6a3b      	ldr	r3, [r7, #32]
 8013312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8013316:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 801331a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801331e:	4293      	cmp	r3, r2
 8013320:	bfb8      	it	lt
 8013322:	4613      	movlt	r3, r2
 8013324:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	685b      	ldr	r3, [r3, #4]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	8912      	ldrh	r2, [r2, #8]
 8013330:	4293      	cmp	r3, r2
 8013332:	d302      	bcc.n	801333a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013334:	2301      	movs	r3, #1
 8013336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	68fa      	ldr	r2, [r7, #12]
 8013340:	8912      	ldrh	r2, [r2, #8]
 8013342:	4611      	mov	r1, r2
 8013344:	68fa      	ldr	r2, [r7, #12]
 8013346:	8952      	ldrh	r2, [r2, #10]
 8013348:	440a      	add	r2, r1
 801334a:	4293      	cmp	r3, r2
 801334c:	d30f      	bcc.n	801336e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801334e:	230a      	movs	r3, #10
 8013350:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	7c1b      	ldrb	r3, [r3, #16]
 8013358:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801335c:	4611      	mov	r1, r2
 801335e:	4618      	mov	r0, r3
 8013360:	f002 f83a 	bl	80153d8 <RegionGetPhyParam>
 8013364:	4603      	mov	r3, r0
 8013366:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013368:	6a3b      	ldr	r3, [r7, #32]
 801336a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	68fa      	ldr	r2, [r7, #12]
 8013374:	8912      	ldrh	r2, [r2, #8]
 8013376:	4611      	mov	r1, r2
 8013378:	68fa      	ldr	r2, [r7, #12]
 801337a:	8952      	ldrh	r2, [r2, #10]
 801337c:	0052      	lsls	r2, r2, #1
 801337e:	440a      	add	r2, r1
 8013380:	4293      	cmp	r3, r2
 8013382:	d33c      	bcc.n	80133fe <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	8912      	ldrh	r2, [r2, #8]
 801338c:	1a9b      	subs	r3, r3, r2
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	8952      	ldrh	r2, [r2, #10]
 8013392:	fbb3 f1f2 	udiv	r1, r3, r2
 8013396:	fb01 f202 	mul.w	r2, r1, r2
 801339a:	1a9b      	subs	r3, r3, r2
 801339c:	2b00      	cmp	r3, #0
 801339e:	d12e      	bne.n	80133fe <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80133a0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80133a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d110      	bne.n	80133ce <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d009      	beq.n	80133c8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80133b4:	2302      	movs	r3, #2
 80133b6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	7c1b      	ldrb	r3, [r3, #16]
 80133bc:	f107 0210 	add.w	r2, r7, #16
 80133c0:	4611      	mov	r1, r2
 80133c2:	4618      	mov	r0, r3
 80133c4:	f002 f83f 	bl	8015446 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80133c8:	2301      	movs	r3, #1
 80133ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80133ce:	2321      	movs	r3, #33	; 0x21
 80133d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80133d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80133d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	7bdb      	ldrb	r3, [r3, #15]
 80133e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	7c1b      	ldrb	r3, [r3, #16]
 80133e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80133ec:	4611      	mov	r1, r2
 80133ee:	4618      	mov	r0, r3
 80133f0:	f001 fff2 	bl	80153d8 <RegionGetPhyParam>
 80133f4:	4603      	mov	r3, r0
 80133f6:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80133f8:	6a3b      	ldr	r3, [r7, #32]
 80133fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013404:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801340c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013414:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801341a:	4618      	mov	r0, r3
 801341c:	3730      	adds	r7, #48	; 0x30
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}

08013422 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013422:	b480      	push	{r7}
 8013424:	b085      	sub	sp, #20
 8013426:	af00      	add	r7, sp, #0
 8013428:	60f8      	str	r0, [r7, #12]
 801342a:	60b9      	str	r1, [r7, #8]
 801342c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801342e:	bf00      	nop
 8013430:	3714      	adds	r7, #20
 8013432:	46bd      	mov	sp, r7
 8013434:	bc80      	pop	{r7}
 8013436:	4770      	bx	lr

08013438 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	4603      	mov	r3, r0
 8013440:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013442:	bf00      	nop
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	bc80      	pop	{r7}
 801344a:	4770      	bx	lr

0801344c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	4603      	mov	r3, r0
 8013454:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013456:	bf00      	nop
 8013458:	370c      	adds	r7, #12
 801345a:	46bd      	mov	sp, r7
 801345c:	bc80      	pop	{r7}
 801345e:	4770      	bx	lr

08013460 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	4603      	mov	r3, r0
 8013468:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801346a:	bf00      	nop
 801346c:	370c      	adds	r7, #12
 801346e:	46bd      	mov	sp, r7
 8013470:	bc80      	pop	{r7}
 8013472:	4770      	bx	lr

08013474 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013474:	b480      	push	{r7}
 8013476:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013478:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801347a:	4618      	mov	r0, r3
 801347c:	46bd      	mov	sp, r7
 801347e:	bc80      	pop	{r7}
 8013480:	4770      	bx	lr

08013482 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013482:	b480      	push	{r7}
 8013484:	b083      	sub	sp, #12
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801348a:	bf00      	nop
 801348c:	370c      	adds	r7, #12
 801348e:	46bd      	mov	sp, r7
 8013490:	bc80      	pop	{r7}
 8013492:	4770      	bx	lr

08013494 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013494:	b480      	push	{r7}
 8013496:	b083      	sub	sp, #12
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801349c:	bf00      	nop
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bc80      	pop	{r7}
 80134a4:	4770      	bx	lr

080134a6 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80134a6:	b480      	push	{r7}
 80134a8:	b083      	sub	sp, #12
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134ae:	bf00      	nop
 80134b0:	370c      	adds	r7, #12
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bc80      	pop	{r7}
 80134b6:	4770      	bx	lr

080134b8 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80134b8:	b480      	push	{r7}
 80134ba:	b083      	sub	sp, #12
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	460b      	mov	r3, r1
 80134c2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80134c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	370c      	adds	r7, #12
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bc80      	pop	{r7}
 80134ce:	4770      	bx	lr

080134d0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80134d0:	b480      	push	{r7}
 80134d2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134d4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	46bd      	mov	sp, r7
 80134da:	bc80      	pop	{r7}
 80134dc:	4770      	bx	lr

080134de <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80134de:	b480      	push	{r7}
 80134e0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bc80      	pop	{r7}
 80134ea:	4770      	bx	lr

080134ec <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80134ec:	b480      	push	{r7}
 80134ee:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134f0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bc80      	pop	{r7}
 80134f8:	4770      	bx	lr

080134fa <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80134fa:	b480      	push	{r7}
 80134fc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80134fe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013500:	4618      	mov	r0, r3
 8013502:	46bd      	mov	sp, r7
 8013504:	bc80      	pop	{r7}
 8013506:	4770      	bx	lr

08013508 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	4603      	mov	r3, r0
 8013510:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013512:	bf00      	nop
 8013514:	370c      	adds	r7, #12
 8013516:	46bd      	mov	sp, r7
 8013518:	bc80      	pop	{r7}
 801351a:	4770      	bx	lr

0801351c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801351c:	b480      	push	{r7}
 801351e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013520:	bf00      	nop
 8013522:	46bd      	mov	sp, r7
 8013524:	bc80      	pop	{r7}
 8013526:	4770      	bx	lr

08013528 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013528:	b480      	push	{r7}
 801352a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801352c:	bf00      	nop
 801352e:	46bd      	mov	sp, r7
 8013530:	bc80      	pop	{r7}
 8013532:	4770      	bx	lr

08013534 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	4603      	mov	r3, r0
 801353c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801353e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	bc80      	pop	{r7}
 8013548:	4770      	bx	lr

0801354a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801354a:	b480      	push	{r7}
 801354c:	b083      	sub	sp, #12
 801354e:	af00      	add	r7, sp, #0
 8013550:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013552:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013554:	4618      	mov	r0, r3
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	bc80      	pop	{r7}
 801355c:	4770      	bx	lr

0801355e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801355e:	b480      	push	{r7}
 8013560:	b083      	sub	sp, #12
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013566:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013568:	4618      	mov	r0, r3
 801356a:	370c      	adds	r7, #12
 801356c:	46bd      	mov	sp, r7
 801356e:	bc80      	pop	{r7}
 8013570:	4770      	bx	lr

08013572 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013572:	b480      	push	{r7}
 8013574:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013576:	bf00      	nop
 8013578:	46bd      	mov	sp, r7
 801357a:	bc80      	pop	{r7}
 801357c:	4770      	bx	lr

0801357e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	4603      	mov	r3, r0
 8013586:	6039      	str	r1, [r7, #0]
 8013588:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801358a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801358c:	4618      	mov	r0, r3
 801358e:	370c      	adds	r7, #12
 8013590:	46bd      	mov	sp, r7
 8013592:	bc80      	pop	{r7}
 8013594:	4770      	bx	lr

08013596 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013596:	b480      	push	{r7}
 8013598:	b083      	sub	sp, #12
 801359a:	af00      	add	r7, sp, #0
 801359c:	4603      	mov	r3, r0
 801359e:	603a      	str	r2, [r7, #0]
 80135a0:	80fb      	strh	r3, [r7, #6]
 80135a2:	460b      	mov	r3, r1
 80135a4:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135a6:	bf00      	nop
 80135a8:	370c      	adds	r7, #12
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bc80      	pop	{r7}
 80135ae:	4770      	bx	lr

080135b0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80135b0:	b480      	push	{r7}
 80135b2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135b4:	bf00      	nop
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bc80      	pop	{r7}
 80135ba:	4770      	bx	lr

080135bc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80135bc:	b480      	push	{r7}
 80135be:	b083      	sub	sp, #12
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80135c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	370c      	adds	r7, #12
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bc80      	pop	{r7}
 80135ce:	4770      	bx	lr

080135d0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80135d8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135da:	4618      	mov	r0, r3
 80135dc:	370c      	adds	r7, #12
 80135de:	46bd      	mov	sp, r7
 80135e0:	bc80      	pop	{r7}
 80135e2:	4770      	bx	lr

080135e4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80135e4:	b480      	push	{r7}
 80135e6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135e8:	bf00      	nop
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bc80      	pop	{r7}
 80135ee:	4770      	bx	lr

080135f0 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80135f0:	b480      	push	{r7}
 80135f2:	b083      	sub	sp, #12
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	460b      	mov	r3, r1
 80135fa:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135fc:	bf00      	nop
 80135fe:	370c      	adds	r7, #12
 8013600:	46bd      	mov	sp, r7
 8013602:	bc80      	pop	{r7}
 8013604:	4770      	bx	lr

08013606 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013606:	b480      	push	{r7}
 8013608:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801360a:	bf00      	nop
 801360c:	46bd      	mov	sp, r7
 801360e:	bc80      	pop	{r7}
 8013610:	4770      	bx	lr

08013612 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013612:	b480      	push	{r7}
 8013614:	b085      	sub	sp, #20
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801361e:	2300      	movs	r3, #0
 8013620:	81fb      	strh	r3, [r7, #14]
 8013622:	e00a      	b.n	801363a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013624:	89fb      	ldrh	r3, [r7, #14]
 8013626:	68ba      	ldr	r2, [r7, #8]
 8013628:	4413      	add	r3, r2
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d001      	beq.n	8013634 <IsSlotFree+0x22>
        {
            return false;
 8013630:	2300      	movs	r3, #0
 8013632:	e006      	b.n	8013642 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013634:	89fb      	ldrh	r3, [r7, #14]
 8013636:	3301      	adds	r3, #1
 8013638:	81fb      	strh	r3, [r7, #14]
 801363a:	89fb      	ldrh	r3, [r7, #14]
 801363c:	2b0f      	cmp	r3, #15
 801363e:	d9f1      	bls.n	8013624 <IsSlotFree+0x12>
        }
    }
    return true;
 8013640:	2301      	movs	r3, #1
}
 8013642:	4618      	mov	r0, r3
 8013644:	3714      	adds	r7, #20
 8013646:	46bd      	mov	sp, r7
 8013648:	bc80      	pop	{r7}
 801364a:	4770      	bx	lr

0801364c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013652:	2300      	movs	r3, #0
 8013654:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013656:	e007      	b.n	8013668 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013658:	79fb      	ldrb	r3, [r7, #7]
 801365a:	3301      	adds	r3, #1
 801365c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801365e:	79fb      	ldrb	r3, [r7, #7]
 8013660:	2b20      	cmp	r3, #32
 8013662:	d101      	bne.n	8013668 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013664:	2300      	movs	r3, #0
 8013666:	e012      	b.n	801368e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013668:	79fb      	ldrb	r3, [r7, #7]
 801366a:	011b      	lsls	r3, r3, #4
 801366c:	3308      	adds	r3, #8
 801366e:	4a0a      	ldr	r2, [pc, #40]	; (8013698 <MallocNewMacCommandSlot+0x4c>)
 8013670:	4413      	add	r3, r2
 8013672:	4618      	mov	r0, r3
 8013674:	f7ff ffcd 	bl	8013612 <IsSlotFree>
 8013678:	4603      	mov	r3, r0
 801367a:	f083 0301 	eor.w	r3, r3, #1
 801367e:	b2db      	uxtb	r3, r3
 8013680:	2b00      	cmp	r3, #0
 8013682:	d1e9      	bne.n	8013658 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013684:	79fb      	ldrb	r3, [r7, #7]
 8013686:	011b      	lsls	r3, r3, #4
 8013688:	3308      	adds	r3, #8
 801368a:	4a03      	ldr	r2, [pc, #12]	; (8013698 <MallocNewMacCommandSlot+0x4c>)
 801368c:	4413      	add	r3, r2
}
 801368e:	4618      	mov	r0, r3
 8013690:	3708      	adds	r7, #8
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	2000189c 	.word	0x2000189c

0801369c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d101      	bne.n	80136ae <FreeMacCommandSlot+0x12>
    {
        return false;
 80136aa:	2300      	movs	r3, #0
 80136ac:	e005      	b.n	80136ba <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80136ae:	2210      	movs	r2, #16
 80136b0:	2100      	movs	r1, #0
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f005 fccc 	bl	8019050 <memset1>

    return true;
 80136b8:	2301      	movs	r3, #1
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3708      	adds	r7, #8
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80136c2:	b480      	push	{r7}
 80136c4:	b083      	sub	sp, #12
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <LinkedListInit+0x12>
    {
        return false;
 80136d0:	2300      	movs	r3, #0
 80136d2:	e006      	b.n	80136e2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2200      	movs	r2, #0
 80136d8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2200      	movs	r2, #0
 80136de:	605a      	str	r2, [r3, #4]

    return true;
 80136e0:	2301      	movs	r3, #1
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	370c      	adds	r7, #12
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bc80      	pop	{r7}
 80136ea:	4770      	bx	lr

080136ec <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d002      	beq.n	8013702 <LinkedListAdd+0x16>
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d101      	bne.n	8013706 <LinkedListAdd+0x1a>
    {
        return false;
 8013702:	2300      	movs	r3, #0
 8013704:	e015      	b.n	8013732 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d102      	bne.n	8013714 <LinkedListAdd+0x28>
    {
        list->First = element;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d003      	beq.n	8013724 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	683a      	ldr	r2, [r7, #0]
 8013722:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	2200      	movs	r2, #0
 8013728:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	683a      	ldr	r2, [r7, #0]
 801372e:	605a      	str	r2, [r3, #4]

    return true;
 8013730:	2301      	movs	r3, #1
}
 8013732:	4618      	mov	r0, r3
 8013734:	370c      	adds	r7, #12
 8013736:	46bd      	mov	sp, r7
 8013738:	bc80      	pop	{r7}
 801373a:	4770      	bx	lr

0801373c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801373c:	b480      	push	{r7}
 801373e:	b085      	sub	sp, #20
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d002      	beq.n	8013752 <LinkedListGetPrevious+0x16>
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d101      	bne.n	8013756 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013752:	2300      	movs	r3, #0
 8013754:	e016      	b.n	8013784 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801375c:	683a      	ldr	r2, [r7, #0]
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	429a      	cmp	r2, r3
 8013762:	d00c      	beq.n	801377e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013764:	e002      	b.n	801376c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d007      	beq.n	8013782 <LinkedListGetPrevious+0x46>
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	683a      	ldr	r2, [r7, #0]
 8013778:	429a      	cmp	r2, r3
 801377a:	d1f4      	bne.n	8013766 <LinkedListGetPrevious+0x2a>
 801377c:	e001      	b.n	8013782 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801377e:	2300      	movs	r3, #0
 8013780:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013782:	68fb      	ldr	r3, [r7, #12]
}
 8013784:	4618      	mov	r0, r3
 8013786:	3714      	adds	r7, #20
 8013788:	46bd      	mov	sp, r7
 801378a:	bc80      	pop	{r7}
 801378c:	4770      	bx	lr

0801378e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801378e:	b580      	push	{r7, lr}
 8013790:	b084      	sub	sp, #16
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d002      	beq.n	80137a4 <LinkedListRemove+0x16>
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d101      	bne.n	80137a8 <LinkedListRemove+0x1a>
    {
        return false;
 80137a4:	2300      	movs	r3, #0
 80137a6:	e020      	b.n	80137ea <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80137a8:	6839      	ldr	r1, [r7, #0]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff ffc6 	bl	801373c <LinkedListGetPrevious>
 80137b0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	683a      	ldr	r2, [r7, #0]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d103      	bne.n	80137c4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	683a      	ldr	r2, [r7, #0]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d102      	bne.n	80137d4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	68fa      	ldr	r2, [r7, #12]
 80137d2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d003      	beq.n	80137e2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	2200      	movs	r2, #0
 80137e6:	601a      	str	r2, [r3, #0]

    return true;
 80137e8:	2301      	movs	r3, #1
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
	...

080137f4 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	4603      	mov	r3, r0
 80137fc:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80137fe:	79fb      	ldrb	r3, [r7, #7]
 8013800:	2b11      	cmp	r3, #17
 8013802:	bf8c      	ite	hi
 8013804:	2201      	movhi	r2, #1
 8013806:	2200      	movls	r2, #0
 8013808:	b2d2      	uxtb	r2, r2
 801380a:	2a00      	cmp	r2, #0
 801380c:	d10d      	bne.n	801382a <IsSticky+0x36>
 801380e:	4a0a      	ldr	r2, [pc, #40]	; (8013838 <IsSticky+0x44>)
 8013810:	fa22 f303 	lsr.w	r3, r2, r3
 8013814:	f003 0301 	and.w	r3, r3, #1
 8013818:	2b00      	cmp	r3, #0
 801381a:	bf14      	ite	ne
 801381c:	2301      	movne	r3, #1
 801381e:	2300      	moveq	r3, #0
 8013820:	b2db      	uxtb	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013826:	2301      	movs	r3, #1
 8013828:	e000      	b.n	801382c <IsSticky+0x38>
        default:
            return false;
 801382a:	2300      	movs	r3, #0
    }
}
 801382c:	4618      	mov	r0, r3
 801382e:	370c      	adds	r7, #12
 8013830:	46bd      	mov	sp, r7
 8013832:	bc80      	pop	{r7}
 8013834:	4770      	bx	lr
 8013836:	bf00      	nop
 8013838:	00020720 	.word	0x00020720

0801383c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	4603      	mov	r3, r0
 8013844:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8013846:	2300      	movs	r3, #0
    }
}
 8013848:	4618      	mov	r0, r3
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	bc80      	pop	{r7}
 8013850:	4770      	bx	lr
	...

08013854 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013854:	b580      	push	{r7, lr}
 8013856:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013858:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801385c:	2100      	movs	r1, #0
 801385e:	4804      	ldr	r0, [pc, #16]	; (8013870 <LoRaMacCommandsInit+0x1c>)
 8013860:	f005 fbf6 	bl	8019050 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013864:	4802      	ldr	r0, [pc, #8]	; (8013870 <LoRaMacCommandsInit+0x1c>)
 8013866:	f7ff ff2c 	bl	80136c2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	bd80      	pop	{r7, pc}
 8013870:	2000189c 	.word	0x2000189c

08013874 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b086      	sub	sp, #24
 8013878:	af00      	add	r7, sp, #0
 801387a:	4603      	mov	r3, r0
 801387c:	60b9      	str	r1, [r7, #8]
 801387e:	607a      	str	r2, [r7, #4]
 8013880:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d101      	bne.n	801388c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013888:	2301      	movs	r3, #1
 801388a:	e03b      	b.n	8013904 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801388c:	f7ff fede 	bl	801364c <MallocNewMacCommandSlot>
 8013890:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d101      	bne.n	801389c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013898:	2302      	movs	r3, #2
 801389a:	e033      	b.n	8013904 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801389c:	6979      	ldr	r1, [r7, #20]
 801389e:	481b      	ldr	r0, [pc, #108]	; (801390c <LoRaMacCommandsAddCmd+0x98>)
 80138a0:	f7ff ff24 	bl	80136ec <LinkedListAdd>
 80138a4:	4603      	mov	r3, r0
 80138a6:	f083 0301 	eor.w	r3, r3, #1
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d001      	beq.n	80138b4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80138b0:	2305      	movs	r3, #5
 80138b2:	e027      	b.n	8013904 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	7bfa      	ldrb	r2, [r7, #15]
 80138b8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	3305      	adds	r3, #5
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	b292      	uxth	r2, r2
 80138c8:	68b9      	ldr	r1, [r7, #8]
 80138ca:	4618      	mov	r0, r3
 80138cc:	f005 fb85 	bl	8018fda <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80138d0:	7bfb      	ldrb	r3, [r7, #15]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7ff ff8e 	bl	80137f4 <IsSticky>
 80138d8:	4603      	mov	r3, r0
 80138da:	461a      	mov	r2, r3
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80138e0:	7bfb      	ldrb	r3, [r7, #15]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7ff ffaa 	bl	801383c <IsConfirmationRequired>
 80138e8:	4603      	mov	r3, r0
 80138ea:	461a      	mov	r2, r3
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80138f0:	4b06      	ldr	r3, [pc, #24]	; (801390c <LoRaMacCommandsAddCmd+0x98>)
 80138f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	4413      	add	r3, r2
 80138fa:	3301      	adds	r3, #1
 80138fc:	4a03      	ldr	r2, [pc, #12]	; (801390c <LoRaMacCommandsAddCmd+0x98>)
 80138fe:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8013902:	2300      	movs	r3, #0
}
 8013904:	4618      	mov	r0, r3
 8013906:	3718      	adds	r7, #24
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	2000189c 	.word	0x2000189c

08013910 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d101      	bne.n	8013922 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801391e:	2301      	movs	r3, #1
 8013920:	e021      	b.n	8013966 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013922:	6879      	ldr	r1, [r7, #4]
 8013924:	4812      	ldr	r0, [pc, #72]	; (8013970 <LoRaMacCommandsRemoveCmd+0x60>)
 8013926:	f7ff ff32 	bl	801378e <LinkedListRemove>
 801392a:	4603      	mov	r3, r0
 801392c:	f083 0301 	eor.w	r3, r3, #1
 8013930:	b2db      	uxtb	r3, r3
 8013932:	2b00      	cmp	r3, #0
 8013934:	d001      	beq.n	801393a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013936:	2303      	movs	r3, #3
 8013938:	e015      	b.n	8013966 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801393a:	4b0d      	ldr	r3, [pc, #52]	; (8013970 <LoRaMacCommandsRemoveCmd+0x60>)
 801393c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	1ad3      	subs	r3, r2, r3
 8013946:	3b01      	subs	r3, #1
 8013948:	4a09      	ldr	r2, [pc, #36]	; (8013970 <LoRaMacCommandsRemoveCmd+0x60>)
 801394a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f7ff fea4 	bl	801369c <FreeMacCommandSlot>
 8013954:	4603      	mov	r3, r0
 8013956:	f083 0301 	eor.w	r3, r3, #1
 801395a:	b2db      	uxtb	r3, r3
 801395c:	2b00      	cmp	r3, #0
 801395e:	d001      	beq.n	8013964 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013960:	2305      	movs	r3, #5
 8013962:	e000      	b.n	8013966 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013964:	2300      	movs	r3, #0
}
 8013966:	4618      	mov	r0, r3
 8013968:	3708      	adds	r7, #8
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	2000189c 	.word	0x2000189c

08013974 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8013974:	b480      	push	{r7}
 8013976:	b085      	sub	sp, #20
 8013978:	af00      	add	r7, sp, #0
 801397a:	4603      	mov	r3, r0
 801397c:	6039      	str	r1, [r7, #0]
 801397e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013980:	4b0e      	ldr	r3, [pc, #56]	; (80139bc <LoRaMacCommandsGetCmd+0x48>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013986:	e002      	b.n	801398e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d004      	beq.n	801399e <LoRaMacCommandsGetCmd+0x2a>
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	791b      	ldrb	r3, [r3, #4]
 8013998:	79fa      	ldrb	r2, [r7, #7]
 801399a:	429a      	cmp	r2, r3
 801399c:	d1f4      	bne.n	8013988 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d101      	bne.n	80139ae <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80139aa:	2303      	movs	r3, #3
 80139ac:	e000      	b.n	80139b0 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80139ae:	2300      	movs	r3, #0
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3714      	adds	r7, #20
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bc80      	pop	{r7}
 80139b8:	4770      	bx	lr
 80139ba:	bf00      	nop
 80139bc:	2000189c 	.word	0x2000189c

080139c0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80139c6:	4b0f      	ldr	r3, [pc, #60]	; (8013a04 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80139cc:	e012      	b.n	80139f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	7b1b      	ldrb	r3, [r3, #12]
 80139d2:	f083 0301 	eor.w	r3, r3, #1
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d008      	beq.n	80139ee <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	f7ff ff94 	bl	8013910 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	607b      	str	r3, [r7, #4]
 80139ec:	e002      	b.n	80139f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d1e9      	bne.n	80139ce <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80139fa:	2300      	movs	r3, #0
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	2000189c 	.word	0x2000189c

08013a08 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013a0e:	4b13      	ldr	r3, [pc, #76]	; (8013a5c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013a14:	e01a      	b.n	8013a4c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	791b      	ldrb	r3, [r3, #4]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7ff fee7 	bl	80137f4 <IsSticky>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00d      	beq.n	8013a48 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	791b      	ldrb	r3, [r3, #4]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7ff ff03 	bl	801383c <IsConfirmationRequired>
 8013a36:	4603      	mov	r3, r0
 8013a38:	f083 0301 	eor.w	r3, r3, #1
 8013a3c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d002      	beq.n	8013a48 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f7ff ff64 	bl	8013910 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d1e1      	bne.n	8013a16 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013a52:	2300      	movs	r3, #0
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3708      	adds	r7, #8
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	2000189c 	.word	0x2000189c

08013a60 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d101      	bne.n	8013a72 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e005      	b.n	8013a7e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013a72:	4b05      	ldr	r3, [pc, #20]	; (8013a88 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013a74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	370c      	adds	r7, #12
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bc80      	pop	{r7}
 8013a86:	4770      	bx	lr
 8013a88:	2000189c 	.word	0x2000189c

08013a8c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b088      	sub	sp, #32
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013a98:	4b25      	ldr	r3, [pc, #148]	; (8013b30 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d002      	beq.n	8013aae <LoRaMacCommandsSerializeCmds+0x22>
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d126      	bne.n	8013afc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	e039      	b.n	8013b26 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013ab2:	7efb      	ldrb	r3, [r7, #27]
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	1ad2      	subs	r2, r2, r3
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	689b      	ldr	r3, [r3, #8]
 8013abc:	3301      	adds	r3, #1
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d320      	bcc.n	8013b04 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013ac2:	7efb      	ldrb	r3, [r7, #27]
 8013ac4:	1c5a      	adds	r2, r3, #1
 8013ac6:	76fa      	strb	r2, [r7, #27]
 8013ac8:	461a      	mov	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	4413      	add	r3, r2
 8013ace:	69fa      	ldr	r2, [r7, #28]
 8013ad0:	7912      	ldrb	r2, [r2, #4]
 8013ad2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013ad4:	7efb      	ldrb	r3, [r7, #27]
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	18d0      	adds	r0, r2, r3
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	1d59      	adds	r1, r3, #5
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	689b      	ldr	r3, [r3, #8]
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	f005 fa78 	bl	8018fda <memcpy1>
            itr += curElement->PayloadSize;
 8013aea:	69fb      	ldr	r3, [r7, #28]
 8013aec:	689b      	ldr	r3, [r3, #8]
 8013aee:	b2da      	uxtb	r2, r3
 8013af0:	7efb      	ldrb	r3, [r7, #27]
 8013af2:	4413      	add	r3, r2
 8013af4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013afc:	69fb      	ldr	r3, [r7, #28]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d1d7      	bne.n	8013ab2 <LoRaMacCommandsSerializeCmds+0x26>
 8013b02:	e009      	b.n	8013b18 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013b04:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013b06:	e007      	b.n	8013b18 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013b0e:	69f8      	ldr	r0, [r7, #28]
 8013b10:	f7ff fefe 	bl	8013910 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d1f4      	bne.n	8013b08 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013b1e:	68b8      	ldr	r0, [r7, #8]
 8013b20:	f7ff ff9e 	bl	8013a60 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013b24:	2300      	movs	r3, #0
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3720      	adds	r7, #32
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	2000189c 	.word	0x2000189c

08013b34 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013b42:	79fb      	ldrb	r3, [r7, #7]
 8013b44:	3b02      	subs	r3, #2
 8013b46:	2b11      	cmp	r3, #17
 8013b48:	d850      	bhi.n	8013bec <LoRaMacCommandsGetCmdSize+0xb8>
 8013b4a:	a201      	add	r2, pc, #4	; (adr r2, 8013b50 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b50:	08013b99 	.word	0x08013b99
 8013b54:	08013b9f 	.word	0x08013b9f
 8013b58:	08013ba5 	.word	0x08013ba5
 8013b5c:	08013bab 	.word	0x08013bab
 8013b60:	08013bb1 	.word	0x08013bb1
 8013b64:	08013bb7 	.word	0x08013bb7
 8013b68:	08013bbd 	.word	0x08013bbd
 8013b6c:	08013bc3 	.word	0x08013bc3
 8013b70:	08013bc9 	.word	0x08013bc9
 8013b74:	08013bed 	.word	0x08013bed
 8013b78:	08013bed 	.word	0x08013bed
 8013b7c:	08013bcf 	.word	0x08013bcf
 8013b80:	08013bed 	.word	0x08013bed
 8013b84:	08013bed 	.word	0x08013bed
 8013b88:	08013bd5 	.word	0x08013bd5
 8013b8c:	08013bdb 	.word	0x08013bdb
 8013b90:	08013be1 	.word	0x08013be1
 8013b94:	08013be7 	.word	0x08013be7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013b98:	2303      	movs	r3, #3
 8013b9a:	73fb      	strb	r3, [r7, #15]
            break;
 8013b9c:	e027      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013b9e:	2305      	movs	r3, #5
 8013ba0:	73fb      	strb	r3, [r7, #15]
            break;
 8013ba2:	e024      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013ba4:	2302      	movs	r3, #2
 8013ba6:	73fb      	strb	r3, [r7, #15]
            break;
 8013ba8:	e021      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013baa:	2305      	movs	r3, #5
 8013bac:	73fb      	strb	r3, [r7, #15]
            break;
 8013bae:	e01e      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	73fb      	strb	r3, [r7, #15]
            break;
 8013bb4:	e01b      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013bb6:	2306      	movs	r3, #6
 8013bb8:	73fb      	strb	r3, [r7, #15]
            break;
 8013bba:	e018      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013bbc:	2302      	movs	r3, #2
 8013bbe:	73fb      	strb	r3, [r7, #15]
            break;
 8013bc0:	e015      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013bc2:	2302      	movs	r3, #2
 8013bc4:	73fb      	strb	r3, [r7, #15]
            break;
 8013bc6:	e012      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013bc8:	2305      	movs	r3, #5
 8013bca:	73fb      	strb	r3, [r7, #15]
            break;
 8013bcc:	e00f      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013bce:	2306      	movs	r3, #6
 8013bd0:	73fb      	strb	r3, [r7, #15]
            break;
 8013bd2:	e00c      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	73fb      	strb	r3, [r7, #15]
            break;
 8013bd8:	e009      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013bda:	2305      	movs	r3, #5
 8013bdc:	73fb      	strb	r3, [r7, #15]
            break;
 8013bde:	e006      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013be0:	2304      	movs	r3, #4
 8013be2:	73fb      	strb	r3, [r7, #15]
            break;
 8013be4:	e003      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013be6:	2304      	movs	r3, #4
 8013be8:	73fb      	strb	r3, [r7, #15]
            break;
 8013bea:	e000      	b.n	8013bee <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013bec:	bf00      	nop
        }
    }
    return cidSize;
 8013bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3714      	adds	r7, #20
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bc80      	pop	{r7}
 8013bf8:	4770      	bx	lr
 8013bfa:	bf00      	nop

08013bfc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b083      	sub	sp, #12
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	4a07      	ldr	r2, [pc, #28]	; (8013c24 <IncreaseBufferPointer+0x28>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d102      	bne.n	8013c12 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013c0c:	4b06      	ldr	r3, [pc, #24]	; (8013c28 <IncreaseBufferPointer+0x2c>)
 8013c0e:	607b      	str	r3, [r7, #4]
 8013c10:	e002      	b.n	8013c18 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3304      	adds	r3, #4
 8013c16:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013c18:	687b      	ldr	r3, [r7, #4]
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	370c      	adds	r7, #12
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bc80      	pop	{r7}
 8013c22:	4770      	bx	lr
 8013c24:	20001ac4 	.word	0x20001ac4
 8013c28:	20001ab4 	.word	0x20001ab4

08013c2c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	4603      	mov	r3, r0
 8013c34:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013c36:	79fb      	ldrb	r3, [r7, #7]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d101      	bne.n	8013c40 <IsListEmpty+0x14>
    {
        return true;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	e000      	b.n	8013c42 <IsListEmpty+0x16>
    }
    return false;
 8013c40:	2300      	movs	r3, #0
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	370c      	adds	r7, #12
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bc80      	pop	{r7}
 8013c4a:	4770      	bx	lr

08013c4c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	4603      	mov	r3, r0
 8013c54:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013c56:	79fb      	ldrb	r3, [r7, #7]
 8013c58:	2b04      	cmp	r3, #4
 8013c5a:	d901      	bls.n	8013c60 <IsListFull+0x14>
    {
        return true;
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	e000      	b.n	8013c62 <IsListFull+0x16>
    }
    return false;
 8013c60:	2300      	movs	r3, #0
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	370c      	adds	r7, #12
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bc80      	pop	{r7}
 8013c6a:	4770      	bx	lr

08013c6c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b086      	sub	sp, #24
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	4603      	mov	r3, r0
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
 8013c78:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c7e:	4b13      	ldr	r3, [pc, #76]	; (8013ccc <GetElement+0x60>)
 8013c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7ff ffd1 	bl	8013c2c <IsListEmpty>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d001      	beq.n	8013c94 <GetElement+0x28>
    {
        return NULL;
 8013c90:	2300      	movs	r3, #0
 8013c92:	e017      	b.n	8013cc4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013c94:	2300      	movs	r3, #0
 8013c96:	74fb      	strb	r3, [r7, #19]
 8013c98:	e00d      	b.n	8013cb6 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	7bfa      	ldrb	r2, [r7, #15]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d101      	bne.n	8013ca8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	e00d      	b.n	8013cc4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013ca8:	6978      	ldr	r0, [r7, #20]
 8013caa:	f7ff ffa7 	bl	8013bfc <IncreaseBufferPointer>
 8013cae:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013cb0:	7cfb      	ldrb	r3, [r7, #19]
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	74fb      	strb	r3, [r7, #19]
 8013cb6:	4b05      	ldr	r3, [pc, #20]	; (8013ccc <GetElement+0x60>)
 8013cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cbc:	7cfa      	ldrb	r2, [r7, #19]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d3eb      	bcc.n	8013c9a <GetElement+0x2e>
    }

    return NULL;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3718      	adds	r7, #24
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	20001aa8 	.word	0x20001aa8

08013cd0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013cd8:	4a0c      	ldr	r2, [pc, #48]	; (8013d0c <LoRaMacConfirmQueueInit+0x3c>)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013cde:	4b0b      	ldr	r3, [pc, #44]	; (8013d0c <LoRaMacConfirmQueueInit+0x3c>)
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ce6:	4b09      	ldr	r3, [pc, #36]	; (8013d0c <LoRaMacConfirmQueueInit+0x3c>)
 8013ce8:	4a09      	ldr	r2, [pc, #36]	; (8013d10 <LoRaMacConfirmQueueInit+0x40>)
 8013cea:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013cec:	4b07      	ldr	r3, [pc, #28]	; (8013d0c <LoRaMacConfirmQueueInit+0x3c>)
 8013cee:	4a08      	ldr	r2, [pc, #32]	; (8013d10 <LoRaMacConfirmQueueInit+0x40>)
 8013cf0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013cf2:	2214      	movs	r2, #20
 8013cf4:	21ff      	movs	r1, #255	; 0xff
 8013cf6:	4806      	ldr	r0, [pc, #24]	; (8013d10 <LoRaMacConfirmQueueInit+0x40>)
 8013cf8:	f005 f9aa 	bl	8019050 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013cfc:	4b03      	ldr	r3, [pc, #12]	; (8013d0c <LoRaMacConfirmQueueInit+0x3c>)
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013d04:	bf00      	nop
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	20001aa8 	.word	0x20001aa8
 8013d10:	20001ab4 	.word	0x20001ab4

08013d14 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013d1c:	4b19      	ldr	r3, [pc, #100]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7ff ff92 	bl	8013c4c <IsListFull>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d001      	beq.n	8013d32 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	e024      	b.n	8013d7c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013d32:	4b14      	ldr	r3, [pc, #80]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d34:	689b      	ldr	r3, [r3, #8]
 8013d36:	687a      	ldr	r2, [r7, #4]
 8013d38:	7812      	ldrb	r2, [r2, #0]
 8013d3a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013d3c:	4b11      	ldr	r3, [pc, #68]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d3e:	689b      	ldr	r3, [r3, #8]
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	7852      	ldrb	r2, [r2, #1]
 8013d44:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013d46:	4b0f      	ldr	r3, [pc, #60]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	78d2      	ldrb	r2, [r2, #3]
 8013d4e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013d50:	4b0c      	ldr	r3, [pc, #48]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d52:	689b      	ldr	r3, [r3, #8]
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	7892      	ldrb	r2, [r2, #2]
 8013d58:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013d5a:	4b0a      	ldr	r3, [pc, #40]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d60:	3301      	adds	r3, #1
 8013d62:	b2da      	uxtb	r2, r3
 8013d64:	4b07      	ldr	r3, [pc, #28]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d66:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013d6a:	4b06      	ldr	r3, [pc, #24]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d6c:	689b      	ldr	r3, [r3, #8]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7ff ff44 	bl	8013bfc <IncreaseBufferPointer>
 8013d74:	4603      	mov	r3, r0
 8013d76:	4a03      	ldr	r2, [pc, #12]	; (8013d84 <LoRaMacConfirmQueueAdd+0x70>)
 8013d78:	6093      	str	r3, [r2, #8]

    return true;
 8013d7a:	2301      	movs	r3, #1
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	20001aa8 	.word	0x20001aa8

08013d88 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013d8c:	4b0e      	ldr	r3, [pc, #56]	; (8013dc8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7ff ff4a 	bl	8013c2c <IsListEmpty>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d001      	beq.n	8013da2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013d9e:	2300      	movs	r3, #0
 8013da0:	e010      	b.n	8013dc4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013da2:	4b09      	ldr	r3, [pc, #36]	; (8013dc8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013da8:	3b01      	subs	r3, #1
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	4b06      	ldr	r3, [pc, #24]	; (8013dc8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013dae:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013db2:	4b05      	ldr	r3, [pc, #20]	; (8013dc8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013db4:	685b      	ldr	r3, [r3, #4]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7ff ff20 	bl	8013bfc <IncreaseBufferPointer>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	4a02      	ldr	r2, [pc, #8]	; (8013dc8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013dc0:	6053      	str	r3, [r2, #4]

    return true;
 8013dc2:	2301      	movs	r3, #1
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	20001aa8 	.word	0x20001aa8

08013dcc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	460a      	mov	r2, r1
 8013dd6:	71fb      	strb	r3, [r7, #7]
 8013dd8:	4613      	mov	r3, r2
 8013dda:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013de0:	4b10      	ldr	r3, [pc, #64]	; (8013e24 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7ff ff20 	bl	8013c2c <IsListEmpty>
 8013dec:	4603      	mov	r3, r0
 8013dee:	f083 0301 	eor.w	r3, r3, #1
 8013df2:	b2db      	uxtb	r3, r3
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d011      	beq.n	8013e1c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013df8:	4b0a      	ldr	r3, [pc, #40]	; (8013e24 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013dfa:	6859      	ldr	r1, [r3, #4]
 8013dfc:	4b09      	ldr	r3, [pc, #36]	; (8013e24 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013dfe:	689a      	ldr	r2, [r3, #8]
 8013e00:	79bb      	ldrb	r3, [r7, #6]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7ff ff32 	bl	8013c6c <GetElement>
 8013e08:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d005      	beq.n	8013e1c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	79fa      	ldrb	r2, [r7, #7]
 8013e14:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2201      	movs	r2, #1
 8013e1a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013e1c:	bf00      	nop
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	20001aa8 	.word	0x20001aa8

08013e28 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b084      	sub	sp, #16
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	4603      	mov	r3, r0
 8013e30:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013e32:	2300      	movs	r3, #0
 8013e34:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013e36:	4b10      	ldr	r3, [pc, #64]	; (8013e78 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7ff fef5 	bl	8013c2c <IsListEmpty>
 8013e42:	4603      	mov	r3, r0
 8013e44:	f083 0301 	eor.w	r3, r3, #1
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00e      	beq.n	8013e6c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013e4e:	4b0a      	ldr	r3, [pc, #40]	; (8013e78 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013e50:	6859      	ldr	r1, [r3, #4]
 8013e52:	4b09      	ldr	r3, [pc, #36]	; (8013e78 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013e54:	689a      	ldr	r2, [r3, #8]
 8013e56:	79fb      	ldrb	r3, [r7, #7]
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7ff ff07 	bl	8013c6c <GetElement>
 8013e5e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d002      	beq.n	8013e6c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	785b      	ldrb	r3, [r3, #1]
 8013e6a:	e000      	b.n	8013e6e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013e6c:	2301      	movs	r3, #1
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3710      	adds	r7, #16
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	20001aa8 	.word	0x20001aa8

08013e7c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	4603      	mov	r3, r0
 8013e84:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013e86:	4b16      	ldr	r3, [pc, #88]	; (8013ee0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013e8c:	4a14      	ldr	r2, [pc, #80]	; (8013ee0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013e8e:	79fb      	ldrb	r3, [r7, #7]
 8013e90:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013e94:	4b12      	ldr	r3, [pc, #72]	; (8013ee0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7ff fec6 	bl	8013c2c <IsListEmpty>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	f083 0301 	eor.w	r3, r3, #1
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d015      	beq.n	8013ed8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	79fa      	ldrb	r2, [r7, #7]
 8013eb0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	78db      	ldrb	r3, [r3, #3]
 8013eb6:	f083 0301 	eor.w	r3, r3, #1
 8013eba:	b2db      	uxtb	r3, r3
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d002      	beq.n	8013ec6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013ec6:	68f8      	ldr	r0, [r7, #12]
 8013ec8:	f7ff fe98 	bl	8013bfc <IncreaseBufferPointer>
 8013ecc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013ece:	4b04      	ldr	r3, [pc, #16]	; (8013ee0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013ed0:	689b      	ldr	r3, [r3, #8]
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d1e9      	bne.n	8013eac <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013ed8:	bf00      	nop
 8013eda:	3710      	adds	r7, #16
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	20001aa8 	.word	0x20001aa8

08013ee4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b082      	sub	sp, #8
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	4603      	mov	r3, r0
 8013eec:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013eee:	4b09      	ldr	r3, [pc, #36]	; (8013f14 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013ef0:	6859      	ldr	r1, [r3, #4]
 8013ef2:	4b08      	ldr	r3, [pc, #32]	; (8013f14 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013ef4:	689a      	ldr	r2, [r3, #8]
 8013ef6:	79fb      	ldrb	r3, [r7, #7]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7ff feb7 	bl	8013c6c <GetElement>
 8013efe:	4603      	mov	r3, r0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d001      	beq.n	8013f08 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013f04:	2301      	movs	r3, #1
 8013f06:	e000      	b.n	8013f0a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013f08:	2300      	movs	r3, #0
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	20001aa8 	.word	0x20001aa8

08013f18 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013f20:	4b25      	ldr	r3, [pc, #148]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f26:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8013f2c:	f107 0308 	add.w	r3, r7, #8
 8013f30:	2204      	movs	r2, #4
 8013f32:	2100      	movs	r1, #0
 8013f34:	4618      	mov	r0, r3
 8013f36:	f005 f88b 	bl	8019050 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	73fb      	strb	r3, [r7, #15]
 8013f3e:	e032      	b.n	8013fa6 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013f40:	4b1d      	ldr	r3, [pc, #116]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	781a      	ldrb	r2, [r3, #0]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013f4a:	4b1b      	ldr	r3, [pc, #108]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	785a      	ldrb	r2, [r3, #1]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013f54:	4b18      	ldr	r3, [pc, #96]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	789b      	ldrb	r3, [r3, #2]
 8013f5a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013f5c:	7b7b      	ldrb	r3, [r7, #13]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d005      	beq.n	8013f6e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013f62:	4b15      	ldr	r3, [pc, #84]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	689b      	ldr	r3, [r3, #8]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	4798      	blx	r3
 8013f6c:	e00b      	b.n	8013f86 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013f6e:	4b12      	ldr	r3, [pc, #72]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013f76:	4b10      	ldr	r3, [pc, #64]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	785b      	ldrb	r3, [r3, #1]
 8013f7c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013f7e:	4b0e      	ldr	r3, [pc, #56]	; (8013fb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	78db      	ldrb	r3, [r3, #3]
 8013f84:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013f86:	f7ff feff 	bl	8013d88 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013f8a:	7b7b      	ldrb	r3, [r7, #13]
 8013f8c:	f083 0301 	eor.w	r3, r3, #1
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d004      	beq.n	8013fa0 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013f96:	f107 0308 	add.w	r3, r7, #8
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7ff feba 	bl	8013d14 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	73fb      	strb	r3, [r7, #15]
 8013fa6:	7bfa      	ldrb	r2, [r7, #15]
 8013fa8:	7bbb      	ldrb	r3, [r7, #14]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d3c8      	bcc.n	8013f40 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8013fae:	bf00      	nop
 8013fb0:	bf00      	nop
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	20001aa8 	.word	0x20001aa8

08013fbc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013fc0:	4b03      	ldr	r3, [pc, #12]	; (8013fd0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bc80      	pop	{r7}
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop
 8013fd0:	20001aa8 	.word	0x20001aa8

08013fd4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013fd8:	4b06      	ldr	r3, [pc, #24]	; (8013ff4 <LoRaMacConfirmQueueIsFull+0x20>)
 8013fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7ff fe34 	bl	8013c4c <IsListFull>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013fea:	2301      	movs	r3, #1
 8013fec:	e000      	b.n	8013ff0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013fee:	2300      	movs	r3, #0
    }
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	20001aa8 	.word	0x20001aa8

08013ff8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b08e      	sub	sp, #56	; 0x38
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	607b      	str	r3, [r7, #4]
 8014002:	460b      	mov	r3, r1
 8014004:	817b      	strh	r3, [r7, #10]
 8014006:	4613      	mov	r3, r2
 8014008:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d101      	bne.n	8014014 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014010:	2309      	movs	r3, #9
 8014012:	e086      	b.n	8014122 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8014014:	2300      	movs	r3, #0
 8014016:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801401a:	2301      	movs	r3, #1
 801401c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 801401e:	2300      	movs	r3, #0
 8014020:	623b      	str	r3, [r7, #32]
 8014022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014026:	2200      	movs	r2, #0
 8014028:	601a      	str	r2, [r3, #0]
 801402a:	605a      	str	r2, [r3, #4]
 801402c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801402e:	2300      	movs	r3, #0
 8014030:	613b      	str	r3, [r7, #16]
 8014032:	f107 0314 	add.w	r3, r7, #20
 8014036:	2200      	movs	r2, #0
 8014038:	601a      	str	r2, [r3, #0]
 801403a:	605a      	str	r2, [r3, #4]
 801403c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801403e:	2301      	movs	r3, #1
 8014040:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014042:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014046:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	b2db      	uxtb	r3, r3
 801404c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	0a1b      	lsrs	r3, r3, #8
 8014052:	b2db      	uxtb	r3, r3
 8014054:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	0c1b      	lsrs	r3, r3, #16
 801405a:	b2db      	uxtb	r3, r3
 801405c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	0e1b      	lsrs	r3, r3, #24
 8014062:	b2db      	uxtb	r3, r3
 8014064:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8014066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014068:	b2db      	uxtb	r3, r3
 801406a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801406c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801406e:	0a1b      	lsrs	r3, r3, #8
 8014070:	b2db      	uxtb	r3, r3
 8014072:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014076:	0c1b      	lsrs	r3, r3, #16
 8014078:	b2db      	uxtb	r3, r3
 801407a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801407c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801407e:	0e1b      	lsrs	r3, r3, #24
 8014080:	b2db      	uxtb	r3, r3
 8014082:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014084:	e048      	b.n	8014118 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8014086:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014088:	b2db      	uxtb	r3, r3
 801408a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801408c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801408e:	3301      	adds	r3, #1
 8014090:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014092:	f107 0320 	add.w	r3, r7, #32
 8014096:	7a7a      	ldrb	r2, [r7, #9]
 8014098:	f107 0010 	add.w	r0, r7, #16
 801409c:	2110      	movs	r1, #16
 801409e:	f7f8 fa79 	bl	800c594 <SecureElementAesEncrypt>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d001      	beq.n	80140ac <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80140a8:	230e      	movs	r3, #14
 80140aa:	e03a      	b.n	8014122 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80140ac:	2300      	movs	r3, #0
 80140ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80140b2:	e01e      	b.n	80140f2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80140b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80140b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80140bc:	4413      	add	r3, r2
 80140be:	461a      	mov	r2, r3
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	4413      	add	r3, r2
 80140c4:	7819      	ldrb	r1, [r3, #0]
 80140c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80140ca:	3338      	adds	r3, #56	; 0x38
 80140cc:	443b      	add	r3, r7
 80140ce:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80140d2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80140d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80140da:	4403      	add	r3, r0
 80140dc:	4618      	mov	r0, r3
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	4403      	add	r3, r0
 80140e2:	404a      	eors	r2, r1
 80140e4:	b2d2      	uxtb	r2, r2
 80140e6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80140e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80140ec:	3301      	adds	r3, #1
 80140ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80140f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80140f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80140fa:	2a10      	cmp	r2, #16
 80140fc:	bfa8      	it	ge
 80140fe:	2210      	movge	r2, #16
 8014100:	b212      	sxth	r2, r2
 8014102:	4293      	cmp	r3, r2
 8014104:	dbd6      	blt.n	80140b4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8014106:	897b      	ldrh	r3, [r7, #10]
 8014108:	3b10      	subs	r3, #16
 801410a:	b29b      	uxth	r3, r3
 801410c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801410e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014112:	3310      	adds	r3, #16
 8014114:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8014118:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801411c:	2b00      	cmp	r3, #0
 801411e:	dcb2      	bgt.n	8014086 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014120:	2300      	movs	r3, #0
}
 8014122:	4618      	mov	r0, r3
 8014124:	3738      	adds	r7, #56	; 0x38
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801412a:	b490      	push	{r4, r7}
 801412c:	b082      	sub	sp, #8
 801412e:	af00      	add	r7, sp, #0
 8014130:	4604      	mov	r4, r0
 8014132:	4608      	mov	r0, r1
 8014134:	4611      	mov	r1, r2
 8014136:	461a      	mov	r2, r3
 8014138:	4623      	mov	r3, r4
 801413a:	80fb      	strh	r3, [r7, #6]
 801413c:	4603      	mov	r3, r0
 801413e:	717b      	strb	r3, [r7, #5]
 8014140:	460b      	mov	r3, r1
 8014142:	713b      	strb	r3, [r7, #4]
 8014144:	4613      	mov	r3, r2
 8014146:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d101      	bne.n	8014152 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801414e:	2309      	movs	r3, #9
 8014150:	e04e      	b.n	80141f0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	2249      	movs	r2, #73	; 0x49
 8014156:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	3301      	adds	r3, #1
 801415c:	2200      	movs	r2, #0
 801415e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	3302      	adds	r3, #2
 8014164:	2200      	movs	r2, #0
 8014166:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014168:	69bb      	ldr	r3, [r7, #24]
 801416a:	3303      	adds	r3, #3
 801416c:	2200      	movs	r2, #0
 801416e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014170:	69bb      	ldr	r3, [r7, #24]
 8014172:	3304      	adds	r3, #4
 8014174:	2200      	movs	r2, #0
 8014176:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	3305      	adds	r3, #5
 801417c:	78fa      	ldrb	r2, [r7, #3]
 801417e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	3306      	adds	r3, #6
 8014184:	693a      	ldr	r2, [r7, #16]
 8014186:	b2d2      	uxtb	r2, r2
 8014188:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	0a1a      	lsrs	r2, r3, #8
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	3307      	adds	r3, #7
 8014192:	b2d2      	uxtb	r2, r2
 8014194:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014196:	693b      	ldr	r3, [r7, #16]
 8014198:	0c1a      	lsrs	r2, r3, #16
 801419a:	69bb      	ldr	r3, [r7, #24]
 801419c:	3308      	adds	r3, #8
 801419e:	b2d2      	uxtb	r2, r2
 80141a0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	0e1a      	lsrs	r2, r3, #24
 80141a6:	69bb      	ldr	r3, [r7, #24]
 80141a8:	3309      	adds	r3, #9
 80141aa:	b2d2      	uxtb	r2, r2
 80141ac:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	330a      	adds	r3, #10
 80141b2:	697a      	ldr	r2, [r7, #20]
 80141b4:	b2d2      	uxtb	r2, r2
 80141b6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	0a1a      	lsrs	r2, r3, #8
 80141bc:	69bb      	ldr	r3, [r7, #24]
 80141be:	330b      	adds	r3, #11
 80141c0:	b2d2      	uxtb	r2, r2
 80141c2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	0c1a      	lsrs	r2, r3, #16
 80141c8:	69bb      	ldr	r3, [r7, #24]
 80141ca:	330c      	adds	r3, #12
 80141cc:	b2d2      	uxtb	r2, r2
 80141ce:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	0e1a      	lsrs	r2, r3, #24
 80141d4:	69bb      	ldr	r3, [r7, #24]
 80141d6:	330d      	adds	r3, #13
 80141d8:	b2d2      	uxtb	r2, r2
 80141da:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80141dc:	69bb      	ldr	r3, [r7, #24]
 80141de:	330e      	adds	r3, #14
 80141e0:	2200      	movs	r2, #0
 80141e2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80141e4:	69bb      	ldr	r3, [r7, #24]
 80141e6:	330f      	adds	r3, #15
 80141e8:	88fa      	ldrh	r2, [r7, #6]
 80141ea:	b2d2      	uxtb	r2, r2
 80141ec:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80141ee:	2300      	movs	r3, #0
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bc90      	pop	{r4, r7}
 80141f8:	4770      	bx	lr

080141fa <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80141fa:	b590      	push	{r4, r7, lr}
 80141fc:	b08b      	sub	sp, #44	; 0x2c
 80141fe:	af04      	add	r7, sp, #16
 8014200:	6078      	str	r0, [r7, #4]
 8014202:	4608      	mov	r0, r1
 8014204:	4611      	mov	r1, r2
 8014206:	461a      	mov	r2, r3
 8014208:	4603      	mov	r3, r0
 801420a:	807b      	strh	r3, [r7, #2]
 801420c:	460b      	mov	r3, r1
 801420e:	707b      	strb	r3, [r7, #1]
 8014210:	4613      	mov	r3, r2
 8014212:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d002      	beq.n	8014220 <ComputeCmacB0+0x26>
 801421a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801421c:	2b00      	cmp	r3, #0
 801421e:	d101      	bne.n	8014224 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014220:	2309      	movs	r3, #9
 8014222:	e024      	b.n	801426e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014224:	887b      	ldrh	r3, [r7, #2]
 8014226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801422a:	d901      	bls.n	8014230 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801422c:	230d      	movs	r3, #13
 801422e:	e01e      	b.n	801426e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014230:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8014234:	783a      	ldrb	r2, [r7, #0]
 8014236:	7879      	ldrb	r1, [r7, #1]
 8014238:	8878      	ldrh	r0, [r7, #2]
 801423a:	f107 0308 	add.w	r3, r7, #8
 801423e:	9302      	str	r3, [sp, #8]
 8014240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014242:	9301      	str	r3, [sp, #4]
 8014244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014246:	9300      	str	r3, [sp, #0]
 8014248:	4623      	mov	r3, r4
 801424a:	f7ff ff6e 	bl	801412a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801424e:	887a      	ldrh	r2, [r7, #2]
 8014250:	7879      	ldrb	r1, [r7, #1]
 8014252:	f107 0008 	add.w	r0, r7, #8
 8014256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	460b      	mov	r3, r1
 801425c:	6879      	ldr	r1, [r7, #4]
 801425e:	f7f8 f953 	bl	800c508 <SecureElementComputeAesCmac>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d001      	beq.n	801426c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014268:	230e      	movs	r3, #14
 801426a:	e000      	b.n	801426e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801426c:	2300      	movs	r3, #0
}
 801426e:	4618      	mov	r0, r3
 8014270:	371c      	adds	r7, #28
 8014272:	46bd      	mov	sp, r7
 8014274:	bd90      	pop	{r4, r7, pc}

08014276 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014276:	b590      	push	{r4, r7, lr}
 8014278:	b0cd      	sub	sp, #308	; 0x134
 801427a:	af04      	add	r7, sp, #16
 801427c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014280:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8014284:	6020      	str	r0, [r4, #0]
 8014286:	460c      	mov	r4, r1
 8014288:	4610      	mov	r0, r2
 801428a:	4619      	mov	r1, r3
 801428c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014290:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014294:	4622      	mov	r2, r4
 8014296:	801a      	strh	r2, [r3, #0]
 8014298:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801429c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80142a0:	4602      	mov	r2, r0
 80142a2:	701a      	strb	r2, [r3, #0]
 80142a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80142ac:	460a      	mov	r2, r1
 80142ae:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80142b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d101      	bne.n	80142c2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80142be:	2309      	movs	r3, #9
 80142c0:	e063      	b.n	801438a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80142c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142c6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80142ca:	881b      	ldrh	r3, [r3, #0]
 80142cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80142d0:	d901      	bls.n	80142d6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80142d2:	230d      	movs	r3, #13
 80142d4:	e059      	b.n	801438a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80142d6:	f107 030c 	add.w	r3, r7, #12
 80142da:	f44f 7288 	mov.w	r2, #272	; 0x110
 80142de:	2100      	movs	r1, #0
 80142e0:	4618      	mov	r0, r3
 80142e2:	f004 feb5 	bl	8019050 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80142e6:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80142ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80142f2:	781a      	ldrb	r2, [r3, #0]
 80142f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142f8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80142fc:	7819      	ldrb	r1, [r3, #0]
 80142fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014302:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014306:	8818      	ldrh	r0, [r3, #0]
 8014308:	f107 030c 	add.w	r3, r7, #12
 801430c:	9302      	str	r3, [sp, #8]
 801430e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014312:	9301      	str	r3, [sp, #4]
 8014314:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014318:	9300      	str	r3, [sp, #0]
 801431a:	4623      	mov	r3, r4
 801431c:	f7ff ff05 	bl	801412a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014320:	f107 030c 	add.w	r3, r7, #12
 8014324:	3310      	adds	r3, #16
 8014326:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801432a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801432e:	8812      	ldrh	r2, [r2, #0]
 8014330:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014334:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014338:	6809      	ldr	r1, [r1, #0]
 801433a:	4618      	mov	r0, r3
 801433c:	f004 fe4d 	bl	8018fda <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014340:	2306      	movs	r3, #6
 8014342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014346:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801434a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801434e:	881b      	ldrh	r3, [r3, #0]
 8014350:	3310      	adds	r3, #16
 8014352:	4619      	mov	r1, r3
 8014354:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014358:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	f107 000c 	add.w	r0, r7, #12
 8014362:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014366:	f7f8 f8e9 	bl	800c53c <SecureElementVerifyAesCmac>
 801436a:	4603      	mov	r3, r0
 801436c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014374:	2b00      	cmp	r3, #0
 8014376:	d101      	bne.n	801437c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014378:	2300      	movs	r3, #0
 801437a:	e006      	b.n	801438a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801437c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014380:	2b01      	cmp	r3, #1
 8014382:	d101      	bne.n	8014388 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014384:	2301      	movs	r3, #1
 8014386:	e000      	b.n	801438a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014388:	230e      	movs	r3, #14
}
 801438a:	4618      	mov	r0, r3
 801438c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014390:	46bd      	mov	sp, r7
 8014392:	bd90      	pop	{r4, r7, pc}

08014394 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
 801439a:	4603      	mov	r3, r0
 801439c:	6039      	str	r1, [r7, #0]
 801439e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80143a0:	2300      	movs	r3, #0
 80143a2:	73fb      	strb	r3, [r7, #15]
 80143a4:	e011      	b.n	80143ca <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80143a6:	7bfb      	ldrb	r3, [r7, #15]
 80143a8:	4a0c      	ldr	r2, [pc, #48]	; (80143dc <GetKeyAddrItem+0x48>)
 80143aa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80143ae:	79fa      	ldrb	r2, [r7, #7]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d107      	bne.n	80143c4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80143b4:	7bfb      	ldrb	r3, [r7, #15]
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	4a08      	ldr	r2, [pc, #32]	; (80143dc <GetKeyAddrItem+0x48>)
 80143ba:	441a      	add	r2, r3
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80143c0:	2300      	movs	r3, #0
 80143c2:	e006      	b.n	80143d2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80143c4:	7bfb      	ldrb	r3, [r7, #15]
 80143c6:	3301      	adds	r3, #1
 80143c8:	73fb      	strb	r3, [r7, #15]
 80143ca:	7bfb      	ldrb	r3, [r7, #15]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d9ea      	bls.n	80143a6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80143d0:	230b      	movs	r3, #11
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3714      	adds	r7, #20
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bc80      	pop	{r7}
 80143da:	4770      	bx	lr
 80143dc:	20000110 	.word	0x20000110

080143e0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b088      	sub	sp, #32
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60b9      	str	r1, [r7, #8]
 80143e8:	607a      	str	r2, [r7, #4]
 80143ea:	461a      	mov	r2, r3
 80143ec:	4603      	mov	r3, r0
 80143ee:	73fb      	strb	r3, [r7, #15]
 80143f0:	4613      	mov	r3, r2
 80143f2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80143f4:	2300      	movs	r3, #0
 80143f6:	613b      	str	r3, [r7, #16]
 80143f8:	f107 0314 	add.w	r3, r7, #20
 80143fc:	2200      	movs	r2, #0
 80143fe:	601a      	str	r2, [r3, #0]
 8014400:	605a      	str	r2, [r3, #4]
 8014402:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8014404:	7bfb      	ldrb	r3, [r7, #15]
 8014406:	2b08      	cmp	r3, #8
 8014408:	d002      	beq.n	8014410 <DeriveSessionKey10x+0x30>
 801440a:	2b09      	cmp	r3, #9
 801440c:	d003      	beq.n	8014416 <DeriveSessionKey10x+0x36>
 801440e:	e005      	b.n	801441c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8014410:	2301      	movs	r3, #1
 8014412:	743b      	strb	r3, [r7, #16]
            break;
 8014414:	e004      	b.n	8014420 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014416:	2302      	movs	r3, #2
 8014418:	743b      	strb	r3, [r7, #16]
            break;
 801441a:	e001      	b.n	8014420 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801441c:	230a      	movs	r3, #10
 801441e:	e02a      	b.n	8014476 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	b2db      	uxtb	r3, r3
 8014424:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	0a1b      	lsrs	r3, r3, #8
 801442a:	b2db      	uxtb	r3, r3
 801442c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	0c1b      	lsrs	r3, r3, #16
 8014432:	b2db      	uxtb	r3, r3
 8014434:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	b2db      	uxtb	r3, r3
 801443a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	0a1b      	lsrs	r3, r3, #8
 8014440:	b2db      	uxtb	r3, r3
 8014442:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	0c1b      	lsrs	r3, r3, #16
 8014448:	b2db      	uxtb	r3, r3
 801444a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801444c:	89bb      	ldrh	r3, [r7, #12]
 801444e:	b2db      	uxtb	r3, r3
 8014450:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014452:	89bb      	ldrh	r3, [r7, #12]
 8014454:	0a1b      	lsrs	r3, r3, #8
 8014456:	b29b      	uxth	r3, r3
 8014458:	b2db      	uxtb	r3, r3
 801445a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801445c:	7bfa      	ldrb	r2, [r7, #15]
 801445e:	f107 0310 	add.w	r3, r7, #16
 8014462:	2101      	movs	r1, #1
 8014464:	4618      	mov	r0, r3
 8014466:	f7f8 f915 	bl	800c694 <SecureElementDeriveAndStoreKey>
 801446a:	4603      	mov	r3, r0
 801446c:	2b00      	cmp	r3, #0
 801446e:	d001      	beq.n	8014474 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014470:	230e      	movs	r3, #14
 8014472:	e000      	b.n	8014476 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3720      	adds	r7, #32
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
	...

08014480 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014480:	b480      	push	{r7}
 8014482:	b083      	sub	sp, #12
 8014484:	af00      	add	r7, sp, #0
 8014486:	4603      	mov	r3, r0
 8014488:	6039      	str	r1, [r7, #0]
 801448a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d101      	bne.n	8014496 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014492:	2309      	movs	r3, #9
 8014494:	e029      	b.n	80144ea <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8014496:	79fb      	ldrb	r3, [r7, #7]
 8014498:	3b01      	subs	r3, #1
 801449a:	2b03      	cmp	r3, #3
 801449c:	d822      	bhi.n	80144e4 <GetLastFcntDown+0x64>
 801449e:	a201      	add	r2, pc, #4	; (adr r2, 80144a4 <GetLastFcntDown+0x24>)
 80144a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144a4:	080144b5 	.word	0x080144b5
 80144a8:	080144c1 	.word	0x080144c1
 80144ac:	080144cd 	.word	0x080144cd
 80144b0:	080144d9 	.word	0x080144d9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80144b4:	4b0f      	ldr	r3, [pc, #60]	; (80144f4 <GetLastFcntDown+0x74>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	691a      	ldr	r2, [r3, #16]
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	601a      	str	r2, [r3, #0]
            break;
 80144be:	e013      	b.n	80144e8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80144c0:	4b0c      	ldr	r3, [pc, #48]	; (80144f4 <GetLastFcntDown+0x74>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	695a      	ldr	r2, [r3, #20]
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	601a      	str	r2, [r3, #0]
            break;
 80144ca:	e00d      	b.n	80144e8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80144cc:	4b09      	ldr	r3, [pc, #36]	; (80144f4 <GetLastFcntDown+0x74>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	699a      	ldr	r2, [r3, #24]
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	601a      	str	r2, [r3, #0]
            break;
 80144d6:	e007      	b.n	80144e8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80144d8:	4b06      	ldr	r3, [pc, #24]	; (80144f4 <GetLastFcntDown+0x74>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	69da      	ldr	r2, [r3, #28]
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	601a      	str	r2, [r3, #0]
            break;
 80144e2:	e001      	b.n	80144e8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80144e4:	2305      	movs	r3, #5
 80144e6:	e000      	b.n	80144ea <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80144e8:	2300      	movs	r3, #0
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	370c      	adds	r7, #12
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bc80      	pop	{r7}
 80144f2:	4770      	bx	lr
 80144f4:	20001acc 	.word	0x20001acc

080144f8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	4603      	mov	r3, r0
 8014500:	6039      	str	r1, [r7, #0]
 8014502:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014504:	2300      	movs	r3, #0
 8014506:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014508:	f107 020c 	add.w	r2, r7, #12
 801450c:	79fb      	ldrb	r3, [r7, #7]
 801450e:	4611      	mov	r1, r2
 8014510:	4618      	mov	r0, r3
 8014512:	f7ff ffb5 	bl	8014480 <GetLastFcntDown>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	d001      	beq.n	8014520 <CheckFCntDown+0x28>
    {
        return false;
 801451c:	2300      	movs	r3, #0
 801451e:	e00a      	b.n	8014536 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	683a      	ldr	r2, [r7, #0]
 8014524:	429a      	cmp	r2, r3
 8014526:	d803      	bhi.n	8014530 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8014528:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801452a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801452e:	d101      	bne.n	8014534 <CheckFCntDown+0x3c>
    {
        return true;
 8014530:	2301      	movs	r3, #1
 8014532:	e000      	b.n	8014536 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014534:	2300      	movs	r3, #0
    }
}
 8014536:	4618      	mov	r0, r3
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
	...

08014540 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014540:	b480      	push	{r7}
 8014542:	b083      	sub	sp, #12
 8014544:	af00      	add	r7, sp, #0
 8014546:	4603      	mov	r3, r0
 8014548:	6039      	str	r1, [r7, #0]
 801454a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801454c:	79fb      	ldrb	r3, [r7, #7]
 801454e:	3b01      	subs	r3, #1
 8014550:	2b03      	cmp	r3, #3
 8014552:	d82b      	bhi.n	80145ac <UpdateFCntDown+0x6c>
 8014554:	a201      	add	r2, pc, #4	; (adr r2, 801455c <UpdateFCntDown+0x1c>)
 8014556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801455a:	bf00      	nop
 801455c:	0801456d 	.word	0x0801456d
 8014560:	0801457f 	.word	0x0801457f
 8014564:	08014591 	.word	0x08014591
 8014568:	080145a3 	.word	0x080145a3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801456c:	4b12      	ldr	r3, [pc, #72]	; (80145b8 <UpdateFCntDown+0x78>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	683a      	ldr	r2, [r7, #0]
 8014572:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8014574:	4b10      	ldr	r3, [pc, #64]	; (80145b8 <UpdateFCntDown+0x78>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	683a      	ldr	r2, [r7, #0]
 801457a:	621a      	str	r2, [r3, #32]
            break;
 801457c:	e017      	b.n	80145ae <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801457e:	4b0e      	ldr	r3, [pc, #56]	; (80145b8 <UpdateFCntDown+0x78>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	683a      	ldr	r2, [r7, #0]
 8014584:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8014586:	4b0c      	ldr	r3, [pc, #48]	; (80145b8 <UpdateFCntDown+0x78>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	683a      	ldr	r2, [r7, #0]
 801458c:	621a      	str	r2, [r3, #32]
            break;
 801458e:	e00e      	b.n	80145ae <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014590:	4b09      	ldr	r3, [pc, #36]	; (80145b8 <UpdateFCntDown+0x78>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	683a      	ldr	r2, [r7, #0]
 8014596:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8014598:	4b07      	ldr	r3, [pc, #28]	; (80145b8 <UpdateFCntDown+0x78>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	683a      	ldr	r2, [r7, #0]
 801459e:	621a      	str	r2, [r3, #32]
            break;
 80145a0:	e005      	b.n	80145ae <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80145a2:	4b05      	ldr	r3, [pc, #20]	; (80145b8 <UpdateFCntDown+0x78>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	683a      	ldr	r2, [r7, #0]
 80145a8:	61da      	str	r2, [r3, #28]
            break;
 80145aa:	e000      	b.n	80145ae <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80145ac:	bf00      	nop
    }
}
 80145ae:	bf00      	nop
 80145b0:	370c      	adds	r7, #12
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bc80      	pop	{r7}
 80145b6:	4770      	bx	lr
 80145b8:	20001acc 	.word	0x20001acc

080145bc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80145c2:	4b18      	ldr	r3, [pc, #96]	; (8014624 <ResetFCnts+0x68>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	2200      	movs	r2, #0
 80145c8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80145ca:	4b16      	ldr	r3, [pc, #88]	; (8014624 <ResetFCnts+0x68>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145d2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80145d4:	4b13      	ldr	r3, [pc, #76]	; (8014624 <ResetFCnts+0x68>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145dc:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80145de:	4b11      	ldr	r3, [pc, #68]	; (8014624 <ResetFCnts+0x68>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145e6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80145e8:	4b0e      	ldr	r3, [pc, #56]	; (8014624 <ResetFCnts+0x68>)
 80145ea:	681a      	ldr	r2, [r3, #0]
 80145ec:	4b0d      	ldr	r3, [pc, #52]	; (8014624 <ResetFCnts+0x68>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	6992      	ldr	r2, [r2, #24]
 80145f2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80145f4:	2300      	movs	r3, #0
 80145f6:	607b      	str	r3, [r7, #4]
 80145f8:	e00b      	b.n	8014612 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80145fa:	4b0a      	ldr	r3, [pc, #40]	; (8014624 <ResetFCnts+0x68>)
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	3306      	adds	r3, #6
 8014602:	009b      	lsls	r3, r3, #2
 8014604:	4413      	add	r3, r2
 8014606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801460a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	3301      	adds	r3, #1
 8014610:	607b      	str	r3, [r7, #4]
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	ddf0      	ble.n	80145fa <ResetFCnts+0x3e>
    }
}
 8014618:	bf00      	nop
 801461a:	bf00      	nop
 801461c:	370c      	adds	r7, #12
 801461e:	46bd      	mov	sp, r7
 8014620:	bc80      	pop	{r7}
 8014622:	4770      	bx	lr
 8014624:	20001acc 	.word	0x20001acc

08014628 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8014628:	b480      	push	{r7}
 801462a:	b083      	sub	sp, #12
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8014630:	4b06      	ldr	r3, [pc, #24]	; (801464c <IsJoinNonce10xOk+0x24>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	689b      	ldr	r3, [r3, #8]
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	429a      	cmp	r2, r3
 801463a:	bf8c      	ite	hi
 801463c:	2301      	movhi	r3, #1
 801463e:	2300      	movls	r3, #0
 8014640:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8014642:	4618      	mov	r0, r3
 8014644:	370c      	adds	r7, #12
 8014646:	46bd      	mov	sp, r7
 8014648:	bc80      	pop	{r7}
 801464a:	4770      	bx	lr
 801464c:	20001acc 	.word	0x20001acc

08014650 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d101      	bne.n	8014662 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801465e:	2308      	movs	r3, #8
 8014660:	e01c      	b.n	801469c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014662:	4a10      	ldr	r2, [pc, #64]	; (80146a4 <LoRaMacCryptoInit+0x54>)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014668:	4b0e      	ldr	r3, [pc, #56]	; (80146a4 <LoRaMacCryptoInit+0x54>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	2228      	movs	r2, #40	; 0x28
 801466e:	2100      	movs	r1, #0
 8014670:	4618      	mov	r0, r3
 8014672:	f004 fced 	bl	8019050 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014676:	4b0b      	ldr	r3, [pc, #44]	; (80146a4 <LoRaMacCryptoInit+0x54>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	2201      	movs	r2, #1
 801467c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801467e:	4b09      	ldr	r3, [pc, #36]	; (80146a4 <LoRaMacCryptoInit+0x54>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2201      	movs	r2, #1
 8014684:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014686:	4b07      	ldr	r3, [pc, #28]	; (80146a4 <LoRaMacCryptoInit+0x54>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2201      	movs	r2, #1
 801468c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801468e:	4b05      	ldr	r3, [pc, #20]	; (80146a4 <LoRaMacCryptoInit+0x54>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	2200      	movs	r2, #0
 8014694:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014696:	f7ff ff91 	bl	80145bc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3708      	adds	r7, #8
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	20001acc 	.word	0x20001acc

080146a8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80146a8:	b480      	push	{r7}
 80146aa:	b083      	sub	sp, #12
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80146b0:	4b04      	ldr	r3, [pc, #16]	; (80146c4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80146b8:	2300      	movs	r3, #0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	bc80      	pop	{r7}
 80146c2:	4770      	bx	lr
 80146c4:	20001acc 	.word	0x20001acc

080146c8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d101      	bne.n	80146da <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80146d6:	2309      	movs	r3, #9
 80146d8:	e006      	b.n	80146e8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80146da:	4b06      	ldr	r3, [pc, #24]	; (80146f4 <LoRaMacCryptoGetFCntUp+0x2c>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	68db      	ldr	r3, [r3, #12]
 80146e0:	1c5a      	adds	r2, r3, #1
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80146e6:	2300      	movs	r3, #0
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	370c      	adds	r7, #12
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bc80      	pop	{r7}
 80146f0:	4770      	bx	lr
 80146f2:	bf00      	nop
 80146f4:	20001acc 	.word	0x20001acc

080146f8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b088      	sub	sp, #32
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	4603      	mov	r3, r0
 8014700:	60b9      	str	r1, [r7, #8]
 8014702:	607a      	str	r2, [r7, #4]
 8014704:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8014706:	2300      	movs	r3, #0
 8014708:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801470a:	2300      	movs	r3, #0
 801470c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801470e:	2312      	movs	r3, #18
 8014710:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d101      	bne.n	801471c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014718:	2309      	movs	r3, #9
 801471a:	e035      	b.n	8014788 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801471c:	f107 0214 	add.w	r2, r7, #20
 8014720:	7bfb      	ldrb	r3, [r7, #15]
 8014722:	4611      	mov	r1, r2
 8014724:	4618      	mov	r0, r3
 8014726:	f7ff feab 	bl	8014480 <GetLastFcntDown>
 801472a:	4603      	mov	r3, r0
 801472c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801472e:	7efb      	ldrb	r3, [r7, #27]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d001      	beq.n	8014738 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8014734:	7efb      	ldrb	r3, [r7, #27]
 8014736:	e027      	b.n	8014788 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801473e:	d103      	bne.n	8014748 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	68ba      	ldr	r2, [r7, #8]
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	e01e      	b.n	8014786 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	b29b      	uxth	r3, r3
 801474c:	68ba      	ldr	r2, [r7, #8]
 801474e:	1ad3      	subs	r3, r2, r3
 8014750:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8014752:	69fb      	ldr	r3, [r7, #28]
 8014754:	2b00      	cmp	r3, #0
 8014756:	dd05      	ble.n	8014764 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014758:	697a      	ldr	r2, [r7, #20]
 801475a:	69fb      	ldr	r3, [r7, #28]
 801475c:	441a      	add	r2, r3
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	601a      	str	r2, [r3, #0]
 8014762:	e010      	b.n	8014786 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d104      	bne.n	8014774 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801476a:	697a      	ldr	r2, [r7, #20]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014770:	2307      	movs	r3, #7
 8014772:	e009      	b.n	8014788 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	0c1b      	lsrs	r3, r3, #16
 8014778:	041b      	lsls	r3, r3, #16
 801477a:	68ba      	ldr	r2, [r7, #8]
 801477c:	4413      	add	r3, r2
 801477e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014786:	2300      	movs	r3, #0
}
 8014788:	4618      	mov	r0, r3
 801478a:	3720      	adds	r7, #32
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014790:	b480      	push	{r7}
 8014792:	b085      	sub	sp, #20
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d101      	bne.n	80147a2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801479e:	2309      	movs	r3, #9
 80147a0:	e019      	b.n	80147d6 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80147a2:	2300      	movs	r3, #0
 80147a4:	60fb      	str	r3, [r7, #12]
 80147a6:	e012      	b.n	80147ce <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80147a8:	4b0d      	ldr	r3, [pc, #52]	; (80147e0 <LoRaMacCryptoSetMulticastReference+0x50>)
 80147aa:	6819      	ldr	r1, [r3, #0]
 80147ac:	68fa      	ldr	r2, [r7, #12]
 80147ae:	4613      	mov	r3, r2
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	4413      	add	r3, r2
 80147b4:	011b      	lsls	r3, r3, #4
 80147b6:	461a      	mov	r2, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	4413      	add	r3, r2
 80147bc:	68fa      	ldr	r2, [r7, #12]
 80147be:	3206      	adds	r2, #6
 80147c0:	0092      	lsls	r2, r2, #2
 80147c2:	440a      	add	r2, r1
 80147c4:	3204      	adds	r2, #4
 80147c6:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	3301      	adds	r3, #1
 80147cc:	60fb      	str	r3, [r7, #12]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	dde9      	ble.n	80147a8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80147d4:	2300      	movs	r3, #0
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3714      	adds	r7, #20
 80147da:	46bd      	mov	sp, r7
 80147dc:	bc80      	pop	{r7}
 80147de:	4770      	bx	lr
 80147e0:	20001acc 	.word	0x20001acc

080147e4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	4603      	mov	r3, r0
 80147ec:	6039      	str	r1, [r7, #0]
 80147ee:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80147f0:	79fb      	ldrb	r3, [r7, #7]
 80147f2:	6839      	ldr	r1, [r7, #0]
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7f7 fe29 	bl	800c44c <SecureElementSetKey>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d001      	beq.n	8014804 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014800:	230e      	movs	r3, #14
 8014802:	e021      	b.n	8014848 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8014804:	79fb      	ldrb	r3, [r7, #7]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d11d      	bne.n	8014846 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801480a:	4b11      	ldr	r3, [pc, #68]	; (8014850 <LoRaMacCryptoSetKey+0x6c>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	789b      	ldrb	r3, [r3, #2]
 8014810:	210b      	movs	r1, #11
 8014812:	4618      	mov	r0, r3
 8014814:	f000 fa58 	bl	8014cc8 <LoRaMacCryptoDeriveLifeTimeKey>
 8014818:	4603      	mov	r3, r0
 801481a:	2b00      	cmp	r3, #0
 801481c:	d001      	beq.n	8014822 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801481e:	230e      	movs	r3, #14
 8014820:	e012      	b.n	8014848 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014822:	210c      	movs	r1, #12
 8014824:	2000      	movs	r0, #0
 8014826:	f000 fa4f 	bl	8014cc8 <LoRaMacCryptoDeriveLifeTimeKey>
 801482a:	4603      	mov	r3, r0
 801482c:	2b00      	cmp	r3, #0
 801482e:	d001      	beq.n	8014834 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014830:	230e      	movs	r3, #14
 8014832:	e009      	b.n	8014848 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014834:	210a      	movs	r1, #10
 8014836:	2000      	movs	r0, #0
 8014838:	f000 fa46 	bl	8014cc8 <LoRaMacCryptoDeriveLifeTimeKey>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d001      	beq.n	8014846 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014842:	230e      	movs	r3, #14
 8014844:	e000      	b.n	8014848 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014846:	2300      	movs	r3, #0
}
 8014848:	4618      	mov	r0, r3
 801484a:	3708      	adds	r7, #8
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	20001acc 	.word	0x20001acc

08014854 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b086      	sub	sp, #24
 8014858:	af02      	add	r7, sp, #8
 801485a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d101      	bne.n	8014866 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014862:	2309      	movs	r3, #9
 8014864:	e02d      	b.n	80148c2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014866:	2301      	movs	r3, #1
 8014868:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801486a:	4b18      	ldr	r3, [pc, #96]	; (80148cc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	889a      	ldrh	r2, [r3, #4]
 8014870:	3201      	adds	r2, #1
 8014872:	b292      	uxth	r2, r2
 8014874:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014876:	4b15      	ldr	r3, [pc, #84]	; (80148cc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	889a      	ldrh	r2, [r3, #4]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 fc1b 	bl	80150bc <LoRaMacSerializerJoinRequest>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d001      	beq.n	8014890 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801488c:	2310      	movs	r3, #16
 801488e:	e018      	b.n	80148c2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6819      	ldr	r1, [r3, #0]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	3318      	adds	r3, #24
 8014898:	7bfa      	ldrb	r2, [r7, #15]
 801489a:	9300      	str	r3, [sp, #0]
 801489c:	4613      	mov	r3, r2
 801489e:	2213      	movs	r2, #19
 80148a0:	2000      	movs	r0, #0
 80148a2:	f7f7 fe31 	bl	800c508 <SecureElementComputeAesCmac>
 80148a6:	4603      	mov	r3, r0
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d001      	beq.n	80148b0 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80148ac:	230e      	movs	r3, #14
 80148ae:	e008      	b.n	80148c2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 fc03 	bl	80150bc <LoRaMacSerializerJoinRequest>
 80148b6:	4603      	mov	r3, r0
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d001      	beq.n	80148c0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80148bc:	2310      	movs	r3, #16
 80148be:	e000      	b.n	80148c2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80148c0:	2300      	movs	r3, #0
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3710      	adds	r7, #16
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	20001acc 	.word	0x20001acc

080148d0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80148d0:	b590      	push	{r4, r7, lr}
 80148d2:	b097      	sub	sp, #92	; 0x5c
 80148d4:	af04      	add	r7, sp, #16
 80148d6:	4603      	mov	r3, r0
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
 80148dc:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d002      	beq.n	80148ea <LoRaMacCryptoHandleJoinAccept+0x1a>
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80148ea:	2309      	movs	r3, #9
 80148ec:	e0d3      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80148ee:	2312      	movs	r3, #18
 80148f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80148f4:	2300      	movs	r3, #0
 80148f6:	617b      	str	r3, [r7, #20]
 80148f8:	f107 0318 	add.w	r3, r7, #24
 80148fc:	221d      	movs	r2, #29
 80148fe:	2100      	movs	r1, #0
 8014900:	4618      	mov	r0, r3
 8014902:	f009 f987 	bl	801dc14 <memset>
    uint8_t versionMinor         = 0;
 8014906:	2300      	movs	r3, #0
 8014908:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801490a:	4b65      	ldr	r3, [pc, #404]	; (8014aa0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	889b      	ldrh	r3, [r3, #4]
 8014910:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681c      	ldr	r4, [r3, #0]
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	791b      	ldrb	r3, [r3, #4]
 801491c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8014920:	7bf8      	ldrb	r0, [r7, #15]
 8014922:	f107 0213 	add.w	r2, r7, #19
 8014926:	9202      	str	r2, [sp, #8]
 8014928:	f107 0214 	add.w	r2, r7, #20
 801492c:	9201      	str	r2, [sp, #4]
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	4623      	mov	r3, r4
 8014932:	460a      	mov	r2, r1
 8014934:	68b9      	ldr	r1, [r7, #8]
 8014936:	f7f7 feed 	bl	800c714 <SecureElementProcessJoinAccept>
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d001      	beq.n	8014944 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014940:	230e      	movs	r3, #14
 8014942:	e0a8      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6818      	ldr	r0, [r3, #0]
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	791b      	ldrb	r3, [r3, #4]
 801494c:	b29a      	uxth	r2, r3
 801494e:	f107 0314 	add.w	r3, r7, #20
 8014952:	4619      	mov	r1, r3
 8014954:	f004 fb41 	bl	8018fda <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 f9f0 	bl	8014d3e <LoRaMacParserJoinAccept>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d001      	beq.n	8014968 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014964:	230f      	movs	r3, #15
 8014966:	e096      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8014968:	2300      	movs	r3, #0
 801496a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	799b      	ldrb	r3, [r3, #6]
 8014972:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	79db      	ldrb	r3, [r3, #7]
 8014978:	021b      	lsls	r3, r3, #8
 801497a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801497c:	4313      	orrs	r3, r2
 801497e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	7a1b      	ldrb	r3, [r3, #8]
 8014984:	041b      	lsls	r3, r3, #16
 8014986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014988:	4313      	orrs	r3, r2
 801498a:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 801498c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801498e:	f7ff fe4b 	bl	8014628 <IsJoinNonce10xOk>
 8014992:	4603      	mov	r3, r0
 8014994:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8014998:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801499c:	2b00      	cmp	r3, #0
 801499e:	d010      	beq.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80149a0:	4b3f      	ldr	r3, [pc, #252]	; (8014aa0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149a6:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80149a8:	7cfb      	ldrb	r3, [r7, #19]
 80149aa:	210b      	movs	r1, #11
 80149ac:	4618      	mov	r0, r3
 80149ae:	f000 f98b 	bl	8014cc8 <LoRaMacCryptoDeriveLifeTimeKey>
 80149b2:	4603      	mov	r3, r0
 80149b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d005      	beq.n	80149cc <LoRaMacCryptoHandleJoinAccept+0xfc>
 80149c0:	e001      	b.n	80149c6 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80149c2:	2303      	movs	r3, #3
 80149c4:	e067      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 80149c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149ca:	e064      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80149cc:	210c      	movs	r1, #12
 80149ce:	2000      	movs	r0, #0
 80149d0:	f000 f97a 	bl	8014cc8 <LoRaMacCryptoDeriveLifeTimeKey>
 80149d4:	4603      	mov	r3, r0
 80149d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d002      	beq.n	80149e8 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80149e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149e6:	e056      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80149e8:	210a      	movs	r1, #10
 80149ea:	2000      	movs	r0, #0
 80149ec:	f000 f96c 	bl	8014cc8 <LoRaMacCryptoDeriveLifeTimeKey>
 80149f0:	4603      	mov	r3, r0
 80149f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d002      	beq.n	8014a04 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80149fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a02:	e048      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	7a5b      	ldrb	r3, [r3, #9]
 8014a08:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	7a9b      	ldrb	r3, [r3, #10]
 8014a0e:	021b      	lsls	r3, r3, #8
 8014a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a12:	4313      	orrs	r3, r2
 8014a14:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	7adb      	ldrb	r3, [r3, #11]
 8014a1a:	041b      	lsls	r3, r3, #16
 8014a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a1e:	4313      	orrs	r3, r2
 8014a20:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014a22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014a2a:	2009      	movs	r0, #9
 8014a2c:	f7ff fcd8 	bl	80143e0 <DeriveSessionKey10x>
 8014a30:	4603      	mov	r3, r0
 8014a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d002      	beq.n	8014a44 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8014a3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a42:	e028      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014a44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014a4c:	2008      	movs	r0, #8
 8014a4e:	f7ff fcc7 	bl	80143e0 <DeriveSessionKey10x>
 8014a52:	4603      	mov	r3, r0
 8014a54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d002      	beq.n	8014a66 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8014a60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a64:	e017      	b.n	8014a96 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014a66:	4b0e      	ldr	r3, [pc, #56]	; (8014aa0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	7cfa      	ldrb	r2, [r7, #19]
 8014a6c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8014a6e:	4b0c      	ldr	r3, [pc, #48]	; (8014aa0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2200      	movs	r2, #0
 8014a74:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014a76:	4b0a      	ldr	r3, [pc, #40]	; (8014aa0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a7e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014a80:	4b07      	ldr	r3, [pc, #28]	; (8014aa0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a88:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014a8a:	4b05      	ldr	r3, [pc, #20]	; (8014aa0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a92:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014a94:	2300      	movs	r3, #0
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	374c      	adds	r7, #76	; 0x4c
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd90      	pop	{r4, r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	20001acc 	.word	0x20001acc

08014aa4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014aa4:	b590      	push	{r4, r7, lr}
 8014aa6:	b08b      	sub	sp, #44	; 0x2c
 8014aa8:	af04      	add	r7, sp, #16
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	607b      	str	r3, [r7, #4]
 8014aae:	460b      	mov	r3, r1
 8014ab0:	72fb      	strb	r3, [r7, #11]
 8014ab2:	4613      	mov	r3, r2
 8014ab4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014ab6:	2312      	movs	r3, #18
 8014ab8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014aba:	2309      	movs	r3, #9
 8014abc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d101      	bne.n	8014ac8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ac4:	2309      	movs	r3, #9
 8014ac6:	e05f      	b.n	8014b88 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014ac8:	4b31      	ldr	r3, [pc, #196]	; (8014b90 <LoRaMacCryptoSecureMessage+0xec>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	68db      	ldr	r3, [r3, #12]
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d201      	bcs.n	8014ad8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014ad4:	2306      	movs	r3, #6
 8014ad6:	e057      	b.n	8014b88 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d101      	bne.n	8014ae6 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014ae2:	2308      	movs	r3, #8
 8014ae4:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014ae6:	4b2a      	ldr	r3, [pc, #168]	; (8014b90 <LoRaMacCryptoSecureMessage+0xec>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	68db      	ldr	r3, [r3, #12]
 8014aec:	68fa      	ldr	r2, [r7, #12]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d916      	bls.n	8014b20 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014afc:	b219      	sxth	r1, r3
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	689c      	ldr	r4, [r3, #8]
 8014b02:	7dfa      	ldrb	r2, [r7, #23]
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	9301      	str	r3, [sp, #4]
 8014b08:	2300      	movs	r3, #0
 8014b0a:	9300      	str	r3, [sp, #0]
 8014b0c:	4623      	mov	r3, r4
 8014b0e:	f7ff fa73 	bl	8013ff8 <PayloadEncrypt>
 8014b12:	4603      	mov	r3, r0
 8014b14:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b16:	7dbb      	ldrb	r3, [r7, #22]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d001      	beq.n	8014b20 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014b1c:	7dbb      	ldrb	r3, [r7, #22]
 8014b1e:	e033      	b.n	8014b88 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f000 fb4d 	bl	80151c0 <LoRaMacSerializerData>
 8014b26:	4603      	mov	r3, r0
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d001      	beq.n	8014b30 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014b2c:	2310      	movs	r3, #16
 8014b2e:	e02b      	b.n	8014b88 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014b30:	2308      	movs	r3, #8
 8014b32:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6818      	ldr	r0, [r3, #0]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	791b      	ldrb	r3, [r3, #4]
 8014b3c:	b29b      	uxth	r3, r3
 8014b3e:	3b04      	subs	r3, #4
 8014b40:	b299      	uxth	r1, r3
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	322c      	adds	r2, #44	; 0x2c
 8014b4a:	7dfc      	ldrb	r4, [r7, #23]
 8014b4c:	9203      	str	r2, [sp, #12]
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	9202      	str	r2, [sp, #8]
 8014b52:	9301      	str	r3, [sp, #4]
 8014b54:	2300      	movs	r3, #0
 8014b56:	9300      	str	r3, [sp, #0]
 8014b58:	2300      	movs	r3, #0
 8014b5a:	4622      	mov	r2, r4
 8014b5c:	f7ff fb4d 	bl	80141fa <ComputeCmacB0>
 8014b60:	4603      	mov	r3, r0
 8014b62:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b64:	7dbb      	ldrb	r3, [r7, #22]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d001      	beq.n	8014b6e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014b6a:	7dbb      	ldrb	r3, [r7, #22]
 8014b6c:	e00c      	b.n	8014b88 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f000 fb26 	bl	80151c0 <LoRaMacSerializerData>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d001      	beq.n	8014b7e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014b7a:	2310      	movs	r3, #16
 8014b7c:	e004      	b.n	8014b88 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014b7e:	4b04      	ldr	r3, [pc, #16]	; (8014b90 <LoRaMacCryptoSecureMessage+0xec>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	68fa      	ldr	r2, [r7, #12]
 8014b84:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	371c      	adds	r7, #28
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd90      	pop	{r4, r7, pc}
 8014b90:	20001acc 	.word	0x20001acc

08014b94 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014b94:	b590      	push	{r4, r7, lr}
 8014b96:	b08b      	sub	sp, #44	; 0x2c
 8014b98:	af04      	add	r7, sp, #16
 8014b9a:	60b9      	str	r1, [r7, #8]
 8014b9c:	607b      	str	r3, [r7, #4]
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	73fb      	strb	r3, [r7, #15]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d101      	bne.n	8014bb0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014bac:	2309      	movs	r3, #9
 8014bae:	e084      	b.n	8014cba <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014bb0:	7bbb      	ldrb	r3, [r7, #14]
 8014bb2:	6879      	ldr	r1, [r7, #4]
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7ff fc9f 	bl	80144f8 <CheckFCntDown>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	f083 0301 	eor.w	r3, r3, #1
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d001      	beq.n	8014bca <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014bc6:	2306      	movs	r3, #6
 8014bc8:	e077      	b.n	8014cba <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014bca:	2312      	movs	r3, #18
 8014bcc:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014bce:	2309      	movs	r3, #9
 8014bd0:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014bd2:	2308      	movs	r3, #8
 8014bd4:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bd8:	f000 f97c 	bl	8014ed4 <LoRaMacParserData>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d001      	beq.n	8014be6 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014be2:	230f      	movs	r3, #15
 8014be4:	e069      	b.n	8014cba <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014be6:	f107 0210 	add.w	r2, r7, #16
 8014bea:	7bfb      	ldrb	r3, [r7, #15]
 8014bec:	4611      	mov	r1, r2
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7ff fbd0 	bl	8014394 <GetKeyAddrItem>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bf8:	7d7b      	ldrb	r3, [r7, #21]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d001      	beq.n	8014c02 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014bfe:	7d7b      	ldrb	r3, [r7, #21]
 8014c00:	e05b      	b.n	8014cba <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014c02:	693b      	ldr	r3, [r7, #16]
 8014c04:	785b      	ldrb	r3, [r3, #1]
 8014c06:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	789b      	ldrb	r3, [r3, #2]
 8014c0c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c10:	689b      	ldr	r3, [r3, #8]
 8014c12:	68ba      	ldr	r2, [r7, #8]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d001      	beq.n	8014c1c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014c18:	2302      	movs	r3, #2
 8014c1a:	e04e      	b.n	8014cba <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c1e:	7b1b      	ldrb	r3, [r3, #12]
 8014c20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014c24:	b2db      	uxtb	r3, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	bf14      	ite	ne
 8014c2a:	2301      	movne	r3, #1
 8014c2c:	2300      	moveq	r3, #0
 8014c2e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014c30:	4b24      	ldr	r3, [pc, #144]	; (8014cc4 <LoRaMacCryptoUnsecureMessage+0x130>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	789b      	ldrb	r3, [r3, #2]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d101      	bne.n	8014c3e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c40:	6818      	ldr	r0, [r3, #0]
 8014c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c44:	791b      	ldrb	r3, [r3, #4]
 8014c46:	b29b      	uxth	r3, r3
 8014c48:	3b04      	subs	r3, #4
 8014c4a:	b299      	uxth	r1, r3
 8014c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c50:	7dbc      	ldrb	r4, [r7, #22]
 8014c52:	7d3a      	ldrb	r2, [r7, #20]
 8014c54:	9303      	str	r3, [sp, #12]
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	9302      	str	r3, [sp, #8]
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	2301      	movs	r3, #1
 8014c60:	9300      	str	r3, [sp, #0]
 8014c62:	4623      	mov	r3, r4
 8014c64:	f7ff fb07 	bl	8014276 <VerifyCmacB0>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c6c:	7d7b      	ldrb	r3, [r7, #21]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d001      	beq.n	8014c76 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014c72:	7d7b      	ldrb	r3, [r7, #21]
 8014c74:	e021      	b.n	8014cba <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d101      	bne.n	8014c84 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014c80:	2308      	movs	r3, #8
 8014c82:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c86:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c8e:	b219      	sxth	r1, r3
 8014c90:	7dfa      	ldrb	r2, [r7, #23]
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	9301      	str	r3, [sp, #4]
 8014c96:	2301      	movs	r3, #1
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	f7ff f9ac 	bl	8013ff8 <PayloadEncrypt>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014ca4:	7d7b      	ldrb	r3, [r7, #21]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014caa:	7d7b      	ldrb	r3, [r7, #21]
 8014cac:	e005      	b.n	8014cba <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8014cae:	7bbb      	ldrb	r3, [r7, #14]
 8014cb0:	6879      	ldr	r1, [r7, #4]
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7ff fc44 	bl	8014540 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014cb8:	2300      	movs	r3, #0
}
 8014cba:	4618      	mov	r0, r3
 8014cbc:	371c      	adds	r7, #28
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd90      	pop	{r4, r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	20001acc 	.word	0x20001acc

08014cc8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b088      	sub	sp, #32
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	4603      	mov	r3, r0
 8014cd0:	460a      	mov	r2, r1
 8014cd2:	71fb      	strb	r3, [r7, #7]
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014cd8:	2300      	movs	r3, #0
 8014cda:	60fb      	str	r3, [r7, #12]
 8014cdc:	f107 0310 	add.w	r3, r7, #16
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	601a      	str	r2, [r3, #0]
 8014ce4:	605a      	str	r2, [r3, #4]
 8014ce6:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8014cec:	79bb      	ldrb	r3, [r7, #6]
 8014cee:	2b0c      	cmp	r3, #12
 8014cf0:	d00b      	beq.n	8014d0a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8014cf2:	2b0c      	cmp	r3, #12
 8014cf4:	dc0f      	bgt.n	8014d16 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8014cf6:	2b0a      	cmp	r3, #10
 8014cf8:	d00a      	beq.n	8014d10 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8014cfa:	2b0b      	cmp	r3, #11
 8014cfc:	d10b      	bne.n	8014d16 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8014cfe:	79fb      	ldrb	r3, [r7, #7]
 8014d00:	2b01      	cmp	r3, #1
 8014d02:	d10a      	bne.n	8014d1a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8014d04:	2320      	movs	r3, #32
 8014d06:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014d08:	e007      	b.n	8014d1a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014d0a:	230b      	movs	r3, #11
 8014d0c:	77fb      	strb	r3, [r7, #31]
            break;
 8014d0e:	e005      	b.n	8014d1c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8014d10:	2330      	movs	r3, #48	; 0x30
 8014d12:	733b      	strb	r3, [r7, #12]
            break;
 8014d14:	e002      	b.n	8014d1c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014d16:	230a      	movs	r3, #10
 8014d18:	e00d      	b.n	8014d36 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8014d1a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014d1c:	79ba      	ldrb	r2, [r7, #6]
 8014d1e:	7ff9      	ldrb	r1, [r7, #31]
 8014d20:	f107 030c 	add.w	r3, r7, #12
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7f7 fcb5 	bl	800c694 <SecureElementDeriveAndStoreKey>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d001      	beq.n	8014d34 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014d30:	230e      	movs	r3, #14
 8014d32:	e000      	b.n	8014d36 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014d34:	2300      	movs	r3, #0
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3720      	adds	r7, #32
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	b084      	sub	sp, #16
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d003      	beq.n	8014d54 <LoRaMacParserJoinAccept+0x16>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d101      	bne.n	8014d58 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014d54:	2302      	movs	r3, #2
 8014d56:	e0b9      	b.n	8014ecc <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	89fb      	ldrh	r3, [r7, #14]
 8014d62:	1c59      	adds	r1, r3, #1
 8014d64:	81f9      	strh	r1, [r7, #14]
 8014d66:	4413      	add	r3, r2
 8014d68:	781a      	ldrb	r2, [r3, #0]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	1d98      	adds	r0, r3, #6
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681a      	ldr	r2, [r3, #0]
 8014d76:	89fb      	ldrh	r3, [r7, #14]
 8014d78:	4413      	add	r3, r2
 8014d7a:	2203      	movs	r2, #3
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	f004 f92c 	bl	8018fda <memcpy1>
    bufItr = bufItr + 3;
 8014d82:	89fb      	ldrh	r3, [r7, #14]
 8014d84:	3303      	adds	r3, #3
 8014d86:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f103 0009 	add.w	r0, r3, #9
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	89fb      	ldrh	r3, [r7, #14]
 8014d94:	4413      	add	r3, r2
 8014d96:	2203      	movs	r2, #3
 8014d98:	4619      	mov	r1, r3
 8014d9a:	f004 f91e 	bl	8018fda <memcpy1>
    bufItr = bufItr + 3;
 8014d9e:	89fb      	ldrh	r3, [r7, #14]
 8014da0:	3303      	adds	r3, #3
 8014da2:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	89fb      	ldrh	r3, [r7, #14]
 8014daa:	1c59      	adds	r1, r3, #1
 8014dac:	81f9      	strh	r1, [r7, #14]
 8014dae:	4413      	add	r3, r2
 8014db0:	781b      	ldrb	r3, [r3, #0]
 8014db2:	461a      	mov	r2, r3
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681a      	ldr	r2, [r3, #0]
 8014dbc:	89fb      	ldrh	r3, [r7, #14]
 8014dbe:	1c59      	adds	r1, r3, #1
 8014dc0:	81f9      	strh	r1, [r7, #14]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	021a      	lsls	r2, r3, #8
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	431a      	orrs	r2, r3
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681a      	ldr	r2, [r3, #0]
 8014dd6:	89fb      	ldrh	r3, [r7, #14]
 8014dd8:	1c59      	adds	r1, r3, #1
 8014dda:	81f9      	strh	r1, [r7, #14]
 8014ddc:	4413      	add	r3, r2
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	041a      	lsls	r2, r3, #16
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	431a      	orrs	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	89fb      	ldrh	r3, [r7, #14]
 8014df2:	1c59      	adds	r1, r3, #1
 8014df4:	81f9      	strh	r1, [r7, #14]
 8014df6:	4413      	add	r3, r2
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	061a      	lsls	r2, r3, #24
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	431a      	orrs	r2, r3
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	89fb      	ldrh	r3, [r7, #14]
 8014e0c:	1c59      	adds	r1, r3, #1
 8014e0e:	81f9      	strh	r1, [r7, #14]
 8014e10:	4413      	add	r3, r2
 8014e12:	781a      	ldrb	r2, [r3, #0]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681a      	ldr	r2, [r3, #0]
 8014e1c:	89fb      	ldrh	r3, [r7, #14]
 8014e1e:	1c59      	adds	r1, r3, #1
 8014e20:	81f9      	strh	r1, [r7, #14]
 8014e22:	4413      	add	r3, r2
 8014e24:	781a      	ldrb	r2, [r3, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	791b      	ldrb	r3, [r3, #4]
 8014e2e:	1f1a      	subs	r2, r3, #4
 8014e30:	89fb      	ldrh	r3, [r7, #14]
 8014e32:	1ad3      	subs	r3, r2, r3
 8014e34:	2b10      	cmp	r3, #16
 8014e36:	d10e      	bne.n	8014e56 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f103 0012 	add.w	r0, r3, #18
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681a      	ldr	r2, [r3, #0]
 8014e42:	89fb      	ldrh	r3, [r7, #14]
 8014e44:	4413      	add	r3, r2
 8014e46:	2210      	movs	r2, #16
 8014e48:	4619      	mov	r1, r3
 8014e4a:	f004 f8c6 	bl	8018fda <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014e4e:	89fb      	ldrh	r3, [r7, #14]
 8014e50:	3310      	adds	r3, #16
 8014e52:	81fb      	strh	r3, [r7, #14]
 8014e54:	e008      	b.n	8014e68 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	791b      	ldrb	r3, [r3, #4]
 8014e5a:	1f1a      	subs	r2, r3, #4
 8014e5c:	89fb      	ldrh	r3, [r7, #14]
 8014e5e:	1ad3      	subs	r3, r2, r3
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	dd01      	ble.n	8014e68 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014e64:	2301      	movs	r3, #1
 8014e66:	e031      	b.n	8014ecc <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	89fb      	ldrh	r3, [r7, #14]
 8014e6e:	1c59      	adds	r1, r3, #1
 8014e70:	81f9      	strh	r1, [r7, #14]
 8014e72:	4413      	add	r3, r2
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	461a      	mov	r2, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	89fb      	ldrh	r3, [r7, #14]
 8014e82:	1c59      	adds	r1, r3, #1
 8014e84:	81f9      	strh	r1, [r7, #14]
 8014e86:	4413      	add	r3, r2
 8014e88:	781b      	ldrb	r3, [r3, #0]
 8014e8a:	021a      	lsls	r2, r3, #8
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e90:	431a      	orrs	r2, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	681a      	ldr	r2, [r3, #0]
 8014e9a:	89fb      	ldrh	r3, [r7, #14]
 8014e9c:	1c59      	adds	r1, r3, #1
 8014e9e:	81f9      	strh	r1, [r7, #14]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	041a      	lsls	r2, r3, #16
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eaa:	431a      	orrs	r2, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681a      	ldr	r2, [r3, #0]
 8014eb4:	89fb      	ldrh	r3, [r7, #14]
 8014eb6:	1c59      	adds	r1, r3, #1
 8014eb8:	81f9      	strh	r1, [r7, #14]
 8014eba:	4413      	add	r3, r2
 8014ebc:	781b      	ldrb	r3, [r3, #0]
 8014ebe:	061a      	lsls	r2, r3, #24
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ec4:	431a      	orrs	r2, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014eca:	2300      	movs	r3, #0
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b084      	sub	sp, #16
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d003      	beq.n	8014eea <LoRaMacParserData+0x16>
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d101      	bne.n	8014eee <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014eea:	2302      	movs	r3, #2
 8014eec:	e0e2      	b.n	80150b4 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	681a      	ldr	r2, [r3, #0]
 8014ef6:	89fb      	ldrh	r3, [r7, #14]
 8014ef8:	1c59      	adds	r1, r3, #1
 8014efa:	81f9      	strh	r1, [r7, #14]
 8014efc:	4413      	add	r3, r2
 8014efe:	781a      	ldrb	r2, [r3, #0]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	89fb      	ldrh	r3, [r7, #14]
 8014f0a:	1c59      	adds	r1, r3, #1
 8014f0c:	81f9      	strh	r1, [r7, #14]
 8014f0e:	4413      	add	r3, r2
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	461a      	mov	r2, r3
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	89fb      	ldrh	r3, [r7, #14]
 8014f1e:	1c59      	adds	r1, r3, #1
 8014f20:	81f9      	strh	r1, [r7, #14]
 8014f22:	4413      	add	r3, r2
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	021a      	lsls	r2, r3, #8
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	431a      	orrs	r2, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	89fb      	ldrh	r3, [r7, #14]
 8014f38:	1c59      	adds	r1, r3, #1
 8014f3a:	81f9      	strh	r1, [r7, #14]
 8014f3c:	4413      	add	r3, r2
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	041a      	lsls	r2, r3, #16
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	689b      	ldr	r3, [r3, #8]
 8014f46:	431a      	orrs	r2, r3
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	681a      	ldr	r2, [r3, #0]
 8014f50:	89fb      	ldrh	r3, [r7, #14]
 8014f52:	1c59      	adds	r1, r3, #1
 8014f54:	81f9      	strh	r1, [r7, #14]
 8014f56:	4413      	add	r3, r2
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	061a      	lsls	r2, r3, #24
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	689b      	ldr	r3, [r3, #8]
 8014f60:	431a      	orrs	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	89fb      	ldrh	r3, [r7, #14]
 8014f6c:	1c59      	adds	r1, r3, #1
 8014f6e:	81f9      	strh	r1, [r7, #14]
 8014f70:	4413      	add	r3, r2
 8014f72:	781a      	ldrb	r2, [r3, #0]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	89fb      	ldrh	r3, [r7, #14]
 8014f7e:	1c59      	adds	r1, r3, #1
 8014f80:	81f9      	strh	r1, [r7, #14]
 8014f82:	4413      	add	r3, r2
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	b29a      	uxth	r2, r3
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	89fb      	ldrh	r3, [r7, #14]
 8014f92:	1c59      	adds	r1, r3, #1
 8014f94:	81f9      	strh	r1, [r7, #14]
 8014f96:	4413      	add	r3, r2
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	0219      	lsls	r1, r3, #8
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	89db      	ldrh	r3, [r3, #14]
 8014fa0:	b21a      	sxth	r2, r3
 8014fa2:	b20b      	sxth	r3, r1
 8014fa4:	4313      	orrs	r3, r2
 8014fa6:	b21b      	sxth	r3, r3
 8014fa8:	b29a      	uxth	r2, r3
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f103 0010 	add.w	r0, r3, #16
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	89fb      	ldrh	r3, [r7, #14]
 8014fba:	18d1      	adds	r1, r2, r3
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	7b1b      	ldrb	r3, [r3, #12]
 8014fc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	461a      	mov	r2, r3
 8014fca:	f004 f806 	bl	8018fda <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	7b1b      	ldrb	r3, [r3, #12]
 8014fd2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014fd6:	b2db      	uxtb	r3, r3
 8014fd8:	b29a      	uxth	r2, r3
 8014fda:	89fb      	ldrh	r3, [r7, #14]
 8014fdc:	4413      	add	r3, r2
 8014fde:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	791b      	ldrb	r3, [r3, #4]
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	89fb      	ldrh	r3, [r7, #14]
 8014ff8:	1ad3      	subs	r3, r2, r3
 8014ffa:	2b04      	cmp	r3, #4
 8014ffc:	dd28      	ble.n	8015050 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	89fb      	ldrh	r3, [r7, #14]
 8015004:	1c59      	adds	r1, r3, #1
 8015006:	81f9      	strh	r1, [r7, #14]
 8015008:	4413      	add	r3, r2
 801500a:	781a      	ldrb	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	791a      	ldrb	r2, [r3, #4]
 8015016:	89fb      	ldrh	r3, [r7, #14]
 8015018:	b2db      	uxtb	r3, r3
 801501a:	1ad3      	subs	r3, r2, r3
 801501c:	b2db      	uxtb	r3, r3
 801501e:	3b04      	subs	r3, #4
 8015020:	b2da      	uxtb	r2, r3
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	89fb      	ldrh	r3, [r7, #14]
 8015032:	18d1      	adds	r1, r2, r3
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801503a:	b29b      	uxth	r3, r3
 801503c:	461a      	mov	r2, r3
 801503e:	f003 ffcc 	bl	8018fda <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015048:	b29a      	uxth	r2, r3
 801504a:	89fb      	ldrh	r3, [r7, #14]
 801504c:	4413      	add	r3, r2
 801504e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	681a      	ldr	r2, [r3, #0]
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	791b      	ldrb	r3, [r3, #4]
 8015058:	3b04      	subs	r3, #4
 801505a:	4413      	add	r3, r2
 801505c:	781b      	ldrb	r3, [r3, #0]
 801505e:	461a      	mov	r2, r3
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6819      	ldr	r1, [r3, #0]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	791b      	ldrb	r3, [r3, #4]
 8015070:	3b03      	subs	r3, #3
 8015072:	440b      	add	r3, r1
 8015074:	781b      	ldrb	r3, [r3, #0]
 8015076:	021b      	lsls	r3, r3, #8
 8015078:	431a      	orrs	r2, r3
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6819      	ldr	r1, [r3, #0]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	791b      	ldrb	r3, [r3, #4]
 801508a:	3b02      	subs	r3, #2
 801508c:	440b      	add	r3, r1
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	041b      	lsls	r3, r3, #16
 8015092:	431a      	orrs	r2, r3
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6819      	ldr	r1, [r3, #0]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	791b      	ldrb	r3, [r3, #4]
 80150a4:	3b01      	subs	r3, #1
 80150a6:	440b      	add	r3, r1
 80150a8:	781b      	ldrb	r3, [r3, #0]
 80150aa:	061b      	lsls	r3, r3, #24
 80150ac:	431a      	orrs	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80150b2:	2300      	movs	r3, #0
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3710      	adds	r7, #16
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d003      	beq.n	80150d2 <LoRaMacSerializerJoinRequest+0x16>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d101      	bne.n	80150d6 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80150d2:	2301      	movs	r3, #1
 80150d4:	e070      	b.n	80151b8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80150d6:	2300      	movs	r3, #0
 80150d8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	791b      	ldrb	r3, [r3, #4]
 80150de:	2b16      	cmp	r3, #22
 80150e0:	d801      	bhi.n	80150e6 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80150e2:	2302      	movs	r3, #2
 80150e4:	e068      	b.n	80151b8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681a      	ldr	r2, [r3, #0]
 80150ea:	89fb      	ldrh	r3, [r7, #14]
 80150ec:	1c59      	adds	r1, r3, #1
 80150ee:	81f9      	strh	r1, [r7, #14]
 80150f0:	4413      	add	r3, r2
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	7952      	ldrb	r2, [r2, #5]
 80150f6:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	89fb      	ldrh	r3, [r7, #14]
 80150fe:	18d0      	adds	r0, r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	3306      	adds	r3, #6
 8015104:	2208      	movs	r2, #8
 8015106:	4619      	mov	r1, r3
 8015108:	f003 ff82 	bl	8019010 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801510c:	89fb      	ldrh	r3, [r7, #14]
 801510e:	3308      	adds	r3, #8
 8015110:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	89fb      	ldrh	r3, [r7, #14]
 8015118:	18d0      	adds	r0, r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	330e      	adds	r3, #14
 801511e:	2208      	movs	r2, #8
 8015120:	4619      	mov	r1, r3
 8015122:	f003 ff75 	bl	8019010 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015126:	89fb      	ldrh	r3, [r7, #14]
 8015128:	3308      	adds	r3, #8
 801512a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	8ad9      	ldrh	r1, [r3, #22]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681a      	ldr	r2, [r3, #0]
 8015134:	89fb      	ldrh	r3, [r7, #14]
 8015136:	1c58      	adds	r0, r3, #1
 8015138:	81f8      	strh	r0, [r7, #14]
 801513a:	4413      	add	r3, r2
 801513c:	b2ca      	uxtb	r2, r1
 801513e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	8adb      	ldrh	r3, [r3, #22]
 8015144:	0a1b      	lsrs	r3, r3, #8
 8015146:	b299      	uxth	r1, r3
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	89fb      	ldrh	r3, [r7, #14]
 801514e:	1c58      	adds	r0, r3, #1
 8015150:	81f8      	strh	r0, [r7, #14]
 8015152:	4413      	add	r3, r2
 8015154:	b2ca      	uxtb	r2, r1
 8015156:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6999      	ldr	r1, [r3, #24]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	89fb      	ldrh	r3, [r7, #14]
 8015162:	1c58      	adds	r0, r3, #1
 8015164:	81f8      	strh	r0, [r7, #14]
 8015166:	4413      	add	r3, r2
 8015168:	b2ca      	uxtb	r2, r1
 801516a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	699b      	ldr	r3, [r3, #24]
 8015170:	0a19      	lsrs	r1, r3, #8
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681a      	ldr	r2, [r3, #0]
 8015176:	89fb      	ldrh	r3, [r7, #14]
 8015178:	1c58      	adds	r0, r3, #1
 801517a:	81f8      	strh	r0, [r7, #14]
 801517c:	4413      	add	r3, r2
 801517e:	b2ca      	uxtb	r2, r1
 8015180:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	699b      	ldr	r3, [r3, #24]
 8015186:	0c19      	lsrs	r1, r3, #16
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681a      	ldr	r2, [r3, #0]
 801518c:	89fb      	ldrh	r3, [r7, #14]
 801518e:	1c58      	adds	r0, r3, #1
 8015190:	81f8      	strh	r0, [r7, #14]
 8015192:	4413      	add	r3, r2
 8015194:	b2ca      	uxtb	r2, r1
 8015196:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	699b      	ldr	r3, [r3, #24]
 801519c:	0e19      	lsrs	r1, r3, #24
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	89fb      	ldrh	r3, [r7, #14]
 80151a4:	1c58      	adds	r0, r3, #1
 80151a6:	81f8      	strh	r0, [r7, #14]
 80151a8:	4413      	add	r3, r2
 80151aa:	b2ca      	uxtb	r2, r1
 80151ac:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80151ae:	89fb      	ldrh	r3, [r7, #14]
 80151b0:	b2da      	uxtb	r2, r3
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80151b6:	2300      	movs	r3, #0
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3710      	adds	r7, #16
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d003      	beq.n	80151d6 <LoRaMacSerializerData+0x16>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d101      	bne.n	80151da <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80151d6:	2301      	movs	r3, #1
 80151d8:	e0e5      	b.n	80153a6 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80151da:	2300      	movs	r3, #0
 80151dc:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80151de:	2308      	movs	r3, #8
 80151e0:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	7b1b      	ldrb	r3, [r3, #12]
 80151e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	b29a      	uxth	r2, r3
 80151ee:	89bb      	ldrh	r3, [r7, #12]
 80151f0:	4413      	add	r3, r2
 80151f2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d002      	beq.n	8015204 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80151fe:	89bb      	ldrh	r3, [r7, #12]
 8015200:	3301      	adds	r3, #1
 8015202:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801520a:	b29a      	uxth	r2, r3
 801520c:	89bb      	ldrh	r3, [r7, #12]
 801520e:	4413      	add	r3, r2
 8015210:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015212:	89bb      	ldrh	r3, [r7, #12]
 8015214:	3304      	adds	r3, #4
 8015216:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	791b      	ldrb	r3, [r3, #4]
 801521c:	b29b      	uxth	r3, r3
 801521e:	89ba      	ldrh	r2, [r7, #12]
 8015220:	429a      	cmp	r2, r3
 8015222:	d901      	bls.n	8015228 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015224:	2302      	movs	r3, #2
 8015226:	e0be      	b.n	80153a6 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	89fb      	ldrh	r3, [r7, #14]
 801522e:	1c59      	adds	r1, r3, #1
 8015230:	81f9      	strh	r1, [r7, #14]
 8015232:	4413      	add	r3, r2
 8015234:	687a      	ldr	r2, [r7, #4]
 8015236:	7952      	ldrb	r2, [r2, #5]
 8015238:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6899      	ldr	r1, [r3, #8]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681a      	ldr	r2, [r3, #0]
 8015242:	89fb      	ldrh	r3, [r7, #14]
 8015244:	1c58      	adds	r0, r3, #1
 8015246:	81f8      	strh	r0, [r7, #14]
 8015248:	4413      	add	r3, r2
 801524a:	b2ca      	uxtb	r2, r1
 801524c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	689b      	ldr	r3, [r3, #8]
 8015252:	0a19      	lsrs	r1, r3, #8
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	89fb      	ldrh	r3, [r7, #14]
 801525a:	1c58      	adds	r0, r3, #1
 801525c:	81f8      	strh	r0, [r7, #14]
 801525e:	4413      	add	r3, r2
 8015260:	b2ca      	uxtb	r2, r1
 8015262:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	689b      	ldr	r3, [r3, #8]
 8015268:	0c19      	lsrs	r1, r3, #16
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	89fb      	ldrh	r3, [r7, #14]
 8015270:	1c58      	adds	r0, r3, #1
 8015272:	81f8      	strh	r0, [r7, #14]
 8015274:	4413      	add	r3, r2
 8015276:	b2ca      	uxtb	r2, r1
 8015278:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	689b      	ldr	r3, [r3, #8]
 801527e:	0e19      	lsrs	r1, r3, #24
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	89fb      	ldrh	r3, [r7, #14]
 8015286:	1c58      	adds	r0, r3, #1
 8015288:	81f8      	strh	r0, [r7, #14]
 801528a:	4413      	add	r3, r2
 801528c:	b2ca      	uxtb	r2, r1
 801528e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	89fb      	ldrh	r3, [r7, #14]
 8015296:	1c59      	adds	r1, r3, #1
 8015298:	81f9      	strh	r1, [r7, #14]
 801529a:	4413      	add	r3, r2
 801529c:	687a      	ldr	r2, [r7, #4]
 801529e:	7b12      	ldrb	r2, [r2, #12]
 80152a0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	89d9      	ldrh	r1, [r3, #14]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681a      	ldr	r2, [r3, #0]
 80152aa:	89fb      	ldrh	r3, [r7, #14]
 80152ac:	1c58      	adds	r0, r3, #1
 80152ae:	81f8      	strh	r0, [r7, #14]
 80152b0:	4413      	add	r3, r2
 80152b2:	b2ca      	uxtb	r2, r1
 80152b4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	89db      	ldrh	r3, [r3, #14]
 80152ba:	0a1b      	lsrs	r3, r3, #8
 80152bc:	b299      	uxth	r1, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	89fb      	ldrh	r3, [r7, #14]
 80152c4:	1c58      	adds	r0, r3, #1
 80152c6:	81f8      	strh	r0, [r7, #14]
 80152c8:	4413      	add	r3, r2
 80152ca:	b2ca      	uxtb	r2, r1
 80152cc:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	89fb      	ldrh	r3, [r7, #14]
 80152d4:	18d0      	adds	r0, r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f103 0110 	add.w	r1, r3, #16
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	7b1b      	ldrb	r3, [r3, #12]
 80152e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80152e4:	b2db      	uxtb	r3, r3
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	461a      	mov	r2, r3
 80152ea:	f003 fe76 	bl	8018fda <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	7b1b      	ldrb	r3, [r3, #12]
 80152f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	b29a      	uxth	r2, r3
 80152fa:	89fb      	ldrh	r3, [r7, #14]
 80152fc:	4413      	add	r3, r2
 80152fe:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015306:	2b00      	cmp	r3, #0
 8015308:	d009      	beq.n	801531e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	89fb      	ldrh	r3, [r7, #14]
 8015310:	1c59      	adds	r1, r3, #1
 8015312:	81f9      	strh	r1, [r7, #14]
 8015314:	4413      	add	r3, r2
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	f892 2020 	ldrb.w	r2, [r2, #32]
 801531c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681a      	ldr	r2, [r3, #0]
 8015322:	89fb      	ldrh	r3, [r7, #14]
 8015324:	18d0      	adds	r0, r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015330:	b29b      	uxth	r3, r3
 8015332:	461a      	mov	r2, r3
 8015334:	f003 fe51 	bl	8018fda <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801533e:	b29a      	uxth	r2, r3
 8015340:	89fb      	ldrh	r3, [r7, #14]
 8015342:	4413      	add	r3, r2
 8015344:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681a      	ldr	r2, [r3, #0]
 801534e:	89fb      	ldrh	r3, [r7, #14]
 8015350:	1c58      	adds	r0, r3, #1
 8015352:	81f8      	strh	r0, [r7, #14]
 8015354:	4413      	add	r3, r2
 8015356:	b2ca      	uxtb	r2, r1
 8015358:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801535e:	0a19      	lsrs	r1, r3, #8
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	89fb      	ldrh	r3, [r7, #14]
 8015366:	1c58      	adds	r0, r3, #1
 8015368:	81f8      	strh	r0, [r7, #14]
 801536a:	4413      	add	r3, r2
 801536c:	b2ca      	uxtb	r2, r1
 801536e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015374:	0c19      	lsrs	r1, r3, #16
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	89fb      	ldrh	r3, [r7, #14]
 801537c:	1c58      	adds	r0, r3, #1
 801537e:	81f8      	strh	r0, [r7, #14]
 8015380:	4413      	add	r3, r2
 8015382:	b2ca      	uxtb	r2, r1
 8015384:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801538a:	0e19      	lsrs	r1, r3, #24
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	89fb      	ldrh	r3, [r7, #14]
 8015392:	1c58      	adds	r0, r3, #1
 8015394:	81f8      	strh	r0, [r7, #14]
 8015396:	4413      	add	r3, r2
 8015398:	b2ca      	uxtb	r2, r1
 801539a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801539c:	89fb      	ldrh	r3, [r7, #14]
 801539e:	b2da      	uxtb	r2, r3
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80153ae:	b480      	push	{r7}
 80153b0:	b083      	sub	sp, #12
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	4603      	mov	r3, r0
 80153b6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153b8:	79fb      	ldrb	r3, [r7, #7]
 80153ba:	2b05      	cmp	r3, #5
 80153bc:	d002      	beq.n	80153c4 <RegionIsActive+0x16>
 80153be:	2b08      	cmp	r3, #8
 80153c0:	d002      	beq.n	80153c8 <RegionIsActive+0x1a>
 80153c2:	e003      	b.n	80153cc <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80153c4:	2301      	movs	r3, #1
 80153c6:	e002      	b.n	80153ce <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80153c8:	2301      	movs	r3, #1
 80153ca:	e000      	b.n	80153ce <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80153cc:	2300      	movs	r3, #0
        }
    }
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	370c      	adds	r7, #12
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bc80      	pop	{r7}
 80153d6:	4770      	bx	lr

080153d8 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	4603      	mov	r3, r0
 80153e0:	6039      	str	r1, [r7, #0]
 80153e2:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80153e4:	2300      	movs	r3, #0
 80153e6:	60bb      	str	r3, [r7, #8]
    switch( region )
 80153e8:	79fb      	ldrb	r3, [r7, #7]
 80153ea:	2b05      	cmp	r3, #5
 80153ec:	d002      	beq.n	80153f4 <RegionGetPhyParam+0x1c>
 80153ee:	2b08      	cmp	r3, #8
 80153f0:	d006      	beq.n	8015400 <RegionGetPhyParam+0x28>
 80153f2:	e00b      	b.n	801540c <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80153f4:	6838      	ldr	r0, [r7, #0]
 80153f6:	f001 fad1 	bl	801699c <RegionEU868GetPhyParam>
 80153fa:	4603      	mov	r3, r0
 80153fc:	60fb      	str	r3, [r7, #12]
 80153fe:	e007      	b.n	8015410 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8015400:	6838      	ldr	r0, [r7, #0]
 8015402:	f002 fc51 	bl	8017ca8 <RegionUS915GetPhyParam>
 8015406:	4603      	mov	r3, r0
 8015408:	60fb      	str	r3, [r7, #12]
 801540a:	e001      	b.n	8015410 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	4618      	mov	r0, r3
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}

0801541a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801541a:	b580      	push	{r7, lr}
 801541c:	b082      	sub	sp, #8
 801541e:	af00      	add	r7, sp, #0
 8015420:	4603      	mov	r3, r0
 8015422:	6039      	str	r1, [r7, #0]
 8015424:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015426:	79fb      	ldrb	r3, [r7, #7]
 8015428:	2b05      	cmp	r3, #5
 801542a:	d002      	beq.n	8015432 <RegionSetBandTxDone+0x18>
 801542c:	2b08      	cmp	r3, #8
 801542e:	d004      	beq.n	801543a <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015430:	e006      	b.n	8015440 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8015432:	6838      	ldr	r0, [r7, #0]
 8015434:	f001 fbf8 	bl	8016c28 <RegionEU868SetBandTxDone>
 8015438:	e002      	b.n	8015440 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 801543a:	6838      	ldr	r0, [r7, #0]
 801543c:	f002 fd90 	bl	8017f60 <RegionUS915SetBandTxDone>
        }
    }
}
 8015440:	3708      	adds	r7, #8
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}

08015446 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015446:	b580      	push	{r7, lr}
 8015448:	b082      	sub	sp, #8
 801544a:	af00      	add	r7, sp, #0
 801544c:	4603      	mov	r3, r0
 801544e:	6039      	str	r1, [r7, #0]
 8015450:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015452:	79fb      	ldrb	r3, [r7, #7]
 8015454:	2b05      	cmp	r3, #5
 8015456:	d002      	beq.n	801545e <RegionInitDefaults+0x18>
 8015458:	2b08      	cmp	r3, #8
 801545a:	d004      	beq.n	8015466 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801545c:	e006      	b.n	801546c <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 801545e:	6838      	ldr	r0, [r7, #0]
 8015460:	f001 fc0e 	bl	8016c80 <RegionEU868InitDefaults>
 8015464:	e002      	b.n	801546c <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8015466:	6838      	ldr	r0, [r7, #0]
 8015468:	f002 fda6 	bl	8017fb8 <RegionUS915InitDefaults>
        }
    }
}
 801546c:	bf00      	nop
 801546e:	3708      	adds	r7, #8
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}

08015474 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b082      	sub	sp, #8
 8015478:	af00      	add	r7, sp, #0
 801547a:	4603      	mov	r3, r0
 801547c:	6039      	str	r1, [r7, #0]
 801547e:	71fb      	strb	r3, [r7, #7]
 8015480:	4613      	mov	r3, r2
 8015482:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015484:	79fb      	ldrb	r3, [r7, #7]
 8015486:	2b05      	cmp	r3, #5
 8015488:	d002      	beq.n	8015490 <RegionVerify+0x1c>
 801548a:	2b08      	cmp	r3, #8
 801548c:	d007      	beq.n	801549e <RegionVerify+0x2a>
 801548e:	e00d      	b.n	80154ac <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8015490:	79bb      	ldrb	r3, [r7, #6]
 8015492:	4619      	mov	r1, r3
 8015494:	6838      	ldr	r0, [r7, #0]
 8015496:	f001 fc91 	bl	8016dbc <RegionEU868Verify>
 801549a:	4603      	mov	r3, r0
 801549c:	e007      	b.n	80154ae <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801549e:	79bb      	ldrb	r3, [r7, #6]
 80154a0:	4619      	mov	r1, r3
 80154a2:	6838      	ldr	r0, [r7, #0]
 80154a4:	f002 feba 	bl	801821c <RegionUS915Verify>
 80154a8:	4603      	mov	r3, r0
 80154aa:	e000      	b.n	80154ae <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80154ac:	2300      	movs	r3, #0
        }
    }
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3708      	adds	r7, #8
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}

080154b6 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80154b6:	b580      	push	{r7, lr}
 80154b8:	b082      	sub	sp, #8
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	4603      	mov	r3, r0
 80154be:	6039      	str	r1, [r7, #0]
 80154c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154c2:	79fb      	ldrb	r3, [r7, #7]
 80154c4:	2b05      	cmp	r3, #5
 80154c6:	d002      	beq.n	80154ce <RegionApplyCFList+0x18>
 80154c8:	2b08      	cmp	r3, #8
 80154ca:	d004      	beq.n	80154d6 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80154cc:	e006      	b.n	80154dc <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 80154ce:	6838      	ldr	r0, [r7, #0]
 80154d0:	f001 fcf0 	bl	8016eb4 <RegionEU868ApplyCFList>
 80154d4:	e002      	b.n	80154dc <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 80154d6:	6838      	ldr	r0, [r7, #0]
 80154d8:	f002 ff16 	bl	8018308 <RegionUS915ApplyCFList>
        }
    }
}
 80154dc:	bf00      	nop
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b082      	sub	sp, #8
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	4603      	mov	r3, r0
 80154ec:	6039      	str	r1, [r7, #0]
 80154ee:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154f0:	79fb      	ldrb	r3, [r7, #7]
 80154f2:	2b05      	cmp	r3, #5
 80154f4:	d002      	beq.n	80154fc <RegionChanMaskSet+0x18>
 80154f6:	2b08      	cmp	r3, #8
 80154f8:	d005      	beq.n	8015506 <RegionChanMaskSet+0x22>
 80154fa:	e009      	b.n	8015510 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80154fc:	6838      	ldr	r0, [r7, #0]
 80154fe:	f001 fd4d 	bl	8016f9c <RegionEU868ChanMaskSet>
 8015502:	4603      	mov	r3, r0
 8015504:	e005      	b.n	8015512 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8015506:	6838      	ldr	r0, [r7, #0]
 8015508:	f002 ff72 	bl	80183f0 <RegionUS915ChanMaskSet>
 801550c:	4603      	mov	r3, r0
 801550e:	e000      	b.n	8015512 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015510:	2300      	movs	r3, #0
        }
    }
}
 8015512:	4618      	mov	r0, r3
 8015514:	3708      	adds	r7, #8
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}

0801551a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801551a:	b580      	push	{r7, lr}
 801551c:	b082      	sub	sp, #8
 801551e:	af00      	add	r7, sp, #0
 8015520:	603b      	str	r3, [r7, #0]
 8015522:	4603      	mov	r3, r0
 8015524:	71fb      	strb	r3, [r7, #7]
 8015526:	460b      	mov	r3, r1
 8015528:	71bb      	strb	r3, [r7, #6]
 801552a:	4613      	mov	r3, r2
 801552c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801552e:	79fb      	ldrb	r3, [r7, #7]
 8015530:	2b05      	cmp	r3, #5
 8015532:	d002      	beq.n	801553a <RegionComputeRxWindowParameters+0x20>
 8015534:	2b08      	cmp	r3, #8
 8015536:	d008      	beq.n	801554a <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015538:	e00e      	b.n	8015558 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801553a:	7979      	ldrb	r1, [r7, #5]
 801553c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	683a      	ldr	r2, [r7, #0]
 8015544:	f001 fd54 	bl	8016ff0 <RegionEU868ComputeRxWindowParameters>
 8015548:	e006      	b.n	8015558 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801554a:	7979      	ldrb	r1, [r7, #5]
 801554c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	683a      	ldr	r2, [r7, #0]
 8015554:	f002 ffb4 	bl	80184c0 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8015558:	bf00      	nop
 801555a:	3708      	adds	r7, #8
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
 8015566:	4603      	mov	r3, r0
 8015568:	60b9      	str	r1, [r7, #8]
 801556a:	607a      	str	r2, [r7, #4]
 801556c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801556e:	7bfb      	ldrb	r3, [r7, #15]
 8015570:	2b05      	cmp	r3, #5
 8015572:	d002      	beq.n	801557a <RegionRxConfig+0x1a>
 8015574:	2b08      	cmp	r3, #8
 8015576:	d006      	beq.n	8015586 <RegionRxConfig+0x26>
 8015578:	e00b      	b.n	8015592 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801557a:	6879      	ldr	r1, [r7, #4]
 801557c:	68b8      	ldr	r0, [r7, #8]
 801557e:	f001 fd91 	bl	80170a4 <RegionEU868RxConfig>
 8015582:	4603      	mov	r3, r0
 8015584:	e006      	b.n	8015594 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8015586:	6879      	ldr	r1, [r7, #4]
 8015588:	68b8      	ldr	r0, [r7, #8]
 801558a:	f002 ffe3 	bl	8018554 <RegionUS915RxConfig>
 801558e:	4603      	mov	r3, r0
 8015590:	e000      	b.n	8015594 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015592:	2300      	movs	r3, #0
        }
    }
}
 8015594:	4618      	mov	r0, r3
 8015596:	3710      	adds	r7, #16
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b084      	sub	sp, #16
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	60b9      	str	r1, [r7, #8]
 80155a4:	607a      	str	r2, [r7, #4]
 80155a6:	603b      	str	r3, [r7, #0]
 80155a8:	4603      	mov	r3, r0
 80155aa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80155ac:	7bfb      	ldrb	r3, [r7, #15]
 80155ae:	2b05      	cmp	r3, #5
 80155b0:	d002      	beq.n	80155b8 <RegionTxConfig+0x1c>
 80155b2:	2b08      	cmp	r3, #8
 80155b4:	d007      	beq.n	80155c6 <RegionTxConfig+0x2a>
 80155b6:	e00d      	b.n	80155d4 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80155b8:	683a      	ldr	r2, [r7, #0]
 80155ba:	6879      	ldr	r1, [r7, #4]
 80155bc:	68b8      	ldr	r0, [r7, #8]
 80155be:	f001 fe41 	bl	8017244 <RegionEU868TxConfig>
 80155c2:	4603      	mov	r3, r0
 80155c4:	e007      	b.n	80155d6 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 80155c6:	683a      	ldr	r2, [r7, #0]
 80155c8:	6879      	ldr	r1, [r7, #4]
 80155ca:	68b8      	ldr	r0, [r7, #8]
 80155cc:	f003 f846 	bl	801865c <RegionUS915TxConfig>
 80155d0:	4603      	mov	r3, r0
 80155d2:	e000      	b.n	80155d6 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80155d4:	2300      	movs	r3, #0
        }
    }
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3710      	adds	r7, #16
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}

080155de <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80155de:	b580      	push	{r7, lr}
 80155e0:	b086      	sub	sp, #24
 80155e2:	af02      	add	r7, sp, #8
 80155e4:	60b9      	str	r1, [r7, #8]
 80155e6:	607a      	str	r2, [r7, #4]
 80155e8:	603b      	str	r3, [r7, #0]
 80155ea:	4603      	mov	r3, r0
 80155ec:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80155ee:	7bfb      	ldrb	r3, [r7, #15]
 80155f0:	2b05      	cmp	r3, #5
 80155f2:	d002      	beq.n	80155fa <RegionLinkAdrReq+0x1c>
 80155f4:	2b08      	cmp	r3, #8
 80155f6:	d00a      	beq.n	801560e <RegionLinkAdrReq+0x30>
 80155f8:	e013      	b.n	8015622 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80155fa:	69fb      	ldr	r3, [r7, #28]
 80155fc:	9300      	str	r3, [sp, #0]
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	683a      	ldr	r2, [r7, #0]
 8015602:	6879      	ldr	r1, [r7, #4]
 8015604:	68b8      	ldr	r0, [r7, #8]
 8015606:	f001 feed 	bl	80173e4 <RegionEU868LinkAdrReq>
 801560a:	4603      	mov	r3, r0
 801560c:	e00a      	b.n	8015624 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	9300      	str	r3, [sp, #0]
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	683a      	ldr	r2, [r7, #0]
 8015616:	6879      	ldr	r1, [r7, #4]
 8015618:	68b8      	ldr	r0, [r7, #8]
 801561a:	f003 f8c9 	bl	80187b0 <RegionUS915LinkAdrReq>
 801561e:	4603      	mov	r3, r0
 8015620:	e000      	b.n	8015624 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015622:	2300      	movs	r3, #0
        }
    }
}
 8015624:	4618      	mov	r0, r3
 8015626:	3710      	adds	r7, #16
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	4603      	mov	r3, r0
 8015634:	6039      	str	r1, [r7, #0]
 8015636:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015638:	79fb      	ldrb	r3, [r7, #7]
 801563a:	2b05      	cmp	r3, #5
 801563c:	d002      	beq.n	8015644 <RegionRxParamSetupReq+0x18>
 801563e:	2b08      	cmp	r3, #8
 8015640:	d005      	beq.n	801564e <RegionRxParamSetupReq+0x22>
 8015642:	e009      	b.n	8015658 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8015644:	6838      	ldr	r0, [r7, #0]
 8015646:	f001 ffef 	bl	8017628 <RegionEU868RxParamSetupReq>
 801564a:	4603      	mov	r3, r0
 801564c:	e005      	b.n	801565a <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801564e:	6838      	ldr	r0, [r7, #0]
 8015650:	f003 fac8 	bl	8018be4 <RegionUS915RxParamSetupReq>
 8015654:	4603      	mov	r3, r0
 8015656:	e000      	b.n	801565a <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015658:	2300      	movs	r3, #0
        }
    }
}
 801565a:	4618      	mov	r0, r3
 801565c:	3708      	adds	r7, #8
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b082      	sub	sp, #8
 8015666:	af00      	add	r7, sp, #0
 8015668:	4603      	mov	r3, r0
 801566a:	6039      	str	r1, [r7, #0]
 801566c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801566e:	79fb      	ldrb	r3, [r7, #7]
 8015670:	2b05      	cmp	r3, #5
 8015672:	d002      	beq.n	801567a <RegionNewChannelReq+0x18>
 8015674:	2b08      	cmp	r3, #8
 8015676:	d005      	beq.n	8015684 <RegionNewChannelReq+0x22>
 8015678:	e009      	b.n	801568e <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801567a:	6838      	ldr	r0, [r7, #0]
 801567c:	f002 f812 	bl	80176a4 <RegionEU868NewChannelReq>
 8015680:	4603      	mov	r3, r0
 8015682:	e005      	b.n	8015690 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8015684:	6838      	ldr	r0, [r7, #0]
 8015686:	f003 faf9 	bl	8018c7c <RegionUS915NewChannelReq>
 801568a:	4603      	mov	r3, r0
 801568c:	e000      	b.n	8015690 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801568e:	2300      	movs	r3, #0
        }
    }
}
 8015690:	4618      	mov	r0, r3
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	4603      	mov	r3, r0
 80156a0:	6039      	str	r1, [r7, #0]
 80156a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80156a4:	79fb      	ldrb	r3, [r7, #7]
 80156a6:	2b05      	cmp	r3, #5
 80156a8:	d002      	beq.n	80156b0 <RegionTxParamSetupReq+0x18>
 80156aa:	2b08      	cmp	r3, #8
 80156ac:	d005      	beq.n	80156ba <RegionTxParamSetupReq+0x22>
 80156ae:	e009      	b.n	80156c4 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80156b0:	6838      	ldr	r0, [r7, #0]
 80156b2:	f002 f855 	bl	8017760 <RegionEU868TxParamSetupReq>
 80156b6:	4603      	mov	r3, r0
 80156b8:	e005      	b.n	80156c6 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80156ba:	6838      	ldr	r0, [r7, #0]
 80156bc:	f003 fae9 	bl	8018c92 <RegionUS915TxParamSetupReq>
 80156c0:	4603      	mov	r3, r0
 80156c2:	e000      	b.n	80156c6 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80156c4:	2300      	movs	r3, #0
        }
    }
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3708      	adds	r7, #8
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}

080156ce <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80156ce:	b580      	push	{r7, lr}
 80156d0:	b082      	sub	sp, #8
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	4603      	mov	r3, r0
 80156d6:	6039      	str	r1, [r7, #0]
 80156d8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80156da:	79fb      	ldrb	r3, [r7, #7]
 80156dc:	2b05      	cmp	r3, #5
 80156de:	d002      	beq.n	80156e6 <RegionDlChannelReq+0x18>
 80156e0:	2b08      	cmp	r3, #8
 80156e2:	d005      	beq.n	80156f0 <RegionDlChannelReq+0x22>
 80156e4:	e009      	b.n	80156fa <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80156e6:	6838      	ldr	r0, [r7, #0]
 80156e8:	f002 f846 	bl	8017778 <RegionEU868DlChannelReq>
 80156ec:	4603      	mov	r3, r0
 80156ee:	e005      	b.n	80156fc <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80156f0:	6838      	ldr	r0, [r7, #0]
 80156f2:	f003 fad9 	bl	8018ca8 <RegionUS915DlChannelReq>
 80156f6:	4603      	mov	r3, r0
 80156f8:	e000      	b.n	80156fc <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80156fa:	2300      	movs	r3, #0
        }
    }
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b082      	sub	sp, #8
 8015708:	af00      	add	r7, sp, #0
 801570a:	4603      	mov	r3, r0
 801570c:	71fb      	strb	r3, [r7, #7]
 801570e:	460b      	mov	r3, r1
 8015710:	71bb      	strb	r3, [r7, #6]
 8015712:	4613      	mov	r3, r2
 8015714:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015716:	79fb      	ldrb	r3, [r7, #7]
 8015718:	2b05      	cmp	r3, #5
 801571a:	d002      	beq.n	8015722 <RegionAlternateDr+0x1e>
 801571c:	2b08      	cmp	r3, #8
 801571e:	d009      	beq.n	8015734 <RegionAlternateDr+0x30>
 8015720:	e011      	b.n	8015746 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8015722:	797a      	ldrb	r2, [r7, #5]
 8015724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015728:	4611      	mov	r1, r2
 801572a:	4618      	mov	r0, r3
 801572c:	f002 f86e 	bl	801780c <RegionEU868AlternateDr>
 8015730:	4603      	mov	r3, r0
 8015732:	e009      	b.n	8015748 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8015734:	797a      	ldrb	r2, [r7, #5]
 8015736:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801573a:	4611      	mov	r1, r2
 801573c:	4618      	mov	r0, r3
 801573e:	f003 fabf 	bl	8018cc0 <RegionUS915AlternateDr>
 8015742:	4603      	mov	r3, r0
 8015744:	e000      	b.n	8015748 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015746:	2300      	movs	r3, #0
        }
    }
}
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}

08015750 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	60b9      	str	r1, [r7, #8]
 8015758:	607a      	str	r2, [r7, #4]
 801575a:	603b      	str	r3, [r7, #0]
 801575c:	4603      	mov	r3, r0
 801575e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015760:	7bfb      	ldrb	r3, [r7, #15]
 8015762:	2b05      	cmp	r3, #5
 8015764:	d002      	beq.n	801576c <RegionNextChannel+0x1c>
 8015766:	2b08      	cmp	r3, #8
 8015768:	d008      	beq.n	801577c <RegionNextChannel+0x2c>
 801576a:	e00f      	b.n	801578c <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801576c:	69bb      	ldr	r3, [r7, #24]
 801576e:	683a      	ldr	r2, [r7, #0]
 8015770:	6879      	ldr	r1, [r7, #4]
 8015772:	68b8      	ldr	r0, [r7, #8]
 8015774:	f002 f85a 	bl	801782c <RegionEU868NextChannel>
 8015778:	4603      	mov	r3, r0
 801577a:	e008      	b.n	801578e <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801577c:	69bb      	ldr	r3, [r7, #24]
 801577e:	683a      	ldr	r2, [r7, #0]
 8015780:	6879      	ldr	r1, [r7, #4]
 8015782:	68b8      	ldr	r0, [r7, #8]
 8015784:	f003 fad2 	bl	8018d2c <RegionUS915NextChannel>
 8015788:	4603      	mov	r3, r0
 801578a:	e000      	b.n	801578e <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801578c:	2309      	movs	r3, #9
        }
    }
}
 801578e:	4618      	mov	r0, r3
 8015790:	3710      	adds	r7, #16
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}

08015796 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015796:	b590      	push	{r4, r7, lr}
 8015798:	b083      	sub	sp, #12
 801579a:	af00      	add	r7, sp, #0
 801579c:	4604      	mov	r4, r0
 801579e:	4608      	mov	r0, r1
 80157a0:	4611      	mov	r1, r2
 80157a2:	461a      	mov	r2, r3
 80157a4:	4623      	mov	r3, r4
 80157a6:	71fb      	strb	r3, [r7, #7]
 80157a8:	4603      	mov	r3, r0
 80157aa:	71bb      	strb	r3, [r7, #6]
 80157ac:	460b      	mov	r3, r1
 80157ae:	717b      	strb	r3, [r7, #5]
 80157b0:	4613      	mov	r3, r2
 80157b2:	713b      	strb	r3, [r7, #4]
    switch( region )
 80157b4:	79fb      	ldrb	r3, [r7, #7]
 80157b6:	2b05      	cmp	r3, #5
 80157b8:	d002      	beq.n	80157c0 <RegionApplyDrOffset+0x2a>
 80157ba:	2b08      	cmp	r3, #8
 80157bc:	d00a      	beq.n	80157d4 <RegionApplyDrOffset+0x3e>
 80157be:	e013      	b.n	80157e8 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80157c0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80157c4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80157c8:	79bb      	ldrb	r3, [r7, #6]
 80157ca:	4618      	mov	r0, r3
 80157cc:	f002 f9a8 	bl	8017b20 <RegionEU868ApplyDrOffset>
 80157d0:	4603      	mov	r3, r0
 80157d2:	e00a      	b.n	80157ea <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80157d4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80157d8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80157dc:	79bb      	ldrb	r3, [r7, #6]
 80157de:	4618      	mov	r0, r3
 80157e0:	f003 fb92 	bl	8018f08 <RegionUS915ApplyDrOffset>
 80157e4:	4603      	mov	r3, r0
 80157e6:	e000      	b.n	80157ea <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80157e8:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	370c      	adds	r7, #12
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd90      	pop	{r4, r7, pc}
	...

080157f4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80157f4:	b480      	push	{r7}
 80157f6:	b083      	sub	sp, #12
 80157f8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80157fa:	4b04      	ldr	r3, [pc, #16]	; (801580c <RegionGetVersion+0x18>)
 80157fc:	607b      	str	r3, [r7, #4]

    return version;
 80157fe:	687b      	ldr	r3, [r7, #4]
}
 8015800:	4618      	mov	r0, r3
 8015802:	370c      	adds	r7, #12
 8015804:	46bd      	mov	sp, r7
 8015806:	bc80      	pop	{r7}
 8015808:	4770      	bx	lr
 801580a:	bf00      	nop
 801580c:	02010001 	.word	0x02010001

08015810 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8015810:	b480      	push	{r7}
 8015812:	b087      	sub	sp, #28
 8015814:	af00      	add	r7, sp, #0
 8015816:	4603      	mov	r3, r0
 8015818:	60b9      	str	r1, [r7, #8]
 801581a:	607a      	str	r2, [r7, #4]
 801581c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d002      	beq.n	801582a <FindAvailable125kHzChannels+0x1a>
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d101      	bne.n	801582e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801582a:	2303      	movs	r3, #3
 801582c:	e021      	b.n	8015872 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2200      	movs	r2, #0
 8015832:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015834:	2300      	movs	r3, #0
 8015836:	75fb      	strb	r3, [r7, #23]
 8015838:	e017      	b.n	801586a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801583a:	89fa      	ldrh	r2, [r7, #14]
 801583c:	7dfb      	ldrb	r3, [r7, #23]
 801583e:	fa42 f303 	asr.w	r3, r2, r3
 8015842:	f003 0301 	and.w	r3, r3, #1
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00c      	beq.n	8015864 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	461a      	mov	r2, r3
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	4413      	add	r3, r2
 8015854:	7dfa      	ldrb	r2, [r7, #23]
 8015856:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	3301      	adds	r3, #1
 801585e:	b2da      	uxtb	r2, r3
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015864:	7dfb      	ldrb	r3, [r7, #23]
 8015866:	3301      	adds	r3, #1
 8015868:	75fb      	strb	r3, [r7, #23]
 801586a:	7dfb      	ldrb	r3, [r7, #23]
 801586c:	2b07      	cmp	r3, #7
 801586e:	d9e4      	bls.n	801583a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8015870:	2300      	movs	r3, #0
}
 8015872:	4618      	mov	r0, r3
 8015874:	371c      	adds	r7, #28
 8015876:	46bd      	mov	sp, r7
 8015878:	bc80      	pop	{r7}
 801587a:	4770      	bx	lr

0801587c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801587c:	b590      	push	{r4, r7, lr}
 801587e:	b089      	sub	sp, #36	; 0x24
 8015880:	af00      	add	r7, sp, #0
 8015882:	60f8      	str	r0, [r7, #12]
 8015884:	60b9      	str	r1, [r7, #8]
 8015886:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015888:	2300      	movs	r3, #0
 801588a:	617b      	str	r3, [r7, #20]
 801588c:	2300      	movs	r3, #0
 801588e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8015890:	2300      	movs	r3, #0
 8015892:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d005      	beq.n	80158a6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d002      	beq.n	80158a6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d101      	bne.n	80158aa <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80158a6:	2303      	movs	r3, #3
 80158a8:	e055      	b.n	8015956 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80158b0:	7f7b      	ldrb	r3, [r7, #29]
 80158b2:	085b      	lsrs	r3, r3, #1
 80158b4:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 80158b6:	7f7b      	ldrb	r3, [r7, #29]
 80158b8:	f003 0301 	and.w	r3, r3, #1
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d107      	bne.n	80158d2 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80158c2:	7f3b      	ldrb	r3, [r7, #28]
 80158c4:	005b      	lsls	r3, r3, #1
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	4413      	add	r3, r2
 80158ca:	881b      	ldrh	r3, [r3, #0]
 80158cc:	b2db      	uxtb	r3, r3
 80158ce:	83fb      	strh	r3, [r7, #30]
 80158d0:	e006      	b.n	80158e0 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80158d2:	7f3b      	ldrb	r3, [r7, #28]
 80158d4:	005b      	lsls	r3, r3, #1
 80158d6:	68fa      	ldr	r2, [r7, #12]
 80158d8:	4413      	add	r3, r2
 80158da:	881b      	ldrh	r3, [r3, #0]
 80158dc:	0a1b      	lsrs	r3, r3, #8
 80158de:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80158e0:	f107 0213 	add.w	r2, r7, #19
 80158e4:	f107 0114 	add.w	r1, r7, #20
 80158e8:	8bfb      	ldrh	r3, [r7, #30]
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7ff ff90 	bl	8015810 <FindAvailable125kHzChannels>
 80158f0:	4603      	mov	r3, r0
 80158f2:	2b03      	cmp	r3, #3
 80158f4:	d101      	bne.n	80158fa <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80158f6:	2303      	movs	r3, #3
 80158f8:	e02d      	b.n	8015956 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80158fa:	7cfb      	ldrb	r3, [r7, #19]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d011      	beq.n	8015924 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015900:	7f7b      	ldrb	r3, [r7, #29]
 8015902:	00db      	lsls	r3, r3, #3
 8015904:	b2dc      	uxtb	r4, r3
 8015906:	7cfb      	ldrb	r3, [r7, #19]
 8015908:	3b01      	subs	r3, #1
 801590a:	4619      	mov	r1, r3
 801590c:	2000      	movs	r0, #0
 801590e:	f003 fb4d 	bl	8018fac <randr>
 8015912:	4603      	mov	r3, r0
 8015914:	3320      	adds	r3, #32
 8015916:	443b      	add	r3, r7
 8015918:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801591c:	4423      	add	r3, r4
 801591e:	b2da      	uxtb	r2, r3
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8015924:	7f7b      	ldrb	r3, [r7, #29]
 8015926:	3301      	adds	r3, #1
 8015928:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801592a:	7f7b      	ldrb	r3, [r7, #29]
 801592c:	2b07      	cmp	r3, #7
 801592e:	d901      	bls.n	8015934 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8015930:	2300      	movs	r3, #0
 8015932:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8015934:	7cfb      	ldrb	r3, [r7, #19]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d104      	bne.n	8015944 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	7f7a      	ldrb	r2, [r7, #29]
 8015940:	429a      	cmp	r2, r3
 8015942:	d1b5      	bne.n	80158b0 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8015944:	7cfb      	ldrb	r3, [r7, #19]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d004      	beq.n	8015954 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	7f7a      	ldrb	r2, [r7, #29]
 801594e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015950:	2300      	movs	r3, #0
 8015952:	e000      	b.n	8015956 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015954:	2303      	movs	r3, #3
}
 8015956:	4618      	mov	r0, r3
 8015958:	3724      	adds	r7, #36	; 0x24
 801595a:	46bd      	mov	sp, r7
 801595c:	bd90      	pop	{r4, r7, pc}

0801595e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801595e:	b480      	push	{r7}
 8015960:	b085      	sub	sp, #20
 8015962:	af00      	add	r7, sp, #0
 8015964:	4603      	mov	r3, r0
 8015966:	60b9      	str	r1, [r7, #8]
 8015968:	607a      	str	r2, [r7, #4]
 801596a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801596c:	7bfb      	ldrb	r3, [r7, #15]
 801596e:	687a      	ldr	r2, [r7, #4]
 8015970:	fb03 f202 	mul.w	r2, r3, r2
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	4413      	add	r3, r2
}
 8015978:	4618      	mov	r0, r3
 801597a:	3714      	adds	r7, #20
 801597c:	46bd      	mov	sp, r7
 801597e:	bc80      	pop	{r7}
 8015980:	4770      	bx	lr

08015982 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015982:	b480      	push	{r7}
 8015984:	b087      	sub	sp, #28
 8015986:	af00      	add	r7, sp, #0
 8015988:	60f8      	str	r0, [r7, #12]
 801598a:	4608      	mov	r0, r1
 801598c:	4639      	mov	r1, r7
 801598e:	e881 000c 	stmia.w	r1, {r2, r3}
 8015992:	4603      	mov	r3, r0
 8015994:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	881b      	ldrh	r3, [r3, #0]
 801599a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801599c:	7afb      	ldrb	r3, [r7, #11]
 801599e:	f083 0301 	eor.w	r3, r3, #1
 80159a2:	b2db      	uxtb	r3, r3
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d01b      	beq.n	80159e0 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80159a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80159ac:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80159b4:	d202      	bcs.n	80159bc <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80159b6:	2364      	movs	r3, #100	; 0x64
 80159b8:	82bb      	strh	r3, [r7, #20]
 80159ba:	e00b      	b.n	80159d4 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80159c2:	4293      	cmp	r3, r2
 80159c4:	d803      	bhi.n	80159ce <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80159c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80159ca:	82bb      	strh	r3, [r7, #20]
 80159cc:	e002      	b.n	80159d4 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80159ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80159d2:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80159d4:	8aba      	ldrh	r2, [r7, #20]
 80159d6:	8afb      	ldrh	r3, [r7, #22]
 80159d8:	4293      	cmp	r3, r2
 80159da:	bf38      	it	cc
 80159dc:	4613      	movcc	r3, r2
 80159de:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80159e0:	8afb      	ldrh	r3, [r7, #22]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d101      	bne.n	80159ea <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80159e6:	2301      	movs	r3, #1
 80159e8:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80159ea:	8afb      	ldrh	r3, [r7, #22]
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	371c      	adds	r7, #28
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bc80      	pop	{r7}
 80159f4:	4770      	bx	lr
	...

080159f8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b08e      	sub	sp, #56	; 0x38
 80159fc:	af02      	add	r7, sp, #8
 80159fe:	60f8      	str	r0, [r7, #12]
 8015a00:	4608      	mov	r0, r1
 8015a02:	4639      	mov	r1, r7
 8015a04:	e881 000c 	stmia.w	r1, {r2, r3}
 8015a08:	4603      	mov	r3, r0
 8015a0a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	881b      	ldrh	r3, [r3, #0]
 8015a10:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015a12:	4b4b      	ldr	r3, [pc, #300]	; (8015b40 <SetMaxTimeCredits+0x148>)
 8015a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015a16:	463b      	mov	r3, r7
 8015a18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a1c:	f006 ff68 	bl	801c8f0 <SysTimeToMs>
 8015a20:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8015a22:	f107 0314 	add.w	r3, r7, #20
 8015a26:	2200      	movs	r2, #0
 8015a28:	601a      	str	r2, [r3, #0]
 8015a2a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015a2c:	7af9      	ldrb	r1, [r7, #11]
 8015a2e:	463b      	mov	r3, r7
 8015a30:	cb0c      	ldmia	r3, {r2, r3}
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7ff ffa5 	bl	8015982 <GetDutyCycle>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8015a3c:	7afb      	ldrb	r3, [r7, #11]
 8015a3e:	f083 0301 	eor.w	r3, r3, #1
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d062      	beq.n	8015b0e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015a48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a4a:	2b64      	cmp	r3, #100	; 0x64
 8015a4c:	d105      	bne.n	8015a5a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015a4e:	4b3c      	ldr	r3, [pc, #240]	; (8015b40 <SetMaxTimeCredits+0x148>)
 8015a50:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a56:	609a      	str	r2, [r3, #8]
 8015a58:	e00b      	b.n	8015a72 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015a5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015a60:	d105      	bne.n	8015a6e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015a62:	4b38      	ldr	r3, [pc, #224]	; (8015b44 <SetMaxTimeCredits+0x14c>)
 8015a64:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a6a:	609a      	str	r2, [r3, #8]
 8015a6c:	e001      	b.n	8015a72 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015a6e:	4b36      	ldr	r3, [pc, #216]	; (8015b48 <SetMaxTimeCredits+0x150>)
 8015a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	689a      	ldr	r2, [r3, #8]
 8015a76:	f107 031c 	add.w	r3, r7, #28
 8015a7a:	4611      	mov	r1, r2
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f006 ff5f 	bl	801c940 <SysTimeFromMs>
 8015a82:	f107 0014 	add.w	r0, r7, #20
 8015a86:	6a3b      	ldr	r3, [r7, #32]
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	463a      	mov	r2, r7
 8015a8e:	ca06      	ldmia	r2, {r1, r2}
 8015a90:	f006 fe6f 	bl	801c772 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015a94:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015a98:	f083 0301 	eor.w	r3, r3, #1
 8015a9c:	b2db      	uxtb	r3, r3
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d006      	beq.n	8015ab0 <SetMaxTimeCredits+0xb8>
 8015aa2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015aa6:	f083 0301 	eor.w	r3, r3, #1
 8015aaa:	b2db      	uxtb	r3, r3
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d108      	bne.n	8015ac2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d103      	bne.n	8015ac2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015aba:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015abc:	4a23      	ldr	r2, [pc, #140]	; (8015b4c <SetMaxTimeCredits+0x154>)
 8015abe:	4293      	cmp	r3, r2
 8015ac0:	d92f      	bls.n	8015b22 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ac6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	4a21      	ldr	r2, [pc, #132]	; (8015b50 <SetMaxTimeCredits+0x158>)
 8015acc:	4293      	cmp	r3, r2
 8015ace:	d928      	bls.n	8015b22 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015ad6:	3b30      	subs	r3, #48	; 0x30
 8015ad8:	4a1e      	ldr	r2, [pc, #120]	; (8015b54 <SetMaxTimeCredits+0x15c>)
 8015ada:	fba2 2303 	umull	r2, r3, r2, r3
 8015ade:	0c1b      	lsrs	r3, r3, #16
 8015ae0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	4a1c      	ldr	r2, [pc, #112]	; (8015b58 <SetMaxTimeCredits+0x160>)
 8015ae6:	fb02 f303 	mul.w	r3, r2, r3
 8015aea:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015aec:	697b      	ldr	r3, [r7, #20]
 8015aee:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8015af2:	3330      	adds	r3, #48	; 0x30
 8015af4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015af6:	2300      	movs	r3, #0
 8015af8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015afa:	f107 0314 	add.w	r3, r7, #20
 8015afe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015b02:	f006 fef5 	bl	801c8f0 <SysTimeToMs>
 8015b06:	4602      	mov	r2, r0
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	609a      	str	r2, [r3, #8]
 8015b0c:	e009      	b.n	8015b22 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015b0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015b12:	f083 0301 	eor.w	r3, r3, #1
 8015b16:	b2db      	uxtb	r3, r3
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d002      	beq.n	8015b22 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b20:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	685b      	ldr	r3, [r3, #4]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d102      	bne.n	8015b30 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b2e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b34:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015b36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3730      	adds	r7, #48	; 0x30
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	001b7740 	.word	0x001b7740
 8015b44:	0112a880 	.word	0x0112a880
 8015b48:	02932e00 	.word	0x02932e00
 8015b4c:	0001517f 	.word	0x0001517f
 8015b50:	0001ec2f 	.word	0x0001ec2f
 8015b54:	c22e4507 	.word	0xc22e4507
 8015b58:	00015180 	.word	0x00015180

08015b5c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b086      	sub	sp, #24
 8015b60:	af02      	add	r7, sp, #8
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	4608      	mov	r0, r1
 8015b66:	4611      	mov	r1, r2
 8015b68:	461a      	mov	r2, r3
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	70fb      	strb	r3, [r7, #3]
 8015b6e:	460b      	mov	r3, r1
 8015b70:	70bb      	strb	r3, [r7, #2]
 8015b72:	4613      	mov	r3, r2
 8015b74:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015b76:	78f9      	ldrb	r1, [r7, #3]
 8015b78:	787b      	ldrb	r3, [r7, #1]
 8015b7a:	9301      	str	r3, [sp, #4]
 8015b7c:	78bb      	ldrb	r3, [r7, #2]
 8015b7e:	9300      	str	r3, [sp, #0]
 8015b80:	f107 0318 	add.w	r3, r7, #24
 8015b84:	cb0c      	ldmia	r3, {r2, r3}
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7ff ff36 	bl	80159f8 <SetMaxTimeCredits>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015b90:	78fb      	ldrb	r3, [r7, #3]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d00a      	beq.n	8015bac <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f007 fce4 	bl	801d568 <UTIL_TIMER_GetElapsedTime>
 8015ba0:	4602      	mov	r2, r0
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	68db      	ldr	r3, [r3, #12]
 8015ba6:	441a      	add	r2, r3
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	68da      	ldr	r2, [r3, #12]
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	691b      	ldr	r3, [r3, #16]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d903      	bls.n	8015bc0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	691a      	ldr	r2, [r3, #16]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	6a3a      	ldr	r2, [r7, #32]
 8015bc4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015bc6:	89fb      	ldrh	r3, [r7, #14]
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b085      	sub	sp, #20
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	460a      	mov	r2, r1
 8015bda:	80fb      	strh	r3, [r7, #6]
 8015bdc:	4613      	mov	r3, r2
 8015bde:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015be0:	2300      	movs	r3, #0
 8015be2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015be4:	2300      	movs	r3, #0
 8015be6:	73bb      	strb	r3, [r7, #14]
 8015be8:	e011      	b.n	8015c0e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015bea:	88fa      	ldrh	r2, [r7, #6]
 8015bec:	7bbb      	ldrb	r3, [r7, #14]
 8015bee:	2101      	movs	r1, #1
 8015bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8015bf4:	401a      	ands	r2, r3
 8015bf6:	7bbb      	ldrb	r3, [r7, #14]
 8015bf8:	2101      	movs	r1, #1
 8015bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d102      	bne.n	8015c08 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015c02:	7bfb      	ldrb	r3, [r7, #15]
 8015c04:	3301      	adds	r3, #1
 8015c06:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015c08:	7bbb      	ldrb	r3, [r7, #14]
 8015c0a:	3301      	adds	r3, #1
 8015c0c:	73bb      	strb	r3, [r7, #14]
 8015c0e:	7bba      	ldrb	r2, [r7, #14]
 8015c10:	797b      	ldrb	r3, [r7, #5]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d3e9      	bcc.n	8015bea <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3714      	adds	r7, #20
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bc80      	pop	{r7}
 8015c20:	4770      	bx	lr

08015c22 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b084      	sub	sp, #16
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	6039      	str	r1, [r7, #0]
 8015c2a:	4611      	mov	r1, r2
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	4603      	mov	r3, r0
 8015c30:	71fb      	strb	r3, [r7, #7]
 8015c32:	460b      	mov	r3, r1
 8015c34:	71bb      	strb	r3, [r7, #6]
 8015c36:	4613      	mov	r3, r2
 8015c38:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015c3a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015c3e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015c42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f000 f85d 	bl	8015d06 <RegionCommonValueInRange>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d101      	bne.n	8015c56 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015c52:	2300      	movs	r3, #0
 8015c54:	e053      	b.n	8015cfe <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015c56:	2300      	movs	r3, #0
 8015c58:	73fb      	strb	r3, [r7, #15]
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	73bb      	strb	r3, [r7, #14]
 8015c5e:	e049      	b.n	8015cf4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015c60:	2300      	movs	r3, #0
 8015c62:	737b      	strb	r3, [r7, #13]
 8015c64:	e03d      	b.n	8015ce2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015c66:	7bbb      	ldrb	r3, [r7, #14]
 8015c68:	005b      	lsls	r3, r3, #1
 8015c6a:	683a      	ldr	r2, [r7, #0]
 8015c6c:	4413      	add	r3, r2
 8015c6e:	881b      	ldrh	r3, [r3, #0]
 8015c70:	461a      	mov	r2, r3
 8015c72:	7b7b      	ldrb	r3, [r7, #13]
 8015c74:	fa42 f303 	asr.w	r3, r2, r3
 8015c78:	f003 0301 	and.w	r3, r3, #1
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d02d      	beq.n	8015cdc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015c80:	7bfa      	ldrb	r2, [r7, #15]
 8015c82:	7b7b      	ldrb	r3, [r7, #13]
 8015c84:	4413      	add	r3, r2
 8015c86:	461a      	mov	r2, r3
 8015c88:	4613      	mov	r3, r2
 8015c8a:	005b      	lsls	r3, r3, #1
 8015c8c:	4413      	add	r3, r2
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	461a      	mov	r2, r3
 8015c92:	69fb      	ldr	r3, [r7, #28]
 8015c94:	4413      	add	r3, r2
 8015c96:	7a1b      	ldrb	r3, [r3, #8]
 8015c98:	f343 0303 	sbfx	r3, r3, #0, #4
 8015c9c:	b25b      	sxtb	r3, r3
 8015c9e:	f003 030f 	and.w	r3, r3, #15
 8015ca2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015ca4:	7bfa      	ldrb	r2, [r7, #15]
 8015ca6:	7b7b      	ldrb	r3, [r7, #13]
 8015ca8:	4413      	add	r3, r2
 8015caa:	461a      	mov	r2, r3
 8015cac:	4613      	mov	r3, r2
 8015cae:	005b      	lsls	r3, r3, #1
 8015cb0:	4413      	add	r3, r2
 8015cb2:	009b      	lsls	r3, r3, #2
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	69fb      	ldr	r3, [r7, #28]
 8015cb8:	4413      	add	r3, r2
 8015cba:	7a1b      	ldrb	r3, [r3, #8]
 8015cbc:	f343 1303 	sbfx	r3, r3, #4, #4
 8015cc0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015cc2:	f003 030f 	and.w	r3, r3, #15
 8015cc6:	b25a      	sxtb	r2, r3
 8015cc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f000 f81a 	bl	8015d06 <RegionCommonValueInRange>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d101      	bne.n	8015cdc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015cd8:	2301      	movs	r3, #1
 8015cda:	e010      	b.n	8015cfe <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015cdc:	7b7b      	ldrb	r3, [r7, #13]
 8015cde:	3301      	adds	r3, #1
 8015ce0:	737b      	strb	r3, [r7, #13]
 8015ce2:	7b7b      	ldrb	r3, [r7, #13]
 8015ce4:	2b0f      	cmp	r3, #15
 8015ce6:	d9be      	bls.n	8015c66 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015ce8:	7bfb      	ldrb	r3, [r7, #15]
 8015cea:	3310      	adds	r3, #16
 8015cec:	73fb      	strb	r3, [r7, #15]
 8015cee:	7bbb      	ldrb	r3, [r7, #14]
 8015cf0:	3301      	adds	r3, #1
 8015cf2:	73bb      	strb	r3, [r7, #14]
 8015cf4:	7bfa      	ldrb	r2, [r7, #15]
 8015cf6:	79fb      	ldrb	r3, [r7, #7]
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d3b1      	bcc.n	8015c60 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015cfc:	2300      	movs	r3, #0
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3710      	adds	r7, #16
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}

08015d06 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015d06:	b480      	push	{r7}
 8015d08:	b083      	sub	sp, #12
 8015d0a:	af00      	add	r7, sp, #0
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	71fb      	strb	r3, [r7, #7]
 8015d10:	460b      	mov	r3, r1
 8015d12:	71bb      	strb	r3, [r7, #6]
 8015d14:	4613      	mov	r3, r2
 8015d16:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015d18:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015d1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	db07      	blt.n	8015d34 <RegionCommonValueInRange+0x2e>
 8015d24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015d28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	dc01      	bgt.n	8015d34 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015d30:	2301      	movs	r3, #1
 8015d32:	e000      	b.n	8015d36 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015d34:	2300      	movs	r3, #0
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	370c      	adds	r7, #12
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bc80      	pop	{r7}
 8015d3e:	4770      	bx	lr

08015d40 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015d40:	b480      	push	{r7}
 8015d42:	b085      	sub	sp, #20
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
 8015d48:	460b      	mov	r3, r1
 8015d4a:	70fb      	strb	r3, [r7, #3]
 8015d4c:	4613      	mov	r3, r2
 8015d4e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015d50:	78fb      	ldrb	r3, [r7, #3]
 8015d52:	091b      	lsrs	r3, r3, #4
 8015d54:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015d56:	78bb      	ldrb	r3, [r7, #2]
 8015d58:	091b      	lsrs	r3, r3, #4
 8015d5a:	b2db      	uxtb	r3, r3
 8015d5c:	7bfa      	ldrb	r2, [r7, #15]
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	d803      	bhi.n	8015d6a <RegionCommonChanDisable+0x2a>
 8015d62:	78fa      	ldrb	r2, [r7, #3]
 8015d64:	78bb      	ldrb	r3, [r7, #2]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d301      	bcc.n	8015d6e <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	e017      	b.n	8015d9e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015d6e:	7bfb      	ldrb	r3, [r7, #15]
 8015d70:	005b      	lsls	r3, r3, #1
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	4413      	add	r3, r2
 8015d76:	881b      	ldrh	r3, [r3, #0]
 8015d78:	b21a      	sxth	r2, r3
 8015d7a:	78fb      	ldrb	r3, [r7, #3]
 8015d7c:	f003 030f 	and.w	r3, r3, #15
 8015d80:	2101      	movs	r1, #1
 8015d82:	fa01 f303 	lsl.w	r3, r1, r3
 8015d86:	b21b      	sxth	r3, r3
 8015d88:	43db      	mvns	r3, r3
 8015d8a:	b21b      	sxth	r3, r3
 8015d8c:	4013      	ands	r3, r2
 8015d8e:	b219      	sxth	r1, r3
 8015d90:	7bfb      	ldrb	r3, [r7, #15]
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	4413      	add	r3, r2
 8015d98:	b28a      	uxth	r2, r1
 8015d9a:	801a      	strh	r2, [r3, #0]

    return true;
 8015d9c:	2301      	movs	r3, #1
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3714      	adds	r7, #20
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bc80      	pop	{r7}
 8015da6:	4770      	bx	lr

08015da8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b084      	sub	sp, #16
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	460b      	mov	r3, r1
 8015db2:	70fb      	strb	r3, [r7, #3]
 8015db4:	4613      	mov	r3, r2
 8015db6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015db8:	2300      	movs	r3, #0
 8015dba:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d101      	bne.n	8015dc6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	e018      	b.n	8015df8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015dc6:	78fb      	ldrb	r3, [r7, #3]
 8015dc8:	73bb      	strb	r3, [r7, #14]
 8015dca:	e010      	b.n	8015dee <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015dcc:	7bbb      	ldrb	r3, [r7, #14]
 8015dce:	005b      	lsls	r3, r3, #1
 8015dd0:	687a      	ldr	r2, [r7, #4]
 8015dd2:	4413      	add	r3, r2
 8015dd4:	881b      	ldrh	r3, [r3, #0]
 8015dd6:	2110      	movs	r1, #16
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f7ff fef9 	bl	8015bd0 <CountChannels>
 8015dde:	4603      	mov	r3, r0
 8015de0:	461a      	mov	r2, r3
 8015de2:	7bfb      	ldrb	r3, [r7, #15]
 8015de4:	4413      	add	r3, r2
 8015de6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015de8:	7bbb      	ldrb	r3, [r7, #14]
 8015dea:	3301      	adds	r3, #1
 8015dec:	73bb      	strb	r3, [r7, #14]
 8015dee:	7bba      	ldrb	r2, [r7, #14]
 8015df0:	78bb      	ldrb	r3, [r7, #2]
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d3ea      	bcc.n	8015dcc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3710      	adds	r7, #16
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}

08015e00 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015e00:	b480      	push	{r7}
 8015e02:	b087      	sub	sp, #28
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	60f8      	str	r0, [r7, #12]
 8015e08:	60b9      	str	r1, [r7, #8]
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d016      	beq.n	8015e42 <RegionCommonChanMaskCopy+0x42>
 8015e14:	68bb      	ldr	r3, [r7, #8]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d013      	beq.n	8015e42 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	75fb      	strb	r3, [r7, #23]
 8015e1e:	e00c      	b.n	8015e3a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015e20:	7dfb      	ldrb	r3, [r7, #23]
 8015e22:	005b      	lsls	r3, r3, #1
 8015e24:	68ba      	ldr	r2, [r7, #8]
 8015e26:	441a      	add	r2, r3
 8015e28:	7dfb      	ldrb	r3, [r7, #23]
 8015e2a:	005b      	lsls	r3, r3, #1
 8015e2c:	68f9      	ldr	r1, [r7, #12]
 8015e2e:	440b      	add	r3, r1
 8015e30:	8812      	ldrh	r2, [r2, #0]
 8015e32:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015e34:	7dfb      	ldrb	r3, [r7, #23]
 8015e36:	3301      	adds	r3, #1
 8015e38:	75fb      	strb	r3, [r7, #23]
 8015e3a:	7dfa      	ldrb	r2, [r7, #23]
 8015e3c:	79fb      	ldrb	r3, [r7, #7]
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	d3ee      	bcc.n	8015e20 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015e42:	bf00      	nop
 8015e44:	371c      	adds	r7, #28
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bc80      	pop	{r7}
 8015e4a:	4770      	bx	lr

08015e4c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015e4c:	b082      	sub	sp, #8
 8015e4e:	b580      	push	{r7, lr}
 8015e50:	b086      	sub	sp, #24
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	60f8      	str	r0, [r7, #12]
 8015e56:	60b9      	str	r1, [r7, #8]
 8015e58:	627b      	str	r3, [r7, #36]	; 0x24
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015e5e:	79f9      	ldrb	r1, [r7, #7]
 8015e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015e64:	cb0c      	ldmia	r3, {r2, r3}
 8015e66:	68f8      	ldr	r0, [r7, #12]
 8015e68:	f7ff fd8b 	bl	8015982 <GetDutyCycle>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	68da      	ldr	r2, [r3, #12]
 8015e74:	8afb      	ldrh	r3, [r7, #22]
 8015e76:	68b9      	ldr	r1, [r7, #8]
 8015e78:	fb01 f303 	mul.w	r3, r1, r3
 8015e7c:	429a      	cmp	r2, r3
 8015e7e:	d909      	bls.n	8015e94 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	68da      	ldr	r2, [r3, #12]
 8015e84:	8afb      	ldrh	r3, [r7, #22]
 8015e86:	68b9      	ldr	r1, [r7, #8]
 8015e88:	fb01 f303 	mul.w	r3, r1, r3
 8015e8c:	1ad2      	subs	r2, r2, r3
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015e92:	e002      	b.n	8015e9a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	2200      	movs	r2, #0
 8015e98:	60da      	str	r2, [r3, #12]
}
 8015e9a:	bf00      	nop
 8015e9c:	3718      	adds	r7, #24
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015ea4:	b002      	add	sp, #8
 8015ea6:	4770      	bx	lr

08015ea8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eaa:	b08f      	sub	sp, #60	; 0x3c
 8015eac:	af04      	add	r7, sp, #16
 8015eae:	6039      	str	r1, [r7, #0]
 8015eb0:	4611      	mov	r1, r2
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	71fb      	strb	r3, [r7, #7]
 8015eb8:	460b      	mov	r3, r1
 8015eba:	71bb      	strb	r3, [r7, #6]
 8015ebc:	4613      	mov	r3, r2
 8015ebe:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ec4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015ec6:	f007 fb3d 	bl	801d544 <UTIL_TIMER_GetCurrentTime>
 8015eca:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015eda:	2300      	movs	r3, #0
 8015edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015ee0:	e0ba      	b.n	8016058 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015ee2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ee6:	4613      	mov	r3, r2
 8015ee8:	005b      	lsls	r3, r3, #1
 8015eea:	4413      	add	r3, r2
 8015eec:	00db      	lsls	r3, r3, #3
 8015eee:	461a      	mov	r2, r3
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	189c      	adds	r4, r3, r2
 8015ef4:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015ef8:	797a      	ldrb	r2, [r7, #5]
 8015efa:	79fd      	ldrb	r5, [r7, #7]
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	9302      	str	r3, [sp, #8]
 8015f00:	46ec      	mov	ip, sp
 8015f02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015f06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f0a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f0e:	4633      	mov	r3, r6
 8015f10:	4629      	mov	r1, r5
 8015f12:	4620      	mov	r0, r4
 8015f14:	f7ff fe22 	bl	8015b5c <UpdateTimeCredits>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015f1c:	8afa      	ldrh	r2, [r7, #22]
 8015f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f20:	fb02 f303 	mul.w	r3, r2, r3
 8015f24:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015f26:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	4413      	add	r3, r2
 8015f30:	00db      	lsls	r3, r3, #3
 8015f32:	461a      	mov	r2, r3
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	4413      	add	r3, r2
 8015f38:	68db      	ldr	r3, [r3, #12]
 8015f3a:	69ba      	ldr	r2, [r7, #24]
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d908      	bls.n	8015f52 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015f40:	797b      	ldrb	r3, [r7, #5]
 8015f42:	f083 0301 	eor.w	r3, r3, #1
 8015f46:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d013      	beq.n	8015f74 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015f4c:	79fb      	ldrb	r3, [r7, #7]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d010      	beq.n	8015f74 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015f52:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f56:	4613      	mov	r3, r2
 8015f58:	005b      	lsls	r3, r3, #1
 8015f5a:	4413      	add	r3, r2
 8015f5c:	00db      	lsls	r3, r3, #3
 8015f5e:	461a      	mov	r2, r3
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	4413      	add	r3, r2
 8015f64:	2201      	movs	r2, #1
 8015f66:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015f72:	e06c      	b.n	801604e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015f74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f78:	4613      	mov	r3, r2
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	4413      	add	r3, r2
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	461a      	mov	r2, r3
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	4413      	add	r3, r2
 8015f86:	2200      	movs	r2, #0
 8015f88:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8015f8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f8e:	4613      	mov	r3, r2
 8015f90:	005b      	lsls	r3, r3, #1
 8015f92:	4413      	add	r3, r2
 8015f94:	00db      	lsls	r3, r3, #3
 8015f96:	461a      	mov	r2, r3
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	4413      	add	r3, r2
 8015f9c:	691b      	ldr	r3, [r3, #16]
 8015f9e:	69ba      	ldr	r2, [r7, #24]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d815      	bhi.n	8015fd0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015fa4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015fa8:	4613      	mov	r3, r2
 8015faa:	005b      	lsls	r3, r3, #1
 8015fac:	4413      	add	r3, r2
 8015fae:	00db      	lsls	r3, r3, #3
 8015fb0:	461a      	mov	r2, r3
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	4413      	add	r3, r2
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	69ba      	ldr	r2, [r7, #24]
 8015fba:	1ad3      	subs	r3, r2, r3
 8015fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	bf28      	it	cs
 8015fc2:	4613      	movcs	r3, r2
 8015fc4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fca:	3301      	adds	r3, #1
 8015fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015fd0:	79fb      	ldrb	r3, [r7, #7]
 8015fd2:	f083 0301 	eor.w	r3, r3, #1
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d038      	beq.n	801604e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015fdc:	2300      	movs	r3, #0
 8015fde:	60fb      	str	r3, [r7, #12]
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015fe4:	8afb      	ldrh	r3, [r7, #22]
 8015fe6:	2b64      	cmp	r3, #100	; 0x64
 8015fe8:	d103      	bne.n	8015ff2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015fea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015fee:	60fb      	str	r3, [r7, #12]
 8015ff0:	e009      	b.n	8016006 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015ff2:	8afb      	ldrh	r3, [r7, #22]
 8015ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015ff8:	d103      	bne.n	8016002 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015ffa:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015ffe:	60fb      	str	r3, [r7, #12]
 8016000:	e001      	b.n	8016006 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016002:	4b1e      	ldr	r3, [pc, #120]	; (801607c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016004:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016008:	4a1c      	ldr	r2, [pc, #112]	; (801607c <RegionCommonUpdateBandTimeOff+0x1d4>)
 801600a:	4293      	cmp	r3, r2
 801600c:	d90e      	bls.n	801602c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801600e:	68fa      	ldr	r2, [r7, #12]
 8016010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016012:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8016016:	3b30      	subs	r3, #48	; 0x30
 8016018:	4919      	ldr	r1, [pc, #100]	; (8016080 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801601a:	fba1 1303 	umull	r1, r3, r1, r3
 801601e:	0c1b      	lsrs	r3, r3, #16
 8016020:	3301      	adds	r3, #1
 8016022:	4918      	ldr	r1, [pc, #96]	; (8016084 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8016024:	fb01 f303 	mul.w	r3, r1, r3
 8016028:	4413      	add	r3, r2
 801602a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801602c:	f107 000c 	add.w	r0, r7, #12
 8016030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016032:	9300      	str	r3, [sp, #0]
 8016034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016036:	f107 020c 	add.w	r2, r7, #12
 801603a:	ca06      	ldmia	r2, {r1, r2}
 801603c:	f006 fb99 	bl	801c772 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016040:	f107 030c 	add.w	r3, r7, #12
 8016044:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016048:	f006 fc52 	bl	801c8f0 <SysTimeToMs>
 801604c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801604e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016052:	3301      	adds	r3, #1
 8016054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016058:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801605c:	79bb      	ldrb	r3, [r7, #6]
 801605e:	429a      	cmp	r2, r3
 8016060:	f4ff af3f 	bcc.w	8015ee2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016068:	2b00      	cmp	r3, #0
 801606a:	d102      	bne.n	8016072 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801606c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016070:	e000      	b.n	8016074 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016074:	4618      	mov	r0, r3
 8016076:	372c      	adds	r7, #44	; 0x2c
 8016078:	46bd      	mov	sp, r7
 801607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801607c:	0001ec30 	.word	0x0001ec30
 8016080:	c22e4507 	.word	0xc22e4507
 8016084:	00015180 	.word	0x00015180

08016088 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016088:	b480      	push	{r7}
 801608a:	b085      	sub	sp, #20
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016092:	2300      	movs	r3, #0
 8016094:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	2b03      	cmp	r3, #3
 801609c:	d13f      	bne.n	801611e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	3301      	adds	r3, #1
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	b25a      	sxtb	r2, r3
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160b0:	f003 030f 	and.w	r3, r3, #15
 80160b4:	b25a      	sxtb	r2, r3
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160c0:	b2db      	uxtb	r3, r3
 80160c2:	091b      	lsrs	r3, r3, #4
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	b25a      	sxtb	r2, r3
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	3302      	adds	r3, #2
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	b29a      	uxth	r2, r3
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	889b      	ldrh	r3, [r3, #4]
 80160dc:	b21a      	sxth	r2, r3
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	3303      	adds	r3, #3
 80160e2:	781b      	ldrb	r3, [r3, #0]
 80160e4:	021b      	lsls	r3, r3, #8
 80160e6:	b21b      	sxth	r3, r3
 80160e8:	4313      	orrs	r3, r2
 80160ea:	b21b      	sxth	r3, r3
 80160ec:	b29a      	uxth	r2, r3
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	791a      	ldrb	r2, [r3, #4]
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	091b      	lsrs	r3, r3, #4
 8016100:	b2db      	uxtb	r3, r3
 8016102:	f003 0307 	and.w	r3, r3, #7
 8016106:	b2da      	uxtb	r2, r3
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	f003 030f 	and.w	r3, r3, #15
 8016114:	b2da      	uxtb	r2, r3
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801611a:	2305      	movs	r3, #5
 801611c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801611e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016120:	4618      	mov	r0, r3
 8016122:	3714      	adds	r7, #20
 8016124:	46bd      	mov	sp, r7
 8016126:	bc80      	pop	{r7}
 8016128:	4770      	bx	lr

0801612a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801612a:	b5b0      	push	{r4, r5, r7, lr}
 801612c:	b088      	sub	sp, #32
 801612e:	af02      	add	r7, sp, #8
 8016130:	60f8      	str	r0, [r7, #12]
 8016132:	60b9      	str	r1, [r7, #8]
 8016134:	607a      	str	r2, [r7, #4]
 8016136:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	791b      	ldrb	r3, [r3, #4]
 801613c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	799b      	ldrb	r3, [r3, #6]
 8016142:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	79db      	ldrb	r3, [r3, #7]
 8016148:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	7a1b      	ldrb	r3, [r3, #8]
 801614e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	795b      	ldrb	r3, [r3, #5]
 8016154:	f083 0301 	eor.w	r3, r3, #1
 8016158:	b2db      	uxtb	r3, r3
 801615a:	2b00      	cmp	r3, #0
 801615c:	d008      	beq.n	8016170 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	7adb      	ldrb	r3, [r3, #11]
 8016162:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	7a5b      	ldrb	r3, [r3, #9]
 8016168:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	7a9b      	ldrb	r3, [r3, #10]
 801616e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016170:	7dfb      	ldrb	r3, [r7, #23]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d04a      	beq.n	801620c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016176:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801617a:	2b0f      	cmp	r3, #15
 801617c:	d103      	bne.n	8016186 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	7a5b      	ldrb	r3, [r3, #9]
 8016182:	75bb      	strb	r3, [r7, #22]
 8016184:	e01d      	b.n	80161c2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	7b18      	ldrb	r0, [r3, #12]
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	6919      	ldr	r1, [r3, #16]
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801619a:	68fa      	ldr	r2, [r7, #12]
 801619c:	6992      	ldr	r2, [r2, #24]
 801619e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80161a2:	9201      	str	r2, [sp, #4]
 80161a4:	9300      	str	r3, [sp, #0]
 80161a6:	462b      	mov	r3, r5
 80161a8:	4622      	mov	r2, r4
 80161aa:	f7ff fd3a 	bl	8015c22 <RegionCommonChanVerifyDr>
 80161ae:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80161b0:	f083 0301 	eor.w	r3, r3, #1
 80161b4:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d003      	beq.n	80161c2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80161ba:	7dfb      	ldrb	r3, [r7, #23]
 80161bc:	f023 0302 	bic.w	r3, r3, #2
 80161c0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80161c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80161c6:	2b0f      	cmp	r3, #15
 80161c8:	d103      	bne.n	80161d2 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	7a9b      	ldrb	r3, [r3, #10]
 80161ce:	757b      	strb	r3, [r7, #21]
 80161d0:	e01c      	b.n	801620c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80161de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7ff fd8f 	bl	8015d06 <RegionCommonValueInRange>
 80161e8:	4603      	mov	r3, r0
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d10e      	bne.n	801620c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80161f4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80161f8:	429a      	cmp	r2, r3
 80161fa:	da03      	bge.n	8016204 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	7f5b      	ldrb	r3, [r3, #29]
 8016200:	757b      	strb	r3, [r7, #21]
 8016202:	e003      	b.n	801620c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016204:	7dfb      	ldrb	r3, [r7, #23]
 8016206:	f023 0304 	bic.w	r3, r3, #4
 801620a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801620c:	7dfb      	ldrb	r3, [r7, #23]
 801620e:	2b07      	cmp	r3, #7
 8016210:	d105      	bne.n	801621e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016212:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d101      	bne.n	801621e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801621a:	2301      	movs	r3, #1
 801621c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	7dba      	ldrb	r2, [r7, #22]
 8016222:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	7d7a      	ldrb	r2, [r7, #21]
 8016228:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801622a:	7d3a      	ldrb	r2, [r7, #20]
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	701a      	strb	r2, [r3, #0]

    return status;
 8016230:	7dfb      	ldrb	r3, [r7, #23]
}
 8016232:	4618      	mov	r0, r3
 8016234:	3718      	adds	r7, #24
 8016236:	46bd      	mov	sp, r7
 8016238:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801623c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801623c:	b480      	push	{r7}
 801623e:	b083      	sub	sp, #12
 8016240:	af00      	add	r7, sp, #0
 8016242:	4603      	mov	r3, r0
 8016244:	6039      	str	r1, [r7, #0]
 8016246:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016248:	79fb      	ldrb	r3, [r7, #7]
 801624a:	4a06      	ldr	r2, [pc, #24]	; (8016264 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801624c:	fa02 f303 	lsl.w	r3, r2, r3
 8016250:	461a      	mov	r2, r3
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016258:	4618      	mov	r0, r3
 801625a:	370c      	adds	r7, #12
 801625c:	46bd      	mov	sp, r7
 801625e:	bc80      	pop	{r7}
 8016260:	4770      	bx	lr
 8016262:	bf00      	nop
 8016264:	000f4240 	.word	0x000f4240

08016268 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016268:	b480      	push	{r7}
 801626a:	b083      	sub	sp, #12
 801626c:	af00      	add	r7, sp, #0
 801626e:	4603      	mov	r3, r0
 8016270:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016272:	79fb      	ldrb	r3, [r7, #7]
 8016274:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016278:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801627c:	4618      	mov	r0, r3
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	bc80      	pop	{r7}
 8016284:	4770      	bx	lr
	...

08016288 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016288:	b480      	push	{r7}
 801628a:	b085      	sub	sp, #20
 801628c:	af00      	add	r7, sp, #0
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	607a      	str	r2, [r7, #4]
 8016292:	603b      	str	r3, [r7, #0]
 8016294:	460b      	mov	r3, r1
 8016296:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016298:	7afa      	ldrb	r2, [r7, #11]
 801629a:	7afb      	ldrb	r3, [r7, #11]
 801629c:	3b04      	subs	r3, #4
 801629e:	4619      	mov	r1, r3
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	fb03 f101 	mul.w	r1, r3, r1
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162ac:	fb00 f303 	mul.w	r3, r0, r3
 80162b0:	440b      	add	r3, r1
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d013      	beq.n	80162e0 <RegionCommonComputeRxWindowParameters+0x58>
 80162b8:	7afb      	ldrb	r3, [r7, #11]
 80162ba:	3b04      	subs	r3, #4
 80162bc:	4619      	mov	r1, r3
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	fb03 f101 	mul.w	r1, r3, r1
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162ca:	fb00 f303 	mul.w	r3, r0, r3
 80162ce:	440b      	add	r3, r1
 80162d0:	0059      	lsls	r1, r3, #1
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	440b      	add	r3, r1
 80162d6:	1e59      	subs	r1, r3, #1
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	fbb1 f3f3 	udiv	r3, r1, r3
 80162de:	e00f      	b.n	8016300 <RegionCommonComputeRxWindowParameters+0x78>
 80162e0:	7afb      	ldrb	r3, [r7, #11]
 80162e2:	3b04      	subs	r3, #4
 80162e4:	4619      	mov	r1, r3
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	fb03 f101 	mul.w	r1, r3, r1
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162f2:	fb00 f303 	mul.w	r3, r0, r3
 80162f6:	440b      	add	r3, r1
 80162f8:	0059      	lsls	r1, r3, #1
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8016300:	429a      	cmp	r2, r3
 8016302:	bf38      	it	cc
 8016304:	461a      	movcc	r2, r3
 8016306:	69bb      	ldr	r3, [r7, #24]
 8016308:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	009b      	lsls	r3, r3, #2
 801630e:	4619      	mov	r1, r3
 8016310:	69bb      	ldr	r3, [r7, #24]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	fb02 f303 	mul.w	r3, r2, r3
 801631a:	2b00      	cmp	r3, #0
 801631c:	d007      	beq.n	801632e <RegionCommonComputeRxWindowParameters+0xa6>
 801631e:	69bb      	ldr	r3, [r7, #24]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	68fa      	ldr	r2, [r7, #12]
 8016324:	fb02 f303 	mul.w	r3, r2, r3
 8016328:	3301      	adds	r3, #1
 801632a:	085b      	lsrs	r3, r3, #1
 801632c:	e005      	b.n	801633a <RegionCommonComputeRxWindowParameters+0xb2>
 801632e:	69bb      	ldr	r3, [r7, #24]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	fb02 f303 	mul.w	r3, r2, r3
 8016338:	085b      	lsrs	r3, r3, #1
 801633a:	1acb      	subs	r3, r1, r3
 801633c:	683a      	ldr	r2, [r7, #0]
 801633e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016342:	fb01 f202 	mul.w	r2, r1, r2
 8016346:	1a9b      	subs	r3, r3, r2
 8016348:	2b00      	cmp	r3, #0
 801634a:	dd27      	ble.n	801639c <RegionCommonComputeRxWindowParameters+0x114>
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	4619      	mov	r1, r3
 8016352:	69bb      	ldr	r3, [r7, #24]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	68fa      	ldr	r2, [r7, #12]
 8016358:	fb02 f303 	mul.w	r3, r2, r3
 801635c:	2b00      	cmp	r3, #0
 801635e:	d007      	beq.n	8016370 <RegionCommonComputeRxWindowParameters+0xe8>
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	68fa      	ldr	r2, [r7, #12]
 8016366:	fb02 f303 	mul.w	r3, r2, r3
 801636a:	3301      	adds	r3, #1
 801636c:	085b      	lsrs	r3, r3, #1
 801636e:	e005      	b.n	801637c <RegionCommonComputeRxWindowParameters+0xf4>
 8016370:	69bb      	ldr	r3, [r7, #24]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	68fa      	ldr	r2, [r7, #12]
 8016376:	fb02 f303 	mul.w	r3, r2, r3
 801637a:	085b      	lsrs	r3, r3, #1
 801637c:	1acb      	subs	r3, r1, r3
 801637e:	683a      	ldr	r2, [r7, #0]
 8016380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016384:	fb01 f202 	mul.w	r2, r1, r2
 8016388:	1a9b      	subs	r3, r3, r2
 801638a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801638e:	4a19      	ldr	r2, [pc, #100]	; (80163f4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016390:	fb82 1203 	smull	r1, r2, r2, r3
 8016394:	1192      	asrs	r2, r2, #6
 8016396:	17db      	asrs	r3, r3, #31
 8016398:	1ad3      	subs	r3, r2, r3
 801639a:	e024      	b.n	80163e6 <RegionCommonComputeRxWindowParameters+0x15e>
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	009b      	lsls	r3, r3, #2
 80163a0:	4619      	mov	r1, r3
 80163a2:	69bb      	ldr	r3, [r7, #24]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	68fa      	ldr	r2, [r7, #12]
 80163a8:	fb02 f303 	mul.w	r3, r2, r3
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d007      	beq.n	80163c0 <RegionCommonComputeRxWindowParameters+0x138>
 80163b0:	69bb      	ldr	r3, [r7, #24]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	68fa      	ldr	r2, [r7, #12]
 80163b6:	fb02 f303 	mul.w	r3, r2, r3
 80163ba:	3301      	adds	r3, #1
 80163bc:	085b      	lsrs	r3, r3, #1
 80163be:	e005      	b.n	80163cc <RegionCommonComputeRxWindowParameters+0x144>
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	68fa      	ldr	r2, [r7, #12]
 80163c6:	fb02 f303 	mul.w	r3, r2, r3
 80163ca:	085b      	lsrs	r3, r3, #1
 80163cc:	1acb      	subs	r3, r1, r3
 80163ce:	683a      	ldr	r2, [r7, #0]
 80163d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80163d4:	fb01 f202 	mul.w	r2, r1, r2
 80163d8:	1a9b      	subs	r3, r3, r2
 80163da:	4a06      	ldr	r2, [pc, #24]	; (80163f4 <RegionCommonComputeRxWindowParameters+0x16c>)
 80163dc:	fb82 1203 	smull	r1, r2, r2, r3
 80163e0:	1192      	asrs	r2, r2, #6
 80163e2:	17db      	asrs	r3, r3, #31
 80163e4:	1ad3      	subs	r3, r2, r3
 80163e6:	69fa      	ldr	r2, [r7, #28]
 80163e8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80163ea:	bf00      	nop
 80163ec:	3714      	adds	r7, #20
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bc80      	pop	{r7}
 80163f2:	4770      	bx	lr
 80163f4:	10624dd3 	.word	0x10624dd3

080163f8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b086      	sub	sp, #24
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	4603      	mov	r3, r0
 8016400:	60b9      	str	r1, [r7, #8]
 8016402:	607a      	str	r2, [r7, #4]
 8016404:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016406:	2300      	movs	r3, #0
 8016408:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801640a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801640e:	005b      	lsls	r3, r3, #1
 8016410:	4618      	mov	r0, r3
 8016412:	f7ea f9db 	bl	80007cc <__aeabi_ui2f>
 8016416:	4603      	mov	r3, r0
 8016418:	4619      	mov	r1, r3
 801641a:	68b8      	ldr	r0, [r7, #8]
 801641c:	f7ea f924 	bl	8000668 <__aeabi_fsub>
 8016420:	4603      	mov	r3, r0
 8016422:	6879      	ldr	r1, [r7, #4]
 8016424:	4618      	mov	r0, r3
 8016426:	f7ea f91f 	bl	8000668 <__aeabi_fsub>
 801642a:	4603      	mov	r3, r0
 801642c:	4618      	mov	r0, r3
 801642e:	f7ea f80f 	bl	8000450 <__aeabi_f2d>
 8016432:	4602      	mov	r2, r0
 8016434:	460b      	mov	r3, r1
 8016436:	4610      	mov	r0, r2
 8016438:	4619      	mov	r1, r3
 801643a:	f007 fc19 	bl	801dc70 <floor>
 801643e:	4602      	mov	r2, r0
 8016440:	460b      	mov	r3, r1
 8016442:	4610      	mov	r0, r2
 8016444:	4619      	mov	r1, r3
 8016446:	f7ea f8e3 	bl	8000610 <__aeabi_d2iz>
 801644a:	4603      	mov	r3, r0
 801644c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801644e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016452:	4618      	mov	r0, r3
 8016454:	3718      	adds	r7, #24
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}

0801645a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801645a:	b590      	push	{r4, r7, lr}
 801645c:	b087      	sub	sp, #28
 801645e:	af00      	add	r7, sp, #0
 8016460:	60f8      	str	r0, [r7, #12]
 8016462:	60b9      	str	r1, [r7, #8]
 8016464:	607a      	str	r2, [r7, #4]
 8016466:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016468:	2300      	movs	r3, #0
 801646a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801646c:	2300      	movs	r3, #0
 801646e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016470:	2300      	movs	r3, #0
 8016472:	757b      	strb	r3, [r7, #21]
 8016474:	2300      	movs	r3, #0
 8016476:	753b      	strb	r3, [r7, #20]
 8016478:	e09c      	b.n	80165b4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801647a:	2300      	movs	r3, #0
 801647c:	74fb      	strb	r3, [r7, #19]
 801647e:	e08f      	b.n	80165a0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	685a      	ldr	r2, [r3, #4]
 8016484:	7d3b      	ldrb	r3, [r7, #20]
 8016486:	005b      	lsls	r3, r3, #1
 8016488:	4413      	add	r3, r2
 801648a:	881b      	ldrh	r3, [r3, #0]
 801648c:	461a      	mov	r2, r3
 801648e:	7cfb      	ldrb	r3, [r7, #19]
 8016490:	fa42 f303 	asr.w	r3, r2, r3
 8016494:	f003 0301 	and.w	r3, r3, #1
 8016498:	2b00      	cmp	r3, #0
 801649a:	d07e      	beq.n	801659a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	689a      	ldr	r2, [r3, #8]
 80164a0:	7d79      	ldrb	r1, [r7, #21]
 80164a2:	7cfb      	ldrb	r3, [r7, #19]
 80164a4:	440b      	add	r3, r1
 80164a6:	4619      	mov	r1, r3
 80164a8:	460b      	mov	r3, r1
 80164aa:	005b      	lsls	r3, r3, #1
 80164ac:	440b      	add	r3, r1
 80164ae:	009b      	lsls	r3, r3, #2
 80164b0:	4413      	add	r3, r2
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d06b      	beq.n	8016590 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	f083 0301 	eor.w	r3, r3, #1
 80164c0:	b2db      	uxtb	r3, r3
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d011      	beq.n	80164ea <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00d      	beq.n	80164ea <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	695a      	ldr	r2, [r3, #20]
 80164d2:	7d3b      	ldrb	r3, [r7, #20]
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	881b      	ldrh	r3, [r3, #0]
 80164da:	461a      	mov	r2, r3
 80164dc:	7cfb      	ldrb	r3, [r7, #19]
 80164de:	fa42 f303 	asr.w	r3, r2, r3
 80164e2:	f003 0301 	and.w	r3, r3, #1
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d054      	beq.n	8016594 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	785b      	ldrb	r3, [r3, #1]
 80164ee:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	689a      	ldr	r2, [r3, #8]
 80164f4:	7d79      	ldrb	r1, [r7, #21]
 80164f6:	7cfb      	ldrb	r3, [r7, #19]
 80164f8:	440b      	add	r3, r1
 80164fa:	4619      	mov	r1, r3
 80164fc:	460b      	mov	r3, r1
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	440b      	add	r3, r1
 8016502:	009b      	lsls	r3, r3, #2
 8016504:	4413      	add	r3, r2
 8016506:	7a1b      	ldrb	r3, [r3, #8]
 8016508:	f343 0303 	sbfx	r3, r3, #0, #4
 801650c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801650e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	689a      	ldr	r2, [r3, #8]
 8016514:	7d79      	ldrb	r1, [r7, #21]
 8016516:	7cfb      	ldrb	r3, [r7, #19]
 8016518:	440b      	add	r3, r1
 801651a:	4619      	mov	r1, r3
 801651c:	460b      	mov	r3, r1
 801651e:	005b      	lsls	r3, r3, #1
 8016520:	440b      	add	r3, r1
 8016522:	009b      	lsls	r3, r3, #2
 8016524:	4413      	add	r3, r2
 8016526:	7a1b      	ldrb	r3, [r3, #8]
 8016528:	f343 1303 	sbfx	r3, r3, #4, #4
 801652c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801652e:	461a      	mov	r2, r3
 8016530:	4621      	mov	r1, r4
 8016532:	f7ff fbe8 	bl	8015d06 <RegionCommonValueInRange>
 8016536:	4603      	mov	r3, r0
 8016538:	2b00      	cmp	r3, #0
 801653a:	d02d      	beq.n	8016598 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	68da      	ldr	r2, [r3, #12]
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	6899      	ldr	r1, [r3, #8]
 8016544:	7d78      	ldrb	r0, [r7, #21]
 8016546:	7cfb      	ldrb	r3, [r7, #19]
 8016548:	4403      	add	r3, r0
 801654a:	4618      	mov	r0, r3
 801654c:	4603      	mov	r3, r0
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4403      	add	r3, r0
 8016552:	009b      	lsls	r3, r3, #2
 8016554:	440b      	add	r3, r1
 8016556:	7a5b      	ldrb	r3, [r3, #9]
 8016558:	4619      	mov	r1, r3
 801655a:	460b      	mov	r3, r1
 801655c:	005b      	lsls	r3, r3, #1
 801655e:	440b      	add	r3, r1
 8016560:	00db      	lsls	r3, r3, #3
 8016562:	4413      	add	r3, r2
 8016564:	7d1b      	ldrb	r3, [r3, #20]
 8016566:	f083 0301 	eor.w	r3, r3, #1
 801656a:	b2db      	uxtb	r3, r3
 801656c:	2b00      	cmp	r3, #0
 801656e:	d003      	beq.n	8016578 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016570:	7dbb      	ldrb	r3, [r7, #22]
 8016572:	3301      	adds	r3, #1
 8016574:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016576:	e010      	b.n	801659a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016578:	7dfb      	ldrb	r3, [r7, #23]
 801657a:	1c5a      	adds	r2, r3, #1
 801657c:	75fa      	strb	r2, [r7, #23]
 801657e:	461a      	mov	r2, r3
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	4413      	add	r3, r2
 8016584:	7d79      	ldrb	r1, [r7, #21]
 8016586:	7cfa      	ldrb	r2, [r7, #19]
 8016588:	440a      	add	r2, r1
 801658a:	b2d2      	uxtb	r2, r2
 801658c:	701a      	strb	r2, [r3, #0]
 801658e:	e004      	b.n	801659a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016590:	bf00      	nop
 8016592:	e002      	b.n	801659a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016594:	bf00      	nop
 8016596:	e000      	b.n	801659a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016598:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801659a:	7cfb      	ldrb	r3, [r7, #19]
 801659c:	3301      	adds	r3, #1
 801659e:	74fb      	strb	r3, [r7, #19]
 80165a0:	7cfb      	ldrb	r3, [r7, #19]
 80165a2:	2b0f      	cmp	r3, #15
 80165a4:	f67f af6c 	bls.w	8016480 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80165a8:	7d7b      	ldrb	r3, [r7, #21]
 80165aa:	3310      	adds	r3, #16
 80165ac:	757b      	strb	r3, [r7, #21]
 80165ae:	7d3b      	ldrb	r3, [r7, #20]
 80165b0:	3301      	adds	r3, #1
 80165b2:	753b      	strb	r3, [r7, #20]
 80165b4:	7d7b      	ldrb	r3, [r7, #21]
 80165b6:	b29a      	uxth	r2, r3
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	8a1b      	ldrh	r3, [r3, #16]
 80165bc:	429a      	cmp	r2, r3
 80165be:	f4ff af5c 	bcc.w	801647a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	7dfa      	ldrb	r2, [r7, #23]
 80165c6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	7dba      	ldrb	r2, [r7, #22]
 80165cc:	701a      	strb	r2, [r3, #0]
}
 80165ce:	bf00      	nop
 80165d0:	371c      	adds	r7, #28
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd90      	pop	{r4, r7, pc}

080165d6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80165d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165d8:	b08b      	sub	sp, #44	; 0x2c
 80165da:	af04      	add	r7, sp, #16
 80165dc:	60f8      	str	r0, [r7, #12]
 80165de:	60b9      	str	r1, [r7, #8]
 80165e0:	607a      	str	r2, [r7, #4]
 80165e2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	685b      	ldr	r3, [r3, #4]
 80165e8:	4618      	mov	r0, r3
 80165ea:	f006 ffbd 	bl	801d568 <UTIL_TIMER_GetElapsedTime>
 80165ee:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	681a      	ldr	r2, [r3, #0]
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	1ad2      	subs	r2, r2, r3
 80165f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165fa:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80165fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165fe:	2201      	movs	r2, #1
 8016600:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016602:	683b      	ldr	r3, [r7, #0]
 8016604:	2200      	movs	r2, #0
 8016606:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	685b      	ldr	r3, [r3, #4]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d004      	beq.n	801661a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016614:	697a      	ldr	r2, [r7, #20]
 8016616:	429a      	cmp	r2, r3
 8016618:	d32b      	bcc.n	8016672 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	2200      	movs	r2, #0
 801661e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	69db      	ldr	r3, [r3, #28]
 8016624:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801662a:	68dd      	ldr	r5, [r3, #12]
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	7a5e      	ldrb	r6, [r3, #9]
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	7d1b      	ldrb	r3, [r3, #20]
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	6992      	ldr	r2, [r2, #24]
 801663e:	9203      	str	r2, [sp, #12]
 8016640:	68fa      	ldr	r2, [r7, #12]
 8016642:	f10d 0e04 	add.w	lr, sp, #4
 8016646:	320c      	adds	r2, #12
 8016648:	e892 0003 	ldmia.w	r2, {r0, r1}
 801664c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016650:	9300      	str	r3, [sp, #0]
 8016652:	4663      	mov	r3, ip
 8016654:	4632      	mov	r2, r6
 8016656:	4629      	mov	r1, r5
 8016658:	4620      	mov	r0, r4
 801665a:	f7ff fc25 	bl	8015ea8 <RegionCommonUpdateBandTimeOff>
 801665e:	4602      	mov	r2, r0
 8016660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016662:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	69d8      	ldr	r0, [r3, #28]
 8016668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801666a:	683a      	ldr	r2, [r7, #0]
 801666c:	6879      	ldr	r1, [r7, #4]
 801666e:	f7ff fef4 	bl	801645a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d004      	beq.n	8016684 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801667c:	2200      	movs	r2, #0
 801667e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016680:	2300      	movs	r3, #0
 8016682:	e006      	b.n	8016692 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016686:	781b      	ldrb	r3, [r3, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d001      	beq.n	8016690 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801668c:	230b      	movs	r3, #11
 801668e:	e000      	b.n	8016692 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016690:	230c      	movs	r3, #12
    }
}
 8016692:	4618      	mov	r0, r3
 8016694:	371c      	adds	r7, #28
 8016696:	46bd      	mov	sp, r7
 8016698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801669a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801669a:	b5b0      	push	{r4, r5, r7, lr}
 801669c:	b086      	sub	sp, #24
 801669e:	af02      	add	r7, sp, #8
 80166a0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	781b      	ldrb	r3, [r3, #0]
 80166a6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f993 2000 	ldrsb.w	r2, [r3]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d103      	bne.n	80166c0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80166be:	e026      	b.n	801670e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80166c0:	7bfb      	ldrb	r3, [r7, #15]
 80166c2:	3b01      	subs	r3, #1
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80166ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d019      	beq.n	801670a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	78d8      	ldrb	r0, [r3, #3]
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6859      	ldr	r1, [r3, #4]
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80166ea:	687a      	ldr	r2, [r7, #4]
 80166ec:	6892      	ldr	r2, [r2, #8]
 80166ee:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80166f2:	9201      	str	r2, [sp, #4]
 80166f4:	9300      	str	r3, [sp, #0]
 80166f6:	462b      	mov	r3, r5
 80166f8:	4622      	mov	r2, r4
 80166fa:	f7ff fa92 	bl	8015c22 <RegionCommonChanVerifyDr>
 80166fe:	4603      	mov	r3, r0
 8016700:	f083 0301 	eor.w	r3, r3, #1
 8016704:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016706:	2b00      	cmp	r3, #0
 8016708:	d1da      	bne.n	80166c0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801670a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801670e:	4618      	mov	r0, r3
 8016710:	3710      	adds	r7, #16
 8016712:	46bd      	mov	sp, r7
 8016714:	bdb0      	pop	{r4, r5, r7, pc}

08016716 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016716:	b480      	push	{r7}
 8016718:	b083      	sub	sp, #12
 801671a:	af00      	add	r7, sp, #0
 801671c:	4603      	mov	r3, r0
 801671e:	460a      	mov	r2, r1
 8016720:	71fb      	strb	r3, [r7, #7]
 8016722:	4613      	mov	r3, r2
 8016724:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016726:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801672a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801672e:	4293      	cmp	r3, r2
 8016730:	bfb8      	it	lt
 8016732:	4613      	movlt	r3, r2
 8016734:	b25b      	sxtb	r3, r3
}
 8016736:	4618      	mov	r0, r3
 8016738:	370c      	adds	r7, #12
 801673a:	46bd      	mov	sp, r7
 801673c:	bc80      	pop	{r7}
 801673e:	4770      	bx	lr

08016740 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016740:	b480      	push	{r7}
 8016742:	b083      	sub	sp, #12
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	009b      	lsls	r3, r3, #2
 801674e:	683a      	ldr	r2, [r7, #0]
 8016750:	4413      	add	r3, r2
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	4a07      	ldr	r2, [pc, #28]	; (8016774 <RegionCommonGetBandwidth+0x34>)
 8016756:	4293      	cmp	r3, r2
 8016758:	d004      	beq.n	8016764 <RegionCommonGetBandwidth+0x24>
 801675a:	4a07      	ldr	r2, [pc, #28]	; (8016778 <RegionCommonGetBandwidth+0x38>)
 801675c:	4293      	cmp	r3, r2
 801675e:	d003      	beq.n	8016768 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016760:	2300      	movs	r3, #0
 8016762:	e002      	b.n	801676a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016764:	2301      	movs	r3, #1
 8016766:	e000      	b.n	801676a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016768:	2302      	movs	r3, #2
    }
}
 801676a:	4618      	mov	r0, r3
 801676c:	370c      	adds	r7, #12
 801676e:	46bd      	mov	sp, r7
 8016770:	bc80      	pop	{r7}
 8016772:	4770      	bx	lr
 8016774:	0003d090 	.word	0x0003d090
 8016778:	0007a120 	.word	0x0007a120

0801677c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b086      	sub	sp, #24
 8016780:	af04      	add	r7, sp, #16
 8016782:	4603      	mov	r3, r0
 8016784:	6039      	str	r1, [r7, #0]
 8016786:	71fb      	strb	r3, [r7, #7]
 8016788:	4613      	mov	r3, r2
 801678a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801678c:	79fb      	ldrb	r3, [r7, #7]
 801678e:	2b05      	cmp	r3, #5
 8016790:	d810      	bhi.n	80167b4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016792:	79fb      	ldrb	r3, [r7, #7]
 8016794:	4a0f      	ldr	r2, [pc, #60]	; (80167d4 <RegionCommonRxConfigPrint+0x58>)
 8016796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801679a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801679e:	9202      	str	r2, [sp, #8]
 80167a0:	683a      	ldr	r2, [r7, #0]
 80167a2:	9201      	str	r2, [sp, #4]
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	4b0c      	ldr	r3, [pc, #48]	; (80167d8 <RegionCommonRxConfigPrint+0x5c>)
 80167a8:	2201      	movs	r2, #1
 80167aa:	2100      	movs	r1, #0
 80167ac:	2002      	movs	r0, #2
 80167ae:	f006 ffb9 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80167b2:	e00a      	b.n	80167ca <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80167b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80167b8:	9301      	str	r3, [sp, #4]
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	9300      	str	r3, [sp, #0]
 80167be:	4b07      	ldr	r3, [pc, #28]	; (80167dc <RegionCommonRxConfigPrint+0x60>)
 80167c0:	2201      	movs	r2, #1
 80167c2:	2100      	movs	r1, #0
 80167c4:	2002      	movs	r0, #2
 80167c6:	f006 ffad 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 80167ca:	bf00      	nop
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	20000118 	.word	0x20000118
 80167d8:	0801e4c8 	.word	0x0801e4c8
 80167dc:	0801e4e8 	.word	0x0801e4e8

080167e0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b084      	sub	sp, #16
 80167e4:	af02      	add	r7, sp, #8
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	460b      	mov	r3, r1
 80167ea:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80167ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80167f0:	9301      	str	r3, [sp, #4]
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	9300      	str	r3, [sp, #0]
 80167f6:	4b05      	ldr	r3, [pc, #20]	; (801680c <RegionCommonTxConfigPrint+0x2c>)
 80167f8:	2201      	movs	r2, #1
 80167fa:	2100      	movs	r1, #0
 80167fc:	2002      	movs	r0, #2
 80167fe:	f006 ff91 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
}
 8016802:	bf00      	nop
 8016804:	3708      	adds	r7, #8
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop
 801680c:	0801e504 	.word	0x0801e504

08016810 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801681a:	4b2d      	ldr	r3, [pc, #180]	; (80168d0 <VerifyRfFreq+0xc0>)
 801681c:	6a1b      	ldr	r3, [r3, #32]
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	4798      	blx	r3
 8016822:	4603      	mov	r3, r0
 8016824:	f083 0301 	eor.w	r3, r3, #1
 8016828:	b2db      	uxtb	r3, r3
 801682a:	2b00      	cmp	r3, #0
 801682c:	d001      	beq.n	8016832 <VerifyRfFreq+0x22>
    {
        return false;
 801682e:	2300      	movs	r3, #0
 8016830:	e04a      	b.n	80168c8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	4a27      	ldr	r2, [pc, #156]	; (80168d4 <VerifyRfFreq+0xc4>)
 8016836:	4293      	cmp	r3, r2
 8016838:	d307      	bcc.n	801684a <VerifyRfFreq+0x3a>
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	4a26      	ldr	r2, [pc, #152]	; (80168d8 <VerifyRfFreq+0xc8>)
 801683e:	4293      	cmp	r3, r2
 8016840:	d803      	bhi.n	801684a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	2202      	movs	r2, #2
 8016846:	701a      	strb	r2, [r3, #0]
 8016848:	e03d      	b.n	80168c6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	4a22      	ldr	r2, [pc, #136]	; (80168d8 <VerifyRfFreq+0xc8>)
 801684e:	4293      	cmp	r3, r2
 8016850:	d907      	bls.n	8016862 <VerifyRfFreq+0x52>
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	4a21      	ldr	r2, [pc, #132]	; (80168dc <VerifyRfFreq+0xcc>)
 8016856:	4293      	cmp	r3, r2
 8016858:	d803      	bhi.n	8016862 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	2200      	movs	r2, #0
 801685e:	701a      	strb	r2, [r3, #0]
 8016860:	e031      	b.n	80168c6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	4a1d      	ldr	r2, [pc, #116]	; (80168dc <VerifyRfFreq+0xcc>)
 8016866:	4293      	cmp	r3, r2
 8016868:	d907      	bls.n	801687a <VerifyRfFreq+0x6a>
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	4a1c      	ldr	r2, [pc, #112]	; (80168e0 <VerifyRfFreq+0xd0>)
 801686e:	4293      	cmp	r3, r2
 8016870:	d803      	bhi.n	801687a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	2201      	movs	r2, #1
 8016876:	701a      	strb	r2, [r3, #0]
 8016878:	e025      	b.n	80168c6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	4a19      	ldr	r2, [pc, #100]	; (80168e4 <VerifyRfFreq+0xd4>)
 801687e:	4293      	cmp	r3, r2
 8016880:	d907      	bls.n	8016892 <VerifyRfFreq+0x82>
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	4a18      	ldr	r2, [pc, #96]	; (80168e8 <VerifyRfFreq+0xd8>)
 8016886:	4293      	cmp	r3, r2
 8016888:	d803      	bhi.n	8016892 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	2205      	movs	r2, #5
 801688e:	701a      	strb	r2, [r3, #0]
 8016890:	e019      	b.n	80168c6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	4a15      	ldr	r2, [pc, #84]	; (80168ec <VerifyRfFreq+0xdc>)
 8016896:	4293      	cmp	r3, r2
 8016898:	d907      	bls.n	80168aa <VerifyRfFreq+0x9a>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	4a14      	ldr	r2, [pc, #80]	; (80168f0 <VerifyRfFreq+0xe0>)
 801689e:	4293      	cmp	r3, r2
 80168a0:	d803      	bhi.n	80168aa <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	2203      	movs	r2, #3
 80168a6:	701a      	strb	r2, [r3, #0]
 80168a8:	e00d      	b.n	80168c6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	4a11      	ldr	r2, [pc, #68]	; (80168f4 <VerifyRfFreq+0xe4>)
 80168ae:	4293      	cmp	r3, r2
 80168b0:	d307      	bcc.n	80168c2 <VerifyRfFreq+0xb2>
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	4a10      	ldr	r2, [pc, #64]	; (80168f8 <VerifyRfFreq+0xe8>)
 80168b6:	4293      	cmp	r3, r2
 80168b8:	d803      	bhi.n	80168c2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	2204      	movs	r2, #4
 80168be:	701a      	strb	r2, [r3, #0]
 80168c0:	e001      	b.n	80168c6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80168c2:	2300      	movs	r3, #0
 80168c4:	e000      	b.n	80168c8 <VerifyRfFreq+0xb8>
    }
    return true;
 80168c6:	2301      	movs	r3, #1
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	0801ebac 	.word	0x0801ebac
 80168d4:	337055c0 	.word	0x337055c0
 80168d8:	338eda3f 	.word	0x338eda3f
 80168dc:	33bca100 	.word	0x33bca100
 80168e0:	33c5c8c0 	.word	0x33c5c8c0
 80168e4:	33c74f5f 	.word	0x33c74f5f
 80168e8:	33cef080 	.word	0x33cef080
 80168ec:	33d1fdbf 	.word	0x33d1fdbf
 80168f0:	33d5ce50 	.word	0x33d5ce50
 80168f4:	33d691a0 	.word	0x33d691a0
 80168f8:	33db2580 	.word	0x33db2580

080168fc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80168fc:	b590      	push	{r4, r7, lr}
 80168fe:	b08b      	sub	sp, #44	; 0x2c
 8016900:	af04      	add	r7, sp, #16
 8016902:	4603      	mov	r3, r0
 8016904:	460a      	mov	r2, r1
 8016906:	71fb      	strb	r3, [r7, #7]
 8016908:	4613      	mov	r3, r2
 801690a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801690c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016910:	4a1f      	ldr	r2, [pc, #124]	; (8016990 <GetTimeOnAir+0x94>)
 8016912:	5cd3      	ldrb	r3, [r2, r3]
 8016914:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8016916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801691a:	491e      	ldr	r1, [pc, #120]	; (8016994 <GetTimeOnAir+0x98>)
 801691c:	4618      	mov	r0, r3
 801691e:	f7ff ff0f 	bl	8016740 <RegionCommonGetBandwidth>
 8016922:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8016924:	2300      	movs	r3, #0
 8016926:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801692c:	2b07      	cmp	r3, #7
 801692e:	d118      	bne.n	8016962 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8016930:	4b19      	ldr	r3, [pc, #100]	; (8016998 <GetTimeOnAir+0x9c>)
 8016932:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016934:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801693c:	fb02 f303 	mul.w	r3, r2, r3
 8016940:	4619      	mov	r1, r3
 8016942:	88bb      	ldrh	r3, [r7, #4]
 8016944:	b2db      	uxtb	r3, r3
 8016946:	2201      	movs	r2, #1
 8016948:	9203      	str	r2, [sp, #12]
 801694a:	9302      	str	r3, [sp, #8]
 801694c:	2300      	movs	r3, #0
 801694e:	9301      	str	r3, [sp, #4]
 8016950:	2305      	movs	r3, #5
 8016952:	9300      	str	r3, [sp, #0]
 8016954:	2300      	movs	r3, #0
 8016956:	460a      	mov	r2, r1
 8016958:	68f9      	ldr	r1, [r7, #12]
 801695a:	2000      	movs	r0, #0
 801695c:	47a0      	blx	r4
 801695e:	6178      	str	r0, [r7, #20]
 8016960:	e011      	b.n	8016986 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016962:	4b0d      	ldr	r3, [pc, #52]	; (8016998 <GetTimeOnAir+0x9c>)
 8016964:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016966:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801696a:	88bb      	ldrh	r3, [r7, #4]
 801696c:	b2db      	uxtb	r3, r3
 801696e:	2101      	movs	r1, #1
 8016970:	9103      	str	r1, [sp, #12]
 8016972:	9302      	str	r3, [sp, #8]
 8016974:	2300      	movs	r3, #0
 8016976:	9301      	str	r3, [sp, #4]
 8016978:	2308      	movs	r3, #8
 801697a:	9300      	str	r3, [sp, #0]
 801697c:	2301      	movs	r3, #1
 801697e:	68f9      	ldr	r1, [r7, #12]
 8016980:	2001      	movs	r0, #1
 8016982:	47a0      	blx	r4
 8016984:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016986:	697b      	ldr	r3, [r7, #20]
}
 8016988:	4618      	mov	r0, r3
 801698a:	371c      	adds	r7, #28
 801698c:	46bd      	mov	sp, r7
 801698e:	bd90      	pop	{r4, r7, pc}
 8016990:	0801eaf0 	.word	0x0801eaf0
 8016994:	0801eaf8 	.word	0x0801eaf8
 8016998:	0801ebac 	.word	0x0801ebac

0801699c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b088      	sub	sp, #32
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80169a4:	2300      	movs	r3, #0
 80169a6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	781b      	ldrb	r3, [r3, #0]
 80169ac:	3b01      	subs	r3, #1
 80169ae:	2b37      	cmp	r3, #55	; 0x37
 80169b0:	f200 8122 	bhi.w	8016bf8 <RegionEU868GetPhyParam+0x25c>
 80169b4:	a201      	add	r2, pc, #4	; (adr r2, 80169bc <RegionEU868GetPhyParam+0x20>)
 80169b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169ba:	bf00      	nop
 80169bc:	08016a9d 	.word	0x08016a9d
 80169c0:	08016aa3 	.word	0x08016aa3
 80169c4:	08016bf9 	.word	0x08016bf9
 80169c8:	08016bf9 	.word	0x08016bf9
 80169cc:	08016bf9 	.word	0x08016bf9
 80169d0:	08016aa9 	.word	0x08016aa9
 80169d4:	08016bf9 	.word	0x08016bf9
 80169d8:	08016ae3 	.word	0x08016ae3
 80169dc:	08016bf9 	.word	0x08016bf9
 80169e0:	08016ae9 	.word	0x08016ae9
 80169e4:	08016aef 	.word	0x08016aef
 80169e8:	08016af5 	.word	0x08016af5
 80169ec:	08016afb 	.word	0x08016afb
 80169f0:	08016b0b 	.word	0x08016b0b
 80169f4:	08016b1b 	.word	0x08016b1b
 80169f8:	08016b21 	.word	0x08016b21
 80169fc:	08016b29 	.word	0x08016b29
 8016a00:	08016b31 	.word	0x08016b31
 8016a04:	08016b39 	.word	0x08016b39
 8016a08:	08016b41 	.word	0x08016b41
 8016a0c:	08016b49 	.word	0x08016b49
 8016a10:	08016b5d 	.word	0x08016b5d
 8016a14:	08016b63 	.word	0x08016b63
 8016a18:	08016b69 	.word	0x08016b69
 8016a1c:	08016b6f 	.word	0x08016b6f
 8016a20:	08016b7b 	.word	0x08016b7b
 8016a24:	08016b87 	.word	0x08016b87
 8016a28:	08016b8d 	.word	0x08016b8d
 8016a2c:	08016b95 	.word	0x08016b95
 8016a30:	08016b9b 	.word	0x08016b9b
 8016a34:	08016ba1 	.word	0x08016ba1
 8016a38:	08016ba9 	.word	0x08016ba9
 8016a3c:	08016aaf 	.word	0x08016aaf
 8016a40:	08016bf9 	.word	0x08016bf9
 8016a44:	08016bf9 	.word	0x08016bf9
 8016a48:	08016bf9 	.word	0x08016bf9
 8016a4c:	08016bf9 	.word	0x08016bf9
 8016a50:	08016bf9 	.word	0x08016bf9
 8016a54:	08016bf9 	.word	0x08016bf9
 8016a58:	08016bf9 	.word	0x08016bf9
 8016a5c:	08016bf9 	.word	0x08016bf9
 8016a60:	08016bf9 	.word	0x08016bf9
 8016a64:	08016bf9 	.word	0x08016bf9
 8016a68:	08016bf9 	.word	0x08016bf9
 8016a6c:	08016bf9 	.word	0x08016bf9
 8016a70:	08016bf9 	.word	0x08016bf9
 8016a74:	08016baf 	.word	0x08016baf
 8016a78:	08016bb5 	.word	0x08016bb5
 8016a7c:	08016bc3 	.word	0x08016bc3
 8016a80:	08016bf9 	.word	0x08016bf9
 8016a84:	08016bf9 	.word	0x08016bf9
 8016a88:	08016bc9 	.word	0x08016bc9
 8016a8c:	08016bcf 	.word	0x08016bcf
 8016a90:	08016bf9 	.word	0x08016bf9
 8016a94:	08016bd5 	.word	0x08016bd5
 8016a98:	08016be5 	.word	0x08016be5
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	61bb      	str	r3, [r7, #24]
            break;
 8016aa0:	e0ab      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	61bb      	str	r3, [r7, #24]
            break;
 8016aa6:	e0a8      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	61bb      	str	r3, [r7, #24]
            break;
 8016aac:	e0a5      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016ab4:	733b      	strb	r3, [r7, #12]
 8016ab6:	2307      	movs	r3, #7
 8016ab8:	737b      	strb	r3, [r7, #13]
 8016aba:	2300      	movs	r3, #0
 8016abc:	73bb      	strb	r3, [r7, #14]
 8016abe:	2310      	movs	r3, #16
 8016ac0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016ac2:	4b51      	ldr	r3, [pc, #324]	; (8016c08 <RegionEU868GetPhyParam+0x26c>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016aca:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016acc:	4b4e      	ldr	r3, [pc, #312]	; (8016c08 <RegionEU868GetPhyParam+0x26c>)
 8016ace:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016ad0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016ad2:	f107 030c 	add.w	r3, r7, #12
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7ff fddf 	bl	801669a <RegionCommonGetNextLowerTxDr>
 8016adc:	4603      	mov	r3, r0
 8016ade:	61bb      	str	r3, [r7, #24]
            break;
 8016ae0:	e08b      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	61bb      	str	r3, [r7, #24]
            break;
 8016ae6:	e088      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	61bb      	str	r3, [r7, #24]
            break;
 8016aec:	e085      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016aee:	2340      	movs	r3, #64	; 0x40
 8016af0:	61bb      	str	r3, [r7, #24]
            break;
 8016af2:	e082      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016af4:	2320      	movs	r3, #32
 8016af6:	61bb      	str	r3, [r7, #24]
            break;
 8016af8:	e07f      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b00:	461a      	mov	r2, r3
 8016b02:	4b42      	ldr	r3, [pc, #264]	; (8016c0c <RegionEU868GetPhyParam+0x270>)
 8016b04:	5c9b      	ldrb	r3, [r3, r2]
 8016b06:	61bb      	str	r3, [r7, #24]
            break;
 8016b08:	e077      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b10:	461a      	mov	r2, r3
 8016b12:	4b3f      	ldr	r3, [pc, #252]	; (8016c10 <RegionEU868GetPhyParam+0x274>)
 8016b14:	5c9b      	ldrb	r3, [r3, r2]
 8016b16:	61bb      	str	r3, [r7, #24]
            break;
 8016b18:	e06f      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	61bb      	str	r3, [r7, #24]
            break;
 8016b1e:	e06c      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016b20:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016b24:	61bb      	str	r3, [r7, #24]
            break;
 8016b26:	e068      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b2c:	61bb      	str	r3, [r7, #24]
            break;
 8016b2e:	e064      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016b30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016b34:	61bb      	str	r3, [r7, #24]
            break;
 8016b36:	e060      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016b38:	f241 3388 	movw	r3, #5000	; 0x1388
 8016b3c:	61bb      	str	r3, [r7, #24]
            break;
 8016b3e:	e05c      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016b40:	f241 7370 	movw	r3, #6000	; 0x1770
 8016b44:	61bb      	str	r3, [r7, #24]
            break;
 8016b46:	e058      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016b4c:	4831      	ldr	r0, [pc, #196]	; (8016c14 <RegionEU868GetPhyParam+0x278>)
 8016b4e:	f002 fa2d 	bl	8018fac <randr>
 8016b52:	4603      	mov	r3, r0
 8016b54:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016b58:	61bb      	str	r3, [r7, #24]
            break;
 8016b5a:	e04e      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	61bb      	str	r3, [r7, #24]
            break;
 8016b60:	e04b      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016b62:	4b2d      	ldr	r3, [pc, #180]	; (8016c18 <RegionEU868GetPhyParam+0x27c>)
 8016b64:	61bb      	str	r3, [r7, #24]
            break;
 8016b66:	e048      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	61bb      	str	r3, [r7, #24]
            break;
 8016b6c:	e045      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016b6e:	4b26      	ldr	r3, [pc, #152]	; (8016c08 <RegionEU868GetPhyParam+0x26c>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016b76:	61bb      	str	r3, [r7, #24]
            break;
 8016b78:	e03f      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016b7a:	4b23      	ldr	r3, [pc, #140]	; (8016c08 <RegionEU868GetPhyParam+0x26c>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016b82:	61bb      	str	r3, [r7, #24]
            break;
 8016b84:	e039      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016b86:	2310      	movs	r3, #16
 8016b88:	61bb      	str	r3, [r7, #24]
            break;
 8016b8a:	e036      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016b8c:	4b1e      	ldr	r3, [pc, #120]	; (8016c08 <RegionEU868GetPhyParam+0x26c>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	61bb      	str	r3, [r7, #24]
            break;
 8016b92:	e032      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016b94:	2300      	movs	r3, #0
 8016b96:	61bb      	str	r3, [r7, #24]
            break;
 8016b98:	e02f      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	61bb      	str	r3, [r7, #24]
            break;
 8016b9e:	e02c      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016ba0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8016ba4:	61bb      	str	r3, [r7, #24]
            break;
 8016ba6:	e028      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016ba8:	4b1c      	ldr	r3, [pc, #112]	; (8016c1c <RegionEU868GetPhyParam+0x280>)
 8016baa:	61bb      	str	r3, [r7, #24]
            break;
 8016bac:	e025      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016bae:	4b1a      	ldr	r3, [pc, #104]	; (8016c18 <RegionEU868GetPhyParam+0x27c>)
 8016bb0:	61bb      	str	r3, [r7, #24]
            break;
 8016bb2:	e022      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016bb4:	2311      	movs	r3, #17
 8016bb6:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016bb8:	2301      	movs	r3, #1
 8016bba:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	76bb      	strb	r3, [r7, #26]
            break;
 8016bc0:	e01b      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8016bc2:	2303      	movs	r3, #3
 8016bc4:	61bb      	str	r3, [r7, #24]
            break;
 8016bc6:	e018      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016bc8:	4b13      	ldr	r3, [pc, #76]	; (8016c18 <RegionEU868GetPhyParam+0x27c>)
 8016bca:	61bb      	str	r3, [r7, #24]
            break;
 8016bcc:	e015      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8016bce:	2303      	movs	r3, #3
 8016bd0:	61bb      	str	r3, [r7, #24]
            break;
 8016bd2:	e012      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bda:	461a      	mov	r2, r3
 8016bdc:	4b10      	ldr	r3, [pc, #64]	; (8016c20 <RegionEU868GetPhyParam+0x284>)
 8016bde:	5c9b      	ldrb	r3, [r3, r2]
 8016be0:	61bb      	str	r3, [r7, #24]
            break;
 8016be2:	e00a      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bea:	490e      	ldr	r1, [pc, #56]	; (8016c24 <RegionEU868GetPhyParam+0x288>)
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7ff fda7 	bl	8016740 <RegionCommonGetBandwidth>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	61bb      	str	r3, [r7, #24]
            break;
 8016bf6:	e000      	b.n	8016bfa <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8016bf8:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016bfa:	69bb      	ldr	r3, [r7, #24]
 8016bfc:	61fb      	str	r3, [r7, #28]
 8016bfe:	69fb      	ldr	r3, [r7, #28]
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3720      	adds	r7, #32
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}
 8016c08:	20001ad0 	.word	0x20001ad0
 8016c0c:	0801eb18 	.word	0x0801eb18
 8016c10:	0801eb20 	.word	0x0801eb20
 8016c14:	fffffc18 	.word	0xfffffc18
 8016c18:	33d3e608 	.word	0x33d3e608
 8016c1c:	4009999a 	.word	0x4009999a
 8016c20:	0801eaf0 	.word	0x0801eaf0
 8016c24:	0801eaf8 	.word	0x0801eaf8

08016c28 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016c28:	b590      	push	{r4, r7, lr}
 8016c2a:	b085      	sub	sp, #20
 8016c2c:	af02      	add	r7, sp, #8
 8016c2e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016c30:	4b11      	ldr	r3, [pc, #68]	; (8016c78 <RegionEU868SetBandTxDone+0x50>)
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	4b11      	ldr	r3, [pc, #68]	; (8016c7c <RegionEU868SetBandTxDone+0x54>)
 8016c36:	6819      	ldr	r1, [r3, #0]
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	781b      	ldrb	r3, [r3, #0]
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	4603      	mov	r3, r0
 8016c40:	005b      	lsls	r3, r3, #1
 8016c42:	4403      	add	r3, r0
 8016c44:	009b      	lsls	r3, r3, #2
 8016c46:	440b      	add	r3, r1
 8016c48:	3309      	adds	r3, #9
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	460b      	mov	r3, r1
 8016c50:	005b      	lsls	r3, r3, #1
 8016c52:	440b      	add	r3, r1
 8016c54:	00db      	lsls	r3, r3, #3
 8016c56:	18d0      	adds	r0, r2, r3
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6899      	ldr	r1, [r3, #8]
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	785c      	ldrb	r4, [r3, #1]
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	691a      	ldr	r2, [r3, #16]
 8016c64:	9200      	str	r2, [sp, #0]
 8016c66:	68db      	ldr	r3, [r3, #12]
 8016c68:	4622      	mov	r2, r4
 8016c6a:	f7ff f8ef 	bl	8015e4c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016c6e:	bf00      	nop
 8016c70:	370c      	adds	r7, #12
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd90      	pop	{r4, r7, pc}
 8016c76:	bf00      	nop
 8016c78:	20001ad4 	.word	0x20001ad4
 8016c7c:	20001ad0 	.word	0x20001ad0

08016c80 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b0b0      	sub	sp, #192	; 0xc0
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016c88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c8c:	2290      	movs	r2, #144	; 0x90
 8016c8e:	2100      	movs	r1, #0
 8016c90:	4618      	mov	r0, r3
 8016c92:	f006 ffbf 	bl	801dc14 <memset>
 8016c96:	2364      	movs	r3, #100	; 0x64
 8016c98:	863b      	strh	r3, [r7, #48]	; 0x30
 8016c9a:	2364      	movs	r3, #100	; 0x64
 8016c9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016ca4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016ca8:	230a      	movs	r3, #10
 8016caa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016cae:	2364      	movs	r3, #100	; 0x64
 8016cb0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8016cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016cb8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	7b1b      	ldrb	r3, [r3, #12]
 8016cc0:	2b02      	cmp	r3, #2
 8016cc2:	d05d      	beq.n	8016d80 <RegionEU868InitDefaults+0x100>
 8016cc4:	2b02      	cmp	r3, #2
 8016cc6:	dc6a      	bgt.n	8016d9e <RegionEU868InitDefaults+0x11e>
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d002      	beq.n	8016cd2 <RegionEU868InitDefaults+0x52>
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	d03e      	beq.n	8016d4e <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016cd0:	e065      	b.n	8016d9e <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d062      	beq.n	8016da0 <RegionEU868InitDefaults+0x120>
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	685b      	ldr	r3, [r3, #4]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d05e      	beq.n	8016da0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	4a30      	ldr	r2, [pc, #192]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016ce8:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	689b      	ldr	r3, [r3, #8]
 8016cee:	4a2f      	ldr	r2, [pc, #188]	; (8016dac <RegionEU868InitDefaults+0x12c>)
 8016cf0:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016cf2:	4b2e      	ldr	r3, [pc, #184]	; (8016dac <RegionEU868InitDefaults+0x12c>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016cfa:	2290      	movs	r2, #144	; 0x90
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f002 f96c 	bl	8018fda <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016d02:	4b29      	ldr	r3, [pc, #164]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4a2a      	ldr	r2, [pc, #168]	; (8016db0 <RegionEU868InitDefaults+0x130>)
 8016d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016d0e:	4b26      	ldr	r3, [pc, #152]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	4a28      	ldr	r2, [pc, #160]	; (8016db4 <RegionEU868InitDefaults+0x134>)
 8016d14:	330c      	adds	r3, #12
 8016d16:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016d1c:	4b22      	ldr	r3, [pc, #136]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4a25      	ldr	r2, [pc, #148]	; (8016db8 <RegionEU868InitDefaults+0x138>)
 8016d22:	3318      	adds	r3, #24
 8016d24:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016d2a:	4b1f      	ldr	r3, [pc, #124]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	2207      	movs	r2, #7
 8016d30:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016d34:	4b1c      	ldr	r3, [pc, #112]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016d3c:	4b1a      	ldr	r3, [pc, #104]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016d44:	2201      	movs	r2, #1
 8016d46:	4619      	mov	r1, r3
 8016d48:	f7ff f85a 	bl	8015e00 <RegionCommonChanMaskCopy>
 8016d4c:	e028      	b.n	8016da0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016d4e:	4b16      	ldr	r3, [pc, #88]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	2200      	movs	r2, #0
 8016d54:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016d56:	4b14      	ldr	r3, [pc, #80]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016d5e:	4b12      	ldr	r3, [pc, #72]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	2200      	movs	r2, #0
 8016d64:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016d66:	4b10      	ldr	r3, [pc, #64]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016d6e:	4b0e      	ldr	r3, [pc, #56]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016d76:	2201      	movs	r2, #1
 8016d78:	4619      	mov	r1, r3
 8016d7a:	f7ff f841 	bl	8015e00 <RegionCommonChanMaskCopy>
            break;
 8016d7e:	e00f      	b.n	8016da0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016d80:	4b09      	ldr	r3, [pc, #36]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016d88:	4b07      	ldr	r3, [pc, #28]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016d90:	4b05      	ldr	r3, [pc, #20]	; (8016da8 <RegionEU868InitDefaults+0x128>)
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	430a      	orrs	r2, r1
 8016d96:	b292      	uxth	r2, r2
 8016d98:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016d9c:	e000      	b.n	8016da0 <RegionEU868InitDefaults+0x120>
            break;
 8016d9e:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016da0:	37c0      	adds	r7, #192	; 0xc0
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bd80      	pop	{r7, pc}
 8016da6:	bf00      	nop
 8016da8:	20001ad0 	.word	0x20001ad0
 8016dac:	20001ad4 	.word	0x20001ad4
 8016db0:	0801e520 	.word	0x0801e520
 8016db4:	0801e52c 	.word	0x0801e52c
 8016db8:	0801e538 	.word	0x0801e538

08016dbc <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b084      	sub	sp, #16
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016dc8:	78fb      	ldrb	r3, [r7, #3]
 8016dca:	2b0f      	cmp	r3, #15
 8016dcc:	d86c      	bhi.n	8016ea8 <RegionEU868Verify+0xec>
 8016dce:	a201      	add	r2, pc, #4	; (adr r2, 8016dd4 <RegionEU868Verify+0x18>)
 8016dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dd4:	08016e15 	.word	0x08016e15
 8016dd8:	08016ea9 	.word	0x08016ea9
 8016ddc:	08016ea9 	.word	0x08016ea9
 8016de0:	08016ea9 	.word	0x08016ea9
 8016de4:	08016ea9 	.word	0x08016ea9
 8016de8:	08016e2d 	.word	0x08016e2d
 8016dec:	08016e4b 	.word	0x08016e4b
 8016df0:	08016e69 	.word	0x08016e69
 8016df4:	08016ea9 	.word	0x08016ea9
 8016df8:	08016e87 	.word	0x08016e87
 8016dfc:	08016e87 	.word	0x08016e87
 8016e00:	08016ea9 	.word	0x08016ea9
 8016e04:	08016ea9 	.word	0x08016ea9
 8016e08:	08016ea9 	.word	0x08016ea9
 8016e0c:	08016ea9 	.word	0x08016ea9
 8016e10:	08016ea5 	.word	0x08016ea5
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016e14:	2300      	movs	r3, #0
 8016e16:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	f107 020f 	add.w	r2, r7, #15
 8016e20:	4611      	mov	r1, r2
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7ff fcf4 	bl	8016810 <VerifyRfFreq>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	e03e      	b.n	8016eaa <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8016e32:	2207      	movs	r2, #7
 8016e34:	2100      	movs	r1, #0
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7fe ff65 	bl	8015d06 <RegionCommonValueInRange>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	bf14      	ite	ne
 8016e42:	2301      	movne	r3, #1
 8016e44:	2300      	moveq	r3, #0
 8016e46:	b2db      	uxtb	r3, r3
 8016e48:	e02f      	b.n	8016eaa <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8016e50:	2205      	movs	r2, #5
 8016e52:	2100      	movs	r1, #0
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7fe ff56 	bl	8015d06 <RegionCommonValueInRange>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	bf14      	ite	ne
 8016e60:	2301      	movne	r3, #1
 8016e62:	2300      	moveq	r3, #0
 8016e64:	b2db      	uxtb	r3, r3
 8016e66:	e020      	b.n	8016eaa <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8016e6e:	2207      	movs	r2, #7
 8016e70:	2100      	movs	r1, #0
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7fe ff47 	bl	8015d06 <RegionCommonValueInRange>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	bf14      	ite	ne
 8016e7e:	2301      	movne	r3, #1
 8016e80:	2300      	moveq	r3, #0
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	e011      	b.n	8016eaa <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f993 3000 	ldrsb.w	r3, [r3]
 8016e8c:	2207      	movs	r2, #7
 8016e8e:	2100      	movs	r1, #0
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7fe ff38 	bl	8015d06 <RegionCommonValueInRange>
 8016e96:	4603      	mov	r3, r0
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	bf14      	ite	ne
 8016e9c:	2301      	movne	r3, #1
 8016e9e:	2300      	moveq	r3, #0
 8016ea0:	b2db      	uxtb	r3, r3
 8016ea2:	e002      	b.n	8016eaa <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	e000      	b.n	8016eaa <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016ea8:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	3710      	adds	r7, #16
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}
 8016eb2:	bf00      	nop

08016eb4 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b08a      	sub	sp, #40	; 0x28
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016ebc:	2350      	movs	r3, #80	; 0x50
 8016ebe:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	7a1b      	ldrb	r3, [r3, #8]
 8016ec6:	2b10      	cmp	r3, #16
 8016ec8:	d162      	bne.n	8016f90 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	330f      	adds	r3, #15
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d15e      	bne.n	8016f94 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016edc:	2303      	movs	r3, #3
 8016ede:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016ee2:	e050      	b.n	8016f86 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ee8:	2b07      	cmp	r3, #7
 8016eea:	d824      	bhi.n	8016f36 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	685a      	ldr	r2, [r3, #4]
 8016ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ef4:	4413      	add	r3, r2
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016efa:	69ba      	ldr	r2, [r7, #24]
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6859      	ldr	r1, [r3, #4]
 8016f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f04:	3301      	adds	r3, #1
 8016f06:	440b      	add	r3, r1
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	021b      	lsls	r3, r3, #8
 8016f0c:	4313      	orrs	r3, r2
 8016f0e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016f10:	69ba      	ldr	r2, [r7, #24]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6859      	ldr	r1, [r3, #4]
 8016f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f1a:	3302      	adds	r3, #2
 8016f1c:	440b      	add	r3, r1
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	041b      	lsls	r3, r3, #16
 8016f22:	4313      	orrs	r3, r2
 8016f24:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016f26:	69bb      	ldr	r3, [r7, #24]
 8016f28:	2264      	movs	r2, #100	; 0x64
 8016f2a:	fb02 f303 	mul.w	r3, r2, r3
 8016f2e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016f30:	2300      	movs	r3, #0
 8016f32:	61fb      	str	r3, [r7, #28]
 8016f34:	e006      	b.n	8016f44 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016f36:	2300      	movs	r3, #0
 8016f38:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016f40:	2300      	movs	r3, #0
 8016f42:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016f44:	69bb      	ldr	r3, [r7, #24]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d00b      	beq.n	8016f62 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016f4a:	f107 0318 	add.w	r3, r7, #24
 8016f4e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016f50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f54:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016f56:	f107 0310 	add.w	r3, r7, #16
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f000 fd14 	bl	8017988 <RegionEU868ChannelAdd>
 8016f60:	e007      	b.n	8016f72 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f66:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016f68:	f107 030c 	add.w	r3, r7, #12
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f000 fdad 	bl	8017acc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f76:	3303      	adds	r3, #3
 8016f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f80:	3301      	adds	r3, #1
 8016f82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016f86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f8a:	2b0f      	cmp	r3, #15
 8016f8c:	d9aa      	bls.n	8016ee4 <RegionEU868ApplyCFList+0x30>
 8016f8e:	e002      	b.n	8016f96 <RegionEU868ApplyCFList+0xe2>
        return;
 8016f90:	bf00      	nop
 8016f92:	e000      	b.n	8016f96 <RegionEU868ApplyCFList+0xe2>
        return;
 8016f94:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016f96:	3728      	adds	r7, #40	; 0x28
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	791b      	ldrb	r3, [r3, #4]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d002      	beq.n	8016fb2 <RegionEU868ChanMaskSet+0x16>
 8016fac:	2b01      	cmp	r3, #1
 8016fae:	d00b      	beq.n	8016fc8 <RegionEU868ChanMaskSet+0x2c>
 8016fb0:	e015      	b.n	8016fde <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016fb2:	4b0e      	ldr	r3, [pc, #56]	; (8016fec <RegionEU868ChanMaskSet+0x50>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	2201      	movs	r2, #1
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	f7fe ff1d 	bl	8015e00 <RegionCommonChanMaskCopy>
            break;
 8016fc6:	e00c      	b.n	8016fe2 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016fc8:	4b08      	ldr	r3, [pc, #32]	; (8016fec <RegionEU868ChanMaskSet+0x50>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	f7fe ff12 	bl	8015e00 <RegionCommonChanMaskCopy>
            break;
 8016fdc:	e001      	b.n	8016fe2 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	e000      	b.n	8016fe4 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016fe2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	3708      	adds	r7, #8
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}
 8016fec:	20001ad0 	.word	0x20001ad0

08016ff0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b088      	sub	sp, #32
 8016ff4:	af02      	add	r7, sp, #8
 8016ff6:	60ba      	str	r2, [r7, #8]
 8016ff8:	607b      	str	r3, [r7, #4]
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	73fb      	strb	r3, [r7, #15]
 8016ffe:	460b      	mov	r3, r1
 8017000:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8017002:	2300      	movs	r3, #0
 8017004:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801700a:	2b07      	cmp	r3, #7
 801700c:	bfa8      	it	ge
 801700e:	2307      	movge	r3, #7
 8017010:	b25a      	sxtb	r2, r3
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801701c:	491e      	ldr	r1, [pc, #120]	; (8017098 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801701e:	4618      	mov	r0, r3
 8017020:	f7ff fb8e 	bl	8016740 <RegionCommonGetBandwidth>
 8017024:	4603      	mov	r3, r0
 8017026:	b2da      	uxtb	r2, r3
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017032:	2b07      	cmp	r3, #7
 8017034:	d10a      	bne.n	801704c <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801703c:	461a      	mov	r2, r3
 801703e:	4b17      	ldr	r3, [pc, #92]	; (801709c <RegionEU868ComputeRxWindowParameters+0xac>)
 8017040:	5c9b      	ldrb	r3, [r3, r2]
 8017042:	4618      	mov	r0, r3
 8017044:	f7ff f910 	bl	8016268 <RegionCommonComputeSymbolTimeFsk>
 8017048:	6178      	str	r0, [r7, #20]
 801704a:	e011      	b.n	8017070 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017052:	461a      	mov	r2, r3
 8017054:	4b11      	ldr	r3, [pc, #68]	; (801709c <RegionEU868ComputeRxWindowParameters+0xac>)
 8017056:	5c9a      	ldrb	r2, [r3, r2]
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801705e:	4619      	mov	r1, r3
 8017060:	4b0d      	ldr	r3, [pc, #52]	; (8017098 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017066:	4619      	mov	r1, r3
 8017068:	4610      	mov	r0, r2
 801706a:	f7ff f8e7 	bl	801623c <RegionCommonComputeSymbolTimeLoRa>
 801706e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017070:	4b0b      	ldr	r3, [pc, #44]	; (80170a0 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8017072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017074:	4798      	blx	r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	3308      	adds	r3, #8
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	320c      	adds	r2, #12
 801707e:	7bb9      	ldrb	r1, [r7, #14]
 8017080:	9201      	str	r2, [sp, #4]
 8017082:	9300      	str	r3, [sp, #0]
 8017084:	4603      	mov	r3, r0
 8017086:	68ba      	ldr	r2, [r7, #8]
 8017088:	6978      	ldr	r0, [r7, #20]
 801708a:	f7ff f8fd 	bl	8016288 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801708e:	bf00      	nop
 8017090:	3718      	adds	r7, #24
 8017092:	46bd      	mov	sp, r7
 8017094:	bd80      	pop	{r7, pc}
 8017096:	bf00      	nop
 8017098:	0801eaf8 	.word	0x0801eaf8
 801709c:	0801eaf0 	.word	0x0801eaf0
 80170a0:	0801ebac 	.word	0x0801ebac

080170a4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80170a4:	b5b0      	push	{r4, r5, r7, lr}
 80170a6:	b090      	sub	sp, #64	; 0x40
 80170a8:	af0a      	add	r7, sp, #40	; 0x28
 80170aa:	6078      	str	r0, [r7, #4]
 80170ac:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	785b      	ldrb	r3, [r3, #1]
 80170b2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80170b4:	2300      	movs	r3, #0
 80170b6:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80170b8:	2300      	movs	r3, #0
 80170ba:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80170c2:	4b5a      	ldr	r3, [pc, #360]	; (801722c <RegionEU868RxConfig+0x188>)
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	4798      	blx	r3
 80170c8:	4603      	mov	r3, r0
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d001      	beq.n	80170d2 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80170ce:	2300      	movs	r3, #0
 80170d0:	e0a8      	b.n	8017224 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	7cdb      	ldrb	r3, [r3, #19]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d126      	bne.n	8017128 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80170da:	4b55      	ldr	r3, [pc, #340]	; (8017230 <RegionEU868RxConfig+0x18c>)
 80170dc:	681a      	ldr	r2, [r3, #0]
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	781b      	ldrb	r3, [r3, #0]
 80170e2:	4619      	mov	r1, r3
 80170e4:	460b      	mov	r3, r1
 80170e6:	005b      	lsls	r3, r3, #1
 80170e8:	440b      	add	r3, r1
 80170ea:	009b      	lsls	r3, r3, #2
 80170ec:	4413      	add	r3, r2
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80170f2:	4b4f      	ldr	r3, [pc, #316]	; (8017230 <RegionEU868RxConfig+0x18c>)
 80170f4:	681a      	ldr	r2, [r3, #0]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	4619      	mov	r1, r3
 80170fc:	460b      	mov	r3, r1
 80170fe:	005b      	lsls	r3, r3, #1
 8017100:	440b      	add	r3, r1
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	4413      	add	r3, r2
 8017106:	3304      	adds	r3, #4
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d00c      	beq.n	8017128 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801710e:	4b48      	ldr	r3, [pc, #288]	; (8017230 <RegionEU868RxConfig+0x18c>)
 8017110:	681a      	ldr	r2, [r3, #0]
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	4619      	mov	r1, r3
 8017118:	460b      	mov	r3, r1
 801711a:	005b      	lsls	r3, r3, #1
 801711c:	440b      	add	r3, r1
 801711e:	009b      	lsls	r3, r3, #2
 8017120:	4413      	add	r3, r2
 8017122:	3304      	adds	r3, #4
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801712c:	4a41      	ldr	r2, [pc, #260]	; (8017234 <RegionEU868RxConfig+0x190>)
 801712e:	5cd3      	ldrb	r3, [r2, r3]
 8017130:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017132:	4b3e      	ldr	r3, [pc, #248]	; (801722c <RegionEU868RxConfig+0x188>)
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	6938      	ldr	r0, [r7, #16]
 8017138:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801713a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801713e:	2b07      	cmp	r3, #7
 8017140:	d128      	bne.n	8017194 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8017142:	2300      	movs	r3, #0
 8017144:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017146:	4b39      	ldr	r3, [pc, #228]	; (801722c <RegionEU868RxConfig+0x188>)
 8017148:	699c      	ldr	r4, [r3, #24]
 801714a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801714e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017152:	fb02 f303 	mul.w	r3, r2, r3
 8017156:	4619      	mov	r1, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	689b      	ldr	r3, [r3, #8]
 801715c:	b29b      	uxth	r3, r3
 801715e:	687a      	ldr	r2, [r7, #4]
 8017160:	7c92      	ldrb	r2, [r2, #18]
 8017162:	7df8      	ldrb	r0, [r7, #23]
 8017164:	9209      	str	r2, [sp, #36]	; 0x24
 8017166:	2200      	movs	r2, #0
 8017168:	9208      	str	r2, [sp, #32]
 801716a:	2200      	movs	r2, #0
 801716c:	9207      	str	r2, [sp, #28]
 801716e:	2200      	movs	r2, #0
 8017170:	9206      	str	r2, [sp, #24]
 8017172:	2201      	movs	r2, #1
 8017174:	9205      	str	r2, [sp, #20]
 8017176:	2200      	movs	r2, #0
 8017178:	9204      	str	r2, [sp, #16]
 801717a:	2200      	movs	r2, #0
 801717c:	9203      	str	r2, [sp, #12]
 801717e:	9302      	str	r3, [sp, #8]
 8017180:	2305      	movs	r3, #5
 8017182:	9301      	str	r3, [sp, #4]
 8017184:	4b2c      	ldr	r3, [pc, #176]	; (8017238 <RegionEU868RxConfig+0x194>)
 8017186:	9300      	str	r3, [sp, #0]
 8017188:	2300      	movs	r3, #0
 801718a:	460a      	mov	r2, r1
 801718c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017190:	47a0      	blx	r4
 8017192:	e024      	b.n	80171de <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017194:	2301      	movs	r3, #1
 8017196:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017198:	4b24      	ldr	r3, [pc, #144]	; (801722c <RegionEU868RxConfig+0x188>)
 801719a:	699c      	ldr	r4, [r3, #24]
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	789b      	ldrb	r3, [r3, #2]
 80171a0:	461d      	mov	r5, r3
 80171a2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	689b      	ldr	r3, [r3, #8]
 80171aa:	b29b      	uxth	r3, r3
 80171ac:	687a      	ldr	r2, [r7, #4]
 80171ae:	7c92      	ldrb	r2, [r2, #18]
 80171b0:	7df8      	ldrb	r0, [r7, #23]
 80171b2:	9209      	str	r2, [sp, #36]	; 0x24
 80171b4:	2201      	movs	r2, #1
 80171b6:	9208      	str	r2, [sp, #32]
 80171b8:	2200      	movs	r2, #0
 80171ba:	9207      	str	r2, [sp, #28]
 80171bc:	2200      	movs	r2, #0
 80171be:	9206      	str	r2, [sp, #24]
 80171c0:	2200      	movs	r2, #0
 80171c2:	9205      	str	r2, [sp, #20]
 80171c4:	2200      	movs	r2, #0
 80171c6:	9204      	str	r2, [sp, #16]
 80171c8:	2200      	movs	r2, #0
 80171ca:	9203      	str	r2, [sp, #12]
 80171cc:	9302      	str	r3, [sp, #8]
 80171ce:	2308      	movs	r3, #8
 80171d0:	9301      	str	r3, [sp, #4]
 80171d2:	2300      	movs	r3, #0
 80171d4:	9300      	str	r3, [sp, #0]
 80171d6:	2301      	movs	r3, #1
 80171d8:	460a      	mov	r2, r1
 80171da:	4629      	mov	r1, r5
 80171dc:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	7c5b      	ldrb	r3, [r3, #17]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d005      	beq.n	80171f2 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80171e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171ea:	4a14      	ldr	r2, [pc, #80]	; (801723c <RegionEU868RxConfig+0x198>)
 80171ec:	5cd3      	ldrb	r3, [r2, r3]
 80171ee:	75bb      	strb	r3, [r7, #22]
 80171f0:	e004      	b.n	80171fc <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80171f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171f6:	4a12      	ldr	r2, [pc, #72]	; (8017240 <RegionEU868RxConfig+0x19c>)
 80171f8:	5cd3      	ldrb	r3, [r2, r3]
 80171fa:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80171fc:	4b0b      	ldr	r3, [pc, #44]	; (801722c <RegionEU868RxConfig+0x188>)
 80171fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017200:	7dba      	ldrb	r2, [r7, #22]
 8017202:	320d      	adds	r2, #13
 8017204:	b2d1      	uxtb	r1, r2
 8017206:	7dfa      	ldrb	r2, [r7, #23]
 8017208:	4610      	mov	r0, r2
 801720a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	7cdb      	ldrb	r3, [r3, #19]
 8017210:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017214:	6939      	ldr	r1, [r7, #16]
 8017216:	4618      	mov	r0, r3
 8017218:	f7ff fab0 	bl	801677c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	7bfa      	ldrb	r2, [r7, #15]
 8017220:	701a      	strb	r2, [r3, #0]
    return true;
 8017222:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017224:	4618      	mov	r0, r3
 8017226:	3718      	adds	r7, #24
 8017228:	46bd      	mov	sp, r7
 801722a:	bdb0      	pop	{r4, r5, r7, pc}
 801722c:	0801ebac 	.word	0x0801ebac
 8017230:	20001ad0 	.word	0x20001ad0
 8017234:	0801eaf0 	.word	0x0801eaf0
 8017238:	00014585 	.word	0x00014585
 801723c:	0801eb20 	.word	0x0801eb20
 8017240:	0801eb18 	.word	0x0801eb18

08017244 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017244:	b590      	push	{r4, r7, lr}
 8017246:	b093      	sub	sp, #76	; 0x4c
 8017248:	af0a      	add	r7, sp, #40	; 0x28
 801724a:	60f8      	str	r0, [r7, #12]
 801724c:	60b9      	str	r1, [r7, #8]
 801724e:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017256:	461a      	mov	r2, r3
 8017258:	4b5d      	ldr	r3, [pc, #372]	; (80173d0 <RegionEU868TxConfig+0x18c>)
 801725a:	5c9b      	ldrb	r3, [r3, r2]
 801725c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017264:	4b5b      	ldr	r3, [pc, #364]	; (80173d4 <RegionEU868TxConfig+0x190>)
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	4b5b      	ldr	r3, [pc, #364]	; (80173d8 <RegionEU868TxConfig+0x194>)
 801726a:	6819      	ldr	r1, [r3, #0]
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	461c      	mov	r4, r3
 8017272:	4623      	mov	r3, r4
 8017274:	005b      	lsls	r3, r3, #1
 8017276:	4423      	add	r3, r4
 8017278:	009b      	lsls	r3, r3, #2
 801727a:	440b      	add	r3, r1
 801727c:	3309      	adds	r3, #9
 801727e:	781b      	ldrb	r3, [r3, #0]
 8017280:	4619      	mov	r1, r3
 8017282:	460b      	mov	r3, r1
 8017284:	005b      	lsls	r3, r3, #1
 8017286:	440b      	add	r3, r1
 8017288:	00db      	lsls	r3, r3, #3
 801728a:	4413      	add	r3, r2
 801728c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017290:	4619      	mov	r1, r3
 8017292:	f7ff fa40 	bl	8016716 <RegionCommonLimitTxPower>
 8017296:	4603      	mov	r3, r0
 8017298:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172a0:	494e      	ldr	r1, [pc, #312]	; (80173dc <RegionEU868TxConfig+0x198>)
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7ff fa4c 	bl	8016740 <RegionCommonGetBandwidth>
 80172a8:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80172aa:	2300      	movs	r3, #0
 80172ac:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	6859      	ldr	r1, [r3, #4]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	689a      	ldr	r2, [r3, #8]
 80172b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7ff f89c 	bl	80163f8 <RegionCommonComputeTxPower>
 80172c0:	4603      	mov	r3, r0
 80172c2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80172c4:	4b46      	ldr	r3, [pc, #280]	; (80173e0 <RegionEU868TxConfig+0x19c>)
 80172c6:	68da      	ldr	r2, [r3, #12]
 80172c8:	4b43      	ldr	r3, [pc, #268]	; (80173d8 <RegionEU868TxConfig+0x194>)
 80172ca:	6819      	ldr	r1, [r3, #0]
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	4618      	mov	r0, r3
 80172d2:	4603      	mov	r3, r0
 80172d4:	005b      	lsls	r3, r3, #1
 80172d6:	4403      	add	r3, r0
 80172d8:	009b      	lsls	r3, r3, #2
 80172da:	440b      	add	r3, r1
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	4618      	mov	r0, r3
 80172e0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172e8:	2b07      	cmp	r3, #7
 80172ea:	d124      	bne.n	8017336 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80172ec:	2300      	movs	r3, #0
 80172ee:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80172f0:	4b3b      	ldr	r3, [pc, #236]	; (80173e0 <RegionEU868TxConfig+0x19c>)
 80172f2:	69dc      	ldr	r4, [r3, #28]
 80172f4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80172f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80172fc:	fb02 f303 	mul.w	r3, r2, r3
 8017300:	461a      	mov	r2, r3
 8017302:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017306:	7ff8      	ldrb	r0, [r7, #31]
 8017308:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801730c:	9308      	str	r3, [sp, #32]
 801730e:	2300      	movs	r3, #0
 8017310:	9307      	str	r3, [sp, #28]
 8017312:	2300      	movs	r3, #0
 8017314:	9306      	str	r3, [sp, #24]
 8017316:	2300      	movs	r3, #0
 8017318:	9305      	str	r3, [sp, #20]
 801731a:	2301      	movs	r3, #1
 801731c:	9304      	str	r3, [sp, #16]
 801731e:	2300      	movs	r3, #0
 8017320:	9303      	str	r3, [sp, #12]
 8017322:	2305      	movs	r3, #5
 8017324:	9302      	str	r3, [sp, #8]
 8017326:	2300      	movs	r3, #0
 8017328:	9301      	str	r3, [sp, #4]
 801732a:	9200      	str	r2, [sp, #0]
 801732c:	69bb      	ldr	r3, [r7, #24]
 801732e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017332:	47a0      	blx	r4
 8017334:	e01d      	b.n	8017372 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8017336:	2301      	movs	r3, #1
 8017338:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801733a:	4b29      	ldr	r3, [pc, #164]	; (80173e0 <RegionEU868TxConfig+0x19c>)
 801733c:	69dc      	ldr	r4, [r3, #28]
 801733e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017342:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017346:	7ff8      	ldrb	r0, [r7, #31]
 8017348:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801734c:	9208      	str	r2, [sp, #32]
 801734e:	2200      	movs	r2, #0
 8017350:	9207      	str	r2, [sp, #28]
 8017352:	2200      	movs	r2, #0
 8017354:	9206      	str	r2, [sp, #24]
 8017356:	2200      	movs	r2, #0
 8017358:	9205      	str	r2, [sp, #20]
 801735a:	2201      	movs	r2, #1
 801735c:	9204      	str	r2, [sp, #16]
 801735e:	2200      	movs	r2, #0
 8017360:	9203      	str	r2, [sp, #12]
 8017362:	2208      	movs	r2, #8
 8017364:	9202      	str	r2, [sp, #8]
 8017366:	2201      	movs	r2, #1
 8017368:	9201      	str	r2, [sp, #4]
 801736a:	9300      	str	r3, [sp, #0]
 801736c:	69bb      	ldr	r3, [r7, #24]
 801736e:	2200      	movs	r2, #0
 8017370:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017372:	4b19      	ldr	r3, [pc, #100]	; (80173d8 <RegionEU868TxConfig+0x194>)
 8017374:	681a      	ldr	r2, [r3, #0]
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	4619      	mov	r1, r3
 801737c:	460b      	mov	r3, r1
 801737e:	005b      	lsls	r3, r3, #1
 8017380:	440b      	add	r3, r1
 8017382:	009b      	lsls	r3, r3, #2
 8017384:	4413      	add	r3, r2
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801738e:	4619      	mov	r1, r3
 8017390:	4610      	mov	r0, r2
 8017392:	f7ff fa25 	bl	80167e0 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	899b      	ldrh	r3, [r3, #12]
 80173a0:	4619      	mov	r1, r3
 80173a2:	4610      	mov	r0, r2
 80173a4:	f7ff faaa 	bl	80168fc <GetTimeOnAir>
 80173a8:	4602      	mov	r2, r0
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80173ae:	4b0c      	ldr	r3, [pc, #48]	; (80173e0 <RegionEU868TxConfig+0x19c>)
 80173b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173b2:	68fa      	ldr	r2, [r7, #12]
 80173b4:	8992      	ldrh	r2, [r2, #12]
 80173b6:	b2d1      	uxtb	r1, r2
 80173b8:	7ffa      	ldrb	r2, [r7, #31]
 80173ba:	4610      	mov	r0, r2
 80173bc:	4798      	blx	r3

    *txPower = txPowerLimited;
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	7f7a      	ldrb	r2, [r7, #29]
 80173c2:	701a      	strb	r2, [r3, #0]
    return true;
 80173c4:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	3724      	adds	r7, #36	; 0x24
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd90      	pop	{r4, r7, pc}
 80173ce:	bf00      	nop
 80173d0:	0801eaf0 	.word	0x0801eaf0
 80173d4:	20001ad4 	.word	0x20001ad4
 80173d8:	20001ad0 	.word	0x20001ad0
 80173dc:	0801eaf8 	.word	0x0801eaf8
 80173e0:	0801ebac 	.word	0x0801ebac

080173e4 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80173e4:	b590      	push	{r4, r7, lr}
 80173e6:	b093      	sub	sp, #76	; 0x4c
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	60f8      	str	r0, [r7, #12]
 80173ec:	60b9      	str	r1, [r7, #8]
 80173ee:	607a      	str	r2, [r7, #4]
 80173f0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80173f2:	2307      	movs	r3, #7
 80173f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80173f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80173fc:	2200      	movs	r2, #0
 80173fe:	601a      	str	r2, [r3, #0]
 8017400:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017402:	2300      	movs	r3, #0
 8017404:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017408:	2300      	movs	r3, #0
 801740a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801740e:	2300      	movs	r3, #0
 8017410:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017412:	e085      	b.n	8017520 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	685a      	ldr	r2, [r3, #4]
 8017418:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801741c:	4413      	add	r3, r2
 801741e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017422:	4611      	mov	r1, r2
 8017424:	4618      	mov	r0, r3
 8017426:	f7fe fe2f 	bl	8016088 <RegionCommonParseLinkAdrReq>
 801742a:	4603      	mov	r3, r0
 801742c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017430:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017434:	2b00      	cmp	r3, #0
 8017436:	d07b      	beq.n	8017530 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017438:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801743c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017440:	4413      	add	r3, r2
 8017442:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017446:	2307      	movs	r3, #7
 8017448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801744c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017450:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017456:	2b00      	cmp	r3, #0
 8017458:	d109      	bne.n	801746e <RegionEU868LinkAdrReq+0x8a>
 801745a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801745c:	2b00      	cmp	r3, #0
 801745e:	d106      	bne.n	801746e <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017464:	f023 0301 	bic.w	r3, r3, #1
 8017468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801746c:	e058      	b.n	8017520 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801746e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017472:	2b00      	cmp	r3, #0
 8017474:	d003      	beq.n	801747e <RegionEU868LinkAdrReq+0x9a>
 8017476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801747a:	2b05      	cmp	r3, #5
 801747c:	d903      	bls.n	8017486 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801747e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017482:	2b06      	cmp	r3, #6
 8017484:	d906      	bls.n	8017494 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017486:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801748a:	f023 0301 	bic.w	r3, r3, #1
 801748e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017492:	e045      	b.n	8017520 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017494:	2300      	movs	r3, #0
 8017496:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801749a:	e03d      	b.n	8017518 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801749c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80174a0:	2b06      	cmp	r3, #6
 80174a2:	d118      	bne.n	80174d6 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80174a4:	4b5f      	ldr	r3, [pc, #380]	; (8017624 <RegionEU868LinkAdrReq+0x240>)
 80174a6:	6819      	ldr	r1, [r3, #0]
 80174a8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80174ac:	4613      	mov	r3, r2
 80174ae:	005b      	lsls	r3, r3, #1
 80174b0:	4413      	add	r3, r2
 80174b2:	009b      	lsls	r3, r3, #2
 80174b4:	440b      	add	r3, r1
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d028      	beq.n	801750e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80174bc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80174c0:	2201      	movs	r2, #1
 80174c2:	fa02 f303 	lsl.w	r3, r2, r3
 80174c6:	b21a      	sxth	r2, r3
 80174c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174ca:	b21b      	sxth	r3, r3
 80174cc:	4313      	orrs	r3, r2
 80174ce:	b21b      	sxth	r3, r3
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80174d4:	e01b      	b.n	801750e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80174d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174d8:	461a      	mov	r2, r3
 80174da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80174de:	fa42 f303 	asr.w	r3, r2, r3
 80174e2:	f003 0301 	and.w	r3, r3, #1
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d011      	beq.n	801750e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80174ea:	4b4e      	ldr	r3, [pc, #312]	; (8017624 <RegionEU868LinkAdrReq+0x240>)
 80174ec:	6819      	ldr	r1, [r3, #0]
 80174ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80174f2:	4613      	mov	r3, r2
 80174f4:	005b      	lsls	r3, r3, #1
 80174f6:	4413      	add	r3, r2
 80174f8:	009b      	lsls	r3, r3, #2
 80174fa:	440b      	add	r3, r1
 80174fc:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d105      	bne.n	801750e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017502:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017506:	f023 0301 	bic.w	r3, r3, #1
 801750a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801750e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017512:	3301      	adds	r3, #1
 8017514:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017518:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801751c:	2b0f      	cmp	r3, #15
 801751e:	d9bd      	bls.n	801749c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	7a1b      	ldrb	r3, [r3, #8]
 8017524:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017528:	429a      	cmp	r2, r3
 801752a:	f4ff af73 	bcc.w	8017414 <RegionEU868LinkAdrReq+0x30>
 801752e:	e000      	b.n	8017532 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017530:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017532:	2302      	movs	r3, #2
 8017534:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	7a5b      	ldrb	r3, [r3, #9]
 801753c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017540:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017544:	4618      	mov	r0, r3
 8017546:	f7ff fa29 	bl	801699c <RegionEU868GetPhyParam>
 801754a:	4603      	mov	r3, r0
 801754c:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801754e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017552:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	7a9b      	ldrb	r3, [r3, #10]
 8017558:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801755a:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801755e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017560:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8017564:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017566:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801756a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017572:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801757a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	7b5b      	ldrb	r3, [r3, #13]
 8017580:	b25b      	sxtb	r3, r3
 8017582:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017584:	2310      	movs	r3, #16
 8017586:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017588:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801758c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017590:	b25b      	sxtb	r3, r3
 8017592:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017596:	2307      	movs	r3, #7
 8017598:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801759c:	4b21      	ldr	r3, [pc, #132]	; (8017624 <RegionEU868LinkAdrReq+0x240>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80175a2:	2307      	movs	r3, #7
 80175a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80175a8:	2300      	movs	r3, #0
 80175aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80175b4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80175b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80175bc:	1c9a      	adds	r2, r3, #2
 80175be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80175c2:	1c59      	adds	r1, r3, #1
 80175c4:	f107 0010 	add.w	r0, r7, #16
 80175c8:	4623      	mov	r3, r4
 80175ca:	f7fe fdae 	bl	801612a <RegionCommonLinkAdrReqVerifyParams>
 80175ce:	4603      	mov	r3, r0
 80175d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80175d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80175d8:	2b07      	cmp	r3, #7
 80175da:	d10d      	bne.n	80175f8 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80175dc:	4b11      	ldr	r3, [pc, #68]	; (8017624 <RegionEU868LinkAdrReq+0x240>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80175e4:	220c      	movs	r2, #12
 80175e6:	2100      	movs	r1, #0
 80175e8:	4618      	mov	r0, r3
 80175ea:	f001 fd31 	bl	8019050 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80175ee:	4b0d      	ldr	r3, [pc, #52]	; (8017624 <RegionEU868LinkAdrReq+0x240>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80175f4:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80175f8:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80175fc:	68bb      	ldr	r3, [r7, #8]
 80175fe:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017600:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017608:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017612:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017616:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017618:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801761c:	4618      	mov	r0, r3
 801761e:	374c      	adds	r7, #76	; 0x4c
 8017620:	46bd      	mov	sp, r7
 8017622:	bd90      	pop	{r4, r7, pc}
 8017624:	20001ad0 	.word	0x20001ad0

08017628 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b084      	sub	sp, #16
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017630:	2307      	movs	r3, #7
 8017632:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017634:	2300      	movs	r3, #0
 8017636:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	685b      	ldr	r3, [r3, #4]
 801763c:	f107 020e 	add.w	r2, r7, #14
 8017640:	4611      	mov	r1, r2
 8017642:	4618      	mov	r0, r3
 8017644:	f7ff f8e4 	bl	8016810 <VerifyRfFreq>
 8017648:	4603      	mov	r3, r0
 801764a:	f083 0301 	eor.w	r3, r3, #1
 801764e:	b2db      	uxtb	r3, r3
 8017650:	2b00      	cmp	r3, #0
 8017652:	d003      	beq.n	801765c <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017654:	7bfb      	ldrb	r3, [r7, #15]
 8017656:	f023 0301 	bic.w	r3, r3, #1
 801765a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f993 3000 	ldrsb.w	r3, [r3]
 8017662:	2207      	movs	r2, #7
 8017664:	2100      	movs	r1, #0
 8017666:	4618      	mov	r0, r3
 8017668:	f7fe fb4d 	bl	8015d06 <RegionCommonValueInRange>
 801766c:	4603      	mov	r3, r0
 801766e:	2b00      	cmp	r3, #0
 8017670:	d103      	bne.n	801767a <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8017672:	7bfb      	ldrb	r3, [r7, #15]
 8017674:	f023 0302 	bic.w	r3, r3, #2
 8017678:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017680:	2205      	movs	r2, #5
 8017682:	2100      	movs	r1, #0
 8017684:	4618      	mov	r0, r3
 8017686:	f7fe fb3e 	bl	8015d06 <RegionCommonValueInRange>
 801768a:	4603      	mov	r3, r0
 801768c:	2b00      	cmp	r3, #0
 801768e:	d103      	bne.n	8017698 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017690:	7bfb      	ldrb	r3, [r7, #15]
 8017692:	f023 0304 	bic.w	r3, r3, #4
 8017696:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017698:	7bfb      	ldrb	r3, [r7, #15]
}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
	...

080176a4 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b086      	sub	sp, #24
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80176ac:	2303      	movs	r3, #3
 80176ae:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d114      	bne.n	80176e4 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80176c0:	b2db      	uxtb	r3, r3
 80176c2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80176c4:	f107 0308 	add.w	r3, r7, #8
 80176c8:	4618      	mov	r0, r3
 80176ca:	f000 f9ff 	bl	8017acc <RegionEU868ChannelsRemove>
 80176ce:	4603      	mov	r3, r0
 80176d0:	f083 0301 	eor.w	r3, r3, #1
 80176d4:	b2db      	uxtb	r3, r3
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d03b      	beq.n	8017752 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80176da:	7dfb      	ldrb	r3, [r7, #23]
 80176dc:	f023 0303 	bic.w	r3, r3, #3
 80176e0:	75fb      	strb	r3, [r7, #23]
 80176e2:	e036      	b.n	8017752 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80176f0:	b2db      	uxtb	r3, r3
 80176f2:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80176f4:	f107 030c 	add.w	r3, r7, #12
 80176f8:	4618      	mov	r0, r3
 80176fa:	f000 f945 	bl	8017988 <RegionEU868ChannelAdd>
 80176fe:	4603      	mov	r3, r0
 8017700:	2b06      	cmp	r3, #6
 8017702:	d820      	bhi.n	8017746 <RegionEU868NewChannelReq+0xa2>
 8017704:	a201      	add	r2, pc, #4	; (adr r2, 801770c <RegionEU868NewChannelReq+0x68>)
 8017706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801770a:	bf00      	nop
 801770c:	08017751 	.word	0x08017751
 8017710:	08017747 	.word	0x08017747
 8017714:	08017747 	.word	0x08017747
 8017718:	08017747 	.word	0x08017747
 801771c:	08017729 	.word	0x08017729
 8017720:	08017733 	.word	0x08017733
 8017724:	0801773d 	.word	0x0801773d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017728:	7dfb      	ldrb	r3, [r7, #23]
 801772a:	f023 0301 	bic.w	r3, r3, #1
 801772e:	75fb      	strb	r3, [r7, #23]
                break;
 8017730:	e00f      	b.n	8017752 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017732:	7dfb      	ldrb	r3, [r7, #23]
 8017734:	f023 0302 	bic.w	r3, r3, #2
 8017738:	75fb      	strb	r3, [r7, #23]
                break;
 801773a:	e00a      	b.n	8017752 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801773c:	7dfb      	ldrb	r3, [r7, #23]
 801773e:	f023 0303 	bic.w	r3, r3, #3
 8017742:	75fb      	strb	r3, [r7, #23]
                break;
 8017744:	e005      	b.n	8017752 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8017746:	7dfb      	ldrb	r3, [r7, #23]
 8017748:	f023 0303 	bic.w	r3, r3, #3
 801774c:	75fb      	strb	r3, [r7, #23]
                break;
 801774e:	e000      	b.n	8017752 <RegionEU868NewChannelReq+0xae>
                break;
 8017750:	bf00      	nop
            }
        }
    }

    return status;
 8017752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3718      	adds	r7, #24
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop

08017760 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017760:	b480      	push	{r7}
 8017762:	b083      	sub	sp, #12
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801776c:	4618      	mov	r0, r3
 801776e:	370c      	adds	r7, #12
 8017770:	46bd      	mov	sp, r7
 8017772:	bc80      	pop	{r7}
 8017774:	4770      	bx	lr
	...

08017778 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b084      	sub	sp, #16
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017780:	2303      	movs	r3, #3
 8017782:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017784:	2300      	movs	r3, #0
 8017786:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	2b0f      	cmp	r3, #15
 801778e:	d901      	bls.n	8017794 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8017790:	2300      	movs	r3, #0
 8017792:	e035      	b.n	8017800 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	685b      	ldr	r3, [r3, #4]
 8017798:	f107 020e 	add.w	r2, r7, #14
 801779c:	4611      	mov	r1, r2
 801779e:	4618      	mov	r0, r3
 80177a0:	f7ff f836 	bl	8016810 <VerifyRfFreq>
 80177a4:	4603      	mov	r3, r0
 80177a6:	f083 0301 	eor.w	r3, r3, #1
 80177aa:	b2db      	uxtb	r3, r3
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d003      	beq.n	80177b8 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80177b0:	7bfb      	ldrb	r3, [r7, #15]
 80177b2:	f023 0301 	bic.w	r3, r3, #1
 80177b6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80177b8:	4b13      	ldr	r3, [pc, #76]	; (8017808 <RegionEU868DlChannelReq+0x90>)
 80177ba:	681a      	ldr	r2, [r3, #0]
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	781b      	ldrb	r3, [r3, #0]
 80177c0:	4619      	mov	r1, r3
 80177c2:	460b      	mov	r3, r1
 80177c4:	005b      	lsls	r3, r3, #1
 80177c6:	440b      	add	r3, r1
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	4413      	add	r3, r2
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d103      	bne.n	80177da <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80177d2:	7bfb      	ldrb	r3, [r7, #15]
 80177d4:	f023 0302 	bic.w	r3, r3, #2
 80177d8:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80177da:	7bfb      	ldrb	r3, [r7, #15]
 80177dc:	2b03      	cmp	r3, #3
 80177de:	d10d      	bne.n	80177fc <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80177e0:	4b09      	ldr	r3, [pc, #36]	; (8017808 <RegionEU868DlChannelReq+0x90>)
 80177e2:	6819      	ldr	r1, [r3, #0]
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	4618      	mov	r0, r3
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	685a      	ldr	r2, [r3, #4]
 80177ee:	4603      	mov	r3, r0
 80177f0:	005b      	lsls	r3, r3, #1
 80177f2:	4403      	add	r3, r0
 80177f4:	009b      	lsls	r3, r3, #2
 80177f6:	440b      	add	r3, r1
 80177f8:	3304      	adds	r3, #4
 80177fa:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80177fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017800:	4618      	mov	r0, r3
 8017802:	3710      	adds	r7, #16
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}
 8017808:	20001ad0 	.word	0x20001ad0

0801780c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801780c:	b480      	push	{r7}
 801780e:	b083      	sub	sp, #12
 8017810:	af00      	add	r7, sp, #0
 8017812:	4603      	mov	r3, r0
 8017814:	460a      	mov	r2, r1
 8017816:	71fb      	strb	r3, [r7, #7]
 8017818:	4613      	mov	r3, r2
 801781a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801781c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8017820:	4618      	mov	r0, r3
 8017822:	370c      	adds	r7, #12
 8017824:	46bd      	mov	sp, r7
 8017826:	bc80      	pop	{r7}
 8017828:	4770      	bx	lr
	...

0801782c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b09a      	sub	sp, #104	; 0x68
 8017830:	af02      	add	r7, sp, #8
 8017832:	60f8      	str	r0, [r7, #12]
 8017834:	60b9      	str	r1, [r7, #8]
 8017836:	607a      	str	r2, [r7, #4]
 8017838:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801783a:	2300      	movs	r3, #0
 801783c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8017840:	2300      	movs	r3, #0
 8017842:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8017846:	2300      	movs	r3, #0
 8017848:	64fb      	str	r3, [r7, #76]	; 0x4c
 801784a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801784e:	2200      	movs	r2, #0
 8017850:	601a      	str	r2, [r3, #0]
 8017852:	605a      	str	r2, [r3, #4]
 8017854:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017856:	230c      	movs	r3, #12
 8017858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801785c:	2307      	movs	r3, #7
 801785e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8017860:	4b47      	ldr	r3, [pc, #284]	; (8017980 <RegionEU868NextChannel+0x154>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017868:	2201      	movs	r2, #1
 801786a:	2100      	movs	r1, #0
 801786c:	4618      	mov	r0, r3
 801786e:	f7fe fa9b 	bl	8015da8 <RegionCommonCountChannels>
 8017872:	4603      	mov	r3, r0
 8017874:	2b00      	cmp	r3, #0
 8017876:	d10a      	bne.n	801788e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017878:	4b41      	ldr	r3, [pc, #260]	; (8017980 <RegionEU868NextChannel+0x154>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017880:	4b3f      	ldr	r3, [pc, #252]	; (8017980 <RegionEU868NextChannel+0x154>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	f042 0207 	orr.w	r2, r2, #7
 8017888:	b292      	uxth	r2, r2
 801788a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	7a5b      	ldrb	r3, [r3, #9]
 8017892:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801789a:	b2db      	uxtb	r3, r3
 801789c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801789e:	4b38      	ldr	r3, [pc, #224]	; (8017980 <RegionEU868NextChannel+0x154>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80178a6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80178a8:	4b35      	ldr	r3, [pc, #212]	; (8017980 <RegionEU868NextChannel+0x154>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80178ae:	4b35      	ldr	r3, [pc, #212]	; (8017984 <RegionEU868NextChannel+0x158>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80178b4:	2310      	movs	r3, #16
 80178b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80178b8:	f107 0312 	add.w	r3, r7, #18
 80178bc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	685b      	ldr	r3, [r3, #4]
 80178c8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	7a9b      	ldrb	r3, [r3, #10]
 80178ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80178d2:	2306      	movs	r3, #6
 80178d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80178d8:	68fa      	ldr	r2, [r7, #12]
 80178da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80178de:	320c      	adds	r2, #12
 80178e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178e4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	7d1b      	ldrb	r3, [r3, #20]
 80178ec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	8adb      	ldrh	r3, [r3, #22]
 80178fa:	4619      	mov	r1, r3
 80178fc:	4610      	mov	r0, r2
 80178fe:	f7fe fffd 	bl	80168fc <GetTimeOnAir>
 8017902:	4603      	mov	r3, r0
 8017904:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017906:	f107 0314 	add.w	r3, r7, #20
 801790a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801790c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8017910:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017914:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	9301      	str	r3, [sp, #4]
 801791c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8017920:	9300      	str	r3, [sp, #0]
 8017922:	460b      	mov	r3, r1
 8017924:	6839      	ldr	r1, [r7, #0]
 8017926:	f7fe fe56 	bl	80165d6 <RegionCommonIdentifyChannels>
 801792a:	4603      	mov	r3, r0
 801792c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017934:	2b00      	cmp	r3, #0
 8017936:	d10e      	bne.n	8017956 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017938:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801793c:	3b01      	subs	r3, #1
 801793e:	4619      	mov	r1, r3
 8017940:	2000      	movs	r0, #0
 8017942:	f001 fb33 	bl	8018fac <randr>
 8017946:	4603      	mov	r3, r0
 8017948:	3360      	adds	r3, #96	; 0x60
 801794a:	443b      	add	r3, r7
 801794c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	701a      	strb	r2, [r3, #0]
 8017954:	e00e      	b.n	8017974 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8017956:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801795a:	2b0c      	cmp	r3, #12
 801795c:	d10a      	bne.n	8017974 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801795e:	4b08      	ldr	r3, [pc, #32]	; (8017980 <RegionEU868NextChannel+0x154>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017966:	4b06      	ldr	r3, [pc, #24]	; (8017980 <RegionEU868NextChannel+0x154>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	f042 0207 	orr.w	r2, r2, #7
 801796e:	b292      	uxth	r2, r2
 8017970:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8017974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017978:	4618      	mov	r0, r3
 801797a:	3760      	adds	r7, #96	; 0x60
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}
 8017980:	20001ad0 	.word	0x20001ad0
 8017984:	20001ad4 	.word	0x20001ad4

08017988 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b084      	sub	sp, #16
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017990:	2300      	movs	r3, #0
 8017992:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017994:	2300      	movs	r3, #0
 8017996:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017998:	2300      	movs	r3, #0
 801799a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	791b      	ldrb	r3, [r3, #4]
 80179a0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80179a2:	7b7b      	ldrb	r3, [r7, #13]
 80179a4:	2b02      	cmp	r3, #2
 80179a6:	d801      	bhi.n	80179ac <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80179a8:	2306      	movs	r3, #6
 80179aa:	e089      	b.n	8017ac0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80179ac:	7b7b      	ldrb	r3, [r7, #13]
 80179ae:	2b0f      	cmp	r3, #15
 80179b0:	d901      	bls.n	80179b6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80179b2:	2303      	movs	r3, #3
 80179b4:	e084      	b.n	8017ac0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	7a1b      	ldrb	r3, [r3, #8]
 80179bc:	f343 0303 	sbfx	r3, r3, #0, #4
 80179c0:	b25b      	sxtb	r3, r3
 80179c2:	2207      	movs	r2, #7
 80179c4:	2100      	movs	r1, #0
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7fe f99d 	bl	8015d06 <RegionCommonValueInRange>
 80179cc:	4603      	mov	r3, r0
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d101      	bne.n	80179d6 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80179d2:	2301      	movs	r3, #1
 80179d4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	7a1b      	ldrb	r3, [r3, #8]
 80179dc:	f343 1303 	sbfx	r3, r3, #4, #4
 80179e0:	b25b      	sxtb	r3, r3
 80179e2:	2207      	movs	r2, #7
 80179e4:	2100      	movs	r1, #0
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7fe f98d 	bl	8015d06 <RegionCommonValueInRange>
 80179ec:	4603      	mov	r3, r0
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d101      	bne.n	80179f6 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80179f2:	2301      	movs	r3, #1
 80179f4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	7a1b      	ldrb	r3, [r3, #8]
 80179fc:	f343 0303 	sbfx	r3, r3, #0, #4
 8017a00:	b25a      	sxtb	r2, r3
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	7a1b      	ldrb	r3, [r3, #8]
 8017a08:	f343 1303 	sbfx	r3, r3, #4, #4
 8017a0c:	b25b      	sxtb	r3, r3
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	dd01      	ble.n	8017a16 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8017a12:	2301      	movs	r3, #1
 8017a14:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017a16:	7bbb      	ldrb	r3, [r7, #14]
 8017a18:	f083 0301 	eor.w	r3, r3, #1
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d010      	beq.n	8017a44 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	f107 020c 	add.w	r2, r7, #12
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7fe feee 	bl	8016810 <VerifyRfFreq>
 8017a34:	4603      	mov	r3, r0
 8017a36:	f083 0301 	eor.w	r3, r3, #1
 8017a3a:	b2db      	uxtb	r3, r3
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d001      	beq.n	8017a44 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8017a40:	2301      	movs	r3, #1
 8017a42:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017a44:	7bfb      	ldrb	r3, [r7, #15]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d004      	beq.n	8017a54 <RegionEU868ChannelAdd+0xcc>
 8017a4a:	7bbb      	ldrb	r3, [r7, #14]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d001      	beq.n	8017a54 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017a50:	2306      	movs	r3, #6
 8017a52:	e035      	b.n	8017ac0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017a54:	7bfb      	ldrb	r3, [r7, #15]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d001      	beq.n	8017a5e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017a5a:	2305      	movs	r3, #5
 8017a5c:	e030      	b.n	8017ac0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8017a5e:	7bbb      	ldrb	r3, [r7, #14]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d001      	beq.n	8017a68 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017a64:	2304      	movs	r3, #4
 8017a66:	e02b      	b.n	8017ac0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017a68:	4b17      	ldr	r3, [pc, #92]	; (8017ac8 <RegionEU868ChannelAdd+0x140>)
 8017a6a:	6819      	ldr	r1, [r3, #0]
 8017a6c:	7b7a      	ldrb	r2, [r7, #13]
 8017a6e:	4613      	mov	r3, r2
 8017a70:	005b      	lsls	r3, r3, #1
 8017a72:	4413      	add	r3, r2
 8017a74:	009b      	lsls	r3, r3, #2
 8017a76:	18c8      	adds	r0, r1, r3
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	220c      	movs	r2, #12
 8017a7e:	4619      	mov	r1, r3
 8017a80:	f001 faab 	bl	8018fda <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017a84:	4b10      	ldr	r3, [pc, #64]	; (8017ac8 <RegionEU868ChannelAdd+0x140>)
 8017a86:	6819      	ldr	r1, [r3, #0]
 8017a88:	7b7a      	ldrb	r2, [r7, #13]
 8017a8a:	7b38      	ldrb	r0, [r7, #12]
 8017a8c:	4613      	mov	r3, r2
 8017a8e:	005b      	lsls	r3, r3, #1
 8017a90:	4413      	add	r3, r2
 8017a92:	009b      	lsls	r3, r3, #2
 8017a94:	440b      	add	r3, r1
 8017a96:	3309      	adds	r3, #9
 8017a98:	4602      	mov	r2, r0
 8017a9a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017a9c:	4b0a      	ldr	r3, [pc, #40]	; (8017ac8 <RegionEU868ChannelAdd+0x140>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017aa4:	b21a      	sxth	r2, r3
 8017aa6:	7b7b      	ldrb	r3, [r7, #13]
 8017aa8:	2101      	movs	r1, #1
 8017aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8017aae:	b21b      	sxth	r3, r3
 8017ab0:	4313      	orrs	r3, r2
 8017ab2:	b21a      	sxth	r2, r3
 8017ab4:	4b04      	ldr	r3, [pc, #16]	; (8017ac8 <RegionEU868ChannelAdd+0x140>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	b292      	uxth	r2, r2
 8017aba:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8017abe:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	3710      	adds	r7, #16
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}
 8017ac8:	20001ad0 	.word	0x20001ad0

08017acc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b086      	sub	sp, #24
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	781b      	ldrb	r3, [r3, #0]
 8017ad8:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017ada:	7dfb      	ldrb	r3, [r7, #23]
 8017adc:	2b02      	cmp	r3, #2
 8017ade:	d801      	bhi.n	8017ae4 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	e016      	b.n	8017b12 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017ae4:	4b0d      	ldr	r3, [pc, #52]	; (8017b1c <RegionEU868ChannelsRemove+0x50>)
 8017ae6:	6819      	ldr	r1, [r3, #0]
 8017ae8:	7dfa      	ldrb	r2, [r7, #23]
 8017aea:	4613      	mov	r3, r2
 8017aec:	005b      	lsls	r3, r3, #1
 8017aee:	4413      	add	r3, r2
 8017af0:	009b      	lsls	r3, r3, #2
 8017af2:	440b      	add	r3, r1
 8017af4:	461a      	mov	r2, r3
 8017af6:	2300      	movs	r3, #0
 8017af8:	6013      	str	r3, [r2, #0]
 8017afa:	6053      	str	r3, [r2, #4]
 8017afc:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8017afe:	4b07      	ldr	r3, [pc, #28]	; (8017b1c <RegionEU868ChannelsRemove+0x50>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017b06:	7df9      	ldrb	r1, [r7, #23]
 8017b08:	2210      	movs	r2, #16
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7fe f918 	bl	8015d40 <RegionCommonChanDisable>
 8017b10:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8017b12:	4618      	mov	r0, r3
 8017b14:	3718      	adds	r7, #24
 8017b16:	46bd      	mov	sp, r7
 8017b18:	bd80      	pop	{r7, pc}
 8017b1a:	bf00      	nop
 8017b1c:	20001ad0 	.word	0x20001ad0

08017b20 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017b20:	b480      	push	{r7}
 8017b22:	b085      	sub	sp, #20
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	4603      	mov	r3, r0
 8017b28:	71fb      	strb	r3, [r7, #7]
 8017b2a:	460b      	mov	r3, r1
 8017b2c:	71bb      	strb	r3, [r7, #6]
 8017b2e:	4613      	mov	r3, r2
 8017b30:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8017b32:	79ba      	ldrb	r2, [r7, #6]
 8017b34:	797b      	ldrb	r3, [r7, #5]
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	b2db      	uxtb	r3, r3
 8017b3a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	da01      	bge.n	8017b48 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017b44:	2300      	movs	r3, #0
 8017b46:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017b48:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3714      	adds	r7, #20
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bc80      	pop	{r7}
 8017b52:	4770      	bx	lr

08017b54 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b084      	sub	sp, #16
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	603b      	str	r3, [r7, #0]
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	71fb      	strb	r3, [r7, #7]
 8017b60:	460b      	mov	r3, r1
 8017b62:	71bb      	strb	r3, [r7, #6]
 8017b64:	4613      	mov	r3, r2
 8017b66:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8017b68:	79fb      	ldrb	r3, [r7, #7]
 8017b6a:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8017b6c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b74:	4611      	mov	r1, r2
 8017b76:	4618      	mov	r0, r3
 8017b78:	f7fe fdcd 	bl	8016716 <RegionCommonLimitTxPower>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017b80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017b84:	2b04      	cmp	r3, #4
 8017b86:	d106      	bne.n	8017b96 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b8c:	2b02      	cmp	r3, #2
 8017b8e:	bfb8      	it	lt
 8017b90:	2302      	movlt	r3, #2
 8017b92:	73fb      	strb	r3, [r7, #15]
 8017b94:	e00d      	b.n	8017bb2 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8017b96:	2204      	movs	r2, #4
 8017b98:	2100      	movs	r1, #0
 8017b9a:	6838      	ldr	r0, [r7, #0]
 8017b9c:	f7fe f904 	bl	8015da8 <RegionCommonCountChannels>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	2b31      	cmp	r3, #49	; 0x31
 8017ba4:	d805      	bhi.n	8017bb2 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8017ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017baa:	2b05      	cmp	r3, #5
 8017bac:	bfb8      	it	lt
 8017bae:	2305      	movlt	r3, #5
 8017bb0:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8017bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	3710      	adds	r7, #16
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
	...

08017bc0 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b082      	sub	sp, #8
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017bc8:	4b18      	ldr	r3, [pc, #96]	; (8017c2c <VerifyRfFreq+0x6c>)
 8017bca:	6a1b      	ldr	r3, [r3, #32]
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	4798      	blx	r3
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	f083 0301 	eor.w	r3, r3, #1
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d001      	beq.n	8017be0 <VerifyRfFreq+0x20>
    {
        return false;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	e021      	b.n	8017c24 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	4a13      	ldr	r2, [pc, #76]	; (8017c30 <VerifyRfFreq+0x70>)
 8017be4:	4293      	cmp	r3, r2
 8017be6:	d910      	bls.n	8017c0a <VerifyRfFreq+0x4a>
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	4a12      	ldr	r2, [pc, #72]	; (8017c34 <VerifyRfFreq+0x74>)
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d80c      	bhi.n	8017c0a <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017bf0:	687a      	ldr	r2, [r7, #4]
 8017bf2:	4b11      	ldr	r3, [pc, #68]	; (8017c38 <VerifyRfFreq+0x78>)
 8017bf4:	4413      	add	r3, r2
 8017bf6:	4a11      	ldr	r2, [pc, #68]	; (8017c3c <VerifyRfFreq+0x7c>)
 8017bf8:	fba2 1203 	umull	r1, r2, r2, r3
 8017bfc:	0c92      	lsrs	r2, r2, #18
 8017bfe:	4910      	ldr	r1, [pc, #64]	; (8017c40 <VerifyRfFreq+0x80>)
 8017c00:	fb01 f202 	mul.w	r2, r1, r2
 8017c04:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8017c06:	2a00      	cmp	r2, #0
 8017c08:	d001      	beq.n	8017c0e <VerifyRfFreq+0x4e>
    {
        return false;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	e00a      	b.n	8017c24 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	4a0c      	ldr	r2, [pc, #48]	; (8017c44 <VerifyRfFreq+0x84>)
 8017c12:	4293      	cmp	r3, r2
 8017c14:	d903      	bls.n	8017c1e <VerifyRfFreq+0x5e>
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	4a06      	ldr	r2, [pc, #24]	; (8017c34 <VerifyRfFreq+0x74>)
 8017c1a:	4293      	cmp	r3, r2
 8017c1c:	d901      	bls.n	8017c22 <VerifyRfFreq+0x62>
    {
        return false;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	e000      	b.n	8017c24 <VerifyRfFreq+0x64>
    }
    return true;
 8017c22:	2301      	movs	r3, #1
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3708      	adds	r7, #8
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	0801ebac 	.word	0x0801ebac
 8017c30:	3708709f 	.word	0x3708709f
 8017c34:	374886e0 	.word	0x374886e0
 8017c38:	c8f78f60 	.word	0xc8f78f60
 8017c3c:	6fd91d85 	.word	0x6fd91d85
 8017c40:	000927c0 	.word	0x000927c0
 8017c44:	35c8015f 	.word	0x35c8015f

08017c48 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017c48:	b590      	push	{r4, r7, lr}
 8017c4a:	b089      	sub	sp, #36	; 0x24
 8017c4c:	af04      	add	r7, sp, #16
 8017c4e:	4603      	mov	r3, r0
 8017c50:	460a      	mov	r2, r1
 8017c52:	71fb      	strb	r3, [r7, #7]
 8017c54:	4613      	mov	r3, r2
 8017c56:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c5c:	4a0f      	ldr	r2, [pc, #60]	; (8017c9c <GetTimeOnAir+0x54>)
 8017c5e:	5cd3      	ldrb	r3, [r2, r3]
 8017c60:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8017c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c66:	490e      	ldr	r1, [pc, #56]	; (8017ca0 <GetTimeOnAir+0x58>)
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7fe fd69 	bl	8016740 <RegionCommonGetBandwidth>
 8017c6e:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017c70:	4b0c      	ldr	r3, [pc, #48]	; (8017ca4 <GetTimeOnAir+0x5c>)
 8017c72:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017c74:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017c78:	88bb      	ldrh	r3, [r7, #4]
 8017c7a:	b2db      	uxtb	r3, r3
 8017c7c:	2101      	movs	r1, #1
 8017c7e:	9103      	str	r1, [sp, #12]
 8017c80:	9302      	str	r3, [sp, #8]
 8017c82:	2300      	movs	r3, #0
 8017c84:	9301      	str	r3, [sp, #4]
 8017c86:	2308      	movs	r3, #8
 8017c88:	9300      	str	r3, [sp, #0]
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	68b9      	ldr	r1, [r7, #8]
 8017c8e:	2001      	movs	r0, #1
 8017c90:	47a0      	blx	r4
 8017c92:	4603      	mov	r3, r0
}
 8017c94:	4618      	mov	r0, r3
 8017c96:	3714      	adds	r7, #20
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd90      	pop	{r4, r7, pc}
 8017c9c:	0801eb28 	.word	0x0801eb28
 8017ca0:	0801eb38 	.word	0x0801eb38
 8017ca4:	0801ebac 	.word	0x0801ebac

08017ca8 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b088      	sub	sp, #32
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	781b      	ldrb	r3, [r3, #0]
 8017cb8:	3b01      	subs	r3, #1
 8017cba:	2b37      	cmp	r3, #55	; 0x37
 8017cbc:	f200 8136 	bhi.w	8017f2c <RegionUS915GetPhyParam+0x284>
 8017cc0:	a201      	add	r2, pc, #4	; (adr r2, 8017cc8 <RegionUS915GetPhyParam+0x20>)
 8017cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cc6:	bf00      	nop
 8017cc8:	08017da9 	.word	0x08017da9
 8017ccc:	08017daf 	.word	0x08017daf
 8017cd0:	08017f2d 	.word	0x08017f2d
 8017cd4:	08017f2d 	.word	0x08017f2d
 8017cd8:	08017f2d 	.word	0x08017f2d
 8017cdc:	08017db5 	.word	0x08017db5
 8017ce0:	08017f2d 	.word	0x08017f2d
 8017ce4:	08017def 	.word	0x08017def
 8017ce8:	08017f2d 	.word	0x08017f2d
 8017cec:	08017df5 	.word	0x08017df5
 8017cf0:	08017dfb 	.word	0x08017dfb
 8017cf4:	08017e01 	.word	0x08017e01
 8017cf8:	08017e07 	.word	0x08017e07
 8017cfc:	08017e17 	.word	0x08017e17
 8017d00:	08017e27 	.word	0x08017e27
 8017d04:	08017e2d 	.word	0x08017e2d
 8017d08:	08017e35 	.word	0x08017e35
 8017d0c:	08017e3d 	.word	0x08017e3d
 8017d10:	08017e45 	.word	0x08017e45
 8017d14:	08017e4d 	.word	0x08017e4d
 8017d18:	08017e55 	.word	0x08017e55
 8017d1c:	08017e69 	.word	0x08017e69
 8017d20:	08017e6f 	.word	0x08017e6f
 8017d24:	08017e75 	.word	0x08017e75
 8017d28:	08017e7b 	.word	0x08017e7b
 8017d2c:	08017e87 	.word	0x08017e87
 8017d30:	08017e93 	.word	0x08017e93
 8017d34:	08017e99 	.word	0x08017e99
 8017d38:	08017ea1 	.word	0x08017ea1
 8017d3c:	08017ea7 	.word	0x08017ea7
 8017d40:	08017ead 	.word	0x08017ead
 8017d44:	08017eb3 	.word	0x08017eb3
 8017d48:	08017dbb 	.word	0x08017dbb
 8017d4c:	08017f2d 	.word	0x08017f2d
 8017d50:	08017f2d 	.word	0x08017f2d
 8017d54:	08017f2d 	.word	0x08017f2d
 8017d58:	08017f2d 	.word	0x08017f2d
 8017d5c:	08017f2d 	.word	0x08017f2d
 8017d60:	08017f2d 	.word	0x08017f2d
 8017d64:	08017f2d 	.word	0x08017f2d
 8017d68:	08017f2d 	.word	0x08017f2d
 8017d6c:	08017f2d 	.word	0x08017f2d
 8017d70:	08017f2d 	.word	0x08017f2d
 8017d74:	08017f2d 	.word	0x08017f2d
 8017d78:	08017f2d 	.word	0x08017f2d
 8017d7c:	08017f2d 	.word	0x08017f2d
 8017d80:	08017ebb 	.word	0x08017ebb
 8017d84:	08017ecf 	.word	0x08017ecf
 8017d88:	08017edd 	.word	0x08017edd
 8017d8c:	08017ee3 	.word	0x08017ee3
 8017d90:	08017f2d 	.word	0x08017f2d
 8017d94:	08017ee9 	.word	0x08017ee9
 8017d98:	08017efd 	.word	0x08017efd
 8017d9c:	08017f03 	.word	0x08017f03
 8017da0:	08017f09 	.word	0x08017f09
 8017da4:	08017f19 	.word	0x08017f19
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017da8:	2308      	movs	r3, #8
 8017daa:	61bb      	str	r3, [r7, #24]
            break;
 8017dac:	e0bf      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017dae:	2300      	movs	r3, #0
 8017db0:	61bb      	str	r3, [r7, #24]
            break;
 8017db2:	e0bc      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017db4:	2300      	movs	r3, #0
 8017db6:	61bb      	str	r3, [r7, #24]
            break;
 8017db8:	e0b9      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017dc0:	733b      	strb	r3, [r7, #12]
 8017dc2:	2304      	movs	r3, #4
 8017dc4:	737b      	strb	r3, [r7, #13]
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	73bb      	strb	r3, [r7, #14]
 8017dca:	2348      	movs	r3, #72	; 0x48
 8017dcc:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017dce:	4b5b      	ldr	r3, [pc, #364]	; (8017f3c <RegionUS915GetPhyParam+0x294>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017dd6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017dd8:	4b58      	ldr	r3, [pc, #352]	; (8017f3c <RegionUS915GetPhyParam+0x294>)
 8017dda:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017ddc:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017dde:	f107 030c 	add.w	r3, r7, #12
 8017de2:	4618      	mov	r0, r3
 8017de4:	f7fe fc59 	bl	801669a <RegionCommonGetNextLowerTxDr>
 8017de8:	4603      	mov	r3, r0
 8017dea:	61bb      	str	r3, [r7, #24]
            break;
 8017dec:	e09f      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017dee:	2300      	movs	r3, #0
 8017df0:	61bb      	str	r3, [r7, #24]
            break;
 8017df2:	e09c      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017df4:	2300      	movs	r3, #0
 8017df6:	61bb      	str	r3, [r7, #24]
            break;
 8017df8:	e099      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017dfa:	2340      	movs	r3, #64	; 0x40
 8017dfc:	61bb      	str	r3, [r7, #24]
            break;
 8017dfe:	e096      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017e00:	2320      	movs	r3, #32
 8017e02:	61bb      	str	r3, [r7, #24]
            break;
 8017e04:	e093      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e0c:	461a      	mov	r2, r3
 8017e0e:	4b4c      	ldr	r3, [pc, #304]	; (8017f40 <RegionUS915GetPhyParam+0x298>)
 8017e10:	5c9b      	ldrb	r3, [r3, r2]
 8017e12:	61bb      	str	r3, [r7, #24]
            break;
 8017e14:	e08b      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e1c:	461a      	mov	r2, r3
 8017e1e:	4b49      	ldr	r3, [pc, #292]	; (8017f44 <RegionUS915GetPhyParam+0x29c>)
 8017e20:	5c9b      	ldrb	r3, [r3, r2]
 8017e22:	61bb      	str	r3, [r7, #24]
            break;
 8017e24:	e083      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017e26:	2300      	movs	r3, #0
 8017e28:	61bb      	str	r3, [r7, #24]
            break;
 8017e2a:	e080      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017e2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017e30:	61bb      	str	r3, [r7, #24]
            break;
 8017e32:	e07c      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e38:	61bb      	str	r3, [r7, #24]
            break;
 8017e3a:	e078      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017e3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017e40:	61bb      	str	r3, [r7, #24]
            break;
 8017e42:	e074      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017e44:	f241 3388 	movw	r3, #5000	; 0x1388
 8017e48:	61bb      	str	r3, [r7, #24]
            break;
 8017e4a:	e070      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017e4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8017e50:	61bb      	str	r3, [r7, #24]
            break;
 8017e52:	e06c      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017e54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017e58:	483b      	ldr	r0, [pc, #236]	; (8017f48 <RegionUS915GetPhyParam+0x2a0>)
 8017e5a:	f001 f8a7 	bl	8018fac <randr>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017e64:	61bb      	str	r3, [r7, #24]
            break;
 8017e66:	e062      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	61bb      	str	r3, [r7, #24]
            break;
 8017e6c:	e05f      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017e6e:	4b37      	ldr	r3, [pc, #220]	; (8017f4c <RegionUS915GetPhyParam+0x2a4>)
 8017e70:	61bb      	str	r3, [r7, #24]
            break;
 8017e72:	e05c      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017e74:	2308      	movs	r3, #8
 8017e76:	61bb      	str	r3, [r7, #24]
            break;
 8017e78:	e059      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017e7a:	4b30      	ldr	r3, [pc, #192]	; (8017f3c <RegionUS915GetPhyParam+0x294>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017e82:	61bb      	str	r3, [r7, #24]
            break;
 8017e84:	e053      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017e86:	4b2d      	ldr	r3, [pc, #180]	; (8017f3c <RegionUS915GetPhyParam+0x294>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017e8e:	61bb      	str	r3, [r7, #24]
            break;
 8017e90:	e04d      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017e92:	2348      	movs	r3, #72	; 0x48
 8017e94:	61bb      	str	r3, [r7, #24]
            break;
 8017e96:	e04a      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017e98:	4b28      	ldr	r3, [pc, #160]	; (8017f3c <RegionUS915GetPhyParam+0x294>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	61bb      	str	r3, [r7, #24]
            break;
 8017e9e:	e046      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	61bb      	str	r3, [r7, #24]
            break;
 8017ea4:	e043      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	61bb      	str	r3, [r7, #24]
            break;
 8017eaa:	e040      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017eac:	4b28      	ldr	r3, [pc, #160]	; (8017f50 <RegionUS915GetPhyParam+0x2a8>)
 8017eae:	61bb      	str	r3, [r7, #24]
            break;
 8017eb0:	e03d      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017eb2:	f04f 0300 	mov.w	r3, #0
 8017eb6:	61bb      	str	r3, [r7, #24]
            break;
 8017eb8:	e039      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	791b      	ldrb	r3, [r3, #4]
 8017ebe:	4a25      	ldr	r2, [pc, #148]	; (8017f54 <RegionUS915GetPhyParam+0x2ac>)
 8017ec0:	4922      	ldr	r1, [pc, #136]	; (8017f4c <RegionUS915GetPhyParam+0x2a4>)
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f7fd fd4b 	bl	801595e <RegionBaseUSCalcDownlinkFrequency>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017ecc:	e02f      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017ece:	2317      	movs	r3, #23
 8017ed0:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017ed2:	2304      	movs	r3, #4
 8017ed4:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017ed6:	2303      	movs	r3, #3
 8017ed8:	76bb      	strb	r3, [r7, #26]
            break;
 8017eda:	e028      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017edc:	2308      	movs	r3, #8
 8017ede:	61bb      	str	r3, [r7, #24]
            break;
 8017ee0:	e025      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017ee2:	2308      	movs	r3, #8
 8017ee4:	61bb      	str	r3, [r7, #24]
            break;
 8017ee6:	e022      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	791b      	ldrb	r3, [r3, #4]
 8017eec:	4a19      	ldr	r2, [pc, #100]	; (8017f54 <RegionUS915GetPhyParam+0x2ac>)
 8017eee:	4917      	ldr	r1, [pc, #92]	; (8017f4c <RegionUS915GetPhyParam+0x2a4>)
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7fd fd34 	bl	801595e <RegionBaseUSCalcDownlinkFrequency>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017efa:	e018      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017efc:	2308      	movs	r3, #8
 8017efe:	61bb      	str	r3, [r7, #24]
            break;
 8017f00:	e015      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017f02:	2308      	movs	r3, #8
 8017f04:	61bb      	str	r3, [r7, #24]
            break;
 8017f06:	e012      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f0e:	461a      	mov	r2, r3
 8017f10:	4b11      	ldr	r3, [pc, #68]	; (8017f58 <RegionUS915GetPhyParam+0x2b0>)
 8017f12:	5c9b      	ldrb	r3, [r3, r2]
 8017f14:	61bb      	str	r3, [r7, #24]
            break;
 8017f16:	e00a      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f1e:	490f      	ldr	r1, [pc, #60]	; (8017f5c <RegionUS915GetPhyParam+0x2b4>)
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7fe fc0d 	bl	8016740 <RegionCommonGetBandwidth>
 8017f26:	4603      	mov	r3, r0
 8017f28:	61bb      	str	r3, [r7, #24]
            break;
 8017f2a:	e000      	b.n	8017f2e <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8017f2c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017f2e:	69bb      	ldr	r3, [r7, #24]
 8017f30:	61fb      	str	r3, [r7, #28]
 8017f32:	69fb      	ldr	r3, [r7, #28]
}
 8017f34:	4618      	mov	r0, r3
 8017f36:	3720      	adds	r7, #32
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	bd80      	pop	{r7, pc}
 8017f3c:	20001adc 	.word	0x20001adc
 8017f40:	0801eb8c 	.word	0x0801eb8c
 8017f44:	0801eb9c 	.word	0x0801eb9c
 8017f48:	fffffc18 	.word	0xfffffc18
 8017f4c:	370870a0 	.word	0x370870a0
 8017f50:	4200999a 	.word	0x4200999a
 8017f54:	000927c0 	.word	0x000927c0
 8017f58:	0801eb28 	.word	0x0801eb28
 8017f5c:	0801eb38 	.word	0x0801eb38

08017f60 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017f60:	b590      	push	{r4, r7, lr}
 8017f62:	b085      	sub	sp, #20
 8017f64:	af02      	add	r7, sp, #8
 8017f66:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017f68:	4b11      	ldr	r3, [pc, #68]	; (8017fb0 <RegionUS915SetBandTxDone+0x50>)
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	4b11      	ldr	r3, [pc, #68]	; (8017fb4 <RegionUS915SetBandTxDone+0x54>)
 8017f6e:	6819      	ldr	r1, [r3, #0]
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	781b      	ldrb	r3, [r3, #0]
 8017f74:	4618      	mov	r0, r3
 8017f76:	4603      	mov	r3, r0
 8017f78:	005b      	lsls	r3, r3, #1
 8017f7a:	4403      	add	r3, r0
 8017f7c:	009b      	lsls	r3, r3, #2
 8017f7e:	440b      	add	r3, r1
 8017f80:	3309      	adds	r3, #9
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	4619      	mov	r1, r3
 8017f86:	460b      	mov	r3, r1
 8017f88:	005b      	lsls	r3, r3, #1
 8017f8a:	440b      	add	r3, r1
 8017f8c:	00db      	lsls	r3, r3, #3
 8017f8e:	18d0      	adds	r0, r2, r3
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	6899      	ldr	r1, [r3, #8]
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	785c      	ldrb	r4, [r3, #1]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	691a      	ldr	r2, [r3, #16]
 8017f9c:	9200      	str	r2, [sp, #0]
 8017f9e:	68db      	ldr	r3, [r3, #12]
 8017fa0:	4622      	mov	r2, r4
 8017fa2:	f7fd ff53 	bl	8015e4c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8017fa6:	bf00      	nop
 8017fa8:	370c      	adds	r7, #12
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd90      	pop	{r4, r7, pc}
 8017fae:	bf00      	nop
 8017fb0:	20001ae0 	.word	0x20001ae0
 8017fb4:	20001adc 	.word	0x20001adc

08017fb8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b08a      	sub	sp, #40	; 0x28
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	81bb      	strh	r3, [r7, #12]
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	73bb      	strb	r3, [r7, #14]
 8017fc8:	2300      	movs	r3, #0
 8017fca:	613b      	str	r3, [r7, #16]
 8017fcc:	2300      	movs	r3, #0
 8017fce:	617b      	str	r3, [r7, #20]
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	61bb      	str	r3, [r7, #24]
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	61fb      	str	r3, [r7, #28]
 8017fd8:	2300      	movs	r3, #0
 8017fda:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	7b1b      	ldrb	r3, [r3, #12]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d007      	beq.n	8017ff6 <RegionUS915InitDefaults+0x3e>
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	f2c0 8104 	blt.w	80181f4 <RegionUS915InitDefaults+0x23c>
 8017fec:	3b01      	subs	r3, #1
 8017fee:	2b01      	cmp	r3, #1
 8017ff0:	f200 8100 	bhi.w	80181f4 <RegionUS915InitDefaults+0x23c>
 8017ff4:	e0ce      	b.n	8018194 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	f000 80fc 	beq.w	80181f8 <RegionUS915InitDefaults+0x240>
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	685b      	ldr	r3, [r3, #4]
 8018004:	2b00      	cmp	r3, #0
 8018006:	f000 80f7 	beq.w	80181f8 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	4a7c      	ldr	r2, [pc, #496]	; (8018200 <RegionUS915InitDefaults+0x248>)
 8018010:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	685b      	ldr	r3, [r3, #4]
 8018016:	4a7b      	ldr	r2, [pc, #492]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018018:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	689b      	ldr	r3, [r3, #8]
 801801e:	4a7a      	ldr	r2, [pc, #488]	; (8018208 <RegionUS915InitDefaults+0x250>)
 8018020:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018022:	4b77      	ldr	r3, [pc, #476]	; (8018200 <RegionUS915InitDefaults+0x248>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	2200      	movs	r2, #0
 8018028:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801802a:	4b75      	ldr	r3, [pc, #468]	; (8018200 <RegionUS915InitDefaults+0x248>)
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	2200      	movs	r2, #0
 8018030:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8018032:	4b75      	ldr	r3, [pc, #468]	; (8018208 <RegionUS915InitDefaults+0x250>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	f107 010c 	add.w	r1, r7, #12
 801803a:	2218      	movs	r2, #24
 801803c:	4618      	mov	r0, r3
 801803e:	f000 ffcc 	bl	8018fda <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8018042:	2300      	movs	r3, #0
 8018044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018048:	e02e      	b.n	80180a8 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801804a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801804e:	4a6f      	ldr	r2, [pc, #444]	; (801820c <RegionUS915InitDefaults+0x254>)
 8018050:	fb03 f202 	mul.w	r2, r3, r2
 8018054:	4b6e      	ldr	r3, [pc, #440]	; (8018210 <RegionUS915InitDefaults+0x258>)
 8018056:	4413      	add	r3, r2
 8018058:	4a6a      	ldr	r2, [pc, #424]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 801805a:	6811      	ldr	r1, [r2, #0]
 801805c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018060:	4618      	mov	r0, r3
 8018062:	4613      	mov	r3, r2
 8018064:	005b      	lsls	r3, r3, #1
 8018066:	4413      	add	r3, r2
 8018068:	009b      	lsls	r3, r3, #2
 801806a:	440b      	add	r3, r1
 801806c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801806e:	4b65      	ldr	r3, [pc, #404]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018070:	6819      	ldr	r1, [r3, #0]
 8018072:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018076:	4613      	mov	r3, r2
 8018078:	005b      	lsls	r3, r3, #1
 801807a:	4413      	add	r3, r2
 801807c:	009b      	lsls	r3, r3, #2
 801807e:	440b      	add	r3, r1
 8018080:	3308      	adds	r3, #8
 8018082:	2230      	movs	r2, #48	; 0x30
 8018084:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8018086:	4b5f      	ldr	r3, [pc, #380]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018088:	6819      	ldr	r1, [r3, #0]
 801808a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801808e:	4613      	mov	r3, r2
 8018090:	005b      	lsls	r3, r3, #1
 8018092:	4413      	add	r3, r2
 8018094:	009b      	lsls	r3, r3, #2
 8018096:	440b      	add	r3, r1
 8018098:	3309      	adds	r3, #9
 801809a:	2200      	movs	r2, #0
 801809c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801809e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180a2:	3301      	adds	r3, #1
 80180a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80180a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180ac:	2b3f      	cmp	r3, #63	; 0x3f
 80180ae:	d9cc      	bls.n	801804a <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80180b0:	2340      	movs	r3, #64	; 0x40
 80180b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80180b6:	e02f      	b.n	8018118 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80180b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80180bc:	3b40      	subs	r3, #64	; 0x40
 80180be:	4a55      	ldr	r2, [pc, #340]	; (8018214 <RegionUS915InitDefaults+0x25c>)
 80180c0:	fb03 f202 	mul.w	r2, r3, r2
 80180c4:	4b54      	ldr	r3, [pc, #336]	; (8018218 <RegionUS915InitDefaults+0x260>)
 80180c6:	4413      	add	r3, r2
 80180c8:	4a4e      	ldr	r2, [pc, #312]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 80180ca:	6811      	ldr	r1, [r2, #0]
 80180cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80180d0:	4618      	mov	r0, r3
 80180d2:	4613      	mov	r3, r2
 80180d4:	005b      	lsls	r3, r3, #1
 80180d6:	4413      	add	r3, r2
 80180d8:	009b      	lsls	r3, r3, #2
 80180da:	440b      	add	r3, r1
 80180dc:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80180de:	4b49      	ldr	r3, [pc, #292]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 80180e0:	6819      	ldr	r1, [r3, #0]
 80180e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80180e6:	4613      	mov	r3, r2
 80180e8:	005b      	lsls	r3, r3, #1
 80180ea:	4413      	add	r3, r2
 80180ec:	009b      	lsls	r3, r3, #2
 80180ee:	440b      	add	r3, r1
 80180f0:	3308      	adds	r3, #8
 80180f2:	2244      	movs	r2, #68	; 0x44
 80180f4:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80180f6:	4b43      	ldr	r3, [pc, #268]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 80180f8:	6819      	ldr	r1, [r3, #0]
 80180fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80180fe:	4613      	mov	r3, r2
 8018100:	005b      	lsls	r3, r3, #1
 8018102:	4413      	add	r3, r2
 8018104:	009b      	lsls	r3, r3, #2
 8018106:	440b      	add	r3, r1
 8018108:	3309      	adds	r3, #9
 801810a:	2200      	movs	r2, #0
 801810c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801810e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018112:	3301      	adds	r3, #1
 8018114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018118:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801811c:	2b47      	cmp	r3, #71	; 0x47
 801811e:	d9cb      	bls.n	80180b8 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8018120:	4b38      	ldr	r3, [pc, #224]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018128:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801812c:	4b35      	ldr	r3, [pc, #212]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018134:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8018138:	4b32      	ldr	r3, [pc, #200]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018140:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8018144:	4b2f      	ldr	r3, [pc, #188]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801814c:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8018150:	4b2c      	ldr	r3, [pc, #176]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	22ff      	movs	r2, #255	; 0xff
 8018156:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801815a:	4b2a      	ldr	r3, [pc, #168]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	2200      	movs	r2, #0
 8018160:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018164:	4b27      	ldr	r3, [pc, #156]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801816c:	4b25      	ldr	r3, [pc, #148]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018174:	2206      	movs	r2, #6
 8018176:	4619      	mov	r1, r3
 8018178:	f7fd fe42 	bl	8015e00 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801817c:	4b20      	ldr	r3, [pc, #128]	; (8018200 <RegionUS915InitDefaults+0x248>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	4618      	mov	r0, r3
 8018182:	4b20      	ldr	r3, [pc, #128]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801818a:	2206      	movs	r2, #6
 801818c:	4619      	mov	r1, r3
 801818e:	f7fd fe37 	bl	8015e00 <RegionCommonChanMaskCopy>
            break;
 8018192:	e032      	b.n	80181fa <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018194:	4b1b      	ldr	r3, [pc, #108]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801819c:	4b19      	ldr	r3, [pc, #100]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80181a4:	2206      	movs	r2, #6
 80181a6:	4619      	mov	r1, r3
 80181a8:	f7fd fe2a 	bl	8015e00 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80181ac:	2300      	movs	r3, #0
 80181ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80181b2:	e01a      	b.n	80181ea <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80181b4:	4b12      	ldr	r3, [pc, #72]	; (8018200 <RegionUS915InitDefaults+0x248>)
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80181bc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80181c0:	4b10      	ldr	r3, [pc, #64]	; (8018204 <RegionUS915InitDefaults+0x24c>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80181c8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80181cc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80181d0:	4b0b      	ldr	r3, [pc, #44]	; (8018200 <RegionUS915InitDefaults+0x248>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80181d8:	4001      	ands	r1, r0
 80181da:	b289      	uxth	r1, r1
 80181dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80181e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80181e4:	3301      	adds	r3, #1
 80181e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80181ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80181ee:	2b05      	cmp	r3, #5
 80181f0:	d9e0      	bls.n	80181b4 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80181f2:	e002      	b.n	80181fa <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80181f4:	bf00      	nop
 80181f6:	e000      	b.n	80181fa <RegionUS915InitDefaults+0x242>
                return;
 80181f8:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80181fa:	3728      	adds	r7, #40	; 0x28
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	20001ad8 	.word	0x20001ad8
 8018204:	20001adc 	.word	0x20001adc
 8018208:	20001ae0 	.word	0x20001ae0
 801820c:	00030d40 	.word	0x00030d40
 8018210:	35c80160 	.word	0x35c80160
 8018214:	00186a00 	.word	0x00186a00
 8018218:	35d2afc0 	.word	0x35d2afc0

0801821c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b082      	sub	sp, #8
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
 8018224:	460b      	mov	r3, r1
 8018226:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8018228:	78fb      	ldrb	r3, [r7, #3]
 801822a:	2b0f      	cmp	r3, #15
 801822c:	d867      	bhi.n	80182fe <RegionUS915Verify+0xe2>
 801822e:	a201      	add	r2, pc, #4	; (adr r2, 8018234 <RegionUS915Verify+0x18>)
 8018230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018234:	08018275 	.word	0x08018275
 8018238:	080182ff 	.word	0x080182ff
 801823c:	080182ff 	.word	0x080182ff
 8018240:	080182ff 	.word	0x080182ff
 8018244:	080182ff 	.word	0x080182ff
 8018248:	08018283 	.word	0x08018283
 801824c:	080182a1 	.word	0x080182a1
 8018250:	080182bf 	.word	0x080182bf
 8018254:	080182ff 	.word	0x080182ff
 8018258:	080182dd 	.word	0x080182dd
 801825c:	080182dd 	.word	0x080182dd
 8018260:	080182ff 	.word	0x080182ff
 8018264:	080182ff 	.word	0x080182ff
 8018268:	080182ff 	.word	0x080182ff
 801826c:	080182ff 	.word	0x080182ff
 8018270:	080182fb 	.word	0x080182fb
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	4618      	mov	r0, r3
 801827a:	f7ff fca1 	bl	8017bc0 <VerifyRfFreq>
 801827e:	4603      	mov	r3, r0
 8018280:	e03e      	b.n	8018300 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f993 3000 	ldrsb.w	r3, [r3]
 8018288:	2204      	movs	r2, #4
 801828a:	2100      	movs	r1, #0
 801828c:	4618      	mov	r0, r3
 801828e:	f7fd fd3a 	bl	8015d06 <RegionCommonValueInRange>
 8018292:	4603      	mov	r3, r0
 8018294:	2b00      	cmp	r3, #0
 8018296:	bf14      	ite	ne
 8018298:	2301      	movne	r3, #1
 801829a:	2300      	moveq	r3, #0
 801829c:	b2db      	uxtb	r3, r3
 801829e:	e02f      	b.n	8018300 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f993 3000 	ldrsb.w	r3, [r3]
 80182a6:	2205      	movs	r2, #5
 80182a8:	2100      	movs	r1, #0
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7fd fd2b 	bl	8015d06 <RegionCommonValueInRange>
 80182b0:	4603      	mov	r3, r0
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	bf14      	ite	ne
 80182b6:	2301      	movne	r3, #1
 80182b8:	2300      	moveq	r3, #0
 80182ba:	b2db      	uxtb	r3, r3
 80182bc:	e020      	b.n	8018300 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	f993 3000 	ldrsb.w	r3, [r3]
 80182c4:	220d      	movs	r2, #13
 80182c6:	2108      	movs	r1, #8
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7fd fd1c 	bl	8015d06 <RegionCommonValueInRange>
 80182ce:	4603      	mov	r3, r0
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	bf14      	ite	ne
 80182d4:	2301      	movne	r3, #1
 80182d6:	2300      	moveq	r3, #0
 80182d8:	b2db      	uxtb	r3, r3
 80182da:	e011      	b.n	8018300 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f993 3000 	ldrsb.w	r3, [r3]
 80182e2:	220e      	movs	r2, #14
 80182e4:	2100      	movs	r1, #0
 80182e6:	4618      	mov	r0, r3
 80182e8:	f7fd fd0d 	bl	8015d06 <RegionCommonValueInRange>
 80182ec:	4603      	mov	r3, r0
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	bf14      	ite	ne
 80182f2:	2301      	movne	r3, #1
 80182f4:	2300      	moveq	r3, #0
 80182f6:	b2db      	uxtb	r3, r3
 80182f8:	e002      	b.n	8018300 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80182fa:	2300      	movs	r3, #0
 80182fc:	e000      	b.n	8018300 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80182fe:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8018300:	4618      	mov	r0, r3
 8018302:	3708      	adds	r7, #8
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}

08018308 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018308:	b480      	push	{r7}
 801830a:	b085      	sub	sp, #20
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	7a1b      	ldrb	r3, [r3, #8]
 8018314:	2b10      	cmp	r3, #16
 8018316:	d160      	bne.n	80183da <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	685b      	ldr	r3, [r3, #4]
 801831c:	330f      	adds	r3, #15
 801831e:	781b      	ldrb	r3, [r3, #0]
 8018320:	2b01      	cmp	r3, #1
 8018322:	d15c      	bne.n	80183de <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018324:	2300      	movs	r3, #0
 8018326:	73fb      	strb	r3, [r7, #15]
 8018328:	2300      	movs	r3, #0
 801832a:	73bb      	strb	r3, [r7, #14]
 801832c:	e051      	b.n	80183d2 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	685a      	ldr	r2, [r3, #4]
 8018332:	7bbb      	ldrb	r3, [r7, #14]
 8018334:	4413      	add	r3, r2
 8018336:	7819      	ldrb	r1, [r3, #0]
 8018338:	4b2b      	ldr	r3, [pc, #172]	; (80183e8 <RegionUS915ApplyCFList+0xe0>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	7bfa      	ldrb	r2, [r7, #15]
 801833e:	b289      	uxth	r1, r1
 8018340:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018344:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8018348:	4b27      	ldr	r3, [pc, #156]	; (80183e8 <RegionUS915ApplyCFList+0xe0>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	7bfa      	ldrb	r2, [r7, #15]
 801834e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018352:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	685a      	ldr	r2, [r3, #4]
 801835a:	7bbb      	ldrb	r3, [r7, #14]
 801835c:	3301      	adds	r3, #1
 801835e:	4413      	add	r3, r2
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	b29b      	uxth	r3, r3
 8018364:	021b      	lsls	r3, r3, #8
 8018366:	b299      	uxth	r1, r3
 8018368:	4b1f      	ldr	r3, [pc, #124]	; (80183e8 <RegionUS915ApplyCFList+0xe0>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	7bfa      	ldrb	r2, [r7, #15]
 801836e:	4301      	orrs	r1, r0
 8018370:	b289      	uxth	r1, r1
 8018372:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018376:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801837a:	7bfb      	ldrb	r3, [r7, #15]
 801837c:	2b04      	cmp	r3, #4
 801837e:	d10f      	bne.n	80183a0 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8018380:	4b19      	ldr	r3, [pc, #100]	; (80183e8 <RegionUS915ApplyCFList+0xe0>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	7bfa      	ldrb	r2, [r7, #15]
 8018386:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801838a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801838e:	4b16      	ldr	r3, [pc, #88]	; (80183e8 <RegionUS915ApplyCFList+0xe0>)
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	7bfa      	ldrb	r2, [r7, #15]
 8018394:	b2c9      	uxtb	r1, r1
 8018396:	b289      	uxth	r1, r1
 8018398:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801839c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80183a0:	4b12      	ldr	r3, [pc, #72]	; (80183ec <RegionUS915ApplyCFList+0xe4>)
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	7bfa      	ldrb	r2, [r7, #15]
 80183a6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80183aa:	4b0f      	ldr	r3, [pc, #60]	; (80183e8 <RegionUS915ApplyCFList+0xe0>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	7bfa      	ldrb	r2, [r7, #15]
 80183b0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80183b4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80183b8:	4b0c      	ldr	r3, [pc, #48]	; (80183ec <RegionUS915ApplyCFList+0xe4>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	7bfa      	ldrb	r2, [r7, #15]
 80183be:	4001      	ands	r1, r0
 80183c0:	b289      	uxth	r1, r1
 80183c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80183c6:	7bfb      	ldrb	r3, [r7, #15]
 80183c8:	3301      	adds	r3, #1
 80183ca:	73fb      	strb	r3, [r7, #15]
 80183cc:	7bbb      	ldrb	r3, [r7, #14]
 80183ce:	3302      	adds	r3, #2
 80183d0:	73bb      	strb	r3, [r7, #14]
 80183d2:	7bfb      	ldrb	r3, [r7, #15]
 80183d4:	2b04      	cmp	r3, #4
 80183d6:	d9aa      	bls.n	801832e <RegionUS915ApplyCFList+0x26>
 80183d8:	e002      	b.n	80183e0 <RegionUS915ApplyCFList+0xd8>
        return;
 80183da:	bf00      	nop
 80183dc:	e000      	b.n	80183e0 <RegionUS915ApplyCFList+0xd8>
        return;
 80183de:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80183e0:	3714      	adds	r7, #20
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bc80      	pop	{r7}
 80183e6:	4770      	bx	lr
 80183e8:	20001adc 	.word	0x20001adc
 80183ec:	20001ad8 	.word	0x20001ad8

080183f0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b084      	sub	sp, #16
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	2204      	movs	r2, #4
 80183fe:	2100      	movs	r1, #0
 8018400:	4618      	mov	r0, r3
 8018402:	f7fd fcd1 	bl	8015da8 <RegionCommonCountChannels>
 8018406:	4603      	mov	r3, r0
 8018408:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801840a:	7bbb      	ldrb	r3, [r7, #14]
 801840c:	2b01      	cmp	r3, #1
 801840e:	d804      	bhi.n	801841a <RegionUS915ChanMaskSet+0x2a>
 8018410:	7bbb      	ldrb	r3, [r7, #14]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d001      	beq.n	801841a <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8018416:	2300      	movs	r3, #0
 8018418:	e04a      	b.n	80184b0 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	791b      	ldrb	r3, [r3, #4]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d002      	beq.n	8018428 <RegionUS915ChanMaskSet+0x38>
 8018422:	2b01      	cmp	r3, #1
 8018424:	d036      	beq.n	8018494 <RegionUS915ChanMaskSet+0xa4>
 8018426:	e040      	b.n	80184aa <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018428:	4b23      	ldr	r3, [pc, #140]	; (80184b8 <RegionUS915ChanMaskSet+0xc8>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	2206      	movs	r2, #6
 8018436:	4619      	mov	r1, r3
 8018438:	f7fd fce2 	bl	8015e00 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801843c:	4b1e      	ldr	r3, [pc, #120]	; (80184b8 <RegionUS915ChanMaskSet+0xc8>)
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8018444:	4b1c      	ldr	r3, [pc, #112]	; (80184b8 <RegionUS915ChanMaskSet+0xc8>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	b2d2      	uxtb	r2, r2
 801844a:	b292      	uxth	r2, r2
 801844c:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8018450:	4b19      	ldr	r3, [pc, #100]	; (80184b8 <RegionUS915ChanMaskSet+0xc8>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2200      	movs	r2, #0
 8018456:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801845a:	2300      	movs	r3, #0
 801845c:	73fb      	strb	r3, [r7, #15]
 801845e:	e015      	b.n	801848c <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018460:	4b16      	ldr	r3, [pc, #88]	; (80184bc <RegionUS915ChanMaskSet+0xcc>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	7bfa      	ldrb	r2, [r7, #15]
 8018466:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801846a:	4b13      	ldr	r3, [pc, #76]	; (80184b8 <RegionUS915ChanMaskSet+0xc8>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	7bfa      	ldrb	r2, [r7, #15]
 8018470:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018474:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018478:	4b10      	ldr	r3, [pc, #64]	; (80184bc <RegionUS915ChanMaskSet+0xcc>)
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	7bfa      	ldrb	r2, [r7, #15]
 801847e:	4001      	ands	r1, r0
 8018480:	b289      	uxth	r1, r1
 8018482:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018486:	7bfb      	ldrb	r3, [r7, #15]
 8018488:	3301      	adds	r3, #1
 801848a:	73fb      	strb	r3, [r7, #15]
 801848c:	7bfb      	ldrb	r3, [r7, #15]
 801848e:	2b05      	cmp	r3, #5
 8018490:	d9e6      	bls.n	8018460 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8018492:	e00c      	b.n	80184ae <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018494:	4b08      	ldr	r3, [pc, #32]	; (80184b8 <RegionUS915ChanMaskSet+0xc8>)
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	2206      	movs	r2, #6
 80184a2:	4619      	mov	r1, r3
 80184a4:	f7fd fcac 	bl	8015e00 <RegionCommonChanMaskCopy>
            break;
 80184a8:	e001      	b.n	80184ae <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 80184aa:	2300      	movs	r3, #0
 80184ac:	e000      	b.n	80184b0 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80184ae:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80184b0:	4618      	mov	r0, r3
 80184b2:	3710      	adds	r7, #16
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}
 80184b8:	20001adc 	.word	0x20001adc
 80184bc:	20001ad8 	.word	0x20001ad8

080184c0 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b088      	sub	sp, #32
 80184c4:	af02      	add	r7, sp, #8
 80184c6:	60ba      	str	r2, [r7, #8]
 80184c8:	607b      	str	r3, [r7, #4]
 80184ca:	4603      	mov	r3, r0
 80184cc:	73fb      	strb	r3, [r7, #15]
 80184ce:	460b      	mov	r3, r1
 80184d0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80184d2:	2300      	movs	r3, #0
 80184d4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80184d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184da:	2b0d      	cmp	r3, #13
 80184dc:	bfa8      	it	ge
 80184de:	230d      	movge	r3, #13
 80184e0:	b25a      	sxtb	r2, r3
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184ec:	4916      	ldr	r1, [pc, #88]	; (8018548 <RegionUS915ComputeRxWindowParameters+0x88>)
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7fe f926 	bl	8016740 <RegionCommonGetBandwidth>
 80184f4:	4603      	mov	r3, r0
 80184f6:	b2da      	uxtb	r2, r3
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018502:	461a      	mov	r2, r3
 8018504:	4b11      	ldr	r3, [pc, #68]	; (801854c <RegionUS915ComputeRxWindowParameters+0x8c>)
 8018506:	5c9a      	ldrb	r2, [r3, r2]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801850e:	4619      	mov	r1, r3
 8018510:	4b0d      	ldr	r3, [pc, #52]	; (8018548 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018512:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018516:	4619      	mov	r1, r3
 8018518:	4610      	mov	r0, r2
 801851a:	f7fd fe8f 	bl	801623c <RegionCommonComputeSymbolTimeLoRa>
 801851e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018520:	4b0b      	ldr	r3, [pc, #44]	; (8018550 <RegionUS915ComputeRxWindowParameters+0x90>)
 8018522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018524:	4798      	blx	r3
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	3308      	adds	r3, #8
 801852a:	687a      	ldr	r2, [r7, #4]
 801852c:	320c      	adds	r2, #12
 801852e:	7bb9      	ldrb	r1, [r7, #14]
 8018530:	9201      	str	r2, [sp, #4]
 8018532:	9300      	str	r3, [sp, #0]
 8018534:	4603      	mov	r3, r0
 8018536:	68ba      	ldr	r2, [r7, #8]
 8018538:	6978      	ldr	r0, [r7, #20]
 801853a:	f7fd fea5 	bl	8016288 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801853e:	bf00      	nop
 8018540:	3718      	adds	r7, #24
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}
 8018546:	bf00      	nop
 8018548:	0801eb38 	.word	0x0801eb38
 801854c:	0801eb28 	.word	0x0801eb28
 8018550:	0801ebac 	.word	0x0801ebac

08018554 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018554:	b590      	push	{r4, r7, lr}
 8018556:	b091      	sub	sp, #68	; 0x44
 8018558:	af0a      	add	r7, sp, #40	; 0x28
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	785b      	ldrb	r3, [r3, #1]
 8018562:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018564:	2300      	movs	r3, #0
 8018566:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8018568:	2300      	movs	r3, #0
 801856a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	685b      	ldr	r3, [r3, #4]
 8018570:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018572:	4b34      	ldr	r3, [pc, #208]	; (8018644 <RegionUS915RxConfig+0xf0>)
 8018574:	685b      	ldr	r3, [r3, #4]
 8018576:	4798      	blx	r3
 8018578:	4603      	mov	r3, r0
 801857a:	2b00      	cmp	r3, #0
 801857c:	d001      	beq.n	8018582 <RegionUS915RxConfig+0x2e>
    {
        return false;
 801857e:	2300      	movs	r3, #0
 8018580:	e05c      	b.n	801863c <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	7cdb      	ldrb	r3, [r3, #19]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d109      	bne.n	801859e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	f003 0307 	and.w	r3, r3, #7
 8018592:	4a2d      	ldr	r2, [pc, #180]	; (8018648 <RegionUS915RxConfig+0xf4>)
 8018594:	fb03 f202 	mul.w	r2, r3, r2
 8018598:	4b2c      	ldr	r3, [pc, #176]	; (801864c <RegionUS915RxConfig+0xf8>)
 801859a:	4413      	add	r3, r2
 801859c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801859e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185a2:	4a2b      	ldr	r2, [pc, #172]	; (8018650 <RegionUS915RxConfig+0xfc>)
 80185a4:	5cd3      	ldrb	r3, [r2, r3]
 80185a6:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80185a8:	4b26      	ldr	r3, [pc, #152]	; (8018644 <RegionUS915RxConfig+0xf0>)
 80185aa:	68db      	ldr	r3, [r3, #12]
 80185ac:	6938      	ldr	r0, [r7, #16]
 80185ae:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80185b0:	4b24      	ldr	r3, [pc, #144]	; (8018644 <RegionUS915RxConfig+0xf0>)
 80185b2:	699c      	ldr	r4, [r3, #24]
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	789b      	ldrb	r3, [r3, #2]
 80185b8:	4618      	mov	r0, r3
 80185ba:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	689b      	ldr	r3, [r3, #8]
 80185c2:	b29b      	uxth	r3, r3
 80185c4:	687a      	ldr	r2, [r7, #4]
 80185c6:	7c92      	ldrb	r2, [r2, #18]
 80185c8:	9209      	str	r2, [sp, #36]	; 0x24
 80185ca:	2201      	movs	r2, #1
 80185cc:	9208      	str	r2, [sp, #32]
 80185ce:	2200      	movs	r2, #0
 80185d0:	9207      	str	r2, [sp, #28]
 80185d2:	2200      	movs	r2, #0
 80185d4:	9206      	str	r2, [sp, #24]
 80185d6:	2200      	movs	r2, #0
 80185d8:	9205      	str	r2, [sp, #20]
 80185da:	2200      	movs	r2, #0
 80185dc:	9204      	str	r2, [sp, #16]
 80185de:	2200      	movs	r2, #0
 80185e0:	9203      	str	r2, [sp, #12]
 80185e2:	9302      	str	r3, [sp, #8]
 80185e4:	2308      	movs	r3, #8
 80185e6:	9301      	str	r3, [sp, #4]
 80185e8:	2300      	movs	r3, #0
 80185ea:	9300      	str	r3, [sp, #0]
 80185ec:	2301      	movs	r3, #1
 80185ee:	460a      	mov	r2, r1
 80185f0:	4601      	mov	r1, r0
 80185f2:	2001      	movs	r0, #1
 80185f4:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	7c5b      	ldrb	r3, [r3, #17]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d005      	beq.n	801860a <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80185fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018602:	4a14      	ldr	r2, [pc, #80]	; (8018654 <RegionUS915RxConfig+0x100>)
 8018604:	5cd3      	ldrb	r3, [r2, r3]
 8018606:	75fb      	strb	r3, [r7, #23]
 8018608:	e004      	b.n	8018614 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801860a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801860e:	4a12      	ldr	r2, [pc, #72]	; (8018658 <RegionUS915RxConfig+0x104>)
 8018610:	5cd3      	ldrb	r3, [r2, r3]
 8018612:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018614:	4b0b      	ldr	r3, [pc, #44]	; (8018644 <RegionUS915RxConfig+0xf0>)
 8018616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018618:	7dfa      	ldrb	r2, [r7, #23]
 801861a:	320d      	adds	r2, #13
 801861c:	b2d2      	uxtb	r2, r2
 801861e:	4611      	mov	r1, r2
 8018620:	2001      	movs	r0, #1
 8018622:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	7cdb      	ldrb	r3, [r3, #19]
 8018628:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801862c:	6939      	ldr	r1, [r7, #16]
 801862e:	4618      	mov	r0, r3
 8018630:	f7fe f8a4 	bl	801677c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018634:	683b      	ldr	r3, [r7, #0]
 8018636:	7bfa      	ldrb	r2, [r7, #15]
 8018638:	701a      	strb	r2, [r3, #0]
    return true;
 801863a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801863c:	4618      	mov	r0, r3
 801863e:	371c      	adds	r7, #28
 8018640:	46bd      	mov	sp, r7
 8018642:	bd90      	pop	{r4, r7, pc}
 8018644:	0801ebac 	.word	0x0801ebac
 8018648:	000927c0 	.word	0x000927c0
 801864c:	370870a0 	.word	0x370870a0
 8018650:	0801eb28 	.word	0x0801eb28
 8018654:	0801eb9c 	.word	0x0801eb9c
 8018658:	0801eb8c 	.word	0x0801eb8c

0801865c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801865c:	b590      	push	{r4, r7, lr}
 801865e:	b093      	sub	sp, #76	; 0x4c
 8018660:	af0a      	add	r7, sp, #40	; 0x28
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801866e:	461a      	mov	r2, r3
 8018670:	4b49      	ldr	r3, [pc, #292]	; (8018798 <RegionUS915TxConfig+0x13c>)
 8018672:	5c9b      	ldrb	r3, [r3, r2]
 8018674:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801867c:	4b47      	ldr	r3, [pc, #284]	; (801879c <RegionUS915TxConfig+0x140>)
 801867e:	681a      	ldr	r2, [r3, #0]
 8018680:	4b47      	ldr	r3, [pc, #284]	; (80187a0 <RegionUS915TxConfig+0x144>)
 8018682:	6819      	ldr	r1, [r3, #0]
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	461c      	mov	r4, r3
 801868a:	4623      	mov	r3, r4
 801868c:	005b      	lsls	r3, r3, #1
 801868e:	4423      	add	r3, r4
 8018690:	009b      	lsls	r3, r3, #2
 8018692:	440b      	add	r3, r1
 8018694:	3309      	adds	r3, #9
 8018696:	781b      	ldrb	r3, [r3, #0]
 8018698:	4619      	mov	r1, r3
 801869a:	460b      	mov	r3, r1
 801869c:	005b      	lsls	r3, r3, #1
 801869e:	440b      	add	r3, r1
 80186a0:	00db      	lsls	r3, r3, #3
 80186a2:	4413      	add	r3, r2
 80186a4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80186ae:	4b3c      	ldr	r3, [pc, #240]	; (80187a0 <RegionUS915TxConfig+0x144>)
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80186b6:	f7ff fa4d 	bl	8017b54 <LimitTxPower>
 80186ba:	4603      	mov	r3, r0
 80186bc:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186c4:	4937      	ldr	r1, [pc, #220]	; (80187a4 <RegionUS915TxConfig+0x148>)
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7fe f83a 	bl	8016740 <RegionCommonGetBandwidth>
 80186cc:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80186ce:	2300      	movs	r3, #0
 80186d0:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80186d2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80186d6:	f04f 0200 	mov.w	r2, #0
 80186da:	4933      	ldr	r1, [pc, #204]	; (80187a8 <RegionUS915TxConfig+0x14c>)
 80186dc:	4618      	mov	r0, r3
 80186de:	f7fd fe8b 	bl	80163f8 <RegionCommonComputeTxPower>
 80186e2:	4603      	mov	r3, r0
 80186e4:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80186e6:	4b31      	ldr	r3, [pc, #196]	; (80187ac <RegionUS915TxConfig+0x150>)
 80186e8:	68da      	ldr	r2, [r3, #12]
 80186ea:	4b2d      	ldr	r3, [pc, #180]	; (80187a0 <RegionUS915TxConfig+0x144>)
 80186ec:	6819      	ldr	r1, [r3, #0]
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	4618      	mov	r0, r3
 80186f4:	4603      	mov	r3, r0
 80186f6:	005b      	lsls	r3, r3, #1
 80186f8:	4403      	add	r3, r0
 80186fa:	009b      	lsls	r3, r3, #2
 80186fc:	440b      	add	r3, r1
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	4618      	mov	r0, r3
 8018702:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018704:	4b29      	ldr	r3, [pc, #164]	; (80187ac <RegionUS915TxConfig+0x150>)
 8018706:	69dc      	ldr	r4, [r3, #28]
 8018708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801870c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018710:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018714:	9208      	str	r2, [sp, #32]
 8018716:	2200      	movs	r2, #0
 8018718:	9207      	str	r2, [sp, #28]
 801871a:	2200      	movs	r2, #0
 801871c:	9206      	str	r2, [sp, #24]
 801871e:	2200      	movs	r2, #0
 8018720:	9205      	str	r2, [sp, #20]
 8018722:	2201      	movs	r2, #1
 8018724:	9204      	str	r2, [sp, #16]
 8018726:	2200      	movs	r2, #0
 8018728:	9203      	str	r2, [sp, #12]
 801872a:	2208      	movs	r2, #8
 801872c:	9202      	str	r2, [sp, #8]
 801872e:	2201      	movs	r2, #1
 8018730:	9201      	str	r2, [sp, #4]
 8018732:	9300      	str	r3, [sp, #0]
 8018734:	69bb      	ldr	r3, [r7, #24]
 8018736:	2200      	movs	r2, #0
 8018738:	2001      	movs	r0, #1
 801873a:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801873c:	4b18      	ldr	r3, [pc, #96]	; (80187a0 <RegionUS915TxConfig+0x144>)
 801873e:	681a      	ldr	r2, [r3, #0]
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	781b      	ldrb	r3, [r3, #0]
 8018744:	4619      	mov	r1, r3
 8018746:	460b      	mov	r3, r1
 8018748:	005b      	lsls	r3, r3, #1
 801874a:	440b      	add	r3, r1
 801874c:	009b      	lsls	r3, r3, #2
 801874e:	4413      	add	r3, r2
 8018750:	681a      	ldr	r2, [r3, #0]
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018758:	4619      	mov	r1, r3
 801875a:	4610      	mov	r0, r2
 801875c:	f7fe f840 	bl	80167e0 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8018760:	4b12      	ldr	r3, [pc, #72]	; (80187ac <RegionUS915TxConfig+0x150>)
 8018762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018764:	68fa      	ldr	r2, [r7, #12]
 8018766:	8992      	ldrh	r2, [r2, #12]
 8018768:	b2d2      	uxtb	r2, r2
 801876a:	4611      	mov	r1, r2
 801876c:	2001      	movs	r0, #1
 801876e:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	899b      	ldrh	r3, [r3, #12]
 801877a:	4619      	mov	r1, r3
 801877c:	4610      	mov	r0, r2
 801877e:	f7ff fa63 	bl	8017c48 <GetTimeOnAir>
 8018782:	4602      	mov	r2, r0
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	7fba      	ldrb	r2, [r7, #30]
 801878c:	701a      	strb	r2, [r3, #0]
    return true;
 801878e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018790:	4618      	mov	r0, r3
 8018792:	3724      	adds	r7, #36	; 0x24
 8018794:	46bd      	mov	sp, r7
 8018796:	bd90      	pop	{r4, r7, pc}
 8018798:	0801eb28 	.word	0x0801eb28
 801879c:	20001ae0 	.word	0x20001ae0
 80187a0:	20001adc 	.word	0x20001adc
 80187a4:	0801eb38 	.word	0x0801eb38
 80187a8:	41f00000 	.word	0x41f00000
 80187ac:	0801ebac 	.word	0x0801ebac

080187b0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80187b0:	b590      	push	{r4, r7, lr}
 80187b2:	b097      	sub	sp, #92	; 0x5c
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	60f8      	str	r0, [r7, #12]
 80187b8:	60b9      	str	r1, [r7, #8]
 80187ba:	607a      	str	r2, [r7, #4]
 80187bc:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80187be:	2307      	movs	r3, #7
 80187c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80187c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80187c8:	2200      	movs	r2, #0
 80187ca:	601a      	str	r2, [r3, #0]
 80187cc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80187ce:	2300      	movs	r3, #0
 80187d0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 80187d4:	2300      	movs	r3, #0
 80187d6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80187da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187de:	2200      	movs	r2, #0
 80187e0:	601a      	str	r2, [r3, #0]
 80187e2:	605a      	str	r2, [r3, #4]
 80187e4:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80187e6:	4b97      	ldr	r3, [pc, #604]	; (8018a44 <RegionUS915LinkAdrReq+0x294>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	f503 7158 	add.w	r1, r3, #864	; 0x360
 80187ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187f2:	2206      	movs	r2, #6
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7fd fb03 	bl	8015e00 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80187fa:	e11b      	b.n	8018a34 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	685a      	ldr	r2, [r3, #4]
 8018800:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8018804:	4413      	add	r3, r2
 8018806:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801880a:	4611      	mov	r1, r2
 801880c:	4618      	mov	r0, r3
 801880e:	f7fd fc3b 	bl	8016088 <RegionCommonParseLinkAdrReq>
 8018812:	4603      	mov	r3, r0
 8018814:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8018818:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801881c:	2b00      	cmp	r3, #0
 801881e:	f000 8113 	beq.w	8018a48 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018822:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018826:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801882a:	4413      	add	r3, r2
 801882c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018830:	2307      	movs	r3, #7
 8018832:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8018836:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801883a:	2b06      	cmp	r3, #6
 801883c:	d116      	bne.n	801886c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801883e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018842:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8018846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801884a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801884e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018852:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8018856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801885a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801885e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018862:	b2db      	uxtb	r3, r3
 8018864:	b29b      	uxth	r3, r3
 8018866:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801886a:	e0e3      	b.n	8018a34 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801886c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018870:	2b07      	cmp	r3, #7
 8018872:	d112      	bne.n	801889a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8018874:	2300      	movs	r3, #0
 8018876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801887a:	2300      	movs	r3, #0
 801887c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8018880:	2300      	movs	r3, #0
 8018882:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8018886:	2300      	movs	r3, #0
 8018888:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801888c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018890:	b2db      	uxtb	r3, r3
 8018892:	b29b      	uxth	r3, r3
 8018894:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018898:	e0cc      	b.n	8018a34 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801889a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801889e:	2b05      	cmp	r3, #5
 80188a0:	f040 80bf 	bne.w	8018a22 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 80188a4:	2301      	movs	r3, #1
 80188a6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80188aa:	2300      	movs	r3, #0
 80188ac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80188b0:	2300      	movs	r3, #0
 80188b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80188b6:	e0ae      	b.n	8018a16 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80188b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80188bc:	b2da      	uxtb	r2, r3
 80188be:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80188c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188c6:	fa01 f303 	lsl.w	r3, r1, r3
 80188ca:	4013      	ands	r3, r2
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d04d      	beq.n	801896c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 80188d0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188d4:	f003 0301 	and.w	r3, r3, #1
 80188d8:	b2db      	uxtb	r3, r3
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d120      	bne.n	8018920 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 80188de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188e2:	005b      	lsls	r3, r3, #1
 80188e4:	3358      	adds	r3, #88	; 0x58
 80188e6:	443b      	add	r3, r7
 80188e8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80188ec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188f0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80188f4:	b292      	uxth	r2, r2
 80188f6:	005b      	lsls	r3, r3, #1
 80188f8:	3358      	adds	r3, #88	; 0x58
 80188fa:	443b      	add	r3, r7
 80188fc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018900:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018904:	b21a      	sxth	r2, r3
 8018906:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801890a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801890e:	fa01 f303 	lsl.w	r3, r1, r3
 8018912:	b21b      	sxth	r3, r3
 8018914:	4313      	orrs	r3, r2
 8018916:	b21b      	sxth	r3, r3
 8018918:	b29b      	uxth	r3, r3
 801891a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801891e:	e075      	b.n	8018a0c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8018920:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018924:	005b      	lsls	r3, r3, #1
 8018926:	3358      	adds	r3, #88	; 0x58
 8018928:	443b      	add	r3, r7
 801892a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801892e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018932:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8018936:	b292      	uxth	r2, r2
 8018938:	005b      	lsls	r3, r3, #1
 801893a:	3358      	adds	r3, #88	; 0x58
 801893c:	443b      	add	r3, r7
 801893e:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018946:	b21a      	sxth	r2, r3
 8018948:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801894c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018950:	fa01 f303 	lsl.w	r3, r1, r3
 8018954:	b21b      	sxth	r3, r3
 8018956:	4313      	orrs	r3, r2
 8018958:	b21b      	sxth	r3, r3
 801895a:	b29b      	uxth	r3, r3
 801895c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018960:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018964:	3301      	adds	r3, #1
 8018966:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801896a:	e04f      	b.n	8018a0c <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801896c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018970:	f003 0301 	and.w	r3, r3, #1
 8018974:	b2db      	uxtb	r3, r3
 8018976:	2b00      	cmp	r3, #0
 8018978:	d122      	bne.n	80189c0 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801897a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801897e:	005b      	lsls	r3, r3, #1
 8018980:	3358      	adds	r3, #88	; 0x58
 8018982:	443b      	add	r3, r7
 8018984:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018988:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801898c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018990:	b292      	uxth	r2, r2
 8018992:	005b      	lsls	r3, r3, #1
 8018994:	3358      	adds	r3, #88	; 0x58
 8018996:	443b      	add	r3, r7
 8018998:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801899c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80189a0:	b21a      	sxth	r2, r3
 80189a2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80189a6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80189aa:	fa01 f303 	lsl.w	r3, r1, r3
 80189ae:	b21b      	sxth	r3, r3
 80189b0:	43db      	mvns	r3, r3
 80189b2:	b21b      	sxth	r3, r3
 80189b4:	4013      	ands	r3, r2
 80189b6:	b21b      	sxth	r3, r3
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80189be:	e025      	b.n	8018a0c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80189c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80189c4:	005b      	lsls	r3, r3, #1
 80189c6:	3358      	adds	r3, #88	; 0x58
 80189c8:	443b      	add	r3, r7
 80189ca:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80189ce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80189d2:	b2d2      	uxtb	r2, r2
 80189d4:	b292      	uxth	r2, r2
 80189d6:	005b      	lsls	r3, r3, #1
 80189d8:	3358      	adds	r3, #88	; 0x58
 80189da:	443b      	add	r3, r7
 80189dc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80189e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80189e4:	b21a      	sxth	r2, r3
 80189e6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80189ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80189ee:	fa01 f303 	lsl.w	r3, r1, r3
 80189f2:	b21b      	sxth	r3, r3
 80189f4:	43db      	mvns	r3, r3
 80189f6:	b21b      	sxth	r3, r3
 80189f8:	4013      	ands	r3, r2
 80189fa:	b21b      	sxth	r3, r3
 80189fc:	b29b      	uxth	r3, r3
 80189fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018a02:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018a06:	3301      	adds	r3, #1
 8018a08:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8018a0c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018a10:	3301      	adds	r3, #1
 8018a12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018a16:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018a1a:	2b07      	cmp	r3, #7
 8018a1c:	f67f af4c 	bls.w	80188b8 <RegionUS915LinkAdrReq+0x108>
 8018a20:	e008      	b.n	8018a34 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8018a22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018a26:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8018a2a:	005b      	lsls	r3, r3, #1
 8018a2c:	3358      	adds	r3, #88	; 0x58
 8018a2e:	443b      	add	r3, r7
 8018a30:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	7a1b      	ldrb	r3, [r3, #8]
 8018a38:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	f4ff aedd 	bcc.w	80187fc <RegionUS915LinkAdrReq+0x4c>
 8018a42:	e002      	b.n	8018a4a <RegionUS915LinkAdrReq+0x29a>
 8018a44:	20001adc 	.word	0x20001adc
            break; // break loop, since no more request has been found
 8018a48:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8018a4a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018a4e:	2b03      	cmp	r3, #3
 8018a50:	dc0f      	bgt.n	8018a72 <RegionUS915LinkAdrReq+0x2c2>
 8018a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a56:	2204      	movs	r2, #4
 8018a58:	2100      	movs	r1, #0
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f7fd f9a4 	bl	8015da8 <RegionCommonCountChannels>
 8018a60:	4603      	mov	r3, r0
 8018a62:	2b01      	cmp	r3, #1
 8018a64:	d805      	bhi.n	8018a72 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8018a66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a6a:	f023 0301 	bic.w	r3, r3, #1
 8018a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018a72:	2302      	movs	r3, #2
 8018a74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	7a5b      	ldrb	r3, [r3, #9]
 8018a7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8018a80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7ff f90f 	bl	8017ca8 <RegionUS915GetPhyParam>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8018a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a92:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	7a9b      	ldrb	r3, [r3, #10]
 8018a98:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018a9a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018a9e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018aa0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018aa4:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018aa6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8018aaa:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018ab2:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018aba:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	7b5b      	ldrb	r3, [r3, #13]
 8018ac0:	b25b      	sxtb	r3, r3
 8018ac2:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018ac4:	2348      	movs	r3, #72	; 0x48
 8018ac6:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018ace:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ad2:	b25b      	sxtb	r3, r3
 8018ad4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018ad8:	2304      	movs	r3, #4
 8018ada:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018ade:	4b3f      	ldr	r3, [pc, #252]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018ae4:	230e      	movs	r3, #14
 8018ae6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8018aea:	2300      	movs	r3, #0
 8018aec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018af6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8018afa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018afe:	1c9a      	adds	r2, r3, #2
 8018b00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018b04:	1c59      	adds	r1, r3, #1
 8018b06:	f107 0014 	add.w	r0, r7, #20
 8018b0a:	4623      	mov	r3, r4
 8018b0c:	f7fd fb0d 	bl	801612a <RegionCommonLinkAdrReqVerifyParams>
 8018b10:	4603      	mov	r3, r0
 8018b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018b16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b1a:	2b07      	cmp	r3, #7
 8018b1c:	d147      	bne.n	8018bae <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8018b1e:	4b2f      	ldr	r3, [pc, #188]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018b26:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018b2a:	2206      	movs	r2, #6
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7fd f967 	bl	8015e00 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8018b32:	4b2b      	ldr	r3, [pc, #172]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	8819      	ldrh	r1, [r3, #0]
 8018b38:	4b28      	ldr	r3, [pc, #160]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8018b40:	4b27      	ldr	r3, [pc, #156]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	400a      	ands	r2, r1
 8018b46:	b292      	uxth	r2, r2
 8018b48:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8018b4a:	4b25      	ldr	r3, [pc, #148]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	8859      	ldrh	r1, [r3, #2]
 8018b50:	4b22      	ldr	r3, [pc, #136]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8018b58:	4b21      	ldr	r3, [pc, #132]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	400a      	ands	r2, r1
 8018b5e:	b292      	uxth	r2, r2
 8018b60:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8018b62:	4b1f      	ldr	r3, [pc, #124]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	8899      	ldrh	r1, [r3, #4]
 8018b68:	4b1c      	ldr	r3, [pc, #112]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8018b70:	4b1b      	ldr	r3, [pc, #108]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	400a      	ands	r2, r1
 8018b76:	b292      	uxth	r2, r2
 8018b78:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8018b7a:	4b19      	ldr	r3, [pc, #100]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	88d9      	ldrh	r1, [r3, #6]
 8018b80:	4b16      	ldr	r3, [pc, #88]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8018b88:	4b15      	ldr	r3, [pc, #84]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	400a      	ands	r2, r1
 8018b8e:	b292      	uxth	r2, r2
 8018b90:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018b92:	4b12      	ldr	r3, [pc, #72]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	4b12      	ldr	r3, [pc, #72]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018b9e:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8018ba0:	4b0e      	ldr	r3, [pc, #56]	; (8018bdc <RegionUS915LinkAdrReq+0x42c>)
 8018ba2:	681a      	ldr	r2, [r3, #0]
 8018ba4:	4b0e      	ldr	r3, [pc, #56]	; (8018be0 <RegionUS915LinkAdrReq+0x430>)
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8018bac:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018bae:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8018bb2:	68bb      	ldr	r3, [r7, #8]
 8018bb4:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018bb6:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018bbe:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018bc8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018bcc:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8018bce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	375c      	adds	r7, #92	; 0x5c
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd90      	pop	{r4, r7, pc}
 8018bda:	bf00      	nop
 8018bdc:	20001adc 	.word	0x20001adc
 8018be0:	20001ad8 	.word	0x20001ad8

08018be4 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b084      	sub	sp, #16
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018bec:	2307      	movs	r3, #7
 8018bee:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	685b      	ldr	r3, [r3, #4]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7fe ffe3 	bl	8017bc0 <VerifyRfFreq>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	f083 0301 	eor.w	r3, r3, #1
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d003      	beq.n	8018c0e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018c06:	7bfb      	ldrb	r3, [r7, #15]
 8018c08:	f023 0301 	bic.w	r3, r3, #1
 8018c0c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	f993 3000 	ldrsb.w	r3, [r3]
 8018c14:	220d      	movs	r2, #13
 8018c16:	2108      	movs	r1, #8
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f7fd f874 	bl	8015d06 <RegionCommonValueInRange>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d103      	bne.n	8018c2c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8018c24:	7bfb      	ldrb	r3, [r7, #15]
 8018c26:	f023 0302 	bic.w	r3, r3, #2
 8018c2a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8018c32:	2207      	movs	r2, #7
 8018c34:	2105      	movs	r1, #5
 8018c36:	4618      	mov	r0, r3
 8018c38:	f7fd f865 	bl	8015d06 <RegionCommonValueInRange>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	2b01      	cmp	r3, #1
 8018c40:	d004      	beq.n	8018c4c <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018c48:	2b0d      	cmp	r3, #13
 8018c4a:	dd03      	ble.n	8018c54 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018c4c:	7bfb      	ldrb	r3, [r7, #15]
 8018c4e:	f023 0302 	bic.w	r3, r3, #2
 8018c52:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c5a:	2203      	movs	r2, #3
 8018c5c:	2100      	movs	r1, #0
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7fd f851 	bl	8015d06 <RegionCommonValueInRange>
 8018c64:	4603      	mov	r3, r0
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d103      	bne.n	8018c72 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018c6a:	7bfb      	ldrb	r3, [r7, #15]
 8018c6c:	f023 0304 	bic.w	r3, r3, #4
 8018c70:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8018c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	3710      	adds	r7, #16
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018c7c:	b480      	push	{r7}
 8018c7e:	b083      	sub	sp, #12
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	370c      	adds	r7, #12
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bc80      	pop	{r7}
 8018c90:	4770      	bx	lr

08018c92 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018c92:	b480      	push	{r7}
 8018c94:	b083      	sub	sp, #12
 8018c96:	af00      	add	r7, sp, #0
 8018c98:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	370c      	adds	r7, #12
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	bc80      	pop	{r7}
 8018ca6:	4770      	bx	lr

08018ca8 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018ca8:	b480      	push	{r7}
 8018caa:	b083      	sub	sp, #12
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	370c      	adds	r7, #12
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bc80      	pop	{r7}
 8018cbc:	4770      	bx	lr
	...

08018cc0 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b083      	sub	sp, #12
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	460a      	mov	r2, r1
 8018cca:	71fb      	strb	r3, [r7, #7]
 8018ccc:	4613      	mov	r3, r2
 8018cce:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018cd0:	79bb      	ldrb	r3, [r7, #6]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d106      	bne.n	8018ce4 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018cd6:	4b13      	ldr	r3, [pc, #76]	; (8018d24 <RegionUS915AlternateDr+0x64>)
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	7b5a      	ldrb	r2, [r3, #13]
 8018cdc:	3201      	adds	r2, #1
 8018cde:	b2d2      	uxtb	r2, r2
 8018ce0:	735a      	strb	r2, [r3, #13]
 8018ce2:	e005      	b.n	8018cf0 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018ce4:	4b0f      	ldr	r3, [pc, #60]	; (8018d24 <RegionUS915AlternateDr+0x64>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	7b5a      	ldrb	r2, [r3, #13]
 8018cea:	3a01      	subs	r2, #1
 8018cec:	b2d2      	uxtb	r2, r2
 8018cee:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018cf0:	4b0c      	ldr	r3, [pc, #48]	; (8018d24 <RegionUS915AlternateDr+0x64>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	7b5a      	ldrb	r2, [r3, #13]
 8018cf6:	4b0c      	ldr	r3, [pc, #48]	; (8018d28 <RegionUS915AlternateDr+0x68>)
 8018cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8018cfc:	0859      	lsrs	r1, r3, #1
 8018cfe:	460b      	mov	r3, r1
 8018d00:	00db      	lsls	r3, r3, #3
 8018d02:	440b      	add	r3, r1
 8018d04:	1ad3      	subs	r3, r2, r3
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d102      	bne.n	8018d12 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018d0c:	2304      	movs	r3, #4
 8018d0e:	71fb      	strb	r3, [r7, #7]
 8018d10:	e001      	b.n	8018d16 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8018d12:	2300      	movs	r3, #0
 8018d14:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	370c      	adds	r7, #12
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bc80      	pop	{r7}
 8018d22:	4770      	bx	lr
 8018d24:	20001ad8 	.word	0x20001ad8
 8018d28:	38e38e39 	.word	0x38e38e39

08018d2c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b0a8      	sub	sp, #160	; 0xa0
 8018d30:	af02      	add	r7, sp, #8
 8018d32:	60f8      	str	r0, [r7, #12]
 8018d34:	60b9      	str	r1, [r7, #8]
 8018d36:	607a      	str	r2, [r7, #4]
 8018d38:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018d40:	2300      	movs	r3, #0
 8018d42:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018d46:	2300      	movs	r3, #0
 8018d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018d4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018d4e:	2244      	movs	r2, #68	; 0x44
 8018d50:	2100      	movs	r1, #0
 8018d52:	4618      	mov	r0, r3
 8018d54:	f004 ff5e 	bl	801dc14 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018d58:	230c      	movs	r3, #12
 8018d5a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018d5e:	4b67      	ldr	r3, [pc, #412]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	2204      	movs	r2, #4
 8018d64:	2100      	movs	r1, #0
 8018d66:	4618      	mov	r0, r3
 8018d68:	f7fd f81e 	bl	8015da8 <RegionCommonCountChannels>
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d10e      	bne.n	8018d90 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018d72:	4b62      	ldr	r3, [pc, #392]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	4618      	mov	r0, r3
 8018d78:	4b61      	ldr	r3, [pc, #388]	; (8018f00 <RegionUS915NextChannel+0x1d4>)
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018d80:	2204      	movs	r2, #4
 8018d82:	4619      	mov	r1, r3
 8018d84:	f7fd f83c 	bl	8015e00 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018d88:	4b5c      	ldr	r3, [pc, #368]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d96:	2b03      	cmp	r3, #3
 8018d98:	dd0c      	ble.n	8018db4 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018d9a:	4b58      	ldr	r3, [pc, #352]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	891b      	ldrh	r3, [r3, #8]
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d106      	bne.n	8018db4 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018da6:	4b56      	ldr	r3, [pc, #344]	; (8018f00 <RegionUS915NextChannel+0x1d4>)
 8018da8:	681a      	ldr	r2, [r3, #0]
 8018daa:	4b54      	ldr	r3, [pc, #336]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018db2:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	7a5b      	ldrb	r3, [r3, #9]
 8018db8:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018dc0:	b2db      	uxtb	r3, r3
 8018dc2:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018dc4:	4b4d      	ldr	r3, [pc, #308]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018dca:	4b4d      	ldr	r3, [pc, #308]	; (8018f00 <RegionUS915NextChannel+0x1d4>)
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8018dd0:	4b4c      	ldr	r3, [pc, #304]	; (8018f04 <RegionUS915NextChannel+0x1d8>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018dd6:	2348      	movs	r3, #72	; 0x48
 8018dd8:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	685b      	ldr	r3, [r3, #4]
 8018de8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	7a9b      	ldrb	r3, [r3, #10]
 8018dee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018df2:	2301      	movs	r3, #1
 8018df4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018df8:	f107 0314 	add.w	r3, r7, #20
 8018dfc:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018dfe:	68fa      	ldr	r2, [r7, #12]
 8018e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018e04:	320c      	adds	r2, #12
 8018e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e0a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	7d1b      	ldrb	r3, [r3, #20]
 8018e12:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	8adb      	ldrh	r3, [r3, #22]
 8018e20:	4619      	mov	r1, r3
 8018e22:	4610      	mov	r0, r2
 8018e24:	f7fe ff10 	bl	8017c48 <GetTimeOnAir>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018e2c:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018e30:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018e34:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	9301      	str	r3, [sp, #4]
 8018e3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018e40:	9300      	str	r3, [sp, #0]
 8018e42:	460b      	mov	r3, r1
 8018e44:	6839      	ldr	r1, [r7, #0]
 8018e46:	f7fd fbc6 	bl	80165d6 <RegionCommonIdentifyChannels>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018e50:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d14a      	bne.n	8018eee <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	7a5b      	ldrb	r3, [r3, #9]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d00e      	beq.n	8018e7e <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018e60:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018e64:	3b01      	subs	r3, #1
 8018e66:	4619      	mov	r1, r3
 8018e68:	2000      	movs	r0, #0
 8018e6a:	f000 f89f 	bl	8018fac <randr>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	3398      	adds	r3, #152	; 0x98
 8018e72:	443b      	add	r3, r7
 8018e74:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018e78:	68bb      	ldr	r3, [r7, #8]
 8018e7a:	701a      	strb	r2, [r3, #0]
 8018e7c:	e02e      	b.n	8018edc <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d10e      	bne.n	8018ea6 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018e88:	4b1c      	ldr	r3, [pc, #112]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018e8e:	4b1b      	ldr	r3, [pc, #108]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018e90:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018e92:	330c      	adds	r3, #12
 8018e94:	68ba      	ldr	r2, [r7, #8]
 8018e96:	4619      	mov	r1, r3
 8018e98:	f7fc fcf0 	bl	801587c <RegionBaseUSComputeNext125kHzJoinChannel>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	2b03      	cmp	r3, #3
 8018ea0:	d11c      	bne.n	8018edc <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018ea2:	2303      	movs	r3, #3
 8018ea4:	e025      	b.n	8018ef2 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018eac:	e004      	b.n	8018eb8 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8018eae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018eb8:	4b10      	ldr	r3, [pc, #64]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	891b      	ldrh	r3, [r3, #8]
 8018ebe:	b2da      	uxtb	r2, r3
 8018ec0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018ec4:	fa42 f303 	asr.w	r3, r2, r3
 8018ec8:	f003 0301 	and.w	r3, r3, #1
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d0ee      	beq.n	8018eae <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8018ed0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018ed4:	3340      	adds	r3, #64	; 0x40
 8018ed6:	b2da      	uxtb	r2, r3
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018edc:	4b07      	ldr	r3, [pc, #28]	; (8018efc <RegionUS915NextChannel+0x1d0>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	2248      	movs	r2, #72	; 0x48
 8018ee8:	4619      	mov	r1, r3
 8018eea:	f7fc ff29 	bl	8015d40 <RegionCommonChanDisable>
    }
    return status;
 8018eee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	3798      	adds	r7, #152	; 0x98
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}
 8018efa:	bf00      	nop
 8018efc:	20001ad8 	.word	0x20001ad8
 8018f00:	20001adc 	.word	0x20001adc
 8018f04:	20001ae0 	.word	0x20001ae0

08018f08 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018f08:	b480      	push	{r7}
 8018f0a:	b085      	sub	sp, #20
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	4603      	mov	r3, r0
 8018f10:	71fb      	strb	r3, [r7, #7]
 8018f12:	460b      	mov	r3, r1
 8018f14:	71bb      	strb	r3, [r7, #6]
 8018f16:	4613      	mov	r3, r2
 8018f18:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018f1a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018f1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018f22:	4909      	ldr	r1, [pc, #36]	; (8018f48 <RegionUS915ApplyDrOffset+0x40>)
 8018f24:	0092      	lsls	r2, r2, #2
 8018f26:	440a      	add	r2, r1
 8018f28:	4413      	add	r3, r2
 8018f2a:	781b      	ldrb	r3, [r3, #0]
 8018f2c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	da01      	bge.n	8018f3a <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018f36:	2300      	movs	r3, #0
 8018f38:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018f3a:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	3714      	adds	r7, #20
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bc80      	pop	{r7}
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop
 8018f48:	0801eb78 	.word	0x0801eb78

08018f4c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018f50:	4b0d      	ldr	r3, [pc, #52]	; (8018f88 <rand1+0x3c>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	4a0d      	ldr	r2, [pc, #52]	; (8018f8c <rand1+0x40>)
 8018f56:	fb02 f303 	mul.w	r3, r2, r3
 8018f5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018f5e:	3339      	adds	r3, #57	; 0x39
 8018f60:	4a09      	ldr	r2, [pc, #36]	; (8018f88 <rand1+0x3c>)
 8018f62:	6013      	str	r3, [r2, #0]
 8018f64:	4b08      	ldr	r3, [pc, #32]	; (8018f88 <rand1+0x3c>)
 8018f66:	681a      	ldr	r2, [r3, #0]
 8018f68:	2303      	movs	r3, #3
 8018f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8018f6e:	1ad1      	subs	r1, r2, r3
 8018f70:	0849      	lsrs	r1, r1, #1
 8018f72:	440b      	add	r3, r1
 8018f74:	0f99      	lsrs	r1, r3, #30
 8018f76:	460b      	mov	r3, r1
 8018f78:	07db      	lsls	r3, r3, #31
 8018f7a:	1a5b      	subs	r3, r3, r1
 8018f7c:	1ad1      	subs	r1, r2, r3
 8018f7e:	460b      	mov	r3, r1
}
 8018f80:	4618      	mov	r0, r3
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bc80      	pop	{r7}
 8018f86:	4770      	bx	lr
 8018f88:	20000130 	.word	0x20000130
 8018f8c:	41c64e6d 	.word	0x41c64e6d

08018f90 <srand1>:

void srand1( uint32_t seed )
{
 8018f90:	b480      	push	{r7}
 8018f92:	b083      	sub	sp, #12
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
    next = seed;
 8018f98:	4a03      	ldr	r2, [pc, #12]	; (8018fa8 <srand1+0x18>)
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	6013      	str	r3, [r2, #0]
}
 8018f9e:	bf00      	nop
 8018fa0:	370c      	adds	r7, #12
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bc80      	pop	{r7}
 8018fa6:	4770      	bx	lr
 8018fa8:	20000130 	.word	0x20000130

08018fac <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b082      	sub	sp, #8
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
 8018fb4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018fb6:	f7ff ffc9 	bl	8018f4c <rand1>
 8018fba:	4602      	mov	r2, r0
 8018fbc:	6839      	ldr	r1, [r7, #0]
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	1acb      	subs	r3, r1, r3
 8018fc2:	3301      	adds	r3, #1
 8018fc4:	fb92 f1f3 	sdiv	r1, r2, r3
 8018fc8:	fb01 f303 	mul.w	r3, r1, r3
 8018fcc:	1ad2      	subs	r2, r2, r3
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	4413      	add	r3, r2
}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3708      	adds	r7, #8
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}

08018fda <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018fda:	b480      	push	{r7}
 8018fdc:	b085      	sub	sp, #20
 8018fde:	af00      	add	r7, sp, #0
 8018fe0:	60f8      	str	r0, [r7, #12]
 8018fe2:	60b9      	str	r1, [r7, #8]
 8018fe4:	4613      	mov	r3, r2
 8018fe6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018fe8:	e007      	b.n	8018ffa <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018fea:	68ba      	ldr	r2, [r7, #8]
 8018fec:	1c53      	adds	r3, r2, #1
 8018fee:	60bb      	str	r3, [r7, #8]
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	1c59      	adds	r1, r3, #1
 8018ff4:	60f9      	str	r1, [r7, #12]
 8018ff6:	7812      	ldrb	r2, [r2, #0]
 8018ff8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ffa:	88fb      	ldrh	r3, [r7, #6]
 8018ffc:	1e5a      	subs	r2, r3, #1
 8018ffe:	80fa      	strh	r2, [r7, #6]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d1f2      	bne.n	8018fea <memcpy1+0x10>
    }
}
 8019004:	bf00      	nop
 8019006:	bf00      	nop
 8019008:	3714      	adds	r7, #20
 801900a:	46bd      	mov	sp, r7
 801900c:	bc80      	pop	{r7}
 801900e:	4770      	bx	lr

08019010 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019010:	b480      	push	{r7}
 8019012:	b085      	sub	sp, #20
 8019014:	af00      	add	r7, sp, #0
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	4613      	mov	r3, r2
 801901c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801901e:	88fb      	ldrh	r3, [r7, #6]
 8019020:	3b01      	subs	r3, #1
 8019022:	68fa      	ldr	r2, [r7, #12]
 8019024:	4413      	add	r3, r2
 8019026:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019028:	e007      	b.n	801903a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801902a:	68ba      	ldr	r2, [r7, #8]
 801902c:	1c53      	adds	r3, r2, #1
 801902e:	60bb      	str	r3, [r7, #8]
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	1e59      	subs	r1, r3, #1
 8019034:	60f9      	str	r1, [r7, #12]
 8019036:	7812      	ldrb	r2, [r2, #0]
 8019038:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801903a:	88fb      	ldrh	r3, [r7, #6]
 801903c:	1e5a      	subs	r2, r3, #1
 801903e:	80fa      	strh	r2, [r7, #6]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d1f2      	bne.n	801902a <memcpyr+0x1a>
    }
}
 8019044:	bf00      	nop
 8019046:	bf00      	nop
 8019048:	3714      	adds	r7, #20
 801904a:	46bd      	mov	sp, r7
 801904c:	bc80      	pop	{r7}
 801904e:	4770      	bx	lr

08019050 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019050:	b480      	push	{r7}
 8019052:	b083      	sub	sp, #12
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	460b      	mov	r3, r1
 801905a:	70fb      	strb	r3, [r7, #3]
 801905c:	4613      	mov	r3, r2
 801905e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019060:	e004      	b.n	801906c <memset1+0x1c>
    {
        *dst++ = value;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	1c5a      	adds	r2, r3, #1
 8019066:	607a      	str	r2, [r7, #4]
 8019068:	78fa      	ldrb	r2, [r7, #3]
 801906a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801906c:	883b      	ldrh	r3, [r7, #0]
 801906e:	1e5a      	subs	r2, r3, #1
 8019070:	803a      	strh	r2, [r7, #0]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d1f5      	bne.n	8019062 <memset1+0x12>
    }
}
 8019076:	bf00      	nop
 8019078:	bf00      	nop
 801907a:	370c      	adds	r7, #12
 801907c:	46bd      	mov	sp, r7
 801907e:	bc80      	pop	{r7}
 8019080:	4770      	bx	lr
	...

08019084 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019084:	b480      	push	{r7}
 8019086:	b085      	sub	sp, #20
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
 801908c:	460b      	mov	r3, r1
 801908e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019094:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d101      	bne.n	80190a0 <Crc32+0x1c>
    {
        return 0;
 801909c:	2300      	movs	r3, #0
 801909e:	e026      	b.n	80190ee <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80190a0:	2300      	movs	r3, #0
 80190a2:	817b      	strh	r3, [r7, #10]
 80190a4:	e01d      	b.n	80190e2 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80190a6:	897b      	ldrh	r3, [r7, #10]
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	4413      	add	r3, r2
 80190ac:	781b      	ldrb	r3, [r3, #0]
 80190ae:	461a      	mov	r2, r3
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	4053      	eors	r3, r2
 80190b4:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80190b6:	2300      	movs	r3, #0
 80190b8:	813b      	strh	r3, [r7, #8]
 80190ba:	e00c      	b.n	80190d6 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	085a      	lsrs	r2, r3, #1
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	f003 0301 	and.w	r3, r3, #1
 80190c6:	425b      	negs	r3, r3
 80190c8:	490b      	ldr	r1, [pc, #44]	; (80190f8 <Crc32+0x74>)
 80190ca:	400b      	ands	r3, r1
 80190cc:	4053      	eors	r3, r2
 80190ce:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80190d0:	893b      	ldrh	r3, [r7, #8]
 80190d2:	3301      	adds	r3, #1
 80190d4:	813b      	strh	r3, [r7, #8]
 80190d6:	893b      	ldrh	r3, [r7, #8]
 80190d8:	2b07      	cmp	r3, #7
 80190da:	d9ef      	bls.n	80190bc <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80190dc:	897b      	ldrh	r3, [r7, #10]
 80190de:	3301      	adds	r3, #1
 80190e0:	817b      	strh	r3, [r7, #10]
 80190e2:	897a      	ldrh	r2, [r7, #10]
 80190e4:	887b      	ldrh	r3, [r7, #2]
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d3dd      	bcc.n	80190a6 <Crc32+0x22>
        }
    }

    return ~crc;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	43db      	mvns	r3, r3
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	3714      	adds	r7, #20
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bc80      	pop	{r7}
 80190f6:	4770      	bx	lr
 80190f8:	edb88320 	.word	0xedb88320

080190fc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b084      	sub	sp, #16
 8019100:	af02      	add	r7, sp, #8
 8019102:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019104:	4a24      	ldr	r2, [pc, #144]	; (8019198 <RadioInit+0x9c>)
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801910a:	4b24      	ldr	r3, [pc, #144]	; (801919c <RadioInit+0xa0>)
 801910c:	2200      	movs	r2, #0
 801910e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019110:	4b22      	ldr	r3, [pc, #136]	; (801919c <RadioInit+0xa0>)
 8019112:	2200      	movs	r2, #0
 8019114:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019116:	4b21      	ldr	r3, [pc, #132]	; (801919c <RadioInit+0xa0>)
 8019118:	2200      	movs	r2, #0
 801911a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801911c:	4b1f      	ldr	r3, [pc, #124]	; (801919c <RadioInit+0xa0>)
 801911e:	2200      	movs	r2, #0
 8019120:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019122:	481f      	ldr	r0, [pc, #124]	; (80191a0 <RadioInit+0xa4>)
 8019124:	f001 ffc2 	bl	801b0ac <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019128:	4b1c      	ldr	r3, [pc, #112]	; (801919c <RadioInit+0xa0>)
 801912a:	2200      	movs	r2, #0
 801912c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801912e:	4b1b      	ldr	r3, [pc, #108]	; (801919c <RadioInit+0xa0>)
 8019130:	2200      	movs	r2, #0
 8019132:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019134:	f002 fa56 	bl	801b5e4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019138:	2100      	movs	r1, #0
 801913a:	2000      	movs	r0, #0
 801913c:	f002 fe22 	bl	801bd84 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019140:	2204      	movs	r2, #4
 8019142:	2100      	movs	r1, #0
 8019144:	2001      	movs	r0, #1
 8019146:	f002 fbdf 	bl	801b908 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801914a:	2300      	movs	r3, #0
 801914c:	2200      	movs	r2, #0
 801914e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019152:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019156:	f002 fb0f 	bl	801b778 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801915a:	f000 fe99 	bl	8019e90 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801915e:	2300      	movs	r3, #0
 8019160:	9300      	str	r3, [sp, #0]
 8019162:	4b10      	ldr	r3, [pc, #64]	; (80191a4 <RadioInit+0xa8>)
 8019164:	2200      	movs	r2, #0
 8019166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801916a:	480f      	ldr	r0, [pc, #60]	; (80191a8 <RadioInit+0xac>)
 801916c:	f004 f82c 	bl	801d1c8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019170:	2300      	movs	r3, #0
 8019172:	9300      	str	r3, [sp, #0]
 8019174:	4b0d      	ldr	r3, [pc, #52]	; (80191ac <RadioInit+0xb0>)
 8019176:	2200      	movs	r2, #0
 8019178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801917c:	480c      	ldr	r0, [pc, #48]	; (80191b0 <RadioInit+0xb4>)
 801917e:	f004 f823 	bl	801d1c8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019182:	4809      	ldr	r0, [pc, #36]	; (80191a8 <RadioInit+0xac>)
 8019184:	f004 f8c4 	bl	801d310 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019188:	4809      	ldr	r0, [pc, #36]	; (80191b0 <RadioInit+0xb4>)
 801918a:	f004 f8c1 	bl	801d310 <UTIL_TIMER_Stop>
}
 801918e:	bf00      	nop
 8019190:	3708      	adds	r7, #8
 8019192:	46bd      	mov	sp, r7
 8019194:	bd80      	pop	{r7, pc}
 8019196:	bf00      	nop
 8019198:	20001be4 	.word	0x20001be4
 801919c:	20001be8 	.word	0x20001be8
 80191a0:	0801a289 	.word	0x0801a289
 80191a4:	0801a211 	.word	0x0801a211
 80191a8:	20001c44 	.word	0x20001c44
 80191ac:	0801a225 	.word	0x0801a225
 80191b0:	20001c5c 	.word	0x20001c5c

080191b4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80191b8:	f001 ffc0 	bl	801b13c <SUBGRF_GetOperatingMode>
 80191bc:	4603      	mov	r3, r0
 80191be:	2b07      	cmp	r3, #7
 80191c0:	d00a      	beq.n	80191d8 <RadioGetStatus+0x24>
 80191c2:	2b07      	cmp	r3, #7
 80191c4:	dc0a      	bgt.n	80191dc <RadioGetStatus+0x28>
 80191c6:	2b04      	cmp	r3, #4
 80191c8:	d002      	beq.n	80191d0 <RadioGetStatus+0x1c>
 80191ca:	2b05      	cmp	r3, #5
 80191cc:	d002      	beq.n	80191d4 <RadioGetStatus+0x20>
 80191ce:	e005      	b.n	80191dc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80191d0:	2302      	movs	r3, #2
 80191d2:	e004      	b.n	80191de <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80191d4:	2301      	movs	r3, #1
 80191d6:	e002      	b.n	80191de <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80191d8:	2303      	movs	r3, #3
 80191da:	e000      	b.n	80191de <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80191dc:	2300      	movs	r3, #0
    }
}
 80191de:	4618      	mov	r0, r3
 80191e0:	bd80      	pop	{r7, pc}
	...

080191e4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b082      	sub	sp, #8
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	4603      	mov	r3, r0
 80191ec:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80191ee:	4a2a      	ldr	r2, [pc, #168]	; (8019298 <RadioSetModem+0xb4>)
 80191f0:	79fb      	ldrb	r3, [r7, #7]
 80191f2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80191f4:	79fb      	ldrb	r3, [r7, #7]
 80191f6:	4618      	mov	r0, r3
 80191f8:	f003 f997 	bl	801c52a <RFW_SetRadioModem>
    switch( modem )
 80191fc:	79fb      	ldrb	r3, [r7, #7]
 80191fe:	2b05      	cmp	r3, #5
 8019200:	d80e      	bhi.n	8019220 <RadioSetModem+0x3c>
 8019202:	a201      	add	r2, pc, #4	; (adr r2, 8019208 <RadioSetModem+0x24>)
 8019204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019208:	0801922f 	.word	0x0801922f
 801920c:	0801923d 	.word	0x0801923d
 8019210:	08019221 	.word	0x08019221
 8019214:	08019263 	.word	0x08019263
 8019218:	08019271 	.word	0x08019271
 801921c:	0801927f 	.word	0x0801927f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019220:	2003      	movs	r0, #3
 8019222:	f002 fb4b 	bl	801b8bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019226:	4b1c      	ldr	r3, [pc, #112]	; (8019298 <RadioSetModem+0xb4>)
 8019228:	2200      	movs	r2, #0
 801922a:	735a      	strb	r2, [r3, #13]
        break;
 801922c:	e02f      	b.n	801928e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801922e:	2000      	movs	r0, #0
 8019230:	f002 fb44 	bl	801b8bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019234:	4b18      	ldr	r3, [pc, #96]	; (8019298 <RadioSetModem+0xb4>)
 8019236:	2200      	movs	r2, #0
 8019238:	735a      	strb	r2, [r3, #13]
        break;
 801923a:	e028      	b.n	801928e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801923c:	2001      	movs	r0, #1
 801923e:	f002 fb3d 	bl	801b8bc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019242:	4b15      	ldr	r3, [pc, #84]	; (8019298 <RadioSetModem+0xb4>)
 8019244:	7b5a      	ldrb	r2, [r3, #13]
 8019246:	4b14      	ldr	r3, [pc, #80]	; (8019298 <RadioSetModem+0xb4>)
 8019248:	7b1b      	ldrb	r3, [r3, #12]
 801924a:	429a      	cmp	r2, r3
 801924c:	d01e      	beq.n	801928c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801924e:	4b12      	ldr	r3, [pc, #72]	; (8019298 <RadioSetModem+0xb4>)
 8019250:	7b1a      	ldrb	r2, [r3, #12]
 8019252:	4b11      	ldr	r3, [pc, #68]	; (8019298 <RadioSetModem+0xb4>)
 8019254:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019256:	4b10      	ldr	r3, [pc, #64]	; (8019298 <RadioSetModem+0xb4>)
 8019258:	7b5b      	ldrb	r3, [r3, #13]
 801925a:	4618      	mov	r0, r3
 801925c:	f000 ffa2 	bl	801a1a4 <RadioSetPublicNetwork>
        }
        break;
 8019260:	e014      	b.n	801928c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019262:	2002      	movs	r0, #2
 8019264:	f002 fb2a 	bl	801b8bc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019268:	4b0b      	ldr	r3, [pc, #44]	; (8019298 <RadioSetModem+0xb4>)
 801926a:	2200      	movs	r2, #0
 801926c:	735a      	strb	r2, [r3, #13]
        break;
 801926e:	e00e      	b.n	801928e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019270:	2002      	movs	r0, #2
 8019272:	f002 fb23 	bl	801b8bc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019276:	4b08      	ldr	r3, [pc, #32]	; (8019298 <RadioSetModem+0xb4>)
 8019278:	2200      	movs	r2, #0
 801927a:	735a      	strb	r2, [r3, #13]
        break;
 801927c:	e007      	b.n	801928e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801927e:	2000      	movs	r0, #0
 8019280:	f002 fb1c 	bl	801b8bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019284:	4b04      	ldr	r3, [pc, #16]	; (8019298 <RadioSetModem+0xb4>)
 8019286:	2200      	movs	r2, #0
 8019288:	735a      	strb	r2, [r3, #13]
        break;
 801928a:	e000      	b.n	801928e <RadioSetModem+0xaa>
        break;
 801928c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801928e:	bf00      	nop
 8019290:	3708      	adds	r7, #8
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}
 8019296:	bf00      	nop
 8019298:	20001be8 	.word	0x20001be8

0801929c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b082      	sub	sp, #8
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80192a4:	6878      	ldr	r0, [r7, #4]
 80192a6:	f002 fac3 	bl	801b830 <SUBGRF_SetRfFrequency>
}
 80192aa:	bf00      	nop
 80192ac:	3708      	adds	r7, #8
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}

080192b2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80192b2:	b580      	push	{r7, lr}
 80192b4:	b090      	sub	sp, #64	; 0x40
 80192b6:	af0a      	add	r7, sp, #40	; 0x28
 80192b8:	60f8      	str	r0, [r7, #12]
 80192ba:	60b9      	str	r1, [r7, #8]
 80192bc:	603b      	str	r3, [r7, #0]
 80192be:	4613      	mov	r3, r2
 80192c0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80192c2:	2301      	movs	r3, #1
 80192c4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80192c6:	2300      	movs	r3, #0
 80192c8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80192ca:	2300      	movs	r3, #0
 80192cc:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80192ce:	f000 fdf2 	bl	8019eb6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80192d2:	2000      	movs	r0, #0
 80192d4:	f7ff ff86 	bl	80191e4 <RadioSetModem>

    RadioSetChannel( freq );
 80192d8:	68f8      	ldr	r0, [r7, #12]
 80192da:	f7ff ffdf 	bl	801929c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80192de:	2301      	movs	r3, #1
 80192e0:	9309      	str	r3, [sp, #36]	; 0x24
 80192e2:	2300      	movs	r3, #0
 80192e4:	9308      	str	r3, [sp, #32]
 80192e6:	2300      	movs	r3, #0
 80192e8:	9307      	str	r3, [sp, #28]
 80192ea:	2300      	movs	r3, #0
 80192ec:	9306      	str	r3, [sp, #24]
 80192ee:	2300      	movs	r3, #0
 80192f0:	9305      	str	r3, [sp, #20]
 80192f2:	2300      	movs	r3, #0
 80192f4:	9304      	str	r3, [sp, #16]
 80192f6:	2300      	movs	r3, #0
 80192f8:	9303      	str	r3, [sp, #12]
 80192fa:	2300      	movs	r3, #0
 80192fc:	9302      	str	r3, [sp, #8]
 80192fe:	2303      	movs	r3, #3
 8019300:	9301      	str	r3, [sp, #4]
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	9300      	str	r3, [sp, #0]
 8019306:	2300      	movs	r3, #0
 8019308:	f44f 7216 	mov.w	r2, #600	; 0x258
 801930c:	68b9      	ldr	r1, [r7, #8]
 801930e:	2000      	movs	r0, #0
 8019310:	f000 f83c 	bl	801938c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019314:	2000      	movs	r0, #0
 8019316:	f000 fdd5 	bl	8019ec4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801931a:	f000 ff71 	bl	801a200 <RadioGetWakeupTime>
 801931e:	4603      	mov	r3, r0
 8019320:	4618      	mov	r0, r3
 8019322:	f7e8 ff75 	bl	8002210 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019326:	f004 f90d 	bl	801d544 <UTIL_TIMER_GetCurrentTime>
 801932a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801932c:	e00d      	b.n	801934a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801932e:	2000      	movs	r0, #0
 8019330:	f000 feb6 	bl	801a0a0 <RadioRssi>
 8019334:	4603      	mov	r3, r0
 8019336:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019338:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801933c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019340:	429a      	cmp	r2, r3
 8019342:	dd02      	ble.n	801934a <RadioIsChannelFree+0x98>
        {
            status = false;
 8019344:	2300      	movs	r3, #0
 8019346:	75fb      	strb	r3, [r7, #23]
            break;
 8019348:	e006      	b.n	8019358 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801934a:	6938      	ldr	r0, [r7, #16]
 801934c:	f004 f90c 	bl	801d568 <UTIL_TIMER_GetElapsedTime>
 8019350:	4602      	mov	r2, r0
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	4293      	cmp	r3, r2
 8019356:	d8ea      	bhi.n	801932e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019358:	f000 fdad 	bl	8019eb6 <RadioStandby>

    return status;
 801935c:	7dfb      	ldrb	r3, [r7, #23]
}
 801935e:	4618      	mov	r0, r3
 8019360:	3718      	adds	r7, #24
 8019362:	46bd      	mov	sp, r7
 8019364:	bd80      	pop	{r7, pc}

08019366 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019366:	b580      	push	{r7, lr}
 8019368:	b082      	sub	sp, #8
 801936a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801936c:	2300      	movs	r3, #0
 801936e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019370:	2300      	movs	r3, #0
 8019372:	2200      	movs	r2, #0
 8019374:	2100      	movs	r1, #0
 8019376:	2000      	movs	r0, #0
 8019378:	f002 f9fe 	bl	801b778 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801937c:	f001 ffaf 	bl	801b2de <SUBGRF_GetRandom>
 8019380:	6078      	str	r0, [r7, #4]

    return rnd;
 8019382:	687b      	ldr	r3, [r7, #4]
}
 8019384:	4618      	mov	r0, r3
 8019386:	3708      	adds	r7, #8
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}

0801938c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b08a      	sub	sp, #40	; 0x28
 8019390:	af00      	add	r7, sp, #0
 8019392:	60b9      	str	r1, [r7, #8]
 8019394:	607a      	str	r2, [r7, #4]
 8019396:	461a      	mov	r2, r3
 8019398:	4603      	mov	r3, r0
 801939a:	73fb      	strb	r3, [r7, #15]
 801939c:	4613      	mov	r3, r2
 801939e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80193a0:	4ab9      	ldr	r2, [pc, #740]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80193a2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80193a6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80193a8:	f003 f87d 	bl	801c4a6 <RFW_DeInit>
    if( rxContinuous == true )
 80193ac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d001      	beq.n	80193b8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80193b4:	2300      	movs	r3, #0
 80193b6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80193b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d004      	beq.n	80193ca <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80193c0:	4ab2      	ldr	r2, [pc, #712]	; (801968c <RadioSetRxConfig+0x300>)
 80193c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80193c6:	7013      	strb	r3, [r2, #0]
 80193c8:	e002      	b.n	80193d0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80193ca:	4bb0      	ldr	r3, [pc, #704]	; (801968c <RadioSetRxConfig+0x300>)
 80193cc:	22ff      	movs	r2, #255	; 0xff
 80193ce:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80193d0:	7bfb      	ldrb	r3, [r7, #15]
 80193d2:	2b05      	cmp	r3, #5
 80193d4:	d009      	beq.n	80193ea <RadioSetRxConfig+0x5e>
 80193d6:	2b05      	cmp	r3, #5
 80193d8:	f300 81d7 	bgt.w	801978a <RadioSetRxConfig+0x3fe>
 80193dc:	2b00      	cmp	r3, #0
 80193de:	f000 80bf 	beq.w	8019560 <RadioSetRxConfig+0x1d4>
 80193e2:	2b01      	cmp	r3, #1
 80193e4:	f000 8124 	beq.w	8019630 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80193e8:	e1cf      	b.n	801978a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80193ea:	2001      	movs	r0, #1
 80193ec:	f002 f8bc 	bl	801b568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80193f0:	4ba5      	ldr	r3, [pc, #660]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80193f2:	2200      	movs	r2, #0
 80193f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80193f8:	4aa3      	ldr	r2, [pc, #652]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80193fe:	4ba2      	ldr	r3, [pc, #648]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019400:	2209      	movs	r2, #9
 8019402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019406:	4ba0      	ldr	r3, [pc, #640]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019408:	f44f 7248 	mov.w	r2, #800	; 0x320
 801940c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801940e:	68b8      	ldr	r0, [r7, #8]
 8019410:	f002 ff7c 	bl	801c30c <SUBGRF_GetFskBandwidthRegValue>
 8019414:	4603      	mov	r3, r0
 8019416:	461a      	mov	r2, r3
 8019418:	4b9b      	ldr	r3, [pc, #620]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801941a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801941e:	4b9a      	ldr	r3, [pc, #616]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019420:	2200      	movs	r2, #0
 8019422:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019424:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019426:	00db      	lsls	r3, r3, #3
 8019428:	b29a      	uxth	r2, r3
 801942a:	4b97      	ldr	r3, [pc, #604]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801942c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801942e:	4b96      	ldr	r3, [pc, #600]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019430:	2200      	movs	r2, #0
 8019432:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019434:	4b94      	ldr	r3, [pc, #592]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019436:	2210      	movs	r2, #16
 8019438:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801943a:	4b93      	ldr	r3, [pc, #588]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801943c:	2200      	movs	r2, #0
 801943e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019440:	4b91      	ldr	r3, [pc, #580]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019442:	2200      	movs	r2, #0
 8019444:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019446:	4b91      	ldr	r3, [pc, #580]	; (801968c <RadioSetRxConfig+0x300>)
 8019448:	781a      	ldrb	r2, [r3, #0]
 801944a:	4b8f      	ldr	r3, [pc, #572]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801944c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801944e:	4b8e      	ldr	r3, [pc, #568]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019450:	2201      	movs	r2, #1
 8019452:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019454:	4b8c      	ldr	r3, [pc, #560]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019456:	2200      	movs	r2, #0
 8019458:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801945a:	2005      	movs	r0, #5
 801945c:	f7ff fec2 	bl	80191e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019460:	488b      	ldr	r0, [pc, #556]	; (8019690 <RadioSetRxConfig+0x304>)
 8019462:	f002 fb1f 	bl	801baa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019466:	488b      	ldr	r0, [pc, #556]	; (8019694 <RadioSetRxConfig+0x308>)
 8019468:	f002 fbee 	bl	801bc48 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801946c:	4a8a      	ldr	r2, [pc, #552]	; (8019698 <RadioSetRxConfig+0x30c>)
 801946e:	f107 031c 	add.w	r3, r7, #28
 8019472:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019476:	e883 0003 	stmia.w	r3, {r0, r1}
 801947a:	f107 031c 	add.w	r3, r7, #28
 801947e:	4618      	mov	r0, r3
 8019480:	f001 feab 	bl	801b1da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019484:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019488:	f001 fef6 	bl	801b278 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801948c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019490:	f000 fe25 	bl	801a0de <RadioRead>
 8019494:	4603      	mov	r3, r0
 8019496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801949a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801949e:	f023 0310 	bic.w	r3, r3, #16
 80194a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80194a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194aa:	4619      	mov	r1, r3
 80194ac:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80194b0:	f000 fe03 	bl	801a0ba <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80194b4:	2104      	movs	r1, #4
 80194b6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80194ba:	f000 fdfe 	bl	801a0ba <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80194be:	f640 009b 	movw	r0, #2203	; 0x89b
 80194c2:	f000 fe0c 	bl	801a0de <RadioRead>
 80194c6:	4603      	mov	r3, r0
 80194c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80194cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194d0:	f023 031c 	bic.w	r3, r3, #28
 80194d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80194d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194dc:	f043 0308 	orr.w	r3, r3, #8
 80194e0:	b2db      	uxtb	r3, r3
 80194e2:	4619      	mov	r1, r3
 80194e4:	f640 009b 	movw	r0, #2203	; 0x89b
 80194e8:	f000 fde7 	bl	801a0ba <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80194ec:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80194f0:	f000 fdf5 	bl	801a0de <RadioRead>
 80194f4:	4603      	mov	r3, r0
 80194f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80194fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194fe:	f023 0318 	bic.w	r3, r3, #24
 8019502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801950a:	f043 0318 	orr.w	r3, r3, #24
 801950e:	b2db      	uxtb	r3, r3
 8019510:	4619      	mov	r1, r3
 8019512:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019516:	f000 fdd0 	bl	801a0ba <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801951a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801951e:	f000 fdde 	bl	801a0de <RadioRead>
 8019522:	4603      	mov	r3, r0
 8019524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801952c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019538:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801953c:	b2db      	uxtb	r3, r3
 801953e:	4619      	mov	r1, r3
 8019540:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019544:	f000 fdb9 	bl	801a0ba <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019548:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801954a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801954e:	fb02 f303 	mul.w	r3, r2, r3
 8019552:	461a      	mov	r2, r3
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	fbb2 f3f3 	udiv	r3, r2, r3
 801955a:	4a4b      	ldr	r2, [pc, #300]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801955c:	6093      	str	r3, [r2, #8]
            break;
 801955e:	e115      	b.n	801978c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019560:	2000      	movs	r0, #0
 8019562:	f002 f801 	bl	801b568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019566:	4b48      	ldr	r3, [pc, #288]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019568:	2200      	movs	r2, #0
 801956a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801956e:	4a46      	ldr	r2, [pc, #280]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019574:	4b44      	ldr	r3, [pc, #272]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019576:	220b      	movs	r2, #11
 8019578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801957c:	68b8      	ldr	r0, [r7, #8]
 801957e:	f002 fec5 	bl	801c30c <SUBGRF_GetFskBandwidthRegValue>
 8019582:	4603      	mov	r3, r0
 8019584:	461a      	mov	r2, r3
 8019586:	4b40      	ldr	r3, [pc, #256]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801958c:	4b3e      	ldr	r3, [pc, #248]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801958e:	2200      	movs	r2, #0
 8019590:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019592:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019594:	00db      	lsls	r3, r3, #3
 8019596:	b29a      	uxth	r2, r3
 8019598:	4b3b      	ldr	r3, [pc, #236]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801959a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801959c:	4b3a      	ldr	r3, [pc, #232]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801959e:	2204      	movs	r2, #4
 80195a0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80195a2:	4b39      	ldr	r3, [pc, #228]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80195a4:	2218      	movs	r2, #24
 80195a6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80195a8:	4b37      	ldr	r3, [pc, #220]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80195aa:	2200      	movs	r2, #0
 80195ac:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80195ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80195b2:	f083 0301 	eor.w	r3, r3, #1
 80195b6:	b2db      	uxtb	r3, r3
 80195b8:	461a      	mov	r2, r3
 80195ba:	4b33      	ldr	r3, [pc, #204]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80195bc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80195be:	4b33      	ldr	r3, [pc, #204]	; (801968c <RadioSetRxConfig+0x300>)
 80195c0:	781a      	ldrb	r2, [r3, #0]
 80195c2:	4b31      	ldr	r3, [pc, #196]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80195c4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80195c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d003      	beq.n	80195d6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80195ce:	4b2e      	ldr	r3, [pc, #184]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80195d0:	22f2      	movs	r2, #242	; 0xf2
 80195d2:	75da      	strb	r2, [r3, #23]
 80195d4:	e002      	b.n	80195dc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80195d6:	4b2c      	ldr	r3, [pc, #176]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80195d8:	2201      	movs	r2, #1
 80195da:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80195dc:	4b2a      	ldr	r3, [pc, #168]	; (8019688 <RadioSetRxConfig+0x2fc>)
 80195de:	2201      	movs	r2, #1
 80195e0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80195e2:	f000 fc68 	bl	8019eb6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80195e6:	2000      	movs	r0, #0
 80195e8:	f7ff fdfc 	bl	80191e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195ec:	4828      	ldr	r0, [pc, #160]	; (8019690 <RadioSetRxConfig+0x304>)
 80195ee:	f002 fa59 	bl	801baa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195f2:	4828      	ldr	r0, [pc, #160]	; (8019694 <RadioSetRxConfig+0x308>)
 80195f4:	f002 fb28 	bl	801bc48 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80195f8:	4a28      	ldr	r2, [pc, #160]	; (801969c <RadioSetRxConfig+0x310>)
 80195fa:	f107 0314 	add.w	r3, r7, #20
 80195fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019602:	e883 0003 	stmia.w	r3, {r0, r1}
 8019606:	f107 0314 	add.w	r3, r7, #20
 801960a:	4618      	mov	r0, r3
 801960c:	f001 fde5 	bl	801b1da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019610:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019614:	f001 fe30 	bl	801b278 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019618:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801961a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801961e:	fb02 f303 	mul.w	r3, r2, r3
 8019622:	461a      	mov	r2, r3
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	fbb2 f3f3 	udiv	r3, r2, r3
 801962a:	4a17      	ldr	r2, [pc, #92]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801962c:	6093      	str	r3, [r2, #8]
            break;
 801962e:	e0ad      	b.n	801978c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019630:	2000      	movs	r0, #0
 8019632:	f001 ff99 	bl	801b568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019636:	4b14      	ldr	r3, [pc, #80]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019638:	2201      	movs	r2, #1
 801963a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	b2da      	uxtb	r2, r3
 8019642:	4b11      	ldr	r3, [pc, #68]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019648:	4a15      	ldr	r2, [pc, #84]	; (80196a0 <RadioSetRxConfig+0x314>)
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	4413      	add	r3, r2
 801964e:	781a      	ldrb	r2, [r3, #0]
 8019650:	4b0d      	ldr	r3, [pc, #52]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019656:	4a0c      	ldr	r2, [pc, #48]	; (8019688 <RadioSetRxConfig+0x2fc>)
 8019658:	7bbb      	ldrb	r3, [r7, #14]
 801965a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801965e:	68bb      	ldr	r3, [r7, #8]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d105      	bne.n	8019670 <RadioSetRxConfig+0x2e4>
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2b0b      	cmp	r3, #11
 8019668:	d008      	beq.n	801967c <RadioSetRxConfig+0x2f0>
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	2b0c      	cmp	r3, #12
 801966e:	d005      	beq.n	801967c <RadioSetRxConfig+0x2f0>
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	2b01      	cmp	r3, #1
 8019674:	d116      	bne.n	80196a4 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	2b0c      	cmp	r3, #12
 801967a:	d113      	bne.n	80196a4 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801967c:	4b02      	ldr	r3, [pc, #8]	; (8019688 <RadioSetRxConfig+0x2fc>)
 801967e:	2201      	movs	r2, #1
 8019680:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019684:	e012      	b.n	80196ac <RadioSetRxConfig+0x320>
 8019686:	bf00      	nop
 8019688:	20001be8 	.word	0x20001be8
 801968c:	20000134 	.word	0x20000134
 8019690:	20001c20 	.word	0x20001c20
 8019694:	20001bf6 	.word	0x20001bf6
 8019698:	0801e544 	.word	0x0801e544
 801969c:	0801e54c 	.word	0x0801e54c
 80196a0:	0801ec38 	.word	0x0801ec38
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80196a4:	4b3b      	ldr	r3, [pc, #236]	; (8019794 <RadioSetRxConfig+0x408>)
 80196a6:	2200      	movs	r2, #0
 80196a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80196ac:	4b39      	ldr	r3, [pc, #228]	; (8019794 <RadioSetRxConfig+0x408>)
 80196ae:	2201      	movs	r2, #1
 80196b0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80196b2:	4b38      	ldr	r3, [pc, #224]	; (8019794 <RadioSetRxConfig+0x408>)
 80196b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80196b8:	2b05      	cmp	r3, #5
 80196ba:	d004      	beq.n	80196c6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80196bc:	4b35      	ldr	r3, [pc, #212]	; (8019794 <RadioSetRxConfig+0x408>)
 80196be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80196c2:	2b06      	cmp	r3, #6
 80196c4:	d10a      	bne.n	80196dc <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80196c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80196c8:	2b0b      	cmp	r3, #11
 80196ca:	d803      	bhi.n	80196d4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80196cc:	4b31      	ldr	r3, [pc, #196]	; (8019794 <RadioSetRxConfig+0x408>)
 80196ce:	220c      	movs	r2, #12
 80196d0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80196d2:	e006      	b.n	80196e2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80196d4:	4a2f      	ldr	r2, [pc, #188]	; (8019794 <RadioSetRxConfig+0x408>)
 80196d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80196d8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80196da:	e002      	b.n	80196e2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80196dc:	4a2d      	ldr	r2, [pc, #180]	; (8019794 <RadioSetRxConfig+0x408>)
 80196de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80196e0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80196e2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80196e6:	4b2b      	ldr	r3, [pc, #172]	; (8019794 <RadioSetRxConfig+0x408>)
 80196e8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80196ea:	4b2b      	ldr	r3, [pc, #172]	; (8019798 <RadioSetRxConfig+0x40c>)
 80196ec:	781a      	ldrb	r2, [r3, #0]
 80196ee:	4b29      	ldr	r3, [pc, #164]	; (8019794 <RadioSetRxConfig+0x408>)
 80196f0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80196f2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80196f6:	4b27      	ldr	r3, [pc, #156]	; (8019794 <RadioSetRxConfig+0x408>)
 80196f8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80196fc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019700:	4b24      	ldr	r3, [pc, #144]	; (8019794 <RadioSetRxConfig+0x408>)
 8019702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019706:	f000 fbd6 	bl	8019eb6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801970a:	2001      	movs	r0, #1
 801970c:	f7ff fd6a 	bl	80191e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019710:	4822      	ldr	r0, [pc, #136]	; (801979c <RadioSetRxConfig+0x410>)
 8019712:	f002 f9c7 	bl	801baa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019716:	4822      	ldr	r0, [pc, #136]	; (80197a0 <RadioSetRxConfig+0x414>)
 8019718:	f002 fa96 	bl	801bc48 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801971c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801971e:	b2db      	uxtb	r3, r3
 8019720:	4618      	mov	r0, r3
 8019722:	f001 ff30 	bl	801b586 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019726:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801972a:	f002 fbe9 	bl	801bf00 <SUBGRF_ReadRegister>
 801972e:	4603      	mov	r3, r0
 8019730:	f003 0301 	and.w	r3, r3, #1
 8019734:	b2db      	uxtb	r3, r3
 8019736:	4619      	mov	r1, r3
 8019738:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801973c:	f002 fbcc 	bl	801bed8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019740:	4b14      	ldr	r3, [pc, #80]	; (8019794 <RadioSetRxConfig+0x408>)
 8019742:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019746:	2b01      	cmp	r3, #1
 8019748:	d10d      	bne.n	8019766 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801974a:	f240 7036 	movw	r0, #1846	; 0x736
 801974e:	f002 fbd7 	bl	801bf00 <SUBGRF_ReadRegister>
 8019752:	4603      	mov	r3, r0
 8019754:	f023 0304 	bic.w	r3, r3, #4
 8019758:	b2db      	uxtb	r3, r3
 801975a:	4619      	mov	r1, r3
 801975c:	f240 7036 	movw	r0, #1846	; 0x736
 8019760:	f002 fbba 	bl	801bed8 <SUBGRF_WriteRegister>
 8019764:	e00c      	b.n	8019780 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019766:	f240 7036 	movw	r0, #1846	; 0x736
 801976a:	f002 fbc9 	bl	801bf00 <SUBGRF_ReadRegister>
 801976e:	4603      	mov	r3, r0
 8019770:	f043 0304 	orr.w	r3, r3, #4
 8019774:	b2db      	uxtb	r3, r3
 8019776:	4619      	mov	r1, r3
 8019778:	f240 7036 	movw	r0, #1846	; 0x736
 801977c:	f002 fbac 	bl	801bed8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8019780:	4b04      	ldr	r3, [pc, #16]	; (8019794 <RadioSetRxConfig+0x408>)
 8019782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019786:	609a      	str	r2, [r3, #8]
            break;
 8019788:	e000      	b.n	801978c <RadioSetRxConfig+0x400>
            break;
 801978a:	bf00      	nop
    }
}
 801978c:	bf00      	nop
 801978e:	3728      	adds	r7, #40	; 0x28
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}
 8019794:	20001be8 	.word	0x20001be8
 8019798:	20000134 	.word	0x20000134
 801979c:	20001c20 	.word	0x20001c20
 80197a0:	20001bf6 	.word	0x20001bf6

080197a4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b086      	sub	sp, #24
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	60ba      	str	r2, [r7, #8]
 80197ac:	607b      	str	r3, [r7, #4]
 80197ae:	4603      	mov	r3, r0
 80197b0:	73fb      	strb	r3, [r7, #15]
 80197b2:	460b      	mov	r3, r1
 80197b4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80197b6:	f002 fe76 	bl	801c4a6 <RFW_DeInit>
    switch( modem )
 80197ba:	7bfb      	ldrb	r3, [r7, #15]
 80197bc:	2b04      	cmp	r3, #4
 80197be:	f000 80c7 	beq.w	8019950 <RadioSetTxConfig+0x1ac>
 80197c2:	2b04      	cmp	r3, #4
 80197c4:	f300 80d6 	bgt.w	8019974 <RadioSetTxConfig+0x1d0>
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d002      	beq.n	80197d2 <RadioSetTxConfig+0x2e>
 80197cc:	2b01      	cmp	r3, #1
 80197ce:	d059      	beq.n	8019884 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80197d0:	e0d0      	b.n	8019974 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80197d2:	4b77      	ldr	r3, [pc, #476]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80197d4:	2200      	movs	r2, #0
 80197d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80197da:	4a75      	ldr	r2, [pc, #468]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80197dc:	6a3b      	ldr	r3, [r7, #32]
 80197de:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80197e0:	4b73      	ldr	r3, [pc, #460]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80197e2:	220b      	movs	r2, #11
 80197e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80197e8:	6878      	ldr	r0, [r7, #4]
 80197ea:	f002 fd8f 	bl	801c30c <SUBGRF_GetFskBandwidthRegValue>
 80197ee:	4603      	mov	r3, r0
 80197f0:	461a      	mov	r2, r3
 80197f2:	4b6f      	ldr	r3, [pc, #444]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80197f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80197f8:	4a6d      	ldr	r2, [pc, #436]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80197fa:	68bb      	ldr	r3, [r7, #8]
 80197fc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80197fe:	4b6c      	ldr	r3, [pc, #432]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019800:	2200      	movs	r2, #0
 8019802:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019804:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019806:	00db      	lsls	r3, r3, #3
 8019808:	b29a      	uxth	r2, r3
 801980a:	4b69      	ldr	r3, [pc, #420]	; (80199b0 <RadioSetTxConfig+0x20c>)
 801980c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801980e:	4b68      	ldr	r3, [pc, #416]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019810:	2204      	movs	r2, #4
 8019812:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019814:	4b66      	ldr	r3, [pc, #408]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019816:	2218      	movs	r2, #24
 8019818:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801981a:	4b65      	ldr	r3, [pc, #404]	; (80199b0 <RadioSetTxConfig+0x20c>)
 801981c:	2200      	movs	r2, #0
 801981e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019820:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019824:	f083 0301 	eor.w	r3, r3, #1
 8019828:	b2db      	uxtb	r3, r3
 801982a:	461a      	mov	r2, r3
 801982c:	4b60      	ldr	r3, [pc, #384]	; (80199b0 <RadioSetTxConfig+0x20c>)
 801982e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019830:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019834:	2b00      	cmp	r3, #0
 8019836:	d003      	beq.n	8019840 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019838:	4b5d      	ldr	r3, [pc, #372]	; (80199b0 <RadioSetTxConfig+0x20c>)
 801983a:	22f2      	movs	r2, #242	; 0xf2
 801983c:	75da      	strb	r2, [r3, #23]
 801983e:	e002      	b.n	8019846 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019840:	4b5b      	ldr	r3, [pc, #364]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019842:	2201      	movs	r2, #1
 8019844:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019846:	4b5a      	ldr	r3, [pc, #360]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019848:	2201      	movs	r2, #1
 801984a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801984c:	f000 fb33 	bl	8019eb6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8019850:	2000      	movs	r0, #0
 8019852:	f7ff fcc7 	bl	80191e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019856:	4857      	ldr	r0, [pc, #348]	; (80199b4 <RadioSetTxConfig+0x210>)
 8019858:	f002 f924 	bl	801baa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801985c:	4856      	ldr	r0, [pc, #344]	; (80199b8 <RadioSetTxConfig+0x214>)
 801985e:	f002 f9f3 	bl	801bc48 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019862:	4a56      	ldr	r2, [pc, #344]	; (80199bc <RadioSetTxConfig+0x218>)
 8019864:	f107 0310 	add.w	r3, r7, #16
 8019868:	e892 0003 	ldmia.w	r2, {r0, r1}
 801986c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019870:	f107 0310 	add.w	r3, r7, #16
 8019874:	4618      	mov	r0, r3
 8019876:	f001 fcb0 	bl	801b1da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801987a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801987e:	f001 fcfb 	bl	801b278 <SUBGRF_SetWhiteningSeed>
            break;
 8019882:	e078      	b.n	8019976 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019884:	4b4a      	ldr	r3, [pc, #296]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019886:	2201      	movs	r2, #1
 8019888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801988c:	6a3b      	ldr	r3, [r7, #32]
 801988e:	b2da      	uxtb	r2, r3
 8019890:	4b47      	ldr	r3, [pc, #284]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019896:	4a4a      	ldr	r2, [pc, #296]	; (80199c0 <RadioSetTxConfig+0x21c>)
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	4413      	add	r3, r2
 801989c:	781a      	ldrb	r2, [r3, #0]
 801989e:	4b44      	ldr	r3, [pc, #272]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80198a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80198a4:	4a42      	ldr	r2, [pc, #264]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80198a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80198aa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d105      	bne.n	80198c0 <RadioSetTxConfig+0x11c>
 80198b4:	6a3b      	ldr	r3, [r7, #32]
 80198b6:	2b0b      	cmp	r3, #11
 80198b8:	d008      	beq.n	80198cc <RadioSetTxConfig+0x128>
 80198ba:	6a3b      	ldr	r3, [r7, #32]
 80198bc:	2b0c      	cmp	r3, #12
 80198be:	d005      	beq.n	80198cc <RadioSetTxConfig+0x128>
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	2b01      	cmp	r3, #1
 80198c4:	d107      	bne.n	80198d6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80198c6:	6a3b      	ldr	r3, [r7, #32]
 80198c8:	2b0c      	cmp	r3, #12
 80198ca:	d104      	bne.n	80198d6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80198cc:	4b38      	ldr	r3, [pc, #224]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80198ce:	2201      	movs	r2, #1
 80198d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80198d4:	e003      	b.n	80198de <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80198d6:	4b36      	ldr	r3, [pc, #216]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80198d8:	2200      	movs	r2, #0
 80198da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80198de:	4b34      	ldr	r3, [pc, #208]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80198e0:	2201      	movs	r2, #1
 80198e2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80198e4:	4b32      	ldr	r3, [pc, #200]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80198e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80198ea:	2b05      	cmp	r3, #5
 80198ec:	d004      	beq.n	80198f8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80198ee:	4b30      	ldr	r3, [pc, #192]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80198f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80198f4:	2b06      	cmp	r3, #6
 80198f6:	d10a      	bne.n	801990e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80198f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80198fa:	2b0b      	cmp	r3, #11
 80198fc:	d803      	bhi.n	8019906 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80198fe:	4b2c      	ldr	r3, [pc, #176]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019900:	220c      	movs	r2, #12
 8019902:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019904:	e006      	b.n	8019914 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019906:	4a2a      	ldr	r2, [pc, #168]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801990a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801990c:	e002      	b.n	8019914 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801990e:	4a28      	ldr	r2, [pc, #160]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019912:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019914:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019918:	4b25      	ldr	r3, [pc, #148]	; (80199b0 <RadioSetTxConfig+0x20c>)
 801991a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801991c:	4b29      	ldr	r3, [pc, #164]	; (80199c4 <RadioSetTxConfig+0x220>)
 801991e:	781a      	ldrb	r2, [r3, #0]
 8019920:	4b23      	ldr	r3, [pc, #140]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019922:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019924:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019928:	4b21      	ldr	r3, [pc, #132]	; (80199b0 <RadioSetTxConfig+0x20c>)
 801992a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801992e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019932:	4b1f      	ldr	r3, [pc, #124]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019938:	f000 fabd 	bl	8019eb6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801993c:	2001      	movs	r0, #1
 801993e:	f7ff fc51 	bl	80191e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019942:	481c      	ldr	r0, [pc, #112]	; (80199b4 <RadioSetTxConfig+0x210>)
 8019944:	f002 f8ae 	bl	801baa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019948:	481b      	ldr	r0, [pc, #108]	; (80199b8 <RadioSetTxConfig+0x214>)
 801994a:	f002 f97d 	bl	801bc48 <SUBGRF_SetPacketParams>
            break;
 801994e:	e012      	b.n	8019976 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8019950:	2004      	movs	r0, #4
 8019952:	f7ff fc47 	bl	80191e4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019956:	4b16      	ldr	r3, [pc, #88]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019958:	2202      	movs	r2, #2
 801995a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801995e:	4a14      	ldr	r2, [pc, #80]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019960:	6a3b      	ldr	r3, [r7, #32]
 8019962:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019964:	4b12      	ldr	r3, [pc, #72]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019966:	2216      	movs	r2, #22
 8019968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801996c:	4811      	ldr	r0, [pc, #68]	; (80199b4 <RadioSetTxConfig+0x210>)
 801996e:	f002 f899 	bl	801baa4 <SUBGRF_SetModulationParams>
            break;
 8019972:	e000      	b.n	8019976 <RadioSetTxConfig+0x1d2>
            break;
 8019974:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801997a:	4618      	mov	r0, r3
 801997c:	f002 fbc8 	bl	801c110 <SUBGRF_SetRfTxPower>
 8019980:	4603      	mov	r3, r0
 8019982:	461a      	mov	r2, r3
 8019984:	4b0a      	ldr	r3, [pc, #40]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019986:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801998a:	210e      	movs	r1, #14
 801998c:	f640 101f 	movw	r0, #2335	; 0x91f
 8019990:	f002 faa2 	bl	801bed8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019994:	4b06      	ldr	r3, [pc, #24]	; (80199b0 <RadioSetTxConfig+0x20c>)
 8019996:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801999a:	4618      	mov	r0, r3
 801999c:	f002 fd97 	bl	801c4ce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80199a0:	4a03      	ldr	r2, [pc, #12]	; (80199b0 <RadioSetTxConfig+0x20c>)
 80199a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199a4:	6053      	str	r3, [r2, #4]
}
 80199a6:	bf00      	nop
 80199a8:	3718      	adds	r7, #24
 80199aa:	46bd      	mov	sp, r7
 80199ac:	bd80      	pop	{r7, pc}
 80199ae:	bf00      	nop
 80199b0:	20001be8 	.word	0x20001be8
 80199b4:	20001c20 	.word	0x20001c20
 80199b8:	20001bf6 	.word	0x20001bf6
 80199bc:	0801e54c 	.word	0x0801e54c
 80199c0:	0801ec38 	.word	0x0801ec38
 80199c4:	20000134 	.word	0x20000134

080199c8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80199c8:	b480      	push	{r7}
 80199ca:	b083      	sub	sp, #12
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
    return true;
 80199d0:	2301      	movs	r3, #1
}
 80199d2:	4618      	mov	r0, r3
 80199d4:	370c      	adds	r7, #12
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bc80      	pop	{r7}
 80199da:	4770      	bx	lr

080199dc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80199dc:	b480      	push	{r7}
 80199de:	b085      	sub	sp, #20
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	4603      	mov	r3, r0
 80199e4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80199e6:	2300      	movs	r3, #0
 80199e8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80199ea:	79fb      	ldrb	r3, [r7, #7]
 80199ec:	2b0a      	cmp	r3, #10
 80199ee:	d83e      	bhi.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
 80199f0:	a201      	add	r2, pc, #4	; (adr r2, 80199f8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80199f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199f6:	bf00      	nop
 80199f8:	08019a25 	.word	0x08019a25
 80199fc:	08019a35 	.word	0x08019a35
 8019a00:	08019a45 	.word	0x08019a45
 8019a04:	08019a55 	.word	0x08019a55
 8019a08:	08019a5d 	.word	0x08019a5d
 8019a0c:	08019a63 	.word	0x08019a63
 8019a10:	08019a69 	.word	0x08019a69
 8019a14:	08019a6f 	.word	0x08019a6f
 8019a18:	08019a2d 	.word	0x08019a2d
 8019a1c:	08019a3d 	.word	0x08019a3d
 8019a20:	08019a4d 	.word	0x08019a4d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019a24:	f641 6384 	movw	r3, #7812	; 0x1e84
 8019a28:	60fb      	str	r3, [r7, #12]
        break;
 8019a2a:	e020      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019a2c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019a30:	60fb      	str	r3, [r7, #12]
        break;
 8019a32:	e01c      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019a34:	f643 5309 	movw	r3, #15625	; 0x3d09
 8019a38:	60fb      	str	r3, [r7, #12]
        break;
 8019a3a:	e018      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019a3c:	f245 1361 	movw	r3, #20833	; 0x5161
 8019a40:	60fb      	str	r3, [r7, #12]
        break;
 8019a42:	e014      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019a44:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019a48:	60fb      	str	r3, [r7, #12]
        break;
 8019a4a:	e010      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019a4c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8019a50:	60fb      	str	r3, [r7, #12]
        break;
 8019a52:	e00c      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019a54:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019a58:	60fb      	str	r3, [r7, #12]
        break;
 8019a5a:	e008      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019a5c:	4b07      	ldr	r3, [pc, #28]	; (8019a7c <RadioGetLoRaBandwidthInHz+0xa0>)
 8019a5e:	60fb      	str	r3, [r7, #12]
        break;
 8019a60:	e005      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019a62:	4b07      	ldr	r3, [pc, #28]	; (8019a80 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019a64:	60fb      	str	r3, [r7, #12]
        break;
 8019a66:	e002      	b.n	8019a6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019a68:	4b06      	ldr	r3, [pc, #24]	; (8019a84 <RadioGetLoRaBandwidthInHz+0xa8>)
 8019a6a:	60fb      	str	r3, [r7, #12]
        break;
 8019a6c:	bf00      	nop
    }

    return bandwidthInHz;
 8019a6e:	68fb      	ldr	r3, [r7, #12]
}
 8019a70:	4618      	mov	r0, r3
 8019a72:	3714      	adds	r7, #20
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bc80      	pop	{r7}
 8019a78:	4770      	bx	lr
 8019a7a:	bf00      	nop
 8019a7c:	0001e848 	.word	0x0001e848
 8019a80:	0003d090 	.word	0x0003d090
 8019a84:	0007a120 	.word	0x0007a120

08019a88 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019a88:	b480      	push	{r7}
 8019a8a:	b083      	sub	sp, #12
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
 8019a90:	4608      	mov	r0, r1
 8019a92:	4611      	mov	r1, r2
 8019a94:	461a      	mov	r2, r3
 8019a96:	4603      	mov	r3, r0
 8019a98:	70fb      	strb	r3, [r7, #3]
 8019a9a:	460b      	mov	r3, r1
 8019a9c:	803b      	strh	r3, [r7, #0]
 8019a9e:	4613      	mov	r3, r2
 8019aa0:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8019aa2:	883b      	ldrh	r3, [r7, #0]
 8019aa4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019aa6:	78ba      	ldrb	r2, [r7, #2]
 8019aa8:	f082 0201 	eor.w	r2, r2, #1
 8019aac:	b2d2      	uxtb	r2, r2
 8019aae:	2a00      	cmp	r2, #0
 8019ab0:	d001      	beq.n	8019ab6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8019ab2:	2208      	movs	r2, #8
 8019ab4:	e000      	b.n	8019ab8 <RadioGetGfskTimeOnAirNumerator+0x30>
 8019ab6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019ab8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019aba:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019abe:	7c3b      	ldrb	r3, [r7, #16]
 8019ac0:	7d39      	ldrb	r1, [r7, #20]
 8019ac2:	2900      	cmp	r1, #0
 8019ac4:	d001      	beq.n	8019aca <RadioGetGfskTimeOnAirNumerator+0x42>
 8019ac6:	2102      	movs	r1, #2
 8019ac8:	e000      	b.n	8019acc <RadioGetGfskTimeOnAirNumerator+0x44>
 8019aca:	2100      	movs	r1, #0
 8019acc:	440b      	add	r3, r1
 8019ace:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019ad0:	4413      	add	r3, r2
}
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	370c      	adds	r7, #12
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bc80      	pop	{r7}
 8019ada:	4770      	bx	lr

08019adc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019adc:	b480      	push	{r7}
 8019ade:	b08b      	sub	sp, #44	; 0x2c
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	60f8      	str	r0, [r7, #12]
 8019ae4:	60b9      	str	r1, [r7, #8]
 8019ae6:	4611      	mov	r1, r2
 8019ae8:	461a      	mov	r2, r3
 8019aea:	460b      	mov	r3, r1
 8019aec:	71fb      	strb	r3, [r7, #7]
 8019aee:	4613      	mov	r3, r2
 8019af0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019af2:	79fb      	ldrb	r3, [r7, #7]
 8019af4:	3304      	adds	r3, #4
 8019af6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019af8:	2300      	movs	r3, #0
 8019afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	2b05      	cmp	r3, #5
 8019b02:	d002      	beq.n	8019b0a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	2b06      	cmp	r3, #6
 8019b08:	d104      	bne.n	8019b14 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019b0a:	88bb      	ldrh	r3, [r7, #4]
 8019b0c:	2b0b      	cmp	r3, #11
 8019b0e:	d801      	bhi.n	8019b14 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019b10:	230c      	movs	r3, #12
 8019b12:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d105      	bne.n	8019b26 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	2b0b      	cmp	r3, #11
 8019b1e:	d008      	beq.n	8019b32 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	2b0c      	cmp	r3, #12
 8019b24:	d005      	beq.n	8019b32 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	2b01      	cmp	r3, #1
 8019b2a:	d105      	bne.n	8019b38 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019b2c:	68bb      	ldr	r3, [r7, #8]
 8019b2e:	2b0c      	cmp	r3, #12
 8019b30:	d102      	bne.n	8019b38 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019b32:	2301      	movs	r3, #1
 8019b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019b38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019b3c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019b42:	2a00      	cmp	r2, #0
 8019b44:	d001      	beq.n	8019b4a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019b46:	2210      	movs	r2, #16
 8019b48:	e000      	b.n	8019b4c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019b4a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019b4c:	4413      	add	r3, r2
 8019b4e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019b50:	68bb      	ldr	r3, [r7, #8]
 8019b52:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019b54:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019b56:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019b5a:	2a00      	cmp	r2, #0
 8019b5c:	d001      	beq.n	8019b62 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019b5e:	2200      	movs	r2, #0
 8019b60:	e000      	b.n	8019b64 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019b62:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019b64:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019b66:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019b68:	68bb      	ldr	r3, [r7, #8]
 8019b6a:	2b06      	cmp	r3, #6
 8019b6c:	d803      	bhi.n	8019b76 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019b6e:	68bb      	ldr	r3, [r7, #8]
 8019b70:	009b      	lsls	r3, r3, #2
 8019b72:	623b      	str	r3, [r7, #32]
 8019b74:	e00e      	b.n	8019b94 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019b76:	69fb      	ldr	r3, [r7, #28]
 8019b78:	3308      	adds	r3, #8
 8019b7a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d004      	beq.n	8019b8e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	3b02      	subs	r3, #2
 8019b88:	009b      	lsls	r3, r3, #2
 8019b8a:	623b      	str	r3, [r7, #32]
 8019b8c:	e002      	b.n	8019b94 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	009b      	lsls	r3, r3, #2
 8019b92:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019b94:	69fb      	ldr	r3, [r7, #28]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	da01      	bge.n	8019b9e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019b9e:	69fa      	ldr	r2, [r7, #28]
 8019ba0:	6a3b      	ldr	r3, [r7, #32]
 8019ba2:	4413      	add	r3, r2
 8019ba4:	1e5a      	subs	r2, r3, #1
 8019ba6:	6a3b      	ldr	r3, [r7, #32]
 8019ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8019bac:	697a      	ldr	r2, [r7, #20]
 8019bae:	fb03 f202 	mul.w	r2, r3, r2
 8019bb2:	88bb      	ldrh	r3, [r7, #4]
 8019bb4:	4413      	add	r3, r2
    int32_t intermediate =
 8019bb6:	330c      	adds	r3, #12
 8019bb8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	2b06      	cmp	r3, #6
 8019bbe:	d802      	bhi.n	8019bc6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019bc0:	69bb      	ldr	r3, [r7, #24]
 8019bc2:	3302      	adds	r3, #2
 8019bc4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019bc6:	69bb      	ldr	r3, [r7, #24]
 8019bc8:	009b      	lsls	r3, r3, #2
 8019bca:	1c5a      	adds	r2, r3, #1
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	3b02      	subs	r3, #2
 8019bd0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	372c      	adds	r7, #44	; 0x2c
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bc80      	pop	{r7}
 8019bdc:	4770      	bx	lr
	...

08019be0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b08a      	sub	sp, #40	; 0x28
 8019be4:	af04      	add	r7, sp, #16
 8019be6:	60b9      	str	r1, [r7, #8]
 8019be8:	607a      	str	r2, [r7, #4]
 8019bea:	461a      	mov	r2, r3
 8019bec:	4603      	mov	r3, r0
 8019bee:	73fb      	strb	r3, [r7, #15]
 8019bf0:	4613      	mov	r3, r2
 8019bf2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019bfc:	7bfb      	ldrb	r3, [r7, #15]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d002      	beq.n	8019c08 <RadioTimeOnAir+0x28>
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	d017      	beq.n	8019c36 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019c06:	e035      	b.n	8019c74 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019c08:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019c0c:	8c3a      	ldrh	r2, [r7, #32]
 8019c0e:	7bb9      	ldrb	r1, [r7, #14]
 8019c10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019c14:	9301      	str	r3, [sp, #4]
 8019c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019c1a:	9300      	str	r3, [sp, #0]
 8019c1c:	4603      	mov	r3, r0
 8019c1e:	6878      	ldr	r0, [r7, #4]
 8019c20:	f7ff ff32 	bl	8019a88 <RadioGetGfskTimeOnAirNumerator>
 8019c24:	4603      	mov	r3, r0
 8019c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019c2a:	fb02 f303 	mul.w	r3, r2, r3
 8019c2e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	613b      	str	r3, [r7, #16]
        break;
 8019c34:	e01e      	b.n	8019c74 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019c36:	8c39      	ldrh	r1, [r7, #32]
 8019c38:	7bba      	ldrb	r2, [r7, #14]
 8019c3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019c3e:	9302      	str	r3, [sp, #8]
 8019c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019c44:	9301      	str	r3, [sp, #4]
 8019c46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019c4a:	9300      	str	r3, [sp, #0]
 8019c4c:	460b      	mov	r3, r1
 8019c4e:	6879      	ldr	r1, [r7, #4]
 8019c50:	68b8      	ldr	r0, [r7, #8]
 8019c52:	f7ff ff43 	bl	8019adc <RadioGetLoRaTimeOnAirNumerator>
 8019c56:	4603      	mov	r3, r0
 8019c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019c5c:	fb02 f303 	mul.w	r3, r2, r3
 8019c60:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019c62:	4a0a      	ldr	r2, [pc, #40]	; (8019c8c <RadioTimeOnAir+0xac>)
 8019c64:	68bb      	ldr	r3, [r7, #8]
 8019c66:	4413      	add	r3, r2
 8019c68:	781b      	ldrb	r3, [r3, #0]
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	f7ff feb6 	bl	80199dc <RadioGetLoRaBandwidthInHz>
 8019c70:	6138      	str	r0, [r7, #16]
        break;
 8019c72:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019c74:	697a      	ldr	r2, [r7, #20]
 8019c76:	693b      	ldr	r3, [r7, #16]
 8019c78:	4413      	add	r3, r2
 8019c7a:	1e5a      	subs	r2, r3, #1
 8019c7c:	693b      	ldr	r3, [r7, #16]
 8019c7e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	3718      	adds	r7, #24
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}
 8019c8a:	bf00      	nop
 8019c8c:	0801ec38 	.word	0x0801ec38

08019c90 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b084      	sub	sp, #16
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
 8019c98:	460b      	mov	r3, r1
 8019c9a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	f240 2101 	movw	r1, #513	; 0x201
 8019ca4:	f240 2001 	movw	r0, #513	; 0x201
 8019ca8:	f001 fd66 	bl	801b778 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019cac:	4b73      	ldr	r3, [pc, #460]	; (8019e7c <RadioSend+0x1ec>)
 8019cae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019cb2:	2101      	movs	r1, #1
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f002 fa03 	bl	801c0c0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019cba:	4b70      	ldr	r3, [pc, #448]	; (8019e7c <RadioSend+0x1ec>)
 8019cbc:	781b      	ldrb	r3, [r3, #0]
 8019cbe:	2b01      	cmp	r3, #1
 8019cc0:	d112      	bne.n	8019ce8 <RadioSend+0x58>
 8019cc2:	4b6e      	ldr	r3, [pc, #440]	; (8019e7c <RadioSend+0x1ec>)
 8019cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019cc8:	2b06      	cmp	r3, #6
 8019cca:	d10d      	bne.n	8019ce8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019ccc:	f640 0089 	movw	r0, #2185	; 0x889
 8019cd0:	f002 f916 	bl	801bf00 <SUBGRF_ReadRegister>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	f023 0304 	bic.w	r3, r3, #4
 8019cda:	b2db      	uxtb	r3, r3
 8019cdc:	4619      	mov	r1, r3
 8019cde:	f640 0089 	movw	r0, #2185	; 0x889
 8019ce2:	f002 f8f9 	bl	801bed8 <SUBGRF_WriteRegister>
 8019ce6:	e00c      	b.n	8019d02 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019ce8:	f640 0089 	movw	r0, #2185	; 0x889
 8019cec:	f002 f908 	bl	801bf00 <SUBGRF_ReadRegister>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	f043 0304 	orr.w	r3, r3, #4
 8019cf6:	b2db      	uxtb	r3, r3
 8019cf8:	4619      	mov	r1, r3
 8019cfa:	f640 0089 	movw	r0, #2185	; 0x889
 8019cfe:	f002 f8eb 	bl	801bed8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019d02:	4b5e      	ldr	r3, [pc, #376]	; (8019e7c <RadioSend+0x1ec>)
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	2b04      	cmp	r3, #4
 8019d08:	f200 80a8 	bhi.w	8019e5c <RadioSend+0x1cc>
 8019d0c:	a201      	add	r2, pc, #4	; (adr r2, 8019d14 <RadioSend+0x84>)
 8019d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d12:	bf00      	nop
 8019d14:	08019d43 	.word	0x08019d43
 8019d18:	08019d29 	.word	0x08019d29
 8019d1c:	08019d43 	.word	0x08019d43
 8019d20:	08019da5 	.word	0x08019da5
 8019d24:	08019dc5 	.word	0x08019dc5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019d28:	4a54      	ldr	r2, [pc, #336]	; (8019e7c <RadioSend+0x1ec>)
 8019d2a:	78fb      	ldrb	r3, [r7, #3]
 8019d2c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d2e:	4854      	ldr	r0, [pc, #336]	; (8019e80 <RadioSend+0x1f0>)
 8019d30:	f001 ff8a 	bl	801bc48 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019d34:	78fb      	ldrb	r3, [r7, #3]
 8019d36:	2200      	movs	r2, #0
 8019d38:	4619      	mov	r1, r3
 8019d3a:	6878      	ldr	r0, [r7, #4]
 8019d3c:	f001 fa3a 	bl	801b1b4 <SUBGRF_SendPayload>
            break;
 8019d40:	e08d      	b.n	8019e5e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019d42:	f002 fbb6 	bl	801c4b2 <RFW_Is_Init>
 8019d46:	4603      	mov	r3, r0
 8019d48:	2b01      	cmp	r3, #1
 8019d4a:	d11e      	bne.n	8019d8a <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019d4c:	f107 020d 	add.w	r2, r7, #13
 8019d50:	78fb      	ldrb	r3, [r7, #3]
 8019d52:	4619      	mov	r1, r3
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f002 fbc4 	bl	801c4e2 <RFW_TransmitInit>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d10c      	bne.n	8019d7a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019d60:	7b7a      	ldrb	r2, [r7, #13]
 8019d62:	4b46      	ldr	r3, [pc, #280]	; (8019e7c <RadioSend+0x1ec>)
 8019d64:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d66:	4846      	ldr	r0, [pc, #280]	; (8019e80 <RadioSend+0x1f0>)
 8019d68:	f001 ff6e 	bl	801bc48 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019d6c:	7b7b      	ldrb	r3, [r7, #13]
 8019d6e:	2200      	movs	r2, #0
 8019d70:	4619      	mov	r1, r3
 8019d72:	6878      	ldr	r0, [r7, #4]
 8019d74:	f001 fa1e 	bl	801b1b4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019d78:	e071      	b.n	8019e5e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8019d7a:	4b42      	ldr	r3, [pc, #264]	; (8019e84 <RadioSend+0x1f4>)
 8019d7c:	2201      	movs	r2, #1
 8019d7e:	2100      	movs	r1, #0
 8019d80:	2002      	movs	r0, #2
 8019d82:	f003 fccf 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019d86:	2303      	movs	r3, #3
 8019d88:	e073      	b.n	8019e72 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019d8a:	4a3c      	ldr	r2, [pc, #240]	; (8019e7c <RadioSend+0x1ec>)
 8019d8c:	78fb      	ldrb	r3, [r7, #3]
 8019d8e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d90:	483b      	ldr	r0, [pc, #236]	; (8019e80 <RadioSend+0x1f0>)
 8019d92:	f001 ff59 	bl	801bc48 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8019d96:	78fb      	ldrb	r3, [r7, #3]
 8019d98:	2200      	movs	r2, #0
 8019d9a:	4619      	mov	r1, r3
 8019d9c:	6878      	ldr	r0, [r7, #4]
 8019d9e:	f001 fa09 	bl	801b1b4 <SUBGRF_SendPayload>
            break;
 8019da2:	e05c      	b.n	8019e5e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019da4:	4b35      	ldr	r3, [pc, #212]	; (8019e7c <RadioSend+0x1ec>)
 8019da6:	2202      	movs	r2, #2
 8019da8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019daa:	4a34      	ldr	r2, [pc, #208]	; (8019e7c <RadioSend+0x1ec>)
 8019dac:	78fb      	ldrb	r3, [r7, #3]
 8019dae:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019db0:	4833      	ldr	r0, [pc, #204]	; (8019e80 <RadioSend+0x1f0>)
 8019db2:	f001 ff49 	bl	801bc48 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019db6:	78fb      	ldrb	r3, [r7, #3]
 8019db8:	2200      	movs	r2, #0
 8019dba:	4619      	mov	r1, r3
 8019dbc:	6878      	ldr	r0, [r7, #4]
 8019dbe:	f001 f9f9 	bl	801b1b4 <SUBGRF_SendPayload>
            break;
 8019dc2:	e04c      	b.n	8019e5e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019dc4:	78fb      	ldrb	r3, [r7, #3]
 8019dc6:	461a      	mov	r2, r3
 8019dc8:	6879      	ldr	r1, [r7, #4]
 8019dca:	482f      	ldr	r0, [pc, #188]	; (8019e88 <RadioSend+0x1f8>)
 8019dcc:	f000 fccc 	bl	801a768 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019dd0:	4b2a      	ldr	r3, [pc, #168]	; (8019e7c <RadioSend+0x1ec>)
 8019dd2:	2202      	movs	r2, #2
 8019dd4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019dd6:	78fb      	ldrb	r3, [r7, #3]
 8019dd8:	3301      	adds	r3, #1
 8019dda:	b2da      	uxtb	r2, r3
 8019ddc:	4b27      	ldr	r3, [pc, #156]	; (8019e7c <RadioSend+0x1ec>)
 8019dde:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019de0:	4827      	ldr	r0, [pc, #156]	; (8019e80 <RadioSend+0x1f0>)
 8019de2:	f001 ff31 	bl	801bc48 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019de6:	2100      	movs	r1, #0
 8019de8:	20f1      	movs	r0, #241	; 0xf1
 8019dea:	f000 f966 	bl	801a0ba <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019dee:	2100      	movs	r1, #0
 8019df0:	20f0      	movs	r0, #240	; 0xf0
 8019df2:	f000 f962 	bl	801a0ba <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019df6:	4b21      	ldr	r3, [pc, #132]	; (8019e7c <RadioSend+0x1ec>)
 8019df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019dfa:	2b64      	cmp	r3, #100	; 0x64
 8019dfc:	d108      	bne.n	8019e10 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019dfe:	2170      	movs	r1, #112	; 0x70
 8019e00:	20f3      	movs	r0, #243	; 0xf3
 8019e02:	f000 f95a 	bl	801a0ba <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019e06:	211d      	movs	r1, #29
 8019e08:	20f2      	movs	r0, #242	; 0xf2
 8019e0a:	f000 f956 	bl	801a0ba <RadioWrite>
 8019e0e:	e007      	b.n	8019e20 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019e10:	21e1      	movs	r1, #225	; 0xe1
 8019e12:	20f3      	movs	r0, #243	; 0xf3
 8019e14:	f000 f951 	bl	801a0ba <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019e18:	2104      	movs	r1, #4
 8019e1a:	20f2      	movs	r0, #242	; 0xf2
 8019e1c:	f000 f94d 	bl	801a0ba <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019e20:	78fb      	ldrb	r3, [r7, #3]
 8019e22:	b29b      	uxth	r3, r3
 8019e24:	00db      	lsls	r3, r3, #3
 8019e26:	b29b      	uxth	r3, r3
 8019e28:	3302      	adds	r3, #2
 8019e2a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019e2c:	89fb      	ldrh	r3, [r7, #14]
 8019e2e:	0a1b      	lsrs	r3, r3, #8
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	b2db      	uxtb	r3, r3
 8019e34:	4619      	mov	r1, r3
 8019e36:	20f4      	movs	r0, #244	; 0xf4
 8019e38:	f000 f93f 	bl	801a0ba <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019e3c:	89fb      	ldrh	r3, [r7, #14]
 8019e3e:	b2db      	uxtb	r3, r3
 8019e40:	4619      	mov	r1, r3
 8019e42:	20f5      	movs	r0, #245	; 0xf5
 8019e44:	f000 f939 	bl	801a0ba <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019e48:	78fb      	ldrb	r3, [r7, #3]
 8019e4a:	3301      	adds	r3, #1
 8019e4c:	b2db      	uxtb	r3, r3
 8019e4e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019e52:	4619      	mov	r1, r3
 8019e54:	480c      	ldr	r0, [pc, #48]	; (8019e88 <RadioSend+0x1f8>)
 8019e56:	f001 f9ad 	bl	801b1b4 <SUBGRF_SendPayload>
            break;
 8019e5a:	e000      	b.n	8019e5e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019e5c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019e5e:	4b07      	ldr	r3, [pc, #28]	; (8019e7c <RadioSend+0x1ec>)
 8019e60:	685b      	ldr	r3, [r3, #4]
 8019e62:	4619      	mov	r1, r3
 8019e64:	4809      	ldr	r0, [pc, #36]	; (8019e8c <RadioSend+0x1fc>)
 8019e66:	f003 fac3 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8019e6a:	4808      	ldr	r0, [pc, #32]	; (8019e8c <RadioSend+0x1fc>)
 8019e6c:	f003 f9e2 	bl	801d234 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019e70:	2300      	movs	r3, #0
}
 8019e72:	4618      	mov	r0, r3
 8019e74:	3710      	adds	r7, #16
 8019e76:	46bd      	mov	sp, r7
 8019e78:	bd80      	pop	{r7, pc}
 8019e7a:	bf00      	nop
 8019e7c:	20001be8 	.word	0x20001be8
 8019e80:	20001bf6 	.word	0x20001bf6
 8019e84:	0801e554 	.word	0x0801e554
 8019e88:	20001ae4 	.word	0x20001ae4
 8019e8c:	20001c44 	.word	0x20001c44

08019e90 <RadioSleep>:

static void RadioSleep( void )
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b082      	sub	sp, #8
 8019e94:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019e96:	2300      	movs	r3, #0
 8019e98:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019e9a:	793b      	ldrb	r3, [r7, #4]
 8019e9c:	f043 0304 	orr.w	r3, r3, #4
 8019ea0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019ea2:	7938      	ldrb	r0, [r7, #4]
 8019ea4:	f001 fa62 	bl	801b36c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019ea8:	2002      	movs	r0, #2
 8019eaa:	f7e8 f9b1 	bl	8002210 <HAL_Delay>
}
 8019eae:	bf00      	nop
 8019eb0:	3708      	adds	r7, #8
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bd80      	pop	{r7, pc}

08019eb6 <RadioStandby>:

static void RadioStandby( void )
{
 8019eb6:	b580      	push	{r7, lr}
 8019eb8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019eba:	2000      	movs	r0, #0
 8019ebc:	f001 fa88 	bl	801b3d0 <SUBGRF_SetStandby>
}
 8019ec0:	bf00      	nop
 8019ec2:	bd80      	pop	{r7, pc}

08019ec4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b082      	sub	sp, #8
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019ecc:	f002 faf1 	bl	801c4b2 <RFW_Is_Init>
 8019ed0:	4603      	mov	r3, r0
 8019ed2:	2b01      	cmp	r3, #1
 8019ed4:	d102      	bne.n	8019edc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019ed6:	f002 fb14 	bl	801c502 <RFW_ReceiveInit>
 8019eda:	e007      	b.n	8019eec <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019edc:	2300      	movs	r3, #0
 8019ede:	2200      	movs	r2, #0
 8019ee0:	f240 2162 	movw	r1, #610	; 0x262
 8019ee4:	f240 2062 	movw	r0, #610	; 0x262
 8019ee8:	f001 fc46 	bl	801b778 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d006      	beq.n	8019f00 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019ef2:	6879      	ldr	r1, [r7, #4]
 8019ef4:	4811      	ldr	r0, [pc, #68]	; (8019f3c <RadioRx+0x78>)
 8019ef6:	f003 fa7b 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019efa:	4810      	ldr	r0, [pc, #64]	; (8019f3c <RadioRx+0x78>)
 8019efc:	f003 f99a 	bl	801d234 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019f00:	4b0f      	ldr	r3, [pc, #60]	; (8019f40 <RadioRx+0x7c>)
 8019f02:	2200      	movs	r2, #0
 8019f04:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019f06:	4b0e      	ldr	r3, [pc, #56]	; (8019f40 <RadioRx+0x7c>)
 8019f08:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019f0c:	2100      	movs	r1, #0
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f002 f8d6 	bl	801c0c0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019f14:	4b0a      	ldr	r3, [pc, #40]	; (8019f40 <RadioRx+0x7c>)
 8019f16:	785b      	ldrb	r3, [r3, #1]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d004      	beq.n	8019f26 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019f1c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019f20:	f001 fa92 	bl	801b448 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019f24:	e005      	b.n	8019f32 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019f26:	4b06      	ldr	r3, [pc, #24]	; (8019f40 <RadioRx+0x7c>)
 8019f28:	689b      	ldr	r3, [r3, #8]
 8019f2a:	019b      	lsls	r3, r3, #6
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f001 fa8b 	bl	801b448 <SUBGRF_SetRx>
}
 8019f32:	bf00      	nop
 8019f34:	3708      	adds	r7, #8
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	20001c5c 	.word	0x20001c5c
 8019f40:	20001be8 	.word	0x20001be8

08019f44 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b082      	sub	sp, #8
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019f4c:	f002 fab1 	bl	801c4b2 <RFW_Is_Init>
 8019f50:	4603      	mov	r3, r0
 8019f52:	2b01      	cmp	r3, #1
 8019f54:	d102      	bne.n	8019f5c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019f56:	f002 fad4 	bl	801c502 <RFW_ReceiveInit>
 8019f5a:	e007      	b.n	8019f6c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	2200      	movs	r2, #0
 8019f60:	f240 2162 	movw	r1, #610	; 0x262
 8019f64:	f240 2062 	movw	r0, #610	; 0x262
 8019f68:	f001 fc06 	bl	801b778 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d006      	beq.n	8019f80 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019f72:	6879      	ldr	r1, [r7, #4]
 8019f74:	4811      	ldr	r0, [pc, #68]	; (8019fbc <RadioRxBoosted+0x78>)
 8019f76:	f003 fa3b 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019f7a:	4810      	ldr	r0, [pc, #64]	; (8019fbc <RadioRxBoosted+0x78>)
 8019f7c:	f003 f95a 	bl	801d234 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019f80:	4b0f      	ldr	r3, [pc, #60]	; (8019fc0 <RadioRxBoosted+0x7c>)
 8019f82:	2200      	movs	r2, #0
 8019f84:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019f86:	4b0e      	ldr	r3, [pc, #56]	; (8019fc0 <RadioRxBoosted+0x7c>)
 8019f88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019f8c:	2100      	movs	r1, #0
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f002 f896 	bl	801c0c0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019f94:	4b0a      	ldr	r3, [pc, #40]	; (8019fc0 <RadioRxBoosted+0x7c>)
 8019f96:	785b      	ldrb	r3, [r3, #1]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d004      	beq.n	8019fa6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019f9c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019fa0:	f001 fa72 	bl	801b488 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019fa4:	e005      	b.n	8019fb2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019fa6:	4b06      	ldr	r3, [pc, #24]	; (8019fc0 <RadioRxBoosted+0x7c>)
 8019fa8:	689b      	ldr	r3, [r3, #8]
 8019faa:	019b      	lsls	r3, r3, #6
 8019fac:	4618      	mov	r0, r3
 8019fae:	f001 fa6b 	bl	801b488 <SUBGRF_SetRxBoosted>
}
 8019fb2:	bf00      	nop
 8019fb4:	3708      	adds	r7, #8
 8019fb6:	46bd      	mov	sp, r7
 8019fb8:	bd80      	pop	{r7, pc}
 8019fba:	bf00      	nop
 8019fbc:	20001c5c 	.word	0x20001c5c
 8019fc0:	20001be8 	.word	0x20001be8

08019fc4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
 8019fcc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	005a      	lsls	r2, r3, #1
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	4413      	add	r3, r2
 8019fd6:	4a0c      	ldr	r2, [pc, #48]	; (801a008 <RadioSetRxDutyCycle+0x44>)
 8019fd8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019fda:	2300      	movs	r3, #0
 8019fdc:	2200      	movs	r2, #0
 8019fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019fe2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019fe6:	f001 fbc7 	bl	801b778 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019fea:	4b07      	ldr	r3, [pc, #28]	; (801a008 <RadioSetRxDutyCycle+0x44>)
 8019fec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019ff0:	2100      	movs	r1, #0
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f002 f864 	bl	801c0c0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019ff8:	6839      	ldr	r1, [r7, #0]
 8019ffa:	6878      	ldr	r0, [r7, #4]
 8019ffc:	f001 fa68 	bl	801b4d0 <SUBGRF_SetRxDutyCycle>
}
 801a000:	bf00      	nop
 801a002:	3708      	adds	r7, #8
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}
 801a008:	20001be8 	.word	0x20001be8

0801a00c <RadioStartCad>:

static void RadioStartCad( void )
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a010:	4b09      	ldr	r3, [pc, #36]	; (801a038 <RadioStartCad+0x2c>)
 801a012:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a016:	2100      	movs	r1, #0
 801a018:	4618      	mov	r0, r3
 801a01a:	f002 f851 	bl	801c0c0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a01e:	2300      	movs	r3, #0
 801a020:	2200      	movs	r2, #0
 801a022:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a026:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a02a:	f001 fba5 	bl	801b778 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a02e:	f001 fa7b 	bl	801b528 <SUBGRF_SetCad>
}
 801a032:	bf00      	nop
 801a034:	bd80      	pop	{r7, pc}
 801a036:	bf00      	nop
 801a038:	20001be8 	.word	0x20001be8

0801a03c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a03c:	b580      	push	{r7, lr}
 801a03e:	b084      	sub	sp, #16
 801a040:	af00      	add	r7, sp, #0
 801a042:	6078      	str	r0, [r7, #4]
 801a044:	460b      	mov	r3, r1
 801a046:	70fb      	strb	r3, [r7, #3]
 801a048:	4613      	mov	r3, r2
 801a04a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801a04c:	883b      	ldrh	r3, [r7, #0]
 801a04e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a052:	fb02 f303 	mul.w	r3, r2, r3
 801a056:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	f001 fbe9 	bl	801b830 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a05e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a062:	4618      	mov	r0, r3
 801a064:	f002 f854 	bl	801c110 <SUBGRF_SetRfTxPower>
 801a068:	4603      	mov	r3, r0
 801a06a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a06c:	210e      	movs	r1, #14
 801a06e:	f640 101f 	movw	r0, #2335	; 0x91f
 801a072:	f001 ff31 	bl	801bed8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801a076:	7afb      	ldrb	r3, [r7, #11]
 801a078:	2101      	movs	r1, #1
 801a07a:	4618      	mov	r0, r3
 801a07c:	f002 f820 	bl	801c0c0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a080:	f001 fa60 	bl	801b544 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a084:	68f9      	ldr	r1, [r7, #12]
 801a086:	4805      	ldr	r0, [pc, #20]	; (801a09c <RadioSetTxContinuousWave+0x60>)
 801a088:	f003 f9b2 	bl	801d3f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a08c:	4803      	ldr	r0, [pc, #12]	; (801a09c <RadioSetTxContinuousWave+0x60>)
 801a08e:	f003 f8d1 	bl	801d234 <UTIL_TIMER_Start>
}
 801a092:	bf00      	nop
 801a094:	3710      	adds	r7, #16
 801a096:	46bd      	mov	sp, r7
 801a098:	bd80      	pop	{r7, pc}
 801a09a:	bf00      	nop
 801a09c:	20001c44 	.word	0x20001c44

0801a0a0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a0aa:	f001 fe82 	bl	801bdb2 <SUBGRF_GetRssiInst>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	b21b      	sxth	r3, r3
}
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	3708      	adds	r7, #8
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd80      	pop	{r7, pc}

0801a0ba <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a0ba:	b580      	push	{r7, lr}
 801a0bc:	b082      	sub	sp, #8
 801a0be:	af00      	add	r7, sp, #0
 801a0c0:	4603      	mov	r3, r0
 801a0c2:	460a      	mov	r2, r1
 801a0c4:	80fb      	strh	r3, [r7, #6]
 801a0c6:	4613      	mov	r3, r2
 801a0c8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a0ca:	797a      	ldrb	r2, [r7, #5]
 801a0cc:	88fb      	ldrh	r3, [r7, #6]
 801a0ce:	4611      	mov	r1, r2
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f001 ff01 	bl	801bed8 <SUBGRF_WriteRegister>
}
 801a0d6:	bf00      	nop
 801a0d8:	3708      	adds	r7, #8
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	bd80      	pop	{r7, pc}

0801a0de <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a0de:	b580      	push	{r7, lr}
 801a0e0:	b082      	sub	sp, #8
 801a0e2:	af00      	add	r7, sp, #0
 801a0e4:	4603      	mov	r3, r0
 801a0e6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a0e8:	88fb      	ldrh	r3, [r7, #6]
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f001 ff08 	bl	801bf00 <SUBGRF_ReadRegister>
 801a0f0:	4603      	mov	r3, r0
}
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	3708      	adds	r7, #8
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	bd80      	pop	{r7, pc}

0801a0fa <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a0fa:	b580      	push	{r7, lr}
 801a0fc:	b082      	sub	sp, #8
 801a0fe:	af00      	add	r7, sp, #0
 801a100:	4603      	mov	r3, r0
 801a102:	6039      	str	r1, [r7, #0]
 801a104:	80fb      	strh	r3, [r7, #6]
 801a106:	4613      	mov	r3, r2
 801a108:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a10a:	797b      	ldrb	r3, [r7, #5]
 801a10c:	b29a      	uxth	r2, r3
 801a10e:	88fb      	ldrh	r3, [r7, #6]
 801a110:	6839      	ldr	r1, [r7, #0]
 801a112:	4618      	mov	r0, r3
 801a114:	f001 ff08 	bl	801bf28 <SUBGRF_WriteRegisters>
}
 801a118:	bf00      	nop
 801a11a:	3708      	adds	r7, #8
 801a11c:	46bd      	mov	sp, r7
 801a11e:	bd80      	pop	{r7, pc}

0801a120 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a120:	b580      	push	{r7, lr}
 801a122:	b082      	sub	sp, #8
 801a124:	af00      	add	r7, sp, #0
 801a126:	4603      	mov	r3, r0
 801a128:	6039      	str	r1, [r7, #0]
 801a12a:	80fb      	strh	r3, [r7, #6]
 801a12c:	4613      	mov	r3, r2
 801a12e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a130:	797b      	ldrb	r3, [r7, #5]
 801a132:	b29a      	uxth	r2, r3
 801a134:	88fb      	ldrh	r3, [r7, #6]
 801a136:	6839      	ldr	r1, [r7, #0]
 801a138:	4618      	mov	r0, r3
 801a13a:	f001 ff17 	bl	801bf6c <SUBGRF_ReadRegisters>
}
 801a13e:	bf00      	nop
 801a140:	3708      	adds	r7, #8
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}
	...

0801a148 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a148:	b580      	push	{r7, lr}
 801a14a:	b082      	sub	sp, #8
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	4603      	mov	r3, r0
 801a150:	460a      	mov	r2, r1
 801a152:	71fb      	strb	r3, [r7, #7]
 801a154:	4613      	mov	r3, r2
 801a156:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a158:	79fb      	ldrb	r3, [r7, #7]
 801a15a:	2b01      	cmp	r3, #1
 801a15c:	d10a      	bne.n	801a174 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a15e:	4a0e      	ldr	r2, [pc, #56]	; (801a198 <RadioSetMaxPayloadLength+0x50>)
 801a160:	79bb      	ldrb	r3, [r7, #6]
 801a162:	7013      	strb	r3, [r2, #0]
 801a164:	4b0c      	ldr	r3, [pc, #48]	; (801a198 <RadioSetMaxPayloadLength+0x50>)
 801a166:	781a      	ldrb	r2, [r3, #0]
 801a168:	4b0c      	ldr	r3, [pc, #48]	; (801a19c <RadioSetMaxPayloadLength+0x54>)
 801a16a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a16c:	480c      	ldr	r0, [pc, #48]	; (801a1a0 <RadioSetMaxPayloadLength+0x58>)
 801a16e:	f001 fd6b 	bl	801bc48 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a172:	e00d      	b.n	801a190 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a174:	4b09      	ldr	r3, [pc, #36]	; (801a19c <RadioSetMaxPayloadLength+0x54>)
 801a176:	7d5b      	ldrb	r3, [r3, #21]
 801a178:	2b01      	cmp	r3, #1
 801a17a:	d109      	bne.n	801a190 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a17c:	4a06      	ldr	r2, [pc, #24]	; (801a198 <RadioSetMaxPayloadLength+0x50>)
 801a17e:	79bb      	ldrb	r3, [r7, #6]
 801a180:	7013      	strb	r3, [r2, #0]
 801a182:	4b05      	ldr	r3, [pc, #20]	; (801a198 <RadioSetMaxPayloadLength+0x50>)
 801a184:	781a      	ldrb	r2, [r3, #0]
 801a186:	4b05      	ldr	r3, [pc, #20]	; (801a19c <RadioSetMaxPayloadLength+0x54>)
 801a188:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a18a:	4805      	ldr	r0, [pc, #20]	; (801a1a0 <RadioSetMaxPayloadLength+0x58>)
 801a18c:	f001 fd5c 	bl	801bc48 <SUBGRF_SetPacketParams>
}
 801a190:	bf00      	nop
 801a192:	3708      	adds	r7, #8
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}
 801a198:	20000134 	.word	0x20000134
 801a19c:	20001be8 	.word	0x20001be8
 801a1a0:	20001bf6 	.word	0x20001bf6

0801a1a4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a1a4:	b580      	push	{r7, lr}
 801a1a6:	b082      	sub	sp, #8
 801a1a8:	af00      	add	r7, sp, #0
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a1ae:	4a13      	ldr	r2, [pc, #76]	; (801a1fc <RadioSetPublicNetwork+0x58>)
 801a1b0:	79fb      	ldrb	r3, [r7, #7]
 801a1b2:	7313      	strb	r3, [r2, #12]
 801a1b4:	4b11      	ldr	r3, [pc, #68]	; (801a1fc <RadioSetPublicNetwork+0x58>)
 801a1b6:	7b1a      	ldrb	r2, [r3, #12]
 801a1b8:	4b10      	ldr	r3, [pc, #64]	; (801a1fc <RadioSetPublicNetwork+0x58>)
 801a1ba:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a1bc:	2001      	movs	r0, #1
 801a1be:	f7ff f811 	bl	80191e4 <RadioSetModem>
    if( enable == true )
 801a1c2:	79fb      	ldrb	r3, [r7, #7]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d00a      	beq.n	801a1de <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a1c8:	2134      	movs	r1, #52	; 0x34
 801a1ca:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a1ce:	f001 fe83 	bl	801bed8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a1d2:	2144      	movs	r1, #68	; 0x44
 801a1d4:	f240 7041 	movw	r0, #1857	; 0x741
 801a1d8:	f001 fe7e 	bl	801bed8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a1dc:	e009      	b.n	801a1f2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a1de:	2114      	movs	r1, #20
 801a1e0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a1e4:	f001 fe78 	bl	801bed8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a1e8:	2124      	movs	r1, #36	; 0x24
 801a1ea:	f240 7041 	movw	r0, #1857	; 0x741
 801a1ee:	f001 fe73 	bl	801bed8 <SUBGRF_WriteRegister>
}
 801a1f2:	bf00      	nop
 801a1f4:	3708      	adds	r7, #8
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	bd80      	pop	{r7, pc}
 801a1fa:	bf00      	nop
 801a1fc:	20001be8 	.word	0x20001be8

0801a200 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a200:	b580      	push	{r7, lr}
 801a202:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a204:	f001 ffb8 	bl	801c178 <SUBGRF_GetRadioWakeUpTime>
 801a208:	4603      	mov	r3, r0
 801a20a:	3303      	adds	r3, #3
}
 801a20c:	4618      	mov	r0, r3
 801a20e:	bd80      	pop	{r7, pc}

0801a210 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b082      	sub	sp, #8
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a218:	f000 f80e 	bl	801a238 <RadioOnTxTimeoutProcess>
}
 801a21c:	bf00      	nop
 801a21e:	3708      	adds	r7, #8
 801a220:	46bd      	mov	sp, r7
 801a222:	bd80      	pop	{r7, pc}

0801a224 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b082      	sub	sp, #8
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a22c:	f000 f818 	bl	801a260 <RadioOnRxTimeoutProcess>
}
 801a230:	bf00      	nop
 801a232:	3708      	adds	r7, #8
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}

0801a238 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a23c:	4b07      	ldr	r3, [pc, #28]	; (801a25c <RadioOnTxTimeoutProcess+0x24>)
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d008      	beq.n	801a256 <RadioOnTxTimeoutProcess+0x1e>
 801a244:	4b05      	ldr	r3, [pc, #20]	; (801a25c <RadioOnTxTimeoutProcess+0x24>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	685b      	ldr	r3, [r3, #4]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d003      	beq.n	801a256 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a24e:	4b03      	ldr	r3, [pc, #12]	; (801a25c <RadioOnTxTimeoutProcess+0x24>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	685b      	ldr	r3, [r3, #4]
 801a254:	4798      	blx	r3
    }
}
 801a256:	bf00      	nop
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	20001be4 	.word	0x20001be4

0801a260 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a260:	b580      	push	{r7, lr}
 801a262:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a264:	4b07      	ldr	r3, [pc, #28]	; (801a284 <RadioOnRxTimeoutProcess+0x24>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d008      	beq.n	801a27e <RadioOnRxTimeoutProcess+0x1e>
 801a26c:	4b05      	ldr	r3, [pc, #20]	; (801a284 <RadioOnRxTimeoutProcess+0x24>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	68db      	ldr	r3, [r3, #12]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d003      	beq.n	801a27e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a276:	4b03      	ldr	r3, [pc, #12]	; (801a284 <RadioOnRxTimeoutProcess+0x24>)
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	68db      	ldr	r3, [r3, #12]
 801a27c:	4798      	blx	r3
    }
}
 801a27e:	bf00      	nop
 801a280:	bd80      	pop	{r7, pc}
 801a282:	bf00      	nop
 801a284:	20001be4 	.word	0x20001be4

0801a288 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b082      	sub	sp, #8
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	4603      	mov	r3, r0
 801a290:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a292:	4a05      	ldr	r2, [pc, #20]	; (801a2a8 <RadioOnDioIrq+0x20>)
 801a294:	88fb      	ldrh	r3, [r7, #6]
 801a296:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a29a:	f000 f807 	bl	801a2ac <RadioIrqProcess>
}
 801a29e:	bf00      	nop
 801a2a0:	3708      	adds	r7, #8
 801a2a2:	46bd      	mov	sp, r7
 801a2a4:	bd80      	pop	{r7, pc}
 801a2a6:	bf00      	nop
 801a2a8:	20001be8 	.word	0x20001be8

0801a2ac <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a2ac:	b5b0      	push	{r4, r5, r7, lr}
 801a2ae:	b082      	sub	sp, #8
 801a2b0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a2ba:	4ba8      	ldr	r3, [pc, #672]	; (801a55c <RadioIrqProcess+0x2b0>)
 801a2bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a2c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2c4:	f000 810d 	beq.w	801a4e2 <RadioIrqProcess+0x236>
 801a2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2cc:	f300 81e8 	bgt.w	801a6a0 <RadioIrqProcess+0x3f4>
 801a2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a2d4:	f000 80f1 	beq.w	801a4ba <RadioIrqProcess+0x20e>
 801a2d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a2dc:	f300 81e0 	bgt.w	801a6a0 <RadioIrqProcess+0x3f4>
 801a2e0:	2b80      	cmp	r3, #128	; 0x80
 801a2e2:	f000 80d6 	beq.w	801a492 <RadioIrqProcess+0x1e6>
 801a2e6:	2b80      	cmp	r3, #128	; 0x80
 801a2e8:	f300 81da 	bgt.w	801a6a0 <RadioIrqProcess+0x3f4>
 801a2ec:	2b20      	cmp	r3, #32
 801a2ee:	dc49      	bgt.n	801a384 <RadioIrqProcess+0xd8>
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	f340 81d5 	ble.w	801a6a0 <RadioIrqProcess+0x3f4>
 801a2f6:	3b01      	subs	r3, #1
 801a2f8:	2b1f      	cmp	r3, #31
 801a2fa:	f200 81d1 	bhi.w	801a6a0 <RadioIrqProcess+0x3f4>
 801a2fe:	a201      	add	r2, pc, #4	; (adr r2, 801a304 <RadioIrqProcess+0x58>)
 801a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a304:	0801a38d 	.word	0x0801a38d
 801a308:	0801a3c7 	.word	0x0801a3c7
 801a30c:	0801a6a1 	.word	0x0801a6a1
 801a310:	0801a57d 	.word	0x0801a57d
 801a314:	0801a6a1 	.word	0x0801a6a1
 801a318:	0801a6a1 	.word	0x0801a6a1
 801a31c:	0801a6a1 	.word	0x0801a6a1
 801a320:	0801a5f9 	.word	0x0801a5f9
 801a324:	0801a6a1 	.word	0x0801a6a1
 801a328:	0801a6a1 	.word	0x0801a6a1
 801a32c:	0801a6a1 	.word	0x0801a6a1
 801a330:	0801a6a1 	.word	0x0801a6a1
 801a334:	0801a6a1 	.word	0x0801a6a1
 801a338:	0801a6a1 	.word	0x0801a6a1
 801a33c:	0801a6a1 	.word	0x0801a6a1
 801a340:	0801a615 	.word	0x0801a615
 801a344:	0801a6a1 	.word	0x0801a6a1
 801a348:	0801a6a1 	.word	0x0801a6a1
 801a34c:	0801a6a1 	.word	0x0801a6a1
 801a350:	0801a6a1 	.word	0x0801a6a1
 801a354:	0801a6a1 	.word	0x0801a6a1
 801a358:	0801a6a1 	.word	0x0801a6a1
 801a35c:	0801a6a1 	.word	0x0801a6a1
 801a360:	0801a6a1 	.word	0x0801a6a1
 801a364:	0801a6a1 	.word	0x0801a6a1
 801a368:	0801a6a1 	.word	0x0801a6a1
 801a36c:	0801a6a1 	.word	0x0801a6a1
 801a370:	0801a6a1 	.word	0x0801a6a1
 801a374:	0801a6a1 	.word	0x0801a6a1
 801a378:	0801a6a1 	.word	0x0801a6a1
 801a37c:	0801a6a1 	.word	0x0801a6a1
 801a380:	0801a623 	.word	0x0801a623
 801a384:	2b40      	cmp	r3, #64	; 0x40
 801a386:	f000 816d 	beq.w	801a664 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a38a:	e189      	b.n	801a6a0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a38c:	4874      	ldr	r0, [pc, #464]	; (801a560 <RadioIrqProcess+0x2b4>)
 801a38e:	f002 ffbf 	bl	801d310 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a392:	2000      	movs	r0, #0
 801a394:	f001 f81c 	bl	801b3d0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a398:	f002 f892 	bl	801c4c0 <RFW_Is_LongPacketModeEnabled>
 801a39c:	4603      	mov	r3, r0
 801a39e:	2b01      	cmp	r3, #1
 801a3a0:	d101      	bne.n	801a3a6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a3a2:	f002 f8b6 	bl	801c512 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a3a6:	4b6f      	ldr	r3, [pc, #444]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	f000 817a 	beq.w	801a6a4 <RadioIrqProcess+0x3f8>
 801a3b0:	4b6c      	ldr	r3, [pc, #432]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	f000 8174 	beq.w	801a6a4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a3bc:	4b69      	ldr	r3, [pc, #420]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4798      	blx	r3
        break;
 801a3c4:	e16e      	b.n	801a6a4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a3c6:	4868      	ldr	r0, [pc, #416]	; (801a568 <RadioIrqProcess+0x2bc>)
 801a3c8:	f002 ffa2 	bl	801d310 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a3cc:	4b63      	ldr	r3, [pc, #396]	; (801a55c <RadioIrqProcess+0x2b0>)
 801a3ce:	785b      	ldrb	r3, [r3, #1]
 801a3d0:	f083 0301 	eor.w	r3, r3, #1
 801a3d4:	b2db      	uxtb	r3, r3
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d014      	beq.n	801a404 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a3da:	2000      	movs	r0, #0
 801a3dc:	f000 fff8 	bl	801b3d0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a3e0:	2100      	movs	r1, #0
 801a3e2:	f640 1002 	movw	r0, #2306	; 0x902
 801a3e6:	f001 fd77 	bl	801bed8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a3ea:	f640 1044 	movw	r0, #2372	; 0x944
 801a3ee:	f001 fd87 	bl	801bf00 <SUBGRF_ReadRegister>
 801a3f2:	4603      	mov	r3, r0
 801a3f4:	f043 0302 	orr.w	r3, r3, #2
 801a3f8:	b2db      	uxtb	r3, r3
 801a3fa:	4619      	mov	r1, r3
 801a3fc:	f640 1044 	movw	r0, #2372	; 0x944
 801a400:	f001 fd6a 	bl	801bed8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a404:	1dfb      	adds	r3, r7, #7
 801a406:	22ff      	movs	r2, #255	; 0xff
 801a408:	4619      	mov	r1, r3
 801a40a:	4858      	ldr	r0, [pc, #352]	; (801a56c <RadioIrqProcess+0x2c0>)
 801a40c:	f000 feb0 	bl	801b170 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a410:	4857      	ldr	r0, [pc, #348]	; (801a570 <RadioIrqProcess+0x2c4>)
 801a412:	f001 fd0f 	bl	801be34 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a416:	4b53      	ldr	r3, [pc, #332]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	f000 8144 	beq.w	801a6a8 <RadioIrqProcess+0x3fc>
 801a420:	4b50      	ldr	r3, [pc, #320]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	689b      	ldr	r3, [r3, #8]
 801a426:	2b00      	cmp	r3, #0
 801a428:	f000 813e 	beq.w	801a6a8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a42c:	4b4b      	ldr	r3, [pc, #300]	; (801a55c <RadioIrqProcess+0x2b0>)
 801a42e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a432:	2b01      	cmp	r3, #1
 801a434:	d10e      	bne.n	801a454 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a436:	4b4b      	ldr	r3, [pc, #300]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	689c      	ldr	r4, [r3, #8]
 801a43c:	79fb      	ldrb	r3, [r7, #7]
 801a43e:	b299      	uxth	r1, r3
 801a440:	4b46      	ldr	r3, [pc, #280]	; (801a55c <RadioIrqProcess+0x2b0>)
 801a442:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a446:	b21a      	sxth	r2, r3
 801a448:	4b44      	ldr	r3, [pc, #272]	; (801a55c <RadioIrqProcess+0x2b0>)
 801a44a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a44e:	4847      	ldr	r0, [pc, #284]	; (801a56c <RadioIrqProcess+0x2c0>)
 801a450:	47a0      	blx	r4
                break;
 801a452:	e01d      	b.n	801a490 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a454:	4b41      	ldr	r3, [pc, #260]	; (801a55c <RadioIrqProcess+0x2b0>)
 801a456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a458:	463a      	mov	r2, r7
 801a45a:	4611      	mov	r1, r2
 801a45c:	4618      	mov	r0, r3
 801a45e:	f001 ff7d 	bl	801c35c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a462:	4b40      	ldr	r3, [pc, #256]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	689c      	ldr	r4, [r3, #8]
 801a468:	79fb      	ldrb	r3, [r7, #7]
 801a46a:	b299      	uxth	r1, r3
 801a46c:	4b3b      	ldr	r3, [pc, #236]	; (801a55c <RadioIrqProcess+0x2b0>)
 801a46e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a472:	b218      	sxth	r0, r3
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a47a:	4a3e      	ldr	r2, [pc, #248]	; (801a574 <RadioIrqProcess+0x2c8>)
 801a47c:	fb82 5203 	smull	r5, r2, r2, r3
 801a480:	1192      	asrs	r2, r2, #6
 801a482:	17db      	asrs	r3, r3, #31
 801a484:	1ad3      	subs	r3, r2, r3
 801a486:	b25b      	sxtb	r3, r3
 801a488:	4602      	mov	r2, r0
 801a48a:	4838      	ldr	r0, [pc, #224]	; (801a56c <RadioIrqProcess+0x2c0>)
 801a48c:	47a0      	blx	r4
                break;
 801a48e:	bf00      	nop
        break;
 801a490:	e10a      	b.n	801a6a8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a492:	2000      	movs	r0, #0
 801a494:	f000 ff9c 	bl	801b3d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a498:	4b32      	ldr	r3, [pc, #200]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	f000 8105 	beq.w	801a6ac <RadioIrqProcess+0x400>
 801a4a2:	4b30      	ldr	r3, [pc, #192]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	699b      	ldr	r3, [r3, #24]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	f000 80ff 	beq.w	801a6ac <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a4ae:	4b2d      	ldr	r3, [pc, #180]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	699b      	ldr	r3, [r3, #24]
 801a4b4:	2000      	movs	r0, #0
 801a4b6:	4798      	blx	r3
        break;
 801a4b8:	e0f8      	b.n	801a6ac <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a4ba:	2000      	movs	r0, #0
 801a4bc:	f000 ff88 	bl	801b3d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a4c0:	4b28      	ldr	r3, [pc, #160]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	f000 80f3 	beq.w	801a6b0 <RadioIrqProcess+0x404>
 801a4ca:	4b26      	ldr	r3, [pc, #152]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	699b      	ldr	r3, [r3, #24]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	f000 80ed 	beq.w	801a6b0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a4d6:	4b23      	ldr	r3, [pc, #140]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	699b      	ldr	r3, [r3, #24]
 801a4dc:	2001      	movs	r0, #1
 801a4de:	4798      	blx	r3
        break;
 801a4e0:	e0e6      	b.n	801a6b0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a4e2:	4b25      	ldr	r3, [pc, #148]	; (801a578 <RadioIrqProcess+0x2cc>)
 801a4e4:	2201      	movs	r2, #1
 801a4e6:	2100      	movs	r1, #0
 801a4e8:	2002      	movs	r0, #2
 801a4ea:	f003 f91b 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a4ee:	f000 fe25 	bl	801b13c <SUBGRF_GetOperatingMode>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	2b04      	cmp	r3, #4
 801a4f6:	d115      	bne.n	801a524 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a4f8:	4819      	ldr	r0, [pc, #100]	; (801a560 <RadioIrqProcess+0x2b4>)
 801a4fa:	f002 ff09 	bl	801d310 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a4fe:	2000      	movs	r0, #0
 801a500:	f000 ff66 	bl	801b3d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a504:	4b17      	ldr	r3, [pc, #92]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	f000 80d3 	beq.w	801a6b4 <RadioIrqProcess+0x408>
 801a50e:	4b15      	ldr	r3, [pc, #84]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	685b      	ldr	r3, [r3, #4]
 801a514:	2b00      	cmp	r3, #0
 801a516:	f000 80cd 	beq.w	801a6b4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a51a:	4b12      	ldr	r3, [pc, #72]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	685b      	ldr	r3, [r3, #4]
 801a520:	4798      	blx	r3
        break;
 801a522:	e0c7      	b.n	801a6b4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a524:	f000 fe0a 	bl	801b13c <SUBGRF_GetOperatingMode>
 801a528:	4603      	mov	r3, r0
 801a52a:	2b05      	cmp	r3, #5
 801a52c:	f040 80c2 	bne.w	801a6b4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a530:	480d      	ldr	r0, [pc, #52]	; (801a568 <RadioIrqProcess+0x2bc>)
 801a532:	f002 feed 	bl	801d310 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a536:	2000      	movs	r0, #0
 801a538:	f000 ff4a 	bl	801b3d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a53c:	4b09      	ldr	r3, [pc, #36]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	2b00      	cmp	r3, #0
 801a542:	f000 80b7 	beq.w	801a6b4 <RadioIrqProcess+0x408>
 801a546:	4b07      	ldr	r3, [pc, #28]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	68db      	ldr	r3, [r3, #12]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	f000 80b1 	beq.w	801a6b4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a552:	4b04      	ldr	r3, [pc, #16]	; (801a564 <RadioIrqProcess+0x2b8>)
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	68db      	ldr	r3, [r3, #12]
 801a558:	4798      	blx	r3
        break;
 801a55a:	e0ab      	b.n	801a6b4 <RadioIrqProcess+0x408>
 801a55c:	20001be8 	.word	0x20001be8
 801a560:	20001c44 	.word	0x20001c44
 801a564:	20001be4 	.word	0x20001be4
 801a568:	20001c5c 	.word	0x20001c5c
 801a56c:	20001ae4 	.word	0x20001ae4
 801a570:	20001c0c 	.word	0x20001c0c
 801a574:	10624dd3 	.word	0x10624dd3
 801a578:	0801e56c 	.word	0x0801e56c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a57c:	4b54      	ldr	r3, [pc, #336]	; (801a6d0 <RadioIrqProcess+0x424>)
 801a57e:	2201      	movs	r2, #1
 801a580:	2100      	movs	r1, #0
 801a582:	2002      	movs	r0, #2
 801a584:	f003 f8ce 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a588:	4b52      	ldr	r3, [pc, #328]	; (801a6d4 <RadioIrqProcess+0x428>)
 801a58a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	f000 8093 	beq.w	801a6b8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a592:	4a51      	ldr	r2, [pc, #324]	; (801a6d8 <RadioIrqProcess+0x42c>)
 801a594:	4b4f      	ldr	r3, [pc, #316]	; (801a6d4 <RadioIrqProcess+0x428>)
 801a596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a598:	0c1b      	lsrs	r3, r3, #16
 801a59a:	b2db      	uxtb	r3, r3
 801a59c:	4619      	mov	r1, r3
 801a59e:	f640 1003 	movw	r0, #2307	; 0x903
 801a5a2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a5a4:	4a4c      	ldr	r2, [pc, #304]	; (801a6d8 <RadioIrqProcess+0x42c>)
 801a5a6:	4b4b      	ldr	r3, [pc, #300]	; (801a6d4 <RadioIrqProcess+0x428>)
 801a5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a5aa:	0a1b      	lsrs	r3, r3, #8
 801a5ac:	b2db      	uxtb	r3, r3
 801a5ae:	4619      	mov	r1, r3
 801a5b0:	f640 1004 	movw	r0, #2308	; 0x904
 801a5b4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a5b6:	4a48      	ldr	r2, [pc, #288]	; (801a6d8 <RadioIrqProcess+0x42c>)
 801a5b8:	4b46      	ldr	r3, [pc, #280]	; (801a6d4 <RadioIrqProcess+0x428>)
 801a5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a5bc:	b2db      	uxtb	r3, r3
 801a5be:	4619      	mov	r1, r3
 801a5c0:	f640 1005 	movw	r0, #2309	; 0x905
 801a5c4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a5c6:	4c44      	ldr	r4, [pc, #272]	; (801a6d8 <RadioIrqProcess+0x42c>)
 801a5c8:	4b44      	ldr	r3, [pc, #272]	; (801a6dc <RadioIrqProcess+0x430>)
 801a5ca:	f640 1002 	movw	r0, #2306	; 0x902
 801a5ce:	4798      	blx	r3
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	f043 0301 	orr.w	r3, r3, #1
 801a5d6:	b2db      	uxtb	r3, r3
 801a5d8:	4619      	mov	r1, r3
 801a5da:	f640 1002 	movw	r0, #2306	; 0x902
 801a5de:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a5e0:	4b3c      	ldr	r3, [pc, #240]	; (801a6d4 <RadioIrqProcess+0x428>)
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	f240 2162 	movw	r1, #610	; 0x262
 801a5ee:	f240 2062 	movw	r0, #610	; 0x262
 801a5f2:	f001 f8c1 	bl	801b778 <SUBGRF_SetDioIrqParams>
        break;
 801a5f6:	e05f      	b.n	801a6b8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a5f8:	4b39      	ldr	r3, [pc, #228]	; (801a6e0 <RadioIrqProcess+0x434>)
 801a5fa:	2201      	movs	r2, #1
 801a5fc:	2100      	movs	r1, #0
 801a5fe:	2002      	movs	r0, #2
 801a600:	f003 f890 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a604:	f001 ff55 	bl	801c4b2 <RFW_Is_Init>
 801a608:	4603      	mov	r3, r0
 801a60a:	2b01      	cmp	r3, #1
 801a60c:	d156      	bne.n	801a6bc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a60e:	f001 ff86 	bl	801c51e <RFW_ReceivePayload>
        break;
 801a612:	e053      	b.n	801a6bc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a614:	4b33      	ldr	r3, [pc, #204]	; (801a6e4 <RadioIrqProcess+0x438>)
 801a616:	2201      	movs	r2, #1
 801a618:	2100      	movs	r1, #0
 801a61a:	2002      	movs	r0, #2
 801a61c:	f003 f882 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a620:	e051      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a622:	4831      	ldr	r0, [pc, #196]	; (801a6e8 <RadioIrqProcess+0x43c>)
 801a624:	f002 fe74 	bl	801d310 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a628:	4b2a      	ldr	r3, [pc, #168]	; (801a6d4 <RadioIrqProcess+0x428>)
 801a62a:	785b      	ldrb	r3, [r3, #1]
 801a62c:	f083 0301 	eor.w	r3, r3, #1
 801a630:	b2db      	uxtb	r3, r3
 801a632:	2b00      	cmp	r3, #0
 801a634:	d002      	beq.n	801a63c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a636:	2000      	movs	r0, #0
 801a638:	f000 feca 	bl	801b3d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a63c:	4b2b      	ldr	r3, [pc, #172]	; (801a6ec <RadioIrqProcess+0x440>)
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d03d      	beq.n	801a6c0 <RadioIrqProcess+0x414>
 801a644:	4b29      	ldr	r3, [pc, #164]	; (801a6ec <RadioIrqProcess+0x440>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	68db      	ldr	r3, [r3, #12]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d038      	beq.n	801a6c0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a64e:	4b27      	ldr	r3, [pc, #156]	; (801a6ec <RadioIrqProcess+0x440>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	68db      	ldr	r3, [r3, #12]
 801a654:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a656:	4b26      	ldr	r3, [pc, #152]	; (801a6f0 <RadioIrqProcess+0x444>)
 801a658:	2201      	movs	r2, #1
 801a65a:	2100      	movs	r1, #0
 801a65c:	2002      	movs	r0, #2
 801a65e:	f003 f861 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a662:	e02d      	b.n	801a6c0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a664:	4b23      	ldr	r3, [pc, #140]	; (801a6f4 <RadioIrqProcess+0x448>)
 801a666:	2201      	movs	r2, #1
 801a668:	2100      	movs	r1, #0
 801a66a:	2002      	movs	r0, #2
 801a66c:	f003 f85a 	bl	801d724 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a670:	4b18      	ldr	r3, [pc, #96]	; (801a6d4 <RadioIrqProcess+0x428>)
 801a672:	785b      	ldrb	r3, [r3, #1]
 801a674:	f083 0301 	eor.w	r3, r3, #1
 801a678:	b2db      	uxtb	r3, r3
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d002      	beq.n	801a684 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a67e:	2000      	movs	r0, #0
 801a680:	f000 fea6 	bl	801b3d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a684:	4b19      	ldr	r3, [pc, #100]	; (801a6ec <RadioIrqProcess+0x440>)
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d01b      	beq.n	801a6c4 <RadioIrqProcess+0x418>
 801a68c:	4b17      	ldr	r3, [pc, #92]	; (801a6ec <RadioIrqProcess+0x440>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	691b      	ldr	r3, [r3, #16]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d016      	beq.n	801a6c4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a696:	4b15      	ldr	r3, [pc, #84]	; (801a6ec <RadioIrqProcess+0x440>)
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	691b      	ldr	r3, [r3, #16]
 801a69c:	4798      	blx	r3
        break;
 801a69e:	e011      	b.n	801a6c4 <RadioIrqProcess+0x418>
        break;
 801a6a0:	bf00      	nop
 801a6a2:	e010      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6a4:	bf00      	nop
 801a6a6:	e00e      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6a8:	bf00      	nop
 801a6aa:	e00c      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6ac:	bf00      	nop
 801a6ae:	e00a      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6b0:	bf00      	nop
 801a6b2:	e008      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6b4:	bf00      	nop
 801a6b6:	e006      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6b8:	bf00      	nop
 801a6ba:	e004      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6bc:	bf00      	nop
 801a6be:	e002      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6c0:	bf00      	nop
 801a6c2:	e000      	b.n	801a6c6 <RadioIrqProcess+0x41a>
        break;
 801a6c4:	bf00      	nop
    }
}
 801a6c6:	bf00      	nop
 801a6c8:	3708      	adds	r7, #8
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bdb0      	pop	{r4, r5, r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	0801e580 	.word	0x0801e580
 801a6d4:	20001be8 	.word	0x20001be8
 801a6d8:	0801a0bb 	.word	0x0801a0bb
 801a6dc:	0801a0df 	.word	0x0801a0df
 801a6e0:	0801e58c 	.word	0x0801e58c
 801a6e4:	0801e598 	.word	0x0801e598
 801a6e8:	20001c5c 	.word	0x20001c5c
 801a6ec:	20001be4 	.word	0x20001be4
 801a6f0:	0801e5a4 	.word	0x0801e5a4
 801a6f4:	0801e5b0 	.word	0x0801e5b0

0801a6f8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a6fc:	4b09      	ldr	r3, [pc, #36]	; (801a724 <RadioTxPrbs+0x2c>)
 801a6fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a702:	2101      	movs	r1, #1
 801a704:	4618      	mov	r0, r3
 801a706:	f001 fcdb 	bl	801c0c0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a70a:	4b07      	ldr	r3, [pc, #28]	; (801a728 <RadioTxPrbs+0x30>)
 801a70c:	212d      	movs	r1, #45	; 0x2d
 801a70e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a712:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a714:	f000 ff1f 	bl	801b556 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a718:	4804      	ldr	r0, [pc, #16]	; (801a72c <RadioTxPrbs+0x34>)
 801a71a:	f000 fe75 	bl	801b408 <SUBGRF_SetTx>
}
 801a71e:	bf00      	nop
 801a720:	bd80      	pop	{r7, pc}
 801a722:	bf00      	nop
 801a724:	20001be8 	.word	0x20001be8
 801a728:	0801a0bb 	.word	0x0801a0bb
 801a72c:	000fffff 	.word	0x000fffff

0801a730 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b084      	sub	sp, #16
 801a734:	af00      	add	r7, sp, #0
 801a736:	4603      	mov	r3, r0
 801a738:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a73a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a73e:	4618      	mov	r0, r3
 801a740:	f001 fce6 	bl	801c110 <SUBGRF_SetRfTxPower>
 801a744:	4603      	mov	r3, r0
 801a746:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a748:	210e      	movs	r1, #14
 801a74a:	f640 101f 	movw	r0, #2335	; 0x91f
 801a74e:	f001 fbc3 	bl	801bed8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a752:	7bfb      	ldrb	r3, [r7, #15]
 801a754:	2101      	movs	r1, #1
 801a756:	4618      	mov	r0, r3
 801a758:	f001 fcb2 	bl	801c0c0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a75c:	f000 fef2 	bl	801b544 <SUBGRF_SetTxContinuousWave>
}
 801a760:	bf00      	nop
 801a762:	3710      	adds	r7, #16
 801a764:	46bd      	mov	sp, r7
 801a766:	bd80      	pop	{r7, pc}

0801a768 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a768:	b480      	push	{r7}
 801a76a:	b089      	sub	sp, #36	; 0x24
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	60f8      	str	r0, [r7, #12]
 801a770:	60b9      	str	r1, [r7, #8]
 801a772:	4613      	mov	r3, r2
 801a774:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a776:	2300      	movs	r3, #0
 801a778:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a77a:	2300      	movs	r3, #0
 801a77c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a77e:	2300      	movs	r3, #0
 801a780:	61bb      	str	r3, [r7, #24]
 801a782:	e011      	b.n	801a7a8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a784:	69bb      	ldr	r3, [r7, #24]
 801a786:	68ba      	ldr	r2, [r7, #8]
 801a788:	4413      	add	r3, r2
 801a78a:	781a      	ldrb	r2, [r3, #0]
 801a78c:	69bb      	ldr	r3, [r7, #24]
 801a78e:	68b9      	ldr	r1, [r7, #8]
 801a790:	440b      	add	r3, r1
 801a792:	43d2      	mvns	r2, r2
 801a794:	b2d2      	uxtb	r2, r2
 801a796:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a798:	69bb      	ldr	r3, [r7, #24]
 801a79a:	68fa      	ldr	r2, [r7, #12]
 801a79c:	4413      	add	r3, r2
 801a79e:	2200      	movs	r2, #0
 801a7a0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a7a2:	69bb      	ldr	r3, [r7, #24]
 801a7a4:	3301      	adds	r3, #1
 801a7a6:	61bb      	str	r3, [r7, #24]
 801a7a8:	79fb      	ldrb	r3, [r7, #7]
 801a7aa:	69ba      	ldr	r2, [r7, #24]
 801a7ac:	429a      	cmp	r2, r3
 801a7ae:	dbe9      	blt.n	801a784 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	61bb      	str	r3, [r7, #24]
 801a7b4:	e049      	b.n	801a84a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a7b6:	69bb      	ldr	r3, [r7, #24]
 801a7b8:	425a      	negs	r2, r3
 801a7ba:	f003 0307 	and.w	r3, r3, #7
 801a7be:	f002 0207 	and.w	r2, r2, #7
 801a7c2:	bf58      	it	pl
 801a7c4:	4253      	negpl	r3, r2
 801a7c6:	b2db      	uxtb	r3, r3
 801a7c8:	f1c3 0307 	rsb	r3, r3, #7
 801a7cc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a7ce:	69bb      	ldr	r3, [r7, #24]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	da00      	bge.n	801a7d6 <payload_integration+0x6e>
 801a7d4:	3307      	adds	r3, #7
 801a7d6:	10db      	asrs	r3, r3, #3
 801a7d8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a7da:	69bb      	ldr	r3, [r7, #24]
 801a7dc:	3301      	adds	r3, #1
 801a7de:	425a      	negs	r2, r3
 801a7e0:	f003 0307 	and.w	r3, r3, #7
 801a7e4:	f002 0207 	and.w	r2, r2, #7
 801a7e8:	bf58      	it	pl
 801a7ea:	4253      	negpl	r3, r2
 801a7ec:	b2db      	uxtb	r3, r3
 801a7ee:	f1c3 0307 	rsb	r3, r3, #7
 801a7f2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a7f4:	69bb      	ldr	r3, [r7, #24]
 801a7f6:	3301      	adds	r3, #1
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	da00      	bge.n	801a7fe <payload_integration+0x96>
 801a7fc:	3307      	adds	r3, #7
 801a7fe:	10db      	asrs	r3, r3, #3
 801a800:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a802:	7dbb      	ldrb	r3, [r7, #22]
 801a804:	68ba      	ldr	r2, [r7, #8]
 801a806:	4413      	add	r3, r2
 801a808:	781b      	ldrb	r3, [r3, #0]
 801a80a:	461a      	mov	r2, r3
 801a80c:	7dfb      	ldrb	r3, [r7, #23]
 801a80e:	fa42 f303 	asr.w	r3, r2, r3
 801a812:	b2db      	uxtb	r3, r3
 801a814:	f003 0301 	and.w	r3, r3, #1
 801a818:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a81a:	7ffa      	ldrb	r2, [r7, #31]
 801a81c:	7cfb      	ldrb	r3, [r7, #19]
 801a81e:	4053      	eors	r3, r2
 801a820:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a822:	7d3b      	ldrb	r3, [r7, #20]
 801a824:	68fa      	ldr	r2, [r7, #12]
 801a826:	4413      	add	r3, r2
 801a828:	781b      	ldrb	r3, [r3, #0]
 801a82a:	b25a      	sxtb	r2, r3
 801a82c:	7ff9      	ldrb	r1, [r7, #31]
 801a82e:	7d7b      	ldrb	r3, [r7, #21]
 801a830:	fa01 f303 	lsl.w	r3, r1, r3
 801a834:	b25b      	sxtb	r3, r3
 801a836:	4313      	orrs	r3, r2
 801a838:	b259      	sxtb	r1, r3
 801a83a:	7d3b      	ldrb	r3, [r7, #20]
 801a83c:	68fa      	ldr	r2, [r7, #12]
 801a83e:	4413      	add	r3, r2
 801a840:	b2ca      	uxtb	r2, r1
 801a842:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a844:	69bb      	ldr	r3, [r7, #24]
 801a846:	3301      	adds	r3, #1
 801a848:	61bb      	str	r3, [r7, #24]
 801a84a:	79fb      	ldrb	r3, [r7, #7]
 801a84c:	00db      	lsls	r3, r3, #3
 801a84e:	69ba      	ldr	r2, [r7, #24]
 801a850:	429a      	cmp	r2, r3
 801a852:	dbb0      	blt.n	801a7b6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a854:	7ffb      	ldrb	r3, [r7, #31]
 801a856:	01db      	lsls	r3, r3, #7
 801a858:	b25a      	sxtb	r2, r3
 801a85a:	7ffb      	ldrb	r3, [r7, #31]
 801a85c:	019b      	lsls	r3, r3, #6
 801a85e:	b25b      	sxtb	r3, r3
 801a860:	4313      	orrs	r3, r2
 801a862:	b25b      	sxtb	r3, r3
 801a864:	7ffa      	ldrb	r2, [r7, #31]
 801a866:	2a00      	cmp	r2, #0
 801a868:	d101      	bne.n	801a86e <payload_integration+0x106>
 801a86a:	2220      	movs	r2, #32
 801a86c:	e000      	b.n	801a870 <payload_integration+0x108>
 801a86e:	2200      	movs	r2, #0
 801a870:	4313      	orrs	r3, r2
 801a872:	b259      	sxtb	r1, r3
 801a874:	79fb      	ldrb	r3, [r7, #7]
 801a876:	68fa      	ldr	r2, [r7, #12]
 801a878:	4413      	add	r3, r2
 801a87a:	b2ca      	uxtb	r2, r1
 801a87c:	701a      	strb	r2, [r3, #0]
}
 801a87e:	bf00      	nop
 801a880:	3724      	adds	r7, #36	; 0x24
 801a882:	46bd      	mov	sp, r7
 801a884:	bc80      	pop	{r7}
 801a886:	4770      	bx	lr

0801a888 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b08c      	sub	sp, #48	; 0x30
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	60b9      	str	r1, [r7, #8]
 801a890:	607a      	str	r2, [r7, #4]
 801a892:	603b      	str	r3, [r7, #0]
 801a894:	4603      	mov	r3, r0
 801a896:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a898:	2300      	movs	r3, #0
 801a89a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801a89c:	2300      	movs	r3, #0
 801a89e:	623b      	str	r3, [r7, #32]
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a8a4:	f001 fdff 	bl	801c4a6 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d001      	beq.n	801a8b2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	bf14      	ite	ne
 801a8b8:	2301      	movne	r3, #1
 801a8ba:	2300      	moveq	r3, #0
 801a8bc:	b2da      	uxtb	r2, r3
 801a8be:	4ba3      	ldr	r3, [pc, #652]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a8c0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a8c2:	7bfb      	ldrb	r3, [r7, #15]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d003      	beq.n	801a8d0 <RadioSetRxGenericConfig+0x48>
 801a8c8:	2b01      	cmp	r3, #1
 801a8ca:	f000 80dc 	beq.w	801aa86 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a8ce:	e194      	b.n	801abfa <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	689b      	ldr	r3, [r3, #8]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d003      	beq.n	801a8e0 <RadioSetRxGenericConfig+0x58>
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	68db      	ldr	r3, [r3, #12]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d102      	bne.n	801a8e6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a8e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a8e4:	e18a      	b.n	801abfc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a8e6:	68bb      	ldr	r3, [r7, #8]
 801a8e8:	7f9b      	ldrb	r3, [r3, #30]
 801a8ea:	2b08      	cmp	r3, #8
 801a8ec:	d902      	bls.n	801a8f4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a8ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a8f2:	e183      	b.n	801abfc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a8f4:	68bb      	ldr	r3, [r7, #8]
 801a8f6:	6919      	ldr	r1, [r3, #16]
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	7f9b      	ldrb	r3, [r3, #30]
 801a8fc:	b29a      	uxth	r2, r3
 801a8fe:	f107 0320 	add.w	r3, r7, #32
 801a902:	4618      	mov	r0, r3
 801a904:	f001 fec2 	bl	801c68c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	bf14      	ite	ne
 801a910:	2301      	movne	r3, #1
 801a912:	2300      	moveq	r3, #0
 801a914:	b2db      	uxtb	r3, r3
 801a916:	4618      	mov	r0, r3
 801a918:	f000 fe26 	bl	801b568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a91c:	4b8b      	ldr	r3, [pc, #556]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a91e:	2200      	movs	r2, #0
 801a920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a924:	68bb      	ldr	r3, [r7, #8]
 801a926:	689b      	ldr	r3, [r3, #8]
 801a928:	4a88      	ldr	r2, [pc, #544]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a92a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a92c:	68bb      	ldr	r3, [r7, #8]
 801a92e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a932:	4b86      	ldr	r3, [pc, #536]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a938:	68bb      	ldr	r3, [r7, #8]
 801a93a:	685b      	ldr	r3, [r3, #4]
 801a93c:	4618      	mov	r0, r3
 801a93e:	f001 fce5 	bl	801c30c <SUBGRF_GetFskBandwidthRegValue>
 801a942:	4603      	mov	r3, r0
 801a944:	461a      	mov	r2, r3
 801a946:	4b81      	ldr	r3, [pc, #516]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a94c:	4b7f      	ldr	r3, [pc, #508]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a94e:	2200      	movs	r2, #0
 801a950:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a952:	68bb      	ldr	r3, [r7, #8]
 801a954:	68db      	ldr	r3, [r3, #12]
 801a956:	b29b      	uxth	r3, r3
 801a958:	00db      	lsls	r3, r3, #3
 801a95a:	b29a      	uxth	r2, r3
 801a95c:	4b7b      	ldr	r3, [pc, #492]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a95e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	7fda      	ldrb	r2, [r3, #31]
 801a964:	4b79      	ldr	r3, [pc, #484]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a966:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	7f9b      	ldrb	r3, [r3, #30]
 801a96c:	00db      	lsls	r3, r3, #3
 801a96e:	b2da      	uxtb	r2, r3
 801a970:	4b76      	ldr	r3, [pc, #472]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a972:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a974:	68bb      	ldr	r3, [r7, #8]
 801a976:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a97a:	4b74      	ldr	r3, [pc, #464]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a97c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a984:	2b00      	cmp	r3, #0
 801a986:	d105      	bne.n	801a994 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	695b      	ldr	r3, [r3, #20]
 801a98c:	b2da      	uxtb	r2, r3
 801a98e:	4b6f      	ldr	r3, [pc, #444]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a990:	759a      	strb	r2, [r3, #22]
 801a992:	e00b      	b.n	801a9ac <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a99a:	2b02      	cmp	r3, #2
 801a99c:	d103      	bne.n	801a9a6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a99e:	4b6b      	ldr	r3, [pc, #428]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a9a0:	22ff      	movs	r2, #255	; 0xff
 801a9a2:	759a      	strb	r2, [r3, #22]
 801a9a4:	e002      	b.n	801a9ac <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a9a6:	4b69      	ldr	r3, [pc, #420]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801a9a8:	22ff      	movs	r2, #255	; 0xff
 801a9aa:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a9ac:	68bb      	ldr	r3, [r7, #8]
 801a9ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a9b2:	2b02      	cmp	r3, #2
 801a9b4:	d004      	beq.n	801a9c0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a9bc:	2b02      	cmp	r3, #2
 801a9be:	d12d      	bne.n	801aa1c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a9c6:	2bf1      	cmp	r3, #241	; 0xf1
 801a9c8:	d00c      	beq.n	801a9e4 <RadioSetRxGenericConfig+0x15c>
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a9d0:	2bf2      	cmp	r3, #242	; 0xf2
 801a9d2:	d007      	beq.n	801a9e4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a9da:	2b01      	cmp	r3, #1
 801a9dc:	d002      	beq.n	801a9e4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801a9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a9e2:	e10b      	b.n	801abfc <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a9ec:	4b58      	ldr	r3, [pc, #352]	; (801ab50 <RadioSetRxGenericConfig+0x2c8>)
 801a9ee:	6819      	ldr	r1, [r3, #0]
 801a9f0:	f107 0314 	add.w	r3, r7, #20
 801a9f4:	4a57      	ldr	r2, [pc, #348]	; (801ab54 <RadioSetRxGenericConfig+0x2cc>)
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f001 fd48 	bl	801c48c <RFW_Init>
 801a9fc:	4603      	mov	r3, r0
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d002      	beq.n	801aa08 <RadioSetRxGenericConfig+0x180>
                return -1;
 801aa02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa06:	e0f9      	b.n	801abfc <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801aa08:	4b50      	ldr	r3, [pc, #320]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801aa0e:	4b4f      	ldr	r3, [pc, #316]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aa10:	2201      	movs	r2, #1
 801aa12:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801aa14:	4b4d      	ldr	r3, [pc, #308]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aa16:	2200      	movs	r2, #0
 801aa18:	755a      	strb	r2, [r3, #21]
        {
 801aa1a:	e00e      	b.n	801aa3a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801aa22:	4b4a      	ldr	r3, [pc, #296]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aa24:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801aa2c:	4b47      	ldr	r3, [pc, #284]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aa2e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801aa30:	68bb      	ldr	r3, [r7, #8]
 801aa32:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801aa36:	4b45      	ldr	r3, [pc, #276]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aa38:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801aa3a:	f7ff fa3c 	bl	8019eb6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801aa3e:	2000      	movs	r0, #0
 801aa40:	f7fe fbd0 	bl	80191e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa44:	4844      	ldr	r0, [pc, #272]	; (801ab58 <RadioSetRxGenericConfig+0x2d0>)
 801aa46:	f001 f82d 	bl	801baa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa4a:	4844      	ldr	r0, [pc, #272]	; (801ab5c <RadioSetRxGenericConfig+0x2d4>)
 801aa4c:	f001 f8fc 	bl	801bc48 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801aa50:	f107 0320 	add.w	r3, r7, #32
 801aa54:	4618      	mov	r0, r3
 801aa56:	f000 fbc0 	bl	801b1da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801aa5a:	68bb      	ldr	r3, [r7, #8]
 801aa5c:	8b9b      	ldrh	r3, [r3, #28]
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f000 fc0a 	bl	801b278 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	8b1b      	ldrh	r3, [r3, #24]
 801aa68:	4618      	mov	r0, r3
 801aa6a:	f000 fbe5 	bl	801b238 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801aa6e:	683b      	ldr	r3, [r7, #0]
 801aa70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801aa74:	fb03 f202 	mul.w	r2, r3, r2
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	689b      	ldr	r3, [r3, #8]
 801aa7c:	fbb2 f3f3 	udiv	r3, r2, r3
 801aa80:	4a32      	ldr	r2, [pc, #200]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aa82:	6093      	str	r3, [r2, #8]
        break;
 801aa84:	e0b9      	b.n	801abfa <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d102      	bne.n	801aa94 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801aa8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa92:	e0b3      	b.n	801abfc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801aa9a:	2b01      	cmp	r3, #1
 801aa9c:	d104      	bne.n	801aaa8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801aa9e:	68bb      	ldr	r3, [r7, #8]
 801aaa0:	695b      	ldr	r3, [r3, #20]
 801aaa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801aaa6:	e002      	b.n	801aaae <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801aaa8:	23ff      	movs	r3, #255	; 0xff
 801aaaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801aaae:	68bb      	ldr	r3, [r7, #8]
 801aab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	bf14      	ite	ne
 801aab6:	2301      	movne	r3, #1
 801aab8:	2300      	moveq	r3, #0
 801aaba:	b2db      	uxtb	r3, r3
 801aabc:	4618      	mov	r0, r3
 801aabe:	f000 fd53 	bl	801b568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	b2db      	uxtb	r3, r3
 801aac6:	4618      	mov	r0, r3
 801aac8:	f000 fd5d 	bl	801b586 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801aacc:	4b1f      	ldr	r3, [pc, #124]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aace:	2201      	movs	r2, #1
 801aad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801aada:	4b1c      	ldr	r3, [pc, #112]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aadc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801aae6:	4b19      	ldr	r3, [pc, #100]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801aaf2:	4b16      	ldr	r3, [pc, #88]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801aaf4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801aaf8:	68bb      	ldr	r3, [r7, #8]
 801aafa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801aafe:	2b02      	cmp	r3, #2
 801ab00:	d010      	beq.n	801ab24 <RadioSetRxGenericConfig+0x29c>
 801ab02:	2b02      	cmp	r3, #2
 801ab04:	dc2c      	bgt.n	801ab60 <RadioSetRxGenericConfig+0x2d8>
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d002      	beq.n	801ab10 <RadioSetRxGenericConfig+0x288>
 801ab0a:	2b01      	cmp	r3, #1
 801ab0c:	d005      	beq.n	801ab1a <RadioSetRxGenericConfig+0x292>
            break;
 801ab0e:	e027      	b.n	801ab60 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ab10:	4b0e      	ldr	r3, [pc, #56]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801ab12:	2200      	movs	r2, #0
 801ab14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab18:	e023      	b.n	801ab62 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ab1a:	4b0c      	ldr	r3, [pc, #48]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801ab1c:	2201      	movs	r2, #1
 801ab1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab22:	e01e      	b.n	801ab62 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ab24:	68bb      	ldr	r3, [r7, #8]
 801ab26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ab2a:	2b0b      	cmp	r3, #11
 801ab2c:	d004      	beq.n	801ab38 <RadioSetRxGenericConfig+0x2b0>
 801ab2e:	68bb      	ldr	r3, [r7, #8]
 801ab30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ab34:	2b0c      	cmp	r3, #12
 801ab36:	d104      	bne.n	801ab42 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ab38:	4b04      	ldr	r3, [pc, #16]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801ab3a:	2201      	movs	r2, #1
 801ab3c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab40:	e00f      	b.n	801ab62 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ab42:	4b02      	ldr	r3, [pc, #8]	; (801ab4c <RadioSetRxGenericConfig+0x2c4>)
 801ab44:	2200      	movs	r2, #0
 801ab46:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ab4a:	e00a      	b.n	801ab62 <RadioSetRxGenericConfig+0x2da>
 801ab4c:	20001be8 	.word	0x20001be8
 801ab50:	20001be4 	.word	0x20001be4
 801ab54:	20001c5c 	.word	0x20001c5c
 801ab58:	20001c20 	.word	0x20001c20
 801ab5c:	20001bf6 	.word	0x20001bf6
            break;
 801ab60:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ab62:	4b28      	ldr	r3, [pc, #160]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801ab64:	2201      	movs	r2, #1
 801ab66:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801ab6c:	4b25      	ldr	r3, [pc, #148]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801ab6e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ab70:	68bb      	ldr	r3, [r7, #8]
 801ab72:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801ab76:	4b23      	ldr	r3, [pc, #140]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801ab78:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801ab7a:	4a22      	ldr	r2, [pc, #136]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801ab7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ab80:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ab82:	68bb      	ldr	r3, [r7, #8]
 801ab84:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801ab88:	4b1e      	ldr	r3, [pc, #120]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801ab8a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ab8e:	68bb      	ldr	r3, [r7, #8]
 801ab90:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801ab94:	4b1b      	ldr	r3, [pc, #108]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801ab96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ab9a:	f7ff f98c 	bl	8019eb6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ab9e:	2001      	movs	r0, #1
 801aba0:	f7fe fb20 	bl	80191e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aba4:	4818      	ldr	r0, [pc, #96]	; (801ac08 <RadioSetRxGenericConfig+0x380>)
 801aba6:	f000 ff7d 	bl	801baa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abaa:	4818      	ldr	r0, [pc, #96]	; (801ac0c <RadioSetRxGenericConfig+0x384>)
 801abac:	f001 f84c 	bl	801bc48 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801abb0:	4b14      	ldr	r3, [pc, #80]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801abb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801abb6:	2b01      	cmp	r3, #1
 801abb8:	d10d      	bne.n	801abd6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801abba:	f240 7036 	movw	r0, #1846	; 0x736
 801abbe:	f001 f99f 	bl	801bf00 <SUBGRF_ReadRegister>
 801abc2:	4603      	mov	r3, r0
 801abc4:	f023 0304 	bic.w	r3, r3, #4
 801abc8:	b2db      	uxtb	r3, r3
 801abca:	4619      	mov	r1, r3
 801abcc:	f240 7036 	movw	r0, #1846	; 0x736
 801abd0:	f001 f982 	bl	801bed8 <SUBGRF_WriteRegister>
 801abd4:	e00c      	b.n	801abf0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801abd6:	f240 7036 	movw	r0, #1846	; 0x736
 801abda:	f001 f991 	bl	801bf00 <SUBGRF_ReadRegister>
 801abde:	4603      	mov	r3, r0
 801abe0:	f043 0304 	orr.w	r3, r3, #4
 801abe4:	b2db      	uxtb	r3, r3
 801abe6:	4619      	mov	r1, r3
 801abe8:	f240 7036 	movw	r0, #1846	; 0x736
 801abec:	f001 f974 	bl	801bed8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801abf0:	4b04      	ldr	r3, [pc, #16]	; (801ac04 <RadioSetRxGenericConfig+0x37c>)
 801abf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801abf6:	609a      	str	r2, [r3, #8]
        break;
 801abf8:	bf00      	nop
    }
    return status;
 801abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801abfc:	4618      	mov	r0, r3
 801abfe:	3730      	adds	r7, #48	; 0x30
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}
 801ac04:	20001be8 	.word	0x20001be8
 801ac08:	20001c20 	.word	0x20001c20
 801ac0c:	20001bf6 	.word	0x20001bf6

0801ac10 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b08e      	sub	sp, #56	; 0x38
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	60b9      	str	r1, [r7, #8]
 801ac18:	607b      	str	r3, [r7, #4]
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	73fb      	strb	r3, [r7, #15]
 801ac1e:	4613      	mov	r3, r2
 801ac20:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ac22:	2300      	movs	r3, #0
 801ac24:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ac26:	2300      	movs	r3, #0
 801ac28:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ac2a:	f001 fc3c 	bl	801c4a6 <RFW_DeInit>
    switch( modem )
 801ac2e:	7bfb      	ldrb	r3, [r7, #15]
 801ac30:	2b03      	cmp	r3, #3
 801ac32:	f200 8204 	bhi.w	801b03e <RadioSetTxGenericConfig+0x42e>
 801ac36:	a201      	add	r2, pc, #4	; (adr r2, 801ac3c <RadioSetTxGenericConfig+0x2c>)
 801ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac3c:	0801adc1 	.word	0x0801adc1
 801ac40:	0801af09 	.word	0x0801af09
 801ac44:	0801b001 	.word	0x0801b001
 801ac48:	0801ac4d 	.word	0x0801ac4d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ac4c:	68bb      	ldr	r3, [r7, #8]
 801ac4e:	7c9b      	ldrb	r3, [r3, #18]
 801ac50:	2b08      	cmp	r3, #8
 801ac52:	d902      	bls.n	801ac5a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ac54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac58:	e206      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	6899      	ldr	r1, [r3, #8]
 801ac5e:	68bb      	ldr	r3, [r7, #8]
 801ac60:	7c9b      	ldrb	r3, [r3, #18]
 801ac62:	b29a      	uxth	r2, r3
 801ac64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f001 fd0f 	bl	801c68c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801ac6e:	68bb      	ldr	r3, [r7, #8]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d102      	bne.n	801ac7c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801ac76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac7a:	e1f5      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801ac7c:	68bb      	ldr	r3, [r7, #8]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	f242 7210 	movw	r2, #10000	; 0x2710
 801ac84:	4293      	cmp	r3, r2
 801ac86:	d813      	bhi.n	801acb0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801ac88:	2302      	movs	r3, #2
 801ac8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801ac8e:	4b99      	ldr	r3, [pc, #612]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ac90:	2203      	movs	r2, #3
 801ac92:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801ac94:	4b97      	ldr	r3, [pc, #604]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ac96:	2203      	movs	r2, #3
 801ac98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	4a94      	ldr	r2, [pc, #592]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801aca2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	7cda      	ldrb	r2, [r3, #19]
 801aca8:	4b92      	ldr	r3, [pc, #584]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801acae:	e017      	b.n	801ace0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801acb0:	2300      	movs	r3, #0
 801acb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801acb6:	4b8f      	ldr	r3, [pc, #572]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acb8:	2200      	movs	r2, #0
 801acba:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801acbc:	4b8d      	ldr	r3, [pc, #564]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acbe:	2200      	movs	r2, #0
 801acc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801acc4:	68bb      	ldr	r3, [r7, #8]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	4a8a      	ldr	r2, [pc, #552]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acca:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	7cda      	ldrb	r2, [r3, #19]
 801acd0:	4b88      	ldr	r3, [pc, #544]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801acd6:	68bb      	ldr	r3, [r7, #8]
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	089b      	lsrs	r3, r3, #2
 801acdc:	4a85      	ldr	r2, [pc, #532]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acde:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801ace0:	68bb      	ldr	r3, [r7, #8]
 801ace2:	685b      	ldr	r3, [r3, #4]
 801ace4:	b29b      	uxth	r3, r3
 801ace6:	00db      	lsls	r3, r3, #3
 801ace8:	b29a      	uxth	r2, r3
 801acea:	4b82      	ldr	r3, [pc, #520]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acec:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801acee:	4b81      	ldr	r3, [pc, #516]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acf0:	2204      	movs	r2, #4
 801acf2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801acf4:	68bb      	ldr	r3, [r7, #8]
 801acf6:	7c9b      	ldrb	r3, [r3, #18]
 801acf8:	00db      	lsls	r3, r3, #3
 801acfa:	b2da      	uxtb	r2, r3
 801acfc:	4b7d      	ldr	r3, [pc, #500]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801acfe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ad00:	4b7c      	ldr	r3, [pc, #496]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ad02:	2200      	movs	r2, #0
 801ad04:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ad06:	68bb      	ldr	r3, [r7, #8]
 801ad08:	7d9b      	ldrb	r3, [r3, #22]
 801ad0a:	2b02      	cmp	r3, #2
 801ad0c:	d003      	beq.n	801ad16 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ad0e:	68bb      	ldr	r3, [r7, #8]
 801ad10:	7d1b      	ldrb	r3, [r3, #20]
 801ad12:	2b02      	cmp	r3, #2
 801ad14:	d12b      	bne.n	801ad6e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ad16:	68bb      	ldr	r3, [r7, #8]
 801ad18:	7d5b      	ldrb	r3, [r3, #21]
 801ad1a:	2bf1      	cmp	r3, #241	; 0xf1
 801ad1c:	d00a      	beq.n	801ad34 <RadioSetTxGenericConfig+0x124>
 801ad1e:	68bb      	ldr	r3, [r7, #8]
 801ad20:	7d5b      	ldrb	r3, [r3, #21]
 801ad22:	2bf2      	cmp	r3, #242	; 0xf2
 801ad24:	d006      	beq.n	801ad34 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ad26:	68bb      	ldr	r3, [r7, #8]
 801ad28:	7d5b      	ldrb	r3, [r3, #21]
 801ad2a:	2b01      	cmp	r3, #1
 801ad2c:	d002      	beq.n	801ad34 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801ad2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad32:	e199      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801ad38:	2301      	movs	r3, #1
 801ad3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ad3e:	4b6e      	ldr	r3, [pc, #440]	; (801aef8 <RadioSetTxGenericConfig+0x2e8>)
 801ad40:	6819      	ldr	r1, [r3, #0]
 801ad42:	f107 0320 	add.w	r3, r7, #32
 801ad46:	4a6d      	ldr	r2, [pc, #436]	; (801aefc <RadioSetTxGenericConfig+0x2ec>)
 801ad48:	4618      	mov	r0, r3
 801ad4a:	f001 fb9f 	bl	801c48c <RFW_Init>
 801ad4e:	4603      	mov	r3, r0
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d002      	beq.n	801ad5a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801ad54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad58:	e186      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ad5a:	4b66      	ldr	r3, [pc, #408]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ad60:	4b64      	ldr	r3, [pc, #400]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ad62:	2201      	movs	r2, #1
 801ad64:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ad66:	4b63      	ldr	r3, [pc, #396]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ad68:	2200      	movs	r2, #0
 801ad6a:	755a      	strb	r2, [r3, #21]
        {
 801ad6c:	e00b      	b.n	801ad86 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	7d5a      	ldrb	r2, [r3, #21]
 801ad72:	4b60      	ldr	r3, [pc, #384]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ad74:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801ad76:	68bb      	ldr	r3, [r7, #8]
 801ad78:	7d9a      	ldrb	r2, [r3, #22]
 801ad7a:	4b5e      	ldr	r3, [pc, #376]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ad7c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801ad7e:	68bb      	ldr	r3, [r7, #8]
 801ad80:	7d1a      	ldrb	r2, [r3, #20]
 801ad82:	4b5c      	ldr	r3, [pc, #368]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ad84:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ad86:	f7ff f896 	bl	8019eb6 <RadioStandby>
        RadioSetModem( radio_modem );
 801ad8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7fe fa28 	bl	80191e4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad94:	485a      	ldr	r0, [pc, #360]	; (801af00 <RadioSetTxGenericConfig+0x2f0>)
 801ad96:	f000 fe85 	bl	801baa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ad9a:	485a      	ldr	r0, [pc, #360]	; (801af04 <RadioSetTxGenericConfig+0x2f4>)
 801ad9c:	f000 ff54 	bl	801bc48 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ada0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ada4:	4618      	mov	r0, r3
 801ada6:	f000 fa18 	bl	801b1da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	8a1b      	ldrh	r3, [r3, #16]
 801adae:	4618      	mov	r0, r3
 801adb0:	f000 fa62 	bl	801b278 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801adb4:	68bb      	ldr	r3, [r7, #8]
 801adb6:	899b      	ldrh	r3, [r3, #12]
 801adb8:	4618      	mov	r0, r3
 801adba:	f000 fa3d 	bl	801b238 <SUBGRF_SetCrcPolynomial>
        break;
 801adbe:	e13f      	b.n	801b040 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801adc0:	68bb      	ldr	r3, [r7, #8]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d102      	bne.n	801adce <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801adc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801adcc:	e14c      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	7c9b      	ldrb	r3, [r3, #18]
 801add2:	2b08      	cmp	r3, #8
 801add4:	d902      	bls.n	801addc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801add6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801adda:	e145      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	6899      	ldr	r1, [r3, #8]
 801ade0:	68bb      	ldr	r3, [r7, #8]
 801ade2:	7c9b      	ldrb	r3, [r3, #18]
 801ade4:	b29a      	uxth	r2, r3
 801ade6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801adea:	4618      	mov	r0, r3
 801adec:	f001 fc4e 	bl	801c68c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801adf0:	4b40      	ldr	r3, [pc, #256]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801adf2:	2200      	movs	r2, #0
 801adf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801adf8:	68bb      	ldr	r3, [r7, #8]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	4a3d      	ldr	r2, [pc, #244]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801adfe:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ae00:	68bb      	ldr	r3, [r7, #8]
 801ae02:	7cda      	ldrb	r2, [r3, #19]
 801ae04:	4b3b      	ldr	r3, [pc, #236]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801ae0a:	68bb      	ldr	r3, [r7, #8]
 801ae0c:	699b      	ldr	r3, [r3, #24]
 801ae0e:	4a39      	ldr	r2, [pc, #228]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae10:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ae12:	4b38      	ldr	r3, [pc, #224]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae14:	2200      	movs	r2, #0
 801ae16:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801ae18:	68bb      	ldr	r3, [r7, #8]
 801ae1a:	685b      	ldr	r3, [r3, #4]
 801ae1c:	b29b      	uxth	r3, r3
 801ae1e:	00db      	lsls	r3, r3, #3
 801ae20:	b29a      	uxth	r2, r3
 801ae22:	4b34      	ldr	r3, [pc, #208]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae24:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ae26:	4b33      	ldr	r3, [pc, #204]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae28:	2204      	movs	r2, #4
 801ae2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	7c9b      	ldrb	r3, [r3, #18]
 801ae30:	00db      	lsls	r3, r3, #3
 801ae32:	b2da      	uxtb	r2, r3
 801ae34:	4b2f      	ldr	r3, [pc, #188]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ae38:	4b2e      	ldr	r3, [pc, #184]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	7d9b      	ldrb	r3, [r3, #22]
 801ae42:	2b02      	cmp	r3, #2
 801ae44:	d003      	beq.n	801ae4e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ae46:	68bb      	ldr	r3, [r7, #8]
 801ae48:	7d1b      	ldrb	r3, [r3, #20]
 801ae4a:	2b02      	cmp	r3, #2
 801ae4c:	d12a      	bne.n	801aea4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	7d5b      	ldrb	r3, [r3, #21]
 801ae52:	2bf1      	cmp	r3, #241	; 0xf1
 801ae54:	d00a      	beq.n	801ae6c <RadioSetTxGenericConfig+0x25c>
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	7d5b      	ldrb	r3, [r3, #21]
 801ae5a:	2bf2      	cmp	r3, #242	; 0xf2
 801ae5c:	d006      	beq.n	801ae6c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	7d5b      	ldrb	r3, [r3, #21]
 801ae62:	2b01      	cmp	r3, #1
 801ae64:	d002      	beq.n	801ae6c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801ae66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae6a:	e0fd      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801ae6c:	2301      	movs	r3, #1
 801ae6e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ae74:	4b20      	ldr	r3, [pc, #128]	; (801aef8 <RadioSetTxGenericConfig+0x2e8>)
 801ae76:	6819      	ldr	r1, [r3, #0]
 801ae78:	f107 0314 	add.w	r3, r7, #20
 801ae7c:	4a1f      	ldr	r2, [pc, #124]	; (801aefc <RadioSetTxGenericConfig+0x2ec>)
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f001 fb04 	bl	801c48c <RFW_Init>
 801ae84:	4603      	mov	r3, r0
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d002      	beq.n	801ae90 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801ae8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae8e:	e0eb      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ae90:	4b18      	ldr	r3, [pc, #96]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae92:	2200      	movs	r2, #0
 801ae94:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ae96:	4b17      	ldr	r3, [pc, #92]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae98:	2201      	movs	r2, #1
 801ae9a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ae9c:	4b15      	ldr	r3, [pc, #84]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801ae9e:	2200      	movs	r2, #0
 801aea0:	755a      	strb	r2, [r3, #21]
        {
 801aea2:	e00b      	b.n	801aebc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801aea4:	68bb      	ldr	r3, [r7, #8]
 801aea6:	7d5a      	ldrb	r2, [r3, #21]
 801aea8:	4b12      	ldr	r3, [pc, #72]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801aeaa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	7d9a      	ldrb	r2, [r3, #22]
 801aeb0:	4b10      	ldr	r3, [pc, #64]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801aeb2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801aeb4:	68bb      	ldr	r3, [r7, #8]
 801aeb6:	7d1a      	ldrb	r2, [r3, #20]
 801aeb8:	4b0e      	ldr	r3, [pc, #56]	; (801aef4 <RadioSetTxGenericConfig+0x2e4>)
 801aeba:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801aebc:	f7fe fffb 	bl	8019eb6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801aec0:	2000      	movs	r0, #0
 801aec2:	f7fe f98f 	bl	80191e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aec6:	480e      	ldr	r0, [pc, #56]	; (801af00 <RadioSetTxGenericConfig+0x2f0>)
 801aec8:	f000 fdec 	bl	801baa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aecc:	480d      	ldr	r0, [pc, #52]	; (801af04 <RadioSetTxGenericConfig+0x2f4>)
 801aece:	f000 febb 	bl	801bc48 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801aed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aed6:	4618      	mov	r0, r3
 801aed8:	f000 f97f 	bl	801b1da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801aedc:	68bb      	ldr	r3, [r7, #8]
 801aede:	8a1b      	ldrh	r3, [r3, #16]
 801aee0:	4618      	mov	r0, r3
 801aee2:	f000 f9c9 	bl	801b278 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801aee6:	68bb      	ldr	r3, [r7, #8]
 801aee8:	899b      	ldrh	r3, [r3, #12]
 801aeea:	4618      	mov	r0, r3
 801aeec:	f000 f9a4 	bl	801b238 <SUBGRF_SetCrcPolynomial>
        break;
 801aef0:	e0a6      	b.n	801b040 <RadioSetTxGenericConfig+0x430>
 801aef2:	bf00      	nop
 801aef4:	20001be8 	.word	0x20001be8
 801aef8:	20001be4 	.word	0x20001be4
 801aefc:	20001c44 	.word	0x20001c44
 801af00:	20001c20 	.word	0x20001c20
 801af04:	20001bf6 	.word	0x20001bf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801af08:	4b59      	ldr	r3, [pc, #356]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af0a:	2201      	movs	r2, #1
 801af0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	781a      	ldrb	r2, [r3, #0]
 801af14:	4b56      	ldr	r3, [pc, #344]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801af1a:	68bb      	ldr	r3, [r7, #8]
 801af1c:	785a      	ldrb	r2, [r3, #1]
 801af1e:	4b54      	ldr	r3, [pc, #336]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	789a      	ldrb	r2, [r3, #2]
 801af28:	4b51      	ldr	r3, [pc, #324]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801af2e:	68bb      	ldr	r3, [r7, #8]
 801af30:	78db      	ldrb	r3, [r3, #3]
 801af32:	2b02      	cmp	r3, #2
 801af34:	d010      	beq.n	801af58 <RadioSetTxGenericConfig+0x348>
 801af36:	2b02      	cmp	r3, #2
 801af38:	dc20      	bgt.n	801af7c <RadioSetTxGenericConfig+0x36c>
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d002      	beq.n	801af44 <RadioSetTxGenericConfig+0x334>
 801af3e:	2b01      	cmp	r3, #1
 801af40:	d005      	beq.n	801af4e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801af42:	e01b      	b.n	801af7c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801af44:	4b4a      	ldr	r3, [pc, #296]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af46:	2200      	movs	r2, #0
 801af48:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801af4c:	e017      	b.n	801af7e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801af4e:	4b48      	ldr	r3, [pc, #288]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af50:	2201      	movs	r2, #1
 801af52:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801af56:	e012      	b.n	801af7e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	781b      	ldrb	r3, [r3, #0]
 801af5c:	2b0b      	cmp	r3, #11
 801af5e:	d003      	beq.n	801af68 <RadioSetTxGenericConfig+0x358>
 801af60:	68bb      	ldr	r3, [r7, #8]
 801af62:	781b      	ldrb	r3, [r3, #0]
 801af64:	2b0c      	cmp	r3, #12
 801af66:	d104      	bne.n	801af72 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801af68:	4b41      	ldr	r3, [pc, #260]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af6a:	2201      	movs	r2, #1
 801af6c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801af70:	e005      	b.n	801af7e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801af72:	4b3f      	ldr	r3, [pc, #252]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af74:	2200      	movs	r2, #0
 801af76:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801af7a:	e000      	b.n	801af7e <RadioSetTxGenericConfig+0x36e>
            break;
 801af7c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801af7e:	4b3c      	ldr	r3, [pc, #240]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af80:	2201      	movs	r2, #1
 801af82:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801af84:	68bb      	ldr	r3, [r7, #8]
 801af86:	889a      	ldrh	r2, [r3, #4]
 801af88:	4b39      	ldr	r3, [pc, #228]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af8a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801af8c:	68bb      	ldr	r3, [r7, #8]
 801af8e:	799a      	ldrb	r2, [r3, #6]
 801af90:	4b37      	ldr	r3, [pc, #220]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af92:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801af94:	68bb      	ldr	r3, [r7, #8]
 801af96:	79da      	ldrb	r2, [r3, #7]
 801af98:	4b35      	ldr	r3, [pc, #212]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801af9a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801af9e:	68bb      	ldr	r3, [r7, #8]
 801afa0:	7a1a      	ldrb	r2, [r3, #8]
 801afa2:	4b33      	ldr	r3, [pc, #204]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801afa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801afa8:	f7fe ff85 	bl	8019eb6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801afac:	2001      	movs	r0, #1
 801afae:	f7fe f919 	bl	80191e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801afb2:	4830      	ldr	r0, [pc, #192]	; (801b074 <RadioSetTxGenericConfig+0x464>)
 801afb4:	f000 fd76 	bl	801baa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afb8:	482f      	ldr	r0, [pc, #188]	; (801b078 <RadioSetTxGenericConfig+0x468>)
 801afba:	f000 fe45 	bl	801bc48 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801afbe:	4b2c      	ldr	r3, [pc, #176]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801afc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801afc4:	2b06      	cmp	r3, #6
 801afc6:	d10d      	bne.n	801afe4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801afc8:	f640 0089 	movw	r0, #2185	; 0x889
 801afcc:	f000 ff98 	bl	801bf00 <SUBGRF_ReadRegister>
 801afd0:	4603      	mov	r3, r0
 801afd2:	f023 0304 	bic.w	r3, r3, #4
 801afd6:	b2db      	uxtb	r3, r3
 801afd8:	4619      	mov	r1, r3
 801afda:	f640 0089 	movw	r0, #2185	; 0x889
 801afde:	f000 ff7b 	bl	801bed8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801afe2:	e02d      	b.n	801b040 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801afe4:	f640 0089 	movw	r0, #2185	; 0x889
 801afe8:	f000 ff8a 	bl	801bf00 <SUBGRF_ReadRegister>
 801afec:	4603      	mov	r3, r0
 801afee:	f043 0304 	orr.w	r3, r3, #4
 801aff2:	b2db      	uxtb	r3, r3
 801aff4:	4619      	mov	r1, r3
 801aff6:	f640 0089 	movw	r0, #2185	; 0x889
 801affa:	f000 ff6d 	bl	801bed8 <SUBGRF_WriteRegister>
        break;
 801affe:	e01f      	b.n	801b040 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d004      	beq.n	801b012 <RadioSetTxGenericConfig+0x402>
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b010:	d902      	bls.n	801b018 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b016:	e027      	b.n	801b068 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b018:	2003      	movs	r0, #3
 801b01a:	f7fe f8e3 	bl	80191e4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b01e:	4b14      	ldr	r3, [pc, #80]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801b020:	2202      	movs	r2, #2
 801b022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b026:	68bb      	ldr	r3, [r7, #8]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	4a11      	ldr	r2, [pc, #68]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801b02c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b02e:	4b10      	ldr	r3, [pc, #64]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801b030:	2216      	movs	r2, #22
 801b032:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b036:	480f      	ldr	r0, [pc, #60]	; (801b074 <RadioSetTxGenericConfig+0x464>)
 801b038:	f000 fd34 	bl	801baa4 <SUBGRF_SetModulationParams>
        break;
 801b03c:	e000      	b.n	801b040 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801b03e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b044:	4618      	mov	r0, r3
 801b046:	f001 f863 	bl	801c110 <SUBGRF_SetRfTxPower>
 801b04a:	4603      	mov	r3, r0
 801b04c:	461a      	mov	r2, r3
 801b04e:	4b08      	ldr	r3, [pc, #32]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801b050:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b054:	4b06      	ldr	r3, [pc, #24]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801b056:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b05a:	4618      	mov	r0, r3
 801b05c:	f001 fa37 	bl	801c4ce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b060:	4a03      	ldr	r2, [pc, #12]	; (801b070 <RadioSetTxGenericConfig+0x460>)
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	6053      	str	r3, [r2, #4]
    return 0;
 801b066:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b068:	4618      	mov	r0, r3
 801b06a:	3738      	adds	r7, #56	; 0x38
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}
 801b070:	20001be8 	.word	0x20001be8
 801b074:	20001c20 	.word	0x20001c20
 801b078:	20001bf6 	.word	0x20001bf6

0801b07c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801b07c:	b480      	push	{r7}
 801b07e:	b085      	sub	sp, #20
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b084:	2301      	movs	r3, #1
 801b086:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801b088:	7bfb      	ldrb	r3, [r7, #15]
}
 801b08a:	4618      	mov	r0, r3
 801b08c:	3714      	adds	r7, #20
 801b08e:	46bd      	mov	sp, r7
 801b090:	bc80      	pop	{r7}
 801b092:	4770      	bx	lr

0801b094 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801b094:	b480      	push	{r7}
 801b096:	b083      	sub	sp, #12
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]
 801b09c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b09e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	370c      	adds	r7, #12
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bc80      	pop	{r7}
 801b0a8:	4770      	bx	lr
	...

0801b0ac <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b084      	sub	sp, #16
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d002      	beq.n	801b0c0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b0ba:	4a1d      	ldr	r2, [pc, #116]	; (801b130 <SUBGRF_Init+0x84>)
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b0c0:	f7e6 fed8 	bl	8001e74 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b0c4:	2002      	movs	r0, #2
 801b0c6:	f001 f8ff 	bl	801c2c8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b0ca:	4b1a      	ldr	r3, [pc, #104]	; (801b134 <SUBGRF_Init+0x88>)
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b0d0:	2000      	movs	r0, #0
 801b0d2:	f000 f97d 	bl	801b3d0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b0d6:	f7ef ff73 	bl	800afc0 <RBI_IsTCXO>
 801b0da:	4603      	mov	r3, r0
 801b0dc:	2b01      	cmp	r3, #1
 801b0de:	d10e      	bne.n	801b0fe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b0e0:	2140      	movs	r1, #64	; 0x40
 801b0e2:	2001      	movs	r0, #1
 801b0e4:	f000 fb82 	bl	801b7ec <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b0e8:	2100      	movs	r1, #0
 801b0ea:	f640 1011 	movw	r0, #2321	; 0x911
 801b0ee:	f000 fef3 	bl	801bed8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b0f2:	237f      	movs	r3, #127	; 0x7f
 801b0f4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b0f6:	7b38      	ldrb	r0, [r7, #12]
 801b0f8:	f000 fa8b 	bl	801b612 <SUBGRF_Calibrate>
 801b0fc:	e009      	b.n	801b112 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b0fe:	2120      	movs	r1, #32
 801b100:	f640 1011 	movw	r0, #2321	; 0x911
 801b104:	f000 fee8 	bl	801bed8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b108:	2120      	movs	r1, #32
 801b10a:	f640 1012 	movw	r0, #2322	; 0x912
 801b10e:	f000 fee3 	bl	801bed8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b112:	210e      	movs	r1, #14
 801b114:	f640 101f 	movw	r0, #2335	; 0x91f
 801b118:	f000 fede 	bl	801bed8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801b11c:	f7ef ff34 	bl	800af88 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b120:	4b05      	ldr	r3, [pc, #20]	; (801b138 <SUBGRF_Init+0x8c>)
 801b122:	2201      	movs	r2, #1
 801b124:	701a      	strb	r2, [r3, #0]
}
 801b126:	bf00      	nop
 801b128:	3710      	adds	r7, #16
 801b12a:	46bd      	mov	sp, r7
 801b12c:	bd80      	pop	{r7, pc}
 801b12e:	bf00      	nop
 801b130:	20001c80 	.word	0x20001c80
 801b134:	20001c7c 	.word	0x20001c7c
 801b138:	20001c74 	.word	0x20001c74

0801b13c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b13c:	b480      	push	{r7}
 801b13e:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b140:	4b02      	ldr	r3, [pc, #8]	; (801b14c <SUBGRF_GetOperatingMode+0x10>)
 801b142:	781b      	ldrb	r3, [r3, #0]
}
 801b144:	4618      	mov	r0, r3
 801b146:	46bd      	mov	sp, r7
 801b148:	bc80      	pop	{r7}
 801b14a:	4770      	bx	lr
 801b14c:	20001c74 	.word	0x20001c74

0801b150 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b150:	b580      	push	{r7, lr}
 801b152:	b082      	sub	sp, #8
 801b154:	af00      	add	r7, sp, #0
 801b156:	6078      	str	r0, [r7, #4]
 801b158:	460b      	mov	r3, r1
 801b15a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b15c:	78fb      	ldrb	r3, [r7, #3]
 801b15e:	461a      	mov	r2, r3
 801b160:	6879      	ldr	r1, [r7, #4]
 801b162:	2000      	movs	r0, #0
 801b164:	f000 ff24 	bl	801bfb0 <SUBGRF_WriteBuffer>
}
 801b168:	bf00      	nop
 801b16a:	3708      	adds	r7, #8
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}

0801b170 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b086      	sub	sp, #24
 801b174:	af00      	add	r7, sp, #0
 801b176:	60f8      	str	r0, [r7, #12]
 801b178:	60b9      	str	r1, [r7, #8]
 801b17a:	4613      	mov	r3, r2
 801b17c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b17e:	2300      	movs	r3, #0
 801b180:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b182:	f107 0317 	add.w	r3, r7, #23
 801b186:	4619      	mov	r1, r3
 801b188:	68b8      	ldr	r0, [r7, #8]
 801b18a:	f000 fe27 	bl	801bddc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b18e:	68bb      	ldr	r3, [r7, #8]
 801b190:	781b      	ldrb	r3, [r3, #0]
 801b192:	79fa      	ldrb	r2, [r7, #7]
 801b194:	429a      	cmp	r2, r3
 801b196:	d201      	bcs.n	801b19c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b198:	2301      	movs	r3, #1
 801b19a:	e007      	b.n	801b1ac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b19c:	7df8      	ldrb	r0, [r7, #23]
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	781b      	ldrb	r3, [r3, #0]
 801b1a2:	461a      	mov	r2, r3
 801b1a4:	68f9      	ldr	r1, [r7, #12]
 801b1a6:	f000 ff25 	bl	801bff4 <SUBGRF_ReadBuffer>

    return 0;
 801b1aa:	2300      	movs	r3, #0
}
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	3718      	adds	r7, #24
 801b1b0:	46bd      	mov	sp, r7
 801b1b2:	bd80      	pop	{r7, pc}

0801b1b4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b084      	sub	sp, #16
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	60f8      	str	r0, [r7, #12]
 801b1bc:	460b      	mov	r3, r1
 801b1be:	607a      	str	r2, [r7, #4]
 801b1c0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b1c2:	7afb      	ldrb	r3, [r7, #11]
 801b1c4:	4619      	mov	r1, r3
 801b1c6:	68f8      	ldr	r0, [r7, #12]
 801b1c8:	f7ff ffc2 	bl	801b150 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	f000 f91b 	bl	801b408 <SUBGRF_SetTx>
}
 801b1d2:	bf00      	nop
 801b1d4:	3710      	adds	r7, #16
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	bd80      	pop	{r7, pc}

0801b1da <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b1da:	b580      	push	{r7, lr}
 801b1dc:	b082      	sub	sp, #8
 801b1de:	af00      	add	r7, sp, #0
 801b1e0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b1e2:	2208      	movs	r2, #8
 801b1e4:	6879      	ldr	r1, [r7, #4]
 801b1e6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b1ea:	f000 fe9d 	bl	801bf28 <SUBGRF_WriteRegisters>
    return 0;
 801b1ee:	2300      	movs	r3, #0
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	3708      	adds	r7, #8
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	bd80      	pop	{r7, pc}

0801b1f8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b084      	sub	sp, #16
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	4603      	mov	r3, r0
 801b200:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b202:	88fb      	ldrh	r3, [r7, #6]
 801b204:	0a1b      	lsrs	r3, r3, #8
 801b206:	b29b      	uxth	r3, r3
 801b208:	b2db      	uxtb	r3, r3
 801b20a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b20c:	88fb      	ldrh	r3, [r7, #6]
 801b20e:	b2db      	uxtb	r3, r3
 801b210:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b212:	f000 fb6f 	bl	801b8f4 <SUBGRF_GetPacketType>
 801b216:	4603      	mov	r3, r0
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d108      	bne.n	801b22e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b21c:	f107 030c 	add.w	r3, r7, #12
 801b220:	2202      	movs	r2, #2
 801b222:	4619      	mov	r1, r3
 801b224:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801b228:	f000 fe7e 	bl	801bf28 <SUBGRF_WriteRegisters>
            break;
 801b22c:	e000      	b.n	801b230 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b22e:	bf00      	nop
    }
}
 801b230:	bf00      	nop
 801b232:	3710      	adds	r7, #16
 801b234:	46bd      	mov	sp, r7
 801b236:	bd80      	pop	{r7, pc}

0801b238 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b084      	sub	sp, #16
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	4603      	mov	r3, r0
 801b240:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b242:	88fb      	ldrh	r3, [r7, #6]
 801b244:	0a1b      	lsrs	r3, r3, #8
 801b246:	b29b      	uxth	r3, r3
 801b248:	b2db      	uxtb	r3, r3
 801b24a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b24c:	88fb      	ldrh	r3, [r7, #6]
 801b24e:	b2db      	uxtb	r3, r3
 801b250:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b252:	f000 fb4f 	bl	801b8f4 <SUBGRF_GetPacketType>
 801b256:	4603      	mov	r3, r0
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d108      	bne.n	801b26e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b25c:	f107 030c 	add.w	r3, r7, #12
 801b260:	2202      	movs	r2, #2
 801b262:	4619      	mov	r1, r3
 801b264:	f240 60be 	movw	r0, #1726	; 0x6be
 801b268:	f000 fe5e 	bl	801bf28 <SUBGRF_WriteRegisters>
            break;
 801b26c:	e000      	b.n	801b270 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b26e:	bf00      	nop
    }
}
 801b270:	bf00      	nop
 801b272:	3710      	adds	r7, #16
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}

0801b278 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b084      	sub	sp, #16
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	4603      	mov	r3, r0
 801b280:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b282:	2300      	movs	r3, #0
 801b284:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b286:	f000 fb35 	bl	801b8f4 <SUBGRF_GetPacketType>
 801b28a:	4603      	mov	r3, r0
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d121      	bne.n	801b2d4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b290:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b294:	f000 fe34 	bl	801bf00 <SUBGRF_ReadRegister>
 801b298:	4603      	mov	r3, r0
 801b29a:	f023 0301 	bic.w	r3, r3, #1
 801b29e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b2a0:	88fb      	ldrh	r3, [r7, #6]
 801b2a2:	0a1b      	lsrs	r3, r3, #8
 801b2a4:	b29b      	uxth	r3, r3
 801b2a6:	b25b      	sxtb	r3, r3
 801b2a8:	f003 0301 	and.w	r3, r3, #1
 801b2ac:	b25a      	sxtb	r2, r3
 801b2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b2b2:	4313      	orrs	r3, r2
 801b2b4:	b25b      	sxtb	r3, r3
 801b2b6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b2b8:	7bfb      	ldrb	r3, [r7, #15]
 801b2ba:	4619      	mov	r1, r3
 801b2bc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b2c0:	f000 fe0a 	bl	801bed8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b2c4:	88fb      	ldrh	r3, [r7, #6]
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	4619      	mov	r1, r3
 801b2ca:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801b2ce:	f000 fe03 	bl	801bed8 <SUBGRF_WriteRegister>
            break;
 801b2d2:	e000      	b.n	801b2d6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b2d4:	bf00      	nop
    }
}
 801b2d6:	bf00      	nop
 801b2d8:	3710      	adds	r7, #16
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}

0801b2de <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b2de:	b580      	push	{r7, lr}
 801b2e0:	b082      	sub	sp, #8
 801b2e2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b2f0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b2f4:	f000 fe04 	bl	801bf00 <SUBGRF_ReadRegister>
 801b2f8:	4603      	mov	r3, r0
 801b2fa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b2fc:	79fb      	ldrb	r3, [r7, #7]
 801b2fe:	f023 0301 	bic.w	r3, r3, #1
 801b302:	b2db      	uxtb	r3, r3
 801b304:	4619      	mov	r1, r3
 801b306:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b30a:	f000 fde5 	bl	801bed8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b30e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b312:	f000 fdf5 	bl	801bf00 <SUBGRF_ReadRegister>
 801b316:	4603      	mov	r3, r0
 801b318:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b31a:	79bb      	ldrb	r3, [r7, #6]
 801b31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b320:	b2db      	uxtb	r3, r3
 801b322:	4619      	mov	r1, r3
 801b324:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b328:	f000 fdd6 	bl	801bed8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b32c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b330:	f000 f88a 	bl	801b448 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b334:	463b      	mov	r3, r7
 801b336:	2204      	movs	r2, #4
 801b338:	4619      	mov	r1, r3
 801b33a:	f640 0019 	movw	r0, #2073	; 0x819
 801b33e:	f000 fe15 	bl	801bf6c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b342:	2000      	movs	r0, #0
 801b344:	f000 f844 	bl	801b3d0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b348:	79fb      	ldrb	r3, [r7, #7]
 801b34a:	4619      	mov	r1, r3
 801b34c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b350:	f000 fdc2 	bl	801bed8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b354:	79bb      	ldrb	r3, [r7, #6]
 801b356:	4619      	mov	r1, r3
 801b358:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b35c:	f000 fdbc 	bl	801bed8 <SUBGRF_WriteRegister>

    return number;
 801b360:	683b      	ldr	r3, [r7, #0]
}
 801b362:	4618      	mov	r0, r3
 801b364:	3708      	adds	r7, #8
 801b366:	46bd      	mov	sp, r7
 801b368:	bd80      	pop	{r7, pc}
	...

0801b36c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b36c:	b580      	push	{r7, lr}
 801b36e:	b084      	sub	sp, #16
 801b370:	af00      	add	r7, sp, #0
 801b372:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b374:	2000      	movs	r0, #0
 801b376:	f7ef fe0e 	bl	800af96 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b37a:	2002      	movs	r0, #2
 801b37c:	f000 ffa4 	bl	801c2c8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b380:	793b      	ldrb	r3, [r7, #4]
 801b382:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b386:	b2db      	uxtb	r3, r3
 801b388:	009b      	lsls	r3, r3, #2
 801b38a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b38c:	793b      	ldrb	r3, [r7, #4]
 801b38e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b392:	b2db      	uxtb	r3, r3
 801b394:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b396:	b25b      	sxtb	r3, r3
 801b398:	4313      	orrs	r3, r2
 801b39a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b39c:	793b      	ldrb	r3, [r7, #4]
 801b39e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b3a2:	b2db      	uxtb	r3, r3
 801b3a4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b3a6:	4313      	orrs	r3, r2
 801b3a8:	b25b      	sxtb	r3, r3
 801b3aa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b3ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b3ae:	f107 030f 	add.w	r3, r7, #15
 801b3b2:	2201      	movs	r2, #1
 801b3b4:	4619      	mov	r1, r3
 801b3b6:	2084      	movs	r0, #132	; 0x84
 801b3b8:	f000 fe3e 	bl	801c038 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b3bc:	4b03      	ldr	r3, [pc, #12]	; (801b3cc <SUBGRF_SetSleep+0x60>)
 801b3be:	2200      	movs	r2, #0
 801b3c0:	701a      	strb	r2, [r3, #0]
}
 801b3c2:	bf00      	nop
 801b3c4:	3710      	adds	r7, #16
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}
 801b3ca:	bf00      	nop
 801b3cc:	20001c74 	.word	0x20001c74

0801b3d0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b082      	sub	sp, #8
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b3da:	1dfb      	adds	r3, r7, #7
 801b3dc:	2201      	movs	r2, #1
 801b3de:	4619      	mov	r1, r3
 801b3e0:	2080      	movs	r0, #128	; 0x80
 801b3e2:	f000 fe29 	bl	801c038 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b3e6:	79fb      	ldrb	r3, [r7, #7]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d103      	bne.n	801b3f4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b3ec:	4b05      	ldr	r3, [pc, #20]	; (801b404 <SUBGRF_SetStandby+0x34>)
 801b3ee:	2201      	movs	r2, #1
 801b3f0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b3f2:	e002      	b.n	801b3fa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b3f4:	4b03      	ldr	r3, [pc, #12]	; (801b404 <SUBGRF_SetStandby+0x34>)
 801b3f6:	2202      	movs	r2, #2
 801b3f8:	701a      	strb	r2, [r3, #0]
}
 801b3fa:	bf00      	nop
 801b3fc:	3708      	adds	r7, #8
 801b3fe:	46bd      	mov	sp, r7
 801b400:	bd80      	pop	{r7, pc}
 801b402:	bf00      	nop
 801b404:	20001c74 	.word	0x20001c74

0801b408 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b084      	sub	sp, #16
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b410:	4b0c      	ldr	r3, [pc, #48]	; (801b444 <SUBGRF_SetTx+0x3c>)
 801b412:	2204      	movs	r2, #4
 801b414:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	0c1b      	lsrs	r3, r3, #16
 801b41a:	b2db      	uxtb	r3, r3
 801b41c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	0a1b      	lsrs	r3, r3, #8
 801b422:	b2db      	uxtb	r3, r3
 801b424:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	b2db      	uxtb	r3, r3
 801b42a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b42c:	f107 030c 	add.w	r3, r7, #12
 801b430:	2203      	movs	r2, #3
 801b432:	4619      	mov	r1, r3
 801b434:	2083      	movs	r0, #131	; 0x83
 801b436:	f000 fdff 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b43a:	bf00      	nop
 801b43c:	3710      	adds	r7, #16
 801b43e:	46bd      	mov	sp, r7
 801b440:	bd80      	pop	{r7, pc}
 801b442:	bf00      	nop
 801b444:	20001c74 	.word	0x20001c74

0801b448 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b084      	sub	sp, #16
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b450:	4b0c      	ldr	r3, [pc, #48]	; (801b484 <SUBGRF_SetRx+0x3c>)
 801b452:	2205      	movs	r2, #5
 801b454:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	0c1b      	lsrs	r3, r3, #16
 801b45a:	b2db      	uxtb	r3, r3
 801b45c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	0a1b      	lsrs	r3, r3, #8
 801b462:	b2db      	uxtb	r3, r3
 801b464:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	b2db      	uxtb	r3, r3
 801b46a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b46c:	f107 030c 	add.w	r3, r7, #12
 801b470:	2203      	movs	r2, #3
 801b472:	4619      	mov	r1, r3
 801b474:	2082      	movs	r0, #130	; 0x82
 801b476:	f000 fddf 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b47a:	bf00      	nop
 801b47c:	3710      	adds	r7, #16
 801b47e:	46bd      	mov	sp, r7
 801b480:	bd80      	pop	{r7, pc}
 801b482:	bf00      	nop
 801b484:	20001c74 	.word	0x20001c74

0801b488 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b488:	b580      	push	{r7, lr}
 801b48a:	b084      	sub	sp, #16
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b490:	4b0e      	ldr	r3, [pc, #56]	; (801b4cc <SUBGRF_SetRxBoosted+0x44>)
 801b492:	2205      	movs	r2, #5
 801b494:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b496:	2197      	movs	r1, #151	; 0x97
 801b498:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b49c:	f000 fd1c 	bl	801bed8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	0c1b      	lsrs	r3, r3, #16
 801b4a4:	b2db      	uxtb	r3, r3
 801b4a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	0a1b      	lsrs	r3, r3, #8
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	b2db      	uxtb	r3, r3
 801b4b4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b4b6:	f107 030c 	add.w	r3, r7, #12
 801b4ba:	2203      	movs	r2, #3
 801b4bc:	4619      	mov	r1, r3
 801b4be:	2082      	movs	r0, #130	; 0x82
 801b4c0:	f000 fdba 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b4c4:	bf00      	nop
 801b4c6:	3710      	adds	r7, #16
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bd80      	pop	{r7, pc}
 801b4cc:	20001c74 	.word	0x20001c74

0801b4d0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b084      	sub	sp, #16
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
 801b4d8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	0c1b      	lsrs	r3, r3, #16
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	0a1b      	lsrs	r3, r3, #8
 801b4e6:	b2db      	uxtb	r3, r3
 801b4e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	b2db      	uxtb	r3, r3
 801b4ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b4f0:	683b      	ldr	r3, [r7, #0]
 801b4f2:	0c1b      	lsrs	r3, r3, #16
 801b4f4:	b2db      	uxtb	r3, r3
 801b4f6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b4f8:	683b      	ldr	r3, [r7, #0]
 801b4fa:	0a1b      	lsrs	r3, r3, #8
 801b4fc:	b2db      	uxtb	r3, r3
 801b4fe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b500:	683b      	ldr	r3, [r7, #0]
 801b502:	b2db      	uxtb	r3, r3
 801b504:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b506:	f107 0308 	add.w	r3, r7, #8
 801b50a:	2206      	movs	r2, #6
 801b50c:	4619      	mov	r1, r3
 801b50e:	2094      	movs	r0, #148	; 0x94
 801b510:	f000 fd92 	bl	801c038 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b514:	4b03      	ldr	r3, [pc, #12]	; (801b524 <SUBGRF_SetRxDutyCycle+0x54>)
 801b516:	2206      	movs	r2, #6
 801b518:	701a      	strb	r2, [r3, #0]
}
 801b51a:	bf00      	nop
 801b51c:	3710      	adds	r7, #16
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd80      	pop	{r7, pc}
 801b522:	bf00      	nop
 801b524:	20001c74 	.word	0x20001c74

0801b528 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b52c:	2200      	movs	r2, #0
 801b52e:	2100      	movs	r1, #0
 801b530:	20c5      	movs	r0, #197	; 0xc5
 801b532:	f000 fd81 	bl	801c038 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b536:	4b02      	ldr	r3, [pc, #8]	; (801b540 <SUBGRF_SetCad+0x18>)
 801b538:	2207      	movs	r2, #7
 801b53a:	701a      	strb	r2, [r3, #0]
}
 801b53c:	bf00      	nop
 801b53e:	bd80      	pop	{r7, pc}
 801b540:	20001c74 	.word	0x20001c74

0801b544 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b544:	b580      	push	{r7, lr}
 801b546:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b548:	2200      	movs	r2, #0
 801b54a:	2100      	movs	r1, #0
 801b54c:	20d1      	movs	r0, #209	; 0xd1
 801b54e:	f000 fd73 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b552:	bf00      	nop
 801b554:	bd80      	pop	{r7, pc}

0801b556 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b556:	b580      	push	{r7, lr}
 801b558:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b55a:	2200      	movs	r2, #0
 801b55c:	2100      	movs	r1, #0
 801b55e:	20d2      	movs	r0, #210	; 0xd2
 801b560:	f000 fd6a 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b564:	bf00      	nop
 801b566:	bd80      	pop	{r7, pc}

0801b568 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b082      	sub	sp, #8
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	4603      	mov	r3, r0
 801b570:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b572:	1dfb      	adds	r3, r7, #7
 801b574:	2201      	movs	r2, #1
 801b576:	4619      	mov	r1, r3
 801b578:	209f      	movs	r0, #159	; 0x9f
 801b57a:	f000 fd5d 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b57e:	bf00      	nop
 801b580:	3708      	adds	r7, #8
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}

0801b586 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b586:	b580      	push	{r7, lr}
 801b588:	b084      	sub	sp, #16
 801b58a:	af00      	add	r7, sp, #0
 801b58c:	4603      	mov	r3, r0
 801b58e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b590:	1dfb      	adds	r3, r7, #7
 801b592:	2201      	movs	r2, #1
 801b594:	4619      	mov	r1, r3
 801b596:	20a0      	movs	r0, #160	; 0xa0
 801b598:	f000 fd4e 	bl	801c038 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b59c:	79fb      	ldrb	r3, [r7, #7]
 801b59e:	2b3f      	cmp	r3, #63	; 0x3f
 801b5a0:	d91c      	bls.n	801b5dc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b5a2:	79fb      	ldrb	r3, [r7, #7]
 801b5a4:	085b      	lsrs	r3, r3, #1
 801b5a6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b5b0:	e005      	b.n	801b5be <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b5b2:	7bfb      	ldrb	r3, [r7, #15]
 801b5b4:	089b      	lsrs	r3, r3, #2
 801b5b6:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b5b8:	7bbb      	ldrb	r3, [r7, #14]
 801b5ba:	3301      	adds	r3, #1
 801b5bc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b5be:	7bfb      	ldrb	r3, [r7, #15]
 801b5c0:	2b1f      	cmp	r3, #31
 801b5c2:	d8f6      	bhi.n	801b5b2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b5c4:	7bfb      	ldrb	r3, [r7, #15]
 801b5c6:	00db      	lsls	r3, r3, #3
 801b5c8:	b2da      	uxtb	r2, r3
 801b5ca:	7bbb      	ldrb	r3, [r7, #14]
 801b5cc:	4413      	add	r3, r2
 801b5ce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b5d0:	7b7b      	ldrb	r3, [r7, #13]
 801b5d2:	4619      	mov	r1, r3
 801b5d4:	f240 7006 	movw	r0, #1798	; 0x706
 801b5d8:	f000 fc7e 	bl	801bed8 <SUBGRF_WriteRegister>
    }
}
 801b5dc:	bf00      	nop
 801b5de:	3710      	adds	r7, #16
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd80      	pop	{r7, pc}

0801b5e4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b082      	sub	sp, #8
 801b5e8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b5ea:	f7ef fcf0 	bl	800afce <RBI_IsDCDC>
 801b5ee:	4603      	mov	r3, r0
 801b5f0:	2b01      	cmp	r3, #1
 801b5f2:	d102      	bne.n	801b5fa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b5f4:	2301      	movs	r3, #1
 801b5f6:	71fb      	strb	r3, [r7, #7]
 801b5f8:	e001      	b.n	801b5fe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b5fe:	1dfb      	adds	r3, r7, #7
 801b600:	2201      	movs	r2, #1
 801b602:	4619      	mov	r1, r3
 801b604:	2096      	movs	r0, #150	; 0x96
 801b606:	f000 fd17 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b60a:	bf00      	nop
 801b60c:	3708      	adds	r7, #8
 801b60e:	46bd      	mov	sp, r7
 801b610:	bd80      	pop	{r7, pc}

0801b612 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b612:	b580      	push	{r7, lr}
 801b614:	b084      	sub	sp, #16
 801b616:	af00      	add	r7, sp, #0
 801b618:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b61a:	793b      	ldrb	r3, [r7, #4]
 801b61c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b620:	b2db      	uxtb	r3, r3
 801b622:	019b      	lsls	r3, r3, #6
 801b624:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b626:	793b      	ldrb	r3, [r7, #4]
 801b628:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b62c:	b2db      	uxtb	r3, r3
 801b62e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b630:	b25b      	sxtb	r3, r3
 801b632:	4313      	orrs	r3, r2
 801b634:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b636:	793b      	ldrb	r3, [r7, #4]
 801b638:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b63c:	b2db      	uxtb	r3, r3
 801b63e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b640:	b25b      	sxtb	r3, r3
 801b642:	4313      	orrs	r3, r2
 801b644:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b646:	793b      	ldrb	r3, [r7, #4]
 801b648:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b650:	b25b      	sxtb	r3, r3
 801b652:	4313      	orrs	r3, r2
 801b654:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b656:	793b      	ldrb	r3, [r7, #4]
 801b658:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b65c:	b2db      	uxtb	r3, r3
 801b65e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b660:	b25b      	sxtb	r3, r3
 801b662:	4313      	orrs	r3, r2
 801b664:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b666:	793b      	ldrb	r3, [r7, #4]
 801b668:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b66c:	b2db      	uxtb	r3, r3
 801b66e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b670:	b25b      	sxtb	r3, r3
 801b672:	4313      	orrs	r3, r2
 801b674:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b676:	793b      	ldrb	r3, [r7, #4]
 801b678:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b67c:	b2db      	uxtb	r3, r3
 801b67e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b680:	4313      	orrs	r3, r2
 801b682:	b25b      	sxtb	r3, r3
 801b684:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b686:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b688:	f107 030f 	add.w	r3, r7, #15
 801b68c:	2201      	movs	r2, #1
 801b68e:	4619      	mov	r1, r3
 801b690:	2089      	movs	r0, #137	; 0x89
 801b692:	f000 fcd1 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b696:	bf00      	nop
 801b698:	3710      	adds	r7, #16
 801b69a:	46bd      	mov	sp, r7
 801b69c:	bd80      	pop	{r7, pc}
	...

0801b6a0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	b084      	sub	sp, #16
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	4a1d      	ldr	r2, [pc, #116]	; (801b720 <SUBGRF_CalibrateImage+0x80>)
 801b6ac:	4293      	cmp	r3, r2
 801b6ae:	d904      	bls.n	801b6ba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b6b0:	23e1      	movs	r3, #225	; 0xe1
 801b6b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b6b4:	23e9      	movs	r3, #233	; 0xe9
 801b6b6:	737b      	strb	r3, [r7, #13]
 801b6b8:	e027      	b.n	801b70a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	4a19      	ldr	r2, [pc, #100]	; (801b724 <SUBGRF_CalibrateImage+0x84>)
 801b6be:	4293      	cmp	r3, r2
 801b6c0:	d904      	bls.n	801b6cc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b6c2:	23d7      	movs	r3, #215	; 0xd7
 801b6c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b6c6:	23db      	movs	r3, #219	; 0xdb
 801b6c8:	737b      	strb	r3, [r7, #13]
 801b6ca:	e01e      	b.n	801b70a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	4a16      	ldr	r2, [pc, #88]	; (801b728 <SUBGRF_CalibrateImage+0x88>)
 801b6d0:	4293      	cmp	r3, r2
 801b6d2:	d904      	bls.n	801b6de <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b6d4:	23c1      	movs	r3, #193	; 0xc1
 801b6d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b6d8:	23c5      	movs	r3, #197	; 0xc5
 801b6da:	737b      	strb	r3, [r7, #13]
 801b6dc:	e015      	b.n	801b70a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	4a12      	ldr	r2, [pc, #72]	; (801b72c <SUBGRF_CalibrateImage+0x8c>)
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	d904      	bls.n	801b6f0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b6e6:	2375      	movs	r3, #117	; 0x75
 801b6e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b6ea:	2381      	movs	r3, #129	; 0x81
 801b6ec:	737b      	strb	r3, [r7, #13]
 801b6ee:	e00c      	b.n	801b70a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	4a0f      	ldr	r2, [pc, #60]	; (801b730 <SUBGRF_CalibrateImage+0x90>)
 801b6f4:	4293      	cmp	r3, r2
 801b6f6:	d904      	bls.n	801b702 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b6f8:	236b      	movs	r3, #107	; 0x6b
 801b6fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b6fc:	236f      	movs	r3, #111	; 0x6f
 801b6fe:	737b      	strb	r3, [r7, #13]
 801b700:	e003      	b.n	801b70a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b702:	2329      	movs	r3, #41	; 0x29
 801b704:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b706:	232b      	movs	r3, #43	; 0x2b
 801b708:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b70a:	f107 030c 	add.w	r3, r7, #12
 801b70e:	2202      	movs	r2, #2
 801b710:	4619      	mov	r1, r3
 801b712:	2098      	movs	r0, #152	; 0x98
 801b714:	f000 fc90 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b718:	bf00      	nop
 801b71a:	3710      	adds	r7, #16
 801b71c:	46bd      	mov	sp, r7
 801b71e:	bd80      	pop	{r7, pc}
 801b720:	35a4e900 	.word	0x35a4e900
 801b724:	32a9f880 	.word	0x32a9f880
 801b728:	2de54480 	.word	0x2de54480
 801b72c:	1b6b0b00 	.word	0x1b6b0b00
 801b730:	1954fc40 	.word	0x1954fc40

0801b734 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b734:	b590      	push	{r4, r7, lr}
 801b736:	b085      	sub	sp, #20
 801b738:	af00      	add	r7, sp, #0
 801b73a:	4604      	mov	r4, r0
 801b73c:	4608      	mov	r0, r1
 801b73e:	4611      	mov	r1, r2
 801b740:	461a      	mov	r2, r3
 801b742:	4623      	mov	r3, r4
 801b744:	71fb      	strb	r3, [r7, #7]
 801b746:	4603      	mov	r3, r0
 801b748:	71bb      	strb	r3, [r7, #6]
 801b74a:	460b      	mov	r3, r1
 801b74c:	717b      	strb	r3, [r7, #5]
 801b74e:	4613      	mov	r3, r2
 801b750:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b752:	79fb      	ldrb	r3, [r7, #7]
 801b754:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b756:	79bb      	ldrb	r3, [r7, #6]
 801b758:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b75a:	797b      	ldrb	r3, [r7, #5]
 801b75c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b75e:	793b      	ldrb	r3, [r7, #4]
 801b760:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b762:	f107 030c 	add.w	r3, r7, #12
 801b766:	2204      	movs	r2, #4
 801b768:	4619      	mov	r1, r3
 801b76a:	2095      	movs	r0, #149	; 0x95
 801b76c:	f000 fc64 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b770:	bf00      	nop
 801b772:	3714      	adds	r7, #20
 801b774:	46bd      	mov	sp, r7
 801b776:	bd90      	pop	{r4, r7, pc}

0801b778 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b778:	b590      	push	{r4, r7, lr}
 801b77a:	b085      	sub	sp, #20
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	4604      	mov	r4, r0
 801b780:	4608      	mov	r0, r1
 801b782:	4611      	mov	r1, r2
 801b784:	461a      	mov	r2, r3
 801b786:	4623      	mov	r3, r4
 801b788:	80fb      	strh	r3, [r7, #6]
 801b78a:	4603      	mov	r3, r0
 801b78c:	80bb      	strh	r3, [r7, #4]
 801b78e:	460b      	mov	r3, r1
 801b790:	807b      	strh	r3, [r7, #2]
 801b792:	4613      	mov	r3, r2
 801b794:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b796:	88fb      	ldrh	r3, [r7, #6]
 801b798:	0a1b      	lsrs	r3, r3, #8
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	b2db      	uxtb	r3, r3
 801b79e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b7a0:	88fb      	ldrh	r3, [r7, #6]
 801b7a2:	b2db      	uxtb	r3, r3
 801b7a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b7a6:	88bb      	ldrh	r3, [r7, #4]
 801b7a8:	0a1b      	lsrs	r3, r3, #8
 801b7aa:	b29b      	uxth	r3, r3
 801b7ac:	b2db      	uxtb	r3, r3
 801b7ae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b7b0:	88bb      	ldrh	r3, [r7, #4]
 801b7b2:	b2db      	uxtb	r3, r3
 801b7b4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b7b6:	887b      	ldrh	r3, [r7, #2]
 801b7b8:	0a1b      	lsrs	r3, r3, #8
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	b2db      	uxtb	r3, r3
 801b7be:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b7c0:	887b      	ldrh	r3, [r7, #2]
 801b7c2:	b2db      	uxtb	r3, r3
 801b7c4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b7c6:	883b      	ldrh	r3, [r7, #0]
 801b7c8:	0a1b      	lsrs	r3, r3, #8
 801b7ca:	b29b      	uxth	r3, r3
 801b7cc:	b2db      	uxtb	r3, r3
 801b7ce:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b7d0:	883b      	ldrh	r3, [r7, #0]
 801b7d2:	b2db      	uxtb	r3, r3
 801b7d4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b7d6:	f107 0308 	add.w	r3, r7, #8
 801b7da:	2208      	movs	r2, #8
 801b7dc:	4619      	mov	r1, r3
 801b7de:	2008      	movs	r0, #8
 801b7e0:	f000 fc2a 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b7e4:	bf00      	nop
 801b7e6:	3714      	adds	r7, #20
 801b7e8:	46bd      	mov	sp, r7
 801b7ea:	bd90      	pop	{r4, r7, pc}

0801b7ec <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b084      	sub	sp, #16
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	6039      	str	r1, [r7, #0]
 801b7f6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b7f8:	79fb      	ldrb	r3, [r7, #7]
 801b7fa:	f003 0307 	and.w	r3, r3, #7
 801b7fe:	b2db      	uxtb	r3, r3
 801b800:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b802:	683b      	ldr	r3, [r7, #0]
 801b804:	0c1b      	lsrs	r3, r3, #16
 801b806:	b2db      	uxtb	r3, r3
 801b808:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b80a:	683b      	ldr	r3, [r7, #0]
 801b80c:	0a1b      	lsrs	r3, r3, #8
 801b80e:	b2db      	uxtb	r3, r3
 801b810:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b812:	683b      	ldr	r3, [r7, #0]
 801b814:	b2db      	uxtb	r3, r3
 801b816:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b818:	f107 030c 	add.w	r3, r7, #12
 801b81c:	2204      	movs	r2, #4
 801b81e:	4619      	mov	r1, r3
 801b820:	2097      	movs	r0, #151	; 0x97
 801b822:	f000 fc09 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b826:	bf00      	nop
 801b828:	3710      	adds	r7, #16
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bd80      	pop	{r7, pc}
	...

0801b830 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b830:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b834:	b084      	sub	sp, #16
 801b836:	af00      	add	r7, sp, #0
 801b838:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b83a:	2300      	movs	r3, #0
 801b83c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b83e:	4b1d      	ldr	r3, [pc, #116]	; (801b8b4 <SUBGRF_SetRfFrequency+0x84>)
 801b840:	781b      	ldrb	r3, [r3, #0]
 801b842:	f083 0301 	eor.w	r3, r3, #1
 801b846:	b2db      	uxtb	r3, r3
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d005      	beq.n	801b858 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b84c:	6878      	ldr	r0, [r7, #4]
 801b84e:	f7ff ff27 	bl	801b6a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b852:	4b18      	ldr	r3, [pc, #96]	; (801b8b4 <SUBGRF_SetRfFrequency+0x84>)
 801b854:	2201      	movs	r2, #1
 801b856:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	2200      	movs	r2, #0
 801b85c:	461c      	mov	r4, r3
 801b85e:	4615      	mov	r5, r2
 801b860:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b864:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b868:	4a13      	ldr	r2, [pc, #76]	; (801b8b8 <SUBGRF_SetRfFrequency+0x88>)
 801b86a:	f04f 0300 	mov.w	r3, #0
 801b86e:	4640      	mov	r0, r8
 801b870:	4649      	mov	r1, r9
 801b872:	f7e5 f999 	bl	8000ba8 <__aeabi_uldivmod>
 801b876:	4602      	mov	r2, r0
 801b878:	460b      	mov	r3, r1
 801b87a:	4613      	mov	r3, r2
 801b87c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	0e1b      	lsrs	r3, r3, #24
 801b882:	b2db      	uxtb	r3, r3
 801b884:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	0c1b      	lsrs	r3, r3, #16
 801b88a:	b2db      	uxtb	r3, r3
 801b88c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	0a1b      	lsrs	r3, r3, #8
 801b892:	b2db      	uxtb	r3, r3
 801b894:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b89c:	f107 0308 	add.w	r3, r7, #8
 801b8a0:	2204      	movs	r2, #4
 801b8a2:	4619      	mov	r1, r3
 801b8a4:	2086      	movs	r0, #134	; 0x86
 801b8a6:	f000 fbc7 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b8aa:	bf00      	nop
 801b8ac:	3710      	adds	r7, #16
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b8b4:	20001c7c 	.word	0x20001c7c
 801b8b8:	01e84800 	.word	0x01e84800

0801b8bc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	b082      	sub	sp, #8
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	4603      	mov	r3, r0
 801b8c4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b8c6:	79fa      	ldrb	r2, [r7, #7]
 801b8c8:	4b09      	ldr	r3, [pc, #36]	; (801b8f0 <SUBGRF_SetPacketType+0x34>)
 801b8ca:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b8cc:	79fb      	ldrb	r3, [r7, #7]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d104      	bne.n	801b8dc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b8d2:	2100      	movs	r1, #0
 801b8d4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b8d8:	f000 fafe 	bl	801bed8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b8dc:	1dfb      	adds	r3, r7, #7
 801b8de:	2201      	movs	r2, #1
 801b8e0:	4619      	mov	r1, r3
 801b8e2:	208a      	movs	r0, #138	; 0x8a
 801b8e4:	f000 fba8 	bl	801c038 <SUBGRF_WriteCommand>
}
 801b8e8:	bf00      	nop
 801b8ea:	3708      	adds	r7, #8
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	20001c75 	.word	0x20001c75

0801b8f4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b8f4:	b480      	push	{r7}
 801b8f6:	af00      	add	r7, sp, #0
    return PacketType;
 801b8f8:	4b02      	ldr	r3, [pc, #8]	; (801b904 <SUBGRF_GetPacketType+0x10>)
 801b8fa:	781b      	ldrb	r3, [r3, #0]
}
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	46bd      	mov	sp, r7
 801b900:	bc80      	pop	{r7}
 801b902:	4770      	bx	lr
 801b904:	20001c75 	.word	0x20001c75

0801b908 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b084      	sub	sp, #16
 801b90c:	af00      	add	r7, sp, #0
 801b90e:	4603      	mov	r3, r0
 801b910:	71fb      	strb	r3, [r7, #7]
 801b912:	460b      	mov	r3, r1
 801b914:	71bb      	strb	r3, [r7, #6]
 801b916:	4613      	mov	r3, r2
 801b918:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b91a:	79fb      	ldrb	r3, [r7, #7]
 801b91c:	2b01      	cmp	r3, #1
 801b91e:	d149      	bne.n	801b9b4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b920:	2000      	movs	r0, #0
 801b922:	f7ef fb5b 	bl	800afdc <RBI_GetRFOMaxPowerConfig>
 801b926:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b928:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b92c:	68fa      	ldr	r2, [r7, #12]
 801b92e:	429a      	cmp	r2, r3
 801b930:	da01      	bge.n	801b936 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	2b0e      	cmp	r3, #14
 801b93a:	d10e      	bne.n	801b95a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b93c:	2301      	movs	r3, #1
 801b93e:	2201      	movs	r2, #1
 801b940:	2100      	movs	r1, #0
 801b942:	2004      	movs	r0, #4
 801b944:	f7ff fef6 	bl	801b734 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b948:	79ba      	ldrb	r2, [r7, #6]
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	b2db      	uxtb	r3, r3
 801b94e:	1ad3      	subs	r3, r2, r3
 801b950:	b2db      	uxtb	r3, r3
 801b952:	330e      	adds	r3, #14
 801b954:	b2db      	uxtb	r3, r3
 801b956:	71bb      	strb	r3, [r7, #6]
 801b958:	e01f      	b.n	801b99a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b95a:	68fb      	ldr	r3, [r7, #12]
 801b95c:	2b0a      	cmp	r3, #10
 801b95e:	d10e      	bne.n	801b97e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b960:	2301      	movs	r3, #1
 801b962:	2201      	movs	r2, #1
 801b964:	2100      	movs	r1, #0
 801b966:	2001      	movs	r0, #1
 801b968:	f7ff fee4 	bl	801b734 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b96c:	79ba      	ldrb	r2, [r7, #6]
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	b2db      	uxtb	r3, r3
 801b972:	1ad3      	subs	r3, r2, r3
 801b974:	b2db      	uxtb	r3, r3
 801b976:	330d      	adds	r3, #13
 801b978:	b2db      	uxtb	r3, r3
 801b97a:	71bb      	strb	r3, [r7, #6]
 801b97c:	e00d      	b.n	801b99a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b97e:	2301      	movs	r3, #1
 801b980:	2201      	movs	r2, #1
 801b982:	2100      	movs	r1, #0
 801b984:	2007      	movs	r0, #7
 801b986:	f7ff fed5 	bl	801b734 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b98a:	79ba      	ldrb	r2, [r7, #6]
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	b2db      	uxtb	r3, r3
 801b990:	1ad3      	subs	r3, r2, r3
 801b992:	b2db      	uxtb	r3, r3
 801b994:	330e      	adds	r3, #14
 801b996:	b2db      	uxtb	r3, r3
 801b998:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b99a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b99e:	f113 0f11 	cmn.w	r3, #17
 801b9a2:	da01      	bge.n	801b9a8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b9a4:	23ef      	movs	r3, #239	; 0xef
 801b9a6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b9a8:	2118      	movs	r1, #24
 801b9aa:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b9ae:	f000 fa93 	bl	801bed8 <SUBGRF_WriteRegister>
 801b9b2:	e067      	b.n	801ba84 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b9b4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b9b8:	f000 faa2 	bl	801bf00 <SUBGRF_ReadRegister>
 801b9bc:	4603      	mov	r3, r0
 801b9be:	f043 031e 	orr.w	r3, r3, #30
 801b9c2:	b2db      	uxtb	r3, r3
 801b9c4:	4619      	mov	r1, r3
 801b9c6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b9ca:	f000 fa85 	bl	801bed8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b9ce:	2001      	movs	r0, #1
 801b9d0:	f7ef fb04 	bl	800afdc <RBI_GetRFOMaxPowerConfig>
 801b9d4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b9d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b9da:	68fa      	ldr	r2, [r7, #12]
 801b9dc:	429a      	cmp	r2, r3
 801b9de:	da01      	bge.n	801b9e4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	2b14      	cmp	r3, #20
 801b9e8:	d10e      	bne.n	801ba08 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b9ea:	2301      	movs	r3, #1
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	2105      	movs	r1, #5
 801b9f0:	2003      	movs	r0, #3
 801b9f2:	f7ff fe9f 	bl	801b734 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b9f6:	79ba      	ldrb	r2, [r7, #6]
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	b2db      	uxtb	r3, r3
 801b9fc:	1ad3      	subs	r3, r2, r3
 801b9fe:	b2db      	uxtb	r3, r3
 801ba00:	3316      	adds	r3, #22
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	71bb      	strb	r3, [r7, #6]
 801ba06:	e031      	b.n	801ba6c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	2b11      	cmp	r3, #17
 801ba0c:	d10e      	bne.n	801ba2c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801ba0e:	2301      	movs	r3, #1
 801ba10:	2200      	movs	r2, #0
 801ba12:	2103      	movs	r1, #3
 801ba14:	2002      	movs	r0, #2
 801ba16:	f7ff fe8d 	bl	801b734 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ba1a:	79ba      	ldrb	r2, [r7, #6]
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	b2db      	uxtb	r3, r3
 801ba20:	1ad3      	subs	r3, r2, r3
 801ba22:	b2db      	uxtb	r3, r3
 801ba24:	3316      	adds	r3, #22
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	71bb      	strb	r3, [r7, #6]
 801ba2a:	e01f      	b.n	801ba6c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	2b0e      	cmp	r3, #14
 801ba30:	d10e      	bne.n	801ba50 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801ba32:	2301      	movs	r3, #1
 801ba34:	2200      	movs	r2, #0
 801ba36:	2102      	movs	r1, #2
 801ba38:	2002      	movs	r0, #2
 801ba3a:	f7ff fe7b 	bl	801b734 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ba3e:	79ba      	ldrb	r2, [r7, #6]
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	b2db      	uxtb	r3, r3
 801ba44:	1ad3      	subs	r3, r2, r3
 801ba46:	b2db      	uxtb	r3, r3
 801ba48:	330e      	adds	r3, #14
 801ba4a:	b2db      	uxtb	r3, r3
 801ba4c:	71bb      	strb	r3, [r7, #6]
 801ba4e:	e00d      	b.n	801ba6c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801ba50:	2301      	movs	r3, #1
 801ba52:	2200      	movs	r2, #0
 801ba54:	2107      	movs	r1, #7
 801ba56:	2004      	movs	r0, #4
 801ba58:	f7ff fe6c 	bl	801b734 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ba5c:	79ba      	ldrb	r2, [r7, #6]
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	b2db      	uxtb	r3, r3
 801ba62:	1ad3      	subs	r3, r2, r3
 801ba64:	b2db      	uxtb	r3, r3
 801ba66:	3316      	adds	r3, #22
 801ba68:	b2db      	uxtb	r3, r3
 801ba6a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801ba6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ba70:	f113 0f09 	cmn.w	r3, #9
 801ba74:	da01      	bge.n	801ba7a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801ba76:	23f7      	movs	r3, #247	; 0xf7
 801ba78:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801ba7a:	2138      	movs	r1, #56	; 0x38
 801ba7c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ba80:	f000 fa2a 	bl	801bed8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ba84:	79bb      	ldrb	r3, [r7, #6]
 801ba86:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ba88:	797b      	ldrb	r3, [r7, #5]
 801ba8a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ba8c:	f107 0308 	add.w	r3, r7, #8
 801ba90:	2202      	movs	r2, #2
 801ba92:	4619      	mov	r1, r3
 801ba94:	208e      	movs	r0, #142	; 0x8e
 801ba96:	f000 facf 	bl	801c038 <SUBGRF_WriteCommand>
}
 801ba9a:	bf00      	nop
 801ba9c:	3710      	adds	r7, #16
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bd80      	pop	{r7, pc}
	...

0801baa4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801baa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801baa8:	b086      	sub	sp, #24
 801baaa:	af00      	add	r7, sp, #0
 801baac:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801baae:	2300      	movs	r3, #0
 801bab0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bab2:	4a61      	ldr	r2, [pc, #388]	; (801bc38 <SUBGRF_SetModulationParams+0x194>)
 801bab4:	f107 0308 	add.w	r3, r7, #8
 801bab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801babc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	781a      	ldrb	r2, [r3, #0]
 801bac4:	4b5d      	ldr	r3, [pc, #372]	; (801bc3c <SUBGRF_SetModulationParams+0x198>)
 801bac6:	781b      	ldrb	r3, [r3, #0]
 801bac8:	429a      	cmp	r2, r3
 801baca:	d004      	beq.n	801bad6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	781b      	ldrb	r3, [r3, #0]
 801bad0:	4618      	mov	r0, r3
 801bad2:	f7ff fef3 	bl	801b8bc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	781b      	ldrb	r3, [r3, #0]
 801bada:	2b03      	cmp	r3, #3
 801badc:	f200 80a5 	bhi.w	801bc2a <SUBGRF_SetModulationParams+0x186>
 801bae0:	a201      	add	r2, pc, #4	; (adr r2, 801bae8 <SUBGRF_SetModulationParams+0x44>)
 801bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bae6:	bf00      	nop
 801bae8:	0801baf9 	.word	0x0801baf9
 801baec:	0801bbb9 	.word	0x0801bbb9
 801baf0:	0801bb7b 	.word	0x0801bb7b
 801baf4:	0801bbe7 	.word	0x0801bbe7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801baf8:	2308      	movs	r3, #8
 801bafa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	685b      	ldr	r3, [r3, #4]
 801bb00:	4a4f      	ldr	r2, [pc, #316]	; (801bc40 <SUBGRF_SetModulationParams+0x19c>)
 801bb02:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb06:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	0c1b      	lsrs	r3, r3, #16
 801bb0c:	b2db      	uxtb	r3, r3
 801bb0e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bb10:	697b      	ldr	r3, [r7, #20]
 801bb12:	0a1b      	lsrs	r3, r3, #8
 801bb14:	b2db      	uxtb	r3, r3
 801bb16:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bb18:	697b      	ldr	r3, [r7, #20]
 801bb1a:	b2db      	uxtb	r3, r3
 801bb1c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	7b1b      	ldrb	r3, [r3, #12]
 801bb22:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	7b5b      	ldrb	r3, [r3, #13]
 801bb28:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	689b      	ldr	r3, [r3, #8]
 801bb2e:	2200      	movs	r2, #0
 801bb30:	461c      	mov	r4, r3
 801bb32:	4615      	mov	r5, r2
 801bb34:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801bb38:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801bb3c:	4a41      	ldr	r2, [pc, #260]	; (801bc44 <SUBGRF_SetModulationParams+0x1a0>)
 801bb3e:	f04f 0300 	mov.w	r3, #0
 801bb42:	4640      	mov	r0, r8
 801bb44:	4649      	mov	r1, r9
 801bb46:	f7e5 f82f 	bl	8000ba8 <__aeabi_uldivmod>
 801bb4a:	4602      	mov	r2, r0
 801bb4c:	460b      	mov	r3, r1
 801bb4e:	4613      	mov	r3, r2
 801bb50:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	0c1b      	lsrs	r3, r3, #16
 801bb56:	b2db      	uxtb	r3, r3
 801bb58:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801bb5a:	697b      	ldr	r3, [r7, #20]
 801bb5c:	0a1b      	lsrs	r3, r3, #8
 801bb5e:	b2db      	uxtb	r3, r3
 801bb60:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801bb62:	697b      	ldr	r3, [r7, #20]
 801bb64:	b2db      	uxtb	r3, r3
 801bb66:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bb68:	7cfb      	ldrb	r3, [r7, #19]
 801bb6a:	b29a      	uxth	r2, r3
 801bb6c:	f107 0308 	add.w	r3, r7, #8
 801bb70:	4619      	mov	r1, r3
 801bb72:	208b      	movs	r0, #139	; 0x8b
 801bb74:	f000 fa60 	bl	801c038 <SUBGRF_WriteCommand>
        break;
 801bb78:	e058      	b.n	801bc2c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801bb7a:	2304      	movs	r3, #4
 801bb7c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	691b      	ldr	r3, [r3, #16]
 801bb82:	4a2f      	ldr	r2, [pc, #188]	; (801bc40 <SUBGRF_SetModulationParams+0x19c>)
 801bb84:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb88:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bb8a:	697b      	ldr	r3, [r7, #20]
 801bb8c:	0c1b      	lsrs	r3, r3, #16
 801bb8e:	b2db      	uxtb	r3, r3
 801bb90:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	0a1b      	lsrs	r3, r3, #8
 801bb96:	b2db      	uxtb	r3, r3
 801bb98:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	b2db      	uxtb	r3, r3
 801bb9e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	7d1b      	ldrb	r3, [r3, #20]
 801bba4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bba6:	7cfb      	ldrb	r3, [r7, #19]
 801bba8:	b29a      	uxth	r2, r3
 801bbaa:	f107 0308 	add.w	r3, r7, #8
 801bbae:	4619      	mov	r1, r3
 801bbb0:	208b      	movs	r0, #139	; 0x8b
 801bbb2:	f000 fa41 	bl	801c038 <SUBGRF_WriteCommand>
        break;
 801bbb6:	e039      	b.n	801bc2c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801bbb8:	2304      	movs	r3, #4
 801bbba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	7e1b      	ldrb	r3, [r3, #24]
 801bbc0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	7e5b      	ldrb	r3, [r3, #25]
 801bbc6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	7e9b      	ldrb	r3, [r3, #26]
 801bbcc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	7edb      	ldrb	r3, [r3, #27]
 801bbd2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bbd4:	7cfb      	ldrb	r3, [r7, #19]
 801bbd6:	b29a      	uxth	r2, r3
 801bbd8:	f107 0308 	add.w	r3, r7, #8
 801bbdc:	4619      	mov	r1, r3
 801bbde:	208b      	movs	r0, #139	; 0x8b
 801bbe0:	f000 fa2a 	bl	801c038 <SUBGRF_WriteCommand>

        break;
 801bbe4:	e022      	b.n	801bc2c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801bbe6:	2305      	movs	r3, #5
 801bbe8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	685b      	ldr	r3, [r3, #4]
 801bbee:	4a14      	ldr	r2, [pc, #80]	; (801bc40 <SUBGRF_SetModulationParams+0x19c>)
 801bbf0:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbf4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	0c1b      	lsrs	r3, r3, #16
 801bbfa:	b2db      	uxtb	r3, r3
 801bbfc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bbfe:	697b      	ldr	r3, [r7, #20]
 801bc00:	0a1b      	lsrs	r3, r3, #8
 801bc02:	b2db      	uxtb	r3, r3
 801bc04:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bc06:	697b      	ldr	r3, [r7, #20]
 801bc08:	b2db      	uxtb	r3, r3
 801bc0a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	7b1b      	ldrb	r3, [r3, #12]
 801bc10:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	7b5b      	ldrb	r3, [r3, #13]
 801bc16:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bc18:	7cfb      	ldrb	r3, [r7, #19]
 801bc1a:	b29a      	uxth	r2, r3
 801bc1c:	f107 0308 	add.w	r3, r7, #8
 801bc20:	4619      	mov	r1, r3
 801bc22:	208b      	movs	r0, #139	; 0x8b
 801bc24:	f000 fa08 	bl	801c038 <SUBGRF_WriteCommand>
        break;
 801bc28:	e000      	b.n	801bc2c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801bc2a:	bf00      	nop
    }
}
 801bc2c:	bf00      	nop
 801bc2e:	3718      	adds	r7, #24
 801bc30:	46bd      	mov	sp, r7
 801bc32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801bc36:	bf00      	nop
 801bc38:	0801e5c0 	.word	0x0801e5c0
 801bc3c:	20001c75 	.word	0x20001c75
 801bc40:	3d090000 	.word	0x3d090000
 801bc44:	01e84800 	.word	0x01e84800

0801bc48 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801bc48:	b580      	push	{r7, lr}
 801bc4a:	b086      	sub	sp, #24
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801bc50:	2300      	movs	r3, #0
 801bc52:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bc54:	4a48      	ldr	r2, [pc, #288]	; (801bd78 <SUBGRF_SetPacketParams+0x130>)
 801bc56:	f107 030c 	add.w	r3, r7, #12
 801bc5a:	ca07      	ldmia	r2, {r0, r1, r2}
 801bc5c:	c303      	stmia	r3!, {r0, r1}
 801bc5e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	781a      	ldrb	r2, [r3, #0]
 801bc64:	4b45      	ldr	r3, [pc, #276]	; (801bd7c <SUBGRF_SetPacketParams+0x134>)
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	429a      	cmp	r2, r3
 801bc6a:	d004      	beq.n	801bc76 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	781b      	ldrb	r3, [r3, #0]
 801bc70:	4618      	mov	r0, r3
 801bc72:	f7ff fe23 	bl	801b8bc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	781b      	ldrb	r3, [r3, #0]
 801bc7a:	2b03      	cmp	r3, #3
 801bc7c:	d878      	bhi.n	801bd70 <SUBGRF_SetPacketParams+0x128>
 801bc7e:	a201      	add	r2, pc, #4	; (adr r2, 801bc84 <SUBGRF_SetPacketParams+0x3c>)
 801bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc84:	0801bc95 	.word	0x0801bc95
 801bc88:	0801bd25 	.word	0x0801bd25
 801bc8c:	0801bd19 	.word	0x0801bd19
 801bc90:	0801bc95 	.word	0x0801bc95
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	7a5b      	ldrb	r3, [r3, #9]
 801bc98:	2bf1      	cmp	r3, #241	; 0xf1
 801bc9a:	d10a      	bne.n	801bcb2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801bc9c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bca0:	f7ff faaa 	bl	801b1f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801bca4:	f248 0005 	movw	r0, #32773	; 0x8005
 801bca8:	f7ff fac6 	bl	801b238 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801bcac:	2302      	movs	r3, #2
 801bcae:	75bb      	strb	r3, [r7, #22]
 801bcb0:	e011      	b.n	801bcd6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	7a5b      	ldrb	r3, [r3, #9]
 801bcb6:	2bf2      	cmp	r3, #242	; 0xf2
 801bcb8:	d10a      	bne.n	801bcd0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801bcba:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801bcbe:	f7ff fa9b 	bl	801b1f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801bcc2:	f241 0021 	movw	r0, #4129	; 0x1021
 801bcc6:	f7ff fab7 	bl	801b238 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801bcca:	2306      	movs	r3, #6
 801bccc:	75bb      	strb	r3, [r7, #22]
 801bcce:	e002      	b.n	801bcd6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	7a5b      	ldrb	r3, [r3, #9]
 801bcd4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801bcd6:	2309      	movs	r3, #9
 801bcd8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	885b      	ldrh	r3, [r3, #2]
 801bcde:	0a1b      	lsrs	r3, r3, #8
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	b2db      	uxtb	r3, r3
 801bce4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	885b      	ldrh	r3, [r3, #2]
 801bcea:	b2db      	uxtb	r3, r3
 801bcec:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	791b      	ldrb	r3, [r3, #4]
 801bcf2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	795b      	ldrb	r3, [r3, #5]
 801bcf8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	799b      	ldrb	r3, [r3, #6]
 801bcfe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	79db      	ldrb	r3, [r3, #7]
 801bd04:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	7a1b      	ldrb	r3, [r3, #8]
 801bd0a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801bd0c:	7dbb      	ldrb	r3, [r7, #22]
 801bd0e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	7a9b      	ldrb	r3, [r3, #10]
 801bd14:	753b      	strb	r3, [r7, #20]
        break;
 801bd16:	e022      	b.n	801bd5e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801bd18:	2301      	movs	r3, #1
 801bd1a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	7b1b      	ldrb	r3, [r3, #12]
 801bd20:	733b      	strb	r3, [r7, #12]
        break;
 801bd22:	e01c      	b.n	801bd5e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801bd24:	2306      	movs	r3, #6
 801bd26:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	89db      	ldrh	r3, [r3, #14]
 801bd2c:	0a1b      	lsrs	r3, r3, #8
 801bd2e:	b29b      	uxth	r3, r3
 801bd30:	b2db      	uxtb	r3, r3
 801bd32:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	89db      	ldrh	r3, [r3, #14]
 801bd38:	b2db      	uxtb	r3, r3
 801bd3a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	7c1a      	ldrb	r2, [r3, #16]
 801bd40:	4b0f      	ldr	r3, [pc, #60]	; (801bd80 <SUBGRF_SetPacketParams+0x138>)
 801bd42:	4611      	mov	r1, r2
 801bd44:	7019      	strb	r1, [r3, #0]
 801bd46:	4613      	mov	r3, r2
 801bd48:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	7c5b      	ldrb	r3, [r3, #17]
 801bd4e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	7c9b      	ldrb	r3, [r3, #18]
 801bd54:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	7cdb      	ldrb	r3, [r3, #19]
 801bd5a:	747b      	strb	r3, [r7, #17]
        break;
 801bd5c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801bd5e:	7dfb      	ldrb	r3, [r7, #23]
 801bd60:	b29a      	uxth	r2, r3
 801bd62:	f107 030c 	add.w	r3, r7, #12
 801bd66:	4619      	mov	r1, r3
 801bd68:	208c      	movs	r0, #140	; 0x8c
 801bd6a:	f000 f965 	bl	801c038 <SUBGRF_WriteCommand>
 801bd6e:	e000      	b.n	801bd72 <SUBGRF_SetPacketParams+0x12a>
        return;
 801bd70:	bf00      	nop
}
 801bd72:	3718      	adds	r7, #24
 801bd74:	46bd      	mov	sp, r7
 801bd76:	bd80      	pop	{r7, pc}
 801bd78:	0801e5c8 	.word	0x0801e5c8
 801bd7c:	20001c75 	.word	0x20001c75
 801bd80:	20001c76 	.word	0x20001c76

0801bd84 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b084      	sub	sp, #16
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	4603      	mov	r3, r0
 801bd8c:	460a      	mov	r2, r1
 801bd8e:	71fb      	strb	r3, [r7, #7]
 801bd90:	4613      	mov	r3, r2
 801bd92:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801bd94:	79fb      	ldrb	r3, [r7, #7]
 801bd96:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801bd98:	79bb      	ldrb	r3, [r7, #6]
 801bd9a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801bd9c:	f107 030c 	add.w	r3, r7, #12
 801bda0:	2202      	movs	r2, #2
 801bda2:	4619      	mov	r1, r3
 801bda4:	208f      	movs	r0, #143	; 0x8f
 801bda6:	f000 f947 	bl	801c038 <SUBGRF_WriteCommand>
}
 801bdaa:	bf00      	nop
 801bdac:	3710      	adds	r7, #16
 801bdae:	46bd      	mov	sp, r7
 801bdb0:	bd80      	pop	{r7, pc}

0801bdb2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801bdb2:	b580      	push	{r7, lr}
 801bdb4:	b082      	sub	sp, #8
 801bdb6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bdb8:	2300      	movs	r3, #0
 801bdba:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bdbc:	1d3b      	adds	r3, r7, #4
 801bdbe:	2201      	movs	r2, #1
 801bdc0:	4619      	mov	r1, r3
 801bdc2:	2015      	movs	r0, #21
 801bdc4:	f000 f95a 	bl	801c07c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bdc8:	793b      	ldrb	r3, [r7, #4]
 801bdca:	425b      	negs	r3, r3
 801bdcc:	105b      	asrs	r3, r3, #1
 801bdce:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bdd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	3708      	adds	r7, #8
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	bd80      	pop	{r7, pc}

0801bddc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b084      	sub	sp, #16
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
 801bde4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bde6:	f107 030c 	add.w	r3, r7, #12
 801bdea:	2202      	movs	r2, #2
 801bdec:	4619      	mov	r1, r3
 801bdee:	2013      	movs	r0, #19
 801bdf0:	f000 f944 	bl	801c07c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bdf4:	f7ff fd7e 	bl	801b8f4 <SUBGRF_GetPacketType>
 801bdf8:	4603      	mov	r3, r0
 801bdfa:	2b01      	cmp	r3, #1
 801bdfc:	d10d      	bne.n	801be1a <SUBGRF_GetRxBufferStatus+0x3e>
 801bdfe:	4b0c      	ldr	r3, [pc, #48]	; (801be30 <SUBGRF_GetRxBufferStatus+0x54>)
 801be00:	781b      	ldrb	r3, [r3, #0]
 801be02:	b2db      	uxtb	r3, r3
 801be04:	2b01      	cmp	r3, #1
 801be06:	d108      	bne.n	801be1a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801be08:	f240 7002 	movw	r0, #1794	; 0x702
 801be0c:	f000 f878 	bl	801bf00 <SUBGRF_ReadRegister>
 801be10:	4603      	mov	r3, r0
 801be12:	461a      	mov	r2, r3
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	701a      	strb	r2, [r3, #0]
 801be18:	e002      	b.n	801be20 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801be1a:	7b3a      	ldrb	r2, [r7, #12]
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801be20:	7b7a      	ldrb	r2, [r7, #13]
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	701a      	strb	r2, [r3, #0]
}
 801be26:	bf00      	nop
 801be28:	3710      	adds	r7, #16
 801be2a:	46bd      	mov	sp, r7
 801be2c:	bd80      	pop	{r7, pc}
 801be2e:	bf00      	nop
 801be30:	20001c76 	.word	0x20001c76

0801be34 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b084      	sub	sp, #16
 801be38:	af00      	add	r7, sp, #0
 801be3a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801be3c:	f107 030c 	add.w	r3, r7, #12
 801be40:	2203      	movs	r2, #3
 801be42:	4619      	mov	r1, r3
 801be44:	2014      	movs	r0, #20
 801be46:	f000 f919 	bl	801c07c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801be4a:	f7ff fd53 	bl	801b8f4 <SUBGRF_GetPacketType>
 801be4e:	4603      	mov	r3, r0
 801be50:	461a      	mov	r2, r3
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	781b      	ldrb	r3, [r3, #0]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d002      	beq.n	801be64 <SUBGRF_GetPacketStatus+0x30>
 801be5e:	2b01      	cmp	r3, #1
 801be60:	d013      	beq.n	801be8a <SUBGRF_GetPacketStatus+0x56>
 801be62:	e02a      	b.n	801beba <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801be64:	7b3a      	ldrb	r2, [r7, #12]
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801be6a:	7b7b      	ldrb	r3, [r7, #13]
 801be6c:	425b      	negs	r3, r3
 801be6e:	105b      	asrs	r3, r3, #1
 801be70:	b25a      	sxtb	r2, r3
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801be76:	7bbb      	ldrb	r3, [r7, #14]
 801be78:	425b      	negs	r3, r3
 801be7a:	105b      	asrs	r3, r3, #1
 801be7c:	b25a      	sxtb	r2, r3
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	2200      	movs	r2, #0
 801be86:	609a      	str	r2, [r3, #8]
            break;
 801be88:	e020      	b.n	801becc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801be8a:	7b3b      	ldrb	r3, [r7, #12]
 801be8c:	425b      	negs	r3, r3
 801be8e:	105b      	asrs	r3, r3, #1
 801be90:	b25a      	sxtb	r2, r3
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801be96:	7b7b      	ldrb	r3, [r7, #13]
 801be98:	b25b      	sxtb	r3, r3
 801be9a:	3302      	adds	r3, #2
 801be9c:	109b      	asrs	r3, r3, #2
 801be9e:	b25a      	sxtb	r2, r3
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801bea4:	7bbb      	ldrb	r3, [r7, #14]
 801bea6:	425b      	negs	r3, r3
 801bea8:	105b      	asrs	r3, r3, #1
 801beaa:	b25a      	sxtb	r2, r3
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801beb0:	4b08      	ldr	r3, [pc, #32]	; (801bed4 <SUBGRF_GetPacketStatus+0xa0>)
 801beb2:	681a      	ldr	r2, [r3, #0]
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	611a      	str	r2, [r3, #16]
            break;
 801beb8:	e008      	b.n	801becc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801beba:	2214      	movs	r2, #20
 801bebc:	2100      	movs	r1, #0
 801bebe:	6878      	ldr	r0, [r7, #4]
 801bec0:	f000 fc03 	bl	801c6ca <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	220f      	movs	r2, #15
 801bec8:	701a      	strb	r2, [r3, #0]
            break;
 801beca:	bf00      	nop
    }
}
 801becc:	bf00      	nop
 801bece:	3710      	adds	r7, #16
 801bed0:	46bd      	mov	sp, r7
 801bed2:	bd80      	pop	{r7, pc}
 801bed4:	20001c78 	.word	0x20001c78

0801bed8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b082      	sub	sp, #8
 801bedc:	af00      	add	r7, sp, #0
 801bede:	4603      	mov	r3, r0
 801bee0:	460a      	mov	r2, r1
 801bee2:	80fb      	strh	r3, [r7, #6]
 801bee4:	4613      	mov	r3, r2
 801bee6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bee8:	1d7a      	adds	r2, r7, #5
 801beea:	88f9      	ldrh	r1, [r7, #6]
 801beec:	2301      	movs	r3, #1
 801beee:	4803      	ldr	r0, [pc, #12]	; (801befc <SUBGRF_WriteRegister+0x24>)
 801bef0:	f7eb fc52 	bl	8007798 <HAL_SUBGHZ_WriteRegisters>
}
 801bef4:	bf00      	nop
 801bef6:	3708      	adds	r7, #8
 801bef8:	46bd      	mov	sp, r7
 801befa:	bd80      	pop	{r7, pc}
 801befc:	200002bc 	.word	0x200002bc

0801bf00 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801bf00:	b580      	push	{r7, lr}
 801bf02:	b084      	sub	sp, #16
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	4603      	mov	r3, r0
 801bf08:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801bf0a:	f107 020f 	add.w	r2, r7, #15
 801bf0e:	88f9      	ldrh	r1, [r7, #6]
 801bf10:	2301      	movs	r3, #1
 801bf12:	4804      	ldr	r0, [pc, #16]	; (801bf24 <SUBGRF_ReadRegister+0x24>)
 801bf14:	f7eb fc9f 	bl	8007856 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801bf18:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	3710      	adds	r7, #16
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	bd80      	pop	{r7, pc}
 801bf22:	bf00      	nop
 801bf24:	200002bc 	.word	0x200002bc

0801bf28 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b086      	sub	sp, #24
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	4603      	mov	r3, r0
 801bf30:	6039      	str	r1, [r7, #0]
 801bf32:	80fb      	strh	r3, [r7, #6]
 801bf34:	4613      	mov	r3, r2
 801bf36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf38:	f3ef 8310 	mrs	r3, PRIMASK
 801bf3c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf42:	b672      	cpsid	i
}
 801bf44:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801bf46:	88bb      	ldrh	r3, [r7, #4]
 801bf48:	88f9      	ldrh	r1, [r7, #6]
 801bf4a:	683a      	ldr	r2, [r7, #0]
 801bf4c:	4806      	ldr	r0, [pc, #24]	; (801bf68 <SUBGRF_WriteRegisters+0x40>)
 801bf4e:	f7eb fc23 	bl	8007798 <HAL_SUBGHZ_WriteRegisters>
 801bf52:	697b      	ldr	r3, [r7, #20]
 801bf54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf56:	693b      	ldr	r3, [r7, #16]
 801bf58:	f383 8810 	msr	PRIMASK, r3
}
 801bf5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf5e:	bf00      	nop
 801bf60:	3718      	adds	r7, #24
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bd80      	pop	{r7, pc}
 801bf66:	bf00      	nop
 801bf68:	200002bc 	.word	0x200002bc

0801bf6c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bf6c:	b580      	push	{r7, lr}
 801bf6e:	b086      	sub	sp, #24
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	4603      	mov	r3, r0
 801bf74:	6039      	str	r1, [r7, #0]
 801bf76:	80fb      	strh	r3, [r7, #6]
 801bf78:	4613      	mov	r3, r2
 801bf7a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf7c:	f3ef 8310 	mrs	r3, PRIMASK
 801bf80:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf86:	b672      	cpsid	i
}
 801bf88:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801bf8a:	88bb      	ldrh	r3, [r7, #4]
 801bf8c:	88f9      	ldrh	r1, [r7, #6]
 801bf8e:	683a      	ldr	r2, [r7, #0]
 801bf90:	4806      	ldr	r0, [pc, #24]	; (801bfac <SUBGRF_ReadRegisters+0x40>)
 801bf92:	f7eb fc60 	bl	8007856 <HAL_SUBGHZ_ReadRegisters>
 801bf96:	697b      	ldr	r3, [r7, #20]
 801bf98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf9a:	693b      	ldr	r3, [r7, #16]
 801bf9c:	f383 8810 	msr	PRIMASK, r3
}
 801bfa0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bfa2:	bf00      	nop
 801bfa4:	3718      	adds	r7, #24
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	bd80      	pop	{r7, pc}
 801bfaa:	bf00      	nop
 801bfac:	200002bc 	.word	0x200002bc

0801bfb0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bfb0:	b580      	push	{r7, lr}
 801bfb2:	b086      	sub	sp, #24
 801bfb4:	af00      	add	r7, sp, #0
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	6039      	str	r1, [r7, #0]
 801bfba:	71fb      	strb	r3, [r7, #7]
 801bfbc:	4613      	mov	r3, r2
 801bfbe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfc0:	f3ef 8310 	mrs	r3, PRIMASK
 801bfc4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bfc6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bfc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfca:	b672      	cpsid	i
}
 801bfcc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bfce:	79bb      	ldrb	r3, [r7, #6]
 801bfd0:	b29b      	uxth	r3, r3
 801bfd2:	79f9      	ldrb	r1, [r7, #7]
 801bfd4:	683a      	ldr	r2, [r7, #0]
 801bfd6:	4806      	ldr	r0, [pc, #24]	; (801bff0 <SUBGRF_WriteBuffer+0x40>)
 801bfd8:	f7eb fd51 	bl	8007a7e <HAL_SUBGHZ_WriteBuffer>
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfe0:	693b      	ldr	r3, [r7, #16]
 801bfe2:	f383 8810 	msr	PRIMASK, r3
}
 801bfe6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bfe8:	bf00      	nop
 801bfea:	3718      	adds	r7, #24
 801bfec:	46bd      	mov	sp, r7
 801bfee:	bd80      	pop	{r7, pc}
 801bff0:	200002bc 	.word	0x200002bc

0801bff4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b086      	sub	sp, #24
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	4603      	mov	r3, r0
 801bffc:	6039      	str	r1, [r7, #0]
 801bffe:	71fb      	strb	r3, [r7, #7]
 801c000:	4613      	mov	r3, r2
 801c002:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c004:	f3ef 8310 	mrs	r3, PRIMASK
 801c008:	60fb      	str	r3, [r7, #12]
  return(result);
 801c00a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c00c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c00e:	b672      	cpsid	i
}
 801c010:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c012:	79bb      	ldrb	r3, [r7, #6]
 801c014:	b29b      	uxth	r3, r3
 801c016:	79f9      	ldrb	r1, [r7, #7]
 801c018:	683a      	ldr	r2, [r7, #0]
 801c01a:	4806      	ldr	r0, [pc, #24]	; (801c034 <SUBGRF_ReadBuffer+0x40>)
 801c01c:	f7eb fd82 	bl	8007b24 <HAL_SUBGHZ_ReadBuffer>
 801c020:	697b      	ldr	r3, [r7, #20]
 801c022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c024:	693b      	ldr	r3, [r7, #16]
 801c026:	f383 8810 	msr	PRIMASK, r3
}
 801c02a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c02c:	bf00      	nop
 801c02e:	3718      	adds	r7, #24
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}
 801c034:	200002bc 	.word	0x200002bc

0801c038 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b086      	sub	sp, #24
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	4603      	mov	r3, r0
 801c040:	6039      	str	r1, [r7, #0]
 801c042:	71fb      	strb	r3, [r7, #7]
 801c044:	4613      	mov	r3, r2
 801c046:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c048:	f3ef 8310 	mrs	r3, PRIMASK
 801c04c:	60fb      	str	r3, [r7, #12]
  return(result);
 801c04e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c052:	b672      	cpsid	i
}
 801c054:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801c056:	88bb      	ldrh	r3, [r7, #4]
 801c058:	79f9      	ldrb	r1, [r7, #7]
 801c05a:	683a      	ldr	r2, [r7, #0]
 801c05c:	4806      	ldr	r0, [pc, #24]	; (801c078 <SUBGRF_WriteCommand+0x40>)
 801c05e:	f7eb fc5b 	bl	8007918 <HAL_SUBGHZ_ExecSetCmd>
 801c062:	697b      	ldr	r3, [r7, #20]
 801c064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c066:	693b      	ldr	r3, [r7, #16]
 801c068:	f383 8810 	msr	PRIMASK, r3
}
 801c06c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c06e:	bf00      	nop
 801c070:	3718      	adds	r7, #24
 801c072:	46bd      	mov	sp, r7
 801c074:	bd80      	pop	{r7, pc}
 801c076:	bf00      	nop
 801c078:	200002bc 	.word	0x200002bc

0801c07c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c07c:	b580      	push	{r7, lr}
 801c07e:	b086      	sub	sp, #24
 801c080:	af00      	add	r7, sp, #0
 801c082:	4603      	mov	r3, r0
 801c084:	6039      	str	r1, [r7, #0]
 801c086:	71fb      	strb	r3, [r7, #7]
 801c088:	4613      	mov	r3, r2
 801c08a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c08c:	f3ef 8310 	mrs	r3, PRIMASK
 801c090:	60fb      	str	r3, [r7, #12]
  return(result);
 801c092:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c096:	b672      	cpsid	i
}
 801c098:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c09a:	88bb      	ldrh	r3, [r7, #4]
 801c09c:	79f9      	ldrb	r1, [r7, #7]
 801c09e:	683a      	ldr	r2, [r7, #0]
 801c0a0:	4806      	ldr	r0, [pc, #24]	; (801c0bc <SUBGRF_ReadCommand+0x40>)
 801c0a2:	f7eb fc98 	bl	80079d6 <HAL_SUBGHZ_ExecGetCmd>
 801c0a6:	697b      	ldr	r3, [r7, #20]
 801c0a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0aa:	693b      	ldr	r3, [r7, #16]
 801c0ac:	f383 8810 	msr	PRIMASK, r3
}
 801c0b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c0b2:	bf00      	nop
 801c0b4:	3718      	adds	r7, #24
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}
 801c0ba:	bf00      	nop
 801c0bc:	200002bc 	.word	0x200002bc

0801c0c0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b084      	sub	sp, #16
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	460a      	mov	r2, r1
 801c0ca:	71fb      	strb	r3, [r7, #7]
 801c0cc:	4613      	mov	r3, r2
 801c0ce:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c0d0:	2301      	movs	r3, #1
 801c0d2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c0d4:	79bb      	ldrb	r3, [r7, #6]
 801c0d6:	2b01      	cmp	r3, #1
 801c0d8:	d10d      	bne.n	801c0f6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c0da:	79fb      	ldrb	r3, [r7, #7]
 801c0dc:	2b01      	cmp	r3, #1
 801c0de:	d104      	bne.n	801c0ea <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c0e0:	2302      	movs	r3, #2
 801c0e2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c0e4:	2004      	movs	r0, #4
 801c0e6:	f000 f8ef 	bl	801c2c8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c0ea:	79fb      	ldrb	r3, [r7, #7]
 801c0ec:	2b02      	cmp	r3, #2
 801c0ee:	d107      	bne.n	801c100 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c0f0:	2303      	movs	r3, #3
 801c0f2:	73fb      	strb	r3, [r7, #15]
 801c0f4:	e004      	b.n	801c100 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c0f6:	79bb      	ldrb	r3, [r7, #6]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d101      	bne.n	801c100 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c0fc:	2301      	movs	r3, #1
 801c0fe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c100:	7bfb      	ldrb	r3, [r7, #15]
 801c102:	4618      	mov	r0, r3
 801c104:	f7ee ff47 	bl	800af96 <RBI_ConfigRFSwitch>
}
 801c108:	bf00      	nop
 801c10a:	3710      	adds	r7, #16
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}

0801c110 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b084      	sub	sp, #16
 801c114:	af00      	add	r7, sp, #0
 801c116:	4603      	mov	r3, r0
 801c118:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c11a:	2301      	movs	r3, #1
 801c11c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c11e:	f7ee ff48 	bl	800afb2 <RBI_GetTxConfig>
 801c122:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c124:	68bb      	ldr	r3, [r7, #8]
 801c126:	2b02      	cmp	r3, #2
 801c128:	d016      	beq.n	801c158 <SUBGRF_SetRfTxPower+0x48>
 801c12a:	68bb      	ldr	r3, [r7, #8]
 801c12c:	2b02      	cmp	r3, #2
 801c12e:	dc16      	bgt.n	801c15e <SUBGRF_SetRfTxPower+0x4e>
 801c130:	68bb      	ldr	r3, [r7, #8]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d003      	beq.n	801c13e <SUBGRF_SetRfTxPower+0x2e>
 801c136:	68bb      	ldr	r3, [r7, #8]
 801c138:	2b01      	cmp	r3, #1
 801c13a:	d00a      	beq.n	801c152 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c13c:	e00f      	b.n	801c15e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c142:	2b0f      	cmp	r3, #15
 801c144:	dd02      	ble.n	801c14c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c146:	2302      	movs	r3, #2
 801c148:	73fb      	strb	r3, [r7, #15]
            break;
 801c14a:	e009      	b.n	801c160 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c14c:	2301      	movs	r3, #1
 801c14e:	73fb      	strb	r3, [r7, #15]
            break;
 801c150:	e006      	b.n	801c160 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c152:	2301      	movs	r3, #1
 801c154:	73fb      	strb	r3, [r7, #15]
            break;
 801c156:	e003      	b.n	801c160 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c158:	2302      	movs	r3, #2
 801c15a:	73fb      	strb	r3, [r7, #15]
            break;
 801c15c:	e000      	b.n	801c160 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c15e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c160:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c164:	7bfb      	ldrb	r3, [r7, #15]
 801c166:	2202      	movs	r2, #2
 801c168:	4618      	mov	r0, r3
 801c16a:	f7ff fbcd 	bl	801b908 <SUBGRF_SetTxParams>

    return paSelect;
 801c16e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c170:	4618      	mov	r0, r3
 801c172:	3710      	adds	r7, #16
 801c174:	46bd      	mov	sp, r7
 801c176:	bd80      	pop	{r7, pc}

0801c178 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c178:	b480      	push	{r7}
 801c17a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c17c:	2301      	movs	r3, #1
}
 801c17e:	4618      	mov	r0, r3
 801c180:	46bd      	mov	sp, r7
 801c182:	bc80      	pop	{r7}
 801c184:	4770      	bx	lr
	...

0801c188 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b082      	sub	sp, #8
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c190:	4b03      	ldr	r3, [pc, #12]	; (801c1a0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	2001      	movs	r0, #1
 801c196:	4798      	blx	r3
}
 801c198:	bf00      	nop
 801c19a:	3708      	adds	r7, #8
 801c19c:	46bd      	mov	sp, r7
 801c19e:	bd80      	pop	{r7, pc}
 801c1a0:	20001c80 	.word	0x20001c80

0801c1a4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b082      	sub	sp, #8
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c1ac:	4b03      	ldr	r3, [pc, #12]	; (801c1bc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	2002      	movs	r0, #2
 801c1b2:	4798      	blx	r3
}
 801c1b4:	bf00      	nop
 801c1b6:	3708      	adds	r7, #8
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd80      	pop	{r7, pc}
 801c1bc:	20001c80 	.word	0x20001c80

0801c1c0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b082      	sub	sp, #8
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c1c8:	4b03      	ldr	r3, [pc, #12]	; (801c1d8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	2040      	movs	r0, #64	; 0x40
 801c1ce:	4798      	blx	r3
}
 801c1d0:	bf00      	nop
 801c1d2:	3708      	adds	r7, #8
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	bd80      	pop	{r7, pc}
 801c1d8:	20001c80 	.word	0x20001c80

0801c1dc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b082      	sub	sp, #8
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
 801c1e4:	460b      	mov	r3, r1
 801c1e6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c1e8:	78fb      	ldrb	r3, [r7, #3]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d002      	beq.n	801c1f4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c1ee:	2b01      	cmp	r3, #1
 801c1f0:	d005      	beq.n	801c1fe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c1f2:	e00a      	b.n	801c20a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c1f4:	4b07      	ldr	r3, [pc, #28]	; (801c214 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	2080      	movs	r0, #128	; 0x80
 801c1fa:	4798      	blx	r3
            break;
 801c1fc:	e005      	b.n	801c20a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c1fe:	4b05      	ldr	r3, [pc, #20]	; (801c214 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c206:	4798      	blx	r3
            break;
 801c208:	bf00      	nop
    }
}
 801c20a:	bf00      	nop
 801c20c:	3708      	adds	r7, #8
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd80      	pop	{r7, pc}
 801c212:	bf00      	nop
 801c214:	20001c80 	.word	0x20001c80

0801c218 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b082      	sub	sp, #8
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c220:	4b04      	ldr	r3, [pc, #16]	; (801c234 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c228:	4798      	blx	r3
}
 801c22a:	bf00      	nop
 801c22c:	3708      	adds	r7, #8
 801c22e:	46bd      	mov	sp, r7
 801c230:	bd80      	pop	{r7, pc}
 801c232:	bf00      	nop
 801c234:	20001c80 	.word	0x20001c80

0801c238 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c238:	b580      	push	{r7, lr}
 801c23a:	b082      	sub	sp, #8
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801c240:	4b03      	ldr	r3, [pc, #12]	; (801c250 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	2020      	movs	r0, #32
 801c246:	4798      	blx	r3
}
 801c248:	bf00      	nop
 801c24a:	3708      	adds	r7, #8
 801c24c:	46bd      	mov	sp, r7
 801c24e:	bd80      	pop	{r7, pc}
 801c250:	20001c80 	.word	0x20001c80

0801c254 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c254:	b580      	push	{r7, lr}
 801c256:	b082      	sub	sp, #8
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801c25c:	4b03      	ldr	r3, [pc, #12]	; (801c26c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	2004      	movs	r0, #4
 801c262:	4798      	blx	r3
}
 801c264:	bf00      	nop
 801c266:	3708      	adds	r7, #8
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}
 801c26c:	20001c80 	.word	0x20001c80

0801c270 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b082      	sub	sp, #8
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c278:	4b03      	ldr	r3, [pc, #12]	; (801c288 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	2008      	movs	r0, #8
 801c27e:	4798      	blx	r3
}
 801c280:	bf00      	nop
 801c282:	3708      	adds	r7, #8
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}
 801c288:	20001c80 	.word	0x20001c80

0801c28c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b082      	sub	sp, #8
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c294:	4b03      	ldr	r3, [pc, #12]	; (801c2a4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	2010      	movs	r0, #16
 801c29a:	4798      	blx	r3
}
 801c29c:	bf00      	nop
 801c29e:	3708      	adds	r7, #8
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	bd80      	pop	{r7, pc}
 801c2a4:	20001c80 	.word	0x20001c80

0801c2a8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b082      	sub	sp, #8
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801c2b0:	4b04      	ldr	r3, [pc, #16]	; (801c2c4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c2b8:	4798      	blx	r3
}
 801c2ba:	bf00      	nop
 801c2bc:	3708      	adds	r7, #8
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bd80      	pop	{r7, pc}
 801c2c2:	bf00      	nop
 801c2c4:	20001c80 	.word	0x20001c80

0801c2c8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b084      	sub	sp, #16
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	4603      	mov	r3, r0
 801c2d0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c2d2:	f7ee fe7c 	bl	800afce <RBI_IsDCDC>
 801c2d6:	4603      	mov	r3, r0
 801c2d8:	2b01      	cmp	r3, #1
 801c2da:	d112      	bne.n	801c302 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c2dc:	f640 1023 	movw	r0, #2339	; 0x923
 801c2e0:	f7ff fe0e 	bl	801bf00 <SUBGRF_ReadRegister>
 801c2e4:	4603      	mov	r3, r0
 801c2e6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c2e8:	7bfb      	ldrb	r3, [r7, #15]
 801c2ea:	f023 0306 	bic.w	r3, r3, #6
 801c2ee:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c2f0:	7bfa      	ldrb	r2, [r7, #15]
 801c2f2:	79fb      	ldrb	r3, [r7, #7]
 801c2f4:	4313      	orrs	r3, r2
 801c2f6:	b2db      	uxtb	r3, r3
 801c2f8:	4619      	mov	r1, r3
 801c2fa:	f640 1023 	movw	r0, #2339	; 0x923
 801c2fe:	f7ff fdeb 	bl	801bed8 <SUBGRF_WriteRegister>
  }
}
 801c302:	bf00      	nop
 801c304:	3710      	adds	r7, #16
 801c306:	46bd      	mov	sp, r7
 801c308:	bd80      	pop	{r7, pc}
	...

0801c30c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c30c:	b480      	push	{r7}
 801c30e:	b085      	sub	sp, #20
 801c310:	af00      	add	r7, sp, #0
 801c312:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d101      	bne.n	801c31e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c31a:	231f      	movs	r3, #31
 801c31c:	e016      	b.n	801c34c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c31e:	2300      	movs	r3, #0
 801c320:	73fb      	strb	r3, [r7, #15]
 801c322:	e00f      	b.n	801c344 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c324:	7bfb      	ldrb	r3, [r7, #15]
 801c326:	4a0c      	ldr	r2, [pc, #48]	; (801c358 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c32c:	687a      	ldr	r2, [r7, #4]
 801c32e:	429a      	cmp	r2, r3
 801c330:	d205      	bcs.n	801c33e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c332:	7bfb      	ldrb	r3, [r7, #15]
 801c334:	4a08      	ldr	r2, [pc, #32]	; (801c358 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c336:	00db      	lsls	r3, r3, #3
 801c338:	4413      	add	r3, r2
 801c33a:	791b      	ldrb	r3, [r3, #4]
 801c33c:	e006      	b.n	801c34c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c33e:	7bfb      	ldrb	r3, [r7, #15]
 801c340:	3301      	adds	r3, #1
 801c342:	73fb      	strb	r3, [r7, #15]
 801c344:	7bfb      	ldrb	r3, [r7, #15]
 801c346:	2b15      	cmp	r3, #21
 801c348:	d9ec      	bls.n	801c324 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c34a:	e7fe      	b.n	801c34a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c34c:	4618      	mov	r0, r3
 801c34e:	3714      	adds	r7, #20
 801c350:	46bd      	mov	sp, r7
 801c352:	bc80      	pop	{r7}
 801c354:	4770      	bx	lr
 801c356:	bf00      	nop
 801c358:	0801ec3c 	.word	0x0801ec3c

0801c35c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b08a      	sub	sp, #40	; 0x28
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
 801c364:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c366:	4b35      	ldr	r3, [pc, #212]	; (801c43c <SUBGRF_GetCFO+0xe0>)
 801c368:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c36a:	f640 0007 	movw	r0, #2055	; 0x807
 801c36e:	f7ff fdc7 	bl	801bf00 <SUBGRF_ReadRegister>
 801c372:	4603      	mov	r3, r0
 801c374:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c376:	7ffb      	ldrb	r3, [r7, #31]
 801c378:	08db      	lsrs	r3, r3, #3
 801c37a:	b2db      	uxtb	r3, r3
 801c37c:	f003 0303 	and.w	r3, r3, #3
 801c380:	3328      	adds	r3, #40	; 0x28
 801c382:	443b      	add	r3, r7
 801c384:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c388:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c38a:	7ffb      	ldrb	r3, [r7, #31]
 801c38c:	f003 0307 	and.w	r3, r3, #7
 801c390:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c392:	7fba      	ldrb	r2, [r7, #30]
 801c394:	7f7b      	ldrb	r3, [r7, #29]
 801c396:	3301      	adds	r3, #1
 801c398:	fa02 f303 	lsl.w	r3, r2, r3
 801c39c:	461a      	mov	r2, r3
 801c39e:	4b28      	ldr	r3, [pc, #160]	; (801c440 <SUBGRF_GetCFO+0xe4>)
 801c3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 801c3a4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c3a6:	69ba      	ldr	r2, [r7, #24]
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 801c3ae:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c3b0:	2301      	movs	r3, #1
 801c3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3ba:	697a      	ldr	r2, [r7, #20]
 801c3bc:	fb02 f303 	mul.w	r3, r2, r3
 801c3c0:	2b07      	cmp	r3, #7
 801c3c2:	d802      	bhi.n	801c3ca <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c3c4:	2302      	movs	r3, #2
 801c3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3ce:	697a      	ldr	r2, [r7, #20]
 801c3d0:	fb02 f303 	mul.w	r3, r2, r3
 801c3d4:	2b03      	cmp	r3, #3
 801c3d6:	d802      	bhi.n	801c3de <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c3d8:	2304      	movs	r3, #4
 801c3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c3de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c3e2:	69bb      	ldr	r3, [r7, #24]
 801c3e4:	fb02 f303 	mul.w	r3, r2, r3
 801c3e8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c3ea:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c3ee:	f7ff fd87 	bl	801bf00 <SUBGRF_ReadRegister>
 801c3f2:	4603      	mov	r3, r0
 801c3f4:	021b      	lsls	r3, r3, #8
 801c3f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c3fa:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c3fc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c400:	f7ff fd7e 	bl	801bf00 <SUBGRF_ReadRegister>
 801c404:	4603      	mov	r3, r0
 801c406:	461a      	mov	r2, r3
 801c408:	6a3b      	ldr	r3, [r7, #32]
 801c40a:	4313      	orrs	r3, r2
 801c40c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c40e:	6a3b      	ldr	r3, [r7, #32]
 801c410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c414:	2b00      	cmp	r3, #0
 801c416:	d005      	beq.n	801c424 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c418:	6a3b      	ldr	r3, [r7, #32]
 801c41a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c41e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c422:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c424:	693b      	ldr	r3, [r7, #16]
 801c426:	095b      	lsrs	r3, r3, #5
 801c428:	6a3a      	ldr	r2, [r7, #32]
 801c42a:	fb02 f303 	mul.w	r3, r2, r3
 801c42e:	11da      	asrs	r2, r3, #7
 801c430:	683b      	ldr	r3, [r7, #0]
 801c432:	601a      	str	r2, [r3, #0]
}
 801c434:	bf00      	nop
 801c436:	3728      	adds	r7, #40	; 0x28
 801c438:	46bd      	mov	sp, r7
 801c43a:	bd80      	pop	{r7, pc}
 801c43c:	0c0a0804 	.word	0x0c0a0804
 801c440:	01e84800 	.word	0x01e84800

0801c444 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c444:	b480      	push	{r7}
 801c446:	b087      	sub	sp, #28
 801c448:	af00      	add	r7, sp, #0
 801c44a:	4603      	mov	r3, r0
 801c44c:	60b9      	str	r1, [r7, #8]
 801c44e:	607a      	str	r2, [r7, #4]
 801c450:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c452:	2300      	movs	r3, #0
 801c454:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c45a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c45c:	697b      	ldr	r3, [r7, #20]
}
 801c45e:	4618      	mov	r0, r3
 801c460:	371c      	adds	r7, #28
 801c462:	46bd      	mov	sp, r7
 801c464:	bc80      	pop	{r7}
 801c466:	4770      	bx	lr

0801c468 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c468:	b480      	push	{r7}
 801c46a:	b087      	sub	sp, #28
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	4603      	mov	r3, r0
 801c470:	60b9      	str	r1, [r7, #8]
 801c472:	607a      	str	r2, [r7, #4]
 801c474:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c476:	2300      	movs	r3, #0
 801c478:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c47a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c47e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c480:	697b      	ldr	r3, [r7, #20]
}
 801c482:	4618      	mov	r0, r3
 801c484:	371c      	adds	r7, #28
 801c486:	46bd      	mov	sp, r7
 801c488:	bc80      	pop	{r7}
 801c48a:	4770      	bx	lr

0801c48c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c48c:	b480      	push	{r7}
 801c48e:	b085      	sub	sp, #20
 801c490:	af00      	add	r7, sp, #0
 801c492:	60f8      	str	r0, [r7, #12]
 801c494:	60b9      	str	r1, [r7, #8]
 801c496:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c49c:	4618      	mov	r0, r3
 801c49e:	3714      	adds	r7, #20
 801c4a0:	46bd      	mov	sp, r7
 801c4a2:	bc80      	pop	{r7}
 801c4a4:	4770      	bx	lr

0801c4a6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c4a6:	b480      	push	{r7}
 801c4a8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c4aa:	bf00      	nop
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	bc80      	pop	{r7}
 801c4b0:	4770      	bx	lr

0801c4b2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c4b2:	b480      	push	{r7}
 801c4b4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c4b6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bc80      	pop	{r7}
 801c4be:	4770      	bx	lr

0801c4c0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c4c0:	b480      	push	{r7}
 801c4c2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c4c4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c4c6:	4618      	mov	r0, r3
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bc80      	pop	{r7}
 801c4cc:	4770      	bx	lr

0801c4ce <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c4ce:	b480      	push	{r7}
 801c4d0:	b083      	sub	sp, #12
 801c4d2:	af00      	add	r7, sp, #0
 801c4d4:	4603      	mov	r3, r0
 801c4d6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c4d8:	bf00      	nop
 801c4da:	370c      	adds	r7, #12
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bc80      	pop	{r7}
 801c4e0:	4770      	bx	lr

0801c4e2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c4e2:	b480      	push	{r7}
 801c4e4:	b087      	sub	sp, #28
 801c4e6:	af00      	add	r7, sp, #0
 801c4e8:	60f8      	str	r0, [r7, #12]
 801c4ea:	460b      	mov	r3, r1
 801c4ec:	607a      	str	r2, [r7, #4]
 801c4ee:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c4f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4f4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c4f6:	697b      	ldr	r3, [r7, #20]
}
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	371c      	adds	r7, #28
 801c4fc:	46bd      	mov	sp, r7
 801c4fe:	bc80      	pop	{r7}
 801c500:	4770      	bx	lr

0801c502 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c502:	b480      	push	{r7}
 801c504:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c50a:	4618      	mov	r0, r3
 801c50c:	46bd      	mov	sp, r7
 801c50e:	bc80      	pop	{r7}
 801c510:	4770      	bx	lr

0801c512 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c512:	b480      	push	{r7}
 801c514:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c516:	bf00      	nop
 801c518:	46bd      	mov	sp, r7
 801c51a:	bc80      	pop	{r7}
 801c51c:	4770      	bx	lr

0801c51e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c51e:	b480      	push	{r7}
 801c520:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c522:	bf00      	nop
 801c524:	46bd      	mov	sp, r7
 801c526:	bc80      	pop	{r7}
 801c528:	4770      	bx	lr

0801c52a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c52a:	b480      	push	{r7}
 801c52c:	b083      	sub	sp, #12
 801c52e:	af00      	add	r7, sp, #0
 801c530:	4603      	mov	r3, r0
 801c532:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c534:	bf00      	nop
 801c536:	370c      	adds	r7, #12
 801c538:	46bd      	mov	sp, r7
 801c53a:	bc80      	pop	{r7}
 801c53c:	4770      	bx	lr
	...

0801c540 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c540:	b480      	push	{r7}
 801c542:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c544:	4b04      	ldr	r3, [pc, #16]	; (801c558 <UTIL_LPM_Init+0x18>)
 801c546:	2200      	movs	r2, #0
 801c548:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c54a:	4b04      	ldr	r3, [pc, #16]	; (801c55c <UTIL_LPM_Init+0x1c>)
 801c54c:	2200      	movs	r2, #0
 801c54e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c550:	bf00      	nop
 801c552:	46bd      	mov	sp, r7
 801c554:	bc80      	pop	{r7}
 801c556:	4770      	bx	lr
 801c558:	20001c84 	.word	0x20001c84
 801c55c:	20001c88 	.word	0x20001c88

0801c560 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c560:	b480      	push	{r7}
 801c562:	b087      	sub	sp, #28
 801c564:	af00      	add	r7, sp, #0
 801c566:	6078      	str	r0, [r7, #4]
 801c568:	460b      	mov	r3, r1
 801c56a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c56c:	f3ef 8310 	mrs	r3, PRIMASK
 801c570:	613b      	str	r3, [r7, #16]
  return(result);
 801c572:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c576:	b672      	cpsid	i
}
 801c578:	bf00      	nop
  
  switch( state )
 801c57a:	78fb      	ldrb	r3, [r7, #3]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d008      	beq.n	801c592 <UTIL_LPM_SetStopMode+0x32>
 801c580:	2b01      	cmp	r3, #1
 801c582:	d10e      	bne.n	801c5a2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c584:	4b0d      	ldr	r3, [pc, #52]	; (801c5bc <UTIL_LPM_SetStopMode+0x5c>)
 801c586:	681a      	ldr	r2, [r3, #0]
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	4313      	orrs	r3, r2
 801c58c:	4a0b      	ldr	r2, [pc, #44]	; (801c5bc <UTIL_LPM_SetStopMode+0x5c>)
 801c58e:	6013      	str	r3, [r2, #0]
      break;
 801c590:	e008      	b.n	801c5a4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	43da      	mvns	r2, r3
 801c596:	4b09      	ldr	r3, [pc, #36]	; (801c5bc <UTIL_LPM_SetStopMode+0x5c>)
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	4013      	ands	r3, r2
 801c59c:	4a07      	ldr	r2, [pc, #28]	; (801c5bc <UTIL_LPM_SetStopMode+0x5c>)
 801c59e:	6013      	str	r3, [r2, #0]
      break;
 801c5a0:	e000      	b.n	801c5a4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c5a2:	bf00      	nop
 801c5a4:	697b      	ldr	r3, [r7, #20]
 801c5a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	f383 8810 	msr	PRIMASK, r3
}
 801c5ae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c5b0:	bf00      	nop
 801c5b2:	371c      	adds	r7, #28
 801c5b4:	46bd      	mov	sp, r7
 801c5b6:	bc80      	pop	{r7}
 801c5b8:	4770      	bx	lr
 801c5ba:	bf00      	nop
 801c5bc:	20001c84 	.word	0x20001c84

0801c5c0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c5c0:	b480      	push	{r7}
 801c5c2:	b087      	sub	sp, #28
 801c5c4:	af00      	add	r7, sp, #0
 801c5c6:	6078      	str	r0, [r7, #4]
 801c5c8:	460b      	mov	r3, r1
 801c5ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5cc:	f3ef 8310 	mrs	r3, PRIMASK
 801c5d0:	613b      	str	r3, [r7, #16]
  return(result);
 801c5d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c5d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5d6:	b672      	cpsid	i
}
 801c5d8:	bf00      	nop
  
  switch(state)
 801c5da:	78fb      	ldrb	r3, [r7, #3]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d008      	beq.n	801c5f2 <UTIL_LPM_SetOffMode+0x32>
 801c5e0:	2b01      	cmp	r3, #1
 801c5e2:	d10e      	bne.n	801c602 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c5e4:	4b0d      	ldr	r3, [pc, #52]	; (801c61c <UTIL_LPM_SetOffMode+0x5c>)
 801c5e6:	681a      	ldr	r2, [r3, #0]
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	4313      	orrs	r3, r2
 801c5ec:	4a0b      	ldr	r2, [pc, #44]	; (801c61c <UTIL_LPM_SetOffMode+0x5c>)
 801c5ee:	6013      	str	r3, [r2, #0]
      break;
 801c5f0:	e008      	b.n	801c604 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	43da      	mvns	r2, r3
 801c5f6:	4b09      	ldr	r3, [pc, #36]	; (801c61c <UTIL_LPM_SetOffMode+0x5c>)
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	4013      	ands	r3, r2
 801c5fc:	4a07      	ldr	r2, [pc, #28]	; (801c61c <UTIL_LPM_SetOffMode+0x5c>)
 801c5fe:	6013      	str	r3, [r2, #0]
      break;
 801c600:	e000      	b.n	801c604 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c602:	bf00      	nop
 801c604:	697b      	ldr	r3, [r7, #20]
 801c606:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	f383 8810 	msr	PRIMASK, r3
}
 801c60e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c610:	bf00      	nop
 801c612:	371c      	adds	r7, #28
 801c614:	46bd      	mov	sp, r7
 801c616:	bc80      	pop	{r7}
 801c618:	4770      	bx	lr
 801c61a:	bf00      	nop
 801c61c:	20001c88 	.word	0x20001c88

0801c620 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b084      	sub	sp, #16
 801c624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c626:	f3ef 8310 	mrs	r3, PRIMASK
 801c62a:	60bb      	str	r3, [r7, #8]
  return(result);
 801c62c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c62e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c630:	b672      	cpsid	i
}
 801c632:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c634:	4b12      	ldr	r3, [pc, #72]	; (801c680 <UTIL_LPM_EnterLowPower+0x60>)
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d006      	beq.n	801c64a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c63c:	4b11      	ldr	r3, [pc, #68]	; (801c684 <UTIL_LPM_EnterLowPower+0x64>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c642:	4b10      	ldr	r3, [pc, #64]	; (801c684 <UTIL_LPM_EnterLowPower+0x64>)
 801c644:	685b      	ldr	r3, [r3, #4]
 801c646:	4798      	blx	r3
 801c648:	e010      	b.n	801c66c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c64a:	4b0f      	ldr	r3, [pc, #60]	; (801c688 <UTIL_LPM_EnterLowPower+0x68>)
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d006      	beq.n	801c660 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c652:	4b0c      	ldr	r3, [pc, #48]	; (801c684 <UTIL_LPM_EnterLowPower+0x64>)
 801c654:	689b      	ldr	r3, [r3, #8]
 801c656:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c658:	4b0a      	ldr	r3, [pc, #40]	; (801c684 <UTIL_LPM_EnterLowPower+0x64>)
 801c65a:	68db      	ldr	r3, [r3, #12]
 801c65c:	4798      	blx	r3
 801c65e:	e005      	b.n	801c66c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c660:	4b08      	ldr	r3, [pc, #32]	; (801c684 <UTIL_LPM_EnterLowPower+0x64>)
 801c662:	691b      	ldr	r3, [r3, #16]
 801c664:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c666:	4b07      	ldr	r3, [pc, #28]	; (801c684 <UTIL_LPM_EnterLowPower+0x64>)
 801c668:	695b      	ldr	r3, [r3, #20]
 801c66a:	4798      	blx	r3
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	f383 8810 	msr	PRIMASK, r3
}
 801c676:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c678:	bf00      	nop
 801c67a:	3710      	adds	r7, #16
 801c67c:	46bd      	mov	sp, r7
 801c67e:	bd80      	pop	{r7, pc}
 801c680:	20001c84 	.word	0x20001c84
 801c684:	0801e62c 	.word	0x0801e62c
 801c688:	20001c88 	.word	0x20001c88

0801c68c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c68c:	b480      	push	{r7}
 801c68e:	b087      	sub	sp, #28
 801c690:	af00      	add	r7, sp, #0
 801c692:	60f8      	str	r0, [r7, #12]
 801c694:	60b9      	str	r1, [r7, #8]
 801c696:	4613      	mov	r3, r2
 801c698:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c69e:	68bb      	ldr	r3, [r7, #8]
 801c6a0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c6a2:	e007      	b.n	801c6b4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c6a4:	693a      	ldr	r2, [r7, #16]
 801c6a6:	1c53      	adds	r3, r2, #1
 801c6a8:	613b      	str	r3, [r7, #16]
 801c6aa:	697b      	ldr	r3, [r7, #20]
 801c6ac:	1c59      	adds	r1, r3, #1
 801c6ae:	6179      	str	r1, [r7, #20]
 801c6b0:	7812      	ldrb	r2, [r2, #0]
 801c6b2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c6b4:	88fb      	ldrh	r3, [r7, #6]
 801c6b6:	1e5a      	subs	r2, r3, #1
 801c6b8:	80fa      	strh	r2, [r7, #6]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d1f2      	bne.n	801c6a4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c6be:	bf00      	nop
 801c6c0:	bf00      	nop
 801c6c2:	371c      	adds	r7, #28
 801c6c4:	46bd      	mov	sp, r7
 801c6c6:	bc80      	pop	{r7}
 801c6c8:	4770      	bx	lr

0801c6ca <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c6ca:	b480      	push	{r7}
 801c6cc:	b085      	sub	sp, #20
 801c6ce:	af00      	add	r7, sp, #0
 801c6d0:	6078      	str	r0, [r7, #4]
 801c6d2:	460b      	mov	r3, r1
 801c6d4:	70fb      	strb	r3, [r7, #3]
 801c6d6:	4613      	mov	r3, r2
 801c6d8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c6de:	e004      	b.n	801c6ea <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	1c5a      	adds	r2, r3, #1
 801c6e4:	60fa      	str	r2, [r7, #12]
 801c6e6:	78fa      	ldrb	r2, [r7, #3]
 801c6e8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c6ea:	883b      	ldrh	r3, [r7, #0]
 801c6ec:	1e5a      	subs	r2, r3, #1
 801c6ee:	803a      	strh	r2, [r7, #0]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d1f5      	bne.n	801c6e0 <UTIL_MEM_set_8+0x16>
  }
}
 801c6f4:	bf00      	nop
 801c6f6:	bf00      	nop
 801c6f8:	3714      	adds	r7, #20
 801c6fa:	46bd      	mov	sp, r7
 801c6fc:	bc80      	pop	{r7}
 801c6fe:	4770      	bx	lr

0801c700 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c700:	b082      	sub	sp, #8
 801c702:	b480      	push	{r7}
 801c704:	b087      	sub	sp, #28
 801c706:	af00      	add	r7, sp, #0
 801c708:	60f8      	str	r0, [r7, #12]
 801c70a:	1d38      	adds	r0, r7, #4
 801c70c:	e880 0006 	stmia.w	r0, {r1, r2}
 801c710:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c712:	2300      	movs	r3, #0
 801c714:	613b      	str	r3, [r7, #16]
 801c716:	2300      	movs	r3, #0
 801c718:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c71a:	687a      	ldr	r2, [r7, #4]
 801c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c71e:	4413      	add	r3, r2
 801c720:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c722:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c726:	b29a      	uxth	r2, r3
 801c728:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c72c:	b29b      	uxth	r3, r3
 801c72e:	4413      	add	r3, r2
 801c730:	b29b      	uxth	r3, r3
 801c732:	b21b      	sxth	r3, r3
 801c734:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c736:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c73a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c73e:	db0a      	blt.n	801c756 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c740:	693b      	ldr	r3, [r7, #16]
 801c742:	3301      	adds	r3, #1
 801c744:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c746:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c74a:	b29b      	uxth	r3, r3
 801c74c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801c750:	b29b      	uxth	r3, r3
 801c752:	b21b      	sxth	r3, r3
 801c754:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	461a      	mov	r2, r3
 801c75a:	f107 0310 	add.w	r3, r7, #16
 801c75e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c762:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c766:	68f8      	ldr	r0, [r7, #12]
 801c768:	371c      	adds	r7, #28
 801c76a:	46bd      	mov	sp, r7
 801c76c:	bc80      	pop	{r7}
 801c76e:	b002      	add	sp, #8
 801c770:	4770      	bx	lr

0801c772 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c772:	b082      	sub	sp, #8
 801c774:	b480      	push	{r7}
 801c776:	b087      	sub	sp, #28
 801c778:	af00      	add	r7, sp, #0
 801c77a:	60f8      	str	r0, [r7, #12]
 801c77c:	1d38      	adds	r0, r7, #4
 801c77e:	e880 0006 	stmia.w	r0, {r1, r2}
 801c782:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c784:	2300      	movs	r3, #0
 801c786:	613b      	str	r3, [r7, #16]
 801c788:	2300      	movs	r3, #0
 801c78a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c78c:	687a      	ldr	r2, [r7, #4]
 801c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c790:	1ad3      	subs	r3, r2, r3
 801c792:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c794:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c798:	b29a      	uxth	r2, r3
 801c79a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c79e:	b29b      	uxth	r3, r3
 801c7a0:	1ad3      	subs	r3, r2, r3
 801c7a2:	b29b      	uxth	r3, r3
 801c7a4:	b21b      	sxth	r3, r3
 801c7a6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c7a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	da0a      	bge.n	801c7c6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c7b0:	693b      	ldr	r3, [r7, #16]
 801c7b2:	3b01      	subs	r3, #1
 801c7b4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c7b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c7ba:	b29b      	uxth	r3, r3
 801c7bc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801c7c0:	b29b      	uxth	r3, r3
 801c7c2:	b21b      	sxth	r3, r3
 801c7c4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	461a      	mov	r2, r3
 801c7ca:	f107 0310 	add.w	r3, r7, #16
 801c7ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c7d2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c7d6:	68f8      	ldr	r0, [r7, #12]
 801c7d8:	371c      	adds	r7, #28
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bc80      	pop	{r7}
 801c7de:	b002      	add	sp, #8
 801c7e0:	4770      	bx	lr
	...

0801c7e4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c7e4:	b580      	push	{r7, lr}
 801c7e6:	b088      	sub	sp, #32
 801c7e8:	af02      	add	r7, sp, #8
 801c7ea:	463b      	mov	r3, r7
 801c7ec:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	60bb      	str	r3, [r7, #8]
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c7f8:	4b10      	ldr	r3, [pc, #64]	; (801c83c <SysTimeSet+0x58>)
 801c7fa:	691b      	ldr	r3, [r3, #16]
 801c7fc:	f107 0208 	add.w	r2, r7, #8
 801c800:	3204      	adds	r2, #4
 801c802:	4610      	mov	r0, r2
 801c804:	4798      	blx	r3
 801c806:	4603      	mov	r3, r0
 801c808:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c80a:	f107 0010 	add.w	r0, r7, #16
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	9300      	str	r3, [sp, #0]
 801c812:	68bb      	ldr	r3, [r7, #8]
 801c814:	463a      	mov	r2, r7
 801c816:	ca06      	ldmia	r2, {r1, r2}
 801c818:	f7ff ffab 	bl	801c772 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c81c:	4b07      	ldr	r3, [pc, #28]	; (801c83c <SysTimeSet+0x58>)
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	693a      	ldr	r2, [r7, #16]
 801c822:	4610      	mov	r0, r2
 801c824:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c826:	4b05      	ldr	r3, [pc, #20]	; (801c83c <SysTimeSet+0x58>)
 801c828:	689b      	ldr	r3, [r3, #8]
 801c82a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c82e:	4610      	mov	r0, r2
 801c830:	4798      	blx	r3
}
 801c832:	bf00      	nop
 801c834:	3718      	adds	r7, #24
 801c836:	46bd      	mov	sp, r7
 801c838:	bd80      	pop	{r7, pc}
 801c83a:	bf00      	nop
 801c83c:	0801e710 	.word	0x0801e710

0801c840 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b08a      	sub	sp, #40	; 0x28
 801c844:	af02      	add	r7, sp, #8
 801c846:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c848:	2300      	movs	r3, #0
 801c84a:	61bb      	str	r3, [r7, #24]
 801c84c:	2300      	movs	r3, #0
 801c84e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c850:	2300      	movs	r3, #0
 801c852:	613b      	str	r3, [r7, #16]
 801c854:	2300      	movs	r3, #0
 801c856:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c858:	4b14      	ldr	r3, [pc, #80]	; (801c8ac <SysTimeGet+0x6c>)
 801c85a:	691b      	ldr	r3, [r3, #16]
 801c85c:	f107 0218 	add.w	r2, r7, #24
 801c860:	3204      	adds	r2, #4
 801c862:	4610      	mov	r0, r2
 801c864:	4798      	blx	r3
 801c866:	4603      	mov	r3, r0
 801c868:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c86a:	4b10      	ldr	r3, [pc, #64]	; (801c8ac <SysTimeGet+0x6c>)
 801c86c:	68db      	ldr	r3, [r3, #12]
 801c86e:	4798      	blx	r3
 801c870:	4603      	mov	r3, r0
 801c872:	b21b      	sxth	r3, r3
 801c874:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c876:	4b0d      	ldr	r3, [pc, #52]	; (801c8ac <SysTimeGet+0x6c>)
 801c878:	685b      	ldr	r3, [r3, #4]
 801c87a:	4798      	blx	r3
 801c87c:	4603      	mov	r3, r0
 801c87e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c880:	f107 0010 	add.w	r0, r7, #16
 801c884:	69fb      	ldr	r3, [r7, #28]
 801c886:	9300      	str	r3, [sp, #0]
 801c888:	69bb      	ldr	r3, [r7, #24]
 801c88a:	f107 0208 	add.w	r2, r7, #8
 801c88e:	ca06      	ldmia	r2, {r1, r2}
 801c890:	f7ff ff36 	bl	801c700 <SysTimeAdd>

  return sysTime;
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	461a      	mov	r2, r3
 801c898:	f107 0310 	add.w	r3, r7, #16
 801c89c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c8a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c8a4:	6878      	ldr	r0, [r7, #4]
 801c8a6:	3720      	adds	r7, #32
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	bd80      	pop	{r7, pc}
 801c8ac:	0801e710 	.word	0x0801e710

0801c8b0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b084      	sub	sp, #16
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	60bb      	str	r3, [r7, #8]
 801c8bc:	2300      	movs	r3, #0
 801c8be:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c8c0:	4b0a      	ldr	r3, [pc, #40]	; (801c8ec <SysTimeGetMcuTime+0x3c>)
 801c8c2:	691b      	ldr	r3, [r3, #16]
 801c8c4:	f107 0208 	add.w	r2, r7, #8
 801c8c8:	3204      	adds	r2, #4
 801c8ca:	4610      	mov	r0, r2
 801c8cc:	4798      	blx	r3
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	461a      	mov	r2, r3
 801c8d6:	f107 0308 	add.w	r3, r7, #8
 801c8da:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c8de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c8e2:	6878      	ldr	r0, [r7, #4]
 801c8e4:	3710      	adds	r7, #16
 801c8e6:	46bd      	mov	sp, r7
 801c8e8:	bd80      	pop	{r7, pc}
 801c8ea:	bf00      	nop
 801c8ec:	0801e710 	.word	0x0801e710

0801c8f0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b088      	sub	sp, #32
 801c8f4:	af02      	add	r7, sp, #8
 801c8f6:	463b      	mov	r3, r7
 801c8f8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c8fc:	4b0f      	ldr	r3, [pc, #60]	; (801c93c <SysTimeToMs+0x4c>)
 801c8fe:	68db      	ldr	r3, [r3, #12]
 801c900:	4798      	blx	r3
 801c902:	4603      	mov	r3, r0
 801c904:	b21b      	sxth	r3, r3
 801c906:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c908:	4b0c      	ldr	r3, [pc, #48]	; (801c93c <SysTimeToMs+0x4c>)
 801c90a:	685b      	ldr	r3, [r3, #4]
 801c90c:	4798      	blx	r3
 801c90e:	4603      	mov	r3, r0
 801c910:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c912:	f107 0008 	add.w	r0, r7, #8
 801c916:	697b      	ldr	r3, [r7, #20]
 801c918:	9300      	str	r3, [sp, #0]
 801c91a:	693b      	ldr	r3, [r7, #16]
 801c91c:	463a      	mov	r2, r7
 801c91e:	ca06      	ldmia	r2, {r1, r2}
 801c920:	f7ff ff27 	bl	801c772 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c924:	68bb      	ldr	r3, [r7, #8]
 801c926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c92a:	fb02 f303 	mul.w	r3, r2, r3
 801c92e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c932:	4413      	add	r3, r2
}
 801c934:	4618      	mov	r0, r3
 801c936:	3718      	adds	r7, #24
 801c938:	46bd      	mov	sp, r7
 801c93a:	bd80      	pop	{r7, pc}
 801c93c:	0801e710 	.word	0x0801e710

0801c940 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c940:	b580      	push	{r7, lr}
 801c942:	b08a      	sub	sp, #40	; 0x28
 801c944:	af02      	add	r7, sp, #8
 801c946:	6078      	str	r0, [r7, #4]
 801c948:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c94a:	683b      	ldr	r3, [r7, #0]
 801c94c:	4a19      	ldr	r2, [pc, #100]	; (801c9b4 <SysTimeFromMs+0x74>)
 801c94e:	fba2 2303 	umull	r2, r3, r2, r3
 801c952:	099b      	lsrs	r3, r3, #6
 801c954:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c956:	69fb      	ldr	r3, [r7, #28]
 801c958:	617b      	str	r3, [r7, #20]
 801c95a:	683b      	ldr	r3, [r7, #0]
 801c95c:	b29a      	uxth	r2, r3
 801c95e:	69fb      	ldr	r3, [r7, #28]
 801c960:	b29b      	uxth	r3, r3
 801c962:	4619      	mov	r1, r3
 801c964:	0149      	lsls	r1, r1, #5
 801c966:	1ac9      	subs	r1, r1, r3
 801c968:	0089      	lsls	r1, r1, #2
 801c96a:	440b      	add	r3, r1
 801c96c:	00db      	lsls	r3, r3, #3
 801c96e:	b29b      	uxth	r3, r3
 801c970:	1ad3      	subs	r3, r2, r3
 801c972:	b29b      	uxth	r3, r3
 801c974:	b21b      	sxth	r3, r3
 801c976:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c978:	f107 030c 	add.w	r3, r7, #12
 801c97c:	2200      	movs	r2, #0
 801c97e:	601a      	str	r2, [r3, #0]
 801c980:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c982:	4b0d      	ldr	r3, [pc, #52]	; (801c9b8 <SysTimeFromMs+0x78>)
 801c984:	68db      	ldr	r3, [r3, #12]
 801c986:	4798      	blx	r3
 801c988:	4603      	mov	r3, r0
 801c98a:	b21b      	sxth	r3, r3
 801c98c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c98e:	4b0a      	ldr	r3, [pc, #40]	; (801c9b8 <SysTimeFromMs+0x78>)
 801c990:	685b      	ldr	r3, [r3, #4]
 801c992:	4798      	blx	r3
 801c994:	4603      	mov	r3, r0
 801c996:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c998:	6878      	ldr	r0, [r7, #4]
 801c99a:	693b      	ldr	r3, [r7, #16]
 801c99c:	9300      	str	r3, [sp, #0]
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	f107 0214 	add.w	r2, r7, #20
 801c9a4:	ca06      	ldmia	r2, {r1, r2}
 801c9a6:	f7ff feab 	bl	801c700 <SysTimeAdd>
}
 801c9aa:	6878      	ldr	r0, [r7, #4]
 801c9ac:	3720      	adds	r7, #32
 801c9ae:	46bd      	mov	sp, r7
 801c9b0:	bd80      	pop	{r7, pc}
 801c9b2:	bf00      	nop
 801c9b4:	10624dd3 	.word	0x10624dd3
 801c9b8:	0801e710 	.word	0x0801e710

0801c9bc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c9bc:	b480      	push	{r7}
 801c9be:	b085      	sub	sp, #20
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c9c8:	e00e      	b.n	801c9e8 <ee_skip_atoi+0x2c>
 801c9ca:	68fa      	ldr	r2, [r7, #12]
 801c9cc:	4613      	mov	r3, r2
 801c9ce:	009b      	lsls	r3, r3, #2
 801c9d0:	4413      	add	r3, r2
 801c9d2:	005b      	lsls	r3, r3, #1
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	1c59      	adds	r1, r3, #1
 801c9dc:	687a      	ldr	r2, [r7, #4]
 801c9de:	6011      	str	r1, [r2, #0]
 801c9e0:	781b      	ldrb	r3, [r3, #0]
 801c9e2:	4403      	add	r3, r0
 801c9e4:	3b30      	subs	r3, #48	; 0x30
 801c9e6:	60fb      	str	r3, [r7, #12]
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	781b      	ldrb	r3, [r3, #0]
 801c9ee:	2b2f      	cmp	r3, #47	; 0x2f
 801c9f0:	d904      	bls.n	801c9fc <ee_skip_atoi+0x40>
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	781b      	ldrb	r3, [r3, #0]
 801c9f8:	2b39      	cmp	r3, #57	; 0x39
 801c9fa:	d9e6      	bls.n	801c9ca <ee_skip_atoi+0xe>
  return i;
 801c9fc:	68fb      	ldr	r3, [r7, #12]
}
 801c9fe:	4618      	mov	r0, r3
 801ca00:	3714      	adds	r7, #20
 801ca02:	46bd      	mov	sp, r7
 801ca04:	bc80      	pop	{r7}
 801ca06:	4770      	bx	lr

0801ca08 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ca08:	b480      	push	{r7}
 801ca0a:	b099      	sub	sp, #100	; 0x64
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	60f8      	str	r0, [r7, #12]
 801ca10:	60b9      	str	r1, [r7, #8]
 801ca12:	607a      	str	r2, [r7, #4]
 801ca14:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ca16:	4b71      	ldr	r3, [pc, #452]	; (801cbdc <ee_number+0x1d4>)
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ca1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d002      	beq.n	801ca2c <ee_number+0x24>
 801ca26:	4b6e      	ldr	r3, [pc, #440]	; (801cbe0 <ee_number+0x1d8>)
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ca2c:	683b      	ldr	r3, [r7, #0]
 801ca2e:	2b01      	cmp	r3, #1
 801ca30:	dd02      	ble.n	801ca38 <ee_number+0x30>
 801ca32:	683b      	ldr	r3, [r7, #0]
 801ca34:	2b24      	cmp	r3, #36	; 0x24
 801ca36:	dd01      	ble.n	801ca3c <ee_number+0x34>
 801ca38:	2300      	movs	r3, #0
 801ca3a:	e0ca      	b.n	801cbd2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801ca3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca3e:	f003 0301 	and.w	r3, r3, #1
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d001      	beq.n	801ca4a <ee_number+0x42>
 801ca46:	2330      	movs	r3, #48	; 0x30
 801ca48:	e000      	b.n	801ca4c <ee_number+0x44>
 801ca4a:	2320      	movs	r3, #32
 801ca4c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801ca50:	2300      	movs	r3, #0
 801ca52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801ca56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca58:	f003 0302 	and.w	r3, r3, #2
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d00b      	beq.n	801ca78 <ee_number+0x70>
  {
    if (num < 0)
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	da08      	bge.n	801ca78 <ee_number+0x70>
    {
      sign = '-';
 801ca66:	232d      	movs	r3, #45	; 0x2d
 801ca68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	425b      	negs	r3, r3
 801ca70:	607b      	str	r3, [r7, #4]
      size--;
 801ca72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ca74:	3b01      	subs	r3, #1
 801ca76:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801ca78:	2300      	movs	r3, #0
 801ca7a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d11e      	bne.n	801cac0 <ee_number+0xb8>
    tmp[i++] = '0';
 801ca82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca84:	1c5a      	adds	r2, r3, #1
 801ca86:	657a      	str	r2, [r7, #84]	; 0x54
 801ca88:	3360      	adds	r3, #96	; 0x60
 801ca8a:	443b      	add	r3, r7
 801ca8c:	2230      	movs	r2, #48	; 0x30
 801ca8e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801ca92:	e018      	b.n	801cac6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	683a      	ldr	r2, [r7, #0]
 801ca98:	fbb3 f1f2 	udiv	r1, r3, r2
 801ca9c:	fb01 f202 	mul.w	r2, r1, r2
 801caa0:	1a9b      	subs	r3, r3, r2
 801caa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801caa4:	441a      	add	r2, r3
 801caa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801caa8:	1c59      	adds	r1, r3, #1
 801caaa:	6579      	str	r1, [r7, #84]	; 0x54
 801caac:	7812      	ldrb	r2, [r2, #0]
 801caae:	3360      	adds	r3, #96	; 0x60
 801cab0:	443b      	add	r3, r7
 801cab2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801cab6:	687a      	ldr	r2, [r7, #4]
 801cab8:	683b      	ldr	r3, [r7, #0]
 801caba:	fbb2 f3f3 	udiv	r3, r2, r3
 801cabe:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d1e6      	bne.n	801ca94 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801cac6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801caca:	429a      	cmp	r2, r3
 801cacc:	dd01      	ble.n	801cad2 <ee_number+0xca>
 801cace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cad0:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801cad2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cad6:	1ad3      	subs	r3, r2, r3
 801cad8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cadc:	f003 0301 	and.w	r3, r3, #1
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d112      	bne.n	801cb0a <ee_number+0x102>
 801cae4:	e00c      	b.n	801cb00 <ee_number+0xf8>
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	1c5a      	adds	r2, r3, #1
 801caea:	60fa      	str	r2, [r7, #12]
 801caec:	2220      	movs	r2, #32
 801caee:	701a      	strb	r2, [r3, #0]
 801caf0:	68bb      	ldr	r3, [r7, #8]
 801caf2:	3b01      	subs	r3, #1
 801caf4:	60bb      	str	r3, [r7, #8]
 801caf6:	68bb      	ldr	r3, [r7, #8]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d101      	bne.n	801cb00 <ee_number+0xf8>
 801cafc:	68fb      	ldr	r3, [r7, #12]
 801cafe:	e068      	b.n	801cbd2 <ee_number+0x1ca>
 801cb00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb02:	1e5a      	subs	r2, r3, #1
 801cb04:	66ba      	str	r2, [r7, #104]	; 0x68
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	dced      	bgt.n	801cae6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801cb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d01b      	beq.n	801cb4a <ee_number+0x142>
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	1c5a      	adds	r2, r3, #1
 801cb16:	60fa      	str	r2, [r7, #12]
 801cb18:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801cb1c:	701a      	strb	r2, [r3, #0]
 801cb1e:	68bb      	ldr	r3, [r7, #8]
 801cb20:	3b01      	subs	r3, #1
 801cb22:	60bb      	str	r3, [r7, #8]
 801cb24:	68bb      	ldr	r3, [r7, #8]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d10f      	bne.n	801cb4a <ee_number+0x142>
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	e051      	b.n	801cbd2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	1c5a      	adds	r2, r3, #1
 801cb32:	60fa      	str	r2, [r7, #12]
 801cb34:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801cb38:	701a      	strb	r2, [r3, #0]
 801cb3a:	68bb      	ldr	r3, [r7, #8]
 801cb3c:	3b01      	subs	r3, #1
 801cb3e:	60bb      	str	r3, [r7, #8]
 801cb40:	68bb      	ldr	r3, [r7, #8]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d101      	bne.n	801cb4a <ee_number+0x142>
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	e043      	b.n	801cbd2 <ee_number+0x1ca>
 801cb4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb4c:	1e5a      	subs	r2, r3, #1
 801cb4e:	66ba      	str	r2, [r7, #104]	; 0x68
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	dcec      	bgt.n	801cb2e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801cb54:	e00c      	b.n	801cb70 <ee_number+0x168>
 801cb56:	68fb      	ldr	r3, [r7, #12]
 801cb58:	1c5a      	adds	r2, r3, #1
 801cb5a:	60fa      	str	r2, [r7, #12]
 801cb5c:	2230      	movs	r2, #48	; 0x30
 801cb5e:	701a      	strb	r2, [r3, #0]
 801cb60:	68bb      	ldr	r3, [r7, #8]
 801cb62:	3b01      	subs	r3, #1
 801cb64:	60bb      	str	r3, [r7, #8]
 801cb66:	68bb      	ldr	r3, [r7, #8]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d101      	bne.n	801cb70 <ee_number+0x168>
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	e030      	b.n	801cbd2 <ee_number+0x1ca>
 801cb70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cb72:	1e5a      	subs	r2, r3, #1
 801cb74:	66fa      	str	r2, [r7, #108]	; 0x6c
 801cb76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cb78:	429a      	cmp	r2, r3
 801cb7a:	dbec      	blt.n	801cb56 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801cb7c:	e010      	b.n	801cba0 <ee_number+0x198>
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	1c5a      	adds	r2, r3, #1
 801cb82:	60fa      	str	r2, [r7, #12]
 801cb84:	f107 0110 	add.w	r1, r7, #16
 801cb88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cb8a:	440a      	add	r2, r1
 801cb8c:	7812      	ldrb	r2, [r2, #0]
 801cb8e:	701a      	strb	r2, [r3, #0]
 801cb90:	68bb      	ldr	r3, [r7, #8]
 801cb92:	3b01      	subs	r3, #1
 801cb94:	60bb      	str	r3, [r7, #8]
 801cb96:	68bb      	ldr	r3, [r7, #8]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d101      	bne.n	801cba0 <ee_number+0x198>
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	e018      	b.n	801cbd2 <ee_number+0x1ca>
 801cba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cba2:	1e5a      	subs	r2, r3, #1
 801cba4:	657a      	str	r2, [r7, #84]	; 0x54
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	dce9      	bgt.n	801cb7e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801cbaa:	e00c      	b.n	801cbc6 <ee_number+0x1be>
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	1c5a      	adds	r2, r3, #1
 801cbb0:	60fa      	str	r2, [r7, #12]
 801cbb2:	2220      	movs	r2, #32
 801cbb4:	701a      	strb	r2, [r3, #0]
 801cbb6:	68bb      	ldr	r3, [r7, #8]
 801cbb8:	3b01      	subs	r3, #1
 801cbba:	60bb      	str	r3, [r7, #8]
 801cbbc:	68bb      	ldr	r3, [r7, #8]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d101      	bne.n	801cbc6 <ee_number+0x1be>
 801cbc2:	68fb      	ldr	r3, [r7, #12]
 801cbc4:	e005      	b.n	801cbd2 <ee_number+0x1ca>
 801cbc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cbc8:	1e5a      	subs	r2, r3, #1
 801cbca:	66ba      	str	r2, [r7, #104]	; 0x68
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	dced      	bgt.n	801cbac <ee_number+0x1a4>

  return str;
 801cbd0:	68fb      	ldr	r3, [r7, #12]
}
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	3764      	adds	r7, #100	; 0x64
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	bc80      	pop	{r7}
 801cbda:	4770      	bx	lr
 801cbdc:	20000138 	.word	0x20000138
 801cbe0:	2000013c 	.word	0x2000013c

0801cbe4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801cbe4:	b580      	push	{r7, lr}
 801cbe6:	b092      	sub	sp, #72	; 0x48
 801cbe8:	af04      	add	r7, sp, #16
 801cbea:	60f8      	str	r0, [r7, #12]
 801cbec:	60b9      	str	r1, [r7, #8]
 801cbee:	607a      	str	r2, [r7, #4]
 801cbf0:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801cbf2:	68bb      	ldr	r3, [r7, #8]
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	dc01      	bgt.n	801cbfc <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	e13e      	b.n	801ce7a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cc00:	e128      	b.n	801ce54 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801cc02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	1ad2      	subs	r2, r2, r3
 801cc08:	68bb      	ldr	r3, [r7, #8]
 801cc0a:	3b01      	subs	r3, #1
 801cc0c:	429a      	cmp	r2, r3
 801cc0e:	f280 812e 	bge.w	801ce6e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	2b25      	cmp	r3, #37	; 0x25
 801cc18:	d006      	beq.n	801cc28 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cc1a:	687a      	ldr	r2, [r7, #4]
 801cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc1e:	1c59      	adds	r1, r3, #1
 801cc20:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cc22:	7812      	ldrb	r2, [r2, #0]
 801cc24:	701a      	strb	r2, [r3, #0]
      continue;
 801cc26:	e112      	b.n	801ce4e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801cc28:	2300      	movs	r3, #0
 801cc2a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	3301      	adds	r3, #1
 801cc30:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	781b      	ldrb	r3, [r3, #0]
 801cc36:	2b30      	cmp	r3, #48	; 0x30
 801cc38:	d103      	bne.n	801cc42 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801cc3a:	6a3b      	ldr	r3, [r7, #32]
 801cc3c:	f043 0301 	orr.w	r3, r3, #1
 801cc40:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801cc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc46:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	781b      	ldrb	r3, [r3, #0]
 801cc4c:	2b2f      	cmp	r3, #47	; 0x2f
 801cc4e:	d908      	bls.n	801cc62 <tiny_vsnprintf_like+0x7e>
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	781b      	ldrb	r3, [r3, #0]
 801cc54:	2b39      	cmp	r3, #57	; 0x39
 801cc56:	d804      	bhi.n	801cc62 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801cc58:	1d3b      	adds	r3, r7, #4
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f7ff feae 	bl	801c9bc <ee_skip_atoi>
 801cc60:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801cc62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc66:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801cc68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc6c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801cc6e:	230a      	movs	r3, #10
 801cc70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	781b      	ldrb	r3, [r3, #0]
 801cc76:	3b58      	subs	r3, #88	; 0x58
 801cc78:	2b20      	cmp	r3, #32
 801cc7a:	f200 8094 	bhi.w	801cda6 <tiny_vsnprintf_like+0x1c2>
 801cc7e:	a201      	add	r2, pc, #4	; (adr r2, 801cc84 <tiny_vsnprintf_like+0xa0>)
 801cc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc84:	0801cd8f 	.word	0x0801cd8f
 801cc88:	0801cda7 	.word	0x0801cda7
 801cc8c:	0801cda7 	.word	0x0801cda7
 801cc90:	0801cda7 	.word	0x0801cda7
 801cc94:	0801cda7 	.word	0x0801cda7
 801cc98:	0801cda7 	.word	0x0801cda7
 801cc9c:	0801cda7 	.word	0x0801cda7
 801cca0:	0801cda7 	.word	0x0801cda7
 801cca4:	0801cda7 	.word	0x0801cda7
 801cca8:	0801cda7 	.word	0x0801cda7
 801ccac:	0801cda7 	.word	0x0801cda7
 801ccb0:	0801cd13 	.word	0x0801cd13
 801ccb4:	0801cd9d 	.word	0x0801cd9d
 801ccb8:	0801cda7 	.word	0x0801cda7
 801ccbc:	0801cda7 	.word	0x0801cda7
 801ccc0:	0801cda7 	.word	0x0801cda7
 801ccc4:	0801cda7 	.word	0x0801cda7
 801ccc8:	0801cd9d 	.word	0x0801cd9d
 801cccc:	0801cda7 	.word	0x0801cda7
 801ccd0:	0801cda7 	.word	0x0801cda7
 801ccd4:	0801cda7 	.word	0x0801cda7
 801ccd8:	0801cda7 	.word	0x0801cda7
 801ccdc:	0801cda7 	.word	0x0801cda7
 801cce0:	0801cda7 	.word	0x0801cda7
 801cce4:	0801cda7 	.word	0x0801cda7
 801cce8:	0801cda7 	.word	0x0801cda7
 801ccec:	0801cda7 	.word	0x0801cda7
 801ccf0:	0801cd33 	.word	0x0801cd33
 801ccf4:	0801cda7 	.word	0x0801cda7
 801ccf8:	0801cdf3 	.word	0x0801cdf3
 801ccfc:	0801cda7 	.word	0x0801cda7
 801cd00:	0801cda7 	.word	0x0801cda7
 801cd04:	0801cd97 	.word	0x0801cd97
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd0a:	1c5a      	adds	r2, r3, #1
 801cd0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd0e:	2220      	movs	r2, #32
 801cd10:	701a      	strb	r2, [r3, #0]
 801cd12:	69fb      	ldr	r3, [r7, #28]
 801cd14:	3b01      	subs	r3, #1
 801cd16:	61fb      	str	r3, [r7, #28]
 801cd18:	69fb      	ldr	r3, [r7, #28]
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	dcf4      	bgt.n	801cd08 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801cd1e:	683b      	ldr	r3, [r7, #0]
 801cd20:	1d1a      	adds	r2, r3, #4
 801cd22:	603a      	str	r2, [r7, #0]
 801cd24:	6819      	ldr	r1, [r3, #0]
 801cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd28:	1c5a      	adds	r2, r3, #1
 801cd2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd2c:	b2ca      	uxtb	r2, r1
 801cd2e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801cd30:	e08d      	b.n	801ce4e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	1d1a      	adds	r2, r3, #4
 801cd36:	603a      	str	r2, [r7, #0]
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d101      	bne.n	801cd46 <tiny_vsnprintf_like+0x162>
 801cd42:	4b50      	ldr	r3, [pc, #320]	; (801ce84 <tiny_vsnprintf_like+0x2a0>)
 801cd44:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801cd46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cd48:	f7e3 fa16 	bl	8000178 <strlen>
 801cd4c:	4603      	mov	r3, r0
 801cd4e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801cd50:	e004      	b.n	801cd5c <tiny_vsnprintf_like+0x178>
 801cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd54:	1c5a      	adds	r2, r3, #1
 801cd56:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd58:	2220      	movs	r2, #32
 801cd5a:	701a      	strb	r2, [r3, #0]
 801cd5c:	69fb      	ldr	r3, [r7, #28]
 801cd5e:	1e5a      	subs	r2, r3, #1
 801cd60:	61fa      	str	r2, [r7, #28]
 801cd62:	693a      	ldr	r2, [r7, #16]
 801cd64:	429a      	cmp	r2, r3
 801cd66:	dbf4      	blt.n	801cd52 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801cd68:	2300      	movs	r3, #0
 801cd6a:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd6c:	e00a      	b.n	801cd84 <tiny_vsnprintf_like+0x1a0>
 801cd6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd70:	1c53      	adds	r3, r2, #1
 801cd72:	627b      	str	r3, [r7, #36]	; 0x24
 801cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd76:	1c59      	adds	r1, r3, #1
 801cd78:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cd7a:	7812      	ldrb	r2, [r2, #0]
 801cd7c:	701a      	strb	r2, [r3, #0]
 801cd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd80:	3301      	adds	r3, #1
 801cd82:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd86:	693b      	ldr	r3, [r7, #16]
 801cd88:	429a      	cmp	r2, r3
 801cd8a:	dbf0      	blt.n	801cd6e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801cd8c:	e05f      	b.n	801ce4e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801cd8e:	6a3b      	ldr	r3, [r7, #32]
 801cd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd94:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801cd96:	2310      	movs	r3, #16
 801cd98:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801cd9a:	e02b      	b.n	801cdf4 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801cd9c:	6a3b      	ldr	r3, [r7, #32]
 801cd9e:	f043 0302 	orr.w	r3, r3, #2
 801cda2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cda4:	e025      	b.n	801cdf2 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	781b      	ldrb	r3, [r3, #0]
 801cdaa:	2b25      	cmp	r3, #37	; 0x25
 801cdac:	d004      	beq.n	801cdb8 <tiny_vsnprintf_like+0x1d4>
 801cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdb0:	1c5a      	adds	r2, r3, #1
 801cdb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cdb4:	2225      	movs	r2, #37	; 0x25
 801cdb6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cdb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cdba:	68fb      	ldr	r3, [r7, #12]
 801cdbc:	1ad2      	subs	r2, r2, r3
 801cdbe:	68bb      	ldr	r3, [r7, #8]
 801cdc0:	3b01      	subs	r3, #1
 801cdc2:	429a      	cmp	r2, r3
 801cdc4:	da16      	bge.n	801cdf4 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	781b      	ldrb	r3, [r3, #0]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d006      	beq.n	801cddc <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801cdce:	687a      	ldr	r2, [r7, #4]
 801cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdd2:	1c59      	adds	r1, r3, #1
 801cdd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cdd6:	7812      	ldrb	r2, [r2, #0]
 801cdd8:	701a      	strb	r2, [r3, #0]
 801cdda:	e002      	b.n	801cde2 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	3b01      	subs	r3, #1
 801cde0:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801cde2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	1ad2      	subs	r2, r2, r3
 801cde8:	68bb      	ldr	r3, [r7, #8]
 801cdea:	3b01      	subs	r3, #1
 801cdec:	429a      	cmp	r2, r3
 801cdee:	db2d      	blt.n	801ce4c <tiny_vsnprintf_like+0x268>
 801cdf0:	e000      	b.n	801cdf4 <tiny_vsnprintf_like+0x210>
        break;
 801cdf2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801cdf4:	697b      	ldr	r3, [r7, #20]
 801cdf6:	2b6c      	cmp	r3, #108	; 0x6c
 801cdf8:	d105      	bne.n	801ce06 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801cdfa:	683b      	ldr	r3, [r7, #0]
 801cdfc:	1d1a      	adds	r2, r3, #4
 801cdfe:	603a      	str	r2, [r7, #0]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	637b      	str	r3, [r7, #52]	; 0x34
 801ce04:	e00f      	b.n	801ce26 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801ce06:	6a3b      	ldr	r3, [r7, #32]
 801ce08:	f003 0302 	and.w	r3, r3, #2
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d005      	beq.n	801ce1c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801ce10:	683b      	ldr	r3, [r7, #0]
 801ce12:	1d1a      	adds	r2, r3, #4
 801ce14:	603a      	str	r2, [r7, #0]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	637b      	str	r3, [r7, #52]	; 0x34
 801ce1a:	e004      	b.n	801ce26 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801ce1c:	683b      	ldr	r3, [r7, #0]
 801ce1e:	1d1a      	adds	r2, r3, #4
 801ce20:	603a      	str	r2, [r7, #0]
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ce26:	68bb      	ldr	r3, [r7, #8]
 801ce28:	1e5a      	subs	r2, r3, #1
 801ce2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	1acb      	subs	r3, r1, r3
 801ce30:	1ad1      	subs	r1, r2, r3
 801ce32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce34:	6a3b      	ldr	r3, [r7, #32]
 801ce36:	9302      	str	r3, [sp, #8]
 801ce38:	69bb      	ldr	r3, [r7, #24]
 801ce3a:	9301      	str	r3, [sp, #4]
 801ce3c:	69fb      	ldr	r3, [r7, #28]
 801ce3e:	9300      	str	r3, [sp, #0]
 801ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ce44:	f7ff fde0 	bl	801ca08 <ee_number>
 801ce48:	62f8      	str	r0, [r7, #44]	; 0x2c
 801ce4a:	e000      	b.n	801ce4e <tiny_vsnprintf_like+0x26a>
        continue;
 801ce4c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	3301      	adds	r3, #1
 801ce52:	607b      	str	r3, [r7, #4]
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	781b      	ldrb	r3, [r3, #0]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	f47f aed2 	bne.w	801cc02 <tiny_vsnprintf_like+0x1e>
 801ce5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	1ad2      	subs	r2, r2, r3
 801ce64:	68bb      	ldr	r3, [r7, #8]
 801ce66:	3b01      	subs	r3, #1
 801ce68:	429a      	cmp	r2, r3
 801ce6a:	f6bf aeca 	bge.w	801cc02 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce70:	2200      	movs	r2, #0
 801ce72:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ce74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	1ad3      	subs	r3, r2, r3
}
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	3738      	adds	r7, #56	; 0x38
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bd80      	pop	{r7, pc}
 801ce82:	bf00      	nop
 801ce84:	0801e624 	.word	0x0801e624

0801ce88 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b090      	sub	sp, #64	; 0x40
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801ce90:	4b73      	ldr	r3, [pc, #460]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801ce96:	4b72      	ldr	r3, [pc, #456]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801ce98:	681a      	ldr	r2, [r3, #0]
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	4013      	ands	r3, r2
 801ce9e:	4a70      	ldr	r2, [pc, #448]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801cea0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801cea2:	4b70      	ldr	r3, [pc, #448]	; (801d064 <UTIL_SEQ_Run+0x1dc>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801cea8:	4b6f      	ldr	r3, [pc, #444]	; (801d068 <UTIL_SEQ_Run+0x1e0>)
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ceae:	4b6f      	ldr	r3, [pc, #444]	; (801d06c <UTIL_SEQ_Run+0x1e4>)
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801ceb4:	4b6e      	ldr	r3, [pc, #440]	; (801d070 <UTIL_SEQ_Run+0x1e8>)
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ceba:	e08d      	b.n	801cfd8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801cebc:	2300      	movs	r3, #0
 801cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cec0:	e002      	b.n	801cec8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801cec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cec4:	3301      	adds	r3, #1
 801cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cec8:	4a6a      	ldr	r2, [pc, #424]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801ceca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cecc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ced2:	401a      	ands	r2, r3
 801ced4:	4b62      	ldr	r3, [pc, #392]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	4013      	ands	r3, r2
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d0f1      	beq.n	801cec2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801cede:	4a65      	ldr	r2, [pc, #404]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cee2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cee8:	401a      	ands	r2, r3
 801ceea:	4b5d      	ldr	r3, [pc, #372]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	4013      	ands	r3, r2
 801cef0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801cef2:	4a60      	ldr	r2, [pc, #384]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cef6:	00db      	lsls	r3, r3, #3
 801cef8:	4413      	add	r3, r2
 801cefa:	685a      	ldr	r2, [r3, #4]
 801cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cefe:	4013      	ands	r3, r2
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d106      	bne.n	801cf12 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801cf04:	4a5b      	ldr	r2, [pc, #364]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cf06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf08:	00db      	lsls	r3, r3, #3
 801cf0a:	4413      	add	r3, r2
 801cf0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cf10:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801cf12:	4a58      	ldr	r2, [pc, #352]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf16:	00db      	lsls	r3, r3, #3
 801cf18:	4413      	add	r3, r2
 801cf1a:	685a      	ldr	r2, [r3, #4]
 801cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf1e:	4013      	ands	r3, r2
 801cf20:	4618      	mov	r0, r3
 801cf22:	f000 f907 	bl	801d134 <SEQ_BitPosition>
 801cf26:	4603      	mov	r3, r0
 801cf28:	461a      	mov	r2, r3
 801cf2a:	4b53      	ldr	r3, [pc, #332]	; (801d078 <UTIL_SEQ_Run+0x1f0>)
 801cf2c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801cf2e:	4a51      	ldr	r2, [pc, #324]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf32:	00db      	lsls	r3, r3, #3
 801cf34:	4413      	add	r3, r2
 801cf36:	685a      	ldr	r2, [r3, #4]
 801cf38:	4b4f      	ldr	r3, [pc, #316]	; (801d078 <UTIL_SEQ_Run+0x1f0>)
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	2101      	movs	r1, #1
 801cf3e:	fa01 f303 	lsl.w	r3, r1, r3
 801cf42:	43db      	mvns	r3, r3
 801cf44:	401a      	ands	r2, r3
 801cf46:	494b      	ldr	r1, [pc, #300]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cf48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf4a:	00db      	lsls	r3, r3, #3
 801cf4c:	440b      	add	r3, r1
 801cf4e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf50:	f3ef 8310 	mrs	r3, PRIMASK
 801cf54:	61bb      	str	r3, [r7, #24]
  return(result);
 801cf56:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cf58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf5a:	b672      	cpsid	i
}
 801cf5c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801cf5e:	4b46      	ldr	r3, [pc, #280]	; (801d078 <UTIL_SEQ_Run+0x1f0>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	2201      	movs	r2, #1
 801cf64:	fa02 f303 	lsl.w	r3, r2, r3
 801cf68:	43da      	mvns	r2, r3
 801cf6a:	4b3e      	ldr	r3, [pc, #248]	; (801d064 <UTIL_SEQ_Run+0x1dc>)
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	4013      	ands	r3, r2
 801cf70:	4a3c      	ldr	r2, [pc, #240]	; (801d064 <UTIL_SEQ_Run+0x1dc>)
 801cf72:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cf74:	2301      	movs	r3, #1
 801cf76:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf78:	e013      	b.n	801cfa2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801cf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf7c:	3b01      	subs	r3, #1
 801cf7e:	4a3d      	ldr	r2, [pc, #244]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cf80:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801cf84:	4b3c      	ldr	r3, [pc, #240]	; (801d078 <UTIL_SEQ_Run+0x1f0>)
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	2201      	movs	r2, #1
 801cf8a:	fa02 f303 	lsl.w	r3, r2, r3
 801cf8e:	43da      	mvns	r2, r3
 801cf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf92:	3b01      	subs	r3, #1
 801cf94:	400a      	ands	r2, r1
 801cf96:	4937      	ldr	r1, [pc, #220]	; (801d074 <UTIL_SEQ_Run+0x1ec>)
 801cf98:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf9e:	3b01      	subs	r3, #1
 801cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d1e8      	bne.n	801cf7a <UTIL_SEQ_Run+0xf2>
 801cfa8:	6a3b      	ldr	r3, [r7, #32]
 801cfaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfac:	697b      	ldr	r3, [r7, #20]
 801cfae:	f383 8810 	msr	PRIMASK, r3
}
 801cfb2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801cfb4:	4b30      	ldr	r3, [pc, #192]	; (801d078 <UTIL_SEQ_Run+0x1f0>)
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	4a30      	ldr	r2, [pc, #192]	; (801d07c <UTIL_SEQ_Run+0x1f4>)
 801cfba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfbe:	4798      	blx	r3

    local_taskset = TaskSet;
 801cfc0:	4b28      	ldr	r3, [pc, #160]	; (801d064 <UTIL_SEQ_Run+0x1dc>)
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801cfc6:	4b28      	ldr	r3, [pc, #160]	; (801d068 <UTIL_SEQ_Run+0x1e0>)
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801cfcc:	4b27      	ldr	r3, [pc, #156]	; (801d06c <UTIL_SEQ_Run+0x1e4>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801cfd2:	4b27      	ldr	r3, [pc, #156]	; (801d070 <UTIL_SEQ_Run+0x1e8>)
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801cfd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfdc:	401a      	ands	r2, r3
 801cfde:	4b20      	ldr	r3, [pc, #128]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	4013      	ands	r3, r2
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d005      	beq.n	801cff4 <UTIL_SEQ_Run+0x16c>
 801cfe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfec:	4013      	ands	r3, r2
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	f43f af64 	beq.w	801cebc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801cff4:	4b20      	ldr	r3, [pc, #128]	; (801d078 <UTIL_SEQ_Run+0x1f0>)
 801cff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cffa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801cffc:	f000 f88e 	bl	801d11c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d000:	f3ef 8310 	mrs	r3, PRIMASK
 801d004:	613b      	str	r3, [r7, #16]
  return(result);
 801d006:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801d008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d00a:	b672      	cpsid	i
}
 801d00c:	bf00      	nop
  local_taskset = TaskSet;
 801d00e:	4b15      	ldr	r3, [pc, #84]	; (801d064 <UTIL_SEQ_Run+0x1dc>)
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d014:	4b14      	ldr	r3, [pc, #80]	; (801d068 <UTIL_SEQ_Run+0x1e0>)
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d01a:	4b14      	ldr	r3, [pc, #80]	; (801d06c <UTIL_SEQ_Run+0x1e4>)
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801d020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d024:	401a      	ands	r2, r3
 801d026:	4b0e      	ldr	r3, [pc, #56]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	4013      	ands	r3, r2
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d107      	bne.n	801d040 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801d030:	4b0f      	ldr	r3, [pc, #60]	; (801d070 <UTIL_SEQ_Run+0x1e8>)
 801d032:	681a      	ldr	r2, [r3, #0]
 801d034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d036:	4013      	ands	r3, r2
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d101      	bne.n	801d040 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801d03c:	f7e4 ff9e 	bl	8001f7c <UTIL_SEQ_Idle>
 801d040:	69fb      	ldr	r3, [r7, #28]
 801d042:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	f383 8810 	msr	PRIMASK, r3
}
 801d04a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801d04c:	f000 f86c 	bl	801d128 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801d050:	4a03      	ldr	r2, [pc, #12]	; (801d060 <UTIL_SEQ_Run+0x1d8>)
 801d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d054:	6013      	str	r3, [r2, #0]

  return;
 801d056:	bf00      	nop
}
 801d058:	3740      	adds	r7, #64	; 0x40
 801d05a:	46bd      	mov	sp, r7
 801d05c:	bd80      	pop	{r7, pc}
 801d05e:	bf00      	nop
 801d060:	20000144 	.word	0x20000144
 801d064:	20001c8c 	.word	0x20001c8c
 801d068:	20001c90 	.word	0x20001c90
 801d06c:	20000140 	.word	0x20000140
 801d070:	20001c94 	.word	0x20001c94
 801d074:	20001cac 	.word	0x20001cac
 801d078:	20001c98 	.word	0x20001c98
 801d07c:	20001c9c 	.word	0x20001c9c

0801d080 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b088      	sub	sp, #32
 801d084:	af00      	add	r7, sp, #0
 801d086:	60f8      	str	r0, [r7, #12]
 801d088:	60b9      	str	r1, [r7, #8]
 801d08a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d08c:	f3ef 8310 	mrs	r3, PRIMASK
 801d090:	617b      	str	r3, [r7, #20]
  return(result);
 801d092:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d096:	b672      	cpsid	i
}
 801d098:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d09a:	68f8      	ldr	r0, [r7, #12]
 801d09c:	f000 f84a 	bl	801d134 <SEQ_BitPosition>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	4619      	mov	r1, r3
 801d0a4:	4a06      	ldr	r2, [pc, #24]	; (801d0c0 <UTIL_SEQ_RegTask+0x40>)
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d0ac:	69fb      	ldr	r3, [r7, #28]
 801d0ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0b0:	69bb      	ldr	r3, [r7, #24]
 801d0b2:	f383 8810 	msr	PRIMASK, r3
}
 801d0b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d0b8:	bf00      	nop
}
 801d0ba:	3720      	adds	r7, #32
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd80      	pop	{r7, pc}
 801d0c0:	20001c9c 	.word	0x20001c9c

0801d0c4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d0c4:	b480      	push	{r7}
 801d0c6:	b087      	sub	sp, #28
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
 801d0cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0ce:	f3ef 8310 	mrs	r3, PRIMASK
 801d0d2:	60fb      	str	r3, [r7, #12]
  return(result);
 801d0d4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d0d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0d8:	b672      	cpsid	i
}
 801d0da:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d0dc:	4b0d      	ldr	r3, [pc, #52]	; (801d114 <UTIL_SEQ_SetTask+0x50>)
 801d0de:	681a      	ldr	r2, [r3, #0]
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	4313      	orrs	r3, r2
 801d0e4:	4a0b      	ldr	r2, [pc, #44]	; (801d114 <UTIL_SEQ_SetTask+0x50>)
 801d0e6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d0e8:	4a0b      	ldr	r2, [pc, #44]	; (801d118 <UTIL_SEQ_SetTask+0x54>)
 801d0ea:	683b      	ldr	r3, [r7, #0]
 801d0ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	431a      	orrs	r2, r3
 801d0f4:	4908      	ldr	r1, [pc, #32]	; (801d118 <UTIL_SEQ_SetTask+0x54>)
 801d0f6:	683b      	ldr	r3, [r7, #0]
 801d0f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d0fc:	697b      	ldr	r3, [r7, #20]
 801d0fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d100:	693b      	ldr	r3, [r7, #16]
 801d102:	f383 8810 	msr	PRIMASK, r3
}
 801d106:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d108:	bf00      	nop
}
 801d10a:	371c      	adds	r7, #28
 801d10c:	46bd      	mov	sp, r7
 801d10e:	bc80      	pop	{r7}
 801d110:	4770      	bx	lr
 801d112:	bf00      	nop
 801d114:	20001c8c 	.word	0x20001c8c
 801d118:	20001cac 	.word	0x20001cac

0801d11c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d11c:	b480      	push	{r7}
 801d11e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d120:	bf00      	nop
}
 801d122:	46bd      	mov	sp, r7
 801d124:	bc80      	pop	{r7}
 801d126:	4770      	bx	lr

0801d128 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d128:	b480      	push	{r7}
 801d12a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d12c:	bf00      	nop
}
 801d12e:	46bd      	mov	sp, r7
 801d130:	bc80      	pop	{r7}
 801d132:	4770      	bx	lr

0801d134 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d134:	b480      	push	{r7}
 801d136:	b085      	sub	sp, #20
 801d138:	af00      	add	r7, sp, #0
 801d13a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d13c:	2300      	movs	r3, #0
 801d13e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d144:	68bb      	ldr	r3, [r7, #8]
 801d146:	0c1b      	lsrs	r3, r3, #16
 801d148:	041b      	lsls	r3, r3, #16
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d104      	bne.n	801d158 <SEQ_BitPosition+0x24>
 801d14e:	2310      	movs	r3, #16
 801d150:	73fb      	strb	r3, [r7, #15]
 801d152:	68bb      	ldr	r3, [r7, #8]
 801d154:	041b      	lsls	r3, r3, #16
 801d156:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d158:	68bb      	ldr	r3, [r7, #8]
 801d15a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d105      	bne.n	801d16e <SEQ_BitPosition+0x3a>
 801d162:	7bfb      	ldrb	r3, [r7, #15]
 801d164:	3308      	adds	r3, #8
 801d166:	73fb      	strb	r3, [r7, #15]
 801d168:	68bb      	ldr	r3, [r7, #8]
 801d16a:	021b      	lsls	r3, r3, #8
 801d16c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d16e:	68bb      	ldr	r3, [r7, #8]
 801d170:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801d174:	2b00      	cmp	r3, #0
 801d176:	d105      	bne.n	801d184 <SEQ_BitPosition+0x50>
 801d178:	7bfb      	ldrb	r3, [r7, #15]
 801d17a:	3304      	adds	r3, #4
 801d17c:	73fb      	strb	r3, [r7, #15]
 801d17e:	68bb      	ldr	r3, [r7, #8]
 801d180:	011b      	lsls	r3, r3, #4
 801d182:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d184:	68bb      	ldr	r3, [r7, #8]
 801d186:	0f1b      	lsrs	r3, r3, #28
 801d188:	4a06      	ldr	r2, [pc, #24]	; (801d1a4 <SEQ_BitPosition+0x70>)
 801d18a:	5cd2      	ldrb	r2, [r2, r3]
 801d18c:	7bfb      	ldrb	r3, [r7, #15]
 801d18e:	4413      	add	r3, r2
 801d190:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d192:	7bfb      	ldrb	r3, [r7, #15]
 801d194:	f1c3 031f 	rsb	r3, r3, #31
 801d198:	b2db      	uxtb	r3, r3
}
 801d19a:	4618      	mov	r0, r3
 801d19c:	3714      	adds	r7, #20
 801d19e:	46bd      	mov	sp, r7
 801d1a0:	bc80      	pop	{r7}
 801d1a2:	4770      	bx	lr
 801d1a4:	0801ecec 	.word	0x0801ecec

0801d1a8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d1ac:	4b04      	ldr	r3, [pc, #16]	; (801d1c0 <UTIL_TIMER_Init+0x18>)
 801d1ae:	2200      	movs	r2, #0
 801d1b0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d1b2:	4b04      	ldr	r3, [pc, #16]	; (801d1c4 <UTIL_TIMER_Init+0x1c>)
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	4798      	blx	r3
 801d1b8:	4603      	mov	r3, r0
}
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	bd80      	pop	{r7, pc}
 801d1be:	bf00      	nop
 801d1c0:	20001cb4 	.word	0x20001cb4
 801d1c4:	0801e6e4 	.word	0x0801e6e4

0801d1c8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b084      	sub	sp, #16
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	60f8      	str	r0, [r7, #12]
 801d1d0:	60b9      	str	r1, [r7, #8]
 801d1d2:	603b      	str	r3, [r7, #0]
 801d1d4:	4613      	mov	r3, r2
 801d1d6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d1d8:	68fb      	ldr	r3, [r7, #12]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d023      	beq.n	801d226 <UTIL_TIMER_Create+0x5e>
 801d1de:	683b      	ldr	r3, [r7, #0]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d020      	beq.n	801d226 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	2200      	movs	r2, #0
 801d1e8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d1ea:	4b11      	ldr	r3, [pc, #68]	; (801d230 <UTIL_TIMER_Create+0x68>)
 801d1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1ee:	68b8      	ldr	r0, [r7, #8]
 801d1f0:	4798      	blx	r3
 801d1f2:	4602      	mov	r2, r0
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	2200      	movs	r2, #0
 801d1fc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	2200      	movs	r2, #0
 801d202:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	2200      	movs	r2, #0
 801d208:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d20a:	68fb      	ldr	r3, [r7, #12]
 801d20c:	683a      	ldr	r2, [r7, #0]
 801d20e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	69ba      	ldr	r2, [r7, #24]
 801d214:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	79fa      	ldrb	r2, [r7, #7]
 801d21a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	2200      	movs	r2, #0
 801d220:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d222:	2300      	movs	r3, #0
 801d224:	e000      	b.n	801d228 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d226:	2301      	movs	r3, #1
  }
}
 801d228:	4618      	mov	r0, r3
 801d22a:	3710      	adds	r7, #16
 801d22c:	46bd      	mov	sp, r7
 801d22e:	bd80      	pop	{r7, pc}
 801d230:	0801e6e4 	.word	0x0801e6e4

0801d234 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d234:	b580      	push	{r7, lr}
 801d236:	b08a      	sub	sp, #40	; 0x28
 801d238:	af00      	add	r7, sp, #0
 801d23a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d23c:	2300      	movs	r3, #0
 801d23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d056      	beq.n	801d2f6 <UTIL_TIMER_Start+0xc2>
 801d248:	6878      	ldr	r0, [r7, #4]
 801d24a:	f000 f9a9 	bl	801d5a0 <TimerExists>
 801d24e:	4603      	mov	r3, r0
 801d250:	f083 0301 	eor.w	r3, r3, #1
 801d254:	b2db      	uxtb	r3, r3
 801d256:	2b00      	cmp	r3, #0
 801d258:	d04d      	beq.n	801d2f6 <UTIL_TIMER_Start+0xc2>
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	7a5b      	ldrb	r3, [r3, #9]
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d149      	bne.n	801d2f6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d262:	f3ef 8310 	mrs	r3, PRIMASK
 801d266:	613b      	str	r3, [r7, #16]
  return(result);
 801d268:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d26a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d26c:	b672      	cpsid	i
}
 801d26e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	685b      	ldr	r3, [r3, #4]
 801d274:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801d276:	4b24      	ldr	r3, [pc, #144]	; (801d308 <UTIL_TIMER_Start+0xd4>)
 801d278:	6a1b      	ldr	r3, [r3, #32]
 801d27a:	4798      	blx	r3
 801d27c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801d27e:	6a3a      	ldr	r2, [r7, #32]
 801d280:	69bb      	ldr	r3, [r7, #24]
 801d282:	429a      	cmp	r2, r3
 801d284:	d201      	bcs.n	801d28a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801d286:	69bb      	ldr	r3, [r7, #24]
 801d288:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	6a3a      	ldr	r2, [r7, #32]
 801d28e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	2200      	movs	r2, #0
 801d294:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	2201      	movs	r2, #1
 801d29a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	2200      	movs	r2, #0
 801d2a0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801d2a2:	4b1a      	ldr	r3, [pc, #104]	; (801d30c <UTIL_TIMER_Start+0xd8>)
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d106      	bne.n	801d2b8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d2aa:	4b17      	ldr	r3, [pc, #92]	; (801d308 <UTIL_TIMER_Start+0xd4>)
 801d2ac:	691b      	ldr	r3, [r3, #16]
 801d2ae:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d2b0:	6878      	ldr	r0, [r7, #4]
 801d2b2:	f000 f9eb 	bl	801d68c <TimerInsertNewHeadTimer>
 801d2b6:	e017      	b.n	801d2e8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d2b8:	4b13      	ldr	r3, [pc, #76]	; (801d308 <UTIL_TIMER_Start+0xd4>)
 801d2ba:	699b      	ldr	r3, [r3, #24]
 801d2bc:	4798      	blx	r3
 801d2be:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	681a      	ldr	r2, [r3, #0]
 801d2c4:	697b      	ldr	r3, [r7, #20]
 801d2c6:	441a      	add	r2, r3
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	681a      	ldr	r2, [r3, #0]
 801d2d0:	4b0e      	ldr	r3, [pc, #56]	; (801d30c <UTIL_TIMER_Start+0xd8>)
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	429a      	cmp	r2, r3
 801d2d8:	d203      	bcs.n	801d2e2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d2da:	6878      	ldr	r0, [r7, #4]
 801d2dc:	f000 f9d6 	bl	801d68c <TimerInsertNewHeadTimer>
 801d2e0:	e002      	b.n	801d2e8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d2e2:	6878      	ldr	r0, [r7, #4]
 801d2e4:	f000 f9a2 	bl	801d62c <TimerInsertTimer>
 801d2e8:	69fb      	ldr	r3, [r7, #28]
 801d2ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	f383 8810 	msr	PRIMASK, r3
}
 801d2f2:	bf00      	nop
  {
 801d2f4:	e002      	b.n	801d2fc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d2f6:	2301      	movs	r3, #1
 801d2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801d2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d300:	4618      	mov	r0, r3
 801d302:	3728      	adds	r7, #40	; 0x28
 801d304:	46bd      	mov	sp, r7
 801d306:	bd80      	pop	{r7, pc}
 801d308:	0801e6e4 	.word	0x0801e6e4
 801d30c:	20001cb4 	.word	0x20001cb4

0801d310 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d310:	b580      	push	{r7, lr}
 801d312:	b088      	sub	sp, #32
 801d314:	af00      	add	r7, sp, #0
 801d316:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d318:	2300      	movs	r3, #0
 801d31a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d05b      	beq.n	801d3da <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d322:	f3ef 8310 	mrs	r3, PRIMASK
 801d326:	60fb      	str	r3, [r7, #12]
  return(result);
 801d328:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d32a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d32c:	b672      	cpsid	i
}
 801d32e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d330:	4b2d      	ldr	r3, [pc, #180]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d336:	4b2c      	ldr	r3, [pc, #176]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	2201      	movs	r2, #1
 801d340:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d342:	4b29      	ldr	r3, [pc, #164]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	2b00      	cmp	r3, #0
 801d348:	d041      	beq.n	801d3ce <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	2200      	movs	r2, #0
 801d34e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d350:	4b25      	ldr	r3, [pc, #148]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	687a      	ldr	r2, [r7, #4]
 801d356:	429a      	cmp	r2, r3
 801d358:	d134      	bne.n	801d3c4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d35a:	4b23      	ldr	r3, [pc, #140]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	2200      	movs	r2, #0
 801d360:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d362:	4b21      	ldr	r3, [pc, #132]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	695b      	ldr	r3, [r3, #20]
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d00a      	beq.n	801d382 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d36c:	4b1e      	ldr	r3, [pc, #120]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	695b      	ldr	r3, [r3, #20]
 801d372:	4a1d      	ldr	r2, [pc, #116]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d374:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d376:	4b1c      	ldr	r3, [pc, #112]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	4618      	mov	r0, r3
 801d37c:	f000 f92c 	bl	801d5d8 <TimerSetTimeout>
 801d380:	e023      	b.n	801d3ca <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d382:	4b1a      	ldr	r3, [pc, #104]	; (801d3ec <UTIL_TIMER_Stop+0xdc>)
 801d384:	68db      	ldr	r3, [r3, #12]
 801d386:	4798      	blx	r3
            TimerListHead = NULL;
 801d388:	4b17      	ldr	r3, [pc, #92]	; (801d3e8 <UTIL_TIMER_Stop+0xd8>)
 801d38a:	2200      	movs	r2, #0
 801d38c:	601a      	str	r2, [r3, #0]
 801d38e:	e01c      	b.n	801d3ca <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d390:	697a      	ldr	r2, [r7, #20]
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	429a      	cmp	r2, r3
 801d396:	d110      	bne.n	801d3ba <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d398:	697b      	ldr	r3, [r7, #20]
 801d39a:	695b      	ldr	r3, [r3, #20]
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d006      	beq.n	801d3ae <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d3a0:	697b      	ldr	r3, [r7, #20]
 801d3a2:	695b      	ldr	r3, [r3, #20]
 801d3a4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d3a6:	69bb      	ldr	r3, [r7, #24]
 801d3a8:	697a      	ldr	r2, [r7, #20]
 801d3aa:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d3ac:	e00d      	b.n	801d3ca <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d3b2:	69bb      	ldr	r3, [r7, #24]
 801d3b4:	697a      	ldr	r2, [r7, #20]
 801d3b6:	615a      	str	r2, [r3, #20]
            break;
 801d3b8:	e007      	b.n	801d3ca <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d3ba:	697b      	ldr	r3, [r7, #20]
 801d3bc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d3be:	697b      	ldr	r3, [r7, #20]
 801d3c0:	695b      	ldr	r3, [r3, #20]
 801d3c2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d3c4:	697b      	ldr	r3, [r7, #20]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d1e2      	bne.n	801d390 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	77fb      	strb	r3, [r7, #31]
 801d3ce:	693b      	ldr	r3, [r7, #16]
 801d3d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3d2:	68bb      	ldr	r3, [r7, #8]
 801d3d4:	f383 8810 	msr	PRIMASK, r3
}
 801d3d8:	e001      	b.n	801d3de <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d3da:	2301      	movs	r3, #1
 801d3dc:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d3de:	7ffb      	ldrb	r3, [r7, #31]
}
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	3720      	adds	r7, #32
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}
 801d3e8:	20001cb4 	.word	0x20001cb4
 801d3ec:	0801e6e4 	.word	0x0801e6e4

0801d3f0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	b084      	sub	sp, #16
 801d3f4:	af00      	add	r7, sp, #0
 801d3f6:	6078      	str	r0, [r7, #4]
 801d3f8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d102      	bne.n	801d40a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d404:	2301      	movs	r3, #1
 801d406:	73fb      	strb	r3, [r7, #15]
 801d408:	e014      	b.n	801d434 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d40a:	4b0d      	ldr	r3, [pc, #52]	; (801d440 <UTIL_TIMER_SetPeriod+0x50>)
 801d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d40e:	6838      	ldr	r0, [r7, #0]
 801d410:	4798      	blx	r3
 801d412:	4602      	mov	r2, r0
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d418:	6878      	ldr	r0, [r7, #4]
 801d41a:	f000 f8c1 	bl	801d5a0 <TimerExists>
 801d41e:	4603      	mov	r3, r0
 801d420:	2b00      	cmp	r3, #0
 801d422:	d007      	beq.n	801d434 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d424:	6878      	ldr	r0, [r7, #4]
 801d426:	f7ff ff73 	bl	801d310 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d42a:	6878      	ldr	r0, [r7, #4]
 801d42c:	f7ff ff02 	bl	801d234 <UTIL_TIMER_Start>
 801d430:	4603      	mov	r3, r0
 801d432:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d434:	7bfb      	ldrb	r3, [r7, #15]
}
 801d436:	4618      	mov	r0, r3
 801d438:	3710      	adds	r7, #16
 801d43a:	46bd      	mov	sp, r7
 801d43c:	bd80      	pop	{r7, pc}
 801d43e:	bf00      	nop
 801d440:	0801e6e4 	.word	0x0801e6e4

0801d444 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d444:	b590      	push	{r4, r7, lr}
 801d446:	b089      	sub	sp, #36	; 0x24
 801d448:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d44a:	f3ef 8310 	mrs	r3, PRIMASK
 801d44e:	60bb      	str	r3, [r7, #8]
  return(result);
 801d450:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d452:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d454:	b672      	cpsid	i
}
 801d456:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d458:	4b38      	ldr	r3, [pc, #224]	; (801d53c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d45a:	695b      	ldr	r3, [r3, #20]
 801d45c:	4798      	blx	r3
 801d45e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d460:	4b36      	ldr	r3, [pc, #216]	; (801d53c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d462:	691b      	ldr	r3, [r3, #16]
 801d464:	4798      	blx	r3
 801d466:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d468:	693a      	ldr	r2, [r7, #16]
 801d46a:	697b      	ldr	r3, [r7, #20]
 801d46c:	1ad3      	subs	r3, r2, r3
 801d46e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d470:	4b33      	ldr	r3, [pc, #204]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d037      	beq.n	801d4e8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d478:	4b31      	ldr	r3, [pc, #196]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d47e:	69fb      	ldr	r3, [r7, #28]
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	68fa      	ldr	r2, [r7, #12]
 801d484:	429a      	cmp	r2, r3
 801d486:	d206      	bcs.n	801d496 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d488:	69fb      	ldr	r3, [r7, #28]
 801d48a:	681a      	ldr	r2, [r3, #0]
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	1ad2      	subs	r2, r2, r3
 801d490:	69fb      	ldr	r3, [r7, #28]
 801d492:	601a      	str	r2, [r3, #0]
 801d494:	e002      	b.n	801d49c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d496:	69fb      	ldr	r3, [r7, #28]
 801d498:	2200      	movs	r2, #0
 801d49a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d49c:	69fb      	ldr	r3, [r7, #28]
 801d49e:	695b      	ldr	r3, [r3, #20]
 801d4a0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d4a2:	69fb      	ldr	r3, [r7, #28]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d1ea      	bne.n	801d47e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d4a8:	e01e      	b.n	801d4e8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d4aa:	4b25      	ldr	r3, [pc, #148]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d4b0:	4b23      	ldr	r3, [pc, #140]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	695b      	ldr	r3, [r3, #20]
 801d4b6:	4a22      	ldr	r2, [pc, #136]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d4b8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d4ba:	69fb      	ldr	r3, [r7, #28]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d4c0:	69fb      	ldr	r3, [r7, #28]
 801d4c2:	2200      	movs	r2, #0
 801d4c4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d4c6:	69fb      	ldr	r3, [r7, #28]
 801d4c8:	68db      	ldr	r3, [r3, #12]
 801d4ca:	69fa      	ldr	r2, [r7, #28]
 801d4cc:	6912      	ldr	r2, [r2, #16]
 801d4ce:	4610      	mov	r0, r2
 801d4d0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d4d2:	69fb      	ldr	r3, [r7, #28]
 801d4d4:	7adb      	ldrb	r3, [r3, #11]
 801d4d6:	2b01      	cmp	r3, #1
 801d4d8:	d106      	bne.n	801d4e8 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d4da:	69fb      	ldr	r3, [r7, #28]
 801d4dc:	7a9b      	ldrb	r3, [r3, #10]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d102      	bne.n	801d4e8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d4e2:	69f8      	ldr	r0, [r7, #28]
 801d4e4:	f7ff fea6 	bl	801d234 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d4e8:	4b15      	ldr	r3, [pc, #84]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d00d      	beq.n	801d50c <UTIL_TIMER_IRQ_Handler+0xc8>
 801d4f0:	4b13      	ldr	r3, [pc, #76]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d0d7      	beq.n	801d4aa <UTIL_TIMER_IRQ_Handler+0x66>
 801d4fa:	4b11      	ldr	r3, [pc, #68]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	681c      	ldr	r4, [r3, #0]
 801d500:	4b0e      	ldr	r3, [pc, #56]	; (801d53c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d502:	699b      	ldr	r3, [r3, #24]
 801d504:	4798      	blx	r3
 801d506:	4603      	mov	r3, r0
 801d508:	429c      	cmp	r4, r3
 801d50a:	d3ce      	bcc.n	801d4aa <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d50c:	4b0c      	ldr	r3, [pc, #48]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	2b00      	cmp	r3, #0
 801d512:	d009      	beq.n	801d528 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d514:	4b0a      	ldr	r3, [pc, #40]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	7a1b      	ldrb	r3, [r3, #8]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d104      	bne.n	801d528 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d51e:	4b08      	ldr	r3, [pc, #32]	; (801d540 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	4618      	mov	r0, r3
 801d524:	f000 f858 	bl	801d5d8 <TimerSetTimeout>
 801d528:	69bb      	ldr	r3, [r7, #24]
 801d52a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	f383 8810 	msr	PRIMASK, r3
}
 801d532:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d534:	bf00      	nop
 801d536:	3724      	adds	r7, #36	; 0x24
 801d538:	46bd      	mov	sp, r7
 801d53a:	bd90      	pop	{r4, r7, pc}
 801d53c:	0801e6e4 	.word	0x0801e6e4
 801d540:	20001cb4 	.word	0x20001cb4

0801d544 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d544:	b580      	push	{r7, lr}
 801d546:	b082      	sub	sp, #8
 801d548:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d54a:	4b06      	ldr	r3, [pc, #24]	; (801d564 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d54c:	69db      	ldr	r3, [r3, #28]
 801d54e:	4798      	blx	r3
 801d550:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d552:	4b04      	ldr	r3, [pc, #16]	; (801d564 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d556:	6878      	ldr	r0, [r7, #4]
 801d558:	4798      	blx	r3
 801d55a:	4603      	mov	r3, r0
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3708      	adds	r7, #8
 801d560:	46bd      	mov	sp, r7
 801d562:	bd80      	pop	{r7, pc}
 801d564:	0801e6e4 	.word	0x0801e6e4

0801d568 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d568:	b580      	push	{r7, lr}
 801d56a:	b084      	sub	sp, #16
 801d56c:	af00      	add	r7, sp, #0
 801d56e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d570:	4b0a      	ldr	r3, [pc, #40]	; (801d59c <UTIL_TIMER_GetElapsedTime+0x34>)
 801d572:	69db      	ldr	r3, [r3, #28]
 801d574:	4798      	blx	r3
 801d576:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d578:	4b08      	ldr	r3, [pc, #32]	; (801d59c <UTIL_TIMER_GetElapsedTime+0x34>)
 801d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d57c:	6878      	ldr	r0, [r7, #4]
 801d57e:	4798      	blx	r3
 801d580:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d582:	4b06      	ldr	r3, [pc, #24]	; (801d59c <UTIL_TIMER_GetElapsedTime+0x34>)
 801d584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d586:	68f9      	ldr	r1, [r7, #12]
 801d588:	68ba      	ldr	r2, [r7, #8]
 801d58a:	1a8a      	subs	r2, r1, r2
 801d58c:	4610      	mov	r0, r2
 801d58e:	4798      	blx	r3
 801d590:	4603      	mov	r3, r0
}
 801d592:	4618      	mov	r0, r3
 801d594:	3710      	adds	r7, #16
 801d596:	46bd      	mov	sp, r7
 801d598:	bd80      	pop	{r7, pc}
 801d59a:	bf00      	nop
 801d59c:	0801e6e4 	.word	0x0801e6e4

0801d5a0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d5a0:	b480      	push	{r7}
 801d5a2:	b085      	sub	sp, #20
 801d5a4:	af00      	add	r7, sp, #0
 801d5a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d5a8:	4b0a      	ldr	r3, [pc, #40]	; (801d5d4 <TimerExists+0x34>)
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d5ae:	e008      	b.n	801d5c2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d5b0:	68fa      	ldr	r2, [r7, #12]
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	429a      	cmp	r2, r3
 801d5b6:	d101      	bne.n	801d5bc <TimerExists+0x1c>
    {
      return true;
 801d5b8:	2301      	movs	r3, #1
 801d5ba:	e006      	b.n	801d5ca <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	695b      	ldr	r3, [r3, #20]
 801d5c0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d1f3      	bne.n	801d5b0 <TimerExists+0x10>
  }
  return false;
 801d5c8:	2300      	movs	r3, #0
}
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	3714      	adds	r7, #20
 801d5ce:	46bd      	mov	sp, r7
 801d5d0:	bc80      	pop	{r7}
 801d5d2:	4770      	bx	lr
 801d5d4:	20001cb4 	.word	0x20001cb4

0801d5d8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d5d8:	b590      	push	{r4, r7, lr}
 801d5da:	b085      	sub	sp, #20
 801d5dc:	af00      	add	r7, sp, #0
 801d5de:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d5e0:	4b11      	ldr	r3, [pc, #68]	; (801d628 <TimerSetTimeout+0x50>)
 801d5e2:	6a1b      	ldr	r3, [r3, #32]
 801d5e4:	4798      	blx	r3
 801d5e6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	2201      	movs	r2, #1
 801d5ec:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	681c      	ldr	r4, [r3, #0]
 801d5f2:	4b0d      	ldr	r3, [pc, #52]	; (801d628 <TimerSetTimeout+0x50>)
 801d5f4:	699b      	ldr	r3, [r3, #24]
 801d5f6:	4798      	blx	r3
 801d5f8:	4602      	mov	r2, r0
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	4413      	add	r3, r2
 801d5fe:	429c      	cmp	r4, r3
 801d600:	d207      	bcs.n	801d612 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d602:	4b09      	ldr	r3, [pc, #36]	; (801d628 <TimerSetTimeout+0x50>)
 801d604:	699b      	ldr	r3, [r3, #24]
 801d606:	4798      	blx	r3
 801d608:	4602      	mov	r2, r0
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	441a      	add	r2, r3
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d612:	4b05      	ldr	r3, [pc, #20]	; (801d628 <TimerSetTimeout+0x50>)
 801d614:	689b      	ldr	r3, [r3, #8]
 801d616:	687a      	ldr	r2, [r7, #4]
 801d618:	6812      	ldr	r2, [r2, #0]
 801d61a:	4610      	mov	r0, r2
 801d61c:	4798      	blx	r3
}
 801d61e:	bf00      	nop
 801d620:	3714      	adds	r7, #20
 801d622:	46bd      	mov	sp, r7
 801d624:	bd90      	pop	{r4, r7, pc}
 801d626:	bf00      	nop
 801d628:	0801e6e4 	.word	0x0801e6e4

0801d62c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d62c:	b480      	push	{r7}
 801d62e:	b085      	sub	sp, #20
 801d630:	af00      	add	r7, sp, #0
 801d632:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d634:	4b14      	ldr	r3, [pc, #80]	; (801d688 <TimerInsertTimer+0x5c>)
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d63a:	4b13      	ldr	r3, [pc, #76]	; (801d688 <TimerInsertTimer+0x5c>)
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	695b      	ldr	r3, [r3, #20]
 801d640:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d642:	e012      	b.n	801d66a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	681a      	ldr	r2, [r3, #0]
 801d648:	68bb      	ldr	r3, [r7, #8]
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	429a      	cmp	r2, r3
 801d64e:	d905      	bls.n	801d65c <TimerInsertTimer+0x30>
    {
        cur = next;
 801d650:	68bb      	ldr	r3, [r7, #8]
 801d652:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d654:	68bb      	ldr	r3, [r7, #8]
 801d656:	695b      	ldr	r3, [r3, #20]
 801d658:	60bb      	str	r3, [r7, #8]
 801d65a:	e006      	b.n	801d66a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	687a      	ldr	r2, [r7, #4]
 801d660:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	68ba      	ldr	r2, [r7, #8]
 801d666:	615a      	str	r2, [r3, #20]
        return;
 801d668:	e009      	b.n	801d67e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	695b      	ldr	r3, [r3, #20]
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d1e8      	bne.n	801d644 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	687a      	ldr	r2, [r7, #4]
 801d676:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	2200      	movs	r2, #0
 801d67c:	615a      	str	r2, [r3, #20]
}
 801d67e:	3714      	adds	r7, #20
 801d680:	46bd      	mov	sp, r7
 801d682:	bc80      	pop	{r7}
 801d684:	4770      	bx	lr
 801d686:	bf00      	nop
 801d688:	20001cb4 	.word	0x20001cb4

0801d68c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d68c:	b580      	push	{r7, lr}
 801d68e:	b084      	sub	sp, #16
 801d690:	af00      	add	r7, sp, #0
 801d692:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d694:	4b0b      	ldr	r3, [pc, #44]	; (801d6c4 <TimerInsertNewHeadTimer+0x38>)
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d002      	beq.n	801d6a6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	2200      	movs	r2, #0
 801d6a4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	68fa      	ldr	r2, [r7, #12]
 801d6aa:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d6ac:	4a05      	ldr	r2, [pc, #20]	; (801d6c4 <TimerInsertNewHeadTimer+0x38>)
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d6b2:	4b04      	ldr	r3, [pc, #16]	; (801d6c4 <TimerInsertNewHeadTimer+0x38>)
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7ff ff8e 	bl	801d5d8 <TimerSetTimeout>
}
 801d6bc:	bf00      	nop
 801d6be:	3710      	adds	r7, #16
 801d6c0:	46bd      	mov	sp, r7
 801d6c2:	bd80      	pop	{r7, pc}
 801d6c4:	20001cb4 	.word	0x20001cb4

0801d6c8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d6cc:	2218      	movs	r2, #24
 801d6ce:	2100      	movs	r1, #0
 801d6d0:	4807      	ldr	r0, [pc, #28]	; (801d6f0 <UTIL_ADV_TRACE_Init+0x28>)
 801d6d2:	f7fe fffa 	bl	801c6ca <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d6d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d6da:	2100      	movs	r1, #0
 801d6dc:	4805      	ldr	r0, [pc, #20]	; (801d6f4 <UTIL_ADV_TRACE_Init+0x2c>)
 801d6de:	f7fe fff4 	bl	801c6ca <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d6e2:	4b05      	ldr	r3, [pc, #20]	; (801d6f8 <UTIL_ADV_TRACE_Init+0x30>)
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	4805      	ldr	r0, [pc, #20]	; (801d6fc <UTIL_ADV_TRACE_Init+0x34>)
 801d6e8:	4798      	blx	r3
 801d6ea:	4603      	mov	r3, r0
}
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	bd80      	pop	{r7, pc}
 801d6f0:	20001cb8 	.word	0x20001cb8
 801d6f4:	20001cd0 	.word	0x20001cd0
 801d6f8:	0801e724 	.word	0x0801e724
 801d6fc:	0801d969 	.word	0x0801d969

0801d700 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d700:	b480      	push	{r7}
 801d702:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d704:	4b06      	ldr	r3, [pc, #24]	; (801d720 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d706:	8a5a      	ldrh	r2, [r3, #18]
 801d708:	4b05      	ldr	r3, [pc, #20]	; (801d720 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d70a:	8a1b      	ldrh	r3, [r3, #16]
 801d70c:	429a      	cmp	r2, r3
 801d70e:	d101      	bne.n	801d714 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d710:	2301      	movs	r3, #1
 801d712:	e000      	b.n	801d716 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d714:	2300      	movs	r3, #0
}
 801d716:	4618      	mov	r0, r3
 801d718:	46bd      	mov	sp, r7
 801d71a:	bc80      	pop	{r7}
 801d71c:	4770      	bx	lr
 801d71e:	bf00      	nop
 801d720:	20001cb8 	.word	0x20001cb8

0801d724 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d724:	b408      	push	{r3}
 801d726:	b580      	push	{r7, lr}
 801d728:	b08d      	sub	sp, #52	; 0x34
 801d72a:	af00      	add	r7, sp, #0
 801d72c:	60f8      	str	r0, [r7, #12]
 801d72e:	60b9      	str	r1, [r7, #8]
 801d730:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d732:	2300      	movs	r3, #0
 801d734:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d736:	2300      	movs	r3, #0
 801d738:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d73a:	4b37      	ldr	r3, [pc, #220]	; (801d818 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d73c:	7a1b      	ldrb	r3, [r3, #8]
 801d73e:	461a      	mov	r2, r3
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	4293      	cmp	r3, r2
 801d744:	d902      	bls.n	801d74c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d746:	f06f 0304 	mvn.w	r3, #4
 801d74a:	e05e      	b.n	801d80a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d74c:	4b32      	ldr	r3, [pc, #200]	; (801d818 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d74e:	68da      	ldr	r2, [r3, #12]
 801d750:	68bb      	ldr	r3, [r7, #8]
 801d752:	4013      	ands	r3, r2
 801d754:	68ba      	ldr	r2, [r7, #8]
 801d756:	429a      	cmp	r2, r3
 801d758:	d002      	beq.n	801d760 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d75a:	f06f 0305 	mvn.w	r3, #5
 801d75e:	e054      	b.n	801d80a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d760:	4b2d      	ldr	r3, [pc, #180]	; (801d818 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d762:	685b      	ldr	r3, [r3, #4]
 801d764:	2b00      	cmp	r3, #0
 801d766:	d00a      	beq.n	801d77e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d007      	beq.n	801d77e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d76e:	4b2a      	ldr	r3, [pc, #168]	; (801d818 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d770:	685b      	ldr	r3, [r3, #4]
 801d772:	f107 0116 	add.w	r1, r7, #22
 801d776:	f107 0218 	add.w	r2, r7, #24
 801d77a:	4610      	mov	r0, r2
 801d77c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d77e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d782:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d788:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d78c:	4823      	ldr	r0, [pc, #140]	; (801d81c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d78e:	f7ff fa29 	bl	801cbe4 <tiny_vsnprintf_like>
 801d792:	4603      	mov	r3, r0
 801d794:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d796:	f000 f9f1 	bl	801db7c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d79a:	8afa      	ldrh	r2, [r7, #22]
 801d79c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d79e:	4413      	add	r3, r2
 801d7a0:	b29b      	uxth	r3, r3
 801d7a2:	f107 0214 	add.w	r2, r7, #20
 801d7a6:	4611      	mov	r1, r2
 801d7a8:	4618      	mov	r0, r3
 801d7aa:	f000 f969 	bl	801da80 <TRACE_AllocateBufer>
 801d7ae:	4603      	mov	r3, r0
 801d7b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d7b4:	d025      	beq.n	801d802 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d7b6:	2300      	movs	r3, #0
 801d7b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d7ba:	e00e      	b.n	801d7da <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d7bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d7be:	8aba      	ldrh	r2, [r7, #20]
 801d7c0:	3330      	adds	r3, #48	; 0x30
 801d7c2:	443b      	add	r3, r7
 801d7c4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d7c8:	4b15      	ldr	r3, [pc, #84]	; (801d820 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d7ca:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d7cc:	8abb      	ldrh	r3, [r7, #20]
 801d7ce:	3301      	adds	r3, #1
 801d7d0:	b29b      	uxth	r3, r3
 801d7d2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d7d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d7d6:	3301      	adds	r3, #1
 801d7d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d7da:	8afb      	ldrh	r3, [r7, #22]
 801d7dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d7de:	429a      	cmp	r2, r3
 801d7e0:	d3ec      	bcc.n	801d7bc <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d7e2:	8abb      	ldrh	r3, [r7, #20]
 801d7e4:	461a      	mov	r2, r3
 801d7e6:	4b0e      	ldr	r3, [pc, #56]	; (801d820 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d7e8:	18d0      	adds	r0, r2, r3
 801d7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d7ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d7f2:	f7ff f9f7 	bl	801cbe4 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d7f6:	f000 f9df 	bl	801dbb8 <TRACE_UnLock>

    return TRACE_Send();
 801d7fa:	f000 f831 	bl	801d860 <TRACE_Send>
 801d7fe:	4603      	mov	r3, r0
 801d800:	e003      	b.n	801d80a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d802:	f000 f9d9 	bl	801dbb8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d806:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d80a:	4618      	mov	r0, r3
 801d80c:	3734      	adds	r7, #52	; 0x34
 801d80e:	46bd      	mov	sp, r7
 801d810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d814:	b001      	add	sp, #4
 801d816:	4770      	bx	lr
 801d818:	20001cb8 	.word	0x20001cb8
 801d81c:	200020d0 	.word	0x200020d0
 801d820:	20001cd0 	.word	0x20001cd0

0801d824 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d824:	b480      	push	{r7}
 801d826:	b083      	sub	sp, #12
 801d828:	af00      	add	r7, sp, #0
 801d82a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d82c:	4a03      	ldr	r2, [pc, #12]	; (801d83c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	6053      	str	r3, [r2, #4]
}
 801d832:	bf00      	nop
 801d834:	370c      	adds	r7, #12
 801d836:	46bd      	mov	sp, r7
 801d838:	bc80      	pop	{r7}
 801d83a:	4770      	bx	lr
 801d83c:	20001cb8 	.word	0x20001cb8

0801d840 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d840:	b480      	push	{r7}
 801d842:	b083      	sub	sp, #12
 801d844:	af00      	add	r7, sp, #0
 801d846:	4603      	mov	r3, r0
 801d848:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d84a:	4a04      	ldr	r2, [pc, #16]	; (801d85c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d84c:	79fb      	ldrb	r3, [r7, #7]
 801d84e:	7213      	strb	r3, [r2, #8]
}
 801d850:	bf00      	nop
 801d852:	370c      	adds	r7, #12
 801d854:	46bd      	mov	sp, r7
 801d856:	bc80      	pop	{r7}
 801d858:	4770      	bx	lr
 801d85a:	bf00      	nop
 801d85c:	20001cb8 	.word	0x20001cb8

0801d860 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d860:	b580      	push	{r7, lr}
 801d862:	b088      	sub	sp, #32
 801d864:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d866:	2300      	movs	r3, #0
 801d868:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d86a:	2300      	movs	r3, #0
 801d86c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d86e:	f3ef 8310 	mrs	r3, PRIMASK
 801d872:	613b      	str	r3, [r7, #16]
  return(result);
 801d874:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d876:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d878:	b672      	cpsid	i
}
 801d87a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d87c:	f000 f9ba 	bl	801dbf4 <TRACE_IsLocked>
 801d880:	4603      	mov	r3, r0
 801d882:	2b00      	cmp	r3, #0
 801d884:	d15d      	bne.n	801d942 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d886:	f000 f979 	bl	801db7c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d88a:	4b34      	ldr	r3, [pc, #208]	; (801d95c <TRACE_Send+0xfc>)
 801d88c:	8a1a      	ldrh	r2, [r3, #16]
 801d88e:	4b33      	ldr	r3, [pc, #204]	; (801d95c <TRACE_Send+0xfc>)
 801d890:	8a5b      	ldrh	r3, [r3, #18]
 801d892:	429a      	cmp	r2, r3
 801d894:	d04d      	beq.n	801d932 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d896:	4b31      	ldr	r3, [pc, #196]	; (801d95c <TRACE_Send+0xfc>)
 801d898:	789b      	ldrb	r3, [r3, #2]
 801d89a:	2b01      	cmp	r3, #1
 801d89c:	d117      	bne.n	801d8ce <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d89e:	4b2f      	ldr	r3, [pc, #188]	; (801d95c <TRACE_Send+0xfc>)
 801d8a0:	881a      	ldrh	r2, [r3, #0]
 801d8a2:	4b2e      	ldr	r3, [pc, #184]	; (801d95c <TRACE_Send+0xfc>)
 801d8a4:	8a1b      	ldrh	r3, [r3, #16]
 801d8a6:	1ad3      	subs	r3, r2, r3
 801d8a8:	b29a      	uxth	r2, r3
 801d8aa:	4b2c      	ldr	r3, [pc, #176]	; (801d95c <TRACE_Send+0xfc>)
 801d8ac:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d8ae:	4b2b      	ldr	r3, [pc, #172]	; (801d95c <TRACE_Send+0xfc>)
 801d8b0:	2202      	movs	r2, #2
 801d8b2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d8b4:	4b29      	ldr	r3, [pc, #164]	; (801d95c <TRACE_Send+0xfc>)
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d8ba:	4b28      	ldr	r3, [pc, #160]	; (801d95c <TRACE_Send+0xfc>)
 801d8bc:	8a9b      	ldrh	r3, [r3, #20]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d105      	bne.n	801d8ce <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d8c2:	4b26      	ldr	r3, [pc, #152]	; (801d95c <TRACE_Send+0xfc>)
 801d8c4:	2200      	movs	r2, #0
 801d8c6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d8c8:	4b24      	ldr	r3, [pc, #144]	; (801d95c <TRACE_Send+0xfc>)
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d8ce:	4b23      	ldr	r3, [pc, #140]	; (801d95c <TRACE_Send+0xfc>)
 801d8d0:	789b      	ldrb	r3, [r3, #2]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d115      	bne.n	801d902 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d8d6:	4b21      	ldr	r3, [pc, #132]	; (801d95c <TRACE_Send+0xfc>)
 801d8d8:	8a5a      	ldrh	r2, [r3, #18]
 801d8da:	4b20      	ldr	r3, [pc, #128]	; (801d95c <TRACE_Send+0xfc>)
 801d8dc:	8a1b      	ldrh	r3, [r3, #16]
 801d8de:	429a      	cmp	r2, r3
 801d8e0:	d908      	bls.n	801d8f4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d8e2:	4b1e      	ldr	r3, [pc, #120]	; (801d95c <TRACE_Send+0xfc>)
 801d8e4:	8a5a      	ldrh	r2, [r3, #18]
 801d8e6:	4b1d      	ldr	r3, [pc, #116]	; (801d95c <TRACE_Send+0xfc>)
 801d8e8:	8a1b      	ldrh	r3, [r3, #16]
 801d8ea:	1ad3      	subs	r3, r2, r3
 801d8ec:	b29a      	uxth	r2, r3
 801d8ee:	4b1b      	ldr	r3, [pc, #108]	; (801d95c <TRACE_Send+0xfc>)
 801d8f0:	829a      	strh	r2, [r3, #20]
 801d8f2:	e006      	b.n	801d902 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d8f4:	4b19      	ldr	r3, [pc, #100]	; (801d95c <TRACE_Send+0xfc>)
 801d8f6:	8a1b      	ldrh	r3, [r3, #16]
 801d8f8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d8fc:	b29a      	uxth	r2, r3
 801d8fe:	4b17      	ldr	r3, [pc, #92]	; (801d95c <TRACE_Send+0xfc>)
 801d900:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d902:	4b16      	ldr	r3, [pc, #88]	; (801d95c <TRACE_Send+0xfc>)
 801d904:	8a1b      	ldrh	r3, [r3, #16]
 801d906:	461a      	mov	r2, r3
 801d908:	4b15      	ldr	r3, [pc, #84]	; (801d960 <TRACE_Send+0x100>)
 801d90a:	4413      	add	r3, r2
 801d90c:	61bb      	str	r3, [r7, #24]
 801d90e:	697b      	ldr	r3, [r7, #20]
 801d910:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	f383 8810 	msr	PRIMASK, r3
}
 801d918:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d91a:	f7e4 fc35 	bl	8002188 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d91e:	4b11      	ldr	r3, [pc, #68]	; (801d964 <TRACE_Send+0x104>)
 801d920:	68db      	ldr	r3, [r3, #12]
 801d922:	4a0e      	ldr	r2, [pc, #56]	; (801d95c <TRACE_Send+0xfc>)
 801d924:	8a92      	ldrh	r2, [r2, #20]
 801d926:	4611      	mov	r1, r2
 801d928:	69b8      	ldr	r0, [r7, #24]
 801d92a:	4798      	blx	r3
 801d92c:	4603      	mov	r3, r0
 801d92e:	77fb      	strb	r3, [r7, #31]
 801d930:	e00d      	b.n	801d94e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d932:	f000 f941 	bl	801dbb8 <TRACE_UnLock>
 801d936:	697b      	ldr	r3, [r7, #20]
 801d938:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d93a:	68bb      	ldr	r3, [r7, #8]
 801d93c:	f383 8810 	msr	PRIMASK, r3
}
 801d940:	e005      	b.n	801d94e <TRACE_Send+0xee>
 801d942:	697b      	ldr	r3, [r7, #20]
 801d944:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	f383 8810 	msr	PRIMASK, r3
}
 801d94c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d94e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d952:	4618      	mov	r0, r3
 801d954:	3720      	adds	r7, #32
 801d956:	46bd      	mov	sp, r7
 801d958:	bd80      	pop	{r7, pc}
 801d95a:	bf00      	nop
 801d95c:	20001cb8 	.word	0x20001cb8
 801d960:	20001cd0 	.word	0x20001cd0
 801d964:	0801e724 	.word	0x0801e724

0801d968 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d968:	b580      	push	{r7, lr}
 801d96a:	b088      	sub	sp, #32
 801d96c:	af00      	add	r7, sp, #0
 801d96e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d970:	2300      	movs	r3, #0
 801d972:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d974:	f3ef 8310 	mrs	r3, PRIMASK
 801d978:	617b      	str	r3, [r7, #20]
  return(result);
 801d97a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d97c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d97e:	b672      	cpsid	i
}
 801d980:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d982:	4b3c      	ldr	r3, [pc, #240]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d984:	789b      	ldrb	r3, [r3, #2]
 801d986:	2b02      	cmp	r3, #2
 801d988:	d106      	bne.n	801d998 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d98a:	4b3a      	ldr	r3, [pc, #232]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d98c:	2200      	movs	r2, #0
 801d98e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d990:	4b38      	ldr	r3, [pc, #224]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d992:	2200      	movs	r2, #0
 801d994:	821a      	strh	r2, [r3, #16]
 801d996:	e00a      	b.n	801d9ae <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d998:	4b36      	ldr	r3, [pc, #216]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d99a:	8a1a      	ldrh	r2, [r3, #16]
 801d99c:	4b35      	ldr	r3, [pc, #212]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d99e:	8a9b      	ldrh	r3, [r3, #20]
 801d9a0:	4413      	add	r3, r2
 801d9a2:	b29b      	uxth	r3, r3
 801d9a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d9a8:	b29a      	uxth	r2, r3
 801d9aa:	4b32      	ldr	r3, [pc, #200]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9ac:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d9ae:	4b31      	ldr	r3, [pc, #196]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9b0:	8a1a      	ldrh	r2, [r3, #16]
 801d9b2:	4b30      	ldr	r3, [pc, #192]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9b4:	8a5b      	ldrh	r3, [r3, #18]
 801d9b6:	429a      	cmp	r2, r3
 801d9b8:	d04d      	beq.n	801da56 <TRACE_TxCpltCallback+0xee>
 801d9ba:	4b2e      	ldr	r3, [pc, #184]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9bc:	8adb      	ldrh	r3, [r3, #22]
 801d9be:	2b01      	cmp	r3, #1
 801d9c0:	d149      	bne.n	801da56 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d9c2:	4b2c      	ldr	r3, [pc, #176]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9c4:	789b      	ldrb	r3, [r3, #2]
 801d9c6:	2b01      	cmp	r3, #1
 801d9c8:	d117      	bne.n	801d9fa <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d9ca:	4b2a      	ldr	r3, [pc, #168]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9cc:	881a      	ldrh	r2, [r3, #0]
 801d9ce:	4b29      	ldr	r3, [pc, #164]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9d0:	8a1b      	ldrh	r3, [r3, #16]
 801d9d2:	1ad3      	subs	r3, r2, r3
 801d9d4:	b29a      	uxth	r2, r3
 801d9d6:	4b27      	ldr	r3, [pc, #156]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9d8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d9da:	4b26      	ldr	r3, [pc, #152]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9dc:	2202      	movs	r2, #2
 801d9de:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d9e0:	4b24      	ldr	r3, [pc, #144]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9e2:	2200      	movs	r2, #0
 801d9e4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d9e6:	4b23      	ldr	r3, [pc, #140]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9e8:	8a9b      	ldrh	r3, [r3, #20]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d105      	bne.n	801d9fa <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d9ee:	4b21      	ldr	r3, [pc, #132]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9f0:	2200      	movs	r2, #0
 801d9f2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d9f4:	4b1f      	ldr	r3, [pc, #124]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9f6:	2200      	movs	r2, #0
 801d9f8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d9fa:	4b1e      	ldr	r3, [pc, #120]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801d9fc:	789b      	ldrb	r3, [r3, #2]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d115      	bne.n	801da2e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801da02:	4b1c      	ldr	r3, [pc, #112]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da04:	8a5a      	ldrh	r2, [r3, #18]
 801da06:	4b1b      	ldr	r3, [pc, #108]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da08:	8a1b      	ldrh	r3, [r3, #16]
 801da0a:	429a      	cmp	r2, r3
 801da0c:	d908      	bls.n	801da20 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801da0e:	4b19      	ldr	r3, [pc, #100]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da10:	8a5a      	ldrh	r2, [r3, #18]
 801da12:	4b18      	ldr	r3, [pc, #96]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da14:	8a1b      	ldrh	r3, [r3, #16]
 801da16:	1ad3      	subs	r3, r2, r3
 801da18:	b29a      	uxth	r2, r3
 801da1a:	4b16      	ldr	r3, [pc, #88]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da1c:	829a      	strh	r2, [r3, #20]
 801da1e:	e006      	b.n	801da2e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801da20:	4b14      	ldr	r3, [pc, #80]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da22:	8a1b      	ldrh	r3, [r3, #16]
 801da24:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801da28:	b29a      	uxth	r2, r3
 801da2a:	4b12      	ldr	r3, [pc, #72]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da2c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801da2e:	4b11      	ldr	r3, [pc, #68]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da30:	8a1b      	ldrh	r3, [r3, #16]
 801da32:	461a      	mov	r2, r3
 801da34:	4b10      	ldr	r3, [pc, #64]	; (801da78 <TRACE_TxCpltCallback+0x110>)
 801da36:	4413      	add	r3, r2
 801da38:	61fb      	str	r3, [r7, #28]
 801da3a:	69bb      	ldr	r3, [r7, #24]
 801da3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da3e:	693b      	ldr	r3, [r7, #16]
 801da40:	f383 8810 	msr	PRIMASK, r3
}
 801da44:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801da46:	4b0d      	ldr	r3, [pc, #52]	; (801da7c <TRACE_TxCpltCallback+0x114>)
 801da48:	68db      	ldr	r3, [r3, #12]
 801da4a:	4a0a      	ldr	r2, [pc, #40]	; (801da74 <TRACE_TxCpltCallback+0x10c>)
 801da4c:	8a92      	ldrh	r2, [r2, #20]
 801da4e:	4611      	mov	r1, r2
 801da50:	69f8      	ldr	r0, [r7, #28]
 801da52:	4798      	blx	r3
 801da54:	e00a      	b.n	801da6c <TRACE_TxCpltCallback+0x104>
 801da56:	69bb      	ldr	r3, [r7, #24]
 801da58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da5a:	68fb      	ldr	r3, [r7, #12]
 801da5c:	f383 8810 	msr	PRIMASK, r3
}
 801da60:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801da62:	f7e4 fb99 	bl	8002198 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801da66:	f000 f8a7 	bl	801dbb8 <TRACE_UnLock>
  }
}
 801da6a:	bf00      	nop
 801da6c:	bf00      	nop
 801da6e:	3720      	adds	r7, #32
 801da70:	46bd      	mov	sp, r7
 801da72:	bd80      	pop	{r7, pc}
 801da74:	20001cb8 	.word	0x20001cb8
 801da78:	20001cd0 	.word	0x20001cd0
 801da7c:	0801e724 	.word	0x0801e724

0801da80 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801da80:	b480      	push	{r7}
 801da82:	b087      	sub	sp, #28
 801da84:	af00      	add	r7, sp, #0
 801da86:	4603      	mov	r3, r0
 801da88:	6039      	str	r1, [r7, #0]
 801da8a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801da8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801da90:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da92:	f3ef 8310 	mrs	r3, PRIMASK
 801da96:	60fb      	str	r3, [r7, #12]
  return(result);
 801da98:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801da9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801da9c:	b672      	cpsid	i
}
 801da9e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801daa0:	4b35      	ldr	r3, [pc, #212]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801daa2:	8a5a      	ldrh	r2, [r3, #18]
 801daa4:	4b34      	ldr	r3, [pc, #208]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801daa6:	8a1b      	ldrh	r3, [r3, #16]
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d11b      	bne.n	801dae4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801daac:	4b32      	ldr	r3, [pc, #200]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801daae:	8a5b      	ldrh	r3, [r3, #18]
 801dab0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801dab4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801dab6:	88fa      	ldrh	r2, [r7, #6]
 801dab8:	8afb      	ldrh	r3, [r7, #22]
 801daba:	429a      	cmp	r2, r3
 801dabc:	d33a      	bcc.n	801db34 <TRACE_AllocateBufer+0xb4>
 801dabe:	4b2e      	ldr	r3, [pc, #184]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801dac0:	8a1b      	ldrh	r3, [r3, #16]
 801dac2:	88fa      	ldrh	r2, [r7, #6]
 801dac4:	429a      	cmp	r2, r3
 801dac6:	d235      	bcs.n	801db34 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801dac8:	4b2b      	ldr	r3, [pc, #172]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801daca:	2201      	movs	r2, #1
 801dacc:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801dace:	4b2a      	ldr	r3, [pc, #168]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801dad0:	8a5a      	ldrh	r2, [r3, #18]
 801dad2:	4b29      	ldr	r3, [pc, #164]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801dad4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801dad6:	4b28      	ldr	r3, [pc, #160]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801dad8:	8a1b      	ldrh	r3, [r3, #16]
 801dada:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801dadc:	4b26      	ldr	r3, [pc, #152]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801dade:	2200      	movs	r2, #0
 801dae0:	825a      	strh	r2, [r3, #18]
 801dae2:	e027      	b.n	801db34 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801dae4:	4b24      	ldr	r3, [pc, #144]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801dae6:	8a5a      	ldrh	r2, [r3, #18]
 801dae8:	4b23      	ldr	r3, [pc, #140]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801daea:	8a1b      	ldrh	r3, [r3, #16]
 801daec:	429a      	cmp	r2, r3
 801daee:	d91b      	bls.n	801db28 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801daf0:	4b21      	ldr	r3, [pc, #132]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801daf2:	8a5b      	ldrh	r3, [r3, #18]
 801daf4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801daf8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801dafa:	88fa      	ldrh	r2, [r7, #6]
 801dafc:	8afb      	ldrh	r3, [r7, #22]
 801dafe:	429a      	cmp	r2, r3
 801db00:	d318      	bcc.n	801db34 <TRACE_AllocateBufer+0xb4>
 801db02:	4b1d      	ldr	r3, [pc, #116]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db04:	8a1b      	ldrh	r3, [r3, #16]
 801db06:	88fa      	ldrh	r2, [r7, #6]
 801db08:	429a      	cmp	r2, r3
 801db0a:	d213      	bcs.n	801db34 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801db0c:	4b1a      	ldr	r3, [pc, #104]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db0e:	2201      	movs	r2, #1
 801db10:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801db12:	4b19      	ldr	r3, [pc, #100]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db14:	8a5a      	ldrh	r2, [r3, #18]
 801db16:	4b18      	ldr	r3, [pc, #96]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db18:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801db1a:	4b17      	ldr	r3, [pc, #92]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db1c:	8a1b      	ldrh	r3, [r3, #16]
 801db1e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801db20:	4b15      	ldr	r3, [pc, #84]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db22:	2200      	movs	r2, #0
 801db24:	825a      	strh	r2, [r3, #18]
 801db26:	e005      	b.n	801db34 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801db28:	4b13      	ldr	r3, [pc, #76]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db2a:	8a1a      	ldrh	r2, [r3, #16]
 801db2c:	4b12      	ldr	r3, [pc, #72]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db2e:	8a5b      	ldrh	r3, [r3, #18]
 801db30:	1ad3      	subs	r3, r2, r3
 801db32:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801db34:	8afa      	ldrh	r2, [r7, #22]
 801db36:	88fb      	ldrh	r3, [r7, #6]
 801db38:	429a      	cmp	r2, r3
 801db3a:	d90f      	bls.n	801db5c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801db3c:	4b0e      	ldr	r3, [pc, #56]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db3e:	8a5a      	ldrh	r2, [r3, #18]
 801db40:	683b      	ldr	r3, [r7, #0]
 801db42:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801db44:	4b0c      	ldr	r3, [pc, #48]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db46:	8a5a      	ldrh	r2, [r3, #18]
 801db48:	88fb      	ldrh	r3, [r7, #6]
 801db4a:	4413      	add	r3, r2
 801db4c:	b29b      	uxth	r3, r3
 801db4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801db52:	b29a      	uxth	r2, r3
 801db54:	4b08      	ldr	r3, [pc, #32]	; (801db78 <TRACE_AllocateBufer+0xf8>)
 801db56:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801db58:	2300      	movs	r3, #0
 801db5a:	82bb      	strh	r3, [r7, #20]
 801db5c:	693b      	ldr	r3, [r7, #16]
 801db5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db60:	68bb      	ldr	r3, [r7, #8]
 801db62:	f383 8810 	msr	PRIMASK, r3
}
 801db66:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801db68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801db6c:	4618      	mov	r0, r3
 801db6e:	371c      	adds	r7, #28
 801db70:	46bd      	mov	sp, r7
 801db72:	bc80      	pop	{r7}
 801db74:	4770      	bx	lr
 801db76:	bf00      	nop
 801db78:	20001cb8 	.word	0x20001cb8

0801db7c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801db7c:	b480      	push	{r7}
 801db7e:	b085      	sub	sp, #20
 801db80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db82:	f3ef 8310 	mrs	r3, PRIMASK
 801db86:	607b      	str	r3, [r7, #4]
  return(result);
 801db88:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801db8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801db8c:	b672      	cpsid	i
}
 801db8e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801db90:	4b08      	ldr	r3, [pc, #32]	; (801dbb4 <TRACE_Lock+0x38>)
 801db92:	8adb      	ldrh	r3, [r3, #22]
 801db94:	3301      	adds	r3, #1
 801db96:	b29a      	uxth	r2, r3
 801db98:	4b06      	ldr	r3, [pc, #24]	; (801dbb4 <TRACE_Lock+0x38>)
 801db9a:	82da      	strh	r2, [r3, #22]
 801db9c:	68fb      	ldr	r3, [r7, #12]
 801db9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dba0:	68bb      	ldr	r3, [r7, #8]
 801dba2:	f383 8810 	msr	PRIMASK, r3
}
 801dba6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801dba8:	bf00      	nop
 801dbaa:	3714      	adds	r7, #20
 801dbac:	46bd      	mov	sp, r7
 801dbae:	bc80      	pop	{r7}
 801dbb0:	4770      	bx	lr
 801dbb2:	bf00      	nop
 801dbb4:	20001cb8 	.word	0x20001cb8

0801dbb8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801dbb8:	b480      	push	{r7}
 801dbba:	b085      	sub	sp, #20
 801dbbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbbe:	f3ef 8310 	mrs	r3, PRIMASK
 801dbc2:	607b      	str	r3, [r7, #4]
  return(result);
 801dbc4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dbc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801dbc8:	b672      	cpsid	i
}
 801dbca:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801dbcc:	4b08      	ldr	r3, [pc, #32]	; (801dbf0 <TRACE_UnLock+0x38>)
 801dbce:	8adb      	ldrh	r3, [r3, #22]
 801dbd0:	3b01      	subs	r3, #1
 801dbd2:	b29a      	uxth	r2, r3
 801dbd4:	4b06      	ldr	r3, [pc, #24]	; (801dbf0 <TRACE_UnLock+0x38>)
 801dbd6:	82da      	strh	r2, [r3, #22]
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbdc:	68bb      	ldr	r3, [r7, #8]
 801dbde:	f383 8810 	msr	PRIMASK, r3
}
 801dbe2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801dbe4:	bf00      	nop
 801dbe6:	3714      	adds	r7, #20
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	bc80      	pop	{r7}
 801dbec:	4770      	bx	lr
 801dbee:	bf00      	nop
 801dbf0:	20001cb8 	.word	0x20001cb8

0801dbf4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801dbf4:	b480      	push	{r7}
 801dbf6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801dbf8:	4b05      	ldr	r3, [pc, #20]	; (801dc10 <TRACE_IsLocked+0x1c>)
 801dbfa:	8adb      	ldrh	r3, [r3, #22]
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	bf14      	ite	ne
 801dc00:	2301      	movne	r3, #1
 801dc02:	2300      	moveq	r3, #0
 801dc04:	b2db      	uxtb	r3, r3
}
 801dc06:	4618      	mov	r0, r3
 801dc08:	46bd      	mov	sp, r7
 801dc0a:	bc80      	pop	{r7}
 801dc0c:	4770      	bx	lr
 801dc0e:	bf00      	nop
 801dc10:	20001cb8 	.word	0x20001cb8

0801dc14 <memset>:
 801dc14:	4402      	add	r2, r0
 801dc16:	4603      	mov	r3, r0
 801dc18:	4293      	cmp	r3, r2
 801dc1a:	d100      	bne.n	801dc1e <memset+0xa>
 801dc1c:	4770      	bx	lr
 801dc1e:	f803 1b01 	strb.w	r1, [r3], #1
 801dc22:	e7f9      	b.n	801dc18 <memset+0x4>

0801dc24 <__libc_init_array>:
 801dc24:	b570      	push	{r4, r5, r6, lr}
 801dc26:	4d0d      	ldr	r5, [pc, #52]	; (801dc5c <__libc_init_array+0x38>)
 801dc28:	4c0d      	ldr	r4, [pc, #52]	; (801dc60 <__libc_init_array+0x3c>)
 801dc2a:	1b64      	subs	r4, r4, r5
 801dc2c:	10a4      	asrs	r4, r4, #2
 801dc2e:	2600      	movs	r6, #0
 801dc30:	42a6      	cmp	r6, r4
 801dc32:	d109      	bne.n	801dc48 <__libc_init_array+0x24>
 801dc34:	4d0b      	ldr	r5, [pc, #44]	; (801dc64 <__libc_init_array+0x40>)
 801dc36:	4c0c      	ldr	r4, [pc, #48]	; (801dc68 <__libc_init_array+0x44>)
 801dc38:	f000 f89a 	bl	801dd70 <_init>
 801dc3c:	1b64      	subs	r4, r4, r5
 801dc3e:	10a4      	asrs	r4, r4, #2
 801dc40:	2600      	movs	r6, #0
 801dc42:	42a6      	cmp	r6, r4
 801dc44:	d105      	bne.n	801dc52 <__libc_init_array+0x2e>
 801dc46:	bd70      	pop	{r4, r5, r6, pc}
 801dc48:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc4c:	4798      	blx	r3
 801dc4e:	3601      	adds	r6, #1
 801dc50:	e7ee      	b.n	801dc30 <__libc_init_array+0xc>
 801dc52:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc56:	4798      	blx	r3
 801dc58:	3601      	adds	r6, #1
 801dc5a:	e7f2      	b.n	801dc42 <__libc_init_array+0x1e>
 801dc5c:	0801eddc 	.word	0x0801eddc
 801dc60:	0801eddc 	.word	0x0801eddc
 801dc64:	0801eddc 	.word	0x0801eddc
 801dc68:	0801ede0 	.word	0x0801ede0
 801dc6c:	00000000 	.word	0x00000000

0801dc70 <floor>:
 801dc70:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801dc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc78:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801dc7c:	2e13      	cmp	r6, #19
 801dc7e:	460b      	mov	r3, r1
 801dc80:	4607      	mov	r7, r0
 801dc82:	460c      	mov	r4, r1
 801dc84:	4605      	mov	r5, r0
 801dc86:	dc32      	bgt.n	801dcee <floor+0x7e>
 801dc88:	2e00      	cmp	r6, #0
 801dc8a:	da14      	bge.n	801dcb6 <floor+0x46>
 801dc8c:	a334      	add	r3, pc, #208	; (adr r3, 801dd60 <floor+0xf0>)
 801dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc92:	f7e2 fa7f 	bl	8000194 <__adddf3>
 801dc96:	2200      	movs	r2, #0
 801dc98:	2300      	movs	r3, #0
 801dc9a:	f7e2 fcaf 	bl	80005fc <__aeabi_dcmpgt>
 801dc9e:	b138      	cbz	r0, 801dcb0 <floor+0x40>
 801dca0:	2c00      	cmp	r4, #0
 801dca2:	da56      	bge.n	801dd52 <floor+0xe2>
 801dca4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801dca8:	4325      	orrs	r5, r4
 801dcaa:	d055      	beq.n	801dd58 <floor+0xe8>
 801dcac:	4c2e      	ldr	r4, [pc, #184]	; (801dd68 <floor+0xf8>)
 801dcae:	2500      	movs	r5, #0
 801dcb0:	4623      	mov	r3, r4
 801dcb2:	462f      	mov	r7, r5
 801dcb4:	e025      	b.n	801dd02 <floor+0x92>
 801dcb6:	4a2d      	ldr	r2, [pc, #180]	; (801dd6c <floor+0xfc>)
 801dcb8:	fa42 f806 	asr.w	r8, r2, r6
 801dcbc:	ea01 0208 	and.w	r2, r1, r8
 801dcc0:	4302      	orrs	r2, r0
 801dcc2:	d01e      	beq.n	801dd02 <floor+0x92>
 801dcc4:	a326      	add	r3, pc, #152	; (adr r3, 801dd60 <floor+0xf0>)
 801dcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcca:	f7e2 fa63 	bl	8000194 <__adddf3>
 801dcce:	2200      	movs	r2, #0
 801dcd0:	2300      	movs	r3, #0
 801dcd2:	f7e2 fc93 	bl	80005fc <__aeabi_dcmpgt>
 801dcd6:	2800      	cmp	r0, #0
 801dcd8:	d0ea      	beq.n	801dcb0 <floor+0x40>
 801dcda:	2c00      	cmp	r4, #0
 801dcdc:	bfbe      	ittt	lt
 801dcde:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801dce2:	4133      	asrlt	r3, r6
 801dce4:	18e4      	addlt	r4, r4, r3
 801dce6:	ea24 0408 	bic.w	r4, r4, r8
 801dcea:	2500      	movs	r5, #0
 801dcec:	e7e0      	b.n	801dcb0 <floor+0x40>
 801dcee:	2e33      	cmp	r6, #51	; 0x33
 801dcf0:	dd0b      	ble.n	801dd0a <floor+0x9a>
 801dcf2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801dcf6:	d104      	bne.n	801dd02 <floor+0x92>
 801dcf8:	4602      	mov	r2, r0
 801dcfa:	f7e2 fa4b 	bl	8000194 <__adddf3>
 801dcfe:	4607      	mov	r7, r0
 801dd00:	460b      	mov	r3, r1
 801dd02:	4638      	mov	r0, r7
 801dd04:	4619      	mov	r1, r3
 801dd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd0a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801dd0e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801dd12:	fa28 f802 	lsr.w	r8, r8, r2
 801dd16:	ea10 0f08 	tst.w	r0, r8
 801dd1a:	d0f2      	beq.n	801dd02 <floor+0x92>
 801dd1c:	a310      	add	r3, pc, #64	; (adr r3, 801dd60 <floor+0xf0>)
 801dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd22:	f7e2 fa37 	bl	8000194 <__adddf3>
 801dd26:	2200      	movs	r2, #0
 801dd28:	2300      	movs	r3, #0
 801dd2a:	f7e2 fc67 	bl	80005fc <__aeabi_dcmpgt>
 801dd2e:	2800      	cmp	r0, #0
 801dd30:	d0be      	beq.n	801dcb0 <floor+0x40>
 801dd32:	2c00      	cmp	r4, #0
 801dd34:	da0a      	bge.n	801dd4c <floor+0xdc>
 801dd36:	2e14      	cmp	r6, #20
 801dd38:	d101      	bne.n	801dd3e <floor+0xce>
 801dd3a:	3401      	adds	r4, #1
 801dd3c:	e006      	b.n	801dd4c <floor+0xdc>
 801dd3e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801dd42:	2301      	movs	r3, #1
 801dd44:	40b3      	lsls	r3, r6
 801dd46:	441d      	add	r5, r3
 801dd48:	42af      	cmp	r7, r5
 801dd4a:	d8f6      	bhi.n	801dd3a <floor+0xca>
 801dd4c:	ea25 0508 	bic.w	r5, r5, r8
 801dd50:	e7ae      	b.n	801dcb0 <floor+0x40>
 801dd52:	2500      	movs	r5, #0
 801dd54:	462c      	mov	r4, r5
 801dd56:	e7ab      	b.n	801dcb0 <floor+0x40>
 801dd58:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dd5c:	e7a8      	b.n	801dcb0 <floor+0x40>
 801dd5e:	bf00      	nop
 801dd60:	8800759c 	.word	0x8800759c
 801dd64:	7e37e43c 	.word	0x7e37e43c
 801dd68:	bff00000 	.word	0xbff00000
 801dd6c:	000fffff 	.word	0x000fffff

0801dd70 <_init>:
 801dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd72:	bf00      	nop
 801dd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd76:	bc08      	pop	{r3}
 801dd78:	469e      	mov	lr, r3
 801dd7a:	4770      	bx	lr

0801dd7c <_fini>:
 801dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd7e:	bf00      	nop
 801dd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd82:	bc08      	pop	{r3}
 801dd84:	469e      	mov	lr, r3
 801dd86:	4770      	bx	lr
