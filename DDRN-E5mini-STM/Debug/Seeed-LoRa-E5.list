
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020da4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001094  08020ee4  08020ee4  00030ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08021f78  08021f78  00031f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08022050  08022050  00040198  2**0
                  CONTENTS
  5 .ARM          00000008  08022050  08022050  00032050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08022058  08022058  00040198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08022058  08022058  00032058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08022060  08022060  00032060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000198  20000000  08022064  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002434  20000198  080221fc  00040198  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200025cc  080221fc  000425cc  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00040198  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000401c2  2**0
                  CONTENTS, READONLY
 14 .debug_info   000514fd  00000000  00000000  00040205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c41f  00000000  00000000  00091702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003c60  00000000  00000000  0009db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002df5  00000000  00000000  000a1788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f3e9  00000000  00000000  000a457d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a7b1  00000000  00000000  000d3966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d77d6  00000000  00000000  0011e117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ff18  00000000  00000000  001f58f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00205808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000198 	.word	0x20000198
 800015c:	00000000 	.word	0x00000000
 8000160:	08020ecc 	.word	0x08020ecc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000019c 	.word	0x2000019c
 800017c:	08020ecc 	.word	0x08020ecc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_frsub>:
 8000bcc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd0:	e002      	b.n	8000bd8 <__addsf3>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_fsub>:
 8000bd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd8 <__addsf3>:
 8000bd8:	0042      	lsls	r2, r0, #1
 8000bda:	bf1f      	itttt	ne
 8000bdc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be0:	ea92 0f03 	teqne	r2, r3
 8000be4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bec:	d06a      	beq.n	8000cc4 <__addsf3+0xec>
 8000bee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf6:	bfc1      	itttt	gt
 8000bf8:	18d2      	addgt	r2, r2, r3
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	4048      	eorgt	r0, r1
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	bfb8      	it	lt
 8000c02:	425b      	neglt	r3, r3
 8000c04:	2b19      	cmp	r3, #25
 8000c06:	bf88      	it	hi
 8000c08:	4770      	bxhi	lr
 8000c0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c26:	bf18      	it	ne
 8000c28:	4249      	negne	r1, r1
 8000c2a:	ea92 0f03 	teq	r2, r3
 8000c2e:	d03f      	beq.n	8000cb0 <__addsf3+0xd8>
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	fa41 fc03 	asr.w	ip, r1, r3
 8000c38:	eb10 000c 	adds.w	r0, r0, ip
 8000c3c:	f1c3 0320 	rsb	r3, r3, #32
 8000c40:	fa01 f103 	lsl.w	r1, r1, r3
 8000c44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__addsf3+0x78>
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c54:	d313      	bcc.n	8000c7e <__addsf3+0xa6>
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d306      	bcc.n	8000c6a <__addsf3+0x92>
 8000c5c:	0840      	lsrs	r0, r0, #1
 8000c5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c62:	f102 0201 	add.w	r2, r2, #1
 8000c66:	2afe      	cmp	r2, #254	; 0xfe
 8000c68:	d251      	bcs.n	8000d0e <__addsf3+0x136>
 8000c6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c72:	bf08      	it	eq
 8000c74:	f020 0001 	biceq.w	r0, r0, #1
 8000c78:	ea40 0003 	orr.w	r0, r0, r3
 8000c7c:	4770      	bx	lr
 8000c7e:	0049      	lsls	r1, r1, #1
 8000c80:	eb40 0000 	adc.w	r0, r0, r0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	bf28      	it	cs
 8000c88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c8c:	d2ed      	bcs.n	8000c6a <__addsf3+0x92>
 8000c8e:	fab0 fc80 	clz	ip, r0
 8000c92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c96:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9e:	bfaa      	itet	ge
 8000ca0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca4:	4252      	neglt	r2, r2
 8000ca6:	4318      	orrge	r0, r3
 8000ca8:	bfbc      	itt	lt
 8000caa:	40d0      	lsrlt	r0, r2
 8000cac:	4318      	orrlt	r0, r3
 8000cae:	4770      	bx	lr
 8000cb0:	f092 0f00 	teq	r2, #0
 8000cb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb8:	bf06      	itte	eq
 8000cba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cbe:	3201      	addeq	r2, #1
 8000cc0:	3b01      	subne	r3, #1
 8000cc2:	e7b5      	b.n	8000c30 <__addsf3+0x58>
 8000cc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	bf18      	it	ne
 8000cce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd2:	d021      	beq.n	8000d18 <__addsf3+0x140>
 8000cd4:	ea92 0f03 	teq	r2, r3
 8000cd8:	d004      	beq.n	8000ce4 <__addsf3+0x10c>
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	bf08      	it	eq
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	4770      	bx	lr
 8000ce4:	ea90 0f01 	teq	r0, r1
 8000ce8:	bf1c      	itt	ne
 8000cea:	2000      	movne	r0, #0
 8000cec:	4770      	bxne	lr
 8000cee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf2:	d104      	bne.n	8000cfe <__addsf3+0x126>
 8000cf4:	0040      	lsls	r0, r0, #1
 8000cf6:	bf28      	it	cs
 8000cf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	4770      	bx	lr
 8000cfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d02:	bf3c      	itt	cc
 8000d04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d08:	4770      	bxcc	lr
 8000d0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	4770      	bx	lr
 8000d18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d1c:	bf16      	itet	ne
 8000d1e:	4608      	movne	r0, r1
 8000d20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d24:	4601      	movne	r1, r0
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	bf06      	itte	eq
 8000d2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2e:	ea90 0f01 	teqeq	r0, r1
 8000d32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_ui2f>:
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e004      	b.n	8000d48 <__aeabi_i2f+0x8>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_i2f>:
 8000d40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	bf48      	it	mi
 8000d46:	4240      	negmi	r0, r0
 8000d48:	ea5f 0c00 	movs.w	ip, r0
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d54:	4601      	mov	r1, r0
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	e01c      	b.n	8000d96 <__aeabi_l2f+0x2a>

08000d5c <__aeabi_ul2f>:
 8000d5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e00a      	b.n	8000d80 <__aeabi_l2f+0x14>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_l2f>:
 8000d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d78:	d502      	bpl.n	8000d80 <__aeabi_l2f+0x14>
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d80:	ea5f 0c01 	movs.w	ip, r1
 8000d84:	bf02      	ittt	eq
 8000d86:	4684      	moveq	ip, r0
 8000d88:	4601      	moveq	r1, r0
 8000d8a:	2000      	moveq	r0, #0
 8000d8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d90:	bf08      	it	eq
 8000d92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9a:	fabc f28c 	clz	r2, ip
 8000d9e:	3a08      	subs	r2, #8
 8000da0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da4:	db10      	blt.n	8000dc8 <__aeabi_l2f+0x5c>
 8000da6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f102 0220 	add.w	r2, r2, #32
 8000dcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd0:	f1c2 0220 	rsb	r2, r2, #32
 8000dd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ddc:	eb43 0002 	adc.w	r0, r3, r2
 8000de0:	bf08      	it	eq
 8000de2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fmul>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d06f      	beq.n	8000ee0 <__aeabi_fmul+0xf8>
 8000e00:	441a      	add	r2, r3
 8000e02:	ea80 0c01 	eor.w	ip, r0, r1
 8000e06:	0240      	lsls	r0, r0, #9
 8000e08:	bf18      	it	ne
 8000e0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e0e:	d01e      	beq.n	8000e4e <__aeabi_fmul+0x66>
 8000e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e28:	bf3e      	ittt	cc
 8000e2a:	0049      	lslcc	r1, r1, #1
 8000e2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e30:	005b      	lslcc	r3, r3, #1
 8000e32:	ea40 0001 	orr.w	r0, r0, r1
 8000e36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e3a:	2afd      	cmp	r2, #253	; 0xfd
 8000e3c:	d81d      	bhi.n	8000e7a <__aeabi_fmul+0x92>
 8000e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e46:	bf08      	it	eq
 8000e48:	f020 0001 	biceq.w	r0, r0, #1
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e56:	bf08      	it	eq
 8000e58:	0249      	lsleq	r1, r1, #9
 8000e5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e62:	3a7f      	subs	r2, #127	; 0x7f
 8000e64:	bfc2      	ittt	gt
 8000e66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6e:	4770      	bxgt	lr
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	dc5d      	bgt.n	8000f38 <__aeabi_fmul+0x150>
 8000e7c:	f112 0f19 	cmn.w	r2, #25
 8000e80:	bfdc      	itt	le
 8000e82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	4770      	bxle	lr
 8000e88:	f1c2 0200 	rsb	r2, r2, #0
 8000e8c:	0041      	lsls	r1, r0, #1
 8000e8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e92:	f1c2 0220 	rsb	r2, r2, #32
 8000e96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e9e:	f140 0000 	adc.w	r0, r0, #0
 8000ea2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ea6:	bf08      	it	eq
 8000ea8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eac:	4770      	bx	lr
 8000eae:	f092 0f00 	teq	r2, #0
 8000eb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0040      	lsleq	r0, r0, #1
 8000eba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ebe:	3a01      	subeq	r2, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xce>
 8000ec2:	ea40 000c 	orr.w	r0, r0, ip
 8000ec6:	f093 0f00 	teq	r3, #0
 8000eca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0049      	lsleq	r1, r1, #1
 8000ed2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed6:	3b01      	subeq	r3, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fmul+0xe6>
 8000eda:	ea41 010c 	orr.w	r1, r1, ip
 8000ede:	e78f      	b.n	8000e00 <__aeabi_fmul+0x18>
 8000ee0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee4:	ea92 0f0c 	teq	r2, ip
 8000ee8:	bf18      	it	ne
 8000eea:	ea93 0f0c 	teqne	r3, ip
 8000eee:	d00a      	beq.n	8000f06 <__aeabi_fmul+0x11e>
 8000ef0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef4:	bf18      	it	ne
 8000ef6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	d1d8      	bne.n	8000eae <__aeabi_fmul+0xc6>
 8000efc:	ea80 0001 	eor.w	r0, r0, r1
 8000f00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f04:	4770      	bx	lr
 8000f06:	f090 0f00 	teq	r0, #0
 8000f0a:	bf17      	itett	ne
 8000f0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f10:	4608      	moveq	r0, r1
 8000f12:	f091 0f00 	teqne	r1, #0
 8000f16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f1a:	d014      	beq.n	8000f46 <__aeabi_fmul+0x15e>
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d101      	bne.n	8000f26 <__aeabi_fmul+0x13e>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d10f      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f26:	ea93 0f0c 	teq	r3, ip
 8000f2a:	d103      	bne.n	8000f34 <__aeabi_fmul+0x14c>
 8000f2c:	024b      	lsls	r3, r1, #9
 8000f2e:	bf18      	it	ne
 8000f30:	4608      	movne	r0, r1
 8000f32:	d108      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f44:	4770      	bx	lr
 8000f46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_fdiv>:
 8000f50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f58:	bf1e      	ittt	ne
 8000f5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f5e:	ea92 0f0c 	teqne	r2, ip
 8000f62:	ea93 0f0c 	teqne	r3, ip
 8000f66:	d069      	beq.n	800103c <__aeabi_fdiv+0xec>
 8000f68:	eba2 0203 	sub.w	r2, r2, r3
 8000f6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f70:	0249      	lsls	r1, r1, #9
 8000f72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f76:	d037      	beq.n	8000fe8 <__aeabi_fdiv+0x98>
 8000f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf38      	it	cc
 8000f8c:	005b      	lslcc	r3, r3, #1
 8000f8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f96:	428b      	cmp	r3, r1
 8000f98:	bf24      	itt	cs
 8000f9a:	1a5b      	subcs	r3, r3, r1
 8000f9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000faa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fb2:	bf24      	itt	cs
 8000fb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	bf18      	it	ne
 8000fce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fd2:	d1e0      	bne.n	8000f96 <__aeabi_fdiv+0x46>
 8000fd4:	2afd      	cmp	r2, #253	; 0xfd
 8000fd6:	f63f af50 	bhi.w	8000e7a <__aeabi_fmul+0x92>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe0:	bf08      	it	eq
 8000fe2:	f020 0001 	biceq.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff0:	327f      	adds	r2, #127	; 0x7f
 8000ff2:	bfc2      	ittt	gt
 8000ff4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ffc:	4770      	bxgt	lr
 8000ffe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	3a01      	subs	r2, #1
 8001008:	e737      	b.n	8000e7a <__aeabi_fmul+0x92>
 800100a:	f092 0f00 	teq	r2, #0
 800100e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0040      	lsleq	r0, r0, #1
 8001016:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800101a:	3a01      	subeq	r2, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xc2>
 800101e:	ea40 000c 	orr.w	r0, r0, ip
 8001022:	f093 0f00 	teq	r3, #0
 8001026:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800102a:	bf02      	ittt	eq
 800102c:	0049      	lsleq	r1, r1, #1
 800102e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001032:	3b01      	subeq	r3, #1
 8001034:	d0f9      	beq.n	800102a <__aeabi_fdiv+0xda>
 8001036:	ea41 010c 	orr.w	r1, r1, ip
 800103a:	e795      	b.n	8000f68 <__aeabi_fdiv+0x18>
 800103c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001040:	ea92 0f0c 	teq	r2, ip
 8001044:	d108      	bne.n	8001058 <__aeabi_fdiv+0x108>
 8001046:	0242      	lsls	r2, r0, #9
 8001048:	f47f af7d 	bne.w	8000f46 <__aeabi_fmul+0x15e>
 800104c:	ea93 0f0c 	teq	r3, ip
 8001050:	f47f af70 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 8001054:	4608      	mov	r0, r1
 8001056:	e776      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001058:	ea93 0f0c 	teq	r3, ip
 800105c:	d104      	bne.n	8001068 <__aeabi_fdiv+0x118>
 800105e:	024b      	lsls	r3, r1, #9
 8001060:	f43f af4c 	beq.w	8000efc <__aeabi_fmul+0x114>
 8001064:	4608      	mov	r0, r1
 8001066:	e76e      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001068:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800106c:	bf18      	it	ne
 800106e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001072:	d1ca      	bne.n	800100a <__aeabi_fdiv+0xba>
 8001074:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001078:	f47f af5c 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 800107c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001080:	f47f af3c 	bne.w	8000efc <__aeabi_fmul+0x114>
 8001084:	e75f      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001086:	bf00      	nop

08001088 <__aeabi_f2iz>:
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001090:	d30f      	bcc.n	80010b2 <__aeabi_f2iz+0x2a>
 8001092:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001096:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800109a:	d90d      	bls.n	80010b8 <__aeabi_f2iz+0x30>
 800109c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ac:	bf18      	it	ne
 80010ae:	4240      	negne	r0, r0
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010bc:	d101      	bne.n	80010c2 <__aeabi_f2iz+0x3a>
 80010be:	0242      	lsls	r2, r0, #9
 80010c0:	d105      	bne.n	80010ce <__aeabi_f2iz+0x46>
 80010c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010c6:	bf08      	it	eq
 80010c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr

080010d4 <__aeabi_f2uiz>:
 80010d4:	0042      	lsls	r2, r0, #1
 80010d6:	d20e      	bcs.n	80010f6 <__aeabi_f2uiz+0x22>
 80010d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010dc:	d30b      	bcc.n	80010f6 <__aeabi_f2uiz+0x22>
 80010de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e6:	d409      	bmi.n	80010fc <__aeabi_f2uiz+0x28>
 80010e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2uiz+0x32>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d102      	bne.n	800110c <__aeabi_f2uiz+0x38>
 8001106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110a:	4770      	bx	lr
 800110c:	f04f 0000 	mov.w	r0, #0
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <__aeabi_uldivmod>:
 8001114:	b953      	cbnz	r3, 800112c <__aeabi_uldivmod+0x18>
 8001116:	b94a      	cbnz	r2, 800112c <__aeabi_uldivmod+0x18>
 8001118:	2900      	cmp	r1, #0
 800111a:	bf08      	it	eq
 800111c:	2800      	cmpeq	r0, #0
 800111e:	bf1c      	itt	ne
 8001120:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001124:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001128:	f000 b970 	b.w	800140c <__aeabi_idiv0>
 800112c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001134:	f000 f806 	bl	8001144 <__udivmoddi4>
 8001138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr

08001144 <__udivmoddi4>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	9e08      	ldr	r6, [sp, #32]
 800114a:	460d      	mov	r5, r1
 800114c:	4604      	mov	r4, r0
 800114e:	460f      	mov	r7, r1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14a      	bne.n	80011ea <__udivmoddi4+0xa6>
 8001154:	428a      	cmp	r2, r1
 8001156:	4694      	mov	ip, r2
 8001158:	d965      	bls.n	8001226 <__udivmoddi4+0xe2>
 800115a:	fab2 f382 	clz	r3, r2
 800115e:	b143      	cbz	r3, 8001172 <__udivmoddi4+0x2e>
 8001160:	fa02 fc03 	lsl.w	ip, r2, r3
 8001164:	f1c3 0220 	rsb	r2, r3, #32
 8001168:	409f      	lsls	r7, r3
 800116a:	fa20 f202 	lsr.w	r2, r0, r2
 800116e:	4317      	orrs	r7, r2
 8001170:	409c      	lsls	r4, r3
 8001172:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001176:	fa1f f58c 	uxth.w	r5, ip
 800117a:	fbb7 f1fe 	udiv	r1, r7, lr
 800117e:	0c22      	lsrs	r2, r4, #16
 8001180:	fb0e 7711 	mls	r7, lr, r1, r7
 8001184:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001188:	fb01 f005 	mul.w	r0, r1, r5
 800118c:	4290      	cmp	r0, r2
 800118e:	d90a      	bls.n	80011a6 <__udivmoddi4+0x62>
 8001190:	eb1c 0202 	adds.w	r2, ip, r2
 8001194:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001198:	f080 811b 	bcs.w	80013d2 <__udivmoddi4+0x28e>
 800119c:	4290      	cmp	r0, r2
 800119e:	f240 8118 	bls.w	80013d2 <__udivmoddi4+0x28e>
 80011a2:	3902      	subs	r1, #2
 80011a4:	4462      	add	r2, ip
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	b2a4      	uxth	r4, r4
 80011aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80011ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80011b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011b6:	fb00 f505 	mul.w	r5, r0, r5
 80011ba:	42a5      	cmp	r5, r4
 80011bc:	d90a      	bls.n	80011d4 <__udivmoddi4+0x90>
 80011be:	eb1c 0404 	adds.w	r4, ip, r4
 80011c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011c6:	f080 8106 	bcs.w	80013d6 <__udivmoddi4+0x292>
 80011ca:	42a5      	cmp	r5, r4
 80011cc:	f240 8103 	bls.w	80013d6 <__udivmoddi4+0x292>
 80011d0:	4464      	add	r4, ip
 80011d2:	3802      	subs	r0, #2
 80011d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80011d8:	1b64      	subs	r4, r4, r5
 80011da:	2100      	movs	r1, #0
 80011dc:	b11e      	cbz	r6, 80011e6 <__udivmoddi4+0xa2>
 80011de:	40dc      	lsrs	r4, r3
 80011e0:	2300      	movs	r3, #0
 80011e2:	e9c6 4300 	strd	r4, r3, [r6]
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d908      	bls.n	8001200 <__udivmoddi4+0xbc>
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	f000 80ec 	beq.w	80013cc <__udivmoddi4+0x288>
 80011f4:	2100      	movs	r1, #0
 80011f6:	e9c6 0500 	strd	r0, r5, [r6]
 80011fa:	4608      	mov	r0, r1
 80011fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001200:	fab3 f183 	clz	r1, r3
 8001204:	2900      	cmp	r1, #0
 8001206:	d149      	bne.n	800129c <__udivmoddi4+0x158>
 8001208:	42ab      	cmp	r3, r5
 800120a:	d302      	bcc.n	8001212 <__udivmoddi4+0xce>
 800120c:	4282      	cmp	r2, r0
 800120e:	f200 80f7 	bhi.w	8001400 <__udivmoddi4+0x2bc>
 8001212:	1a84      	subs	r4, r0, r2
 8001214:	eb65 0203 	sbc.w	r2, r5, r3
 8001218:	2001      	movs	r0, #1
 800121a:	4617      	mov	r7, r2
 800121c:	2e00      	cmp	r6, #0
 800121e:	d0e2      	beq.n	80011e6 <__udivmoddi4+0xa2>
 8001220:	e9c6 4700 	strd	r4, r7, [r6]
 8001224:	e7df      	b.n	80011e6 <__udivmoddi4+0xa2>
 8001226:	b902      	cbnz	r2, 800122a <__udivmoddi4+0xe6>
 8001228:	deff      	udf	#255	; 0xff
 800122a:	fab2 f382 	clz	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 808f 	bne.w	8001352 <__udivmoddi4+0x20e>
 8001234:	1a8a      	subs	r2, r1, r2
 8001236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800123a:	fa1f fe8c 	uxth.w	lr, ip
 800123e:	2101      	movs	r1, #1
 8001240:	fbb2 f5f7 	udiv	r5, r2, r7
 8001244:	fb07 2015 	mls	r0, r7, r5, r2
 8001248:	0c22      	lsrs	r2, r4, #16
 800124a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800124e:	fb0e f005 	mul.w	r0, lr, r5
 8001252:	4290      	cmp	r0, r2
 8001254:	d908      	bls.n	8001268 <__udivmoddi4+0x124>
 8001256:	eb1c 0202 	adds.w	r2, ip, r2
 800125a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800125e:	d202      	bcs.n	8001266 <__udivmoddi4+0x122>
 8001260:	4290      	cmp	r0, r2
 8001262:	f200 80ca 	bhi.w	80013fa <__udivmoddi4+0x2b6>
 8001266:	4645      	mov	r5, r8
 8001268:	1a12      	subs	r2, r2, r0
 800126a:	b2a4      	uxth	r4, r4
 800126c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001270:	fb07 2210 	mls	r2, r7, r0, r2
 8001274:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001278:	fb0e fe00 	mul.w	lr, lr, r0
 800127c:	45a6      	cmp	lr, r4
 800127e:	d908      	bls.n	8001292 <__udivmoddi4+0x14e>
 8001280:	eb1c 0404 	adds.w	r4, ip, r4
 8001284:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001288:	d202      	bcs.n	8001290 <__udivmoddi4+0x14c>
 800128a:	45a6      	cmp	lr, r4
 800128c:	f200 80ba 	bhi.w	8001404 <__udivmoddi4+0x2c0>
 8001290:	4610      	mov	r0, r2
 8001292:	eba4 040e 	sub.w	r4, r4, lr
 8001296:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800129a:	e79f      	b.n	80011dc <__udivmoddi4+0x98>
 800129c:	f1c1 0720 	rsb	r7, r1, #32
 80012a0:	408b      	lsls	r3, r1
 80012a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012aa:	fa05 f401 	lsl.w	r4, r5, r1
 80012ae:	fa20 f307 	lsr.w	r3, r0, r7
 80012b2:	40fd      	lsrs	r5, r7
 80012b4:	4323      	orrs	r3, r4
 80012b6:	fa00 f901 	lsl.w	r9, r0, r1
 80012ba:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80012be:	fa1f fe8c 	uxth.w	lr, ip
 80012c2:	fbb5 f8f0 	udiv	r8, r5, r0
 80012c6:	0c1c      	lsrs	r4, r3, #16
 80012c8:	fb00 5518 	mls	r5, r0, r8, r5
 80012cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d0:	fb08 f50e 	mul.w	r5, r8, lr
 80012d4:	42a5      	cmp	r5, r4
 80012d6:	fa02 f201 	lsl.w	r2, r2, r1
 80012da:	d90b      	bls.n	80012f4 <__udivmoddi4+0x1b0>
 80012dc:	eb1c 0404 	adds.w	r4, ip, r4
 80012e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80012e4:	f080 8087 	bcs.w	80013f6 <__udivmoddi4+0x2b2>
 80012e8:	42a5      	cmp	r5, r4
 80012ea:	f240 8084 	bls.w	80013f6 <__udivmoddi4+0x2b2>
 80012ee:	f1a8 0802 	sub.w	r8, r8, #2
 80012f2:	4464      	add	r4, ip
 80012f4:	1b64      	subs	r4, r4, r5
 80012f6:	b29d      	uxth	r5, r3
 80012f8:	fbb4 f3f0 	udiv	r3, r4, r0
 80012fc:	fb00 4413 	mls	r4, r0, r3, r4
 8001300:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001304:	fb03 fe0e 	mul.w	lr, r3, lr
 8001308:	45a6      	cmp	lr, r4
 800130a:	d908      	bls.n	800131e <__udivmoddi4+0x1da>
 800130c:	eb1c 0404 	adds.w	r4, ip, r4
 8001310:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8001314:	d26b      	bcs.n	80013ee <__udivmoddi4+0x2aa>
 8001316:	45a6      	cmp	lr, r4
 8001318:	d969      	bls.n	80013ee <__udivmoddi4+0x2aa>
 800131a:	3b02      	subs	r3, #2
 800131c:	4464      	add	r4, ip
 800131e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001322:	fba0 8302 	umull	r8, r3, r0, r2
 8001326:	eba4 040e 	sub.w	r4, r4, lr
 800132a:	429c      	cmp	r4, r3
 800132c:	46c6      	mov	lr, r8
 800132e:	461d      	mov	r5, r3
 8001330:	d355      	bcc.n	80013de <__udivmoddi4+0x29a>
 8001332:	d052      	beq.n	80013da <__udivmoddi4+0x296>
 8001334:	b156      	cbz	r6, 800134c <__udivmoddi4+0x208>
 8001336:	ebb9 030e 	subs.w	r3, r9, lr
 800133a:	eb64 0405 	sbc.w	r4, r4, r5
 800133e:	fa04 f707 	lsl.w	r7, r4, r7
 8001342:	40cb      	lsrs	r3, r1
 8001344:	40cc      	lsrs	r4, r1
 8001346:	431f      	orrs	r7, r3
 8001348:	e9c6 7400 	strd	r7, r4, [r6]
 800134c:	2100      	movs	r1, #0
 800134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001352:	f1c3 0120 	rsb	r1, r3, #32
 8001356:	fa02 fc03 	lsl.w	ip, r2, r3
 800135a:	fa20 f201 	lsr.w	r2, r0, r1
 800135e:	fa25 f101 	lsr.w	r1, r5, r1
 8001362:	409d      	lsls	r5, r3
 8001364:	432a      	orrs	r2, r5
 8001366:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136a:	fa1f fe8c 	uxth.w	lr, ip
 800136e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001372:	fb07 1510 	mls	r5, r7, r0, r1
 8001376:	0c11      	lsrs	r1, r2, #16
 8001378:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800137c:	fb00 f50e 	mul.w	r5, r0, lr
 8001380:	428d      	cmp	r5, r1
 8001382:	fa04 f403 	lsl.w	r4, r4, r3
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x256>
 8001388:	eb1c 0101 	adds.w	r1, ip, r1
 800138c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001390:	d22f      	bcs.n	80013f2 <__udivmoddi4+0x2ae>
 8001392:	428d      	cmp	r5, r1
 8001394:	d92d      	bls.n	80013f2 <__udivmoddi4+0x2ae>
 8001396:	3802      	subs	r0, #2
 8001398:	4461      	add	r1, ip
 800139a:	1b49      	subs	r1, r1, r5
 800139c:	b292      	uxth	r2, r2
 800139e:	fbb1 f5f7 	udiv	r5, r1, r7
 80013a2:	fb07 1115 	mls	r1, r7, r5, r1
 80013a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013aa:	fb05 f10e 	mul.w	r1, r5, lr
 80013ae:	4291      	cmp	r1, r2
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x280>
 80013b2:	eb1c 0202 	adds.w	r2, ip, r2
 80013b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80013ba:	d216      	bcs.n	80013ea <__udivmoddi4+0x2a6>
 80013bc:	4291      	cmp	r1, r2
 80013be:	d914      	bls.n	80013ea <__udivmoddi4+0x2a6>
 80013c0:	3d02      	subs	r5, #2
 80013c2:	4462      	add	r2, ip
 80013c4:	1a52      	subs	r2, r2, r1
 80013c6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80013ca:	e739      	b.n	8001240 <__udivmoddi4+0xfc>
 80013cc:	4631      	mov	r1, r6
 80013ce:	4630      	mov	r0, r6
 80013d0:	e709      	b.n	80011e6 <__udivmoddi4+0xa2>
 80013d2:	4639      	mov	r1, r7
 80013d4:	e6e7      	b.n	80011a6 <__udivmoddi4+0x62>
 80013d6:	4610      	mov	r0, r2
 80013d8:	e6fc      	b.n	80011d4 <__udivmoddi4+0x90>
 80013da:	45c1      	cmp	r9, r8
 80013dc:	d2aa      	bcs.n	8001334 <__udivmoddi4+0x1f0>
 80013de:	ebb8 0e02 	subs.w	lr, r8, r2
 80013e2:	eb63 050c 	sbc.w	r5, r3, ip
 80013e6:	3801      	subs	r0, #1
 80013e8:	e7a4      	b.n	8001334 <__udivmoddi4+0x1f0>
 80013ea:	4645      	mov	r5, r8
 80013ec:	e7ea      	b.n	80013c4 <__udivmoddi4+0x280>
 80013ee:	4603      	mov	r3, r0
 80013f0:	e795      	b.n	800131e <__udivmoddi4+0x1da>
 80013f2:	4640      	mov	r0, r8
 80013f4:	e7d1      	b.n	800139a <__udivmoddi4+0x256>
 80013f6:	46d0      	mov	r8, sl
 80013f8:	e77c      	b.n	80012f4 <__udivmoddi4+0x1b0>
 80013fa:	3d02      	subs	r5, #2
 80013fc:	4462      	add	r2, ip
 80013fe:	e733      	b.n	8001268 <__udivmoddi4+0x124>
 8001400:	4608      	mov	r0, r1
 8001402:	e70b      	b.n	800121c <__udivmoddi4+0xd8>
 8001404:	4464      	add	r4, ip
 8001406:	3802      	subs	r0, #2
 8001408:	e743      	b.n	8001292 <__udivmoddi4+0x14e>
 800140a:	bf00      	nop

0800140c <__aeabi_idiv0>:
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800144e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001464:	68fb      	ldr	r3, [r7, #12]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	43db      	mvns	r3, r3
 8001482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001486:	4013      	ands	r3, r2
 8001488:	660b      	str	r3, [r1, #96]	; 0x60
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_ADC_Init+0x94>)
 800149a:	4a24      	ldr	r2, [pc, #144]	; (800152c <MX_ADC_Init+0x98>)
 800149c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_ADC_Init+0x94>)
 80014a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014a4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_ADC_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_ADC_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_ADC_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_ADC_Init+0x94>)
 80014ba:	2204      	movs	r2, #4
 80014bc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_ADC_Init+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_ADC_Init+0x94>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_ADC_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_ADC_Init+0x94>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_ADC_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_ADC_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_ADC_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_ADC_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_ADC_Init+0x94>)
 80014f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_ADC_Init+0x94>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_ADC_Init+0x94>)
 8001502:	2207      	movs	r2, #7
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_ADC_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_ADC_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_ADC_Init+0x94>)
 8001516:	f004 fbab 	bl	8005c70 <HAL_ADC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001520:	f000 fd72 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200001b4 	.word	0x200001b4
 800152c:	40012400 	.word	0x40012400

08001530 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_ADC_MspInit+0x54>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d113      	bne.n	800157a <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001556:	f7ff ff73 	bl	8001440 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2002      	movs	r0, #2
 800155c:	f7ff ff58 	bl	8001410 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin;
 8001560:	f242 0318 	movw	r3, #8216	; 0x2018
 8001564:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <HAL_ADC_MspInit+0x58>)
 8001576:	f006 f97b 	bl	8007870 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012400 	.word	0x40012400
 8001588:	48000400 	.word	0x48000400

0800158c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_ADC_MspDeInit+0x2c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d108      	bne.n	80015b0 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800159e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a2:	f7ff ff65 	bl	8001470 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin);
 80015a6:	f242 0118 	movw	r1, #8216	; 0x2018
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <HAL_ADC_MspDeInit+0x30>)
 80015ac:	f006 fac0 	bl	8007b30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40012400 	.word	0x40012400
 80015bc:	48000400 	.word	0x48000400

080015c0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <SYS_InitMeasurement+0x14>)
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <SYS_InitMeasurement+0x18>)
 80015c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200001b4 	.word	0x200001b4
 80015d8:	40012400 	.word	0x40012400

080015dc <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <SYS_GetBatteryLevel+0x5c>)
 80015ec:	f000 f82a 	bl	8001644 <ADC_ReadChannels>
 80015f0:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	e016      	b.n	800162c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <SYS_GetBatteryLevel+0x60>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001606:	4293      	cmp	r3, r2
 8001608:	d00b      	beq.n	8001622 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <SYS_GetBatteryLevel+0x60>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	80fb      	strh	r3, [r7, #6]
 8001620:	e004      	b.n	800162c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <SYS_GetBatteryLevel+0x64>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800162c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	b4002000 	.word	0xb4002000
 800163c:	1fff75aa 	.word	0x1fff75aa
 8001640:	004c08d8 	.word	0x004c08d8

08001644 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800165c:	f7ff ff1a 	bl	8001494 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <ADC_ReadChannels+0x88>)
 8001662:	f005 f924 	bl	80068ae <HAL_ADCEx_Calibration_Start>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800166c:	f000 fccc 	bl	8002008 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4619      	mov	r1, r3
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <ADC_ReadChannels+0x88>)
 8001684:	f004 fe30 	bl	80062e8 <HAL_ADC_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800168e:	f000 fcbb 	bl	8002008 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <ADC_ReadChannels+0x88>)
 8001694:	f004 fd0c 	bl	80060b0 <HAL_ADC_Start>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800169e:	f000 fcb3 	bl	8002008 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <ADC_ReadChannels+0x88>)
 80016a8:	f004 fd7a 	bl	80061a0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <ADC_ReadChannels+0x88>)
 80016ae:	f004 fd45 	bl	800613c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <ADC_ReadChannels+0x88>)
 80016b4:	f004 fe0b 	bl	80062ce <HAL_ADC_GetValue>
 80016b8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <ADC_ReadChannels+0x88>)
 80016bc:	f004 fc6c 	bl	8005f98 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200001b4 	.word	0x200001b4

080016d0 <LL_AHB1_GRP1_EnableClock>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001704:	2004      	movs	r0, #4
 8001706:	f7ff ffe3 	bl	80016d0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff ffe0 	bl	80016d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2102      	movs	r1, #2
 8001714:	200b      	movs	r0, #11
 8001716:	f005 fa70 	bl	8006bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800171a:	200b      	movs	r0, #11
 800171c:	f005 fa87 	bl	8006c2e <HAL_NVIC_EnableIRQ>

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001730:	23ff      	movs	r3, #255	; 0xff
 8001732:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800173a:	d311      	bcc.n	8001760 <FLASH_IF_Write+0x3c>
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <FLASH_IF_Write+0x48>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	029a      	lsls	r2, r3, #10
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <FLASH_IF_Write+0x4c>)
 8001744:	4013      	ands	r3, r2
 8001746:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800174a:	3b01      	subs	r3, #1
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4293      	cmp	r3, r2
 8001750:	d306      	bcc.n	8001760 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f85a 	bl	8001810 <FLASH_IF_INT_Write>
 800175c:	4603      	mov	r3, r0
 800175e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001760:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	1fff75e0 	.word	0x1fff75e0
 8001770:	03fffc00 	.word	0x03fffc00

08001774 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001780:	23ff      	movs	r3, #255	; 0xff
 8001782:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800178a:	d311      	bcc.n	80017b0 <FLASH_IF_Read+0x3c>
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <FLASH_IF_Read+0x48>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	029a      	lsls	r2, r3, #10
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <FLASH_IF_Read+0x4c>)
 8001794:	4013      	ands	r3, r2
 8001796:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800179a:	3b01      	subs	r3, #1
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d306      	bcc.n	80017b0 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f93a 	bl	8001a20 <FLASH_IF_INT_Read>
 80017ac:	4603      	mov	r3, r0
 80017ae:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80017b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	1fff75e0 	.word	0x1fff75e0
 80017c0:	03fffc00 	.word	0x03fffc00

080017c4 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017ce:	23ff      	movs	r3, #255	; 0xff
 80017d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017d8:	d310      	bcc.n	80017fc <FLASH_IF_Erase+0x38>
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <FLASH_IF_Erase+0x44>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	029a      	lsls	r2, r3, #10
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <FLASH_IF_Erase+0x48>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017e8:	3b01      	subs	r3, #1
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d305      	bcc.n	80017fc <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f932 	bl	8001a5c <FLASH_IF_INT_Erase>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	1fff75e0 	.word	0x1fff75e0
 800180c:	03fffc00 	.word	0x03fffc00

08001810 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b090      	sub	sp, #64	; 0x40
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00c      	beq.n	800184e <FLASH_IF_INT_Write+0x3e>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <FLASH_IF_INT_Write+0x3e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 800184e:	f06f 0305 	mvn.w	r3, #5
 8001852:	e0da      	b.n	8001a0a <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001854:	f000 f992 	bl	8001b7c <FLASH_IF_INT_Clear_Error>
 8001858:	4603      	mov	r3, r0
 800185a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 800185e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80cf 	bne.w	8001a06 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001868:	f005 fe2c 	bl	80074c4 <HAL_FLASH_Unlock>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 80c6 	bne.w	8001a00 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001876:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800187a:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <FLASH_IF_INT_Write+0x204>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0299      	lsls	r1, r3, #10
 8001880:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <FLASH_IF_INT_Write+0x208>)
 8001882:	400b      	ands	r3, r1
 8001884:	fbb2 f1f3 	udiv	r1, r2, r3
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	0adb      	lsrs	r3, r3, #11
 8001890:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800189c:	3b01      	subs	r3, #1
 800189e:	4a5d      	ldr	r2, [pc, #372]	; (8001a14 <FLASH_IF_INT_Write+0x204>)
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	0291      	lsls	r1, r2, #10
 80018a4:	4a5c      	ldr	r2, [pc, #368]	; (8001a18 <FLASH_IF_INT_Write+0x208>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80018ac:	fb01 f202 	mul.w	r2, r1, r2
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	0ada      	lsrs	r2, r3, #11
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d905      	bls.n	80018ce <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80018c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	e089      	b.n	80019e8 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018da:	02db      	lsls	r3, r3, #11
 80018dc:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80018de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f925 	bl	8001b30 <FLASH_IF_INT_IsEmpty>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d031      	beq.n	8001950 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80018f4:	23fa      	movs	r3, #250	; 0xfa
 80018f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80018fa:	e07e      	b.n	80019fa <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f88a 	bl	8001a20 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 800190c:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001916:	4413      	add	r3, r2
 8001918:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800191a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191c:	b292      	uxth	r2, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f01d face 	bl	801eec0 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f896 	bl	8001a5c <FLASH_IF_INT_Erase>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001936:	23fe      	movs	r3, #254	; 0xfe
 8001938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 800193c:	e05d      	b.n	80019fa <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e005      	b.n	800195c <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001956:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195a:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001960:	e026      	b.n	80019b0 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196e:	2001      	movs	r0, #1
 8001970:	f005 fd64 	bl	800743c <HAL_FLASH_Program>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d113      	bne.n	80019a2 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001980:	6a3a      	ldr	r2, [r7, #32]
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	4413      	add	r3, r2
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	4299      	cmp	r1, r3
 800198c:	bf08      	it	eq
 800198e:	4290      	cmpeq	r0, r2
 8001990:	d003      	beq.n	800199a <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001992:	23fc      	movs	r3, #252	; 0xfc
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001998:	e00e      	b.n	80019b8 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3308      	adds	r3, #8
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e003      	b.n	80019aa <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80019a2:	23fc      	movs	r3, #252	; 0xfc
 80019a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80019a8:	e006      	b.n	80019b8 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	3308      	adds	r3, #8
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3d4      	bcc.n	8001962 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80019b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11b      	bne.n	80019f8 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80019c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	4413      	add	r3, r2
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80019c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	4413      	add	r3, r2
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019da:	bf28      	it	cs
 80019dc:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	3301      	adds	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	4413      	add	r3, r2
 80019ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f4ff af6f 	bcc.w	80018d4 <FLASH_IF_INT_Write+0xc4>
 80019f6:	e000      	b.n	80019fa <FLASH_IF_INT_Write+0x1ea>
          break;
 80019f8:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80019fa:	f005 fd85 	bl	8007508 <HAL_FLASH_Lock>
 80019fe:	e002      	b.n	8001a06 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a00:	23fb      	movs	r3, #251	; 0xfb
 8001a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001a06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3740      	adds	r7, #64	; 0x40
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	1fff75e0 	.word	0x1fff75e0
 8001a18:	03fffc00 	.word	0x03fffc00
 8001a1c:	20000218 	.word	0x20000218

08001a20 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <FLASH_IF_INT_Read+0x1c>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a3c:	f06f 0305 	mvn.w	r3, #5
 8001a40:	e008      	b.n	8001a54 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f01d fa38 	bl	801eec0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a7c:	f06f 0305 	mvn.w	r3, #5
 8001a80:	e04e      	b.n	8001b20 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001a82:	f000 f87b 	bl	8001b7c <FLASH_IF_INT_Clear_Error>
 8001a86:	4603      	mov	r3, r0
 8001a88:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d144      	bne.n	8001b1c <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001a92:	f005 fd17 	bl	80074c4 <HAL_FLASH_Unlock>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d13d      	bne.n	8001b18 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <FLASH_IF_INT_Erase+0xcc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0299      	lsls	r1, r3, #10
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <FLASH_IF_INT_Erase+0xd0>)
 8001aae:	400b      	ands	r3, r1
 8001ab0:	fbb2 f1f3 	udiv	r1, r2, r3
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	0adb      	lsrs	r3, r3, #11
 8001abc:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <FLASH_IF_INT_Erase+0xcc>)
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	0291      	lsls	r1, r2, #10
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <FLASH_IF_INT_Erase+0xd0>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ad8:	fb01 f202 	mul.w	r2, r1, r2
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	0ada      	lsrs	r2, r3, #11
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001ae8:	f107 0214 	add.w	r2, r7, #20
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 fde8 	bl	80076c8 <HAL_FLASHEx_Erase>
 8001af8:	4603      	mov	r3, r0
 8001afa:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001afc:	7fbb      	ldrb	r3, [r7, #30]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001b02:	7fbb      	ldrb	r3, [r7, #30]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d101      	bne.n	8001b0c <FLASH_IF_INT_Erase+0xb0>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e001      	b.n	8001b10 <FLASH_IF_INT_Erase+0xb4>
 8001b0c:	f06f 0301 	mvn.w	r3, #1
 8001b10:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001b12:	f005 fcf9 	bl	8007508 <HAL_FLASH_Lock>
 8001b16:	e001      	b.n	8001b1c <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001b18:	23fb      	movs	r3, #251	; 0xfb
 8001b1a:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001b1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	1fff75e0 	.word	0x1fff75e0
 8001b2c:	03fffc00 	.word	0x03fffc00

08001b30 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	e011      	b.n	8001b68 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b4e:	bf08      	it	eq
 8001b50:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001b54:	d002      	beq.n	8001b5c <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
      break;
 8001b5a:	e009      	b.n	8001b70 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3308      	adds	r3, #8
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3e9      	bcc.n	8001b44 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001b70:	68fb      	ldr	r3, [r7, #12]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001b82:	23fb      	movs	r3, #251	; 0xfb
 8001b84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001b86:	f005 fc9d 	bl	80074c4 <HAL_FLASH_Unlock>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d110      	bne.n	8001bb2 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001ba2:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001ba4:	f005 fcb0 	bl	8007508 <HAL_FLASH_Lock>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	58004000 	.word	0x58004000

08001bc4 <LL_AHB2_GRP1_EnableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff ffdb 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7ff ffd8 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c14:	2004      	movs	r0, #4
 8001c16:	f7ff ffd5 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Stim_Enable_Pin|Bias_CS_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001c20:	4831      	ldr	r0, [pc, #196]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c22:	f006 f86a 	bl	8007cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Anneal_Enable_Pin|Env_Sens_Enable_Pin|Memory_CS_Pin|RF_CTRL1_Pin
 8001c26:	2200      	movs	r2, #0
 8001c28:	f240 4135 	movw	r1, #1077	; 0x435
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c30:	f006 f863 	bl	8007cfa <HAL_GPIO_WritePin>
                          |RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2120      	movs	r1, #32
 8001c38:	482b      	ldr	r0, [pc, #172]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c3a:	f006 f85e 	bl	8007cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Stim_Enable_Pin|Bias_CS_Pin;
 8001c3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4824      	ldr	r0, [pc, #144]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c56:	f005 fe0b 	bl	8007870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Anneal_Enable_Pin|Env_Sens_Enable_Pin|Memory_CS_Pin;
 8001c5a:	f240 4305 	movw	r3, #1029	; 0x405
 8001c5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f005 fdfc 	bl	8007870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4816      	ldr	r0, [pc, #88]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c8e:	f005 fdef 	bl	8007870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accel_Int_Pin;
 8001c92:	2301      	movs	r3, #1
 8001c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Accel_Int_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4811      	ldr	r0, [pc, #68]	; (8001cec <MX_GPIO_Init+0xf8>)
 8001ca6:	f005 fde3 	bl	8007870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot_Mode_Pin;
 8001caa:	2308      	movs	r3, #8
 8001cac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Boot_Mode_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbe:	f005 fdd7 	bl	8007870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001cc2:	2330      	movs	r3, #48	; 0x30
 8001cc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cda:	f005 fdc9 	bl	8007870 <HAL_GPIO_Init>

}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800

08001cf0 <LL_AHB2_GRP1_EnableClock>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <LL_APB1_GRP1_EnableClock>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d44:	68fb      	ldr	r3, [r7, #12]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <MX_I2C2_Init+0x78>)
 8001d58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <MX_I2C2_Init+0x7c>)
 8001d5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d8a:	480e      	ldr	r0, [pc, #56]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d8c:	f005 ffcc 	bl	8007d28 <HAL_I2C_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d96:	f000 f937 	bl	8002008 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d9e:	f006 fd19 	bl	80087d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001da8:	f000 f92e 	bl	8002008 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001dac:	2100      	movs	r1, #0
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001db0:	f006 fd5a 	bl	8008868 <HAL_I2CEx_ConfigDigitalFilter>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f000 f925 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000021c 	.word	0x2000021c
 8001dc8:	40005800 	.word	0x40005800
 8001dcc:	20303e5d 	.word	0x20303e5d

08001dd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b096      	sub	sp, #88	; 0x58
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2238      	movs	r2, #56	; 0x38
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f01e fbe9 	bl	80205c8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <HAL_I2C_MspInit+0xb0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d13b      	bne.n	8001e78 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e04:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f007 ffe6 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e1a:	f000 f8f5 	bl	8002008 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff ff66 	bl	8001cf0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7ff ff63 	bl	8001cf0 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e30:	2312      	movs	r3, #18
 8001e32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4a:	f005 fd11 	bl	8007870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e52:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e54:	2312      	movs	r3, #18
 8001e56:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e60:	2304      	movs	r3, #4
 8001e62:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e6c:	f005 fd00 	bl	8007870 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e70:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e74:	f7ff ff54 	bl	8001d20 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3758      	adds	r7, #88	; 0x58
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40005800 	.word	0x40005800
 8001e84:	48000400 	.word	0x48000400

08001e88 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	f023 0218 	bic.w	r2, r3, #24
 8001e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eba:	f003 fceb 	bl	8005894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebe:	f000 f83b 	bl	8001f38 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  // initialize the GPIOs this is to allow the probing of the Boot Mode pin to determine
  // if the user button was pressed during reset
  MX_GPIO_Init();
 8001ec2:	f7ff fe97 	bl	8001bf4 <MX_GPIO_Init>

  // check to see if the boot mode pin is drawn low (button pressed)
  int boot_mode = HAL_GPIO_ReadPin(Boot_Mode_GPIO_Port, Boot_Mode_Pin);
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ecc:	f005 fefe 	bl	8007ccc <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	603b      	str	r3, [r7, #0]

  //enable LoRaWAN or experiment mode as required
  bool experimentMode = false;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  //if (DEFAULT_DISBALE_LORA && boot_mode == 0) MX_LoRaWAN_Init();
  if (DEFAULT_DISBALE_LORA && boot_mode == 1) experimentMode = true;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <main+0x2e>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if (!DEFAULT_DISBALE_LORA && boot_mode == 0) experimentMode = true;
  //if (!DEFAULT_DISBALE_LORA && boot_mode == 1) MX_LoRaWAN_Init();
  MX_LoRaWAN_Init();
 8001ee2:	f00c f827 	bl	800df34 <MX_LoRaWAN_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C2_Init();
 8001ee6:	f7ff ff33 	bl	8001d50 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001eea:	f000 f9a5 	bl	8002238 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  bsp_env_sensors.init(&hi2c2);
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <main+0x74>)
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <main+0x78>)
 8001ef2:	f003 fa55 	bl	80053a0 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>
  detector.init();
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <main+0x7c>)
 8001ef8:	f001 fa22 	bl	8003340 <_ZN8Detector4initEv>
  MX_ADC_Init();
 8001efc:	f7ff faca 	bl	8001494 <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(Memory_CS_GPIO_Port, Memory_CS_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	2104      	movs	r1, #4
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f005 fef7 	bl	8007cfa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f12:	4808      	ldr	r0, [pc, #32]	; (8001f34 <main+0x80>)
 8001f14:	f005 fef1 	bl	8007cfa <HAL_GPIO_WritePin>
  if (experimentMode) enterExperimentMode();
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <main+0x6e>
 8001f1e:	f003 fbc1 	bl	80056a4 <_Z19enterExperimentModev>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001f22:	f00c f80f 	bl	800df44 <MX_LoRaWAN_Process>
 8001f26:	e7fc      	b.n	8001f22 <main+0x6e>
 8001f28:	2000021c 	.word	0x2000021c
 8001f2c:	20000270 	.word	0x20000270
 8001f30:	20000380 	.word	0x20000380
 8001f34:	48000400 	.word	0x48000400

08001f38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09a      	sub	sp, #104	; 0x68
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 0320 	add.w	r3, r7, #32
 8001f42:	2248      	movs	r2, #72	; 0x48
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f01e fb3e 	bl	80205c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f5e:	f006 fccf 	bl	8008900 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff ff90 	bl	8001e88 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <_Z18SystemClock_Configv+0xcc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <_Z18SystemClock_Configv+0xcc>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <_Z18SystemClock_Configv+0xcc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001f84:	2326      	movs	r3, #38	; 0x26
 8001f86:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f88:	2381      	movs	r3, #129	; 0x81
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f92:	2301      	movs	r3, #1
 8001f94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f96:	2340      	movs	r3, #64	; 0x40
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001f9e:	23b0      	movs	r3, #176	; 0xb0
 8001fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	4618      	mov	r0, r3
 8001fac:	f006 fff4 	bl	8008f98 <HAL_RCC_OscConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001fc0:	f000 f822 	bl	8002008 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001fc4:	234f      	movs	r3, #79	; 0x4f
 8001fc6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 fb5a 	bl	800969c <HAL_RCC_ClockConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001ff8:	f000 f806 	bl	8002008 <Error_Handler>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3768      	adds	r7, #104	; 0x68
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	58000400 	.word	0x58000400

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	APP_LOG(TS_ON, VLEVEL_M, "HAL error");
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <Error_Handler+0x18>)
 8002012:	2201      	movs	r2, #1
 8002014:	2100      	movs	r1, #0
 8002016:	2002      	movs	r0, #2
 8002018:	f01d ffbe 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
 800201c:	e7f8      	b.n	8002010 <Error_Handler+0x8>
 800201e:	bf00      	nop
 8002020:	08020ee4 	.word	0x08020ee4

08002024 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10a      	bne.n	800204a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203a:	4293      	cmp	r3, r2
 800203c:	d105      	bne.n	800204a <_Z41__static_initialization_and_destruction_0ii+0x26>
EnvionmentSensors bsp_env_sensors;
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002040:	f003 f99b 	bl	800537a <_ZN17EnvionmentSensorsC1Ev>
Detector detector;
 8002044:	4804      	ldr	r0, [pc, #16]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002046:	f001 f966 	bl	8003316 <_ZN8DetectorC1Ev>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000270 	.word	0x20000270
 8002058:	20000380 	.word	0x20000380

0800205c <_GLOBAL__sub_I_bsp_env_sensors>:
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
 8002060:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002064:	2001      	movs	r0, #1
 8002066:	f7ff ffdd 	bl	8002024 <_Z41__static_initialization_and_destruction_0ii>
 800206a:	bd80      	pop	{r7, pc}

0800206c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <LL_APB1_GRP1_EnableClock>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800209a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	222c      	movs	r2, #44	; 0x2c
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f01e fa7d 	bl	80205c8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <MX_RTC_Init+0x9c>)
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <MX_RTC_Init+0xa0>)
 80020d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <MX_RTC_Init+0x9c>)
 80020d6:	221f      	movs	r2, #31
 80020d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <MX_RTC_Init+0x9c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_RTC_Init+0x9c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_RTC_Init+0x9c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_RTC_Init+0x9c>)
 80020ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_RTC_Init+0x9c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_RTC_Init+0x9c>)
 80020fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002102:	4815      	ldr	r0, [pc, #84]	; (8002158 <MX_RTC_Init+0x9c>)
 8002104:	f007 ff86 	bl	800a014 <HAL_RTC_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800210e:	f7ff ff7b 	bl	8002008 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002112:	4811      	ldr	r0, [pc, #68]	; (8002158 <MX_RTC_Init+0x9c>)
 8002114:	f008 fa7c 	bl	800a610 <HAL_RTCEx_SetSSRU_IT>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800211e:	f7ff ff73 	bl	8002008 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800212e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002132:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_RTC_Init+0x9c>)
 8002142:	f007 ffe9 	bl	800a118 <HAL_RTC_SetAlarm_IT>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800214c:	f7ff ff5c 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200003cc 	.word	0x200003cc
 800215c:	40002800 	.word	0x40002800

08002160 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b090      	sub	sp, #64	; 0x40
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	2238      	movs	r2, #56	; 0x38
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f01e fa29 	bl	80205c8 <memset>
  if(rtcHandle->Instance==RTC)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_RTC_MspInit+0x74>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d125      	bne.n	80021cc <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002184:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4618      	mov	r0, r3
 8002192:	f007 fe25 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800219c:	f7ff ff34 	bl	8002008 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a0:	f7ff ff64 	bl	800206c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021a8:	f7ff ff70 	bl	800208c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2002      	movs	r0, #2
 80021b2:	f004 fd22 	bl	8006bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80021b6:	2002      	movs	r0, #2
 80021b8:	f004 fd39 	bl	8006c2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	202a      	movs	r0, #42	; 0x2a
 80021c2:	f004 fd1a 	bl	8006bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021c6:	202a      	movs	r0, #42	; 0x2a
 80021c8:	f004 fd31 	bl	8006c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021cc:	bf00      	nop
 80021ce:	3740      	adds	r7, #64	; 0x40
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40002800 	.word	0x40002800

080021d8 <LL_AHB2_GRP1_EnableClock>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <LL_APB1_GRP1_EnableClock>:
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4313      	orrs	r3, r2
 800221e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800222c:	68fb      	ldr	r3, [r7, #12]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_SPI2_Init+0x74>)
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <MX_SPI2_Init+0x78>)
 8002240:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_SPI2_Init+0x74>)
 8002244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002248:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_SPI2_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <MX_SPI2_Init+0x74>)
 8002252:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002256:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <MX_SPI2_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <MX_SPI2_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_SPI2_Init+0x74>)
 8002266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_SPI2_Init+0x74>)
 800226e:	2218      	movs	r2, #24
 8002270:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_SPI2_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_SPI2_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_SPI2_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_SPI2_Init+0x74>)
 8002286:	2207      	movs	r2, #7
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_SPI2_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_SPI2_Init+0x74>)
 8002292:	2200      	movs	r2, #0
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_SPI2_Init+0x74>)
 8002298:	f008 fa48 	bl	800a72c <HAL_SPI_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80022a2:	f7ff feb1 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000404 	.word	0x20000404
 80022b0:	40003800 	.word	0x40003800

080022b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b096      	sub	sp, #88	; 0x58
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	2238      	movs	r2, #56	; 0x38
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f01e f977 	bl	80205c8 <memset>
  if(spiHandle->Instance==SPI2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_SPI_MspInit+0xd8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d14e      	bne.n	8002382 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80022e4:	2310      	movs	r3, #16
 80022e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80022e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ec:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4618      	mov	r0, r3
 80022f4:	f007 fd74 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022fe:	f7ff fe83 	bl	8002008 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002302:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002306:	f7ff ff7f 	bl	8002208 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	2002      	movs	r0, #2
 800230c:	f7ff ff64 	bl	80021d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff ff61 	bl	80021d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2004      	movs	r0, #4
 8002318:	f7ff ff5e 	bl	80021d8 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800231c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800232e:	2305      	movs	r3, #5
 8002330:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002336:	4619      	mov	r1, r3
 8002338:	4815      	ldr	r0, [pc, #84]	; (8002390 <HAL_SPI_MspInit+0xdc>)
 800233a:	f005 fa99 	bl	8007870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800233e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002342:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002350:	2305      	movs	r3, #5
 8002352:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002358:	4619      	mov	r1, r3
 800235a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235e:	f005 fa87 	bl	8007870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002362:	2302      	movs	r3, #2
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002372:	2303      	movs	r3, #3
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002376:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_SPI_MspInit+0xe0>)
 800237e:	f005 fa77 	bl	8007870 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002382:	bf00      	nop
 8002384:	3758      	adds	r7, #88	; 0x58
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40003800 	.word	0x40003800
 8002390:	48000400 	.word	0x48000400
 8002394:	48000800 	.word	0x48000800

08002398 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800239e:	2201      	movs	r2, #1
 80023a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	58000400 	.word	0x58000400

080023b0 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80023cc:	f003 fa82 	bl	80058d4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80023d0:	f7ff ffe2 	bl	8002398 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f006 fb25 	bl	8008a24 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80023e2:	f003 fa85 	bl	80058f0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80023e6:	f000 ff17 	bl	8003218 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */
  
  /* USER CODE END ExitStopMode_2 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}

080023ee <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80023f2:	f003 fa6f 	bl	80058d4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023f6:	2101      	movs	r1, #1
 80023f8:	2000      	movs	r0, #0
 80023fa:	f006 fa8f 	bl	800891c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002406:	f003 fa73 	bl	80058f0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241e:	e7fe      	b.n	800241e <NMI_Handler+0x4>

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <HardFault_Handler+0x4>

08002426 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <BusFault_Handler+0x4>

08002432 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <UsageFault_Handler+0x4>

08002438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800246e:	f008 f90b 	bl	800a688 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003cc 	.word	0x200003cc

0800247c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Channel1_IRQHandler+0x10>)
 8002482:	f004 fe6b 	bl	800715c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000518 	.word	0x20000518

08002490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART1_IRQHandler+0x10>)
 8002496:	f009 fc53 	bl	800bd40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000484 	.word	0x20000484

080024a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <RTC_Alarm_IRQHandler+0x10>)
 80024aa:	f007 ff9d 	bl	800a3e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003cc 	.word	0x200003cc

080024b8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <SUBGHZ_Radio_IRQHandler+0x10>)
 80024be:	f009 f819 	bl	800b4f4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000468 	.word	0x20000468

080024cc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024f0:	68fb      	ldr	r3, [r7, #12]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_SUBGHZ_Init+0x20>)
 8002502:	2208      	movs	r2, #8
 8002504:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_SUBGHZ_Init+0x20>)
 8002508:	f008 fd72 	bl	800aff0 <HAL_SUBGHZ_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002512:	f7ff fd79 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000468 	.word	0x20000468

08002520 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002528:	2001      	movs	r0, #1
 800252a:	f7ff ffcf 	bl	80024cc <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2032      	movs	r0, #50	; 0x32
 8002534:	f004 fb61 	bl	8006bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002538:	2032      	movs	r0, #50	; 0x32
 800253a:	f004 fb78 	bl	8006c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002570:	4b02      	ldr	r3, [pc, #8]	; (800257c <LL_FLASH_GetUDN+0x10>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	1fff7580 	.word	0x1fff7580

08002580 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <LL_FLASH_GetDeviceID+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	1fff7584 	.word	0x1fff7584

08002598 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <LL_FLASH_GetSTCompanyID+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0a1b      	lsrs	r3, r3, #8
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	1fff7584 	.word	0x1fff7584

080025b0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff ffc6 	bl	8002546 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80025ba:	f01d fa2f 	bl	801fa1c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <SystemApp_Init+0x48>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80025c4:	f000 f988 	bl	80028d8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80025c8:	f01d fcb8 	bl	801ff3c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80025cc:	480b      	ldr	r0, [pc, #44]	; (80025fc <SystemApp_Init+0x4c>)
 80025ce:	f01d fd63 	bl	8020098 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <SystemApp_Init+0x50>)
 80025d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025d8:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80025da:	2003      	movs	r0, #3
 80025dc:	f01d fd6a 	bl	80200b4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80025e0:	f7fe ffee 	bl	80015c0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80025e4:	f000 f9b0 	bl	8002948 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80025e8:	f01c fbc4 	bl	801ed74 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80025ec:	2101      	movs	r1, #1
 80025ee:	2001      	movs	r0, #1
 80025f0:	f01c fc00 	bl	801edf4 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000474 	.word	0x20000474
 80025fc:	080027d1 	.word	0x080027d1
 8002600:	58004000 	.word	0x58004000

08002604 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002608:	f01c fc24 	bl	801ee54 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800261a:	f7fe ffdf 	bl	80015dc <SYS_GetBatteryLevel>
 800261e:	4603      	mov	r3, r0
 8002620:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002622:	88bb      	ldrh	r3, [r7, #4]
 8002624:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002628:	4293      	cmp	r3, r2
 800262a:	d902      	bls.n	8002632 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 800262c:	23fe      	movs	r3, #254	; 0xfe
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	e014      	b.n	800265c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002632:	88bb      	ldrh	r3, [r7, #4]
 8002634:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002638:	d202      	bcs.n	8002640 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	e00d      	b.n	800265c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002640:	88bb      	ldrh	r3, [r7, #4]
 8002642:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002646:	461a      	mov	r2, r3
 8002648:	4613      	mov	r3, r2
 800264a:	01db      	lsls	r3, r3, #7
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	461a      	mov	r2, r3
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <GetBatteryLevel+0x58>)
 8002654:	fba3 2302 	umull	r2, r3, r3, r2
 8002658:	09db      	lsrs	r3, r3, #7
 800265a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800265c:	79fb      	ldrb	r3, [r7, #7]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	1b4e81b5 	.word	0x1b4e81b5

0800266c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f93b 	bl	80028f4 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd01 	bl	8001088 <__aeabi_f2iz>
 8002686:	4603      	mov	r3, r0
 8002688:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800268a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002696:	b590      	push	{r4, r7, lr}
 8002698:	b087      	sub	sp, #28
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80026a2:	f7ff ff63 	bl	800256c <LL_FLASH_GetUDN>
 80026a6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ae:	d138      	bne.n	8002722 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80026b0:	f003 f92c 	bl	800590c <HAL_GetUIDw0>
 80026b4:	4604      	mov	r4, r0
 80026b6:	f003 f93d 	bl	8005934 <HAL_GetUIDw2>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4423      	add	r3, r4
 80026be:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80026c0:	f003 f92e 	bl	8005920 <HAL_GetUIDw1>
 80026c4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	0e1a      	lsrs	r2, r3, #24
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3307      	adds	r3, #7
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	0c1a      	lsrs	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3306      	adds	r3, #6
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	0a1a      	lsrs	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3305      	adds	r3, #5
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0e1a      	lsrs	r2, r3, #24
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3303      	adds	r3, #3
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	0c1a      	lsrs	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3302      	adds	r3, #2
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	0a1a      	lsrs	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3301      	adds	r3, #1
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002720:	e031      	b.n	8002786 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3307      	adds	r3, #7
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	0a1a      	lsrs	r2, r3, #8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3306      	adds	r3, #6
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	0c1a      	lsrs	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3305      	adds	r3, #5
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	0e1a      	lsrs	r2, r3, #24
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002750:	f7ff ff16 	bl	8002580 <LL_FLASH_GetDeviceID>
 8002754:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3303      	adds	r3, #3
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002760:	f7ff ff1a 	bl	8002598 <LL_FLASH_GetSTCompanyID>
 8002764:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3302      	adds	r3, #2
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	0a1a      	lsrs	r2, r3, #8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	b2da      	uxtb	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	701a      	strb	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}

0800278e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 800278e:	b590      	push	{r4, r7, lr}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002796:	f7ff fee9 	bl	800256c <LL_FLASH_GetUDN>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a8:	d10d      	bne.n	80027c6 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80027aa:	f003 f8af 	bl	800590c <HAL_GetUIDw0>
 80027ae:	4604      	mov	r4, r0
 80027b0:	f003 f8b6 	bl	8005920 <HAL_GetUIDw1>
 80027b4:	4603      	mov	r3, r0
 80027b6:	405c      	eors	r4, r3
 80027b8:	f003 f8bc 	bl	8005934 <HAL_GetUIDw2>
 80027bc:	4603      	mov	r3, r0
 80027be:	ea84 0203 	eor.w	r2, r4, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
	...

080027d0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f01c fc48 	bl	801f074 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <TimestampNow+0x3c>)
 80027ee:	2110      	movs	r1, #16
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f81d 	bl	8002830 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fd fcc2 	bl	8000180 <strlen>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b29a      	uxth	r2, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08020ef0 	.word	0x08020ef0

08002810 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002814:	2101      	movs	r1, #1
 8002816:	2002      	movs	r0, #2
 8002818:	f01c fabc 	bl	801ed94 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002824:	2100      	movs	r1, #0
 8002826:	2002      	movs	r0, #2
 8002828:	f01c fab4 	bl	801ed94 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002830:	b40c      	push	{r2, r3}
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f01c fde5 	bl	801f418 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002858:	b002      	add	sp, #8
 800285a:	4770      	bx	lr

0800285c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_GetTick+0x24>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002882:	f000 f965 	bl	8002b50 <TIMER_IF_GetTimerValue>
 8002886:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000474 	.word	0x20000474

08002898 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f9db 	bl	8002c5e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80028ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80028be:	4905      	ldr	r1, [pc, #20]	; (80028d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	58000800 	.word	0x58000800

080028d8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80028dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028e0:	f7ff ffe6 	bl	80028b0 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80028e4:	f003 f830 	bl	8005948 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80028e8:	f003 f834 	bl	8005954 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80028ec:	f003 f838 	bl	8005960 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <EnvSensors_Read+0x44>)
 80028fe:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = bsp_env_sensors.getTemperature();
 8002900:	480e      	ldr	r0, [pc, #56]	; (800293c <EnvSensors_Read+0x48>)
 8002902:	f002 fdbd 	bl	8005480 <_ZN17EnvionmentSensors14getTemperatureEv>
 8002906:	6138      	str	r0, [r7, #16]
  float PRESSURE_Value = bsp_env_sensors.getPressure();
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <EnvSensors_Read+0x48>)
 800290a:	f002 fdab 	bl	8005464 <_ZN17EnvionmentSensors11getPressureEv>
 800290e:	60f8      	str	r0, [r7, #12]

  sensor_data->humidity    = HUMIDITY_Value;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <EnvSensors_Read+0x4c>)
 8002926:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a06      	ldr	r2, [pc, #24]	; (8002944 <EnvSensors_Read+0x50>)
 800292c:	611a      	str	r2, [r3, #16]

  return 0;
 800292e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	42480000 	.word	0x42480000
 800293c:	20000270 	.word	0x20000270
 8002940:	003e090d 	.word	0x003e090d
 8002944:	000503ab 	.word	0x000503ab

08002948 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Init */

  /* USER CODE END EnvSensors_Init */
  return ret;
 8002952:	687b      	ldr	r3, [r7, #4]
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
	...

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f01d fe22 	bl	80205d8 <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20010000 	.word	0x20010000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000478 	.word	0x20000478
 80029c8:	200025d0 	.word	0x200025d0

080029cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
	...

080029f0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <TIMER_IF_Init+0x5c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002a10:	f7ff fb54 	bl	80020bc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002a14:	f000 f856 	bl	8002ac4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1c:	480c      	ldr	r0, [pc, #48]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a1e:	f007 fc87 	bl	800a330 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a2c:	f007 fdbe 	bl	800a5ac <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f000 f9d3 	bl	8002ddc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002a36:	f000 f85f 	bl	8002af8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <TIMER_IF_Init+0x5c>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002a40:	79fb      	ldrb	r3, [r7, #7]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000047c 	.word	0x2000047c
 8002a50:	200003cc 	.word	0x200003cc

08002a54 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	222c      	movs	r2, #44	; 0x2c
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f01d fdac 	bl	80205c8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002a70:	f000 f828 	bl	8002ac4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <TIMER_IF_StartTimer+0x68>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002a8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a90:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4807      	ldr	r0, [pc, #28]	; (8002ac0 <TIMER_IF_StartTimer+0x6c>)
 8002aa2:	f007 fb39 	bl	800a118 <HAL_RTC_SetAlarm_IT>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002aac:	f7ff faac 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3738      	adds	r7, #56	; 0x38
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000480 	.word	0x20000480
 8002ac0:	200003cc 	.word	0x200003cc

08002ac4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <TIMER_IF_StopTimer+0x2c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad8:	4806      	ldr	r0, [pc, #24]	; (8002af4 <TIMER_IF_StopTimer+0x30>)
 8002ada:	f007 fc29 	bl	800a330 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <TIMER_IF_StopTimer+0x30>)
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40002800 	.word	0x40002800
 8002af4:	200003cc 	.word	0x200003cc

08002af8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002afc:	f000 f98e 	bl	8002e1c <GetTimerTicks>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <TIMER_IF_SetTimerContext+0x18>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b06:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <TIMER_IF_SetTimerContext+0x18>)
 8002b08:	681b      	ldr	r3, [r3, #0]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000480 	.word	0x20000480

08002b14 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <TIMER_IF_GetTimerContext+0x10>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000480 	.word	0x20000480

08002b28 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002b32:	f000 f973 	bl	8002e1c <GetTimerTicks>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000480 	.word	0x20000480

08002b50 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <TIMER_IF_GetTimerValue+0x24>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002b62:	f000 f95b 	bl	8002e1c <GetTimerTicks>
 8002b66:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000047c 	.word	0x2000047c

08002b78 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002b82:	2303      	movs	r3, #3
 8002b84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002b86:	687b      	ldr	r3, [r7, #4]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002b92:	b5b0      	push	{r4, r5, r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	460a      	mov	r2, r1
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	0d95      	lsrs	r5, r2, #22
 8002ba8:	0294      	lsls	r4, r2, #10
 8002baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	f7fe faad 	bl	8001114 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bdb0      	pop	{r4, r5, r7, pc}

08002bcc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002bcc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	2000      	movs	r0, #0
 8002bde:	460c      	mov	r4, r1
 8002be0:	4605      	mov	r5, r0
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f04f 0a00 	mov.w	sl, #0
 8002bea:	f04f 0b00 	mov.w	fp, #0
 8002bee:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002bf2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002bf6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002bfa:	4650      	mov	r0, sl
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	1b02      	subs	r2, r0, r4
 8002c00:	eb61 0305 	sbc.w	r3, r1, r5
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	0099      	lsls	r1, r3, #2
 8002c0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c12:	0090      	lsls	r0, r2, #2
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	eb12 0804 	adds.w	r8, r2, r4
 8002c1c:	eb43 0905 	adc.w	r9, r3, r5
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c34:	4690      	mov	r8, r2
 8002c36:	4699      	mov	r9, r3
 8002c38:	4640      	mov	r0, r8
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	0a82      	lsrs	r2, r0, #10
 8002c46:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002c4a:	0a8b      	lsrs	r3, r1, #10
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002c50:	68fb      	ldr	r3, [r7, #12]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c5c:	4770      	bx	lr

08002c5e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff93 	bl	8002b92 <TIMER_IF_Convert_ms2Tick>
 8002c6c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002c6e:	f000 f8d5 	bl	8002e1c <GetTimerTicks>
 8002c72:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002c74:	e000      	b.n	8002c78 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002c76:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002c78:	f000 f8d0 	bl	8002e1c <GetTimerTicks>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d8f6      	bhi.n	8002c76 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002c9a:	f01d f80d 	bl	801fcb8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002cae:	f000 f8a5 	bl	8002dfc <TIMER_IF_BkUp_Read_MSBticks>
 8002cb2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f88f 	bl	8002ddc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002cc6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002cd4:	f000 f8a2 	bl	8002e1c <GetTimerTicks>
 8002cd8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002cda:	f000 f88f 	bl	8002dfc <TIMER_IF_BkUp_Read_MSBticks>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	000b      	movs	r3, r1
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	4605      	mov	r5, r0
 8002cfe:	eb12 0804 	adds.w	r8, r2, r4
 8002d02:	eb43 0905 	adc.w	r9, r3, r5
 8002d06:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002d0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	0a82      	lsrs	r2, r0, #10
 8002d18:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d1c:	0a8b      	lsrs	r3, r1, #10
 8002d1e:	4613      	mov	r3, r2
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2200      	movs	r2, #0
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002d30:	f04f 0b00 	mov.w	fp, #0
 8002d34:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff46 	bl	8002bcc <TIMER_IF_Convert_Tick2ms>
 8002d40:	4603      	mov	r3, r0
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3730      	adds	r7, #48	; 0x30
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d54 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002d62:	f007 fcb5 	bl	800a6d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200003cc 	.word	0x200003cc

08002d74 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002d82:	f007 fca5 	bl	800a6d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200003cc 	.word	0x200003cc

08002d94 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4804      	ldr	r0, [pc, #16]	; (8002db4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002da2:	f007 fcad 	bl	800a700 <HAL_RTCEx_BKUPRead>
 8002da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200003cc 	.word	0x200003cc

08002db8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002dc6:	f007 fc9b 	bl	800a700 <HAL_RTCEx_BKUPRead>
 8002dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200003cc 	.word	0x200003cc

08002ddc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002dea:	f007 fc71 	bl	800a6d0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200003cc 	.word	0x200003cc

08002dfc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002e02:	2102      	movs	r1, #2
 8002e04:	4804      	ldr	r0, [pc, #16]	; (8002e18 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002e06:	f007 fc7b 	bl	800a700 <HAL_RTCEx_BKUPRead>
 8002e0a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002e0c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200003cc 	.word	0x200003cc

08002e1c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e22:	480b      	ldr	r0, [pc, #44]	; (8002e50 <GetTimerTicks+0x34>)
 8002e24:	f7ff fdd8 	bl	80029d8 <LL_RTC_TIME_GetSubSecond>
 8002e28:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e2a:	e003      	b.n	8002e34 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e2c:	4808      	ldr	r0, [pc, #32]	; (8002e50 <GetTimerTicks+0x34>)
 8002e2e:	f7ff fdd3 	bl	80029d8 <LL_RTC_TIME_GetSubSecond>
 8002e32:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <GetTimerTicks+0x34>)
 8002e36:	f7ff fdcf 	bl	80029d8 <LL_RTC_TIME_GetSubSecond>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d1f4      	bne.n	8002e2c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40002800 	.word	0x40002800

08002e54 <LL_AHB2_GRP1_EnableClock>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e78:	68fb      	ldr	r3, [r7, #12]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_APB2_GRP1_EnableClock>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_APB2_GRP1_DisableClock>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eca:	4013      	ands	r3, r2
 8002ecc:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ede:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <MX_USART1_UART_Init+0x94>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f20:	4811      	ldr	r0, [pc, #68]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f22:	f008 fca6 	bl	800b872 <HAL_UART_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f2c:	f7ff f86c 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f30:	2100      	movs	r1, #0
 8002f32:	480d      	ldr	r0, [pc, #52]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f34:	f00a ff13 	bl	800dd5e <HAL_UARTEx_SetTxFifoThreshold>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f3e:	f7ff f863 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f42:	2100      	movs	r1, #0
 8002f44:	4808      	ldr	r0, [pc, #32]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f46:	f00a ff48 	bl	800ddda <HAL_UARTEx_SetRxFifoThreshold>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f50:	f7ff f85a 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002f54:	4804      	ldr	r0, [pc, #16]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f56:	f00a fec7 	bl	800dce8 <HAL_UARTEx_EnableFifoMode>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f60:	f7ff f852 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000484 	.word	0x20000484
 8002f6c:	40013800 	.word	0x40013800

08002f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b096      	sub	sp, #88	; 0x58
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	2238      	movs	r2, #56	; 0x38
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f01d fb19 	bl	80205c8 <memset>
  if(uartHandle->Instance==USART1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_UART_MspInit+0xe8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d156      	bne.n	800304e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fa4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002fa8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f006 ff16 	bl	8009de0 <HAL_RCCEx_PeriphCLKConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002fba:	f7ff f825 	bl	8002008 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fc2:	f7ff ff5f 	bl	8002e84 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7ff ff44 	bl	8002e54 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002fcc:	23c0      	movs	r3, #192	; 0xc0
 8002fce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fdc:	2307      	movs	r3, #7
 8002fde:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	481d      	ldr	r0, [pc, #116]	; (800305c <HAL_UART_MspInit+0xec>)
 8002fe8:	f004 fc42 	bl	8007870 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_UART_MspInit+0xf4>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8002ff4:	2212      	movs	r2, #18
 8002ff6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003004:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_UART_MspInit+0xf0>)
 800300c:	2200      	movs	r2, #0
 800300e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003012:	2200      	movs	r2, #0
 8003014:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003018:	2200      	movs	r2, #0
 800301a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_UART_MspInit+0xf0>)
 800301e:	2200      	movs	r2, #0
 8003020:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003022:	480f      	ldr	r0, [pc, #60]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003024:	f003 fe20 	bl	8006c68 <HAL_DMA_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800302e:	f7fe ffeb 	bl	8002008 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_UART_MspInit+0xf0>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2102      	movs	r1, #2
 8003042:	2024      	movs	r0, #36	; 0x24
 8003044:	f003 fdd9 	bl	8006bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003048:	2024      	movs	r0, #36	; 0x24
 800304a:	f003 fdf0 	bl	8006c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800304e:	bf00      	nop
 8003050:	3758      	adds	r7, #88	; 0x58
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40013800 	.word	0x40013800
 800305c:	48000400 	.word	0x48000400
 8003060:	20000518 	.word	0x20000518
 8003064:	40020008 	.word	0x40020008

08003068 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_UART_MspDeInit+0x3c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10f      	bne.n	800309a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800307a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800307e:	f7ff ff19 	bl	8002eb4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003082:	21c0      	movs	r1, #192	; 0xc0
 8003084:	4808      	ldr	r0, [pc, #32]	; (80030a8 <HAL_UART_MspDeInit+0x40>)
 8003086:	f004 fd53 	bl	8007b30 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fe92 	bl	8006db8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003094:	2024      	movs	r0, #36	; 0x24
 8003096:	f003 fdd8 	bl	8006c4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40013800 	.word	0x40013800
 80030a8:	48000400 	.word	0x48000400

080030ac <LL_APB2_GRP1_ForceReset>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <LL_APB2_GRP1_ReleaseReset>:
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	43db      	mvns	r3, r3
 80030e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e4:	4013      	ands	r3, r2
 80030e6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
	...

080030f4 <LL_EXTI_EnableIT_0_31>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <LL_EXTI_EnableIT_0_31+0x24>)
 80030fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003102:	4905      	ldr	r1, [pc, #20]	; (8003118 <LL_EXTI_EnableIT_0_31+0x24>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	58000800 	.word	0x58000800

0800311c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <vcom_Init+0x28>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800312a:	f7fe fae9 	bl	8001700 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800312e:	f7ff fed3 	bl	8002ed8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003132:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003136:	f7ff ffdd 	bl	80030f4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800313a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000057c 	.word	0x2000057c

08003148 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800314c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003150:	f7ff ffac 	bl	80030ac <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003154:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003158:	f7ff ffb9 	bl	80030ce <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800315c:	4804      	ldr	r0, [pc, #16]	; (8003170 <vcom_DeInit+0x28>)
 800315e:	f7ff ff83 	bl	8003068 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003162:	200f      	movs	r0, #15
 8003164:	f003 fd71 	bl	8006c4a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003168:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800316a:	4618      	mov	r0, r3
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000484 	.word	0x20000484

08003174 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	461a      	mov	r2, r3
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <vcom_Trace_DMA+0x24>)
 8003188:	f008 fd5a 	bl	800bc40 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800318c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000484 	.word	0x20000484

0800319c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <vcom_ReceiveInit+0x70>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80031aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031ae:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031b8:	4815      	ldr	r0, [pc, #84]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031ba:	f00a fd08 	bl	800dbce <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80031be:	bf00      	nop
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d0f7      	beq.n	80031c0 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80031d0:	bf00      	nop
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e0:	d1f7      	bne.n	80031d2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80031f0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80031f2:	4807      	ldr	r0, [pc, #28]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031f4:	f00a fd46 	bl	800dc84 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80031f8:	2201      	movs	r2, #1
 80031fa:	4906      	ldr	r1, [pc, #24]	; (8003214 <vcom_ReceiveInit+0x78>)
 80031fc:	4804      	ldr	r0, [pc, #16]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031fe:	f008 fcd3 	bl	800bba8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003202:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000580 	.word	0x20000580
 8003210:	20000484 	.word	0x20000484
 8003214:	20000578 	.word	0x20000578

08003218 <vcom_Resume>:

void vcom_Resume(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800321c:	4808      	ldr	r0, [pc, #32]	; (8003240 <vcom_Resume+0x28>)
 800321e:	f008 fb28 	bl	800b872 <HAL_UART_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <vcom_Resume+0x14>
  {
    Error_Handler();
 8003228:	f7fe feee 	bl	8002008 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800322c:	4805      	ldr	r0, [pc, #20]	; (8003244 <vcom_Resume+0x2c>)
 800322e:	f003 fd1b 	bl	8006c68 <HAL_DMA_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <vcom_Resume+0x24>
  {
    Error_Handler();
 8003238:	f7fe fee6 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000484 	.word	0x20000484
 8003244:	20000518 	.word	0x20000518

08003248 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_UART_TxCpltCallback+0x24>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d103      	bne.n	8003262 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_UART_TxCpltCallback+0x28>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2000      	movs	r0, #0
 8003260:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40013800 	.word	0x40013800
 8003270:	2000057c 	.word	0x2000057c

08003274 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_UART_RxCpltCallback+0x44>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_UART_RxCpltCallback+0x48>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_UART_RxCpltCallback+0x30>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_UART_RxCpltCallback+0x48>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2200      	movs	r2, #0
 800329e:	2101      	movs	r1, #1
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <HAL_UART_RxCpltCallback+0x4c>)
 80032a2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_UART_RxCpltCallback+0x4c>)
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f008 fc7d 	bl	800bba8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40013800 	.word	0x40013800
 80032bc:	20000580 	.word	0x20000580
 80032c0:	20000578 	.word	0x20000578

080032c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032c4:	480d      	ldr	r0, [pc, #52]	; (80032fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c8:	f7ff fb80 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ce:	490d      	ldr	r1, [pc, #52]	; (8003304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <LoopForever+0xe>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <LoopForever+0x12>)
  ldr r4, =_ebss
 80032e4:	4c0a      	ldr	r4, [pc, #40]	; (8003310 <LoopForever+0x16>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032f2:	f01d f977 	bl	80205e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032f6:	f7fe fddd 	bl	8001eb4 <main>

080032fa <LoopForever>:

LoopForever:
    b LoopForever
 80032fa:	e7fe      	b.n	80032fa <LoopForever>
  ldr   r0, =_estack
 80032fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003304:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8003308:	08022064 	.word	0x08022064
  ldr r2, =_sbss
 800330c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8003310:	200025cc 	.word	0x200025cc

08003314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC_IRQHandler>

08003316 <_ZN8DetectorC1Ev>:
#include "detector.h"

Detector::Detector() {
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  lastClearingTime      = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
  integratedDoseTime_ms = 0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	605a      	str	r2, [r3, #4]
  measuredDose          = 0;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
}
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
	...

08003340 <_ZN8Detector4initEv>:

void Detector::init() {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  clearPhosphor();
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f865 	bl	8003418 <_ZN8Detector13clearPhosphorEv>
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 800334e:	2201      	movs	r2, #1
 8003350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003354:	4803      	ldr	r0, [pc, #12]	; (8003364 <_ZN8Detector4initEv+0x24>)
 8003356:	f004 fcd0 	bl	8007cfa <HAL_GPIO_WritePin>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	48000400 	.word	0x48000400

08003368 <_ZL19avgSipmSignalToDosef>:

static float avgSipmSignalToDose(float signal) {
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

  //TODO: calculate the dose from the signal

  return signal;
 8003370:	687b      	ldr	r3, [r7, #4]
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <_ZL3avgPtt>:

static float avg(uint16_t *arr, uint16_t len) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
    float result = 0;
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 800338e:	2300      	movs	r3, #0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	e011      	b.n	80033b8 <_ZL3avgPtt+0x3c>
        result += arr[i];
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fcce 	bl	8000d40 <__aeabi_i2f>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4619      	mov	r1, r3
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7fd fc15 	bl	8000bd8 <__addsf3>
 80033ae:	4603      	mov	r3, r0
 80033b0:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	3301      	adds	r3, #1
 80033b6:	817b      	strh	r3, [r7, #10]
 80033b8:	897a      	ldrh	r2, [r7, #10]
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3e9      	bcc.n	8003394 <_ZL3avgPtt+0x18>
    }
    return result / len;
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fcbc 	bl	8000d40 <__aeabi_i2f>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4619      	mov	r1, r3
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7fd fdbf 	bl	8000f50 <__aeabi_fdiv>
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_ZN8Detector11getSiPMtempEb>:

float Detector::getSiPMtemp(bool newSample){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
	if (newSample) sampleSiPM_temp();
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <_ZN8Detector11getSiPMtempEb+0x18>
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8a6 	bl	8003540 <_ZN8Detector15sampleSiPM_tempEv>
	return avg(SiPM_temp_measurements, NUM_TEMP_SAMPLES);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	330c      	adds	r3, #12
 80033f8:	2110      	movs	r1, #16
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ffbe 	bl	800337c <_ZL3avgPtt>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <_ZL3nowv>:
  //TODO: calculate the dacValue from the temperature

  return setSiPM_Bias(dacValue);
}*/

static uint32_t now() {
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  //use the HAL to get the current time in milliseconds
  return HAL_GetTick();
 800340e:	f7ff fa2f 	bl	8002870 <HAL_GetTick>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}

08003418 <_ZN8Detector13clearPhosphorEv>:

void Detector::clearPhosphor() {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  clearLED_On();
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f86f 	bl	8003504 <_ZN8Detector11clearLED_OnEv>
  HAL_Delay(CLEARING_TIME_ms);
 8003426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800342a:	f7ff fa35 	bl	8002898 <HAL_Delay>
  clearLED_Off();
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f877 	bl	8003522 <_ZN8Detector12clearLED_OffEv>

  lastClearingTime = now();
 8003434:	f7ff ffe9 	bl	800340a <_ZL3nowv>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_ZN8Detector19readAccumulatedDoseEv>:

float Detector::readAccumulatedDose() {
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  sampleSiPM_temp();
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f876 	bl	8003540 <_ZN8Detector15sampleSiPM_tempEv>
  float temperature = avg(SiPM_temp_measurements, NUM_TEMP_SAMPLES);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	330c      	adds	r3, #12
 8003458:	2110      	movs	r1, #16
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff8e 	bl	800337c <_ZL3avgPtt>
 8003460:	60f8      	str	r0, [r7, #12]
  setSiPM_Bias(0x0F);
 8003462:	210f      	movs	r1, #15
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f913 	bl	8003690 <_ZN8Detector12setSiPM_BiasEh>
  stimLED_On();
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f82a 	bl	80034c4 <_ZN8Detector10stimLED_OnEv>
  HAL_Delay(STABLE_MEASUREMENT_WINDOW_ms);
 8003470:	2064      	movs	r0, #100	; 0x64
 8003472:	f7ff fa11 	bl	8002898 <HAL_Delay>
  sampleSiPM_signal();
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8ae 	bl	80035d8 <_ZN8Detector17sampleSiPM_signalEv>
  stimLED_Off();
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f831 	bl	80034e4 <_ZN8Detector11stimLED_OffEv>
  sipmBias_Off();
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8f4 	bl	8003670 <_ZN8Detector12sipmBias_OffEv>
  float avgSipmSignal = avg(SiPM_signal_measurements, NUM_SiPM_SAMPLES);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	332c      	adds	r3, #44	; 0x2c
 800348c:	2110      	movs	r1, #16
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff74 	bl	800337c <_ZL3avgPtt>
 8003494:	60b8      	str	r0, [r7, #8]
  measuredDose = avgSipmSignalToDose(avgSipmSignal);
 8003496:	68b8      	ldr	r0, [r7, #8]
 8003498:	f7ff ff66 	bl	8003368 <_ZL19avgSipmSignalToDosef>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]
  integratedDoseTime_ms = now() - lastClearingTime;
 80034a2:	f7ff ffb2 	bl	800340a <_ZL3nowv>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	605a      	str	r2, [r3, #4]
  clearPhosphor();
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffb0 	bl	8003418 <_ZN8Detector13clearPhosphorEv>

  return measuredDose;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_ZN8Detector10stimLED_OnEv>:

float Detector::calcDoseRate() {
  return measuredDose / (integratedDoseTime_ms / 1000.0);
}

void Detector::stimLED_On() {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  //use the HAL to turn on the LED
  HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_SET);
 80034cc:	2201      	movs	r2, #1
 80034ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034d2:	4803      	ldr	r0, [pc, #12]	; (80034e0 <_ZN8Detector10stimLED_OnEv+0x1c>)
 80034d4:	f004 fc11 	bl	8007cfa <HAL_GPIO_WritePin>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	48000400 	.word	0x48000400

080034e4 <_ZN8Detector11stimLED_OffEv>:

void Detector::stimLED_Off() {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  //use the HAL to turn off the LED
  HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_RESET);
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f2:	4803      	ldr	r0, [pc, #12]	; (8003500 <_ZN8Detector11stimLED_OffEv+0x1c>)
 80034f4:	f004 fc01 	bl	8007cfa <HAL_GPIO_WritePin>
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	48000400 	.word	0x48000400

08003504 <_ZN8Detector11clearLED_OnEv>:

void Detector::clearLED_On() {
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  //use the HAL to turn on the LED
  HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_SET);
 800350c:	2201      	movs	r2, #1
 800350e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003516:	f004 fbf0 	bl	8007cfa <HAL_GPIO_WritePin>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <_ZN8Detector12clearLED_OffEv>:

void Detector::clearLED_Off() {
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  //use the HAL to turn off the LED
  HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003534:	f004 fbe1 	bl	8007cfa <HAL_GPIO_WritePin>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_ZN8Detector15sampleSiPM_tempEv>:

void Detector::sampleSiPM_temp() {
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  //reset the temperature array to 0
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 8003548:	2300      	movs	r3, #0
 800354a:	82fb      	strh	r3, [r7, #22]
 800354c:	e009      	b.n	8003562 <_ZN8Detector15sampleSiPM_tempEv+0x22>
    SiPM_temp_measurements[i] = 0;
 800354e:	8afb      	ldrh	r3, [r7, #22]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	2200      	movs	r2, #0
 800355a:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 800355c:	8afb      	ldrh	r3, [r7, #22]
 800355e:	3301      	adds	r3, #1
 8003560:	82fb      	strh	r3, [r7, #22]
 8003562:	8afb      	ldrh	r3, [r7, #22]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d9f2      	bls.n	800354e <_ZN8Detector15sampleSiPM_tempEv+0xe>
  }

  //set the adc to read from the SiPM temperature pin
  ADC_ChannelConfTypeDef sConfig = {0};
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
  sConfig.Channel = SiPM_TEMP_ADC_CHANNEL;
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <_ZN8Detector15sampleSiPM_tempEv+0x90>)
 8003576:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	4619      	mov	r1, r3
 8003586:	4813      	ldr	r0, [pc, #76]	; (80035d4 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 8003588:	f002 feae 	bl	80062e8 <HAL_ADC_ConfigChannel>
  
  //take NUM_TEMP_SAMPLES measurements
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 800358c:	2300      	movs	r3, #0
 800358e:	82bb      	strh	r3, [r7, #20]
 8003590:	e015      	b.n	80035be <_ZN8Detector15sampleSiPM_tempEv+0x7e>
    //start the ADC conversion
    HAL_ADC_Start(&hadc);
 8003592:	4810      	ldr	r0, [pc, #64]	; (80035d4 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 8003594:	f002 fd8c 	bl	80060b0 <HAL_ADC_Start>
    //wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc, 100);
 8003598:	2164      	movs	r1, #100	; 0x64
 800359a:	480e      	ldr	r0, [pc, #56]	; (80035d4 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 800359c:	f002 fe00 	bl	80061a0 <HAL_ADC_PollForConversion>
    //read the ADC value
    SiPM_temp_measurements[i] = HAL_ADC_GetValue(&hadc);
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 80035a2:	f002 fe94 	bl	80062ce <HAL_ADC_GetValue>
 80035a6:	4602      	mov	r2, r0
 80035a8:	8abb      	ldrh	r3, [r7, #20]
 80035aa:	b291      	uxth	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	460a      	mov	r2, r1
 80035b6:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 80035b8:	8abb      	ldrh	r3, [r7, #20]
 80035ba:	3301      	adds	r3, #1
 80035bc:	82bb      	strh	r3, [r7, #20]
 80035be:	8abb      	ldrh	r3, [r7, #20]
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d9e6      	bls.n	8003592 <_ZN8Detector15sampleSiPM_tempEv+0x52>
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	08000004 	.word	0x08000004
 80035d4:	200001b4 	.word	0x200001b4

080035d8 <_ZN8Detector17sampleSiPM_signalEv>:

void Detector::sampleSiPM_signal() {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  //reset the signal array to 0
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 80035e0:	2300      	movs	r3, #0
 80035e2:	82fb      	strh	r3, [r7, #22]
 80035e4:	e009      	b.n	80035fa <_ZN8Detector17sampleSiPM_signalEv+0x22>
    SiPM_signal_measurements[i] = 0;
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	3314      	adds	r3, #20
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	2200      	movs	r2, #0
 80035f2:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 80035f4:	8afb      	ldrh	r3, [r7, #22]
 80035f6:	3301      	adds	r3, #1
 80035f8:	82fb      	strh	r3, [r7, #22]
 80035fa:	8afb      	ldrh	r3, [r7, #22]
 80035fc:	2b0f      	cmp	r3, #15
 80035fe:	d9f2      	bls.n	80035e6 <_ZN8Detector17sampleSiPM_signalEv+0xe>
  }

  //set the adc to read from the SiPM signal pin
  ADC_ChannelConfTypeDef sConfig = {0};
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
  sConfig.Channel = SiPM_SIGNAL_ADC_CHANNEL;
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <_ZN8Detector17sampleSiPM_signalEv+0x90>)
 800360e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003614:	2307      	movs	r3, #7
 8003616:	613b      	str	r3, [r7, #16]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	4619      	mov	r1, r3
 800361e:	4813      	ldr	r0, [pc, #76]	; (800366c <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 8003620:	f002 fe62 	bl	80062e8 <HAL_ADC_ConfigChannel>
  
  //take NUM_SiPM_SAMPLES measurements
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 8003624:	2300      	movs	r3, #0
 8003626:	82bb      	strh	r3, [r7, #20]
 8003628:	e015      	b.n	8003656 <_ZN8Detector17sampleSiPM_signalEv+0x7e>
    //start the ADC conversion
    HAL_ADC_Start(&hadc);
 800362a:	4810      	ldr	r0, [pc, #64]	; (800366c <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 800362c:	f002 fd40 	bl	80060b0 <HAL_ADC_Start>
    //wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc, 100);
 8003630:	2164      	movs	r1, #100	; 0x64
 8003632:	480e      	ldr	r0, [pc, #56]	; (800366c <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 8003634:	f002 fdb4 	bl	80061a0 <HAL_ADC_PollForConversion>
    //read the ADC value
    SiPM_signal_measurements[i] = HAL_ADC_GetValue(&hadc);
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 800363a:	f002 fe48 	bl	80062ce <HAL_ADC_GetValue>
 800363e:	4602      	mov	r2, r0
 8003640:	8abb      	ldrh	r3, [r7, #20]
 8003642:	b291      	uxth	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	3314      	adds	r3, #20
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	460a      	mov	r2, r1
 800364e:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 8003650:	8abb      	ldrh	r3, [r7, #20]
 8003652:	3301      	adds	r3, #1
 8003654:	82bb      	strh	r3, [r7, #20]
 8003656:	8abb      	ldrh	r3, [r7, #20]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d9e6      	bls.n	800362a <_ZN8Detector17sampleSiPM_signalEv+0x52>
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	0c000008 	.word	0x0c000008
 800366c:	200001b4 	.word	0x200001b4

08003670 <_ZN8Detector12sipmBias_OffEv>:

bool Detector::sipmBias_Off() {
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint8_t dacValue = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
  return setSiPM_Bias(dacValue);
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f805 	bl	8003690 <_ZN8Detector12setSiPM_BiasEh>
 8003686:	4603      	mov	r3, r0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_ZN8Detector12setSiPM_BiasEh>:

bool Detector::setSiPM_Bias(uint8_t dacValue) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  //use the HAL SPI to send the dacValue to the SiPM bias DAC
  
  //set the CS pin low
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_RESET);
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036a2:	480d      	ldr	r0, [pc, #52]	; (80036d8 <_ZN8Detector12setSiPM_BiasEh+0x48>)
 80036a4:	f004 fb29 	bl	8007cfa <HAL_GPIO_WritePin>
  //send the dacValue
  HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &dacValue, 1, 100);
 80036a8:	1cf9      	adds	r1, r7, #3
 80036aa:	2364      	movs	r3, #100	; 0x64
 80036ac:	2201      	movs	r2, #1
 80036ae:	480b      	ldr	r0, [pc, #44]	; (80036dc <_ZN8Detector12setSiPM_BiasEh+0x4c>)
 80036b0:	f007 f910 	bl	800a8d4 <HAL_SPI_Transmit>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]
  //set the CS pin high
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036be:	4806      	ldr	r0, [pc, #24]	; (80036d8 <_ZN8Detector12setSiPM_BiasEh+0x48>)
 80036c0:	f004 fb1b 	bl	8007cfa <HAL_GPIO_WritePin>
  //check the status
  if (status != HAL_OK) {
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <_ZN8Detector12setSiPM_BiasEh+0x3e>
    return false;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <_ZN8Detector12setSiPM_BiasEh+0x40>
  }
  return true;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	48000400 	.word	0x48000400
 80036dc:	20000404 	.word	0x20000404

080036e0 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f001 fae3 	bl	8004cb8 <null_ptr_check>
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80036f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d131      	bne.n	8003762 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	7a1b      	ldrb	r3, [r3, #8]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d003      	beq.n	800370e <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	729a      	strb	r2, [r3, #10]
 800370c:	e002      	b.n	8003714 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8003714:	f107 010e 	add.w	r1, r7, #14
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	2000      	movs	r0, #0
 800371e:	f000 f826 	bl	800376e <bmp3_get_regs>
 8003722:	4603      	mov	r3, r0
 8003724:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 800372e:	7bbb      	ldrb	r3, [r7, #14]
 8003730:	2b50      	cmp	r3, #80	; 0x50
 8003732:	d002      	beq.n	800373a <bmp3_init+0x5a>
 8003734:	7bbb      	ldrb	r3, [r7, #14]
 8003736:	2b60      	cmp	r3, #96	; 0x60
 8003738:	d111      	bne.n	800375e <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 800373a:	7bba      	ldrb	r2, [r7, #14]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f98f 	bl	8003a64 <bmp3_soft_reset>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fb37 	bl	8003dc6 <get_calib_data>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800375c:	e001      	b.n	8003762 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 800375e:	23fe      	movs	r3, #254	; 0xfe
 8003760:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800376e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003772:	b08b      	sub	sp, #44	; 0x2c
 8003774:	af00      	add	r7, sp, #0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4603      	mov	r3, r0
 800377e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003780:	6838      	ldr	r0, [r7, #0]
 8003782:	f001 fa99 	bl	8004cb8 <null_ptr_check>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 800378c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003790:	2b00      	cmp	r3, #0
 8003792:	d172      	bne.n	800387a <bmp3_get_regs+0x10c>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d06f      	beq.n	800387a <bmp3_get_regs+0x10c>
    {
 800379a:	466b      	mov	r3, sp
 800379c:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	7a9b      	ldrb	r3, [r3, #10]
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	7a9b      	ldrb	r3, [r3, #10]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	18d1      	adds	r1, r2, r3
 80037b4:	460b      	mov	r3, r1
 80037b6:	3b01      	subs	r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	2300      	movs	r3, #0
 80037bc:	4688      	mov	r8, r1
 80037be:	4699      	mov	r9, r3
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d4:	2300      	movs	r3, #0
 80037d6:	460c      	mov	r4, r1
 80037d8:	461d      	mov	r5, r3
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	00eb      	lsls	r3, r5, #3
 80037e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e8:	00e2      	lsls	r2, r4, #3
 80037ea:	1dcb      	adds	r3, r1, #7
 80037ec:	08db      	lsrs	r3, r3, #3
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	ebad 0d03 	sub.w	sp, sp, r3
 80037f4:	466b      	mov	r3, sp
 80037f6:	3300      	adds	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	7a1b      	ldrb	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d025      	beq.n	800384e <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003808:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68dc      	ldr	r4, [r3, #12]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	7bf8      	ldrb	r0, [r7, #15]
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	47a0      	blx	r4
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	e00d      	b.n	8003844 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	7a9b      	ldrb	r3, [r3, #10]
 800382c:	461a      	mov	r2, r3
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	441a      	add	r2, r3
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	440b      	add	r3, r1
 8003838:	6979      	ldr	r1, [r7, #20]
 800383a:	5c8a      	ldrb	r2, [r1, r2]
 800383c:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	3301      	adds	r3, #1
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d3ed      	bcc.n	8003828 <bmp3_get_regs+0xba>
 800384c:	e00b      	b.n	8003866 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68dc      	ldr	r4, [r3, #12]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	7bf8      	ldrb	r0, [r7, #15]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	47a0      	blx	r4
 800385e:	4603      	mov	r3, r0
 8003860:	461a      	mov	r2, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8003870:	23f9      	movs	r3, #249	; 0xf9
 8003872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003876:	46b5      	mov	sp, r6
    {
 8003878:	e002      	b.n	8003880 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800387a:	23ff      	movs	r3, #255	; 0xff
 800387c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8003880:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003884:	4618      	mov	r0, r3
 8003886:	372c      	adds	r7, #44	; 0x2c
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800388e <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800388e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003892:	b08b      	sub	sp, #44	; 0x2c
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	466b      	mov	r3, sp
 80038a0:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	0059      	lsls	r1, r3, #1
 80038a6:	460b      	mov	r3, r1
 80038a8:	3b01      	subs	r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	2300      	movs	r3, #0
 80038ae:	4688      	mov	r8, r1
 80038b0:	4699      	mov	r9, r3
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	2300      	movs	r3, #0
 80038c8:	460c      	mov	r4, r1
 80038ca:	461d      	mov	r5, r3
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	00eb      	lsls	r3, r5, #3
 80038d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038da:	00e2      	lsls	r2, r4, #3
 80038dc:	1dcb      	adds	r3, r1, #7
 80038de:	08db      	lsrs	r3, r3, #3
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	ebad 0d03 	sub.w	sp, sp, r3
 80038e6:	466b      	mov	r3, sp
 80038e8:	3300      	adds	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80038ec:	6838      	ldr	r0, [r7, #0]
 80038ee:	f001 f9e3 	bl	8004cb8 <null_ptr_check>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80038f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d14e      	bne.n	800399e <bmp3_set_regs+0x110>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d04b      	beq.n	800399e <bmp3_set_regs+0x110>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d048      	beq.n	800399e <bmp3_set_regs+0x110>
    {
        if (len != 0)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d041      	beq.n	8003996 <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	7a1b      	ldrb	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d114      	bne.n	800394c <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003922:	2300      	movs	r3, #0
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e00d      	b.n	8003944 <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003928:	7ffb      	ldrb	r3, [r7, #31]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	7ffb      	ldrb	r3, [r7, #31]
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	440b      	add	r3, r1
 8003936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800393e:	7ffb      	ldrb	r3, [r7, #31]
 8003940:	3301      	adds	r3, #1
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	7ffb      	ldrb	r3, [r7, #31]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d8ed      	bhi.n	8003928 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d909      	bls.n	8003966 <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fa59 	bl	8003e10 <interleave_reg_addr>
                temp_len = len * 2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	e001      	b.n	800396a <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691c      	ldr	r4, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	7818      	ldrb	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	6a3a      	ldr	r2, [r7, #32]
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	47a0      	blx	r4
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 800398e:	23f9      	movs	r3, #249	; 0xf9
 8003990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8003994:	e007      	b.n	80039a6 <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8003996:	23fa      	movs	r3, #250	; 0xfa
 8003998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 800399c:	e003      	b.n	80039a6 <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800399e:	23ff      	movs	r3, #255	; 0xff
 80039a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039a4:	e000      	b.n	80039a8 <bmp3_set_regs+0x11a>
        if (len != 0)
 80039a6:	bf00      	nop
    }

    return rslt;
 80039a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80039ac:	46b5      	mov	sp, r6
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	372c      	adds	r7, #44	; 0x2c
 80039b2:	46bd      	mov	sp, r7
 80039b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080039b8 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80039c2:	6838      	ldr	r0, [r7, #0]
 80039c4:	f001 f978 	bl	8004cb8 <null_ptr_check>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80039cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d141      	bne.n	8003a58 <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	2006      	movs	r0, #6
 80039d8:	f001 f957 	bl	8004c8a <are_settings_changed>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fa77 	bl	8003ed8 <set_pwr_ctrl_settings>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	20f0      	movs	r0, #240	; 0xf0
 80039f2:	f001 f94a 	bl	8004c8a <are_settings_changed>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <bmp3_set_sensor_settings+0x58>
 80039fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fab6 	bl	8003f78 <set_odr_filter_settings>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003a16:	f001 f938 	bl	8004c8a <are_settings_changed>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <bmp3_set_sensor_settings+0x7c>
 8003a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fb12 	bl	8004054 <set_int_ctrl_settings>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003a3a:	f001 f926 	bl	8004c8a <are_settings_changed>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <bmp3_set_sensor_settings+0xa0>
 8003a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fb79 	bl	8004146 <set_advance_settings>
 8003a54:	4603      	mov	r3, r0
 8003a56:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8003a6c:	237e      	movs	r3, #126	; 0x7e
 8003a6e:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8003a70:	23b6      	movs	r3, #182	; 0xb6
 8003a72:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 f91f 	bl	8004cb8 <null_ptr_check>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d140      	bne.n	8003b08 <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8003a86:	f107 010c 	add.w	r1, r7, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2003      	movs	r0, #3
 8003a90:	f7ff fe6d 	bl	800376e <bmp3_get_regs>
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8003a98:	7b3b      	ldrb	r3, [r7, #12]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d02e      	beq.n	8003b00 <bmp3_soft_reset+0x9c>
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12a      	bne.n	8003b00 <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003aaa:	f107 010d 	add.w	r1, r7, #13
 8003aae:	f107 000e 	add.w	r0, r7, #14
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f7ff feea 	bl	800388e <bmp3_set_regs>
 8003aba:	4603      	mov	r3, r0
 8003abc:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11f      	bne.n	8003b06 <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6852      	ldr	r2, [r2, #4]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ad4:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8003ad6:	f107 010b 	add.w	r1, r7, #11
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f7ff fe45 	bl	800376e <bmp3_get_regs>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8003ae8:	7afb      	ldrb	r3, [r7, #11]
 8003aea:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <bmp3_soft_reset+0x96>
 8003af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003afa:	23fc      	movs	r3, #252	; 0xfc
 8003afc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003afe:	e002      	b.n	8003b06 <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003b00:	23fc      	movs	r3, #252	; 0xfc
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e000      	b.n	8003b08 <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 8003b06:	bf00      	nop
        }
    }

    return rslt;
 8003b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f001 f8cb 	bl	8004cb8 <null_ptr_check>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d130      	bne.n	8003b90 <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003b34:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8003b36:	f107 030d 	add.w	r3, r7, #13
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f82d 	bl	8003b9c <bmp3_get_op_mode>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 8003b46:	7b7b      	ldrb	r3, [r7, #13]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8fa 	bl	8003d46 <put_device_to_sleep>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6852      	ldr	r2, [r2, #4]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b64:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d110      	bne.n	8003b90 <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8003b6e:	7bbb      	ldrb	r3, [r7, #14]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d105      	bne.n	8003b80 <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f880 	bl	8003c7a <set_normal_mode>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e007      	b.n	8003b90 <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d104      	bne.n	8003b90 <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8a7 	bl	8003cda <write_power_mode>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f001 f886 	bl	8004cb8 <null_ptr_check>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 8003bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d114      	bne.n	8003be2 <bmp3_get_op_mode+0x46>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	201b      	movs	r0, #27
 8003bc6:	f7ff fdd2 	bl	800376e <bmp3_get_regs>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	111b      	asrs	r3, r3, #4
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e001      	b.n	8003be6 <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003be2:	23ff      	movs	r3, #255	; 0xff
 8003be4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b088      	sub	sp, #32
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	2300      	movs	r3, #0
 8003c06:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f001 f850 	bl	8004cb8 <null_ptr_check>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 8003c1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d122      	bne.n	8003c6a <bmp3_get_sensor_data+0x78>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01f      	beq.n	8003c6a <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8003c2a:	f107 0118 	add.w	r1, r7, #24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2206      	movs	r2, #6
 8003c32:	2004      	movs	r0, #4
 8003c34:	f7ff fd9b 	bl	800376e <bmp3_get_regs>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 8003c3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d114      	bne.n	8003c6e <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8003c44:	f107 0210 	add.w	r2, r7, #16
 8003c48:	f107 0318 	add.w	r3, r7, #24
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fc67 	bl	8004522 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3318      	adds	r3, #24
 8003c58:	f107 0110 	add.w	r1, r7, #16
 8003c5c:	7bf8      	ldrb	r0, [r7, #15]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f000 fc92 	bl	8004588 <compensate_data>
 8003c64:	4603      	mov	r3, r0
 8003c66:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 8003c68:	e001      	b.n	8003c6e <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003c6a:	23ff      	movs	r3, #255	; 0xff
 8003c6c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003c6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f887 	bl	8003d96 <validate_normal_mode_settings>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8003c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d11c      	bne.n	8003cce <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f820 	bl	8003cda <write_power_mode>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8003ca6:	f107 010e 	add.w	r1, r7, #14
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	2002      	movs	r0, #2
 8003cb0:	f7ff fd5d 	bl	800376e <bmp3_get_regs>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8003cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003cc0:	7bbb      	ldrb	r3, [r7, #14]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003cca:	23fb      	movs	r3, #251	; 0xfb
 8003ccc:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003ce2:	231b      	movs	r3, #27
 8003ce4:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003cec:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8003cee:	7b78      	ldrb	r0, [r7, #13]
 8003cf0:	f107 010c 	add.w	r1, r7, #12
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f7ff fd39 	bl	800376e <bmp3_get_regs>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8003d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d118      	bne.n	8003d3a <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8003d08:	7b3b      	ldrb	r3, [r7, #12]
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d10:	b25a      	sxtb	r2, r3
 8003d12:	7bbb      	ldrb	r3, [r7, #14]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d1c:	b25b      	sxtb	r3, r3
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8003d26:	f107 010c 	add.w	r1, r7, #12
 8003d2a:	f107 000d 	add.w	r0, r7, #13
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f7ff fdac 	bl	800388e <bmp3_set_regs>
 8003d36:	4603      	mov	r3, r0
 8003d38:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003d4e:	231b      	movs	r3, #27
 8003d50:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8003d52:	f107 010d 	add.w	r1, r7, #13
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	201b      	movs	r0, #27
 8003d5c:	f7ff fd07 	bl	800376e <bmp3_get_regs>
 8003d60:	4603      	mov	r3, r0
 8003d62:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10e      	bne.n	8003d8a <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8003d6c:	7b7b      	ldrb	r3, [r7, #13]
 8003d6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8003d76:	f107 010d 	add.w	r1, r7, #13
 8003d7a:	f107 000e 	add.w	r0, r7, #14
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f7ff fd84 	bl	800388e <bmp3_set_regs>
 8003d86:	4603      	mov	r3, r0
 8003d88:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa23 	bl	80041ea <get_odr_filter_settings>
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa37 	bl	8004224 <validate_osr_and_odr_settings>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b088      	sub	sp, #32
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003dce:	2331      	movs	r3, #49	; 0x31
 8003dd0:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	f107 030c 	add.w	r3, r7, #12
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8003de6:	f107 0108 	add.w	r1, r7, #8
 8003dea:	7ff8      	ldrb	r0, [r7, #31]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2215      	movs	r2, #21
 8003df0:	f7ff fcbd 	bl	800376e <bmp3_get_regs>
 8003df4:	4603      	mov	r3, r0
 8003df6:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fbfa 	bl	80045f8 <parse_calib_data>

    return rslt;
 8003e04:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8003e1e:	2301      	movs	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e015      	b.n	8003e50 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	441a      	add	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	440b      	add	r3, r1
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	441a      	add	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	440b      	add	r3, r1
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3e5      	bcc.n	8003e24 <interleave_reg_addr+0x14>
    }
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	4413      	add	r3, r2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	10db      	asrs	r3, r3, #3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	105b      	asrs	r3, r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	709a      	strb	r2, [r3, #2]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003ee2:	231b      	movs	r3, #27
 8003ee4:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003ee6:	7bb8      	ldrb	r0, [r7, #14]
 8003ee8:	f107 010d 	add.w	r1, r7, #13
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f7ff fc3d 	bl	800376e <bmp3_get_regs>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d134      	bne.n	8003f6a <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00f      	beq.n	8003f2a <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8003f0a:	7b7b      	ldrb	r3, [r7, #13]
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	b25a      	sxtb	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003f1a:	b25b      	sxtb	r3, r3
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	b25b      	sxtb	r3, r3
 8003f22:	4313      	orrs	r3, r2
 8003f24:	b25b      	sxtb	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 8003f34:	7b7b      	ldrb	r3, [r7, #13]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	f023 0302 	bic.w	r3, r3, #2
 8003f3c:	b25a      	sxtb	r2, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	b25b      	sxtb	r3, r3
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f56:	f107 010d 	add.w	r1, r7, #13
 8003f5a:	f107 000e 	add.w	r0, r7, #14
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f7ff fc94 	bl	800388e <bmp3_set_regs>
 8003f66:	4603      	mov	r3, r0
 8003f68:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8003f82:	4b33      	ldr	r3, [pc, #204]	; (8004050 <set_odr_filter_settings+0xd8>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	82bb      	strh	r3, [r7, #20]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003f90:	f107 0110 	add.w	r1, r7, #16
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2204      	movs	r2, #4
 8003f98:	201c      	movs	r0, #28
 8003f9a:	f7ff fbe8 	bl	800376e <bmp3_get_regs>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d14b      	bne.n	8004042 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	2030      	movs	r0, #48	; 0x30
 8003fae:	f000 fe6c 	bl	8004c8a <are_settings_changed>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00b      	beq.n	8003fd0 <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 8003fb8:	f107 000f 	add.w	r0, r7, #15
 8003fbc:	f107 0210 	add.w	r2, r7, #16
 8003fc0:	f107 0114 	add.w	r1, r7, #20
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	4603      	mov	r3, r0
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f9e4 	bl	8004398 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	2080      	movs	r0, #128	; 0x80
 8003fd4:	f000 fe59 	bl	8004c8a <are_settings_changed>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003fde:	f107 020f 	add.w	r2, r7, #15
 8003fe2:	f107 0110 	add.w	r1, r7, #16
 8003fe6:	f107 0014 	add.w	r0, r7, #20
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f000 fa2b 	bl	8004446 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	2040      	movs	r0, #64	; 0x40
 8003ff4:	f000 fe49 	bl	8004c8a <are_settings_changed>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8003ffe:	f107 020f 	add.w	r2, r7, #15
 8004002:	f107 0110 	add.w	r1, r7, #16
 8004006:	f107 0014 	add.w	r0, r7, #20
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f000 fa54 	bl	80044b8 <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004016:	2b03      	cmp	r3, #3
 8004018:	d104      	bne.n	8004024 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 800401a:	6838      	ldr	r0, [r7, #0]
 800401c:	f000 f902 	bl	8004224 <validate_osr_and_odr_settings>
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8004024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	461a      	mov	r2, r3
 8004030:	f107 0110 	add.w	r1, r7, #16
 8004034:	f107 0014 	add.w	r0, r7, #20
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f7ff fc28 	bl	800388e <bmp3_set_regs>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08020efc 	.word	0x08020efc

08004054 <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800405e:	2319      	movs	r3, #25
 8004060:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8004062:	7b78      	ldrb	r0, [r7, #13]
 8004064:	f107 010e 	add.w	r1, r7, #14
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2201      	movs	r2, #1
 800406c:	f7ff fb7f 	bl	800376e <bmp3_get_regs>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8004074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d15e      	bne.n	800413a <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	32b7      	adds	r2, #183	; 0xb7
 8004084:	6810      	ldr	r0, [r2, #0]
 8004086:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8004092:	7bbb      	ldrb	r3, [r7, #14]
 8004094:	b25b      	sxtb	r3, r3
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	b25a      	sxtb	r2, r3
 800409c:	7a3b      	ldrb	r3, [r7, #8]
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 80040b8:	7bbb      	ldrb	r3, [r7, #14]
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f023 0302 	bic.w	r3, r3, #2
 80040c0:	b25a      	sxtb	r2, r3
 80040c2:	7a7b      	ldrb	r3, [r7, #9]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	b25b      	sxtb	r3, r3
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80040e0:	7bbb      	ldrb	r3, [r7, #14]
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	b25a      	sxtb	r2, r3
 80040ea:	7abb      	ldrb	r3, [r7, #10]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	b25b      	sxtb	r3, r3
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8004108:	7bbb      	ldrb	r3, [r7, #14]
 800410a:	b25b      	sxtb	r3, r3
 800410c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004110:	b25a      	sxtb	r2, r3
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	b25b      	sxtb	r3, r3
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	b25b      	sxtb	r3, r3
 800411e:	4313      	orrs	r3, r2
 8004120:	b25b      	sxtb	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8004126:	f107 010e 	add.w	r1, r7, #14
 800412a:	f107 000d 	add.w	r0, r7, #13
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2201      	movs	r2, #1
 8004132:	f7ff fbac 	bl	800388e <bmp3_set_regs>
 8004136:	4603      	mov	r3, r0
 8004138:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	32bb      	adds	r2, #187	; 0xbb
 8004158:	8812      	ldrh	r2, [r2, #0]
 800415a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 800415c:	231a      	movs	r3, #26
 800415e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8004160:	7bb8      	ldrb	r0, [r7, #14]
 8004162:	f107 010d 	add.w	r1, r7, #13
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2201      	movs	r2, #1
 800416a:	f7ff fb00 	bl	800376e <bmp3_get_regs>
 800416e:	4603      	mov	r3, r0
 8004170:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8004172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d131      	bne.n	80041de <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8004184:	7b7b      	ldrb	r3, [r7, #13]
 8004186:	b25b      	sxtb	r3, r3
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	b25a      	sxtb	r2, r3
 800418e:	7a3b      	ldrb	r3, [r7, #8]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	b25b      	sxtb	r3, r3
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	b25b      	sxtb	r3, r3
 800419a:	4313      	orrs	r3, r2
 800419c:	b25b      	sxtb	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 80041ac:	7b7b      	ldrb	r3, [r7, #13]
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	f023 0304 	bic.w	r3, r3, #4
 80041b4:	b25a      	sxtb	r2, r3
 80041b6:	7a7b      	ldrb	r3, [r7, #9]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	b25b      	sxtb	r3, r3
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	4313      	orrs	r3, r2
 80041c4:	b25b      	sxtb	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80041ca:	f107 010d 	add.w	r1, r7, #13
 80041ce:	f107 000e 	add.w	r0, r7, #14
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f7ff fb5a 	bl	800388e <bmp3_set_regs>
 80041da:	4603      	mov	r3, r0
 80041dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80041de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80041f2:	f107 0108 	add.w	r1, r7, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2204      	movs	r2, #4
 80041fa:	201c      	movs	r0, #28
 80041fc:	f7ff fab7 	bl	800376e <bmp3_get_regs>
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fe27 	bl	8003e64 <parse_odr_filter_settings>

    return rslt;
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b098      	sub	sp, #96	; 0x60
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 800422c:	23ea      	movs	r3, #234	; 0xea
 800422e:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8004234:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <validate_osr_and_odr_settings+0x84>)
 8004236:	f107 030c 	add.w	r3, r7, #12
 800423a:	4611      	mov	r1, r2
 800423c:	2248      	movs	r2, #72	; 0x48
 800423e:	4618      	mov	r0, r3
 8004240:	f01c f9f6 	bl	8020630 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d006      	beq.n	800425c <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f842 	bl	80042d8 <calculate_press_meas_time>
 8004254:	4602      	mov	r2, r0
 8004256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004258:	4413      	add	r3, r2
 800425a:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f866 	bl	8004338 <calculate_temp_meas_time>
 800426c:	4602      	mov	r2, r0
 800426e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004270:	4413      	add	r3, r2
 8004272:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8004274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004278:	4413      	add	r3, r2
 800427a:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	3360      	adds	r3, #96	; 0x60
 8004286:	443b      	add	r3, r7
 8004288:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800428c:	4619      	mov	r1, r3
 800428e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004290:	f000 f80c 	bl	80042ac <verify_meas_time_and_odr_duration>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 800429a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3760      	adds	r7, #96	; 0x60
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	08020f00 	.word	0x08020f00

080042ac <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d202      	bcs.n	80042c4 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	e001      	b.n	80042c8 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 80042c4:	23fd      	movs	r3, #253	; 0xfd
 80042c6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80042c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
	...

080042d8 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	f107 030c 	add.w	r3, r7, #12
 80042e6:	32b3      	adds	r2, #179	; 0xb3
 80042e8:	6810      	ldr	r0, [r2, #0]
 80042ea:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 80042f8:	7b3b      	ldrb	r3, [r7, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004300:	f000 fca2 	bl	8004c48 <pow_bmp3>
 8004304:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8004306:	490a      	ldr	r1, [pc, #40]	; (8004330 <calculate_press_meas_time+0x58>)
 8004308:	6978      	ldr	r0, [r7, #20]
 800430a:	f7fc fd6d 	bl	8000de8 <__aeabi_fmul>
 800430e:	4603      	mov	r3, r0
 8004310:	4908      	ldr	r1, [pc, #32]	; (8004334 <calculate_press_meas_time+0x5c>)
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc fc60 	bl	8000bd8 <__addsf3>
 8004318:	4603      	mov	r3, r0
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc feda 	bl	80010d4 <__aeabi_f2uiz>
 8004320:	4603      	mov	r3, r0
 8004322:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8004324:	693b      	ldr	r3, [r7, #16]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	44fa0000 	.word	0x44fa0000
 8004334:	43c40000 	.word	0x43c40000

08004338 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	f107 030c 	add.w	r3, r7, #12
 8004346:	32b3      	adds	r2, #179	; 0xb3
 8004348:	6810      	ldr	r0, [r2, #0]
 800434a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004354:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8004358:	7b7b      	ldrb	r3, [r7, #13]
 800435a:	461a      	mov	r2, r3
 800435c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004360:	f000 fc72 	bl	8004c48 <pow_bmp3>
 8004364:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8004366:	490a      	ldr	r1, [pc, #40]	; (8004390 <calculate_temp_meas_time+0x58>)
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	f7fc fd3d 	bl	8000de8 <__aeabi_fmul>
 800436e:	4603      	mov	r3, r0
 8004370:	4908      	ldr	r1, [pc, #32]	; (8004394 <calculate_temp_meas_time+0x5c>)
 8004372:	4618      	mov	r0, r3
 8004374:	f7fc fc30 	bl	8000bd8 <__addsf3>
 8004378:	4603      	mov	r3, r0
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc feaa 	bl	80010d4 <__aeabi_f2uiz>
 8004380:	4603      	mov	r3, r0
 8004382:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8004384:	693b      	ldr	r3, [r7, #16]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	44fa0000 	.word	0x44fa0000
 8004394:	439c8000 	.word	0x439c8000

08004398 <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	32b3      	adds	r2, #179	; 0xb3
 80043ae:	6810      	ldr	r0, [r2, #0]
 80043b0:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d03f      	beq.n	800443c <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d013      	beq.n	80043ee <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	b25a      	sxtb	r2, r3
 80043d2:	7d3b      	ldrb	r3, [r7, #20]
 80043d4:	b25b      	sxtb	r3, r3
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	b25b      	sxtb	r3, r3
 80043dc:	4313      	orrs	r3, r2
 80043de:	b25a      	sxtb	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	440b      	add	r3, r1
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d014      	beq.n	8004422 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004402:	b25a      	sxtb	r2, r3
 8004404:	7d7b      	ldrb	r3, [r7, #21]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	b25b      	sxtb	r3, r3
 800440a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800440e:	b25b      	sxtb	r3, r3
 8004410:	4313      	orrs	r3, r2
 8004412:	b25a      	sxtb	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	440b      	add	r3, r1
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4413      	add	r3, r2
 800442c:	221c      	movs	r2, #28
 800442e:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	701a      	strb	r2, [r3, #0]
    }
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	33b3      	adds	r3, #179	; 0xb3
 8004458:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	78db      	ldrb	r3, [r3, #3]
 800445e:	2b11      	cmp	r3, #17
 8004460:	d902      	bls.n	8004468 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2211      	movs	r2, #17
 8004466:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	3301      	adds	r3, #1
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b25b      	sxtb	r3, r3
 8004470:	f023 031f 	bic.w	r3, r3, #31
 8004474:	b25a      	sxtb	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	78db      	ldrb	r3, [r3, #3]
 800447a:	b25b      	sxtb	r3, r3
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	b25b      	sxtb	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b25a      	sxtb	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	4619      	mov	r1, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	440b      	add	r3, r1
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	221d      	movs	r2, #29
 80044a0:	701a      	strb	r2, [r3, #0]
    (*len)++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	701a      	strb	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	32b3      	adds	r2, #179	; 0xb3
 80044ce:	6810      	ldr	r0, [r2, #0]
 80044d0:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3303      	adds	r3, #3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	f023 030e 	bic.w	r3, r3, #14
 80044de:	b25a      	sxtb	r2, r3
 80044e0:	7dbb      	ldrb	r3, [r7, #22]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	b25b      	sxtb	r3, r3
 80044e6:	f003 030e 	and.w	r3, r3, #14
 80044ea:	b25b      	sxtb	r3, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	b25a      	sxtb	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	440b      	add	r3, r1
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	221f      	movs	r2, #31
 800450a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	b2da      	uxtb	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	701a      	strb	r2, [r3, #0]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3301      	adds	r3, #1
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3302      	adds	r3, #2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	431a      	orrs	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3303      	adds	r3, #3
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3305      	adds	r3, #5
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	431a      	orrs	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	431a      	orrs	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	605a      	str	r2, [r3, #4]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d022      	beq.n	80045e8 <compensate_data+0x60>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01f      	beq.n	80045e8 <compensate_data+0x60>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01c      	beq.n	80045e8 <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	68b8      	ldr	r0, [r7, #8]
 80045bc:	f000 f9e4 	bl	8004988 <compensate_temperature>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f000 fa19 	bl	8004a0e <compensate_pressure>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 80045e6:	e001      	b.n	80045ec <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80045e8:	23ff      	movs	r3, #255	; 0xff
 80045ea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80045ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3390      	adds	r3, #144	; 0x90
 8004606:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	3318      	adds	r3, #24
 800460c:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	4ba4      	ldr	r3, [pc, #656]	; (80048a4 <parse_calib_data+0x2ac>)
 8004614:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3301      	adds	r3, #1
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	b21a      	sxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b21b      	sxth	r3, r3
 8004628:	4313      	orrs	r3, r2
 800462a:	b21b      	sxth	r3, r3
 800462c:	b29a      	uxth	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fb ff3c 	bl	80004b4 <__aeabi_ui2d>
 800463c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004640:	f7fc f8dc 	bl	80007fc <__aeabi_ddiv>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	6939      	ldr	r1, [r7, #16]
 800464a:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3303      	adds	r3, #3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	b21a      	sxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3302      	adds	r3, #2
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b21b      	sxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b21b      	sxth	r3, r3
 8004664:	b29a      	uxth	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	4b8e      	ldr	r3, [pc, #568]	; (80048a8 <parse_calib_data+0x2b0>)
 8004670:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	885b      	ldrh	r3, [r3, #2]
 8004678:	4618      	mov	r0, r3
 800467a:	f7fb ff1b 	bl	80004b4 <__aeabi_ui2d>
 800467e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004682:	f7fc f8bb 	bl	80007fc <__aeabi_ddiv>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	6939      	ldr	r1, [r7, #16]
 800468c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b25a      	sxtb	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	4b82      	ldr	r3, [pc, #520]	; (80048ac <parse_calib_data+0x2b4>)
 80046a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb ff11 	bl	80004d4 <__aeabi_i2d>
 80046b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b6:	f7fc f8a1 	bl	80007fc <__aeabi_ddiv>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3306      	adds	r3, #6
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	b21a      	sxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3305      	adds	r3, #5
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b21b      	sxth	r3, r3
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b21a      	sxth	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	4b73      	ldr	r3, [pc, #460]	; (80048b0 <parse_calib_data+0x2b8>)
 80046e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80046ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fb feee 	bl	80004d4 <__aeabi_i2d>
 80046f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fc:	f7fc f87e 	bl	80007fc <__aeabi_ddiv>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	6939      	ldr	r1, [r7, #16]
 8004706:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3308      	adds	r3, #8
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	b21a      	sxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3307      	adds	r3, #7
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	b21b      	sxth	r3, r3
 800471c:	4313      	orrs	r3, r2
 800471e:	b21a      	sxth	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <parse_calib_data+0x2bc>)
 800472a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004734:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fecb 	bl	80004d4 <__aeabi_i2d>
 800473e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004742:	f7fc f85b 	bl	80007fc <__aeabi_ddiv>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	6939      	ldr	r1, [r7, #16]
 800474c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3309      	adds	r3, #9
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b25a      	sxtb	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	4b55      	ldr	r3, [pc, #340]	; (80048b8 <parse_calib_data+0x2c0>)
 8004762:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fb feb1 	bl	80004d4 <__aeabi_i2d>
 8004772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004776:	f7fc f841 	bl	80007fc <__aeabi_ddiv>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	6939      	ldr	r1, [r7, #16]
 8004780:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	330a      	adds	r3, #10
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	b25a      	sxtb	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	4b49      	ldr	r3, [pc, #292]	; (80048bc <parse_calib_data+0x2c4>)
 8004796:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fb fe97 	bl	80004d4 <__aeabi_i2d>
 80047a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047aa:	f7fc f827 	bl	80007fc <__aeabi_ddiv>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	6939      	ldr	r1, [r7, #16]
 80047b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	330c      	adds	r3, #12
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	b21a      	sxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	330b      	adds	r3, #11
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b21b      	sxth	r3, r3
 80047ca:	4313      	orrs	r3, r2
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80047dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	899b      	ldrh	r3, [r3, #12]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fb fe65 	bl	80004b4 <__aeabi_ui2d>
 80047ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ee:	f7fc f805 	bl	80007fc <__aeabi_ddiv>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	6939      	ldr	r1, [r7, #16]
 80047f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	330e      	adds	r3, #14
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	b21a      	sxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	330d      	adds	r3, #13
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b21b      	sxth	r3, r3
 800480e:	4313      	orrs	r3, r2
 8004810:	b21b      	sxth	r3, r3
 8004812:	b29a      	uxth	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <parse_calib_data+0x2c8>)
 800481e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	89db      	ldrh	r3, [r3, #14]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fb fe44 	bl	80004b4 <__aeabi_ui2d>
 800482c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004830:	f7fb ffe4 	bl	80007fc <__aeabi_ddiv>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	6939      	ldr	r1, [r7, #16]
 800483a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	330f      	adds	r3, #15
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b25a      	sxtb	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <parse_calib_data+0x2cc>)
 8004850:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fb fe3a 	bl	80004d4 <__aeabi_i2d>
 8004860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004864:	f7fb ffca 	bl	80007fc <__aeabi_ddiv>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	6939      	ldr	r1, [r7, #16]
 800486e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3310      	adds	r3, #16
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b25a      	sxtb	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <parse_calib_data+0x2d0>)
 8004884:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fb fe20 	bl	80004d4 <__aeabi_i2d>
 8004894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004898:	f7fb ffb0 	bl	80007fc <__aeabi_ddiv>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	6939      	ldr	r1, [r7, #16]
 80048a2:	e013      	b.n	80048cc <parse_calib_data+0x2d4>
 80048a4:	3f700000 	.word	0x3f700000
 80048a8:	41d00000 	.word	0x41d00000
 80048ac:	42f00000 	.word	0x42f00000
 80048b0:	41300000 	.word	0x41300000
 80048b4:	41c00000 	.word	0x41c00000
 80048b8:	41f00000 	.word	0x41f00000
 80048bc:	42400000 	.word	0x42400000
 80048c0:	40500000 	.word	0x40500000
 80048c4:	40700000 	.word	0x40700000
 80048c8:	40e00000 	.word	0x40e00000
 80048cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3312      	adds	r3, #18
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	b21a      	sxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3311      	adds	r3, #17
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b21b      	sxth	r3, r3
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b21a      	sxth	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <parse_calib_data+0x38c>)
 80048f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fb fdea 	bl	80004d4 <__aeabi_i2d>
 8004900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004904:	f7fb ff7a 	bl	80007fc <__aeabi_ddiv>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	6939      	ldr	r1, [r7, #16]
 800490e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3313      	adds	r3, #19
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b25a      	sxtb	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <parse_calib_data+0x38c>)
 8004924:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb fdd0 	bl	80004d4 <__aeabi_i2d>
 8004934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004938:	f7fb ff60 	bl	80007fc <__aeabi_ddiv>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	6939      	ldr	r1, [r7, #16]
 8004942:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3314      	adds	r3, #20
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	b25a      	sxtb	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800495a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8004964:	4618      	mov	r0, r3
 8004966:	f7fb fdb5 	bl	80004d4 <__aeabi_i2d>
 800496a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800496e:	f7fb ff45 	bl	80007fc <__aeabi_ddiv>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	6939      	ldr	r1, [r7, #16]
 8004978:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800497c:	bf00      	nop
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	42f00000 	.word	0x42f00000

08004988 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8004998:	69f8      	ldr	r0, [r7, #28]
 800499a:	f7fb fd8b 	bl	80004b4 <__aeabi_ui2d>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f7fb fc48 	bl	8000238 <__aeabi_dsub>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049ba:	f7fb fdf5 	bl	80005a8 <__aeabi_dmul>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80049c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049ce:	f7fb fdeb 	bl	80005a8 <__aeabi_dmul>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4610      	mov	r0, r2
 80049d8:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80049e0:	f7fb fde2 	bl	80005a8 <__aeabi_dmul>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4610      	mov	r0, r2
 80049ea:	4619      	mov	r1, r3
 80049ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f0:	f7fb fc24 	bl	800023c <__adddf3>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 8004a0e:	b5b0      	push	{r4, r5, r7, lr}
 8004a10:	b092      	sub	sp, #72	; 0x48
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a24:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004a28:	f7fb fdbe 	bl	80005a8 <__aeabi_dmul>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3c:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004a40:	2202      	movs	r2, #2
 8004a42:	f000 f901 	bl	8004c48 <pow_bmp3>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fd55 	bl	80004f8 <__aeabi_f2d>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fda7 	bl	80005a8 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8004a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a64:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004a6e:	2203      	movs	r2, #3
 8004a70:	f000 f8ea 	bl	8004c48 <pow_bmp3>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fb fd3e 	bl	80004f8 <__aeabi_f2d>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4620      	mov	r0, r4
 8004a82:	4629      	mov	r1, r5
 8004a84:	f7fb fd90 	bl	80005a8 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a92:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a9a:	f7fb fbcf 	bl	800023c <__adddf3>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aaa:	f7fb fbc7 	bl	800023c <__adddf3>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ab6:	f7fb fbc1 	bl	800023c <__adddf3>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8004ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aca:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004ace:	f7fb fd6b 	bl	80005a8 <__aeabi_dmul>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004adc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f000 f8ae 	bl	8004c48 <pow_bmp3>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fb fd02 	bl	80004f8 <__aeabi_f2d>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fd54 	bl	80005a8 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8004b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b10:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004b14:	2203      	movs	r2, #3
 8004b16:	f000 f897 	bl	8004c48 <pow_bmp3>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fceb 	bl	80004f8 <__aeabi_f2d>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4620      	mov	r0, r4
 8004b28:	4629      	mov	r1, r5
 8004b2a:	f7fb fd3d 	bl	80005a8 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fcba 	bl	80004b4 <__aeabi_ui2d>
 8004b40:	4604      	mov	r4, r0
 8004b42:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8004b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b46:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b4e:	f7fb fb75 	bl	800023c <__adddf3>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b5e:	f7fb fb6d 	bl	800023c <__adddf3>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b6e:	f7fb fb65 	bl	800023c <__adddf3>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 8004b76:	4620      	mov	r0, r4
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f7fb fd15 	bl	80005a8 <__aeabi_dmul>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb fc92 	bl	80004b4 <__aeabi_ui2d>
 8004b90:	2202      	movs	r2, #2
 8004b92:	f000 f859 	bl	8004c48 <pow_bmp3>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fb fcad 	bl	80004f8 <__aeabi_f2d>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8004ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba8:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004bb8:	f7fb fcf6 	bl	80005a8 <__aeabi_dmul>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	f7fb fb3a 	bl	800023c <__adddf3>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004bd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004bd8:	f7fb fce6 	bl	80005a8 <__aeabi_dmul>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fb fc63 	bl	80004b4 <__aeabi_ui2d>
 8004bee:	2203      	movs	r2, #3
 8004bf0:	f000 f82a 	bl	8004c48 <pow_bmp3>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fb fc7e 	bl	80004f8 <__aeabi_f2d>
 8004bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004c02:	f7fb fcd1 	bl	80005a8 <__aeabi_dmul>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c0e:	f7fb fb15 	bl	800023c <__adddf3>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 8004c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c22:	f7fb fb0b 	bl	800023c <__adddf3>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c2e:	f7fb fb05 	bl	800023c <__adddf3>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 8004c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	3748      	adds	r7, #72	; 0x48
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bdb0      	pop	{r4, r5, r7, pc}

08004c48 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 8004c56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004c5a:	617b      	str	r3, [r7, #20]

    while (power != 0)
 8004c5c:	e00d      	b.n	8004c7a <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 8004c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c62:	f7fb ff63 	bl	8000b2c <__aeabi_d2f>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f7fc f8bc 	bl	8000de8 <__aeabi_fmul>
 8004c70:	4603      	mov	r3, r0
 8004c72:	617b      	str	r3, [r7, #20]
        power--;
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1ee      	bne.n	8004c5e <pow_bmp3+0x16>
    }

    return pow_output;
 8004c80:	697b      	ldr	r3, [r7, #20]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
 8004ca6:	e001      	b.n	8004cac <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr

08004cb8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00f      	beq.n	8004ce6 <null_ptr_check+0x2e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <null_ptr_check+0x2e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <null_ptr_check+0x2e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8004ce6:	23ff      	movs	r3, #255	; 0xff
 8004ce8:	73fb      	strb	r3, [r7, #15]
 8004cea:	e001      	b.n	8004cf0 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
	...

08004d00 <_ZN6BMP390C1Ev>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390() {
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  _meas_end = 0;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	a313      	add	r3, pc, #76	; (adr r3, 8004d80 <_ZN6BMP390C1Ev+0x80>)
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	a310      	add	r3, pc, #64	; (adr r3, 8004d80 <_ZN6BMP390C1Ev+0x80>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	22ee      	movs	r2, #238	; 0xee
 8004d4c:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0c      	ldr	r2, [pc, #48]	; (8004d88 <_ZN6BMP390C1Ev+0x88>)
 8004d58:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <_ZN6BMP390C1Ev+0x8c>)
 8004d5e:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <_ZN6BMP390C1Ev+0x90>)
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	00000000 	.word	0x00000000
 8004d84:	c08f3800 	.word	0xc08f3800
 8004d88:	080050e7 	.word	0x080050e7
 8004d8c:	08005095 	.word	0x08005095
 8004d90:	08004f71 	.word	0x08004f71

08004d94 <_ZN6BMP3904initEP19__I2C_HandleTypeDef>:

bool BMP390::init(I2C_HandleTypeDef *pntr_hi2c){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	the_sensor.intf_ptr = (void *)pntr_hi2c;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	615a      	str	r2, [r3, #20]

	int8_t rslt = BMP3_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3310      	adds	r3, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fe59 	bl	8003a64 <bmp3_soft_reset>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8004db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x2e>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e028      	b.n	8004e14 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	rslt = bmp3_init(&the_sensor);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fc8a 	bl	80036e0 <bmp3_init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f9af 	bl	8005138 <_ZL23validate_trimming_paramP8bmp3_dev>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 8004dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x56>
 8004de6:	2300      	movs	r3, #0
 8004de8:	e014      	b.n	8004e14 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 8004dea:	2100      	movs	r1, #0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8d5 	bl	8004f9c <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8004df2:	2100      	movs	r1, #0
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8f2 	bl	8004fde <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f90f 	bl	8005020 <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8004e02:	2103      	movs	r1, #3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f92c 	bl	8005062 <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8004e12:	2301      	movs	r3, #1
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  performReading();
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f81f 	bl	8004e68 <_ZN6BMP39014performReadingEv>
  return temperature;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f7fb fe7a 	bl	8000b2c <__aeabi_d2f>
 8004e38:	4603      	mov	r3, r0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_ZN6BMP39012readPressureEv>:

float BMP390::readPressure(void) {
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  performReading();
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f80c 	bl	8004e68 <_ZN6BMP39014performReadingEv>
  return pressure;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f7fb fe67 	bl	8000b2c <__aeabi_d2f>
 8004e5e:	4603      	mov	r3, r0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZN6BMP39014performReadingEv>:

  float atmospheric = readPressure() / 100.0F; //convert to units of hPa
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
}

bool BMP390::performReading(void) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 8004e80:	8bfb      	ldrh	r3, [r7, #30]
 8004e82:	f043 0304 	orr.w	r3, r3, #4
 8004e86:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 8004e88:	7f7b      	ldrb	r3, [r7, #29]
 8004e8a:	f043 0302 	orr.w	r3, r3, #2
 8004e8e:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	f043 0320 	orr.w	r3, r3, #32
 8004ea0:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 8004eaa:	8bfb      	ldrh	r3, [r7, #30]
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 8004eb2:	7f7b      	ldrb	r3, [r7, #29]
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 8004ec4:	8bfb      	ldrh	r3, [r7, #30]
 8004ec6:	f043 0310 	orr.w	r3, r3, #16
 8004eca:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 8004ed6:	8bfb      	ldrh	r3, [r7, #30]
 8004ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004edc:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 8004ee8:	8bfb      	ldrh	r3, [r7, #30]
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 8004ef0:	8bfa      	ldrh	r2, [r7, #30]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3310      	adds	r3, #16
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f7fe fd5d 	bl	80039b8 <bmp3_set_sensor_settings>
 8004efe:	4603      	mov	r3, r0
 8004f00:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 8004f02:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e02c      	b.n	8004f68 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3310      	adds	r3, #16
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fdfa 	bl	8003b14 <bmp3_set_op_mode>
 8004f20:	4603      	mov	r3, r0
 8004f22:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004f24:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e01b      	b.n	8004f68 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f103 0210 	add.w	r2, r3, #16
 8004f36:	f107 0108 	add.w	r1, r7, #8
 8004f3a:	7f7b      	ldrb	r3, [r7, #29]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe fe58 	bl	8003bf2 <bmp3_get_sensor_data>
 8004f42:	4603      	mov	r3, r0
 8004f44:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004f46:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e00a      	b.n	8004f68 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 8004f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 8004f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 8004f66:	2301      	movs	r3, #1
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <_ZL10delay_usecmPv+0x28>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fd fc85 	bl	8002898 <HAL_Delay>
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	10624dd3 	.word	0x10624dd3

08004f9c <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d901      	bls.n	8004fb2 <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e010      	b.n	8004fd4 <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004fc8:	e003      	b.n	8004fd2 <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8004fd2:	2301      	movs	r3, #1
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	2b05      	cmp	r3, #5
 8004fee:	d901      	bls.n	8004ff4 <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e010      	b.n	8005016 <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 800500a:	e003      	b.n	8005014 <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8005014:	2301      	movs	r3, #1
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	2b07      	cmp	r3, #7
 8005030:	d901      	bls.n	8005036 <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 8005032:	2300      	movs	r3, #0
 8005034:	e010      	b.n	8005058 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800504c:	e003      	b.n	8005056 <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 8005056:	2301      	movs	r3, #1
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	2b11      	cmp	r3, #17
 8005072:	d901      	bls.n	8005078 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 8005074:	2300      	movs	r3, #0
 8005076:	e008      	b.n	800508a <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	78fa      	ldrb	r2, [r7, #3]
 800507c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 8005088:	2301      	movs	r3, #1
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af04      	add	r7, sp, #16
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4603      	mov	r3, r0
 80050a2:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050b4:	9102      	str	r1, [sp, #8]
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2301      	movs	r3, #1
 80050be:	21ee      	movs	r1, #238	; 0xee
 80050c0:	6978      	ldr	r0, [r7, #20]
 80050c2:	f002 fec1 	bl	8007e48 <HAL_I2C_Mem_Write>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050da:	e000      	b.n	80050de <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b08a      	sub	sp, #40	; 0x28
 80050ea:	af04      	add	r7, sp, #16
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005106:	9102      	str	r1, [sp, #8]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	2301      	movs	r3, #1
 8005110:	21ee      	movs	r1, #238	; 0xee
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f002 ffac 	bl	8008070 <HAL_I2C_Mem_Read>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8005128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800512c:	e000      	b.n	8005130 <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 8005140:	23ff      	movs	r3, #255	; 0xff
 8005142:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8005146:	f107 010c 	add.w	r1, r7, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2215      	movs	r2, #21
 800514e:	2031      	movs	r0, #49	; 0x31
 8005150:	f7fe fb0d 	bl	800376e <bmp3_get_regs>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 800515a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800515e:	2b00      	cmp	r3, #0
 8005160:	d133      	bne.n	80051ca <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005168:	e013      	b.n	8005192 <_ZL23validate_trimming_paramP8bmp3_dev+0x5a>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 800516a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800516e:	3328      	adds	r3, #40	; 0x28
 8005170:	443b      	add	r3, r7
 8005172:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8005176:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f82a 	bl	80051d6 <_ZL7cal_crchh>
 8005182:	4603      	mov	r3, r0
 8005184:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 8005188:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800518c:	3301      	adds	r3, #1
 800518e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005192:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005196:	2b14      	cmp	r3, #20
 8005198:	d9e7      	bls.n	800516a <_ZL23validate_trimming_paramP8bmp3_dev+0x32>
    }

    crc = (crc ^ 0xFF);
 800519a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800519e:	43db      	mvns	r3, r3
 80051a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 80051a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	2030      	movs	r0, #48	; 0x30
 80051ae:	f7fe fade 	bl	800376e <bmp3_get_regs>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 80051b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d002      	beq.n	80051ca <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 80051c4:	23ff      	movs	r3, #255	; 0xff
 80051c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 80051ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3728      	adds	r7, #40	; 0x28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	460a      	mov	r2, r1
 80051e0:	71fb      	strb	r3, [r7, #7]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 80051e6:	231d      	movs	r3, #29
 80051e8:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 80051ea:	2300      	movs	r3, #0
 80051ec:	73bb      	strb	r3, [r7, #14]
 80051ee:	e01c      	b.n	800522a <_ZL7cal_crchh+0x54>
    if ((seed & 0x80) ^ (data & 0x80)) {
 80051f0:	79fa      	ldrb	r2, [r7, #7]
 80051f2:	79bb      	ldrb	r3, [r7, #6]
 80051f4:	4053      	eors	r3, r2
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da02      	bge.n	8005204 <_ZL7cal_crchh+0x2e>
      var2 = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
 8005202:	e001      	b.n	8005208 <_ZL7cal_crchh+0x32>
    } else {
      var2 = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 800520e:	79bb      	ldrb	r3, [r7, #6]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8005214:	7b7a      	ldrb	r2, [r7, #13]
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	fb12 f303 	smulbb	r3, r2, r3
 800521c:	b2da      	uxtb	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	4053      	eors	r3, r2
 8005222:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8005224:	7bbb      	ldrb	r3, [r7, #14]
 8005226:	3301      	adds	r3, #1
 8005228:	73bb      	strb	r3, [r7, #14]
 800522a:	7bbb      	ldrb	r3, [r7, #14]
 800522c:	2b07      	cmp	r3, #7
 800522e:	d9df      	bls.n	80051f0 <_ZL7cal_crchh+0x1a>
  }

  return (int8_t)seed;
 8005230:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr

0800523e <_ZN12LSM303_AccelC1Ev>:
#include <lsm303_accel.hpp>

LSM303_Accel::LSM303_Accel() {
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  pntr_hi2c = NULL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

  // Initialize the raw accel data
  data.x = 0;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
  data.y = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	60da      	str	r2, [r3, #12]
  data.z = 0;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	611a      	str	r2, [r3, #16]
}
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <_ZN12LSM303_Accel5writeEhPKhh>:

bool LSM303_Accel::write(const uint8_t reg_location, const uint8_t *data, const uint8_t len){
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af04      	add	r7, sp, #16
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	461a      	mov	r2, r3
 800527c:	460b      	mov	r3, r1
 800527e:	72fb      	strb	r3, [r7, #11]
 8005280:	4613      	mov	r3, r2
 8005282:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	b29a      	uxth	r2, r3
 800528c:	7abb      	ldrb	r3, [r7, #10]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005294:	9102      	str	r1, [sp, #8]
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2301      	movs	r3, #1
 800529e:	2132      	movs	r1, #50	; 0x32
 80052a0:	f002 fdd2 	bl	8007e48 <HAL_I2C_Mem_Write>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <_ZN12LSM303_Accel5writeEhPKhh+0x54>
    // Error handling: You can handle write errors here
  	APP_LOG(TS_ON, VLEVEL_M,"Error writing \r\n");
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <_ZN12LSM303_Accel5writeEhPKhh+0x60>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	2100      	movs	r1, #0
 80052ba:	2002      	movs	r0, #2
 80052bc:	f01a fe6c 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    return false;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <_ZN12LSM303_Accel5writeEhPKhh+0x56>
  }
  return true;
 80052c4:	2301      	movs	r3, #1
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	08020f48 	.word	0x08020f48

080052d4 <_ZN12LSM303_Accel4readEhPhh>:

bool LSM303_Accel::read(const uint8_t reg_location, uint8_t *data, const uint8_t len){
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af04      	add	r7, sp, #16
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	461a      	mov	r2, r3
 80052e0:	460b      	mov	r3, r1
 80052e2:	72fb      	strb	r3, [r7, #11]
 80052e4:	4613      	mov	r3, r2
 80052e6:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	7afb      	ldrb	r3, [r7, #11]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	7abb      	ldrb	r3, [r7, #10]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052f8:	9102      	str	r1, [sp, #8]
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2301      	movs	r3, #1
 8005302:	2132      	movs	r1, #50	; 0x32
 8005304:	f002 feb4 	bl	8008070 <HAL_I2C_Mem_Read>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	bf14      	ite	ne
 800530e:	2301      	movne	r3, #1
 8005310:	2300      	moveq	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <_ZN12LSM303_Accel4readEhPhh+0x48>
    // Error handling: You can handle write errors here
    return false;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <_ZN12LSM303_Accel4readEhPhh+0x4a>
  }
  return true;
 800531c:	2301      	movs	r3, #1
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>:

bool LSM303_Accel::init(I2C_HandleTypeDef *_pntr_hi2c) {
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
	pntr_hi2c = _pntr_hi2c;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	601a      	str	r2, [r3, #0]
  uint8_t len = 1;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]

  uint8_t reg_data = 0x57; // Enable the accelerometer (100Hz)
 800533a:	2357      	movs	r3, #87	; 0x57
 800533c:	73bb      	strb	r3, [r7, #14]
  if ( write(LSM303_REGISTER_ACCEL_CTRL_REG1_A, &reg_data, len) ){
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	f107 020e 	add.w	r2, r7, #14
 8005344:	2120      	movs	r1, #32
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff ff92 	bl	8005270 <_ZN12LSM303_Accel5writeEhPKhh>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00e      	beq.n	8005370 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
    if ( read(LSM303_REGISTER_ACCEL_WHO_AM_I, &reg_data, len) ) {
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	f107 020e 	add.w	r2, r7, #14
 8005358:	210f      	movs	r1, #15
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ffba 	bl	80052d4 <_ZN12LSM303_Accel4readEhPhh>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
      if (reg_data == 0x33) return true; //confirm that we are talking
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	2b33      	cmp	r3, #51	; 0x33
 800536a:	d101      	bne.n	8005370 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4c>
    }
  }
  return false; //something went wrong
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <_ZN17EnvionmentSensorsC1Ev>:
#include <env_sensors.hpp>


//#define IGNORE_ENV_SENSORS

EnvionmentSensors::EnvionmentSensors(){ }
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ff5a 	bl	800523e <_ZN12LSM303_AccelC1Ev>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3318      	adds	r3, #24
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fcb6 	bl	8004d00 <_ZN6BMP390C1Ev>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>:

bool EnvionmentSensors::init(I2C_HandleTypeDef *pntr_hi2c){
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
	APP_LOG(TS_ON, VLEVEL_M, "env sensors i2c interface: %d \r\n", pntr_hi2c);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4b28      	ldr	r3, [pc, #160]	; (8005450 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb0>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	2100      	movs	r1, #0
 80053b4:	2002      	movs	r0, #2
 80053b6:	f01a fdef 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
	if( lsm_accel.init(pntr_hi2c) ){
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff ffb1 	bl	8005326 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00f      	beq.n	80053ea <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x4a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup valid \r\n");
 80053ca:	4b22      	ldr	r3, [pc, #136]	; (8005454 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb4>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	2100      	movs	r1, #0
 80053d0:	2002      	movs	r0, #2
 80053d2:	f01a fde1 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
		return false;
	}

	if( bmp.init(pntr_hi2c) ){
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3318      	adds	r3, #24
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fcd9 	bl	8004d94 <_ZN6BMP3904initEP19__I2C_HandleTypeDef>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d028      	beq.n	800543a <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x9a>
 80053e8:	e007      	b.n	80053fa <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x5a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb8>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	2100      	movs	r1, #0
 80053f0:	2002      	movs	r0, #2
 80053f2:	f01a fdd1 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e026      	b.n	8005448 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xbc>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	2100      	movs	r1, #0
 8005400:	2002      	movs	r0, #2
 8005402:	f01a fdc9 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
		return false;
	}
	bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3318      	adds	r3, #24
 800540a:	2103      	movs	r1, #3
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fdc5 	bl	8004f9c <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3318      	adds	r3, #24
 8005416:	2102      	movs	r1, #2
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fde0 	bl	8004fde <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3318      	adds	r3, #24
 8005422:	2102      	movs	r1, #2
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fdfb 	bl	8005020 <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3318      	adds	r3, #24
 800542e:	2102      	movs	r1, #2
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fe16 	bl	8005062 <_ZN6BMP39017setOutputDataRateEh>

	return true;
 8005436:	2301      	movs	r3, #1
 8005438:	e006      	b.n	8005448 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xc0>)
 800543c:	2201      	movs	r2, #1
 800543e:	2100      	movs	r1, #0
 8005440:	2002      	movs	r0, #2
 8005442:	f01a fda9 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	08020f5c 	.word	0x08020f5c
 8005454:	08020f80 	.word	0x08020f80
 8005458:	08020f98 	.word	0x08020f98
 800545c:	08020fb0 	.word	0x08020fb0
 8005460:	08020fc8 	.word	0x08020fc8

08005464 <_ZN17EnvionmentSensors11getPressureEv>:

float EnvionmentSensors::getPressure(){
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	return bmp.readPressure();
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3318      	adds	r3, #24
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fce6 	bl	8004e42 <_ZN6BMP39012readPressureEv>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getTemperature(){
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3318      	adds	r3, #24
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fcc5 	bl	8004e1c <_ZN6BMP39015readTemperatureEv>
 8005492:	4603      	mov	r3, r0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80054a2:	1d3b      	adds	r3, r7, #4
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80054b0:	2310      	movs	r3, #16
 80054b2:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80054b4:	2301      	movs	r3, #1
 80054b6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054bc:	2303      	movs	r3, #3
 80054be:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054c8:	f002 f9d2 	bl	8007870 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80054cc:	2320      	movs	r3, #32
 80054ce:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054d8:	f002 f9ca 	bl	8007870 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80054dc:	2200      	movs	r2, #0
 80054de:	2120      	movs	r1, #32
 80054e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054e4:	f002 fc09 	bl	8007cfa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80054e8:	2200      	movs	r2, #0
 80054ea:	2110      	movs	r1, #16
 80054ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f0:	f002 fc03 	bl	8007cfa <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d83f      	bhi.n	8005590 <BSP_RADIO_ConfigRFSwitch+0x90>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	08005529 	.word	0x08005529
 800551c:	08005543 	.word	0x08005543
 8005520:	0800555d 	.word	0x0800555d
 8005524:	08005577 	.word	0x08005577
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8005528:	2200      	movs	r2, #0
 800552a:	2110      	movs	r1, #16
 800552c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005530:	f002 fbe3 	bl	8007cfa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8005534:	2200      	movs	r2, #0
 8005536:	2120      	movs	r1, #32
 8005538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800553c:	f002 fbdd 	bl	8007cfa <HAL_GPIO_WritePin>
      break;      
 8005540:	e027      	b.n	8005592 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8005542:	2201      	movs	r2, #1
 8005544:	2110      	movs	r1, #16
 8005546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800554a:	f002 fbd6 	bl	8007cfa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800554e:	2200      	movs	r2, #0
 8005550:	2120      	movs	r1, #32
 8005552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005556:	f002 fbd0 	bl	8007cfa <HAL_GPIO_WritePin>
      break;
 800555a:	e01a      	b.n	8005592 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800555c:	2201      	movs	r2, #1
 800555e:	2110      	movs	r1, #16
 8005560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005564:	f002 fbc9 	bl	8007cfa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8005568:	2201      	movs	r2, #1
 800556a:	2120      	movs	r1, #32
 800556c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005570:	f002 fbc3 	bl	8007cfa <HAL_GPIO_WritePin>
      break;
 8005574:	e00d      	b.n	8005592 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8005576:	2200      	movs	r2, #0
 8005578:	2110      	movs	r1, #16
 800557a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800557e:	f002 fbbc 	bl	8007cfa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8005582:	2201      	movs	r2, #1
 8005584:	2120      	movs	r1, #32
 8005586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800558a:	f002 fbb6 	bl	8007cfa <HAL_GPIO_WritePin>
      break;
 800558e:	e000      	b.n	8005592 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8005590:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80055a0:	2302      	movs	r3, #2
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80055ae:	2301      	movs	r3, #1
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80055bc:	2301      	movs	r3, #1
}
 80055be:	4618      	mov	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	4603      	mov	r3, r0
 80055ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80055d6:	230f      	movs	r3, #15
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e001      	b.n	80055e0 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80055dc:	2316      	movs	r3, #22
 80055de:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80055e0:	68fb      	ldr	r3, [r7, #12]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <_Z11packExpDataPK7ExpDataPh>:
	SET_BIAS = 0x04
};

const int expDataLen = 8;

void packExpData(const ExpData *data, uint8_t *buf){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
	int32_t SiPM_Temp = (int32_t)(data->SiPM_Temp * 100.0);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fa ff7c 	bl	80004f8 <__aeabi_f2d>
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <_Z11packExpDataPK7ExpDataPh+0xb4>)
 8005606:	f7fa ffcf 	bl	80005a8 <__aeabi_dmul>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f7fb fa63 	bl	8000adc <__aeabi_d2iz>
 8005616:	4603      	mov	r3, r0
 8005618:	60fb      	str	r3, [r7, #12]
	int32_t SiPM_Signal = (int32_t)(data->SiPM_Signal * 100.0);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fa ff6a 	bl	80004f8 <__aeabi_f2d>
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <_Z11packExpDataPK7ExpDataPh+0xb4>)
 800562a:	f7fa ffbd 	bl	80005a8 <__aeabi_dmul>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4610      	mov	r0, r2
 8005634:	4619      	mov	r1, r3
 8005636:	f7fb fa51 	bl	8000adc <__aeabi_d2iz>
 800563a:	4603      	mov	r3, r0
 800563c:	60bb      	str	r3, [r7, #8]

	buf[0] = (uint8_t)(SiPM_Temp >> 24);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	161b      	asrs	r3, r3, #24
 8005642:	b2da      	uxtb	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(SiPM_Temp >> 16);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	141a      	asrs	r2, r3, #16
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
	buf[2] = (uint8_t)(SiPM_Temp >> 8);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	121a      	asrs	r2, r3, #8
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	3302      	adds	r3, #2
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
	buf[3] = (uint8_t)(SiPM_Temp >> 0);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	3303      	adds	r3, #3
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

	buf[4] = (uint8_t)(SiPM_Signal >> 24);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	161a      	asrs	r2, r3, #24
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	3304      	adds	r3, #4
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
	buf[5] = (uint8_t)(SiPM_Signal >> 16);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	141a      	asrs	r2, r3, #16
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	3305      	adds	r3, #5
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
	buf[6] = (uint8_t)(SiPM_Signal >> 8);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	121a      	asrs	r2, r3, #8
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	3306      	adds	r3, #6
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
	buf[7] = (uint8_t)(SiPM_Signal >> 0);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	3307      	adds	r3, #7
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40590000 	.word	0x40590000

080056a4 <_Z19enterExperimentModev>:

void enterExperimentMode(void){
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
	disableLoRaWAN();
 80056aa:	f008 fc69 	bl	800df80 <disableLoRaWAN>
	MX_USART1_UART_Init();
 80056ae:	f7fd fc13 	bl	8002ed8 <MX_USART1_UART_Init>

	char msg[8];
	sprintf(msg, "hello\r\n");
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	495b      	ldr	r1, [pc, #364]	; (8005824 <_Z19enterExperimentModev+0x180>)
 80056b8:	4618      	mov	r0, r3
 80056ba:	f01a ff65 	bl	8020588 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 80056be:	f107 030c 	add.w	r3, r7, #12
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fa fd5c 	bl	8000180 <strlen>
 80056c8:	4603      	mov	r3, r0
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	f107 010c 	add.w	r1, r7, #12
 80056d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056d4:	4854      	ldr	r0, [pc, #336]	; (8005828 <_Z19enterExperimentModev+0x184>)
 80056d6:	f006 f91c 	bl	800b912 <HAL_UART_Transmit>
	uint8_t expDataBuf[8];
	uint8_t biasGain;

	while(1){
		// Wait for the command to be received
		if (HAL_UART_Receive(&huart1, rxCmdBuffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 80056da:	f107 0108 	add.w	r1, r7, #8
 80056de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056e2:	2202      	movs	r2, #2
 80056e4:	4850      	ldr	r0, [pc, #320]	; (8005828 <_Z19enterExperimentModev+0x184>)
 80056e6:	f006 f99a 	bl	800ba1e <HAL_UART_Receive>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ef      	beq.n	80056da <_Z19enterExperimentModev+0x36>
			// Extract the command from the buffer
			command = rxCmdBuffer[0];
 80056fa:	7a3b      	ldrb	r3, [r7, #8]
 80056fc:	75fb      	strb	r3, [r7, #23]

			switch(command) {
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	3b01      	subs	r3, #1
 8005702:	2b03      	cmp	r3, #3
 8005704:	d877      	bhi.n	80057f6 <_Z19enterExperimentModev+0x152>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <_Z19enterExperimentModev+0x68>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	0800571d 	.word	0x0800571d
 8005710:	0800574d 	.word	0x0800574d
 8005714:	08005781 	.word	0x08005781
 8005718:	080057ab 	.word	0x080057ab
				case RETURN_TEMP:
					expData.SiPM_Temp = detector.getSiPMtemp(true);
 800571c:	2101      	movs	r1, #1
 800571e:	4843      	ldr	r0, [pc, #268]	; (800582c <_Z19enterExperimentModev+0x188>)
 8005720:	f7fd fe5c 	bl	80033dc <_ZN8Detector11getSiPMtempEb>
 8005724:	4603      	mov	r3, r0
 8005726:	4a42      	ldr	r2, [pc, #264]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 8005728:	6013      	str	r3, [r2, #0]
					expData.SiPM_Signal = 0;
 800572a:	4b41      	ldr	r3, [pc, #260]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	605a      	str	r2, [r3, #4]
					packExpData(&expData, expDataBuf);
 8005732:	463b      	mov	r3, r7
 8005734:	4619      	mov	r1, r3
 8005736:	483e      	ldr	r0, [pc, #248]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 8005738:	f7ff ff58 	bl	80055ec <_Z11packExpDataPK7ExpDataPh>
					HAL_UART_Transmit(&huart1, expDataBuf, expDataLen, 1000);
 800573c:	4639      	mov	r1, r7
 800573e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005742:	2208      	movs	r2, #8
 8005744:	4838      	ldr	r0, [pc, #224]	; (8005828 <_Z19enterExperimentModev+0x184>)
 8005746:	f006 f8e4 	bl	800b912 <HAL_UART_Transmit>
					break;
 800574a:	e069      	b.n	8005820 <_Z19enterExperimentModev+0x17c>
				case RETURN_SAMPLE:
					//read the dose first, otherwise the temperature will not be valid
					expData.SiPM_Signal = detector.readAccumulatedDose();
 800574c:	4837      	ldr	r0, [pc, #220]	; (800582c <_Z19enterExperimentModev+0x188>)
 800574e:	f7fd fe7a 	bl	8003446 <_ZN8Detector19readAccumulatedDoseEv>
 8005752:	4603      	mov	r3, r0
 8005754:	4a36      	ldr	r2, [pc, #216]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 8005756:	6053      	str	r3, [r2, #4]
					expData.SiPM_Temp = detector.getSiPMtemp(false);
 8005758:	2100      	movs	r1, #0
 800575a:	4834      	ldr	r0, [pc, #208]	; (800582c <_Z19enterExperimentModev+0x188>)
 800575c:	f7fd fe3e 	bl	80033dc <_ZN8Detector11getSiPMtempEb>
 8005760:	4603      	mov	r3, r0
 8005762:	4a33      	ldr	r2, [pc, #204]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 8005764:	6013      	str	r3, [r2, #0]

					packExpData(&expData, expDataBuf);
 8005766:	463b      	mov	r3, r7
 8005768:	4619      	mov	r1, r3
 800576a:	4831      	ldr	r0, [pc, #196]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 800576c:	f7ff ff3e 	bl	80055ec <_Z11packExpDataPK7ExpDataPh>
					HAL_UART_Transmit(&huart1, expDataBuf, expDataLen, 1000);
 8005770:	4639      	mov	r1, r7
 8005772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005776:	2208      	movs	r2, #8
 8005778:	482b      	ldr	r0, [pc, #172]	; (8005828 <_Z19enterExperimentModev+0x184>)
 800577a:	f006 f8ca 	bl	800b912 <HAL_UART_Transmit>
					break;
 800577e:	e04f      	b.n	8005820 <_Z19enterExperimentModev+0x17c>
				case RETURN_HELLO:
					sprintf(msg, "hi\r\n");
 8005780:	f107 030c 	add.w	r3, r7, #12
 8005784:	492b      	ldr	r1, [pc, #172]	; (8005834 <_Z19enterExperimentModev+0x190>)
 8005786:	4618      	mov	r0, r3
 8005788:	f01a fefe 	bl	8020588 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	4618      	mov	r0, r3
 8005792:	f7fa fcf5 	bl	8000180 <strlen>
 8005796:	4603      	mov	r3, r0
 8005798:	b29a      	uxth	r2, r3
 800579a:	f107 010c 	add.w	r1, r7, #12
 800579e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057a2:	4821      	ldr	r0, [pc, #132]	; (8005828 <_Z19enterExperimentModev+0x184>)
 80057a4:	f006 f8b5 	bl	800b912 <HAL_UART_Transmit>
					break;
 80057a8:	e03a      	b.n	8005820 <_Z19enterExperimentModev+0x17c>
				case SET_BIAS:
					biasGain = rxCmdBuffer[1];
 80057aa:	7a7b      	ldrb	r3, [r7, #9]
 80057ac:	75bb      	strb	r3, [r7, #22]
					if (detector.setSiPM_Bias(biasGain)){
 80057ae:	7dbb      	ldrb	r3, [r7, #22]
 80057b0:	4619      	mov	r1, r3
 80057b2:	481e      	ldr	r0, [pc, #120]	; (800582c <_Z19enterExperimentModev+0x188>)
 80057b4:	f7fd ff6c 	bl	8003690 <_ZN8Detector12setSiPM_BiasEh>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <_Z19enterExperimentModev+0x128>
						sprintf(msg, "_OK\r\n");
 80057be:	f107 030c 	add.w	r3, r7, #12
 80057c2:	491d      	ldr	r1, [pc, #116]	; (8005838 <_Z19enterExperimentModev+0x194>)
 80057c4:	4618      	mov	r0, r3
 80057c6:	f01a fedf 	bl	8020588 <siprintf>
 80057ca:	e005      	b.n	80057d8 <_Z19enterExperimentModev+0x134>
					} else {
						sprintf(msg, "bad\r\n");
 80057cc:	f107 030c 	add.w	r3, r7, #12
 80057d0:	491a      	ldr	r1, [pc, #104]	; (800583c <_Z19enterExperimentModev+0x198>)
 80057d2:	4618      	mov	r0, r3
 80057d4:	f01a fed8 	bl	8020588 <siprintf>
					}
					HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 80057d8:	f107 030c 	add.w	r3, r7, #12
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fa fccf 	bl	8000180 <strlen>
 80057e2:	4603      	mov	r3, r0
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	f107 010c 	add.w	r1, r7, #12
 80057ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ee:	480e      	ldr	r0, [pc, #56]	; (8005828 <_Z19enterExperimentModev+0x184>)
 80057f0:	f006 f88f 	bl	800b912 <HAL_UART_Transmit>
					break;
 80057f4:	e014      	b.n	8005820 <_Z19enterExperimentModev+0x17c>
				default:
					expData.SiPM_Temp = 0;
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
					expData.SiPM_Signal = 0;
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	605a      	str	r2, [r3, #4]
					packExpData(&expData, expDataBuf);
 8005806:	463b      	mov	r3, r7
 8005808:	4619      	mov	r1, r3
 800580a:	4809      	ldr	r0, [pc, #36]	; (8005830 <_Z19enterExperimentModev+0x18c>)
 800580c:	f7ff feee 	bl	80055ec <_Z11packExpDataPK7ExpDataPh>
					HAL_UART_Transmit(&huart1, expDataBuf, expDataLen, 1000);
 8005810:	4639      	mov	r1, r7
 8005812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005816:	2208      	movs	r2, #8
 8005818:	4803      	ldr	r0, [pc, #12]	; (8005828 <_Z19enterExperimentModev+0x184>)
 800581a:	f006 f87a 	bl	800b912 <HAL_UART_Transmit>
					break;
 800581e:	bf00      	nop
		if (HAL_UART_Receive(&huart1, rxCmdBuffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 8005820:	e75b      	b.n	80056da <_Z19enterExperimentModev+0x36>
 8005822:	bf00      	nop
 8005824:	08020fe0 	.word	0x08020fe0
 8005828:	20000484 	.word	0x20000484
 800582c:	20000380 	.word	0x20000380
 8005830:	20000584 	.word	0x20000584
 8005834:	08020fe8 	.word	0x08020fe8
 8005838:	08020ff0 	.word	0x08020ff0
 800583c:	08020ff8 	.word	0x08020ff8

08005840 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005844:	4b04      	ldr	r3, [pc, #16]	; (8005858 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4a03      	ldr	r2, [pc, #12]	; (8005858 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	6053      	str	r3, [r2, #4]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	e0042000 	.word	0xe0042000

0800585c <LL_DBGMCU_EnableDBGStopMode>:
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4a03      	ldr	r2, [pc, #12]	; (8005874 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8005866:	f043 0302 	orr.w	r3, r3, #2
 800586a:	6053      	str	r3, [r2, #4]
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	e0042000 	.word	0xe0042000

08005878 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a03      	ldr	r2, [pc, #12]	; (8005890 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005882:	f043 0304 	orr.w	r3, r3, #4
 8005886:	6053      	str	r3, [r2, #4]
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	e0042000 	.word	0xe0042000

08005894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800589e:	2003      	movs	r0, #3
 80058a0:	f001 f9a0 	bl	8006be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058a4:	f004 f8be 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 80058a8:	4603      	mov	r3, r0
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <HAL_Init+0x3c>)
 80058ac:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058ae:	200f      	movs	r0, #15
 80058b0:	f7fc ffd4 	bl	800285c <HAL_InitTick>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	71fb      	strb	r3, [r7, #7]
 80058be:	e001      	b.n	80058c4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058c0:	f7fc fda5 	bl	800240e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058c4:	79fb      	ldrb	r3, [r7, #7]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000000 	.word	0x20000000

080058d4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80058d8:	4b04      	ldr	r3, [pc, #16]	; (80058ec <HAL_SuspendTick+0x18>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a03      	ldr	r2, [pc, #12]	; (80058ec <HAL_SuspendTick+0x18>)
 80058de:	f023 0302 	bic.w	r3, r3, #2
 80058e2:	6013      	str	r3, [r2, #0]
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr
 80058ec:	e000e010 	.word	0xe000e010

080058f0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <HAL_ResumeTick+0x18>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a03      	ldr	r2, [pc, #12]	; (8005908 <HAL_ResumeTick+0x18>)
 80058fa:	f043 0302 	orr.w	r3, r3, #2
 80058fe:	6013      	str	r3, [r2, #0]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr
 8005908:	e000e010 	.word	0xe000e010

0800590c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8005910:	4b02      	ldr	r3, [pc, #8]	; (800591c <HAL_GetUIDw0+0x10>)
 8005912:	681b      	ldr	r3, [r3, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	1fff7590 	.word	0x1fff7590

08005920 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005924:	4b02      	ldr	r3, [pc, #8]	; (8005930 <HAL_GetUIDw1+0x10>)
 8005926:	681b      	ldr	r3, [r3, #0]
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr
 8005930:	1fff7594 	.word	0x1fff7594

08005934 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <HAL_GetUIDw2+0x10>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	1fff7598 	.word	0x1fff7598

08005948 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800594c:	f7ff ff78 	bl	8005840 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005958:	f7ff ff80 	bl	800585c <LL_DBGMCU_EnableDBGStopMode>
}
 800595c:	bf00      	nop
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8005964:	f7ff ff88 	bl	8005878 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8005968:	bf00      	nop
 800596a:	bd80      	pop	{r7, pc}

0800596c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2107      	movs	r1, #7
 80059c2:	fa01 f303 	lsl.w	r3, r1, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	401a      	ands	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2107      	movs	r1, #7
 80059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005a00:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	210f      	movs	r1, #15
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	401a      	ands	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	0e9b      	lsrs	r3, r3, #26
 8005a5e:	f003 010f 	and.w	r1, r3, #15
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	43db      	mvns	r3, r3
 8005adc:	401a      	ands	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	0219      	lsls	r1, r3, #8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b0e:	f023 0317 	bic.w	r3, r3, #23
 8005b12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b34:	f023 0317 	bic.w	r3, r3, #23
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6093      	str	r3, [r2, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b5a:	d101      	bne.n	8005b60 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b7c:	f023 0317 	bic.w	r3, r3, #23
 8005b80:	f043 0201 	orr.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr

08005b92 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f023 0317 	bic.w	r3, r3, #23
 8005ba6:	f043 0202 	orr.w	r2, r3, #2
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <LL_ADC_IsEnabled+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <LL_ADC_IsEnabled+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d101      	bne.n	8005bf4 <LL_ADC_IsDisableOngoing+0x18>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <LL_ADC_IsDisableOngoing+0x1a>
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	f023 0317 	bic.w	r3, r3, #23
 8005c14:	f043 0204 	orr.w	r2, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c36:	f023 0317 	bic.w	r3, r3, #23
 8005c3a:	f043 0210 	orr.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d101      	bne.n	8005c64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e17e      	b.n	8005f90 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb fc45 	bl	8001530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff ff44 	bl	8005b46 <LL_ADC_IsInternalRegulatorEnabled>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d115      	bne.n	8005cf0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ff18 	bl	8005afe <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cce:	4b9e      	ldr	r3, [pc, #632]	; (8005f48 <HAL_ADC_Init+0x2d8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	099b      	lsrs	r3, r3, #6
 8005cd4:	4a9d      	ldr	r2, [pc, #628]	; (8005f4c <HAL_ADC_Init+0x2dc>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	099b      	lsrs	r3, r3, #6
 8005cdc:	3301      	adds	r3, #1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ce2:	e002      	b.n	8005cea <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f9      	bne.n	8005ce4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff26 	bl	8005b46 <LL_ADC_IsInternalRegulatorEnabled>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10d      	bne.n	8005d1c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f043 0210 	orr.w	r2, r3, #16
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d10:	f043 0201 	orr.w	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff93 	bl	8005c4c <LL_ADC_REG_IsConversionOngoing>
 8005d26:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8124 	bne.w	8005f7e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 8120 	bne.w	8005f7e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d46:	f043 0202 	orr.w	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff ff30 	bl	8005bb8 <LL_ADC_IsEnabled>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 80a7 	bne.w	8005eae <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7e1b      	ldrb	r3, [r3, #24]
 8005d68:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005d6a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	7e5b      	ldrb	r3, [r3, #25]
 8005d70:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005d72:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	7e9b      	ldrb	r3, [r3, #26]
 8005d78:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005d7a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_ADC_Init+0x11a>
 8005d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d88:	e000      	b.n	8005d8c <HAL_ADC_Init+0x11c>
 8005d8a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005d8c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005d92:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	da04      	bge.n	8005da6 <HAL_ADC_Init+0x136>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	e001      	b.n	8005daa <HAL_ADC_Init+0x13a>
 8005da6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8005daa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005db2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005db4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d114      	bne.n	8005df0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	7e9b      	ldrb	r3, [r3, #26]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	e00b      	b.n	8005df0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ddc:	f043 0220 	orr.w	r2, r3, #32
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de8:	f043 0201 	orr.w	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e04:	4313      	orrs	r3, r2
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8005e16:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	69b9      	ldr	r1, [r7, #24]
 8005e20:	430b      	orrs	r3, r1
 8005e22:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e30:	4313      	orrs	r3, r2
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d111      	bne.n	8005e66 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e4e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005e54:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005e5a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	4b38      	ldr	r3, [pc, #224]	; (8005f50 <HAL_ADC_Init+0x2e0>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	6979      	ldr	r1, [r7, #20]
 8005e76:	430b      	orrs	r3, r1
 8005e78:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005e82:	d014      	beq.n	8005eae <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d00f      	beq.n	8005eae <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e96:	d00a      	beq.n	8005eae <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005e98:	4b2e      	ldr	r3, [pc, #184]	; (8005f54 <HAL_ADC_Init+0x2e4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ea8:	492a      	ldr	r1, [pc, #168]	; (8005f54 <HAL_ADC_Init+0x2e4>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2100      	movs	r1, #0
 8005eba:	f7ff fd76 	bl	80059aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4923      	ldr	r1, [pc, #140]	; (8005f58 <HAL_ADC_Init+0x2e8>)
 8005eca:	f7ff fd6e 	bl	80059aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d108      	bne.n	8005ee8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f062 020f 	orn	r2, r2, #15
 8005ee4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee6:	e017      	b.n	8005f18 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef0:	d112      	bne.n	8005f18 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	f003 031c 	and.w	r3, r3, #28
 8005f04:	f06f 020f 	mvn.w	r2, #15
 8005f08:	fa02 f103 	lsl.w	r1, r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fd61 	bl	80059e6 <LL_ADC_GetSamplingTimeCommonChannels>
 8005f24:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d116      	bne.n	8005f5c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f38:	f023 0303 	bic.w	r3, r3, #3
 8005f3c:	f043 0201 	orr.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f44:	e023      	b.n	8005f8e <HAL_ADC_Init+0x31e>
 8005f46:	bf00      	nop
 8005f48:	20000000 	.word	0x20000000
 8005f4c:	053e2d63 	.word	0x053e2d63
 8005f50:	1ffffc02 	.word	0x1ffffc02
 8005f54:	40012708 	.word	0x40012708
 8005f58:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f60:	f023 0312 	bic.w	r3, r3, #18
 8005f64:	f043 0210 	orr.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f7c:	e007      	b.n	8005f8e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	f043 0210 	orr.w	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8005f8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e07a      	b.n	80060a0 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 face 	bl	8006558 <ADC_ConversionStop>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10f      	bne.n	8005fe6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fb92 	bl	80066f0 <ADC_Disable>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fd9f 	bl	8005b24 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8005ff4:	f023 0303 	bic.w	r3, r3, #3
 8005ff8:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f240 329f 	movw	r2, #927	; 0x39f
 8006002:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68d9      	ldr	r1, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b26      	ldr	r3, [pc, #152]	; (80060a8 <HAL_ADC_DeInit+0x110>)
 8006010:	400b      	ands	r3, r1
 8006012:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006022:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0207 	bic.w	r2, r2, #7
 8006032:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8006042:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8006052:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8006072:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <HAL_ADC_DeInit+0x114>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <HAL_ADC_DeInit+0x114>)
 8006078:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800607c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fb fa84 	bl	800158c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	833e0200 	.word	0x833e0200
 80060ac:	40012708 	.word	0x40012708

080060b0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fdc5 	bl	8005c4c <LL_ADC_REG_IsConversionOngoing>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d132      	bne.n	800612e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_ADC_Start+0x26>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e02e      	b.n	8006134 <HAL_ADC_Start+0x84>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa80 	bl	80065e4 <ADC_Enable>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11a      	bne.n	8006124 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	221c      	movs	r2, #28
 800610e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fd6f 	bl	8005c00 <LL_ADC_REG_StartConversion>
 8006122:	e006      	b.n	8006132 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800612c:	e001      	b.n	8006132 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800612e:	2302      	movs	r3, #2
 8006130:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_ADC_Stop+0x16>
 800614e:	2302      	movs	r3, #2
 8006150:	e022      	b.n	8006198 <HAL_ADC_Stop+0x5c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f9fc 	bl	8006558 <ADC_ConversionStop>
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d111      	bne.n	800618e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fac0 	bl	80066f0 <ADC_Disable>
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	f043 0201 	orr.w	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d102      	bne.n	80061b8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80061b2:	2308      	movs	r3, #8
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e010      	b.n	80061da <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e077      	b.n	80062c6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80061d6:	2304      	movs	r3, #4
 80061d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80061da:	f7fc fb49 	bl	8002870 <HAL_GetTick>
 80061de:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80061e0:	e021      	b.n	8006226 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e8:	d01d      	beq.n	8006226 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80061ea:	f7fc fb41 	bl	8002870 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d302      	bcc.n	8006200 <HAL_ADC_PollForConversion+0x60>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d112      	bne.n	8006226 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	f043 0204 	orr.w	r2, r3, #4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e04f      	b.n	80062c6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0d6      	beq.n	80061e2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006238:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fbe6 	bl	8005a16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d031      	beq.n	80062b4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	7e9b      	ldrb	r3, [r3, #26]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d12d      	bne.n	80062b4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b08      	cmp	r3, #8
 8006264:	d126      	bne.n	80062b4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fcee 	bl	8005c4c <LL_ADC_REG_IsConversionOngoing>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d112      	bne.n	800629c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 020c 	bic.w	r2, r2, #12
 8006284:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	f043 0201 	orr.w	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	659a      	str	r2, [r3, #88]	; 0x58
 800629a:	e00b      	b.n	80062b4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a0:	f043 0220 	orr.w	r2, r3, #32
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	f043 0201 	orr.w	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	7e1b      	ldrb	r3, [r3, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	220c      	movs	r2, #12
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
	...

080062e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x28>
 800630c:	2302      	movs	r3, #2
 800630e:	e110      	b.n	8006532 <HAL_ADC_ConfigChannel+0x24a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fc95 	bl	8005c4c <LL_ADC_REG_IsConversionOngoing>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 80f7 	bne.w	8006518 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b02      	cmp	r3, #2
 8006330:	f000 80b1 	beq.w	8006496 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633c:	d004      	beq.n	8006348 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006342:	4a7e      	ldr	r2, [pc, #504]	; (800653c <HAL_ADC_ConfigChannel+0x254>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d108      	bne.n	800635a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7ff fb92 	bl	8005a7c <LL_ADC_REG_SetSequencerChAdd>
 8006358:	e041      	b.n	80063de <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	210f      	movs	r1, #15
 8006368:	fa01 f303 	lsl.w	r3, r1, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	401a      	ands	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <HAL_ADC_ConfigChannel+0xa0>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	0e9b      	lsrs	r3, r3, #26
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	e011      	b.n	80063ac <HAL_ADC_ConfigChannel+0xc4>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	fa93 f3a3 	rbit	r3, r3
 8006394:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80063a0:	2320      	movs	r3, #32
 80063a2:	e003      	b.n	80063ac <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	fab3 f383 	clz	r3, r3
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6849      	ldr	r1, [r1, #4]
 80063b0:	f001 011f 	and.w	r1, r1, #31
 80063b4:	408b      	lsls	r3, r1
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	089b      	lsrs	r3, r3, #2
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d808      	bhi.n	80063de <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	f7ff fb2e 	bl	8005a3a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6819      	ldr	r1, [r3, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7ff fb6b 	bl	8005ac6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f280 8097 	bge.w	8006528 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063fa:	4851      	ldr	r0, [pc, #324]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 80063fc:	f7ff fac8 	bl	8005990 <LL_ADC_GetCommonPathInternalCh>
 8006400:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a4f      	ldr	r2, [pc, #316]	; (8006544 <HAL_ADC_ConfigChannel+0x25c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d120      	bne.n	800644e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006412:	2b00      	cmp	r3, #0
 8006414:	d11b      	bne.n	800644e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800641c:	4619      	mov	r1, r3
 800641e:	4848      	ldr	r0, [pc, #288]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 8006420:	f7ff faa4 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006424:	4b48      	ldr	r3, [pc, #288]	; (8006548 <HAL_ADC_ConfigChannel+0x260>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	099b      	lsrs	r3, r3, #6
 800642a:	4a48      	ldr	r2, [pc, #288]	; (800654c <HAL_ADC_ConfigChannel+0x264>)
 800642c:	fba2 2303 	umull	r2, r3, r2, r3
 8006430:	099b      	lsrs	r3, r3, #6
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	4613      	mov	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800643e:	e002      	b.n	8006446 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	3b01      	subs	r3, #1
 8006444:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f9      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800644c:	e06c      	b.n	8006528 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a3f      	ldr	r2, [pc, #252]	; (8006550 <HAL_ADC_ConfigChannel+0x268>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d10c      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d107      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006468:	4619      	mov	r1, r3
 800646a:	4835      	ldr	r0, [pc, #212]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 800646c:	f7ff fa7e 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 8006470:	e05a      	b.n	8006528 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a37      	ldr	r2, [pc, #220]	; (8006554 <HAL_ADC_ConfigChannel+0x26c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d155      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006482:	2b00      	cmp	r3, #0
 8006484:	d150      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800648c:	4619      	mov	r1, r3
 800648e:	482c      	ldr	r0, [pc, #176]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 8006490:	f7ff fa6c 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 8006494:	e048      	b.n	8006528 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800649e:	d004      	beq.n	80064aa <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80064a4:	4a25      	ldr	r2, [pc, #148]	; (800653c <HAL_ADC_ConfigChannel+0x254>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d107      	bne.n	80064ba <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4619      	mov	r1, r3
 80064b4:	4610      	mov	r0, r2
 80064b6:	f7ff faf3 	bl	8005aa0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da32      	bge.n	8006528 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064c2:	481f      	ldr	r0, [pc, #124]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 80064c4:	f7ff fa64 	bl	8005990 <LL_ADC_GetCommonPathInternalCh>
 80064c8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_ADC_ConfigChannel+0x25c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d107      	bne.n	80064e4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064da:	4619      	mov	r1, r3
 80064dc:	4818      	ldr	r0, [pc, #96]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 80064de:	f7ff fa45 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 80064e2:	e021      	b.n	8006528 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_ADC_ConfigChannel+0x268>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d107      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064f4:	4619      	mov	r1, r3
 80064f6:	4812      	ldr	r0, [pc, #72]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 80064f8:	f7ff fa38 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 80064fc:	e014      	b.n	8006528 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a14      	ldr	r2, [pc, #80]	; (8006554 <HAL_ADC_ConfigChannel+0x26c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d10f      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800650e:	4619      	mov	r1, r3
 8006510:	480b      	ldr	r0, [pc, #44]	; (8006540 <HAL_ADC_ConfigChannel+0x258>)
 8006512:	f7ff fa2b 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 8006516:	e007      	b.n	8006528 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006530:	7ffb      	ldrb	r3, [r7, #31]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	80000004 	.word	0x80000004
 8006540:	40012708 	.word	0x40012708
 8006544:	b0001000 	.word	0xb0001000
 8006548:	20000000 	.word	0x20000000
 800654c:	053e2d63 	.word	0x053e2d63
 8006550:	b8004000 	.word	0xb8004000
 8006554:	b4002000 	.word	0xb4002000

08006558 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fb71 	bl	8005c4c <LL_ADC_REG_IsConversionOngoing>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d033      	beq.n	80065d8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff fb31 	bl	8005bdc <LL_ADC_IsDisableOngoing>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fb4e 	bl	8005c26 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800658a:	f7fc f971 	bl	8002870 <HAL_GetTick>
 800658e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006590:	e01b      	b.n	80065ca <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006592:	f7fc f96d 	bl	8002870 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d914      	bls.n	80065ca <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b2:	f043 0210 	orr.w	r2, r3, #16
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	f043 0201 	orr.w	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e007      	b.n	80065da <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1dc      	bne.n	8006592 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fadf 	bl	8005bb8 <LL_ADC_IsEnabled>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d169      	bne.n	80066d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <ADC_Enable+0xfc>)
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00d      	beq.n	800662a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006612:	f043 0210 	orr.w	r2, r3, #16
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e055      	b.n	80066d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff fa9c 	bl	8005b6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006634:	482b      	ldr	r0, [pc, #172]	; (80066e4 <ADC_Enable+0x100>)
 8006636:	f7ff f9ab 	bl	8005990 <LL_ADC_GetCommonPathInternalCh>
 800663a:	4603      	mov	r3, r0
 800663c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00f      	beq.n	8006664 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006644:	4b28      	ldr	r3, [pc, #160]	; (80066e8 <ADC_Enable+0x104>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	099b      	lsrs	r3, r3, #6
 800664a:	4a28      	ldr	r2, [pc, #160]	; (80066ec <ADC_Enable+0x108>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8006654:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006656:	e002      	b.n	800665e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	3b01      	subs	r3, #1
 800665c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f9      	bne.n	8006658 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7e5b      	ldrb	r3, [r3, #25]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d033      	beq.n	80066d4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800666c:	f7fc f900 	bl	8002870 <HAL_GetTick>
 8006670:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006672:	e028      	b.n	80066c6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fa9d 	bl	8005bb8 <LL_ADC_IsEnabled>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fa6f 	bl	8005b6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800668e:	f7fc f8ef 	bl	8002870 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d914      	bls.n	80066c6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d00d      	beq.n	80066c6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ae:	f043 0210 	orr.w	r2, r3, #16
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e007      	b.n	80066d6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d1cf      	bne.n	8006674 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	80000017 	.word	0x80000017
 80066e4:	40012708 	.word	0x40012708
 80066e8:	20000000 	.word	0x20000000
 80066ec:	053e2d63 	.word	0x053e2d63

080066f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fa6d 	bl	8005bdc <LL_ADC_IsDisableOngoing>
 8006702:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff fa55 	bl	8005bb8 <LL_ADC_IsEnabled>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d047      	beq.n	80067a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d144      	bne.n	80067a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0305 	and.w	r3, r3, #5
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10c      	bne.n	8006742 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff fa30 	bl	8005b92 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2203      	movs	r2, #3
 8006738:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800673a:	f7fc f899 	bl	8002870 <HAL_GetTick>
 800673e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006740:	e029      	b.n	8006796 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006746:	f043 0210 	orr.w	r2, r3, #16
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006752:	f043 0201 	orr.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e023      	b.n	80067a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800675e:	f7fc f887 	bl	8002870 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d914      	bls.n	8006796 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678a:	f043 0201 	orr.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e007      	b.n	80067a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1dc      	bne.n	800675e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <LL_ADC_SetCalibrationFactor>:
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067be:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <LL_ADC_GetCalibrationFactor>:
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <LL_ADC_Enable>:
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006802:	f023 0317 	bic.w	r3, r3, #23
 8006806:	f043 0201 	orr.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	609a      	str	r2, [r3, #8]
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <LL_ADC_Disable>:
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006828:	f023 0317 	bic.w	r3, r3, #23
 800682c:	f043 0202 	orr.w	r2, r3, #2
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	609a      	str	r2, [r3, #8]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <LL_ADC_IsEnabled>:
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <LL_ADC_IsEnabled+0x18>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <LL_ADC_IsEnabled+0x1a>
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr

08006862 <LL_ADC_StartCalibration>:
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006872:	f023 0317 	bic.w	r3, r3, #23
 8006876:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	609a      	str	r2, [r3, #8]
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <LL_ADC_IsCalibrationOnGoing>:
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800689c:	d101      	bne.n	80068a2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b088      	sub	sp, #32
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_ADCEx_Calibration_Start+0x1e>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e0b9      	b.n	8006a40 <HAL_ADCEx_Calibration_Start+0x192>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff ff0b 	bl	80066f0 <ADC_Disable>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff ffab 	bl	800683e <LL_ADC_IsEnabled>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f040 809d 	bne.w	8006a2a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80068f8:	f043 0202 	orr.w	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	f248 0303 	movw	r3, #32771	; 0x8003
 800690a:	4013      	ands	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	e02e      	b.n	8006986 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff ff98 	bl	8006862 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006932:	e014      	b.n	800695e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	3301      	adds	r3, #1
 8006938:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8006940:	d30d      	bcc.n	800695e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006946:	f023 0312 	bic.w	r3, r3, #18
 800694a:	f043 0210 	orr.w	r2, r3, #16
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e070      	b.n	8006a40 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff ff90 	bl	8006888 <LL_ADC_IsCalibrationOnGoing>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e2      	bne.n	8006934 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff ff2f 	bl	80067d6 <LL_ADC_GetCalibrationFactor>
 8006978:	4602      	mov	r2, r0
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	4413      	add	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b07      	cmp	r3, #7
 800698a:	d9cd      	bls.n	8006928 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff ff29 	bl	80067f2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69b9      	ldr	r1, [r7, #24]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff ff01 	bl	80067ae <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff ff31 	bl	8006818 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069b6:	f7fb ff5b 	bl	8002870 <HAL_GetTick>
 80069ba:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069bc:	e01c      	b.n	80069f8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069be:	f7fb ff57 	bl	8002870 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d915      	bls.n	80069f8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff ff34 	bl	800683e <LL_ADC_IsEnabled>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00d      	beq.n	80069f8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	f043 0210 	orr.w	r2, r3, #16
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ec:	f043 0201 	orr.w	r2, r3, #1
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e023      	b.n	8006a40 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff ff1e 	bl	800683e <LL_ADC_IsEnabled>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1da      	bne.n	80069be <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68d9      	ldr	r1, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1c:	f023 0303 	bic.w	r3, r3, #3
 8006a20:	f043 0201 	orr.w	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	659a      	str	r2, [r3, #88]	; 0x58
 8006a28:	e005      	b.n	8006a36 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2e:	f043 0210 	orr.w	r2, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <__NVIC_SetPriorityGrouping+0x44>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a64:	4013      	ands	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a7a:	4a04      	ldr	r2, [pc, #16]	; (8006a8c <__NVIC_SetPriorityGrouping+0x44>)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	60d3      	str	r3, [r2, #12]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	e000ed00 	.word	0xe000ed00

08006a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	0a1b      	lsrs	r3, r3, #8
 8006a9a:	f003 0307 	and.w	r3, r3, #7
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	e000ed00 	.word	0xe000ed00

08006aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	db0b      	blt.n	8006ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	f003 021f 	and.w	r2, r3, #31
 8006ac4:	4906      	ldr	r1, [pc, #24]	; (8006ae0 <__NVIC_EnableIRQ+0x34>)
 8006ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	2001      	movs	r0, #1
 8006ace:	fa00 f202 	lsl.w	r2, r0, r2
 8006ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	e000e100 	.word	0xe000e100

08006ae4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	db12      	blt.n	8006b1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	f003 021f 	and.w	r2, r3, #31
 8006afc:	490a      	ldr	r1, [pc, #40]	; (8006b28 <__NVIC_DisableIRQ+0x44>)
 8006afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	2001      	movs	r0, #1
 8006b06:	fa00 f202 	lsl.w	r2, r0, r2
 8006b0a:	3320      	adds	r3, #32
 8006b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b10:	f3bf 8f4f 	dsb	sy
}
 8006b14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b16:	f3bf 8f6f 	isb	sy
}
 8006b1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	e000e100 	.word	0xe000e100

08006b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	db0a      	blt.n	8006b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <__NVIC_SetPriority+0x4c>)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	440b      	add	r3, r1
 8006b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b54:	e00a      	b.n	8006b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	4908      	ldr	r1, [pc, #32]	; (8006b7c <__NVIC_SetPriority+0x50>)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	3b04      	subs	r3, #4
 8006b64:	0112      	lsls	r2, r2, #4
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	440b      	add	r3, r1
 8006b6a:	761a      	strb	r2, [r3, #24]
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	e000e100 	.word	0xe000e100
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b089      	sub	sp, #36	; 0x24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f1c3 0307 	rsb	r3, r3, #7
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	bf28      	it	cs
 8006b9e:	2304      	movcs	r3, #4
 8006ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d902      	bls.n	8006bb0 <NVIC_EncodePriority+0x30>
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3b03      	subs	r3, #3
 8006bae:	e000      	b.n	8006bb2 <NVIC_EncodePriority+0x32>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43da      	mvns	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd2:	43d9      	mvns	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd8:	4313      	orrs	r3, r2
         );
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3724      	adds	r7, #36	; 0x24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ff2b 	bl	8006a48 <__NVIC_SetPriorityGrouping>
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	4603      	mov	r3, r0
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c08:	f7ff ff42 	bl	8006a90 <__NVIC_GetPriorityGrouping>
 8006c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	6978      	ldr	r0, [r7, #20]
 8006c14:	f7ff ffb4 	bl	8006b80 <NVIC_EncodePriority>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ff83 	bl	8006b2c <__NVIC_SetPriority>
}
 8006c26:	bf00      	nop
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	4603      	mov	r3, r0
 8006c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff35 	bl	8006aac <__NVIC_EnableIRQ>
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	4603      	mov	r3, r0
 8006c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff ff43 	bl	8006ae4 <__NVIC_DisableIRQ>
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e08e      	b.n	8006d98 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4b47      	ldr	r3, [pc, #284]	; (8006da0 <HAL_DMA_Init+0x138>)
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d80f      	bhi.n	8006ca6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	4b45      	ldr	r3, [pc, #276]	; (8006da4 <HAL_DMA_Init+0x13c>)
 8006c8e:	4413      	add	r3, r2
 8006c90:	4a45      	ldr	r2, [pc, #276]	; (8006da8 <HAL_DMA_Init+0x140>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	091b      	lsrs	r3, r3, #4
 8006c98:	009a      	lsls	r2, r3, #2
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a42      	ldr	r2, [pc, #264]	; (8006dac <HAL_DMA_Init+0x144>)
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40
 8006ca4:	e00e      	b.n	8006cc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <HAL_DMA_Init+0x148>)
 8006cae:	4413      	add	r3, r2
 8006cb0:	4a3d      	ldr	r2, [pc, #244]	; (8006da8 <HAL_DMA_Init+0x140>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	009a      	lsls	r2, r3, #2
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a3c      	ldr	r2, [pc, #240]	; (8006db4 <HAL_DMA_Init+0x14c>)
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cde:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb24 	bl	8007364 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d24:	d102      	bne.n	8006d2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d42:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_DMA_Init+0x106>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d80c      	bhi.n	8006d6e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb4d 	bl	80073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d6a:	605a      	str	r2, [r3, #4]
 8006d6c:	e008      	b.n	8006d80 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40020407 	.word	0x40020407
 8006da4:	bffdfff8 	.word	0xbffdfff8
 8006da8:	cccccccd 	.word	0xcccccccd
 8006dac:	40020000 	.word	0x40020000
 8006db0:	bffdfbf8 	.word	0xbffdfbf8
 8006db4:	40020400 	.word	0x40020400

08006db8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e07b      	b.n	8006ec2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	4b3a      	ldr	r3, [pc, #232]	; (8006ecc <HAL_DMA_DeInit+0x114>)
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d80f      	bhi.n	8006e06 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	4b38      	ldr	r3, [pc, #224]	; (8006ed0 <HAL_DMA_DeInit+0x118>)
 8006dee:	4413      	add	r3, r2
 8006df0:	4a38      	ldr	r2, [pc, #224]	; (8006ed4 <HAL_DMA_DeInit+0x11c>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	009a      	lsls	r2, r3, #2
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a35      	ldr	r2, [pc, #212]	; (8006ed8 <HAL_DMA_DeInit+0x120>)
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40
 8006e04:	e00e      	b.n	8006e24 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	4b33      	ldr	r3, [pc, #204]	; (8006edc <HAL_DMA_DeInit+0x124>)
 8006e0e:	4413      	add	r3, r2
 8006e10:	4a30      	ldr	r2, [pc, #192]	; (8006ed4 <HAL_DMA_DeInit+0x11c>)
 8006e12:	fba2 2303 	umull	r2, r3, r2, r3
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	009a      	lsls	r2, r3, #2
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a2f      	ldr	r2, [pc, #188]	; (8006ee0 <HAL_DMA_DeInit+0x128>)
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e30:	f003 021c 	and.w	r2, r3, #28
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	2101      	movs	r1, #1
 8006e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e3e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa8f 	bl	8007364 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e56:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00f      	beq.n	8006e80 <HAL_DMA_DeInit+0xc8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d80b      	bhi.n	8006e80 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fac3 	bl	80073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e7e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	40020407 	.word	0x40020407
 8006ed0:	bffdfff8 	.word	0xbffdfff8
 8006ed4:	cccccccd 	.word	0xcccccccd
 8006ed8:	40020000 	.word	0x40020000
 8006edc:	bffdfbf8 	.word	0xbffdfbf8
 8006ee0:	40020400 	.word	0x40020400

08006ee4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_DMA_Start_IT+0x20>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e069      	b.n	8006fd8 <HAL_DMA_Start_IT+0xf4>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d155      	bne.n	8006fc4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f9d3 	bl	80072e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 020e 	orr.w	r2, r2, #14
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e00f      	b.n	8006f7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0204 	bic.w	r2, r2, #4
 8006f6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 020a 	orr.w	r2, r2, #10
 8006f7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f98:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0201 	orr.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e008      	b.n	8006fd6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2280      	movs	r2, #128	; 0x80
 8006fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e04f      	b.n	8007092 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d008      	beq.n	8007010 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e040      	b.n	8007092 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 020e 	bic.w	r2, r2, #14
 800701e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800702e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0201 	bic.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007044:	f003 021c 	and.w	r2, r3, #28
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	2101      	movs	r1, #1
 800704e:	fa01 f202 	lsl.w	r2, r1, r2
 8007052:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800705c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00c      	beq.n	8007080 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007074:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800707e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d005      	beq.n	80070c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2204      	movs	r2, #4
 80070b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	73fb      	strb	r3, [r7, #15]
 80070be:	e047      	b.n	8007150 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 020e 	bic.w	r2, r2, #14
 80070ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0201 	bic.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f4:	f003 021c 	and.w	r2, r3, #28
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007102:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800710c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00c      	beq.n	8007130 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007124:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800712e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4798      	blx	r3
    }
  }
  return status;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007178:	f003 031c 	and.w	r3, r3, #28
 800717c:	2204      	movs	r2, #4
 800717e:	409a      	lsls	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d027      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x7c>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d022      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0204 	bic.w	r2, r2, #4
 80071ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b4:	f003 021c 	and.w	r2, r3, #28
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	2104      	movs	r1, #4
 80071be:	fa01 f202 	lsl.w	r2, r1, r2
 80071c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8081 	beq.w	80072d0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80071d6:	e07b      	b.n	80072d0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	f003 031c 	and.w	r3, r3, #28
 80071e0:	2202      	movs	r2, #2
 80071e2:	409a      	lsls	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d03d      	beq.n	8007268 <HAL_DMA_IRQHandler+0x10c>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d038      	beq.n	8007268 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10b      	bne.n	800721c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 020a 	bic.w	r2, r2, #10
 8007212:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	4b2e      	ldr	r3, [pc, #184]	; (80072dc <HAL_DMA_IRQHandler+0x180>)
 8007224:	429a      	cmp	r2, r3
 8007226:	d909      	bls.n	800723c <HAL_DMA_IRQHandler+0xe0>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	f003 031c 	and.w	r3, r3, #28
 8007230:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <HAL_DMA_IRQHandler+0x184>)
 8007232:	2102      	movs	r1, #2
 8007234:	fa01 f303 	lsl.w	r3, r1, r3
 8007238:	6053      	str	r3, [r2, #4]
 800723a:	e008      	b.n	800724e <HAL_DMA_IRQHandler+0xf2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007240:	f003 031c 	and.w	r3, r3, #28
 8007244:	4a27      	ldr	r2, [pc, #156]	; (80072e4 <HAL_DMA_IRQHandler+0x188>)
 8007246:	2102      	movs	r1, #2
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d038      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007266:	e033      	b.n	80072d0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726c:	f003 031c 	and.w	r3, r3, #28
 8007270:	2208      	movs	r2, #8
 8007272:	409a      	lsls	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d02a      	beq.n	80072d2 <HAL_DMA_IRQHandler+0x176>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d025      	beq.n	80072d2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 020e 	bic.w	r2, r2, #14
 8007294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	f003 021c 	and.w	r2, r3, #28
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	2101      	movs	r1, #1
 80072a4:	fa01 f202 	lsl.w	r2, r1, r2
 80072a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
}
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40020080 	.word	0x40020080
 80072e0:	40020400 	.word	0x40020400
 80072e4:	40020000 	.word	0x40020000

080072e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007310:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	f003 021c 	and.w	r2, r3, #28
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	2101      	movs	r1, #1
 8007320:	fa01 f202 	lsl.w	r2, r1, r2
 8007324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	2b10      	cmp	r3, #16
 8007334:	d108      	bne.n	8007348 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007346:	e007      	b.n	8007358 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	60da      	str	r2, [r3, #12]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
	...

08007364 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8007374:	429a      	cmp	r2, r3
 8007376:	d813      	bhi.n	80073a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737c:	089b      	lsrs	r3, r3, #2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007384:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	3b08      	subs	r3, #8
 8007394:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	091b      	lsrs	r3, r3, #4
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	e011      	b.n	80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	089b      	lsrs	r3, r3, #2
 80073a6:	009a      	lsls	r2, r3, #2
 80073a8:	4b10      	ldr	r3, [pc, #64]	; (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80073aa:	4413      	add	r3, r2
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	3b08      	subs	r3, #8
 80073b8:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	091b      	lsrs	r3, r3, #4
 80073c0:	3307      	adds	r3, #7
 80073c2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80073c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 031f 	and.w	r3, r3, #31
 80073d0:	2201      	movs	r2, #1
 80073d2:	409a      	lsls	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40020407 	.word	0x40020407
 80073e8:	cccccccd 	.word	0xcccccccd
 80073ec:	4002081c 	.word	0x4002081c
 80073f0:	40020880 	.word	0x40020880

080073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007404:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a08      	ldr	r2, [pc, #32]	; (8007438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007418:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b01      	subs	r3, #1
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2201      	movs	r2, #1
 8007424:	409a      	lsls	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800742a:	bf00      	nop
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr
 8007434:	1000823f 	.word	0x1000823f
 8007438:	40020940 	.word	0x40020940

0800743c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800744a:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <HAL_FLASH_Program+0x80>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_FLASH_Program+0x1a>
 8007452:	2302      	movs	r3, #2
 8007454:	e02d      	b.n	80074b2 <HAL_FLASH_Program+0x76>
 8007456:	4b19      	ldr	r3, [pc, #100]	; (80074bc <HAL_FLASH_Program+0x80>)
 8007458:	2201      	movs	r2, #1
 800745a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <HAL_FLASH_Program+0x80>)
 800745e:	2200      	movs	r2, #0
 8007460:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007466:	f000 f869 	bl	800753c <FLASH_WaitForLastOperation>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11a      	bne.n	80074aa <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d105      	bne.n	8007486 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800747a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800747e:	68b8      	ldr	r0, [r7, #8]
 8007480:	f000 f8be 	bl	8007600 <FLASH_Program_DoubleWord>
 8007484:	e004      	b.n	8007490 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	4619      	mov	r1, r3
 800748a:	68b8      	ldr	r0, [r7, #8]
 800748c:	f000 f8de 	bl	800764c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007494:	f000 f852 	bl	800753c <FLASH_WaitForLastOperation>
 8007498:	4603      	mov	r3, r0
 800749a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800749c:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <HAL_FLASH_Program+0x84>)
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	43db      	mvns	r3, r3
 80074a4:	4906      	ldr	r1, [pc, #24]	; (80074c0 <HAL_FLASH_Program+0x84>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80074aa:	4b04      	ldr	r3, [pc, #16]	; (80074bc <HAL_FLASH_Program+0x80>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2000058c 	.word	0x2000058c
 80074c0:	58004000 	.word	0x58004000

080074c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80074ce:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <HAL_FLASH_Unlock+0x38>)
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da0b      	bge.n	80074ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <HAL_FLASH_Unlock+0x38>)
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <HAL_FLASH_Unlock+0x3c>)
 80074da:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80074dc:	4b07      	ldr	r3, [pc, #28]	; (80074fc <HAL_FLASH_Unlock+0x38>)
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <HAL_FLASH_Unlock+0x40>)
 80074e0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80074e2:	4b06      	ldr	r3, [pc, #24]	; (80074fc <HAL_FLASH_Unlock+0x38>)
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da01      	bge.n	80074ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80074ee:	79fb      	ldrb	r3, [r7, #7]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	58004000 	.word	0x58004000
 8007500:	45670123 	.word	0x45670123
 8007504:	cdef89ab 	.word	0xcdef89ab

08007508 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007512:	4b09      	ldr	r3, [pc, #36]	; (8007538 <HAL_FLASH_Lock+0x30>)
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	4a08      	ldr	r2, [pc, #32]	; (8007538 <HAL_FLASH_Lock+0x30>)
 8007518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800751c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_FLASH_Lock+0x30>)
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	2b00      	cmp	r3, #0
 8007524:	db01      	blt.n	800752a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800752a:	79fb      	ldrb	r3, [r7, #7]
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	bc80      	pop	{r7}
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	58004000 	.word	0x58004000

0800753c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8007544:	f7fb f994 	bl	8002870 <HAL_GetTick>
 8007548:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800754a:	e009      	b.n	8007560 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800754c:	f7fb f990 	bl	8002870 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	d801      	bhi.n	8007560 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e047      	b.n	80075f0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007560:	4b25      	ldr	r3, [pc, #148]	; (80075f8 <FLASH_WaitForLastOperation+0xbc>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756c:	d0ee      	beq.n	800754c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800756e:	4b22      	ldr	r3, [pc, #136]	; (80075f8 <FLASH_WaitForLastOperation+0xbc>)
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800757e:	4b1e      	ldr	r3, [pc, #120]	; (80075f8 <FLASH_WaitForLastOperation+0xbc>)
 8007580:	2201      	movs	r2, #1
 8007582:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800758a:	4013      	ands	r3, r2
 800758c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <FLASH_WaitForLastOperation+0x6c>
 8007598:	4b17      	ldr	r3, [pc, #92]	; (80075f8 <FLASH_WaitForLastOperation+0xbc>)
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80075a2:	4915      	ldr	r1, [pc, #84]	; (80075f8 <FLASH_WaitForLastOperation+0xbc>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	618b      	str	r3, [r1, #24]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <FLASH_WaitForLastOperation+0x80>
 80075b2:	4a11      	ldr	r2, [pc, #68]	; (80075f8 <FLASH_WaitForLastOperation+0xbc>)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80075ba:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00e      	beq.n	80075e0 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80075c2:	4a0e      	ldr	r2, [pc, #56]	; (80075fc <FLASH_WaitForLastOperation+0xc0>)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e011      	b.n	80075f0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80075cc:	f7fb f950 	bl	8002870 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d801      	bhi.n	80075e0 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e007      	b.n	80075f0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <FLASH_WaitForLastOperation+0xbc>)
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075ec:	d0ee      	beq.n	80075cc <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	58004000 	.word	0x58004000
 80075fc:	2000058c 	.word	0x2000058c

08007600 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800760c:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <FLASH_Program_DoubleWord+0x48>)
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	4a0d      	ldr	r2, [pc, #52]	; (8007648 <FLASH_Program_DoubleWord+0x48>)
 8007612:	f043 0301 	orr.w	r3, r3, #1
 8007616:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800761e:	f3bf 8f6f 	isb	sy
}
 8007622:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	000a      	movs	r2, r1
 8007632:	2300      	movs	r3, #0
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	3104      	adds	r1, #4
 8007638:	4613      	mov	r3, r2
 800763a:	600b      	str	r3, [r1, #0]
}
 800763c:	bf00      	nop
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	58004000 	.word	0x58004000

0800764c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800764c:	b480      	push	{r7}
 800764e:	b089      	sub	sp, #36	; 0x24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007662:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <FLASH_Program_Fast+0x78>)
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <FLASH_Program_Fast+0x78>)
 8007668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800766c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800766e:	f3ef 8310 	mrs	r3, PRIMASK
 8007672:	60fb      	str	r3, [r7, #12]
  return(result);
 8007674:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8007676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007678:	b672      	cpsid	i
}
 800767a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	3304      	adds	r3, #4
 8007688:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	3304      	adds	r3, #4
 800768e:	617b      	str	r3, [r7, #20]
    row_index--;
 8007690:	7ffb      	ldrb	r3, [r7, #31]
 8007692:	3b01      	subs	r3, #1
 8007694:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007696:	7ffb      	ldrb	r3, [r7, #31]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1ef      	bne.n	800767c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800769c:	bf00      	nop
 800769e:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <FLASH_Program_Fast+0x78>)
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076aa:	d0f8      	beq.n	800769e <FLASH_Program_Fast+0x52>
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f383 8810 	msr	PRIMASK, r3
}
 80076b6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80076b8:	bf00      	nop
 80076ba:	3724      	adds	r7, #36	; 0x24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	58004000 	.word	0x58004000

080076c8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80076d2:	4b28      	ldr	r3, [pc, #160]	; (8007774 <HAL_FLASHEx_Erase+0xac>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_FLASHEx_Erase+0x16>
 80076da:	2302      	movs	r3, #2
 80076dc:	e046      	b.n	800776c <HAL_FLASHEx_Erase+0xa4>
 80076de:	4b25      	ldr	r3, [pc, #148]	; (8007774 <HAL_FLASHEx_Erase+0xac>)
 80076e0:	2201      	movs	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076e4:	4b23      	ldr	r3, [pc, #140]	; (8007774 <HAL_FLASHEx_Erase+0xac>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80076ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076ee:	f7ff ff25 	bl	800753c <FLASH_WaitForLastOperation>
 80076f2:	4603      	mov	r3, r0
 80076f4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d133      	bne.n	8007764 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b04      	cmp	r3, #4
 8007702:	d108      	bne.n	8007716 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8007704:	f000 f838 	bl	8007778 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800770c:	f7ff ff16 	bl	800753c <FLASH_WaitForLastOperation>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e024      	b.n	8007760 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800771c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	e012      	b.n	800774c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8007726:	68b8      	ldr	r0, [r7, #8]
 8007728:	f000 f836 	bl	8007798 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800772c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007730:	f7ff ff04 	bl	800753c <FLASH_WaitForLastOperation>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	601a      	str	r2, [r3, #0]
          break;
 8007744:	e00a      	b.n	800775c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	3301      	adds	r3, #1
 800774a:	60bb      	str	r3, [r7, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4413      	add	r3, r2
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	429a      	cmp	r2, r3
 800775a:	d3e4      	bcc.n	8007726 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800775c:	f000 f878 	bl	8007850 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007760:	f000 f832 	bl	80077c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007764:	4b03      	ldr	r3, [pc, #12]	; (8007774 <HAL_FLASHEx_Erase+0xac>)
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]

  return status;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	2000058c 	.word	0x2000058c

08007778 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <FLASH_MassErase+0x1c>)
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	4a04      	ldr	r2, [pc, #16]	; (8007794 <FLASH_MassErase+0x1c>)
 8007782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007786:	f043 0304 	orr.w	r3, r3, #4
 800778a:	6153      	str	r3, [r2, #20]
#endif
}
 800778c:	bf00      	nop
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr
 8007794:	58004000 	.word	0x58004000

08007798 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80077a0:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <FLASH_PageErase+0x2c>)
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4313      	orrs	r3, r2
 80077ae:	4a05      	ldr	r2, [pc, #20]	; (80077c4 <FLASH_PageErase+0x2c>)
 80077b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b4:	f043 0302 	orr.w	r3, r3, #2
 80077b8:	6153      	str	r3, [r2, #20]
#endif
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr
 80077c4:	58004000 	.word	0x58004000

080077c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80077cc:	4b1f      	ldr	r3, [pc, #124]	; (800784c <FLASH_FlushCaches+0x84>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d117      	bne.n	8007808 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80077d8:	4b1c      	ldr	r3, [pc, #112]	; (800784c <FLASH_FlushCaches+0x84>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	; (800784c <FLASH_FlushCaches+0x84>)
 80077de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80077e4:	4b19      	ldr	r3, [pc, #100]	; (800784c <FLASH_FlushCaches+0x84>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a18      	ldr	r2, [pc, #96]	; (800784c <FLASH_FlushCaches+0x84>)
 80077ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	4b16      	ldr	r3, [pc, #88]	; (800784c <FLASH_FlushCaches+0x84>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a15      	ldr	r2, [pc, #84]	; (800784c <FLASH_FlushCaches+0x84>)
 80077f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077fc:	4b13      	ldr	r3, [pc, #76]	; (800784c <FLASH_FlushCaches+0x84>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a12      	ldr	r2, [pc, #72]	; (800784c <FLASH_FlushCaches+0x84>)
 8007802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007806:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8007808:	4b10      	ldr	r3, [pc, #64]	; (800784c <FLASH_FlushCaches+0x84>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007810:	2b01      	cmp	r3, #1
 8007812:	d117      	bne.n	8007844 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <FLASH_FlushCaches+0x84>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a0c      	ldr	r2, [pc, #48]	; (800784c <FLASH_FlushCaches+0x84>)
 800781a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800781e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <FLASH_FlushCaches+0x84>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a09      	ldr	r2, [pc, #36]	; (800784c <FLASH_FlushCaches+0x84>)
 8007826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <FLASH_FlushCaches+0x84>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a06      	ldr	r2, [pc, #24]	; (800784c <FLASH_FlushCaches+0x84>)
 8007832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007836:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <FLASH_FlushCaches+0x84>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a03      	ldr	r2, [pc, #12]	; (800784c <FLASH_FlushCaches+0x84>)
 800783e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007842:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	58004000 	.word	0x58004000

08007850 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <FLASH_AcknowledgePageErase+0x1c>)
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	4a04      	ldr	r2, [pc, #16]	; (800786c <FLASH_AcknowledgePageErase+0x1c>)
 800785a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800785e:	f023 0302 	bic.w	r3, r3, #2
 8007862:	6153      	str	r3, [r2, #20]
#endif
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr
 800786c:	58004000 	.word	0x58004000

08007870 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800787a:	2300      	movs	r3, #0
 800787c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800787e:	e140      	b.n	8007b02 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	2101      	movs	r1, #1
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8132 	beq.w	8007afc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d005      	beq.n	80078b0 <HAL_GPIO_Init+0x40>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d130      	bne.n	8007912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	2203      	movs	r2, #3
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	43db      	mvns	r3, r3
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4013      	ands	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078e6:	2201      	movs	r2, #1
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43db      	mvns	r3, r3
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	4013      	ands	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	091b      	lsrs	r3, r3, #4
 80078fc:	f003 0201 	and.w	r2, r3, #1
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d017      	beq.n	800794e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	2203      	movs	r2, #3
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4013      	ands	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	fa02 f303 	lsl.w	r3, r2, r3
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d123      	bne.n	80079a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	08da      	lsrs	r2, r3, #3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3208      	adds	r2, #8
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	220f      	movs	r2, #15
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	43db      	mvns	r3, r3
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4013      	ands	r3, r2
 800797c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691a      	ldr	r2, [r3, #16]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	08da      	lsrs	r2, r3, #3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3208      	adds	r2, #8
 800799c:	6939      	ldr	r1, [r7, #16]
 800799e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	2203      	movs	r2, #3
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4013      	ands	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f003 0203 	and.w	r2, r3, #3
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 808c 	beq.w	8007afc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80079e4:	4a4e      	ldr	r2, [pc, #312]	; (8007b20 <HAL_GPIO_Init+0x2b0>)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	089b      	lsrs	r3, r3, #2
 80079ea:	3302      	adds	r3, #2
 80079ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	2207      	movs	r2, #7
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4013      	ands	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007a0e:	d00d      	beq.n	8007a2c <HAL_GPIO_Init+0x1bc>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a44      	ldr	r2, [pc, #272]	; (8007b24 <HAL_GPIO_Init+0x2b4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d007      	beq.n	8007a28 <HAL_GPIO_Init+0x1b8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a43      	ldr	r2, [pc, #268]	; (8007b28 <HAL_GPIO_Init+0x2b8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d101      	bne.n	8007a24 <HAL_GPIO_Init+0x1b4>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e004      	b.n	8007a2e <HAL_GPIO_Init+0x1be>
 8007a24:	2307      	movs	r3, #7
 8007a26:	e002      	b.n	8007a2e <HAL_GPIO_Init+0x1be>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <HAL_GPIO_Init+0x1be>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	f002 0203 	and.w	r2, r2, #3
 8007a34:	0092      	lsls	r2, r2, #2
 8007a36:	4093      	lsls	r3, r2
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007a3e:	4938      	ldr	r1, [pc, #224]	; (8007b20 <HAL_GPIO_Init+0x2b0>)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	089b      	lsrs	r3, r3, #2
 8007a44:	3302      	adds	r3, #2
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a4c:	4b37      	ldr	r3, [pc, #220]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	43db      	mvns	r3, r3
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007a70:	4a2e      	ldr	r2, [pc, #184]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a76:	4b2d      	ldr	r3, [pc, #180]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	43db      	mvns	r3, r3
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4013      	ands	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007a9a:	4a24      	ldr	r2, [pc, #144]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8007aa0:	4b22      	ldr	r3, [pc, #136]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8007ac6:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8007ace:	4b17      	ldr	r3, [pc, #92]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4013      	ands	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8007af4:	4a0d      	ldr	r2, [pc, #52]	; (8007b2c <HAL_GPIO_Init+0x2bc>)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	3301      	adds	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f47f aeb7 	bne.w	8007880 <HAL_GPIO_Init+0x10>
  }
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	40010000 	.word	0x40010000
 8007b24:	48000400 	.word	0x48000400
 8007b28:	48000800 	.word	0x48000800
 8007b2c:	58000800 	.word	0x58000800

08007b30 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007b3e:	e0af      	b.n	8007ca0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007b40:	2201      	movs	r2, #1
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	fa02 f303 	lsl.w	r3, r2, r3
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80a2 	beq.w	8007c9a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007b56:	4a59      	ldr	r2, [pc, #356]	; (8007cbc <HAL_GPIO_DeInit+0x18c>)
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	089b      	lsrs	r3, r3, #2
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4013      	ands	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b7e:	d00d      	beq.n	8007b9c <HAL_GPIO_DeInit+0x6c>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a4f      	ldr	r2, [pc, #316]	; (8007cc0 <HAL_GPIO_DeInit+0x190>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <HAL_GPIO_DeInit+0x68>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a4e      	ldr	r2, [pc, #312]	; (8007cc4 <HAL_GPIO_DeInit+0x194>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d101      	bne.n	8007b94 <HAL_GPIO_DeInit+0x64>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e004      	b.n	8007b9e <HAL_GPIO_DeInit+0x6e>
 8007b94:	2307      	movs	r3, #7
 8007b96:	e002      	b.n	8007b9e <HAL_GPIO_DeInit+0x6e>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <HAL_GPIO_DeInit+0x6e>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	f002 0203 	and.w	r2, r2, #3
 8007ba4:	0092      	lsls	r2, r2, #2
 8007ba6:	4093      	lsls	r3, r2
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d136      	bne.n	8007c1c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8007bae:	4b46      	ldr	r3, [pc, #280]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007bb0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	4943      	ldr	r1, [pc, #268]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007bc0:	4b41      	ldr	r3, [pc, #260]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007bc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	493f      	ldr	r1, [pc, #252]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007bd2:	4b3d      	ldr	r3, [pc, #244]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	493b      	ldr	r1, [pc, #236]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007be0:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	43db      	mvns	r3, r3
 8007be8:	4937      	ldr	r1, [pc, #220]	; (8007cc8 <HAL_GPIO_DeInit+0x198>)
 8007bea:	4013      	ands	r3, r2
 8007bec:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	2207      	movs	r2, #7
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007bfe:	4a2f      	ldr	r2, [pc, #188]	; (8007cbc <HAL_GPIO_DeInit+0x18c>)
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	089b      	lsrs	r3, r3, #2
 8007c04:	3302      	adds	r3, #2
 8007c06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	43da      	mvns	r2, r3
 8007c0e:	482b      	ldr	r0, [pc, #172]	; (8007cbc <HAL_GPIO_DeInit+0x18c>)
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	089b      	lsrs	r3, r3, #2
 8007c14:	400a      	ands	r2, r1
 8007c16:	3302      	adds	r3, #2
 8007c18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	2103      	movs	r1, #3
 8007c26:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	08da      	lsrs	r2, r3, #3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3208      	adds	r2, #8
 8007c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	220f      	movs	r2, #15
 8007c46:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4a:	43db      	mvns	r3, r3
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	08d2      	lsrs	r2, r2, #3
 8007c50:	4019      	ands	r1, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3208      	adds	r2, #8
 8007c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	2103      	movs	r1, #3
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	401a      	ands	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	2101      	movs	r1, #1
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	401a      	ands	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	2103      	movs	r1, #3
 8007c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c92:	43db      	mvns	r3, r3
 8007c94:	401a      	ands	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f47f af49 	bne.w	8007b40 <HAL_GPIO_DeInit+0x10>
  }
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40010000 	.word	0x40010000
 8007cc0:	48000400 	.word	0x48000400
 8007cc4:	48000800 	.word	0x48000800
 8007cc8:	58000800 	.word	0x58000800

08007ccc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e001      	b.n	8007cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr

08007cfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	807b      	strh	r3, [r7, #2]
 8007d06:	4613      	mov	r3, r2
 8007d08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d0a:	787b      	ldrb	r3, [r7, #1]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d10:	887a      	ldrh	r2, [r7, #2]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007d16:	e002      	b.n	8007d1e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007d18:	887a      	ldrh	r2, [r7, #2]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e081      	b.n	8007e3e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fa f83e 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2224      	movs	r2, #36	; 0x24
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0201 	bic.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d107      	bne.n	8007da2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	e006      	b.n	8007db0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007dae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d104      	bne.n	8007dc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691a      	ldr	r2, [r3, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69d9      	ldr	r1, [r3, #28]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1a      	ldr	r2, [r3, #32]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0201 	orr.w	r2, r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	4608      	mov	r0, r1
 8007e52:	4611      	mov	r1, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	817b      	strh	r3, [r7, #10]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	813b      	strh	r3, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	f040 80f9 	bne.w	8008062 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <HAL_I2C_Mem_Write+0x34>
 8007e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d105      	bne.n	8007e88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e0ed      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_I2C_Mem_Write+0x4e>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e0e6      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e9e:	f7fa fce7 	bl	8002870 <HAL_GetTick>
 8007ea2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2319      	movs	r3, #25
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 fac2 	bl	800843a <I2C_WaitOnFlagUntilTimeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e0d1      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2221      	movs	r2, #33	; 0x21
 8007ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2240      	movs	r2, #64	; 0x40
 8007ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ee8:	88f8      	ldrh	r0, [r7, #6]
 8007eea:	893a      	ldrh	r2, [r7, #8]
 8007eec:	8979      	ldrh	r1, [r7, #10]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f9d3 	bl	80082a4 <I2C_RequestMemoryWrite>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0a9      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2bff      	cmp	r3, #255	; 0xff
 8007f18:	d90e      	bls.n	8007f38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	22ff      	movs	r2, #255	; 0xff
 8007f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	8979      	ldrh	r1, [r7, #10]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fc1f 	bl	8008774 <I2C_TransferConfig>
 8007f36:	e00f      	b.n	8007f58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	8979      	ldrh	r1, [r7, #10]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fc0e 	bl	8008774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 faac 	bl	80084ba <I2C_WaitOnTXISFlagUntilTimeout>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e07b      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d034      	beq.n	8008010 <HAL_I2C_Mem_Write+0x1c8>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d130      	bne.n	8008010 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2180      	movs	r1, #128	; 0x80
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 fa3e 	bl	800843a <I2C_WaitOnFlagUntilTimeout>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e04d      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2bff      	cmp	r3, #255	; 0xff
 8007fd0:	d90e      	bls.n	8007ff0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	22ff      	movs	r2, #255	; 0xff
 8007fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	8979      	ldrh	r1, [r7, #10]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fbc3 	bl	8008774 <I2C_TransferConfig>
 8007fee:	e00f      	b.n	8008010 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	8979      	ldrh	r1, [r7, #10]
 8008002:	2300      	movs	r3, #0
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fbb2 	bl	8008774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d19e      	bne.n	8007f58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fa8b 	bl	800853a <I2C_WaitOnSTOPFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e01a      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2220      	movs	r2, #32
 8008034:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6859      	ldr	r1, [r3, #4]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <HAL_I2C_Mem_Write+0x224>)
 8008042:	400b      	ands	r3, r1
 8008044:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	e000      	b.n	8008064 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008062:	2302      	movs	r3, #2
  }
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	fe00e800 	.word	0xfe00e800

08008070 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	461a      	mov	r2, r3
 800807e:	4603      	mov	r3, r0
 8008080:	817b      	strh	r3, [r7, #10]
 8008082:	460b      	mov	r3, r1
 8008084:	813b      	strh	r3, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b20      	cmp	r3, #32
 8008094:	f040 80fd 	bne.w	8008292 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <HAL_I2C_Mem_Read+0x34>
 800809e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e0f1      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d101      	bne.n	80080be <HAL_I2C_Mem_Read+0x4e>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e0ea      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080c6:	f7fa fbd3 	bl	8002870 <HAL_GetTick>
 80080ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	2319      	movs	r3, #25
 80080d2:	2201      	movs	r2, #1
 80080d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f9ae 	bl	800843a <I2C_WaitOnFlagUntilTimeout>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e0d5      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2222      	movs	r2, #34	; 0x22
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2240      	movs	r2, #64	; 0x40
 80080f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a3a      	ldr	r2, [r7, #32]
 8008102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008110:	88f8      	ldrh	r0, [r7, #6]
 8008112:	893a      	ldrh	r2, [r7, #8]
 8008114:	8979      	ldrh	r1, [r7, #10]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	4603      	mov	r3, r0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f913 	bl	800834c <I2C_RequestMemoryRead>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d005      	beq.n	8008138 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e0ad      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813c:	b29b      	uxth	r3, r3
 800813e:	2bff      	cmp	r3, #255	; 0xff
 8008140:	d90e      	bls.n	8008160 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	22ff      	movs	r2, #255	; 0xff
 8008146:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814c:	b2da      	uxtb	r2, r3
 800814e:	8979      	ldrh	r1, [r7, #10]
 8008150:	4b52      	ldr	r3, [pc, #328]	; (800829c <HAL_I2C_Mem_Read+0x22c>)
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 fb0b 	bl	8008774 <I2C_TransferConfig>
 800815e:	e00f      	b.n	8008180 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	b2da      	uxtb	r2, r3
 8008170:	8979      	ldrh	r1, [r7, #10]
 8008172:	4b4a      	ldr	r3, [pc, #296]	; (800829c <HAL_I2C_Mem_Read+0x22c>)
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 fafa 	bl	8008774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	2200      	movs	r2, #0
 8008188:	2104      	movs	r1, #4
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f955 	bl	800843a <I2C_WaitOnFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e07c      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d034      	beq.n	8008240 <HAL_I2C_Mem_Read+0x1d0>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d130      	bne.n	8008240 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e4:	2200      	movs	r2, #0
 80081e6:	2180      	movs	r1, #128	; 0x80
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f926 	bl	800843a <I2C_WaitOnFlagUntilTimeout>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e04d      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2bff      	cmp	r3, #255	; 0xff
 8008200:	d90e      	bls.n	8008220 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	22ff      	movs	r2, #255	; 0xff
 8008206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820c:	b2da      	uxtb	r2, r3
 800820e:	8979      	ldrh	r1, [r7, #10]
 8008210:	2300      	movs	r3, #0
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 faab 	bl	8008774 <I2C_TransferConfig>
 800821e:	e00f      	b.n	8008240 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008224:	b29a      	uxth	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822e:	b2da      	uxtb	r2, r3
 8008230:	8979      	ldrh	r1, [r7, #10]
 8008232:	2300      	movs	r3, #0
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fa9a 	bl	8008774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d19a      	bne.n	8008180 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f973 	bl	800853a <I2C_WaitOnSTOPFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e01a      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2220      	movs	r2, #32
 8008264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6859      	ldr	r1, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <HAL_I2C_Mem_Read+0x230>)
 8008272:	400b      	ands	r3, r1
 8008274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	e000      	b.n	8008294 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008292:	2302      	movs	r3, #2
  }
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	80002400 	.word	0x80002400
 80082a0:	fe00e800 	.word	0xfe00e800

080082a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	4608      	mov	r0, r1
 80082ae:	4611      	mov	r1, r2
 80082b0:	461a      	mov	r2, r3
 80082b2:	4603      	mov	r3, r0
 80082b4:	817b      	strh	r3, [r7, #10]
 80082b6:	460b      	mov	r3, r1
 80082b8:	813b      	strh	r3, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	8979      	ldrh	r1, [r7, #10]
 80082c4:	4b20      	ldr	r3, [pc, #128]	; (8008348 <I2C_RequestMemoryWrite+0xa4>)
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 fa51 	bl	8008774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	69b9      	ldr	r1, [r7, #24]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f8ef 	bl	80084ba <I2C_WaitOnTXISFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e02c      	b.n	8008340 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082e6:	88fb      	ldrh	r3, [r7, #6]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d105      	bne.n	80082f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082ec:	893b      	ldrh	r3, [r7, #8]
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	629a      	str	r2, [r3, #40]	; 0x28
 80082f6:	e015      	b.n	8008324 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082f8:	893b      	ldrh	r3, [r7, #8]
 80082fa:	0a1b      	lsrs	r3, r3, #8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	69b9      	ldr	r1, [r7, #24]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 f8d5 	bl	80084ba <I2C_WaitOnTXISFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e012      	b.n	8008340 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	2200      	movs	r2, #0
 800832c:	2180      	movs	r1, #128	; 0x80
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f883 	bl	800843a <I2C_WaitOnFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	80002000 	.word	0x80002000

0800834c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	461a      	mov	r2, r3
 800835a:	4603      	mov	r3, r0
 800835c:	817b      	strh	r3, [r7, #10]
 800835e:	460b      	mov	r3, r1
 8008360:	813b      	strh	r3, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	b2da      	uxtb	r2, r3
 800836a:	8979      	ldrh	r1, [r7, #10]
 800836c:	4b20      	ldr	r3, [pc, #128]	; (80083f0 <I2C_RequestMemoryRead+0xa4>)
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	2300      	movs	r3, #0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f9fe 	bl	8008774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	69b9      	ldr	r1, [r7, #24]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f89c 	bl	80084ba <I2C_WaitOnTXISFlagUntilTimeout>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e02c      	b.n	80083e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800838c:	88fb      	ldrh	r3, [r7, #6]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d105      	bne.n	800839e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008392:	893b      	ldrh	r3, [r7, #8]
 8008394:	b2da      	uxtb	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	629a      	str	r2, [r3, #40]	; 0x28
 800839c:	e015      	b.n	80083ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800839e:	893b      	ldrh	r3, [r7, #8]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	69b9      	ldr	r1, [r7, #24]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 f882 	bl	80084ba <I2C_WaitOnTXISFlagUntilTimeout>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e012      	b.n	80083e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083c0:	893b      	ldrh	r3, [r7, #8]
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	2200      	movs	r2, #0
 80083d2:	2140      	movs	r1, #64	; 0x40
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f000 f830 	bl	800843a <I2C_WaitOnFlagUntilTimeout>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	80002000 	.word	0x80002000

080083f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b02      	cmp	r3, #2
 8008408:	d103      	bne.n	8008412 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d007      	beq.n	8008430 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	619a      	str	r2, [r3, #24]
  }
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	bc80      	pop	{r7}
 8008438:	4770      	bx	lr

0800843a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800844a:	e022      	b.n	8008492 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008452:	d01e      	beq.n	8008492 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008454:	f7fa fa0c 	bl	8002870 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <I2C_WaitOnFlagUntilTimeout+0x30>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d113      	bne.n	8008492 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846e:	f043 0220 	orr.w	r2, r3, #32
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e00f      	b.n	80084b2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	699a      	ldr	r2, [r3, #24]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4013      	ands	r3, r2
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	429a      	cmp	r2, r3
 80084a0:	bf0c      	ite	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	2300      	movne	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d0cd      	beq.n	800844c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084c6:	e02c      	b.n	8008522 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f871 	bl	80085b4 <I2C_IsErrorOccurred>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e02a      	b.n	8008532 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e2:	d01e      	beq.n	8008522 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084e4:	f7fa f9c4 	bl	8002870 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d302      	bcc.n	80084fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d113      	bne.n	8008522 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	f043 0220 	orr.w	r2, r3, #32
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e007      	b.n	8008532 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b02      	cmp	r3, #2
 800852e:	d1cb      	bne.n	80084c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008546:	e028      	b.n	800859a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	68b9      	ldr	r1, [r7, #8]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f831 	bl	80085b4 <I2C_IsErrorOccurred>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e026      	b.n	80085aa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855c:	f7fa f988 	bl	8002870 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d113      	bne.n	800859a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008576:	f043 0220 	orr.w	r2, r3, #32
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e007      	b.n	80085aa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d1cf      	bne.n	8008548 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08a      	sub	sp, #40	; 0x28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d068      	beq.n	80086b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2210      	movs	r2, #16
 80085e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085e8:	e049      	b.n	800867e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f0:	d045      	beq.n	800867e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085f2:	f7fa f93d 	bl	8002870 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d302      	bcc.n	8008608 <I2C_IsErrorOccurred+0x54>
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d13a      	bne.n	800867e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008612:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800861a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862a:	d121      	bne.n	8008670 <I2C_IsErrorOccurred+0xbc>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008632:	d01d      	beq.n	8008670 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008634:	7cfb      	ldrb	r3, [r7, #19]
 8008636:	2b20      	cmp	r3, #32
 8008638:	d01a      	beq.n	8008670 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008648:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800864a:	f7fa f911 	bl	8002870 <HAL_GetTick>
 800864e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008650:	e00e      	b.n	8008670 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008652:	f7fa f90d 	bl	8002870 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	2b19      	cmp	r3, #25
 800865e:	d907      	bls.n	8008670 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	f043 0320 	orr.w	r3, r3, #32
 8008666:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800866e:	e006      	b.n	800867e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b20      	cmp	r3, #32
 800867c:	d1e9      	bne.n	8008652 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b20      	cmp	r3, #32
 800868a:	d003      	beq.n	8008694 <I2C_IsErrorOccurred+0xe0>
 800868c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0aa      	beq.n	80085ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008698:	2b00      	cmp	r3, #0
 800869a:	d103      	bne.n	80086a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2220      	movs	r2, #32
 80086a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	f043 0304 	orr.w	r3, r3, #4
 80086aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00b      	beq.n	80086fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f043 0308 	orr.w	r3, r3, #8
 80086ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	f043 0302 	orr.w	r3, r3, #2
 800870e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008718:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01c      	beq.n	8008762 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff fe63 	bl	80083f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6859      	ldr	r1, [r3, #4]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <I2C_IsErrorOccurred+0x1bc>)
 800873a:	400b      	ands	r3, r1
 800873c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	431a      	orrs	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2220      	movs	r2, #32
 800874e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008766:	4618      	mov	r0, r3
 8008768:	3728      	adds	r7, #40	; 0x28
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	fe00e800 	.word	0xfe00e800

08008774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	817b      	strh	r3, [r7, #10]
 8008782:	4613      	mov	r3, r2
 8008784:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008786:	897b      	ldrh	r3, [r7, #10]
 8008788:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800878c:	7a7b      	ldrb	r3, [r7, #9]
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008794:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	4313      	orrs	r3, r2
 800879e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	0d5b      	lsrs	r3, r3, #21
 80087ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <I2C_TransferConfig+0x5c>)
 80087b4:	430b      	orrs	r3, r1
 80087b6:	43db      	mvns	r3, r3
 80087b8:	ea02 0103 	and.w	r1, r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr
 80087d0:	03ff63ff 	.word	0x03ff63ff

080087d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d138      	bne.n	800885c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e032      	b.n	800885e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2224      	movs	r2, #36	; 0x24
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0201 	bic.w	r2, r2, #1
 8008816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6819      	ldr	r1, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0201 	orr.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	e000      	b.n	800885e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800885c:	2302      	movs	r3, #2
  }
}
 800885e:	4618      	mov	r0, r3
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr

08008868 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b20      	cmp	r3, #32
 800887c:	d139      	bne.n	80088f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008888:	2302      	movs	r3, #2
 800888a:	e033      	b.n	80088f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2224      	movs	r2, #36	; 0x24
 8008898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0201 	bic.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80088ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f042 0201 	orr.w	r2, r2, #1
 80088dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088f2:	2302      	movs	r3, #2
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr
	...

08008900 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a03      	ldr	r2, [pc, #12]	; (8008918 <HAL_PWR_EnableBkUpAccess+0x18>)
 800890a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr
 8008918:	58000400 	.word	0x58000400

0800891c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10c      	bne.n	8008948 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <HAL_PWR_EnterSLEEPMode+0x60>)
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800893a:	d10d      	bne.n	8008958 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800893c:	f000 f83c 	bl	80089b8 <HAL_PWREx_DisableLowPowerRunMode>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d008      	beq.n	8008958 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8008946:	e015      	b.n	8008974 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8008948:	4b0c      	ldr	r3, [pc, #48]	; (800897c <HAL_PWR_EnterSLEEPMode+0x60>)
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008954:	f000 f822 	bl	800899c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <HAL_PWR_EnterSLEEPMode+0x64>)
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	4a08      	ldr	r2, [pc, #32]	; (8008980 <HAL_PWR_EnterSLEEPMode+0x64>)
 800895e:	f023 0304 	bic.w	r3, r3, #4
 8008962:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800896a:	bf30      	wfi
 800896c:	e002      	b.n	8008974 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800896e:	bf40      	sev
    __WFE();
 8008970:	bf20      	wfe
    __WFE();
 8008972:	bf20      	wfe
  }
}
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	58000400 	.word	0x58000400
 8008980:	e000ed00 	.word	0xe000ed00

08008984 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008988:	4b03      	ldr	r3, [pc, #12]	; (8008998 <HAL_PWREx_GetVoltageRange+0x14>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008990:	4618      	mov	r0, r3
 8008992:	46bd      	mov	sp, r7
 8008994:	bc80      	pop	{r7}
 8008996:	4770      	bx	lr
 8008998:	58000400 	.word	0x58000400

0800899c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a03      	ldr	r2, [pc, #12]	; (80089b4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80089a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089aa:	6013      	str	r3, [r2, #0]
}
 80089ac:	bf00      	nop
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr
 80089b4:	58000400 	.word	0x58000400

080089b8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80089be:	4b16      	ldr	r3, [pc, #88]	; (8008a18 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a15      	ldr	r2, [pc, #84]	; (8008a18 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80089c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80089ca:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2232      	movs	r2, #50	; 0x32
 80089d0:	fb02 f303 	mul.w	r3, r2, r3
 80089d4:	4a12      	ldr	r2, [pc, #72]	; (8008a20 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80089d6:	fba2 2303 	umull	r2, r3, r2, r3
 80089da:	0c9b      	lsrs	r3, r3, #18
 80089dc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80089de:	e002      	b.n	80089e6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80089e6:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f2:	d102      	bne.n	80089fa <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f2      	bne.n	80089e0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80089fa:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a06:	d101      	bne.n	8008a0c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e000      	b.n	8008a0e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr
 8008a18:	58000400 	.word	0x58000400
 8008a1c:	20000000 	.word	0x20000000
 8008a20:	431bde83 	.word	0x431bde83

08008a24 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8008a2e:	4b10      	ldr	r3, [pc, #64]	; (8008a70 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f023 0307 	bic.w	r3, r3, #7
 8008a36:	4a0e      	ldr	r2, [pc, #56]	; (8008a70 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008a38:	f043 0302 	orr.w	r3, r3, #2
 8008a3c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008a3e:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	4a0c      	ldr	r2, [pc, #48]	; (8008a74 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a44:	f043 0304 	orr.w	r3, r3, #4
 8008a48:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008a50:	bf30      	wfi
 8008a52:	e002      	b.n	8008a5a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008a54:	bf40      	sev
    __WFE();
 8008a56:	bf20      	wfe
    __WFE();
 8008a58:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008a5a:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	4a05      	ldr	r2, [pc, #20]	; (8008a74 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a60:	f023 0304 	bic.w	r3, r3, #4
 8008a64:	6113      	str	r3, [r2, #16]
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr
 8008a70:	58000400 	.word	0x58000400
 8008a74:	e000ed00 	.word	0xe000ed00

08008a78 <LL_PWR_IsEnabledBkUpAccess>:
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a88:	d101      	bne.n	8008a8e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr
 8008a98:	58000400 	.word	0x58000400

08008a9c <LL_RCC_HSE_EnableTcxo>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aae:	6013      	str	r3, [r2, #0]
}
 8008ab0:	bf00      	nop
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr

08008ab8 <LL_RCC_HSE_DisableTcxo>:
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008aca:	6013      	str	r3, [r2, #0]
}
 8008acc:	bf00      	nop
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bc80      	pop	{r7}
 8008ad2:	4770      	bx	lr

08008ad4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ae6:	d101      	bne.n	8008aec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e000      	b.n	8008aee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr

08008af6 <LL_RCC_HSE_Enable>:
{
 8008af6:	b480      	push	{r7}
 8008af8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b08:	6013      	str	r3, [r2, #0]
}
 8008b0a:	bf00      	nop
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <LL_RCC_HSE_Disable>:
{
 8008b12:	b480      	push	{r7}
 8008b14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b24:	6013      	str	r3, [r2, #0]
}
 8008b26:	bf00      	nop
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr

08008b2e <LL_RCC_HSE_IsReady>:
{
 8008b2e:	b480      	push	{r7}
 8008b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b40:	d101      	bne.n	8008b46 <LL_RCC_HSE_IsReady+0x18>
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <LL_RCC_HSE_IsReady+0x1a>
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <LL_RCC_HSI_Enable>:
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b62:	6013      	str	r3, [r2, #0]
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bc80      	pop	{r7}
 8008b6a:	4770      	bx	lr

08008b6c <LL_RCC_HSI_Disable>:
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b7e:	6013      	str	r3, [r2, #0]
}
 8008b80:	bf00      	nop
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <LL_RCC_HSI_IsReady>:
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b9a:	d101      	bne.n	8008ba0 <LL_RCC_HSI_IsReady+0x18>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <LL_RCC_HSI_IsReady+0x1a>
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr

08008baa <LL_RCC_HSI_SetCalibTrimming>:
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	061b      	lsls	r3, r3, #24
 8008bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	604b      	str	r3, [r1, #4]
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc80      	pop	{r7}
 8008bd0:	4770      	bx	lr

08008bd2 <LL_RCC_LSE_IsReady>:
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d101      	bne.n	8008bea <LL_RCC_LSE_IsReady+0x18>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <LL_RCC_LSE_IsReady+0x1a>
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <LL_RCC_LSI_Enable>:
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8008bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008c0c:	bf00      	nop
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <LL_RCC_LSI_Disable>:
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c24:	f023 0301 	bic.w	r3, r3, #1
 8008c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008c2c:	bf00      	nop
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr

08008c34 <LL_RCC_LSI_IsReady>:
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d101      	bne.n	8008c4c <LL_RCC_LSI_IsReady+0x18>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e000      	b.n	8008c4e <LL_RCC_LSI_IsReady+0x1a>
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr

08008c56 <LL_RCC_MSI_Enable>:
{
 8008c56:	b480      	push	{r7}
 8008c58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c64:	f043 0301 	orr.w	r3, r3, #1
 8008c68:	6013      	str	r3, [r2, #0]
}
 8008c6a:	bf00      	nop
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr

08008c72 <LL_RCC_MSI_Disable>:
{
 8008c72:	b480      	push	{r7}
 8008c74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c80:	f023 0301 	bic.w	r3, r3, #1
 8008c84:	6013      	str	r3, [r2, #0]
}
 8008c86:	bf00      	nop
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr

08008c8e <LL_RCC_MSI_IsReady>:
{
 8008c8e:	b480      	push	{r7}
 8008c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d101      	bne.n	8008ca4 <LL_RCC_MSI_IsReady+0x16>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e000      	b.n	8008ca6 <LL_RCC_MSI_IsReady+0x18>
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr

08008cae <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8008cae:	b480      	push	{r7}
 8008cb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d101      	bne.n	8008cc4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bc80      	pop	{r7}
 8008ccc:	4770      	bx	lr

08008cce <LL_RCC_MSI_GetRange>:
{
 8008cce:	b480      	push	{r7}
 8008cd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <LL_RCC_MSI_SetCalibTrimming>:
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d16:	4313      	orrs	r3, r2
 8008d18:	604b      	str	r3, [r1, #4]
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <LL_RCC_SetSysClkSource>:
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f023 0203 	bic.w	r2, r3, #3
 8008d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	608b      	str	r3, [r1, #8]
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr

08008d4a <LL_RCC_GetSysClkSource>:
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f003 030c 	and.w	r3, r3, #12
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr

08008d60 <LL_RCC_SetAHBPrescaler>:
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	608b      	str	r3, [r1, #8]
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr

08008d86 <LL_RCC_SetAHB3Prescaler>:
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008d96:	f023 020f 	bic.w	r2, r3, #15
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	091b      	lsrs	r3, r3, #4
 8008d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <LL_RCC_SetAPB1Prescaler>:
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	608b      	str	r3, [r1, #8]
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bc80      	pop	{r7}
 8008dd6:	4770      	bx	lr

08008dd8 <LL_RCC_SetAPB2Prescaler>:
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	608b      	str	r3, [r1, #8]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr

08008dfe <LL_RCC_GetAHBPrescaler>:
{
 8008dfe:	b480      	push	{r7}
 8008e00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr

08008e14 <LL_RCC_GetAHB3Prescaler>:
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bc80      	pop	{r7}
 8008e2c:	4770      	bx	lr

08008e2e <LL_RCC_GetAPB1Prescaler>:
{
 8008e2e:	b480      	push	{r7}
 8008e30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr

08008e44 <LL_RCC_GetAPB2Prescaler>:
{
 8008e44:	b480      	push	{r7}
 8008e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr

08008e5a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e6c:	6013      	str	r3, [r2, #0]
}
 8008e6e:	bf00      	nop
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bc80      	pop	{r7}
 8008e74:	4770      	bx	lr

08008e76 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008e76:	b480      	push	{r7}
 8008e78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e88:	6013      	str	r3, [r2, #0]
}
 8008e8a:	bf00      	nop
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr

08008e92 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008e92:	b480      	push	{r7}
 8008e94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ea4:	d101      	bne.n	8008eaa <LL_RCC_PLL_IsReady+0x18>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <LL_RCC_PLL_IsReady+0x1a>
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr

08008eb4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	0a1b      	lsrs	r3, r3, #8
 8008ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr

08008ecc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr

08008ee2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bc80      	pop	{r7}
 8008ef6:	4770      	bx	lr

08008ef8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f003 0303 	and.w	r3, r3, #3
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bc80      	pop	{r7}
 8008f0c:	4770      	bx	lr

08008f0e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f20:	d101      	bne.n	8008f26 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f44:	d101      	bne.n	8008f4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f66:	d101      	bne.n	8008f6c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr

08008f76 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008f76:	b480      	push	{r7}
 8008f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f88:	d101      	bne.n	8008f8e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e000      	b.n	8008f90 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr

08008f98 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e36f      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008faa:	f7ff fece 	bl	8008d4a <LL_RCC_GetSysClkSource>
 8008fae:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fb0:	f7ff ffa2 	bl	8008ef8 <LL_RCC_PLL_GetMainSource>
 8008fb4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 80c4 	beq.w	800914c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x3e>
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	2b0c      	cmp	r3, #12
 8008fce:	d176      	bne.n	80090be <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d173      	bne.n	80090be <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e353      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_RCC_OscConfig+0x68>
 8008ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ffe:	e006      	b.n	800900e <HAL_RCC_OscConfig+0x76>
 8009000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009008:	091b      	lsrs	r3, r3, #4
 800900a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800900e:	4293      	cmp	r3, r2
 8009010:	d222      	bcs.n	8009058 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fd3c 	bl	8009a94 <RCC_SetFlashLatencyFromMSIRange>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e331      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009030:	f043 0308 	orr.w	r3, r3, #8
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009048:	4313      	orrs	r3, r2
 800904a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fe53 	bl	8008cfc <LL_RCC_MSI_SetCalibTrimming>
 8009056:	e021      	b.n	800909c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009062:	f043 0308 	orr.w	r3, r3, #8
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800907a:	4313      	orrs	r3, r2
 800907c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff fe3a 	bl	8008cfc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fd01 	bl	8009a94 <RCC_SetFlashLatencyFromMSIRange>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e2f6      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800909c:	f000 fcc2 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 80090a0:	4603      	mov	r3, r0
 80090a2:	4aa7      	ldr	r2, [pc, #668]	; (8009340 <HAL_RCC_OscConfig+0x3a8>)
 80090a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80090a6:	4ba7      	ldr	r3, [pc, #668]	; (8009344 <HAL_RCC_OscConfig+0x3ac>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7f9 fbd6 	bl	800285c <HAL_InitTick>
 80090b0:	4603      	mov	r3, r0
 80090b2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80090b4:	7cfb      	ldrb	r3, [r7, #19]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d047      	beq.n	800914a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80090ba:	7cfb      	ldrb	r3, [r7, #19]
 80090bc:	e2e5      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d02c      	beq.n	8009120 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80090c6:	f7ff fdc6 	bl	8008c56 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80090ca:	f7f9 fbd1 	bl	8002870 <HAL_GetTick>
 80090ce:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80090d2:	f7f9 fbcd 	bl	8002870 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e2d2      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80090e4:	f7ff fdd3 	bl	8008c8e <LL_RCC_MSI_IsReady>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0f1      	beq.n	80090d2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80090ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090f8:	f043 0308 	orr.w	r3, r3, #8
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009110:	4313      	orrs	r3, r2
 8009112:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fdef 	bl	8008cfc <LL_RCC_MSI_SetCalibTrimming>
 800911e:	e015      	b.n	800914c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009120:	f7ff fda7 	bl	8008c72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009124:	f7f9 fba4 	bl	8002870 <HAL_GetTick>
 8009128:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800912a:	e008      	b.n	800913e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800912c:	f7f9 fba0 	bl	8002870 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b02      	cmp	r3, #2
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e2a5      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800913e:	f7ff fda6 	bl	8008c8e <LL_RCC_MSI_IsReady>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f1      	bne.n	800912c <HAL_RCC_OscConfig+0x194>
 8009148:	e000      	b.n	800914c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800914a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d058      	beq.n	800920a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b08      	cmp	r3, #8
 800915c:	d005      	beq.n	800916a <HAL_RCC_OscConfig+0x1d2>
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	2b0c      	cmp	r3, #12
 8009162:	d108      	bne.n	8009176 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	2b03      	cmp	r3, #3
 8009168:	d105      	bne.n	8009176 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d14b      	bne.n	800920a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e289      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8009176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009188:	4313      	orrs	r3, r2
 800918a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009194:	d102      	bne.n	800919c <HAL_RCC_OscConfig+0x204>
 8009196:	f7ff fcae 	bl	8008af6 <LL_RCC_HSE_Enable>
 800919a:	e00d      	b.n	80091b8 <HAL_RCC_OscConfig+0x220>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80091a4:	d104      	bne.n	80091b0 <HAL_RCC_OscConfig+0x218>
 80091a6:	f7ff fc79 	bl	8008a9c <LL_RCC_HSE_EnableTcxo>
 80091aa:	f7ff fca4 	bl	8008af6 <LL_RCC_HSE_Enable>
 80091ae:	e003      	b.n	80091b8 <HAL_RCC_OscConfig+0x220>
 80091b0:	f7ff fcaf 	bl	8008b12 <LL_RCC_HSE_Disable>
 80091b4:	f7ff fc80 	bl	8008ab8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d012      	beq.n	80091e6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c0:	f7f9 fb56 	bl	8002870 <HAL_GetTick>
 80091c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091c8:	f7f9 fb52 	bl	8002870 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b64      	cmp	r3, #100	; 0x64
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e257      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80091da:	f7ff fca8 	bl	8008b2e <LL_RCC_HSE_IsReady>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0f1      	beq.n	80091c8 <HAL_RCC_OscConfig+0x230>
 80091e4:	e011      	b.n	800920a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091e6:	f7f9 fb43 	bl	8002870 <HAL_GetTick>
 80091ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80091ec:	e008      	b.n	8009200 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091ee:	f7f9 fb3f 	bl	8002870 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b64      	cmp	r3, #100	; 0x64
 80091fa:	d901      	bls.n	8009200 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e244      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009200:	f7ff fc95 	bl	8008b2e <LL_RCC_HSE_IsReady>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1f1      	bne.n	80091ee <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d046      	beq.n	80092a4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	2b04      	cmp	r3, #4
 800921a:	d005      	beq.n	8009228 <HAL_RCC_OscConfig+0x290>
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	2b0c      	cmp	r3, #12
 8009220:	d10e      	bne.n	8009240 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d10b      	bne.n	8009240 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e22a      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fcb6 	bl	8008baa <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800923e:	e031      	b.n	80092a4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d019      	beq.n	800927c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009248:	f7ff fc82 	bl	8008b50 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924c:	f7f9 fb10 	bl	8002870 <HAL_GetTick>
 8009250:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009254:	f7f9 fb0c 	bl	8002870 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e211      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009266:	f7ff fc8f 	bl	8008b88 <LL_RCC_HSI_IsReady>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0f1      	beq.n	8009254 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fc98 	bl	8008baa <LL_RCC_HSI_SetCalibTrimming>
 800927a:	e013      	b.n	80092a4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800927c:	f7ff fc76 	bl	8008b6c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009280:	f7f9 faf6 	bl	8002870 <HAL_GetTick>
 8009284:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009286:	e008      	b.n	800929a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009288:	f7f9 faf2 	bl	8002870 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d901      	bls.n	800929a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e1f7      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800929a:	f7ff fc75 	bl	8008b88 <LL_RCC_HSI_IsReady>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1f1      	bne.n	8009288 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d06e      	beq.n	800938e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d056      	beq.n	8009366 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80092b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092c0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	69da      	ldr	r2, [r3, #28]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f003 0310 	and.w	r3, r3, #16
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d031      	beq.n	8009334 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e1d0      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d013      	beq.n	800931a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80092f2:	f7ff fc8f 	bl	8008c14 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092f6:	f7f9 fabb 	bl	8002870 <HAL_GetTick>
 80092fa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80092fc:	e008      	b.n	8009310 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092fe:	f7f9 fab7 	bl	8002870 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b11      	cmp	r3, #17
 800930a:	d901      	bls.n	8009310 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e1bc      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8009310:	f7ff fc90 	bl	8008c34 <LL_RCC_LSI_IsReady>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1f1      	bne.n	80092fe <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800931a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800931e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009322:	f023 0210 	bic.w	r2, r3, #16
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800932e:	4313      	orrs	r3, r2
 8009330:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009334:	f7ff fc5e 	bl	8008bf4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009338:	f7f9 fa9a 	bl	8002870 <HAL_GetTick>
 800933c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800933e:	e00c      	b.n	800935a <HAL_RCC_OscConfig+0x3c2>
 8009340:	20000000 	.word	0x20000000
 8009344:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009348:	f7f9 fa92 	bl	8002870 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b11      	cmp	r3, #17
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e197      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800935a:	f7ff fc6b 	bl	8008c34 <LL_RCC_LSI_IsReady>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0f1      	beq.n	8009348 <HAL_RCC_OscConfig+0x3b0>
 8009364:	e013      	b.n	800938e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009366:	f7ff fc55 	bl	8008c14 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800936a:	f7f9 fa81 	bl	8002870 <HAL_GetTick>
 800936e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8009370:	e008      	b.n	8009384 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009372:	f7f9 fa7d 	bl	8002870 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	2b11      	cmp	r3, #17
 800937e:	d901      	bls.n	8009384 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e182      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8009384:	f7ff fc56 	bl	8008c34 <LL_RCC_LSI_IsReady>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1f1      	bne.n	8009372 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80d8 	beq.w	800954c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800939c:	f7ff fb6c 	bl	8008a78 <LL_PWR_IsEnabledBkUpAccess>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d113      	bne.n	80093ce <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80093a6:	f7ff faab 	bl	8008900 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093aa:	f7f9 fa61 	bl	8002870 <HAL_GetTick>
 80093ae:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80093b0:	e008      	b.n	80093c4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b2:	f7f9 fa5d 	bl	8002870 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d901      	bls.n	80093c4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e162      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80093c4:	f7ff fb58 	bl	8008a78 <LL_PWR_IsEnabledBkUpAccess>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0f1      	beq.n	80093b2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d07b      	beq.n	80094ce <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	2b85      	cmp	r3, #133	; 0x85
 80093dc:	d003      	beq.n	80093e6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	2b05      	cmp	r3, #5
 80093e4:	d109      	bne.n	80093fa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80093e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093f2:	f043 0304 	orr.w	r3, r3, #4
 80093f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093fa:	f7f9 fa39 	bl	8002870 <HAL_GetTick>
 80093fe:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009414:	e00a      	b.n	800942c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009416:	f7f9 fa2b 	bl	8002870 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	f241 3288 	movw	r2, #5000	; 0x1388
 8009424:	4293      	cmp	r3, r2
 8009426:	d901      	bls.n	800942c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e12e      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800942c:	f7ff fbd1 	bl	8008bd2 <LL_RCC_LSE_IsReady>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0ef      	beq.n	8009416 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	2b81      	cmp	r3, #129	; 0x81
 800943c:	d003      	beq.n	8009446 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b85      	cmp	r3, #133	; 0x85
 8009444:	d121      	bne.n	800948a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009446:	f7f9 fa13 	bl	8002870 <HAL_GetTick>
 800944a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800944c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009460:	e00a      	b.n	8009478 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009462:	f7f9 fa05 	bl	8002870 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009470:	4293      	cmp	r3, r2
 8009472:	d901      	bls.n	8009478 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e108      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800947c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0ec      	beq.n	8009462 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8009488:	e060      	b.n	800954c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800948a:	f7f9 f9f1 	bl	8002870 <HAL_GetTick>
 800948e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800949c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80094a4:	e00a      	b.n	80094bc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094a6:	f7f9 f9e3 	bl	8002870 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d901      	bls.n	80094bc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e0e6      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80094bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1ec      	bne.n	80094a6 <HAL_RCC_OscConfig+0x50e>
 80094cc:	e03e      	b.n	800954c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094ce:	f7f9 f9cf 	bl	8002870 <HAL_GetTick>
 80094d2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80094d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80094e8:	e00a      	b.n	8009500 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ea:	f7f9 f9c1 	bl	8002870 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d901      	bls.n	8009500 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e0c4      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1ec      	bne.n	80094ea <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009510:	f7f9 f9ae 	bl	8002870 <HAL_GetTick>
 8009514:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800951e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009522:	f023 0301 	bic.w	r3, r3, #1
 8009526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800952a:	e00a      	b.n	8009542 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800952c:	f7f9 f9a0 	bl	8002870 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	f241 3288 	movw	r2, #5000	; 0x1388
 800953a:	4293      	cmp	r3, r2
 800953c:	d901      	bls.n	8009542 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e0a3      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009542:	f7ff fb46 	bl	8008bd2 <LL_RCC_LSE_IsReady>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1ef      	bne.n	800952c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8099 	beq.w	8009688 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	2b0c      	cmp	r3, #12
 800955a:	d06c      	beq.n	8009636 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	2b02      	cmp	r3, #2
 8009562:	d14b      	bne.n	80095fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009564:	f7ff fc87 	bl	8008e76 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009568:	f7f9 f982 	bl	8002870 <HAL_GetTick>
 800956c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800956e:	e008      	b.n	8009582 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009570:	f7f9 f97e 	bl	8002870 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b0a      	cmp	r3, #10
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e083      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8009582:	f7ff fc86 	bl	8008e92 <LL_RCC_PLL_IsReady>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1f1      	bne.n	8009570 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800958c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	4b40      	ldr	r3, [pc, #256]	; (8009694 <HAL_RCC_OscConfig+0x6fc>)
 8009594:	4013      	ands	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800959e:	4311      	orrs	r1, r2
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095a4:	0212      	lsls	r2, r2, #8
 80095a6:	4311      	orrs	r1, r2
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80095ac:	4311      	orrs	r1, r2
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80095b2:	4311      	orrs	r1, r2
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80095b8:	430a      	orrs	r2, r1
 80095ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095be:	4313      	orrs	r3, r2
 80095c0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095c2:	f7ff fc4a 	bl	8008e5a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80095c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095d6:	f7f9 f94b 	bl	8002870 <HAL_GetTick>
 80095da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80095dc:	e008      	b.n	80095f0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095de:	f7f9 f947 	bl	8002870 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2b0a      	cmp	r3, #10
 80095ea:	d901      	bls.n	80095f0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e04c      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80095f0:	f7ff fc4f 	bl	8008e92 <LL_RCC_PLL_IsReady>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0f1      	beq.n	80095de <HAL_RCC_OscConfig+0x646>
 80095fa:	e045      	b.n	8009688 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095fc:	f7ff fc3b 	bl	8008e76 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009600:	f7f9 f936 	bl	8002870 <HAL_GetTick>
 8009604:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8009606:	e008      	b.n	800961a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009608:	f7f9 f932 	bl	8002870 <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	2b0a      	cmp	r3, #10
 8009614:	d901      	bls.n	800961a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e037      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800961a:	f7ff fc3a 	bl	8008e92 <LL_RCC_PLL_IsReady>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1f1      	bne.n	8009608 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800962e:	4b1a      	ldr	r3, [pc, #104]	; (8009698 <HAL_RCC_OscConfig+0x700>)
 8009630:	4013      	ands	r3, r2
 8009632:	60cb      	str	r3, [r1, #12]
 8009634:	e028      	b.n	8009688 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e023      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	f003 0203 	and.w	r2, r3, #3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	429a      	cmp	r2, r3
 8009656:	d115      	bne.n	8009684 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009662:	429a      	cmp	r2, r3
 8009664:	d10e      	bne.n	8009684 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	021b      	lsls	r3, r3, #8
 8009672:	429a      	cmp	r2, r3
 8009674:	d106      	bne.n	8009684 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009680:	429a      	cmp	r2, r3
 8009682:	d001      	beq.n	8009688 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e000      	b.n	800968a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	11c1808c 	.word	0x11c1808c
 8009698:	eefefffc 	.word	0xeefefffc

0800969c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e10f      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096b0:	4b89      	ldr	r3, [pc, #548]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d91b      	bls.n	80096f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096be:	4b86      	ldr	r3, [pc, #536]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f023 0207 	bic.w	r2, r3, #7
 80096c6:	4984      	ldr	r1, [pc, #528]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096ce:	f7f9 f8cf 	bl	8002870 <HAL_GetTick>
 80096d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096d4:	e008      	b.n	80096e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80096d6:	f7f9 f8cb 	bl	8002870 <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d901      	bls.n	80096e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e0f3      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096e8:	4b7b      	ldr	r3, [pc, #492]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d1ef      	bne.n	80096d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d016      	beq.n	8009730 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff fb2a 	bl	8008d60 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800970c:	f7f9 f8b0 	bl	8002870 <HAL_GetTick>
 8009710:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009712:	e008      	b.n	8009726 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009714:	f7f9 f8ac 	bl	8002870 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b02      	cmp	r3, #2
 8009720:	d901      	bls.n	8009726 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e0d4      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009726:	f7ff fbf2 	bl	8008f0e <LL_RCC_IsActiveFlag_HPRE>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0f1      	beq.n	8009714 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009738:	2b00      	cmp	r3, #0
 800973a:	d016      	beq.n	800976a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff fb20 	bl	8008d86 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009746:	f7f9 f893 	bl	8002870 <HAL_GetTick>
 800974a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800974c:	e008      	b.n	8009760 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800974e:	f7f9 f88f 	bl	8002870 <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	2b02      	cmp	r3, #2
 800975a:	d901      	bls.n	8009760 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e0b7      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009760:	f7ff fbe6 	bl	8008f30 <LL_RCC_IsActiveFlag_SHDHPRE>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0f1      	beq.n	800974e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0304 	and.w	r3, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	d016      	beq.n	80097a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fb19 	bl	8008db2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009780:	f7f9 f876 	bl	8002870 <HAL_GetTick>
 8009784:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009786:	e008      	b.n	800979a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009788:	f7f9 f872 	bl	8002870 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d901      	bls.n	800979a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e09a      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800979a:	f7ff fbdb 	bl	8008f54 <LL_RCC_IsActiveFlag_PPRE1>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0f1      	beq.n	8009788 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d017      	beq.n	80097e0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fb0e 	bl	8008dd8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80097bc:	f7f9 f858 	bl	8002870 <HAL_GetTick>
 80097c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80097c2:	e008      	b.n	80097d6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80097c4:	f7f9 f854 	bl	8002870 <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d901      	bls.n	80097d6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e07c      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80097d6:	f7ff fbce 	bl	8008f76 <LL_RCC_IsActiveFlag_PPRE2>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0f1      	beq.n	80097c4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d043      	beq.n	8009874 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d106      	bne.n	8009802 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80097f4:	f7ff f99b 	bl	8008b2e <LL_RCC_HSE_IsReady>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d11e      	bne.n	800983c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e066      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	2b03      	cmp	r3, #3
 8009808:	d106      	bne.n	8009818 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800980a:	f7ff fb42 	bl	8008e92 <LL_RCC_PLL_IsReady>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d113      	bne.n	800983c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e05b      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d106      	bne.n	800982e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009820:	f7ff fa35 	bl	8008c8e <LL_RCC_MSI_IsReady>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d108      	bne.n	800983c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e050      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800982e:	f7ff f9ab 	bl	8008b88 <LL_RCC_HSI_IsReady>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e049      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fa6f 	bl	8008d24 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009846:	f7f9 f813 	bl	8002870 <HAL_GetTick>
 800984a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800984c:	e00a      	b.n	8009864 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800984e:	f7f9 f80f 	bl	8002870 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	f241 3288 	movw	r2, #5000	; 0x1388
 800985c:	4293      	cmp	r3, r2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e035      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009864:	f7ff fa71 	bl	8008d4a <LL_RCC_GetSysClkSource>
 8009868:	4602      	mov	r2, r0
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	429a      	cmp	r2, r3
 8009872:	d1ec      	bne.n	800984e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009874:	4b18      	ldr	r3, [pc, #96]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d21b      	bcs.n	80098ba <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f023 0207 	bic.w	r2, r3, #7
 800988a:	4913      	ldr	r1, [pc, #76]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	4313      	orrs	r3, r2
 8009890:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009892:	f7f8 ffed 	bl	8002870 <HAL_GetTick>
 8009896:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009898:	e008      	b.n	80098ac <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800989a:	f7f8 ffe9 	bl	8002870 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e011      	b.n	80098d0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ac:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <HAL_RCC_ClockConfig+0x23c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0307 	and.w	r3, r3, #7
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d1ef      	bne.n	800989a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80098ba:	f000 f8b3 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 80098be:	4603      	mov	r3, r0
 80098c0:	4a06      	ldr	r2, [pc, #24]	; (80098dc <HAL_RCC_ClockConfig+0x240>)
 80098c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80098c4:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <HAL_RCC_ClockConfig+0x244>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7f8 ffc7 	bl	800285c <HAL_InitTick>
 80098ce:	4603      	mov	r3, r0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	58004000 	.word	0x58004000
 80098dc:	20000000 	.word	0x20000000
 80098e0:	20000004 	.word	0x20000004

080098e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098f2:	f7ff fa2a 	bl	8008d4a <LL_RCC_GetSysClkSource>
 80098f6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098f8:	f7ff fafe 	bl	8008ef8 <LL_RCC_PLL_GetMainSource>
 80098fc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <HAL_RCC_GetSysClockFreq+0x2c>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2b0c      	cmp	r3, #12
 8009908:	d139      	bne.n	800997e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d136      	bne.n	800997e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009910:	f7ff f9cd 	bl	8008cae <LL_RCC_MSI_IsEnabledRangeSelect>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d115      	bne.n	8009946 <HAL_RCC_GetSysClockFreq+0x62>
 800991a:	f7ff f9c8 	bl	8008cae <LL_RCC_MSI_IsEnabledRangeSelect>
 800991e:	4603      	mov	r3, r0
 8009920:	2b01      	cmp	r3, #1
 8009922:	d106      	bne.n	8009932 <HAL_RCC_GetSysClockFreq+0x4e>
 8009924:	f7ff f9d3 	bl	8008cce <LL_RCC_MSI_GetRange>
 8009928:	4603      	mov	r3, r0
 800992a:	0a1b      	lsrs	r3, r3, #8
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	e005      	b.n	800993e <HAL_RCC_GetSysClockFreq+0x5a>
 8009932:	f7ff f9d7 	bl	8008ce4 <LL_RCC_MSI_GetRangeAfterStandby>
 8009936:	4603      	mov	r3, r0
 8009938:	0a1b      	lsrs	r3, r3, #8
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	4a36      	ldr	r2, [pc, #216]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x134>)
 8009940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009944:	e014      	b.n	8009970 <HAL_RCC_GetSysClockFreq+0x8c>
 8009946:	f7ff f9b2 	bl	8008cae <LL_RCC_MSI_IsEnabledRangeSelect>
 800994a:	4603      	mov	r3, r0
 800994c:	2b01      	cmp	r3, #1
 800994e:	d106      	bne.n	800995e <HAL_RCC_GetSysClockFreq+0x7a>
 8009950:	f7ff f9bd 	bl	8008cce <LL_RCC_MSI_GetRange>
 8009954:	4603      	mov	r3, r0
 8009956:	091b      	lsrs	r3, r3, #4
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	e005      	b.n	800996a <HAL_RCC_GetSysClockFreq+0x86>
 800995e:	f7ff f9c1 	bl	8008ce4 <LL_RCC_MSI_GetRangeAfterStandby>
 8009962:	4603      	mov	r3, r0
 8009964:	091b      	lsrs	r3, r3, #4
 8009966:	f003 030f 	and.w	r3, r3, #15
 800996a:	4a2b      	ldr	r2, [pc, #172]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x134>)
 800996c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009970:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d115      	bne.n	80099a4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800997c:	e012      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2b04      	cmp	r3, #4
 8009982:	d102      	bne.n	800998a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009984:	4b25      	ldr	r3, [pc, #148]	; (8009a1c <HAL_RCC_GetSysClockFreq+0x138>)
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	e00c      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b08      	cmp	r3, #8
 800998e:	d109      	bne.n	80099a4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009990:	f7ff f8a0 	bl	8008ad4 <LL_RCC_HSE_IsEnabledDiv2>
 8009994:	4603      	mov	r3, r0
 8009996:	2b01      	cmp	r3, #1
 8009998:	d102      	bne.n	80099a0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800999a:	4b20      	ldr	r3, [pc, #128]	; (8009a1c <HAL_RCC_GetSysClockFreq+0x138>)
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	e001      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80099a0:	4b1f      	ldr	r3, [pc, #124]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x13c>)
 80099a2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80099a4:	f7ff f9d1 	bl	8008d4a <LL_RCC_GetSysClkSource>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b0c      	cmp	r3, #12
 80099ac:	d12f      	bne.n	8009a0e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80099ae:	f7ff faa3 	bl	8008ef8 <LL_RCC_PLL_GetMainSource>
 80099b2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d003      	beq.n	80099c2 <HAL_RCC_GetSysClockFreq+0xde>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d003      	beq.n	80099c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80099c0:	e00d      	b.n	80099de <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <HAL_RCC_GetSysClockFreq+0x138>)
 80099c4:	60fb      	str	r3, [r7, #12]
        break;
 80099c6:	e00d      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80099c8:	f7ff f884 	bl	8008ad4 <LL_RCC_HSE_IsEnabledDiv2>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d102      	bne.n	80099d8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80099d2:	4b12      	ldr	r3, [pc, #72]	; (8009a1c <HAL_RCC_GetSysClockFreq+0x138>)
 80099d4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80099d6:	e005      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80099d8:	4b11      	ldr	r3, [pc, #68]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x13c>)
 80099da:	60fb      	str	r3, [r7, #12]
        break;
 80099dc:	e002      	b.n	80099e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	60fb      	str	r3, [r7, #12]
        break;
 80099e2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80099e4:	f7ff fa66 	bl	8008eb4 <LL_RCC_PLL_GetN>
 80099e8:	4602      	mov	r2, r0
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	fb03 f402 	mul.w	r4, r3, r2
 80099f0:	f7ff fa77 	bl	8008ee2 <LL_RCC_PLL_GetDivider>
 80099f4:	4603      	mov	r3, r0
 80099f6:	091b      	lsrs	r3, r3, #4
 80099f8:	3301      	adds	r3, #1
 80099fa:	fbb4 f4f3 	udiv	r4, r4, r3
 80099fe:	f7ff fa65 	bl	8008ecc <LL_RCC_PLL_GetR>
 8009a02:	4603      	mov	r3, r0
 8009a04:	0f5b      	lsrs	r3, r3, #29
 8009a06:	3301      	adds	r3, #1
 8009a08:	fbb4 f3f3 	udiv	r3, r4, r3
 8009a0c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009a0e:	697b      	ldr	r3, [r7, #20]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd90      	pop	{r4, r7, pc}
 8009a18:	08021924 	.word	0x08021924
 8009a1c:	00f42400 	.word	0x00f42400
 8009a20:	01e84800 	.word	0x01e84800

08009a24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a24:	b598      	push	{r3, r4, r7, lr}
 8009a26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009a28:	f7ff ff5c 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	f7ff f9e6 	bl	8008dfe <LL_RCC_GetAHBPrescaler>
 8009a32:	4603      	mov	r3, r0
 8009a34:	091b      	lsrs	r3, r3, #4
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	4a03      	ldr	r2, [pc, #12]	; (8009a48 <HAL_RCC_GetHCLKFreq+0x24>)
 8009a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	bd98      	pop	{r3, r4, r7, pc}
 8009a48:	080218c4 	.word	0x080218c4

08009a4c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a4c:	b598      	push	{r3, r4, r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009a50:	f7ff ffe8 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 8009a54:	4604      	mov	r4, r0
 8009a56:	f7ff f9ea 	bl	8008e2e <LL_RCC_GetAPB1Prescaler>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	0a1b      	lsrs	r3, r3, #8
 8009a5e:	4a03      	ldr	r2, [pc, #12]	; (8009a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	bd98      	pop	{r3, r4, r7, pc}
 8009a6c:	08021904 	.word	0x08021904

08009a70 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a70:	b598      	push	{r3, r4, r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009a74:	f7ff ffd6 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 8009a78:	4604      	mov	r4, r0
 8009a7a:	f7ff f9e3 	bl	8008e44 <LL_RCC_GetAPB2Prescaler>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	0adb      	lsrs	r3, r3, #11
 8009a82:	4a03      	ldr	r2, [pc, #12]	; (8009a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	bd98      	pop	{r3, r4, r7, pc}
 8009a90:	08021904 	.word	0x08021904

08009a94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	091b      	lsrs	r3, r3, #4
 8009aa0:	f003 030f 	and.w	r3, r3, #15
 8009aa4:	4a10      	ldr	r2, [pc, #64]	; (8009ae8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8009aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aaa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8009aac:	f7ff f9b2 	bl	8008e14 <LL_RCC_GetAHB3Prescaler>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	091b      	lsrs	r3, r3, #4
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	4a0c      	ldr	r2, [pc, #48]	; (8009aec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8009aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8009aca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ace:	0c9c      	lsrs	r4, r3, #18
 8009ad0:	f7fe ff58 	bl	8008984 <HAL_PWREx_GetVoltageRange>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 f80b 	bl	8009af4 <RCC_SetFlashLatency>
 8009ade:	4603      	mov	r3, r0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd90      	pop	{r4, r7, pc}
 8009ae8:	08021924 	.word	0x08021924
 8009aec:	080218c4 	.word	0x080218c4
 8009af0:	431bde83 	.word	0x431bde83

08009af4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08e      	sub	sp, #56	; 0x38
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8009afe:	4a3a      	ldr	r2, [pc, #232]	; (8009be8 <RCC_SetFlashLatency+0xf4>)
 8009b00:	f107 0320 	add.w	r3, r7, #32
 8009b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b08:	6018      	str	r0, [r3, #0]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8009b0e:	4a37      	ldr	r2, [pc, #220]	; (8009bec <RCC_SetFlashLatency+0xf8>)
 8009b10:	f107 0318 	add.w	r3, r7, #24
 8009b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b18:	6018      	str	r0, [r3, #0]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009b1e:	4a34      	ldr	r2, [pc, #208]	; (8009bf0 <RCC_SetFlashLatency+0xfc>)
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b34:	d11b      	bne.n	8009b6e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b36:	2300      	movs	r3, #0
 8009b38:	633b      	str	r3, [r7, #48]	; 0x30
 8009b3a:	e014      	b.n	8009b66 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	3338      	adds	r3, #56	; 0x38
 8009b42:	443b      	add	r3, r7
 8009b44:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d807      	bhi.n	8009b60 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	3338      	adds	r3, #56	; 0x38
 8009b56:	443b      	add	r3, r7
 8009b58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009b5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b5e:	e021      	b.n	8009ba4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	3301      	adds	r3, #1
 8009b64:	633b      	str	r3, [r7, #48]	; 0x30
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d9e7      	bls.n	8009b3c <RCC_SetFlashLatency+0x48>
 8009b6c:	e01a      	b.n	8009ba4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009b6e:	2300      	movs	r3, #0
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b72:	e014      	b.n	8009b9e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	3338      	adds	r3, #56	; 0x38
 8009b7a:	443b      	add	r3, r7
 8009b7c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8009b80:	461a      	mov	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d807      	bhi.n	8009b98 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	3338      	adds	r3, #56	; 0x38
 8009b8e:	443b      	add	r3, r7
 8009b90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b96:	e005      	b.n	8009ba4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d9e7      	bls.n	8009b74 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009ba4:	4b13      	ldr	r3, [pc, #76]	; (8009bf4 <RCC_SetFlashLatency+0x100>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f023 0207 	bic.w	r2, r3, #7
 8009bac:	4911      	ldr	r1, [pc, #68]	; (8009bf4 <RCC_SetFlashLatency+0x100>)
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bb4:	f7f8 fe5c 	bl	8002870 <HAL_GetTick>
 8009bb8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009bba:	e008      	b.n	8009bce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009bbc:	f7f8 fe58 	bl	8002870 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d901      	bls.n	8009bce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e007      	b.n	8009bde <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009bce:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <RCC_SetFlashLatency+0x100>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d1ef      	bne.n	8009bbc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3738      	adds	r7, #56	; 0x38
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	08021000 	.word	0x08021000
 8009bec:	08021008 	.word	0x08021008
 8009bf0:	08021010 	.word	0x08021010
 8009bf4:	58004000 	.word	0x58004000

08009bf8 <LL_RCC_LSE_IsReady>:
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d101      	bne.n	8009c10 <LL_RCC_LSE_IsReady+0x18>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e000      	b.n	8009c12 <LL_RCC_LSE_IsReady+0x1a>
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bc80      	pop	{r7}
 8009c18:	4770      	bx	lr

08009c1a <LL_RCC_SetUSARTClockSource>:
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	0c1b      	lsrs	r3, r3, #16
 8009c2e:	43db      	mvns	r3, r3
 8009c30:	401a      	ands	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bc80      	pop	{r7}
 8009c48:	4770      	bx	lr

08009c4a <LL_RCC_SetI2SClockSource>:
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bc80      	pop	{r7}
 8009c72:	4770      	bx	lr

08009c74 <LL_RCC_SetLPUARTClockSource>:
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bc80      	pop	{r7}
 8009c9c:	4770      	bx	lr

08009c9e <LL_RCC_SetI2CClockSource>:
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b083      	sub	sp, #12
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009caa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	091b      	lsrs	r3, r3, #4
 8009cb2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009cb6:	43db      	mvns	r3, r3
 8009cb8:	401a      	ands	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	011b      	lsls	r3, r3, #4
 8009cbe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bc80      	pop	{r7}
 8009cd4:	4770      	bx	lr

08009cd6 <LL_RCC_SetLPTIMClockSource>:
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ce2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	0c1b      	lsrs	r3, r3, #16
 8009cea:	041b      	lsls	r3, r3, #16
 8009cec:	43db      	mvns	r3, r3
 8009cee:	401a      	ands	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bc80      	pop	{r7}
 8009d06:	4770      	bx	lr

08009d08 <LL_RCC_SetRNGClockSource>:
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d18:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bc80      	pop	{r7}
 8009d30:	4770      	bx	lr

08009d32 <LL_RCC_SetADCClockSource>:
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr

08009d5c <LL_RCC_SetRTCClockSource>:
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bc80      	pop	{r7}
 8009d84:	4770      	bx	lr

08009d86 <LL_RCC_GetRTCClockSource>:
{
 8009d86:	b480      	push	{r7}
 8009d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bc80      	pop	{r7}
 8009d9c:	4770      	bx	lr

08009d9e <LL_RCC_ForceBackupDomainReset>:
{
 8009d9e:	b480      	push	{r7}
 8009da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009db6:	bf00      	nop
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bc80      	pop	{r7}
 8009dbc:	4770      	bx	lr

08009dbe <LL_RCC_ReleaseBackupDomainReset>:
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009dd6:	bf00      	nop
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bc80      	pop	{r7}
 8009ddc:	4770      	bx	lr
	...

08009de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8009dec:	2300      	movs	r3, #0
 8009dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009df0:	2300      	movs	r3, #0
 8009df2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d058      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8009e00:	f7fe fd7e 	bl	8008900 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e04:	f7f8 fd34 	bl	8002870 <HAL_GetTick>
 8009e08:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009e0a:	e009      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e0c:	f7f8 fd30 	bl	8002870 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d902      	bls.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	74fb      	strb	r3, [r7, #19]
        break;
 8009e1e:	e006      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009e20:	4b7b      	ldr	r3, [pc, #492]	; (800a010 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e2c:	d1ee      	bne.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8009e2e:	7cfb      	ldrb	r3, [r7, #19]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d13c      	bne.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009e34:	f7ff ffa7 	bl	8009d86 <LL_RCC_GetRTCClockSource>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d00f      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e50:	f7ff ffa5 	bl	8009d9e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e54:	f7ff ffb3 	bl	8009dbe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d014      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e6c:	f7f8 fd00 	bl	8002870 <HAL_GetTick>
 8009e70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009e72:	e00b      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e74:	f7f8 fcfc 	bl	8002870 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d902      	bls.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	74fb      	strb	r3, [r7, #19]
            break;
 8009e8a:	e004      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009e8c:	f7ff feb4 	bl	8009bf8 <LL_RCC_LSE_IsReady>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d1ee      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8009e96:	7cfb      	ldrb	r3, [r7, #19]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d105      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff ff5b 	bl	8009d5c <LL_RCC_SetRTCClockSource>
 8009ea6:	e004      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ea8:	7cfb      	ldrb	r3, [r7, #19]
 8009eaa:	74bb      	strb	r3, [r7, #18]
 8009eac:	e001      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eae:	7cfb      	ldrb	r3, [r7, #19]
 8009eb0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7ff fea9 	bl	8009c1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff fe9e 	bl	8009c1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0320 	and.w	r3, r3, #32
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff fec0 	bl	8009c74 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7ff fee6 	bl	8009cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d004      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff fedb 	bl	8009cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d004      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fed0 	bl	8009cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d004      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fea9 	bl	8009c9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff fe9e 	bl	8009c9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d004      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fe93 	bl	8009c9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0310 	and.w	r3, r3, #16
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d011      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7ff fe5e 	bl	8009c4a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f96:	d107      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8009f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d010      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7ff fea5 	bl	8009d08 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d107      	bne.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d011      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fea3 	bl	8009d32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff4:	d107      	bne.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a004:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800a006:	7cbb      	ldrb	r3, [r7, #18]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	58000400 	.word	0x58000400

0800a014 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d071      	beq.n	800a10a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d106      	bne.n	800a040 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7f8 f890 	bl	8002160 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a048:	4b32      	ldr	r3, [pc, #200]	; (800a114 <HAL_RTC_Init+0x100>)
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0310 	and.w	r3, r3, #16
 800a050:	2b10      	cmp	r3, #16
 800a052:	d051      	beq.n	800a0f8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a054:	4b2f      	ldr	r3, [pc, #188]	; (800a114 <HAL_RTC_Init+0x100>)
 800a056:	22ca      	movs	r2, #202	; 0xca
 800a058:	625a      	str	r2, [r3, #36]	; 0x24
 800a05a:	4b2e      	ldr	r3, [pc, #184]	; (800a114 <HAL_RTC_Init+0x100>)
 800a05c:	2253      	movs	r2, #83	; 0x53
 800a05e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fa11 	bl	800a488 <RTC_EnterInitMode>
 800a066:	4603      	mov	r3, r0
 800a068:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d13f      	bne.n	800a0f0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a070:	4b28      	ldr	r3, [pc, #160]	; (800a114 <HAL_RTC_Init+0x100>)
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	4a27      	ldr	r2, [pc, #156]	; (800a114 <HAL_RTC_Init+0x100>)
 800a076:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800a07a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a07e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a080:	4b24      	ldr	r3, [pc, #144]	; (800a114 <HAL_RTC_Init+0x100>)
 800a082:	699a      	ldr	r2, [r3, #24]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6859      	ldr	r1, [r3, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	4319      	orrs	r1, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	430b      	orrs	r3, r1
 800a094:	491f      	ldr	r1, [pc, #124]	; (800a114 <HAL_RTC_Init+0x100>)
 800a096:	4313      	orrs	r3, r2
 800a098:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	041b      	lsls	r3, r3, #16
 800a0a4:	491b      	ldr	r1, [pc, #108]	; (800a114 <HAL_RTC_Init+0x100>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a0aa:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <HAL_RTC_Init+0x100>)
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	4915      	ldr	r1, [pc, #84]	; (800a114 <HAL_RTC_Init+0x100>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fa14 	bl	800a4f0 <RTC_ExitInitMode>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10e      	bne.n	800a0f0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <HAL_RTC_Init+0x100>)
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a19      	ldr	r1, [r3, #32]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	4319      	orrs	r1, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	490a      	ldr	r1, [pc, #40]	; (800a114 <HAL_RTC_Init+0x100>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0f0:	4b08      	ldr	r3, [pc, #32]	; (800a114 <HAL_RTC_Init+0x100>)
 800a0f2:	22ff      	movs	r2, #255	; 0xff
 800a0f4:	625a      	str	r2, [r3, #36]	; 0x24
 800a0f6:	e001      	b.n	800a0fc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d103      	bne.n	800a10a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40002800 	.word	0x40002800

0800a118 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a118:	b590      	push	{r4, r7, lr}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <HAL_RTC_SetAlarm_IT+0x1e>
 800a132:	2302      	movs	r3, #2
 800a134:	e0f3      	b.n	800a31e <HAL_RTC_SetAlarm_IT+0x206>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2201      	movs	r2, #1
 800a13a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2202      	movs	r2, #2
 800a142:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800a146:	4b78      	ldr	r3, [pc, #480]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a14e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a156:	d06a      	beq.n	800a22e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d13a      	bne.n	800a1d4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a15e:	4b72      	ldr	r3, [pc, #456]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	d102      	bne.n	800a170 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2200      	movs	r2, #0
 800a16e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f9f5 	bl	800a56c <RTC_ByteToBcd2>
 800a182:	4603      	mov	r3, r0
 800a184:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 f9ee 	bl	800a56c <RTC_ByteToBcd2>
 800a190:	4603      	mov	r3, r0
 800a192:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a194:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	789b      	ldrb	r3, [r3, #2]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 f9e6 	bl	800a56c <RTC_ByteToBcd2>
 800a1a0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a1a2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	78db      	ldrb	r3, [r3, #3]
 800a1aa:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a1ac:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f9d8 	bl	800a56c <RTC_ByteToBcd2>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a1c0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a1c8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	e02c      	b.n	800a22e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800a1dc:	d00d      	beq.n	800a1fa <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1e6:	d008      	beq.n	800a1fa <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a1e8:	4b4f      	ldr	r3, [pc, #316]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	785b      	ldrb	r3, [r3, #1]
 800a204:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a206:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a20c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	78db      	ldrb	r3, [r3, #3]
 800a212:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a214:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a21c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a21e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a224:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a22e:	4b3e      	ldr	r3, [pc, #248]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a230:	22ca      	movs	r2, #202	; 0xca
 800a232:	625a      	str	r2, [r3, #36]	; 0x24
 800a234:	4b3c      	ldr	r3, [pc, #240]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a236:	2253      	movs	r2, #83	; 0x53
 800a238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a242:	d12c      	bne.n	800a29e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a244:	4b38      	ldr	r3, [pc, #224]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	4a37      	ldr	r2, [pc, #220]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a24a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a24e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a250:	4b35      	ldr	r3, [pc, #212]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a252:	2201      	movs	r2, #1
 800a254:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25c:	d107      	bne.n	800a26e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	4930      	ldr	r1, [pc, #192]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	644b      	str	r3, [r1, #68]	; 0x44
 800a26c:	e006      	b.n	800a27c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800a26e:	4a2e      	ldr	r2, [pc, #184]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800a274:	4a2c      	ldr	r2, [pc, #176]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800a27c:	4a2a      	ldr	r2, [pc, #168]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	f043 0201 	orr.w	r2, r3, #1
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a290:	4b25      	ldr	r3, [pc, #148]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	4a24      	ldr	r2, [pc, #144]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a296:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800a29a:	6193      	str	r3, [r2, #24]
 800a29c:	e02b      	b.n	800a2f6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a29e:	4b22      	ldr	r3, [pc, #136]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	4a21      	ldr	r2, [pc, #132]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2a4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800a2a8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a2aa:	4b1f      	ldr	r3, [pc, #124]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2b6:	d107      	bne.n	800a2c8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	699a      	ldr	r2, [r3, #24]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	4919      	ldr	r1, [pc, #100]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a2c6:	e006      	b.n	800a2d6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800a2c8:	4a17      	ldr	r2, [pc, #92]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800a2ce:	4a16      	ldr	r2, [pc, #88]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800a2d6:	4a14      	ldr	r2, [pc, #80]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	f043 0202 	orr.w	r2, r3, #2
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a2ea:	4b0f      	ldr	r3, [pc, #60]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	4a0e      	ldr	r2, [pc, #56]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2f0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800a2f4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a2f6:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <HAL_RTC_SetAlarm_IT+0x214>)
 800a2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2fc:	4a0b      	ldr	r2, [pc, #44]	; (800a32c <HAL_RTC_SetAlarm_IT+0x214>)
 800a2fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a302:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a306:	4b08      	ldr	r3, [pc, #32]	; (800a328 <HAL_RTC_SetAlarm_IT+0x210>)
 800a308:	22ff      	movs	r2, #255	; 0xff
 800a30a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	bd90      	pop	{r4, r7, pc}
 800a326:	bf00      	nop
 800a328:	40002800 	.word	0x40002800
 800a32c:	58000800 	.word	0x58000800

0800a330 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_RTC_DeactivateAlarm+0x18>
 800a344:	2302      	movs	r3, #2
 800a346:	e048      	b.n	800a3da <HAL_RTC_DeactivateAlarm+0xaa>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a358:	4b22      	ldr	r3, [pc, #136]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a35a:	22ca      	movs	r2, #202	; 0xca
 800a35c:	625a      	str	r2, [r3, #36]	; 0x24
 800a35e:	4b21      	ldr	r3, [pc, #132]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a360:	2253      	movs	r2, #83	; 0x53
 800a362:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a36a:	d115      	bne.n	800a398 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a36c:	4b1d      	ldr	r3, [pc, #116]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	4a1c      	ldr	r2, [pc, #112]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a376:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800a378:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37c:	4a19      	ldr	r2, [pc, #100]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a37e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a382:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a388:	f023 0201 	bic.w	r2, r3, #1
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a390:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a392:	2201      	movs	r2, #1
 800a394:	65da      	str	r2, [r3, #92]	; 0x5c
 800a396:	e014      	b.n	800a3c2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a398:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	4a11      	ldr	r2, [pc, #68]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a39e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800a3a2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800a3a4:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a8:	4a0e      	ldr	r2, [pc, #56]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3ae:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b4:	f023 0202 	bic.w	r2, r3, #2
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a3bc:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3be:	2202      	movs	r2, #2
 800a3c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3c2:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3c4:	22ff      	movs	r2, #255	; 0xff
 800a3c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bc80      	pop	{r7}
 800a3e2:	4770      	bx	lr
 800a3e4:	40002800 	.word	0x40002800

0800a3e8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800a3f0:	4b11      	ldr	r3, [pc, #68]	; (800a438 <HAL_RTC_AlarmIRQHandler+0x50>)
 800a3f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d005      	beq.n	800a412 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <HAL_RTC_AlarmIRQHandler+0x50>)
 800a408:	2201      	movs	r2, #1
 800a40a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7f8 fc40 	bl	8002c92 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d005      	beq.n	800a428 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <HAL_RTC_AlarmIRQHandler+0x50>)
 800a41e:	2202      	movs	r2, #2
 800a420:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f94a 	bl	800a6bc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a430:	bf00      	nop
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	40002800 	.word	0x40002800

0800a43c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a444:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <HAL_RTC_WaitForSynchro+0x48>)
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	4a0e      	ldr	r2, [pc, #56]	; (800a484 <HAL_RTC_WaitForSynchro+0x48>)
 800a44a:	f023 0320 	bic.w	r3, r3, #32
 800a44e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a450:	f7f8 fa0e 	bl	8002870 <HAL_GetTick>
 800a454:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a456:	e009      	b.n	800a46c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a458:	f7f8 fa0a 	bl	8002870 <HAL_GetTick>
 800a45c:	4602      	mov	r2, r0
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a466:	d901      	bls.n	800a46c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e006      	b.n	800a47a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a46c:	4b05      	ldr	r3, [pc, #20]	; (800a484 <HAL_RTC_WaitForSynchro+0x48>)
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0320 	and.w	r3, r3, #32
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0ef      	beq.n	800a458 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	40002800 	.word	0x40002800

0800a488 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a494:	4b15      	ldr	r3, [pc, #84]	; (800a4ec <RTC_EnterInitMode+0x64>)
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d120      	bne.n	800a4e2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a4a0:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <RTC_EnterInitMode+0x64>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	4a11      	ldr	r2, [pc, #68]	; (800a4ec <RTC_EnterInitMode+0x64>)
 800a4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4aa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a4ac:	f7f8 f9e0 	bl	8002870 <HAL_GetTick>
 800a4b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a4b2:	e00d      	b.n	800a4d0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a4b4:	f7f8 f9dc 	bl	8002870 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4c2:	d905      	bls.n	800a4d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a4d0:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <RTC_EnterInitMode+0x64>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <RTC_EnterInitMode+0x5a>
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d1e8      	bne.n	800a4b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	40002800 	.word	0x40002800

0800a4f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a4fc:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <RTC_ExitInitMode+0x78>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	4a19      	ldr	r2, [pc, #100]	; (800a568 <RTC_ExitInitMode+0x78>)
 800a502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a506:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a508:	4b17      	ldr	r3, [pc, #92]	; (800a568 <RTC_ExitInitMode+0x78>)
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	f003 0320 	and.w	r3, r3, #32
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10c      	bne.n	800a52e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff ff91 	bl	800a43c <HAL_RTC_WaitForSynchro>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01e      	beq.n	800a55e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2203      	movs	r2, #3
 800a524:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	73fb      	strb	r3, [r7, #15]
 800a52c:	e017      	b.n	800a55e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a52e:	4b0e      	ldr	r3, [pc, #56]	; (800a568 <RTC_ExitInitMode+0x78>)
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	4a0d      	ldr	r2, [pc, #52]	; (800a568 <RTC_ExitInitMode+0x78>)
 800a534:	f023 0320 	bic.w	r3, r3, #32
 800a538:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff ff7e 	bl	800a43c <HAL_RTC_WaitForSynchro>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d005      	beq.n	800a552 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2203      	movs	r2, #3
 800a54a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a552:	4b05      	ldr	r3, [pc, #20]	; (800a568 <RTC_ExitInitMode+0x78>)
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	4a04      	ldr	r2, [pc, #16]	; (800a568 <RTC_ExitInitMode+0x78>)
 800a558:	f043 0320 	orr.w	r3, r3, #32
 800a55c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	40002800 	.word	0x40002800

0800a56c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a57e:	e005      	b.n	800a58c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	3b0a      	subs	r3, #10
 800a58a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a58c:	7afb      	ldrb	r3, [r7, #11]
 800a58e:	2b09      	cmp	r3, #9
 800a590:	d8f6      	bhi.n	800a580 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	b2db      	uxtb	r3, r3
 800a596:	011b      	lsls	r3, r3, #4
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	7afb      	ldrb	r3, [r7, #11]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	b2db      	uxtb	r3, r3
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bc80      	pop	{r7}
 800a5a8:	4770      	bx	lr
	...

0800a5ac <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <HAL_RTCEx_EnableBypassShadow+0x16>
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e01f      	b.n	800a602 <HAL_RTCEx_EnableBypassShadow+0x56>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5d2:	4b0e      	ldr	r3, [pc, #56]	; (800a60c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5d4:	22ca      	movs	r2, #202	; 0xca
 800a5d6:	625a      	str	r2, [r3, #36]	; 0x24
 800a5d8:	4b0c      	ldr	r3, [pc, #48]	; (800a60c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5da:	2253      	movs	r2, #83	; 0x53
 800a5dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a5de:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5e4:	f043 0320 	orr.w	r3, r3, #32
 800a5e8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5ea:	4b08      	ldr	r3, [pc, #32]	; (800a60c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5ec:	22ff      	movs	r2, #255	; 0xff
 800a5ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	bc80      	pop	{r7}
 800a60a:	4770      	bx	lr
 800a60c:	40002800 	.word	0x40002800

0800a610 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d101      	bne.n	800a626 <HAL_RTCEx_SetSSRU_IT+0x16>
 800a622:	2302      	movs	r3, #2
 800a624:	e027      	b.n	800a676 <HAL_RTCEx_SetSSRU_IT+0x66>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2202      	movs	r2, #2
 800a632:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a636:	4b12      	ldr	r3, [pc, #72]	; (800a680 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a638:	22ca      	movs	r2, #202	; 0xca
 800a63a:	625a      	str	r2, [r3, #36]	; 0x24
 800a63c:	4b10      	ldr	r3, [pc, #64]	; (800a680 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a63e:	2253      	movs	r2, #83	; 0x53
 800a640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800a642:	4b0f      	ldr	r3, [pc, #60]	; (800a680 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	4a0e      	ldr	r2, [pc, #56]	; (800a680 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800a64e:	4b0d      	ldr	r3, [pc, #52]	; (800a684 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a654:	4a0b      	ldr	r2, [pc, #44]	; (800a684 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a65a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a65e:	4b08      	ldr	r3, [pc, #32]	; (800a680 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a660:	22ff      	movs	r2, #255	; 0xff
 800a662:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr
 800a680:	40002800 	.word	0x40002800
 800a684:	58000800 	.word	0x58000800

0800a688 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800a690:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800a69c:	4b06      	ldr	r3, [pc, #24]	; (800a6b8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a69e:	2240      	movs	r2, #64	; 0x40
 800a6a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7f8 faff 	bl	8002ca6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	40002800 	.word	0x40002800

0800a6bc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bc80      	pop	{r7}
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b087      	sub	sp, #28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a6dc:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <HAL_RTCEx_BKUPWrite+0x2c>)
 800a6de:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	601a      	str	r2, [r3, #0]
}
 800a6f0:	bf00      	nop
 800a6f2:	371c      	adds	r7, #28
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	4000b100 	.word	0x4000b100

0800a700 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a70a:	4b07      	ldr	r3, [pc, #28]	; (800a728 <HAL_RTCEx_BKUPRead+0x28>)
 800a70c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	bc80      	pop	{r7}
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	4000b100 	.word	0x4000b100

0800a72c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e0c6      	b.n	800a8cc <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a742:	2b00      	cmp	r3, #0
 800a744:	d108      	bne.n	800a758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a74e:	d009      	beq.n	800a764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	61da      	str	r2, [r3, #28]
 800a756:	e005      	b.n	800a764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d106      	bne.n	800a77e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7f7 fd9b 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2202      	movs	r2, #2
 800a782:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a794:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a79e:	d902      	bls.n	800a7a6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	e002      	b.n	800a7ac <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a7a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a7b4:	d007      	beq.n	800a7c6 <HAL_SPI_Init+0x9a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a7be:	d002      	beq.n	800a7c6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	431a      	orrs	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7fe:	431a      	orrs	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a808:	ea42 0103 	orr.w	r1, r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a810:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a824:	d11b      	bne.n	800a85e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10b      	bne.n	800a846 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a836:	d903      	bls.n	800a840 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	631a      	str	r2, [r3, #48]	; 0x30
 800a83e:	e002      	b.n	800a846 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d107      	bne.n	800a85e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a85c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	0c1b      	lsrs	r3, r3, #16
 800a864:	f003 0204 	and.w	r2, r3, #4
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	f003 0310 	and.w	r3, r3, #16
 800a870:	431a      	orrs	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a876:	f003 0308 	and.w	r3, r3, #8
 800a87a:	431a      	orrs	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a884:	ea42 0103 	orr.w	r1, r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	430a      	orrs	r2, r1
 800a894:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a89e:	d105      	bne.n	800a8ac <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	b292      	uxth	r2, r2
 800a8aa:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	69da      	ldr	r2, [r3, #28]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b088      	sub	sp, #32
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	603b      	str	r3, [r7, #0]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d101      	bne.n	800a8f6 <HAL_SPI_Transmit+0x22>
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	e17a      	b.n	800abec <HAL_SPI_Transmit+0x318>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8fe:	f7f7 ffb7 	bl	8002870 <HAL_GetTick>
 800a902:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b01      	cmp	r3, #1
 800a912:	d002      	beq.n	800a91a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a914:	2302      	movs	r3, #2
 800a916:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a918:	e15f      	b.n	800abda <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <HAL_SPI_Transmit+0x52>
 800a920:	88fb      	ldrh	r3, [r7, #6]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d102      	bne.n	800a92c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a92a:	e156      	b.n	800abda <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2203      	movs	r2, #3
 800a930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a976:	d10f      	bne.n	800a998 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a986:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a996:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9a0:	d10f      	bne.n	800a9c2 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9c0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9cc:	2b40      	cmp	r3, #64	; 0x40
 800a9ce:	d007      	beq.n	800a9e0 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9e8:	d94b      	bls.n	800aa82 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <HAL_SPI_Transmit+0x124>
 800a9f2:	8afb      	ldrh	r3, [r7, #22]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d13e      	bne.n	800aa76 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fc:	881a      	ldrh	r2, [r3, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa08:	1c9a      	adds	r2, r3, #2
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa1c:	e02b      	b.n	800aa76 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d112      	bne.n	800aa52 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	881a      	ldrh	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	1c9a      	adds	r2, r3, #2
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa50:	e011      	b.n	800aa76 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa52:	f7f7 ff0d 	bl	8002870 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d803      	bhi.n	800aa6a <HAL_SPI_Transmit+0x196>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa68:	d102      	bne.n	800aa70 <HAL_SPI_Transmit+0x19c>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d102      	bne.n	800aa76 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aa74:	e0b1      	b.n	800abda <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1ce      	bne.n	800aa1e <HAL_SPI_Transmit+0x14a>
 800aa80:	e07c      	b.n	800ab7c <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <HAL_SPI_Transmit+0x1bc>
 800aa8a:	8afb      	ldrh	r3, [r7, #22]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d170      	bne.n	800ab72 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d912      	bls.n	800aac0 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	881a      	ldrh	r2, [r3, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaaa:	1c9a      	adds	r2, r3, #2
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	3b02      	subs	r3, #2
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aabe:	e058      	b.n	800ab72 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	330c      	adds	r3, #12
 800aaca:	7812      	ldrb	r2, [r2, #0]
 800aacc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aadc:	b29b      	uxth	r3, r3
 800aade:	3b01      	subs	r3, #1
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800aae6:	e044      	b.n	800ab72 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d12b      	bne.n	800ab4e <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d912      	bls.n	800ab26 <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab04:	881a      	ldrh	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	1c9a      	adds	r2, r3, #2
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	3b02      	subs	r3, #2
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab24:	e025      	b.n	800ab72 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	330c      	adds	r3, #12
 800ab30:	7812      	ldrb	r2, [r2, #0]
 800ab32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	3b01      	subs	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab4c:	e011      	b.n	800ab72 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab4e:	f7f7 fe8f 	bl	8002870 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d803      	bhi.n	800ab66 <HAL_SPI_Transmit+0x292>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab64:	d102      	bne.n	800ab6c <HAL_SPI_Transmit+0x298>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab70:	e033      	b.n	800abda <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1b5      	bne.n	800aae8 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab84:	d107      	bne.n	800ab96 <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab94:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f948 	bl	800ae30 <SPI_EndRxTxTransaction>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abb4:	2300      	movs	r3, #0
 800abb6:	613b      	str	r3, [r7, #16]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	613b      	str	r3, [r7, #16]
 800abc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d002      	beq.n	800abd8 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	77fb      	strb	r3, [r7, #31]
 800abd6:	e000      	b.n	800abda <HAL_SPI_Transmit+0x306>
  }

error:
 800abd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800abea:	7ffb      	ldrb	r3, [r7, #31]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3720      	adds	r7, #32
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b088      	sub	sp, #32
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	4613      	mov	r3, r2
 800ac02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ac04:	f7f7 fe34 	bl	8002870 <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0c:	1a9b      	subs	r3, r3, r2
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	4413      	add	r3, r2
 800ac12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ac14:	f7f7 fe2c 	bl	8002870 <HAL_GetTick>
 800ac18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac1a:	4b39      	ldr	r3, [pc, #228]	; (800ad00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	015b      	lsls	r3, r3, #5
 800ac20:	0d1b      	lsrs	r3, r3, #20
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	fb02 f303 	mul.w	r3, r2, r3
 800ac28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac2a:	e054      	b.n	800acd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac32:	d050      	beq.n	800acd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac34:	f7f7 fe1c 	bl	8002870 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d902      	bls.n	800ac4a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d13d      	bne.n	800acc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac62:	d111      	bne.n	800ac88 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac6c:	d004      	beq.n	800ac78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac76:	d107      	bne.n	800ac88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac90:	d10f      	bne.n	800acb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e017      	b.n	800acf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800accc:	2300      	movs	r3, #0
 800acce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	689a      	ldr	r2, [r3, #8]
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	4013      	ands	r3, r2
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	bf0c      	ite	eq
 800ace6:	2301      	moveq	r3, #1
 800ace8:	2300      	movne	r3, #0
 800acea:	b2db      	uxtb	r3, r3
 800acec:	461a      	mov	r2, r3
 800acee:	79fb      	ldrb	r3, [r7, #7]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d19b      	bne.n	800ac2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20000000 	.word	0x20000000

0800ad04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b08a      	sub	sp, #40	; 0x28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ad16:	f7f7 fdab 	bl	8002870 <HAL_GetTick>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	4413      	add	r3, r2
 800ad24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ad26:	f7f7 fda3 	bl	8002870 <HAL_GetTick>
 800ad2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	330c      	adds	r3, #12
 800ad32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ad34:	4b3d      	ldr	r3, [pc, #244]	; (800ae2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	00da      	lsls	r2, r3, #3
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	0d1b      	lsrs	r3, r3, #20
 800ad44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad46:	fb02 f303 	mul.w	r3, r2, r3
 800ad4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ad4c:	e060      	b.n	800ae10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ad54:	d107      	bne.n	800ad66 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d104      	bne.n	800ad66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad6c:	d050      	beq.n	800ae10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad6e:	f7f7 fd7f 	bl	8002870 <HAL_GetTick>
 800ad72:	4602      	mov	r2, r0
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d902      	bls.n	800ad84 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d13d      	bne.n	800ae00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad9c:	d111      	bne.n	800adc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ada6:	d004      	beq.n	800adb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb0:	d107      	bne.n	800adc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adca:	d10f      	bne.n	800adec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e010      	b.n	800ae22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689a      	ldr	r2, [r3, #8]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	4013      	ands	r3, r2
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d196      	bne.n	800ad4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3728      	adds	r7, #40	; 0x28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20000000 	.word	0x20000000

0800ae30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7ff ff5b 	bl	800ad04 <SPI_WaitFifoStateUntilTimeout>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d007      	beq.n	800ae64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae58:	f043 0220 	orr.w	r2, r3, #32
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e027      	b.n	800aeb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2180      	movs	r1, #128	; 0x80
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f7ff fec0 	bl	800abf4 <SPI_WaitFlagStateUntilTimeout>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d007      	beq.n	800ae8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7e:	f043 0220 	orr.w	r2, r3, #32
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e014      	b.n	800aeb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff ff34 	bl	800ad04 <SPI_WaitFifoStateUntilTimeout>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aea6:	f043 0220 	orr.w	r2, r3, #32
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e000      	b.n	800aeb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <LL_PWR_SetRadioBusyTrigger>:
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800aec4:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aecc:	4904      	ldr	r1, [pc, #16]	; (800aee0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	608b      	str	r3, [r1, #8]
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bc80      	pop	{r7}
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	58000400 	.word	0x58000400

0800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800aee4:	b480      	push	{r7}
 800aee6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800aeea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeee:	4a04      	ldr	r2, [pc, #16]	; (800af00 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800aef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800aef8:	bf00      	nop
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr
 800af00:	58000400 	.word	0x58000400

0800af04 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800af08:	4b05      	ldr	r3, [pc, #20]	; (800af20 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800af0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af0e:	4a04      	ldr	r2, [pc, #16]	; (800af20 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800af10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800af18:	bf00      	nop
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr
 800af20:	58000400 	.word	0x58000400

0800af24 <LL_PWR_ClearFlag_RFBUSY>:
{
 800af24:	b480      	push	{r7}
 800af26:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800af28:	4b03      	ldr	r3, [pc, #12]	; (800af38 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800af2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af2e:	619a      	str	r2, [r3, #24]
}
 800af30:	bf00      	nop
 800af32:	46bd      	mov	sp, r7
 800af34:	bc80      	pop	{r7}
 800af36:	4770      	bx	lr
 800af38:	58000400 	.word	0x58000400

0800af3c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800af40:	4b06      	ldr	r3, [pc, #24]	; (800af5c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d101      	bne.n	800af50 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e000      	b.n	800af52 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	46bd      	mov	sp, r7
 800af56:	bc80      	pop	{r7}
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	58000400 	.word	0x58000400

0800af60 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800af60:	b480      	push	{r7}
 800af62:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800af64:	4b06      	ldr	r3, [pc, #24]	; (800af80 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d101      	bne.n	800af74 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800af70:	2301      	movs	r3, #1
 800af72:	e000      	b.n	800af76 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	46bd      	mov	sp, r7
 800af7a:	bc80      	pop	{r7}
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	58000400 	.word	0x58000400

0800af84 <LL_RCC_RF_DisableReset>:
{
 800af84:	b480      	push	{r7}
 800af86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800af88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800af9c:	bf00      	nop
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr

0800afa4 <LL_RCC_IsRFUnderReset>:
{
 800afa4:	b480      	push	{r7}
 800afa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800afa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afb8:	d101      	bne.n	800afbe <LL_RCC_IsRFUnderReset+0x1a>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <LL_RCC_IsRFUnderReset+0x1c>
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bc80      	pop	{r7}
 800afc6:	4770      	bx	lr

0800afc8 <LL_EXTI_EnableIT_32_63>:
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800afd0:	4b06      	ldr	r3, [pc, #24]	; (800afec <LL_EXTI_EnableIT_32_63+0x24>)
 800afd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800afd6:	4905      	ldr	r1, [pc, #20]	; (800afec <LL_EXTI_EnableIT_32_63+0x24>)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4313      	orrs	r3, r2
 800afdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	58000800 	.word	0x58000800

0800aff0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d103      	bne.n	800b006 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	73fb      	strb	r3, [r7, #15]
    return status;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	e052      	b.n	800b0ac <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	799b      	ldrb	r3, [r3, #6]
 800b00e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <HAL_SUBGHZ_Init+0x2c>
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	2b03      	cmp	r3, #3
 800b01a:	d109      	bne.n	800b030 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7f7 fa7c 	bl	8002520 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800b028:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b02c:	f7ff ffcc 	bl	800afc8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d126      	bne.n	800b084 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2202      	movs	r2, #2
 800b03a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800b03c:	f7ff ffa2 	bl	800af84 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b040:	4b1c      	ldr	r3, [pc, #112]	; (800b0b4 <HAL_SUBGHZ_Init+0xc4>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4613      	mov	r3, r2
 800b046:	00db      	lsls	r3, r3, #3
 800b048:	1a9b      	subs	r3, r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	0cdb      	lsrs	r3, r3, #19
 800b04e:	2264      	movs	r2, #100	; 0x64
 800b050:	fb02 f303 	mul.w	r3, r2, r3
 800b054:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d105      	bne.n	800b068 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	609a      	str	r2, [r3, #8]
        break;
 800b066:	e007      	b.n	800b078 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800b06e:	f7ff ff99 	bl	800afa4 <LL_RCC_IsRFUnderReset>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1ee      	bne.n	800b056 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b078:	f7ff ff34 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800b07c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b080:	f7ff ff1c 	bl	800aebc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800b084:	f7ff ff4e 	bl	800af24 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f000 faac 	bl	800b5f0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	719a      	strb	r2, [r3, #6]

  return status;
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20000000 	.word	0x20000000

0800b0b8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	607a      	str	r2, [r7, #4]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	817b      	strh	r3, [r7, #10]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	799b      	ldrb	r3, [r3, #6]
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d14a      	bne.n	800b16c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	795b      	ldrb	r3, [r3, #5]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d101      	bne.n	800b0e2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800b0de:	2302      	movs	r3, #2
 800b0e0:	e045      	b.n	800b16e <HAL_SUBGHZ_WriteRegisters+0xb6>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 fb4c 	bl	800b78c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b0f4:	f7ff ff06 	bl	800af04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800b0f8:	210d      	movs	r1, #13
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f000 fa98 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b100:	897b      	ldrh	r3, [r7, #10]
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	b29b      	uxth	r3, r3
 800b106:	b2db      	uxtb	r3, r3
 800b108:	4619      	mov	r1, r3
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 fa90 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b110:	897b      	ldrh	r3, [r7, #10]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	4619      	mov	r1, r3
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 fa8a 	bl	800b630 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b11c:	2300      	movs	r3, #0
 800b11e:	82bb      	strh	r3, [r7, #20]
 800b120:	e00a      	b.n	800b138 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b122:	8abb      	ldrh	r3, [r7, #20]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	4413      	add	r3, r2
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	4619      	mov	r1, r3
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 fa7f 	bl	800b630 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b132:	8abb      	ldrh	r3, [r7, #20]
 800b134:	3301      	adds	r3, #1
 800b136:	82bb      	strh	r3, [r7, #20]
 800b138:	8aba      	ldrh	r2, [r7, #20]
 800b13a:	893b      	ldrh	r3, [r7, #8]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d3f0      	bcc.n	800b122 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b140:	f7ff fed0 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 fb45 	bl	800b7d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	75fb      	strb	r3, [r7, #23]
 800b156:	e001      	b.n	800b15c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2201      	movs	r2, #1
 800b160:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	715a      	strb	r2, [r3, #5]

    return status;
 800b168:	7dfb      	ldrb	r3, [r7, #23]
 800b16a:	e000      	b.n	800b16e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800b16c:	2302      	movs	r3, #2
  }
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3718      	adds	r7, #24
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b088      	sub	sp, #32
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	461a      	mov	r2, r3
 800b182:	460b      	mov	r3, r1
 800b184:	817b      	strh	r3, [r7, #10]
 800b186:	4613      	mov	r3, r2
 800b188:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	799b      	ldrb	r3, [r3, #6]
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b01      	cmp	r3, #1
 800b196:	d14a      	bne.n	800b22e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	795b      	ldrb	r3, [r3, #5]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e045      	b.n	800b230 <HAL_SUBGHZ_ReadRegisters+0xba>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f000 faee 	bl	800b78c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b1b0:	f7ff fea8 	bl	800af04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800b1b4:	211d      	movs	r1, #29
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fa3a 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b1bc:	897b      	ldrh	r3, [r7, #10]
 800b1be:	0a1b      	lsrs	r3, r3, #8
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 fa32 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b1cc:	897b      	ldrh	r3, [r7, #10]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 fa2c 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800b1d8:	2100      	movs	r1, #0
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 fa28 	bl	800b630 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	82fb      	strh	r3, [r7, #22]
 800b1e4:	e009      	b.n	800b1fa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b1e6:	69b9      	ldr	r1, [r7, #24]
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 fa77 	bl	800b6dc <SUBGHZSPI_Receive>
      pData++;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b1f4:	8afb      	ldrh	r3, [r7, #22]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	82fb      	strh	r3, [r7, #22]
 800b1fa:	8afa      	ldrh	r2, [r7, #22]
 800b1fc:	893b      	ldrh	r3, [r7, #8]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d3f1      	bcc.n	800b1e6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b202:	f7ff fe6f 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 fae4 	bl	800b7d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	77fb      	strb	r3, [r7, #31]
 800b218:	e001      	b.n	800b21e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	715a      	strb	r2, [r3, #5]

    return status;
 800b22a:	7ffb      	ldrb	r3, [r7, #31]
 800b22c:	e000      	b.n	800b230 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800b22e:	2302      	movs	r3, #2
  }
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	607a      	str	r2, [r7, #4]
 800b242:	461a      	mov	r2, r3
 800b244:	460b      	mov	r3, r1
 800b246:	72fb      	strb	r3, [r7, #11]
 800b248:	4613      	mov	r3, r2
 800b24a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	799b      	ldrb	r3, [r3, #6]
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b01      	cmp	r3, #1
 800b254:	d14a      	bne.n	800b2ec <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	795b      	ldrb	r3, [r3, #5]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d101      	bne.n	800b262 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800b25e:	2302      	movs	r3, #2
 800b260:	e045      	b.n	800b2ee <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2201      	movs	r2, #1
 800b266:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 fa8f 	bl	800b78c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800b26e:	7afb      	ldrb	r3, [r7, #11]
 800b270:	2b84      	cmp	r3, #132	; 0x84
 800b272:	d002      	beq.n	800b27a <HAL_SUBGHZ_ExecSetCmd+0x42>
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	2b94      	cmp	r3, #148	; 0x94
 800b278:	d103      	bne.n	800b282 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2201      	movs	r2, #1
 800b27e:	711a      	strb	r2, [r3, #4]
 800b280:	e002      	b.n	800b288 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b288:	f7ff fe3c 	bl	800af04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	4619      	mov	r1, r3
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f000 f9cd 	bl	800b630 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b296:	2300      	movs	r3, #0
 800b298:	82bb      	strh	r3, [r7, #20]
 800b29a:	e00a      	b.n	800b2b2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b29c:	8abb      	ldrh	r3, [r7, #20]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f000 f9c2 	bl	800b630 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b2ac:	8abb      	ldrh	r3, [r7, #20]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	82bb      	strh	r3, [r7, #20]
 800b2b2:	8aba      	ldrh	r2, [r7, #20]
 800b2b4:	893b      	ldrh	r3, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d3f0      	bcc.n	800b29c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b2ba:	f7ff fe13 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800b2be:	7afb      	ldrb	r3, [r7, #11]
 800b2c0:	2b84      	cmp	r3, #132	; 0x84
 800b2c2:	d002      	beq.n	800b2ca <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 fa85 	bl	800b7d4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	75fb      	strb	r3, [r7, #23]
 800b2d6:	e001      	b.n	800b2dc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	715a      	strb	r2, [r3, #5]

    return status;
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	e000      	b.n	800b2ee <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800b2ec:	2302      	movs	r3, #2
  }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b088      	sub	sp, #32
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	461a      	mov	r2, r3
 800b302:	460b      	mov	r3, r1
 800b304:	72fb      	strb	r3, [r7, #11]
 800b306:	4613      	mov	r3, r2
 800b308:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	799b      	ldrb	r3, [r3, #6]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	d13d      	bne.n	800b394 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	795b      	ldrb	r3, [r3, #5]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d101      	bne.n	800b324 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800b320:	2302      	movs	r3, #2
 800b322:	e038      	b.n	800b396 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2201      	movs	r2, #1
 800b328:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 fa2e 	bl	800b78c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b330:	f7ff fde8 	bl	800af04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	4619      	mov	r1, r3
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 f979 	bl	800b630 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b33e:	2100      	movs	r1, #0
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f000 f975 	bl	800b630 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b346:	2300      	movs	r3, #0
 800b348:	82fb      	strh	r3, [r7, #22]
 800b34a:	e009      	b.n	800b360 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b34c:	69b9      	ldr	r1, [r7, #24]
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f000 f9c4 	bl	800b6dc <SUBGHZSPI_Receive>
      pData++;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	3301      	adds	r3, #1
 800b358:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b35a:	8afb      	ldrh	r3, [r7, #22]
 800b35c:	3301      	adds	r3, #1
 800b35e:	82fb      	strh	r3, [r7, #22]
 800b360:	8afa      	ldrh	r2, [r7, #22]
 800b362:	893b      	ldrh	r3, [r7, #8]
 800b364:	429a      	cmp	r2, r3
 800b366:	d3f1      	bcc.n	800b34c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b368:	f7ff fdbc 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 fa31 	bl	800b7d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	77fb      	strb	r3, [r7, #31]
 800b37e:	e001      	b.n	800b384 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2201      	movs	r2, #1
 800b388:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	715a      	strb	r2, [r3, #5]

    return status;
 800b390:	7ffb      	ldrb	r3, [r7, #31]
 800b392:	e000      	b.n	800b396 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b394:	2302      	movs	r3, #2
  }
}
 800b396:	4618      	mov	r0, r3
 800b398:	3720      	adds	r7, #32
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b086      	sub	sp, #24
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	72fb      	strb	r3, [r7, #11]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	799b      	ldrb	r3, [r3, #6]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d13e      	bne.n	800b43a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	795b      	ldrb	r3, [r3, #5]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d101      	bne.n	800b3c8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e039      	b.n	800b43c <HAL_SUBGHZ_WriteBuffer+0x9e>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 f9dc 	bl	800b78c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b3d4:	f7ff fd96 	bl	800af04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800b3d8:	210e      	movs	r1, #14
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f928 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 f923 	bl	800b630 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	82bb      	strh	r3, [r7, #20]
 800b3ee:	e00a      	b.n	800b406 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b3f0:	8abb      	ldrh	r3, [r7, #20]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 f918 	bl	800b630 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b400:	8abb      	ldrh	r3, [r7, #20]
 800b402:	3301      	adds	r3, #1
 800b404:	82bb      	strh	r3, [r7, #20]
 800b406:	8aba      	ldrh	r2, [r7, #20]
 800b408:	893b      	ldrh	r3, [r7, #8]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d3f0      	bcc.n	800b3f0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b40e:	f7ff fd69 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f000 f9de 	bl	800b7d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	75fb      	strb	r3, [r7, #23]
 800b424:	e001      	b.n	800b42a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2201      	movs	r2, #1
 800b42e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	715a      	strb	r2, [r3, #5]

    return status;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	e000      	b.n	800b43c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b43a:	2302      	movs	r3, #2
  }
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3718      	adds	r7, #24
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	461a      	mov	r2, r3
 800b450:	460b      	mov	r3, r1
 800b452:	72fb      	strb	r3, [r7, #11]
 800b454:	4613      	mov	r3, r2
 800b456:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	799b      	ldrb	r3, [r3, #6]
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b01      	cmp	r3, #1
 800b464:	d141      	bne.n	800b4ea <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	795b      	ldrb	r3, [r3, #5]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d101      	bne.n	800b472 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800b46e:	2302      	movs	r3, #2
 800b470:	e03c      	b.n	800b4ec <HAL_SUBGHZ_ReadBuffer+0xa8>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2201      	movs	r2, #1
 800b476:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f987 	bl	800b78c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b47e:	f7ff fd41 	bl	800af04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800b482:	211e      	movs	r1, #30
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 f8d3 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	4619      	mov	r1, r3
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f000 f8ce 	bl	800b630 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b494:	2100      	movs	r1, #0
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 f8ca 	bl	800b630 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b49c:	2300      	movs	r3, #0
 800b49e:	82fb      	strh	r3, [r7, #22]
 800b4a0:	e009      	b.n	800b4b6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b4a2:	69b9      	ldr	r1, [r7, #24]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 f919 	bl	800b6dc <SUBGHZSPI_Receive>
      pData++;
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b4b0:	8afb      	ldrh	r3, [r7, #22]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	82fb      	strh	r3, [r7, #22]
 800b4b6:	8afa      	ldrh	r2, [r7, #22]
 800b4b8:	893b      	ldrh	r3, [r7, #8]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d3f1      	bcc.n	800b4a2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b4be:	f7ff fd11 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 f986 	bl	800b7d4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	77fb      	strb	r3, [r7, #31]
 800b4d4:	e001      	b.n	800b4da <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	715a      	strb	r2, [r3, #5]

    return status;
 800b4e6:	7ffb      	ldrb	r3, [r7, #31]
 800b4e8:	e000      	b.n	800b4ec <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b4ea:	2302      	movs	r3, #2
  }
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3720      	adds	r7, #32
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800b500:	f107 020c 	add.w	r2, r7, #12
 800b504:	2302      	movs	r3, #2
 800b506:	2112      	movs	r1, #18
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff fef4 	bl	800b2f6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800b50e:	7b3b      	ldrb	r3, [r7, #12]
 800b510:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800b512:	89fb      	ldrh	r3, [r7, #14]
 800b514:	021b      	lsls	r3, r3, #8
 800b516:	b21a      	sxth	r2, r3
 800b518:	7b7b      	ldrb	r3, [r7, #13]
 800b51a:	b21b      	sxth	r3, r3
 800b51c:	4313      	orrs	r3, r2
 800b51e:	b21b      	sxth	r3, r3
 800b520:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800b522:	f107 020c 	add.w	r2, r7, #12
 800b526:	2302      	movs	r3, #2
 800b528:	2102      	movs	r1, #2
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff fe84 	bl	800b238 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800b530:	89fb      	ldrh	r3, [r7, #14]
 800b532:	f003 0301 	and.w	r3, r3, #1
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f013 fa3e 	bl	801e9bc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800b540:	89fb      	ldrh	r3, [r7, #14]
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f013 fa44 	bl	801e9d8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800b550:	89fb      	ldrh	r3, [r7, #14]
 800b552:	f003 0304 	and.w	r3, r3, #4
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f013 fa94 	bl	801ea88 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800b560:	89fb      	ldrh	r3, [r7, #14]
 800b562:	f003 0308 	and.w	r3, r3, #8
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f013 fa9a 	bl	801eaa4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800b570:	89fb      	ldrh	r3, [r7, #14]
 800b572:	f003 0310 	and.w	r3, r3, #16
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f013 faa0 	bl	801eac0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800b580:	89fb      	ldrh	r3, [r7, #14]
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f013 fa6e 	bl	801ea6c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800b590:	89fb      	ldrh	r3, [r7, #14]
 800b592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f013 fa2a 	bl	801e9f4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800b5a0:	89fb      	ldrh	r3, [r7, #14]
 800b5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00d      	beq.n	800b5c6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800b5aa:	89fb      	ldrh	r3, [r7, #14]
 800b5ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f013 fa2a 	bl	801ea10 <HAL_SUBGHZ_CADStatusCallback>
 800b5bc:	e003      	b.n	800b5c6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800b5be:	2100      	movs	r1, #0
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f013 fa25 	bl	801ea10 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800b5c6:	89fb      	ldrh	r3, [r7, #14]
 800b5c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f013 fa3b 	bl	801ea4c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800b5d6:	89fb      	ldrh	r3, [r7, #14]
 800b5d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f013 fa7b 	bl	801eadc <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800b5e6:	bf00      	nop
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b5f8:	4b0c      	ldr	r3, [pc, #48]	; (800b62c <SUBGHZSPI_Init+0x3c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a0b      	ldr	r2, [pc, #44]	; (800b62c <SUBGHZSPI_Init+0x3c>)
 800b5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b602:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800b604:	4a09      	ldr	r2, [pc, #36]	; (800b62c <SUBGHZSPI_Init+0x3c>)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800b60c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800b60e:	4b07      	ldr	r3, [pc, #28]	; (800b62c <SUBGHZSPI_Init+0x3c>)
 800b610:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800b614:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b616:	4b05      	ldr	r3, [pc, #20]	; (800b62c <SUBGHZSPI_Init+0x3c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a04      	ldr	r2, [pc, #16]	; (800b62c <SUBGHZSPI_Init+0x3c>)
 800b61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b620:	6013      	str	r3, [r2, #0]
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	bc80      	pop	{r7}
 800b62a:	4770      	bx	lr
 800b62c:	58010000 	.word	0x58010000

0800b630 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b640:	4b23      	ldr	r3, [pc, #140]	; (800b6d0 <SUBGHZSPI_Transmit+0xa0>)
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	4613      	mov	r3, r2
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	0cdb      	lsrs	r3, r3, #19
 800b64e:	2264      	movs	r2, #100	; 0x64
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d105      	bne.n	800b668 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	609a      	str	r2, [r3, #8]
      break;
 800b666:	e008      	b.n	800b67a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b66e:	4b19      	ldr	r3, [pc, #100]	; (800b6d4 <SUBGHZSPI_Transmit+0xa4>)
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	2b02      	cmp	r3, #2
 800b678:	d1ed      	bne.n	800b656 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800b67a:	4b17      	ldr	r3, [pc, #92]	; (800b6d8 <SUBGHZSPI_Transmit+0xa8>)
 800b67c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b684:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <SUBGHZSPI_Transmit+0xa0>)
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	4613      	mov	r3, r2
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	1a9b      	subs	r3, r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	0cdb      	lsrs	r3, r3, #19
 800b692:	2264      	movs	r2, #100	; 0x64
 800b694:	fb02 f303 	mul.w	r3, r2, r3
 800b698:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d105      	bne.n	800b6ac <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	609a      	str	r2, [r3, #8]
      break;
 800b6aa:	e008      	b.n	800b6be <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b6b2:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <SUBGHZSPI_Transmit+0xa4>)
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	f003 0301 	and.w	r3, r3, #1
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d1ed      	bne.n	800b69a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800b6be:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <SUBGHZSPI_Transmit+0xa4>)
 800b6c0:	68db      	ldr	r3, [r3, #12]

  return status;
 800b6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	371c      	adds	r7, #28
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bc80      	pop	{r7}
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	20000000 	.word	0x20000000
 800b6d4:	58010000 	.word	0x58010000
 800b6d8:	5801000c 	.word	0x5801000c

0800b6dc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b6ea:	4b25      	ldr	r3, [pc, #148]	; (800b780 <SUBGHZSPI_Receive+0xa4>)
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	1a9b      	subs	r3, r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	0cdb      	lsrs	r3, r3, #19
 800b6f8:	2264      	movs	r2, #100	; 0x64
 800b6fa:	fb02 f303 	mul.w	r3, r2, r3
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	609a      	str	r2, [r3, #8]
      break;
 800b710:	e008      	b.n	800b724 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3b01      	subs	r3, #1
 800b716:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b718:	4b1a      	ldr	r3, [pc, #104]	; (800b784 <SUBGHZSPI_Receive+0xa8>)
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f003 0302 	and.w	r3, r3, #2
 800b720:	2b02      	cmp	r3, #2
 800b722:	d1ed      	bne.n	800b700 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800b724:	4b18      	ldr	r3, [pc, #96]	; (800b788 <SUBGHZSPI_Receive+0xac>)
 800b726:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	22ff      	movs	r2, #255	; 0xff
 800b72c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b72e:	4b14      	ldr	r3, [pc, #80]	; (800b780 <SUBGHZSPI_Receive+0xa4>)
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	4613      	mov	r3, r2
 800b734:	00db      	lsls	r3, r3, #3
 800b736:	1a9b      	subs	r3, r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	0cdb      	lsrs	r3, r3, #19
 800b73c:	2264      	movs	r2, #100	; 0x64
 800b73e:	fb02 f303 	mul.w	r3, r2, r3
 800b742:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d105      	bne.n	800b756 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	609a      	str	r2, [r3, #8]
      break;
 800b754:	e008      	b.n	800b768 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3b01      	subs	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b75c:	4b09      	ldr	r3, [pc, #36]	; (800b784 <SUBGHZSPI_Receive+0xa8>)
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b01      	cmp	r3, #1
 800b766:	d1ed      	bne.n	800b744 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800b768:	4b06      	ldr	r3, [pc, #24]	; (800b784 <SUBGHZSPI_Receive+0xa8>)
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	701a      	strb	r2, [r3, #0]

  return status;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
}
 800b774:	4618      	mov	r0, r3
 800b776:	371c      	adds	r7, #28
 800b778:	46bd      	mov	sp, r7
 800b77a:	bc80      	pop	{r7}
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	20000000 	.word	0x20000000
 800b784:	58010000 	.word	0x58010000
 800b788:	5801000c 	.word	0x5801000c

0800b78c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	791b      	ldrb	r3, [r3, #4]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d111      	bne.n	800b7c0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800b79c:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <SUBGHZ_CheckDeviceReady+0x44>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	4413      	add	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	0c1b      	lsrs	r3, r3, #16
 800b7aa:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b7ac:	f7ff fbaa 	bl	800af04 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1f9      	bne.n	800b7b0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b7bc:	f7ff fb92 	bl	800aee4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f807 	bl	800b7d4 <SUBGHZ_WaitOnBusy>
 800b7c6:	4603      	mov	r3, r0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	20000000 	.word	0x20000000

0800b7d4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800b7e0:	4b12      	ldr	r3, [pc, #72]	; (800b82c <SUBGHZ_WaitOnBusy+0x58>)
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	4413      	add	r3, r2
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	0d1b      	lsrs	r3, r3, #20
 800b7ee:	2264      	movs	r2, #100	; 0x64
 800b7f0:	fb02 f303 	mul.w	r3, r2, r3
 800b7f4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800b7f6:	f7ff fbb3 	bl	800af60 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800b7fa:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d105      	bne.n	800b80e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2202      	movs	r2, #2
 800b80a:	609a      	str	r2, [r3, #8]
      break;
 800b80c:	e009      	b.n	800b822 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3b01      	subs	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800b814:	f7ff fb92 	bl	800af3c <LL_PWR_IsActiveFlag_RFBUSYS>
 800b818:	4602      	mov	r2, r0
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	4013      	ands	r3, r2
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d0e9      	beq.n	800b7f6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800b822:	7dfb      	ldrb	r3, [r7, #23]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	20000000 	.word	0x20000000

0800b830 <LL_RCC_GetUSARTClockSource>:
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800b838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b83c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	401a      	ands	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	041b      	lsls	r3, r3, #16
 800b848:	4313      	orrs	r3, r2
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	bc80      	pop	{r7}
 800b852:	4770      	bx	lr

0800b854 <LL_RCC_GetLPUARTClockSource>:
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b85c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b860:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4013      	ands	r3, r2
}
 800b868:	4618      	mov	r0, r3
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bc80      	pop	{r7}
 800b870:	4770      	bx	lr

0800b872 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e042      	b.n	800b90a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d106      	bne.n	800b89c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7f7 fb6a 	bl	8002f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2224      	movs	r2, #36	; 0x24
 800b8a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 0201 	bic.w	r2, r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fd85 	bl	800c3c4 <UART_SetConfig>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d101      	bne.n	800b8c4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e022      	b.n	800b90a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 ffed 	bl	800c8ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689a      	ldr	r2, [r3, #8]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f042 0201 	orr.w	r2, r2, #1
 800b900:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f001 f873 	bl	800c9ee <UART_CheckIdleState>
 800b908:	4603      	mov	r3, r0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b08a      	sub	sp, #40	; 0x28
 800b916:	af02      	add	r7, sp, #8
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	603b      	str	r3, [r7, #0]
 800b91e:	4613      	mov	r3, r2
 800b920:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b928:	2b20      	cmp	r3, #32
 800b92a:	d173      	bne.n	800ba14 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <HAL_UART_Transmit+0x26>
 800b932:	88fb      	ldrh	r3, [r7, #6]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e06c      	b.n	800ba16 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2221      	movs	r2, #33	; 0x21
 800b948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b94c:	f7f6 ff90 	bl	8002870 <HAL_GetTick>
 800b950:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	88fa      	ldrh	r2, [r7, #6]
 800b956:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	88fa      	ldrh	r2, [r7, #6]
 800b95e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b96a:	d108      	bne.n	800b97e <HAL_UART_Transmit+0x6c>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d104      	bne.n	800b97e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b974:	2300      	movs	r3, #0
 800b976:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	61bb      	str	r3, [r7, #24]
 800b97c:	e003      	b.n	800b986 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b982:	2300      	movs	r3, #0
 800b984:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b986:	e02c      	b.n	800b9e2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	2200      	movs	r2, #0
 800b990:	2180      	movs	r1, #128	; 0x80
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f001 f879 	bl	800ca8a <UART_WaitOnFlagUntilTimeout>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e039      	b.n	800ba16 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10b      	bne.n	800b9c0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	881b      	ldrh	r3, [r3, #0]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	61bb      	str	r3, [r7, #24]
 800b9be:	e007      	b.n	800b9d0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	781a      	ldrb	r2, [r3, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1cc      	bne.n	800b988 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2140      	movs	r1, #64	; 0x40
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 f846 	bl	800ca8a <UART_WaitOnFlagUntilTimeout>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e006      	b.n	800ba16 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2220      	movs	r2, #32
 800ba0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	e000      	b.n	800ba16 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800ba14:	2302      	movs	r3, #2
  }
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3720      	adds	r7, #32
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b08a      	sub	sp, #40	; 0x28
 800ba22:	af02      	add	r7, sp, #8
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	603b      	str	r3, [r7, #0]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	f040 80b1 	bne.w	800bb9c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <HAL_UART_Receive+0x28>
 800ba40:	88fb      	ldrh	r3, [r7, #6]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e0a9      	b.n	800bb9e <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2222      	movs	r2, #34	; 0x22
 800ba56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba60:	f7f6 ff06 	bl	8002870 <HAL_GetTick>
 800ba64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	88fa      	ldrh	r2, [r7, #6]
 800ba6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	88fa      	ldrh	r2, [r7, #6]
 800ba72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba7e:	d10e      	bne.n	800ba9e <HAL_UART_Receive+0x80>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d105      	bne.n	800ba94 <HAL_UART_Receive+0x76>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ba8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba92:	e02d      	b.n	800baf0 <HAL_UART_Receive+0xd2>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	22ff      	movs	r2, #255	; 0xff
 800ba98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba9c:	e028      	b.n	800baf0 <HAL_UART_Receive+0xd2>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10d      	bne.n	800bac2 <HAL_UART_Receive+0xa4>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d104      	bne.n	800bab8 <HAL_UART_Receive+0x9a>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	22ff      	movs	r2, #255	; 0xff
 800bab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bab6:	e01b      	b.n	800baf0 <HAL_UART_Receive+0xd2>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	227f      	movs	r2, #127	; 0x7f
 800babc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bac0:	e016      	b.n	800baf0 <HAL_UART_Receive+0xd2>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baca:	d10d      	bne.n	800bae8 <HAL_UART_Receive+0xca>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d104      	bne.n	800bade <HAL_UART_Receive+0xc0>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	227f      	movs	r2, #127	; 0x7f
 800bad8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800badc:	e008      	b.n	800baf0 <HAL_UART_Receive+0xd2>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	223f      	movs	r2, #63	; 0x3f
 800bae2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bae6:	e003      	b.n	800baf0 <HAL_UART_Receive+0xd2>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800baf6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb00:	d108      	bne.n	800bb14 <HAL_UART_Receive+0xf6>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d104      	bne.n	800bb14 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	61bb      	str	r3, [r7, #24]
 800bb12:	e003      	b.n	800bb1c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bb1c:	e032      	b.n	800bb84 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2200      	movs	r2, #0
 800bb26:	2120      	movs	r1, #32
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f000 ffae 	bl	800ca8a <UART_WaitOnFlagUntilTimeout>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e032      	b.n	800bb9e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10c      	bne.n	800bb58 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	8a7b      	ldrh	r3, [r7, #18]
 800bb48:	4013      	ands	r3, r2
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	3302      	adds	r3, #2
 800bb54:	61bb      	str	r3, [r7, #24]
 800bb56:	e00c      	b.n	800bb72 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	8a7b      	ldrh	r3, [r7, #18]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	4013      	ands	r3, r2
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1c6      	bne.n	800bb1e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2220      	movs	r2, #32
 800bb94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e000      	b.n	800bb9e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800bb9c:	2302      	movs	r3, #2
  }
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08a      	sub	sp, #40	; 0x28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbbc:	2b20      	cmp	r3, #32
 800bbbe:	d137      	bne.n	800bc30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <HAL_UART_Receive_IT+0x24>
 800bbc6:	88fb      	ldrh	r3, [r7, #6]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e030      	b.n	800bc32 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a18      	ldr	r2, [pc, #96]	; (800bc3c <HAL_UART_Receive_IT+0x94>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d01f      	beq.n	800bc20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d018      	beq.n	800bc20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	e853 3f00 	ldrex	r3, [r3]
 800bbfa:	613b      	str	r3, [r7, #16]
   return(result);
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc02:	627b      	str	r3, [r7, #36]	; 0x24
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	623b      	str	r3, [r7, #32]
 800bc0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	69f9      	ldr	r1, [r7, #28]
 800bc12:	6a3a      	ldr	r2, [r7, #32]
 800bc14:	e841 2300 	strex	r3, r2, [r1]
 800bc18:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e6      	bne.n	800bbee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bc20:	88fb      	ldrh	r3, [r7, #6]
 800bc22:	461a      	mov	r2, r3
 800bc24:	68b9      	ldr	r1, [r7, #8]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f000 fff8 	bl	800cc1c <UART_Start_Receive_IT>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	e000      	b.n	800bc32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bc30:	2302      	movs	r3, #2
  }
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3728      	adds	r7, #40	; 0x28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	40008000 	.word	0x40008000

0800bc40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08a      	sub	sp, #40	; 0x28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc54:	2b20      	cmp	r3, #32
 800bc56:	d167      	bne.n	800bd28 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <HAL_UART_Transmit_DMA+0x24>
 800bc5e:	88fb      	ldrh	r3, [r7, #6]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e060      	b.n	800bd2a <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	88fa      	ldrh	r2, [r7, #6]
 800bc72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	88fa      	ldrh	r2, [r7, #6]
 800bc7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2221      	movs	r2, #33	; 0x21
 800bc8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d028      	beq.n	800bce8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc9a:	4a26      	ldr	r2, [pc, #152]	; (800bd34 <HAL_UART_Transmit_DMA+0xf4>)
 800bc9c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bca2:	4a25      	ldr	r2, [pc, #148]	; (800bd38 <HAL_UART_Transmit_DMA+0xf8>)
 800bca4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcaa:	4a24      	ldr	r2, [pc, #144]	; (800bd3c <HAL_UART_Transmit_DMA+0xfc>)
 800bcac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3328      	adds	r3, #40	; 0x28
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	f7fb f90b 	bl	8006ee4 <HAL_DMA_Start_IT>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2210      	movs	r2, #16
 800bcd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e020      	b.n	800bd2a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2240      	movs	r2, #64	; 0x40
 800bcee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	e853 3f00 	ldrex	r3, [r3]
 800bcfe:	613b      	str	r3, [r7, #16]
   return(result);
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3308      	adds	r3, #8
 800bd0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd10:	623a      	str	r2, [r7, #32]
 800bd12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd14:	69f9      	ldr	r1, [r7, #28]
 800bd16:	6a3a      	ldr	r2, [r7, #32]
 800bd18:	e841 2300 	strex	r3, r2, [r1]
 800bd1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e5      	bne.n	800bcf0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	e000      	b.n	800bd2a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bd28:	2302      	movs	r3, #2
  }
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3728      	adds	r7, #40	; 0x28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	0800cfa7 	.word	0x0800cfa7
 800bd38:	0800d041 	.word	0x0800d041
 800bd3c:	0800d05d 	.word	0x0800d05d

0800bd40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b0ba      	sub	sp, #232	; 0xe8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bd6a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bd6e:	4013      	ands	r3, r2
 800bd70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bd74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d11b      	bne.n	800bdb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd80:	f003 0320 	and.w	r3, r3, #32
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d015      	beq.n	800bdb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd8c:	f003 0320 	and.w	r3, r3, #32
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d105      	bne.n	800bda0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d009      	beq.n	800bdb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 82e3 	beq.w	800c370 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	4798      	blx	r3
      }
      return;
 800bdb2:	e2dd      	b.n	800c370 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bdb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 8123 	beq.w	800c004 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bdbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bdc2:	4b8d      	ldr	r3, [pc, #564]	; (800bff8 <HAL_UART_IRQHandler+0x2b8>)
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d106      	bne.n	800bdd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bdca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bdce:	4b8b      	ldr	r3, [pc, #556]	; (800bffc <HAL_UART_IRQHandler+0x2bc>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 8116 	beq.w	800c004 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d011      	beq.n	800be08 <HAL_UART_IRQHandler+0xc8>
 800bde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00b      	beq.n	800be08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdfe:	f043 0201 	orr.w	r2, r3, #1
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0c:	f003 0302 	and.w	r3, r3, #2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d011      	beq.n	800be38 <HAL_UART_IRQHandler+0xf8>
 800be14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00b      	beq.n	800be38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2202      	movs	r2, #2
 800be26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be2e:	f043 0204 	orr.w	r2, r3, #4
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be3c:	f003 0304 	and.w	r3, r3, #4
 800be40:	2b00      	cmp	r3, #0
 800be42:	d011      	beq.n	800be68 <HAL_UART_IRQHandler+0x128>
 800be44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be48:	f003 0301 	and.w	r3, r3, #1
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2204      	movs	r2, #4
 800be56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be5e:	f043 0202 	orr.w	r2, r3, #2
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6c:	f003 0308 	and.w	r3, r3, #8
 800be70:	2b00      	cmp	r3, #0
 800be72:	d017      	beq.n	800bea4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d105      	bne.n	800be8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be84:	4b5c      	ldr	r3, [pc, #368]	; (800bff8 <HAL_UART_IRQHandler+0x2b8>)
 800be86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2208      	movs	r2, #8
 800be92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be9a:	f043 0208 	orr.w	r2, r3, #8
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beac:	2b00      	cmp	r3, #0
 800beae:	d012      	beq.n	800bed6 <HAL_UART_IRQHandler+0x196>
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00c      	beq.n	800bed6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800becc:	f043 0220 	orr.w	r2, r3, #32
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 8249 	beq.w	800c374 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	d013      	beq.n	800bf16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800beee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bef2:	f003 0320 	and.w	r3, r3, #32
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d105      	bne.n	800bf06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800befa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800befe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d007      	beq.n	800bf16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2a:	2b40      	cmp	r3, #64	; 0x40
 800bf2c:	d005      	beq.n	800bf3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d054      	beq.n	800bfe4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 ffce 	bl	800cedc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf4a:	2b40      	cmp	r3, #64	; 0x40
 800bf4c:	d146      	bne.n	800bfdc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3308      	adds	r3, #8
 800bf54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf5c:	e853 3f00 	ldrex	r3, [r3]
 800bf60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3308      	adds	r3, #8
 800bf76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf8a:	e841 2300 	strex	r3, r2, [r1]
 800bf8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1d9      	bne.n	800bf4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d017      	beq.n	800bfd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfaa:	4a15      	ldr	r2, [pc, #84]	; (800c000 <HAL_UART_IRQHandler+0x2c0>)
 800bfac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fb f871 	bl	800709c <HAL_DMA_Abort_IT>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d019      	beq.n	800bff4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bfce:	4610      	mov	r0, r2
 800bfd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd2:	e00f      	b.n	800bff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f9e0 	bl	800c39a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfda:	e00b      	b.n	800bff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f9dc 	bl	800c39a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe2:	e007      	b.n	800bff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f9d8 	bl	800c39a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bff2:	e1bf      	b.n	800c374 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff4:	bf00      	nop
    return;
 800bff6:	e1bd      	b.n	800c374 <HAL_UART_IRQHandler+0x634>
 800bff8:	10000001 	.word	0x10000001
 800bffc:	04000120 	.word	0x04000120
 800c000:	0800d0dd 	.word	0x0800d0dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c008:	2b01      	cmp	r3, #1
 800c00a:	f040 8153 	bne.w	800c2b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c012:	f003 0310 	and.w	r3, r3, #16
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 814c 	beq.w	800c2b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c020:	f003 0310 	and.w	r3, r3, #16
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 8145 	beq.w	800c2b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2210      	movs	r2, #16
 800c030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03c:	2b40      	cmp	r3, #64	; 0x40
 800c03e:	f040 80bb 	bne.w	800c1b8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 818f 	beq.w	800c378 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c060:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c064:	429a      	cmp	r2, r3
 800c066:	f080 8187 	bcs.w	800c378 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c070:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	f040 8087 	bne.w	800c196 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c09c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c0b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c0ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1da      	bne.n	800c088 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c0e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0e4:	f023 0301 	bic.w	r3, r3, #1
 800c0e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c0fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e1      	bne.n	800c0d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3308      	adds	r3, #8
 800c114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c118:	e853 3f00 	ldrex	r3, [r3]
 800c11c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3308      	adds	r3, #8
 800c12e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c132:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c13a:	e841 2300 	strex	r3, r2, [r1]
 800c13e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1e3      	bne.n	800c10e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2220      	movs	r2, #32
 800c14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c15c:	e853 3f00 	ldrex	r3, [r3]
 800c160:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c164:	f023 0310 	bic.w	r3, r3, #16
 800c168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c176:	65bb      	str	r3, [r7, #88]	; 0x58
 800c178:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c17c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c17e:	e841 2300 	strex	r3, r2, [r1]
 800c182:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1e4      	bne.n	800c154 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c190:	4618      	mov	r0, r3
 800c192:	f7fa ff25 	bl	8006fe0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2202      	movs	r2, #2
 800c19a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f8fb 	bl	800c3ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1b6:	e0df      	b.n	800c378 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80d1 	beq.w	800c37c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800c1da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 80cc 	beq.w	800c37c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	e853 3f00 	ldrex	r3, [r3]
 800c1f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	461a      	mov	r2, r3
 800c202:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c206:	647b      	str	r3, [r7, #68]	; 0x44
 800c208:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c20c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c20e:	e841 2300 	strex	r3, r2, [r1]
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1e4      	bne.n	800c1e4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3308      	adds	r3, #8
 800c220:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	e853 3f00 	ldrex	r3, [r3]
 800c228:	623b      	str	r3, [r7, #32]
   return(result);
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c230:	f023 0301 	bic.w	r3, r3, #1
 800c234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3308      	adds	r3, #8
 800c23e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c242:	633a      	str	r2, [r7, #48]	; 0x30
 800c244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e1      	bne.n	800c21a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2220      	movs	r2, #32
 800c25a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	60fb      	str	r3, [r7, #12]
   return(result);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 0310 	bic.w	r3, r3, #16
 800c27e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	69b9      	ldr	r1, [r7, #24]
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	617b      	str	r3, [r7, #20]
   return(result);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e4      	bne.n	800c26a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f87d 	bl	800c3ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2b2:	e063      	b.n	800c37c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00e      	beq.n	800c2de <HAL_UART_IRQHandler+0x59e>
 800c2c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d008      	beq.n	800c2de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c2d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 fc5e 	bl	800db98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2dc:	e051      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d014      	beq.n	800c314 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c2ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d105      	bne.n	800c302 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c306:	2b00      	cmp	r3, #0
 800c308:	d03a      	beq.n	800c380 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	4798      	blx	r3
    }
    return;
 800c312:	e035      	b.n	800c380 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d009      	beq.n	800c334 <HAL_UART_IRQHandler+0x5f4>
 800c320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d003      	beq.n	800c334 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 feeb 	bl	800d108 <UART_EndTransmit_IT>
    return;
 800c332:	e026      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d009      	beq.n	800c354 <HAL_UART_IRQHandler+0x614>
 800c340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f001 fc35 	bl	800dbbc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c352:	e016      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d010      	beq.n	800c382 <HAL_UART_IRQHandler+0x642>
 800c360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c364:	2b00      	cmp	r3, #0
 800c366:	da0c      	bge.n	800c382 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f001 fc1e 	bl	800dbaa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c36e:	e008      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
      return;
 800c370:	bf00      	nop
 800c372:	e006      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
    return;
 800c374:	bf00      	nop
 800c376:	e004      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
      return;
 800c378:	bf00      	nop
 800c37a:	e002      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
      return;
 800c37c:	bf00      	nop
 800c37e:	e000      	b.n	800c382 <HAL_UART_IRQHandler+0x642>
    return;
 800c380:	bf00      	nop
  }
}
 800c382:	37e8      	adds	r7, #232	; 0xe8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	bc80      	pop	{r7}
 800c398:	4770      	bx	lr

0800c39a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b083      	sub	sp, #12
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3a2:	bf00      	nop
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bc80      	pop	{r7}
 800c3aa:	4770      	bx	lr

0800c3ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3b8:	bf00      	nop
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bc80      	pop	{r7}
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3c8:	b08c      	sub	sp, #48	; 0x30
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	689a      	ldr	r2, [r3, #8]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	69db      	ldr	r3, [r3, #28]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	4b94      	ldr	r3, [pc, #592]	; (800c644 <UART_SetConfig+0x280>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	68da      	ldr	r2, [r3, #12]
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a89      	ldr	r2, [pc, #548]	; (800c648 <UART_SetConfig+0x284>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d004      	beq.n	800c430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42c:	4313      	orrs	r3, r2
 800c42e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c43a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c444:	430b      	orrs	r3, r1
 800c446:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44e:	f023 010f 	bic.w	r1, r3, #15
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a7a      	ldr	r2, [pc, #488]	; (800c64c <UART_SetConfig+0x288>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d127      	bne.n	800c4b8 <UART_SetConfig+0xf4>
 800c468:	2003      	movs	r0, #3
 800c46a:	f7ff f9e1 	bl	800b830 <LL_RCC_GetUSARTClockSource>
 800c46e:	4603      	mov	r3, r0
 800c470:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800c474:	2b03      	cmp	r3, #3
 800c476:	d81b      	bhi.n	800c4b0 <UART_SetConfig+0xec>
 800c478:	a201      	add	r2, pc, #4	; (adr r2, 800c480 <UART_SetConfig+0xbc>)
 800c47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47e:	bf00      	nop
 800c480:	0800c491 	.word	0x0800c491
 800c484:	0800c4a1 	.word	0x0800c4a1
 800c488:	0800c499 	.word	0x0800c499
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	2301      	movs	r3, #1
 800c492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c496:	e080      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c498:	2302      	movs	r3, #2
 800c49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c49e:	e07c      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c4a0:	2304      	movs	r3, #4
 800c4a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4a6:	e078      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c4a8:	2308      	movs	r3, #8
 800c4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4ae:	e074      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c4b0:	2310      	movs	r3, #16
 800c4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4b6:	e070      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a64      	ldr	r2, [pc, #400]	; (800c650 <UART_SetConfig+0x28c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d138      	bne.n	800c534 <UART_SetConfig+0x170>
 800c4c2:	200c      	movs	r0, #12
 800c4c4:	f7ff f9b4 	bl	800b830 <LL_RCC_GetUSARTClockSource>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800c4ce:	2b0c      	cmp	r3, #12
 800c4d0:	d82c      	bhi.n	800c52c <UART_SetConfig+0x168>
 800c4d2:	a201      	add	r2, pc, #4	; (adr r2, 800c4d8 <UART_SetConfig+0x114>)
 800c4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d8:	0800c50d 	.word	0x0800c50d
 800c4dc:	0800c52d 	.word	0x0800c52d
 800c4e0:	0800c52d 	.word	0x0800c52d
 800c4e4:	0800c52d 	.word	0x0800c52d
 800c4e8:	0800c51d 	.word	0x0800c51d
 800c4ec:	0800c52d 	.word	0x0800c52d
 800c4f0:	0800c52d 	.word	0x0800c52d
 800c4f4:	0800c52d 	.word	0x0800c52d
 800c4f8:	0800c515 	.word	0x0800c515
 800c4fc:	0800c52d 	.word	0x0800c52d
 800c500:	0800c52d 	.word	0x0800c52d
 800c504:	0800c52d 	.word	0x0800c52d
 800c508:	0800c525 	.word	0x0800c525
 800c50c:	2300      	movs	r3, #0
 800c50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c512:	e042      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c514:	2302      	movs	r3, #2
 800c516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c51a:	e03e      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c51c:	2304      	movs	r3, #4
 800c51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c522:	e03a      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c524:	2308      	movs	r3, #8
 800c526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c52a:	e036      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c52c:	2310      	movs	r3, #16
 800c52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c532:	e032      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a43      	ldr	r2, [pc, #268]	; (800c648 <UART_SetConfig+0x284>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d12a      	bne.n	800c594 <UART_SetConfig+0x1d0>
 800c53e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c542:	f7ff f987 	bl	800b854 <LL_RCC_GetLPUARTClockSource>
 800c546:	4603      	mov	r3, r0
 800c548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c54c:	d01a      	beq.n	800c584 <UART_SetConfig+0x1c0>
 800c54e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c552:	d81b      	bhi.n	800c58c <UART_SetConfig+0x1c8>
 800c554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c558:	d00c      	beq.n	800c574 <UART_SetConfig+0x1b0>
 800c55a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c55e:	d815      	bhi.n	800c58c <UART_SetConfig+0x1c8>
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <UART_SetConfig+0x1a8>
 800c564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c568:	d008      	beq.n	800c57c <UART_SetConfig+0x1b8>
 800c56a:	e00f      	b.n	800c58c <UART_SetConfig+0x1c8>
 800c56c:	2300      	movs	r3, #0
 800c56e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c572:	e012      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c574:	2302      	movs	r3, #2
 800c576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c57a:	e00e      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c57c:	2304      	movs	r3, #4
 800c57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c582:	e00a      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c584:	2308      	movs	r3, #8
 800c586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c58a:	e006      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c58c:	2310      	movs	r3, #16
 800c58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c592:	e002      	b.n	800c59a <UART_SetConfig+0x1d6>
 800c594:	2310      	movs	r3, #16
 800c596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a2a      	ldr	r2, [pc, #168]	; (800c648 <UART_SetConfig+0x284>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	f040 80a4 	bne.w	800c6ee <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5aa:	2b08      	cmp	r3, #8
 800c5ac:	d823      	bhi.n	800c5f6 <UART_SetConfig+0x232>
 800c5ae:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <UART_SetConfig+0x1f0>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5d9 	.word	0x0800c5d9
 800c5b8:	0800c5f7 	.word	0x0800c5f7
 800c5bc:	0800c5e1 	.word	0x0800c5e1
 800c5c0:	0800c5f7 	.word	0x0800c5f7
 800c5c4:	0800c5e7 	.word	0x0800c5e7
 800c5c8:	0800c5f7 	.word	0x0800c5f7
 800c5cc:	0800c5f7 	.word	0x0800c5f7
 800c5d0:	0800c5f7 	.word	0x0800c5f7
 800c5d4:	0800c5ef 	.word	0x0800c5ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5d8:	f7fd fa38 	bl	8009a4c <HAL_RCC_GetPCLK1Freq>
 800c5dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5de:	e010      	b.n	800c602 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5e0:	4b1c      	ldr	r3, [pc, #112]	; (800c654 <UART_SetConfig+0x290>)
 800c5e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5e4:	e00d      	b.n	800c602 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5e6:	f7fd f97d 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 800c5ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5ec:	e009      	b.n	800c602 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5f4:	e005      	b.n	800c602 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 8137 	beq.w	800c878 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60e:	4a12      	ldr	r2, [pc, #72]	; (800c658 <UART_SetConfig+0x294>)
 800c610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c614:	461a      	mov	r2, r3
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	fbb3 f3f2 	udiv	r3, r3, r2
 800c61c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	4613      	mov	r3, r2
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	4413      	add	r3, r2
 800c628:	69ba      	ldr	r2, [r7, #24]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d305      	bcc.n	800c63a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c634:	69ba      	ldr	r2, [r7, #24]
 800c636:	429a      	cmp	r2, r3
 800c638:	d910      	bls.n	800c65c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c640:	e11a      	b.n	800c878 <UART_SetConfig+0x4b4>
 800c642:	bf00      	nop
 800c644:	cfff69f3 	.word	0xcfff69f3
 800c648:	40008000 	.word	0x40008000
 800c64c:	40013800 	.word	0x40013800
 800c650:	40004400 	.word	0x40004400
 800c654:	00f42400 	.word	0x00f42400
 800c658:	080219b4 	.word	0x080219b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	2200      	movs	r2, #0
 800c660:	60bb      	str	r3, [r7, #8]
 800c662:	60fa      	str	r2, [r7, #12]
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c668:	4a8e      	ldr	r2, [pc, #568]	; (800c8a4 <UART_SetConfig+0x4e0>)
 800c66a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	2200      	movs	r2, #0
 800c672:	603b      	str	r3, [r7, #0]
 800c674:	607a      	str	r2, [r7, #4]
 800c676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c67a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c67e:	f7f4 fd49 	bl	8001114 <__aeabi_uldivmod>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4610      	mov	r0, r2
 800c688:	4619      	mov	r1, r3
 800c68a:	f04f 0200 	mov.w	r2, #0
 800c68e:	f04f 0300 	mov.w	r3, #0
 800c692:	020b      	lsls	r3, r1, #8
 800c694:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c698:	0202      	lsls	r2, r0, #8
 800c69a:	6979      	ldr	r1, [r7, #20]
 800c69c:	6849      	ldr	r1, [r1, #4]
 800c69e:	0849      	lsrs	r1, r1, #1
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	eb12 0804 	adds.w	r8, r2, r4
 800c6aa:	eb43 0905 	adc.w	r9, r3, r5
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	469a      	mov	sl, r3
 800c6b6:	4693      	mov	fp, r2
 800c6b8:	4652      	mov	r2, sl
 800c6ba:	465b      	mov	r3, fp
 800c6bc:	4640      	mov	r0, r8
 800c6be:	4649      	mov	r1, r9
 800c6c0:	f7f4 fd28 	bl	8001114 <__aeabi_uldivmod>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6d2:	d308      	bcc.n	800c6e6 <UART_SetConfig+0x322>
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6da:	d204      	bcs.n	800c6e6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6a3a      	ldr	r2, [r7, #32]
 800c6e2:	60da      	str	r2, [r3, #12]
 800c6e4:	e0c8      	b.n	800c878 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c6ec:	e0c4      	b.n	800c878 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6f6:	d167      	bne.n	800c7c8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800c6f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6fc:	2b08      	cmp	r3, #8
 800c6fe:	d828      	bhi.n	800c752 <UART_SetConfig+0x38e>
 800c700:	a201      	add	r2, pc, #4	; (adr r2, 800c708 <UART_SetConfig+0x344>)
 800c702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c706:	bf00      	nop
 800c708:	0800c72d 	.word	0x0800c72d
 800c70c:	0800c735 	.word	0x0800c735
 800c710:	0800c73d 	.word	0x0800c73d
 800c714:	0800c753 	.word	0x0800c753
 800c718:	0800c743 	.word	0x0800c743
 800c71c:	0800c753 	.word	0x0800c753
 800c720:	0800c753 	.word	0x0800c753
 800c724:	0800c753 	.word	0x0800c753
 800c728:	0800c74b 	.word	0x0800c74b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c72c:	f7fd f98e 	bl	8009a4c <HAL_RCC_GetPCLK1Freq>
 800c730:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c732:	e014      	b.n	800c75e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c734:	f7fd f99c 	bl	8009a70 <HAL_RCC_GetPCLK2Freq>
 800c738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c73a:	e010      	b.n	800c75e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c73c:	4b5a      	ldr	r3, [pc, #360]	; (800c8a8 <UART_SetConfig+0x4e4>)
 800c73e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c740:	e00d      	b.n	800c75e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c742:	f7fd f8cf 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 800c746:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c748:	e009      	b.n	800c75e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c74a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c750:	e005      	b.n	800c75e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800c752:	2300      	movs	r3, #0
 800c754:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c75c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 8089 	beq.w	800c878 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76a:	4a4e      	ldr	r2, [pc, #312]	; (800c8a4 <UART_SetConfig+0x4e0>)
 800c76c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c770:	461a      	mov	r2, r3
 800c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c774:	fbb3 f3f2 	udiv	r3, r3, r2
 800c778:	005a      	lsls	r2, r3, #1
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	085b      	lsrs	r3, r3, #1
 800c780:	441a      	add	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	fbb2 f3f3 	udiv	r3, r2, r3
 800c78a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	2b0f      	cmp	r3, #15
 800c790:	d916      	bls.n	800c7c0 <UART_SetConfig+0x3fc>
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c798:	d212      	bcs.n	800c7c0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	f023 030f 	bic.w	r3, r3, #15
 800c7a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7a4:	6a3b      	ldr	r3, [r7, #32]
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	8bfb      	ldrh	r3, [r7, #30]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	8bfa      	ldrh	r2, [r7, #30]
 800c7bc:	60da      	str	r2, [r3, #12]
 800c7be:	e05b      	b.n	800c878 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c7c6:	e057      	b.n	800c878 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7cc:	2b08      	cmp	r3, #8
 800c7ce:	d828      	bhi.n	800c822 <UART_SetConfig+0x45e>
 800c7d0:	a201      	add	r2, pc, #4	; (adr r2, 800c7d8 <UART_SetConfig+0x414>)
 800c7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d6:	bf00      	nop
 800c7d8:	0800c7fd 	.word	0x0800c7fd
 800c7dc:	0800c805 	.word	0x0800c805
 800c7e0:	0800c80d 	.word	0x0800c80d
 800c7e4:	0800c823 	.word	0x0800c823
 800c7e8:	0800c813 	.word	0x0800c813
 800c7ec:	0800c823 	.word	0x0800c823
 800c7f0:	0800c823 	.word	0x0800c823
 800c7f4:	0800c823 	.word	0x0800c823
 800c7f8:	0800c81b 	.word	0x0800c81b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7fc:	f7fd f926 	bl	8009a4c <HAL_RCC_GetPCLK1Freq>
 800c800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c802:	e014      	b.n	800c82e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c804:	f7fd f934 	bl	8009a70 <HAL_RCC_GetPCLK2Freq>
 800c808:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c80a:	e010      	b.n	800c82e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c80c:	4b26      	ldr	r3, [pc, #152]	; (800c8a8 <UART_SetConfig+0x4e4>)
 800c80e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c810:	e00d      	b.n	800c82e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c812:	f7fd f867 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 800c816:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c818:	e009      	b.n	800c82e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c81a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c81e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c820:	e005      	b.n	800c82e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800c822:	2300      	movs	r3, #0
 800c824:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c82c:	bf00      	nop
    }

    if (pclk != 0U)
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	2b00      	cmp	r3, #0
 800c832:	d021      	beq.n	800c878 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	4a1a      	ldr	r2, [pc, #104]	; (800c8a4 <UART_SetConfig+0x4e0>)
 800c83a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c83e:	461a      	mov	r2, r3
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	fbb3 f2f2 	udiv	r2, r3, r2
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	085b      	lsrs	r3, r3, #1
 800c84c:	441a      	add	r2, r3
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	fbb2 f3f3 	udiv	r3, r2, r3
 800c856:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	2b0f      	cmp	r3, #15
 800c85c:	d909      	bls.n	800c872 <UART_SetConfig+0x4ae>
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c864:	d205      	bcs.n	800c872 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	b29a      	uxth	r2, r3
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60da      	str	r2, [r3, #12]
 800c870:	e002      	b.n	800c878 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	2201      	movs	r2, #1
 800c884:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2200      	movs	r2, #0
 800c88c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	2200      	movs	r2, #0
 800c892:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c894:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3730      	adds	r7, #48	; 0x30
 800c89c:	46bd      	mov	sp, r7
 800c89e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8a2:	bf00      	nop
 800c8a4:	080219b4 	.word	0x080219b4
 800c8a8:	00f42400 	.word	0x00f42400

0800c8ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00a      	beq.n	800c8d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8da:	f003 0302 	and.w	r3, r3, #2
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fc:	f003 0304 	and.w	r3, r3, #4
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00a      	beq.n	800c91a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	430a      	orrs	r2, r1
 800c918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91e:	f003 0308 	and.w	r3, r3, #8
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00a      	beq.n	800c93c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	430a      	orrs	r2, r1
 800c93a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c940:	f003 0310 	and.w	r3, r3, #16
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00a      	beq.n	800c95e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	430a      	orrs	r2, r1
 800c95c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c962:	f003 0320 	and.w	r3, r3, #32
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00a      	beq.n	800c980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	430a      	orrs	r2, r1
 800c97e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01a      	beq.n	800c9c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	430a      	orrs	r2, r1
 800c9a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9aa:	d10a      	bne.n	800c9c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00a      	beq.n	800c9e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	605a      	str	r2, [r3, #4]
  }
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bc80      	pop	{r7}
 800c9ec:	4770      	bx	lr

0800c9ee <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b086      	sub	sp, #24
 800c9f2:	af02      	add	r7, sp, #8
 800c9f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9fe:	f7f5 ff37 	bl	8002870 <HAL_GetTick>
 800ca02:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 0308 	and.w	r3, r3, #8
 800ca0e:	2b08      	cmp	r3, #8
 800ca10:	d10e      	bne.n	800ca30 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f832 	bl	800ca8a <UART_WaitOnFlagUntilTimeout>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e028      	b.n	800ca82 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0304 	and.w	r3, r3, #4
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	d10e      	bne.n	800ca5c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f81c 	bl	800ca8a <UART_WaitOnFlagUntilTimeout>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e012      	b.n	800ca82 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2220      	movs	r2, #32
 800ca60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2220      	movs	r2, #32
 800ca68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b09c      	sub	sp, #112	; 0x70
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	603b      	str	r3, [r7, #0]
 800ca96:	4613      	mov	r3, r2
 800ca98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca9a:	e0a9      	b.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caa2:	f000 80a5 	beq.w	800cbf0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800caa6:	f7f5 fee3 	bl	8002870 <HAL_GetTick>
 800caaa:	4602      	mov	r2, r0
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d302      	bcc.n	800cabc <UART_WaitOnFlagUntilTimeout+0x32>
 800cab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d140      	bne.n	800cb3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac4:	e853 3f00 	ldrex	r3, [r3]
 800cac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800caca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cacc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cad0:	667b      	str	r3, [r7, #100]	; 0x64
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	461a      	mov	r2, r3
 800cad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cada:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cadc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cae2:	e841 2300 	strex	r3, r2, [r1]
 800cae6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1e6      	bne.n	800cabc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3308      	adds	r3, #8
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caf8:	e853 3f00 	ldrex	r3, [r3]
 800cafc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb00:	f023 0301 	bic.w	r3, r3, #1
 800cb04:	663b      	str	r3, [r7, #96]	; 0x60
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	3308      	adds	r3, #8
 800cb0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb0e:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb16:	e841 2300 	strex	r3, r2, [r1]
 800cb1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1e5      	bne.n	800caee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2220      	movs	r2, #32
 800cb26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2220      	movs	r2, #32
 800cb2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e069      	b.n	800cc12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d051      	beq.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb5a:	d149      	bne.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6e:	e853 3f00 	ldrex	r3, [r3]
 800cb72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	461a      	mov	r2, r3
 800cb82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb84:	637b      	str	r3, [r7, #52]	; 0x34
 800cb86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e6      	bne.n	800cb66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	e853 3f00 	ldrex	r3, [r3]
 800cba6:	613b      	str	r3, [r7, #16]
   return(result);
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f023 0301 	bic.w	r3, r3, #1
 800cbae:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cbb8:	623a      	str	r2, [r7, #32]
 800cbba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbc:	69f9      	ldr	r1, [r7, #28]
 800cbbe:	6a3a      	ldr	r2, [r7, #32]
 800cbc0:	e841 2300 	strex	r3, r2, [r1]
 800cbc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e5      	bne.n	800cb98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2220      	movs	r2, #32
 800cbd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2220      	movs	r2, #32
 800cbe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cbec:	2303      	movs	r3, #3
 800cbee:	e010      	b.n	800cc12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	69da      	ldr	r2, [r3, #28]
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	bf0c      	ite	eq
 800cc00:	2301      	moveq	r3, #1
 800cc02:	2300      	movne	r3, #0
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	461a      	mov	r2, r3
 800cc08:	79fb      	ldrb	r3, [r7, #7]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	f43f af46 	beq.w	800ca9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3770      	adds	r7, #112	; 0x70
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b0a3      	sub	sp, #140	; 0x8c
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	88fa      	ldrh	r2, [r7, #6]
 800cc34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	88fa      	ldrh	r2, [r7, #6]
 800cc3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc4e:	d10e      	bne.n	800cc6e <UART_Start_Receive_IT+0x52>
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d105      	bne.n	800cc64 <UART_Start_Receive_IT+0x48>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cc5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc62:	e02d      	b.n	800ccc0 <UART_Start_Receive_IT+0xa4>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	22ff      	movs	r2, #255	; 0xff
 800cc68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc6c:	e028      	b.n	800ccc0 <UART_Start_Receive_IT+0xa4>
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10d      	bne.n	800cc92 <UART_Start_Receive_IT+0x76>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d104      	bne.n	800cc88 <UART_Start_Receive_IT+0x6c>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	22ff      	movs	r2, #255	; 0xff
 800cc82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc86:	e01b      	b.n	800ccc0 <UART_Start_Receive_IT+0xa4>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	227f      	movs	r2, #127	; 0x7f
 800cc8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc90:	e016      	b.n	800ccc0 <UART_Start_Receive_IT+0xa4>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc9a:	d10d      	bne.n	800ccb8 <UART_Start_Receive_IT+0x9c>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d104      	bne.n	800ccae <UART_Start_Receive_IT+0x92>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	227f      	movs	r2, #127	; 0x7f
 800cca8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccac:	e008      	b.n	800ccc0 <UART_Start_Receive_IT+0xa4>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	223f      	movs	r2, #63	; 0x3f
 800ccb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccb6:	e003      	b.n	800ccc0 <UART_Start_Receive_IT+0xa4>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2222      	movs	r2, #34	; 0x22
 800cccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccda:	e853 3f00 	ldrex	r3, [r3]
 800ccde:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cce2:	f043 0301 	orr.w	r3, r3, #1
 800cce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3308      	adds	r3, #8
 800ccf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ccf4:	673a      	str	r2, [r7, #112]	; 0x70
 800ccf6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ccfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cd02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e3      	bne.n	800ccd0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd10:	d14f      	bne.n	800cdb2 <UART_Start_Receive_IT+0x196>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd18:	88fa      	ldrh	r2, [r7, #6]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d349      	bcc.n	800cdb2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd26:	d107      	bne.n	800cd38 <UART_Start_Receive_IT+0x11c>
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d103      	bne.n	800cd38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4a46      	ldr	r2, [pc, #280]	; (800ce4c <UART_Start_Receive_IT+0x230>)
 800cd34:	675a      	str	r2, [r3, #116]	; 0x74
 800cd36:	e002      	b.n	800cd3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	4a45      	ldr	r2, [pc, #276]	; (800ce50 <UART_Start_Receive_IT+0x234>)
 800cd3c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d01a      	beq.n	800cd7c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4e:	e853 3f00 	ldrex	r3, [r3]
 800cd52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd6a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd70:	e841 2300 	strex	r3, r2, [r1]
 800cd74:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cd76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e4      	bne.n	800cd46 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3308      	adds	r3, #8
 800cd82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd86:	e853 3f00 	ldrex	r3, [r3]
 800cd8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd92:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3308      	adds	r3, #8
 800cd9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd9c:	64ba      	str	r2, [r7, #72]	; 0x48
 800cd9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cda2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cda4:	e841 2300 	strex	r3, r2, [r1]
 800cda8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cdaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1e5      	bne.n	800cd7c <UART_Start_Receive_IT+0x160>
 800cdb0:	e046      	b.n	800ce40 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdba:	d107      	bne.n	800cdcc <UART_Start_Receive_IT+0x1b0>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d103      	bne.n	800cdcc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4a23      	ldr	r2, [pc, #140]	; (800ce54 <UART_Start_Receive_IT+0x238>)
 800cdc8:	675a      	str	r2, [r3, #116]	; 0x74
 800cdca:	e002      	b.n	800cdd2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4a22      	ldr	r2, [pc, #136]	; (800ce58 <UART_Start_Receive_IT+0x23c>)
 800cdd0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d019      	beq.n	800ce0e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	e853 3f00 	ldrex	r3, [r3]
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cdee:	677b      	str	r3, [r7, #116]	; 0x74
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdf8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce00:	e841 2300 	strex	r3, r2, [r1]
 800ce04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1e6      	bne.n	800cdda <UART_Start_Receive_IT+0x1be>
 800ce0c:	e018      	b.n	800ce40 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	e853 3f00 	ldrex	r3, [r3]
 800ce1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	f043 0320 	orr.w	r3, r3, #32
 800ce22:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce2c:	623b      	str	r3, [r7, #32]
 800ce2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce30:	69f9      	ldr	r1, [r7, #28]
 800ce32:	6a3a      	ldr	r2, [r7, #32]
 800ce34:	e841 2300 	strex	r3, r2, [r1]
 800ce38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1e6      	bne.n	800ce0e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	378c      	adds	r7, #140	; 0x8c
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bc80      	pop	{r7}
 800ce4a:	4770      	bx	lr
 800ce4c:	0800d831 	.word	0x0800d831
 800ce50:	0800d4d1 	.word	0x0800d4d1
 800ce54:	0800d319 	.word	0x0800d319
 800ce58:	0800d161 	.word	0x0800d161

0800ce5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b08f      	sub	sp, #60	; 0x3c
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	e853 3f00 	ldrex	r3, [r3]
 800ce70:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ce78:	637b      	str	r3, [r7, #52]	; 0x34
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce8a:	e841 2300 	strex	r3, r2, [r1]
 800ce8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1e6      	bne.n	800ce64 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3308      	adds	r3, #8
 800ce9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	e853 3f00 	ldrex	r3, [r3]
 800cea4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ceac:	633b      	str	r3, [r7, #48]	; 0x30
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3308      	adds	r3, #8
 800ceb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb6:	61ba      	str	r2, [r7, #24]
 800ceb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceba:	6979      	ldr	r1, [r7, #20]
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	e841 2300 	strex	r3, r2, [r1]
 800cec2:	613b      	str	r3, [r7, #16]
   return(result);
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1e5      	bne.n	800ce96 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2220      	movs	r2, #32
 800cece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ced2:	bf00      	nop
 800ced4:	373c      	adds	r7, #60	; 0x3c
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bc80      	pop	{r7}
 800ceda:	4770      	bx	lr

0800cedc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cedc:	b480      	push	{r7}
 800cede:	b095      	sub	sp, #84	; 0x54
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceec:	e853 3f00 	ldrex	r3, [r3]
 800cef0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf02:	643b      	str	r3, [r7, #64]	; 0x40
 800cf04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1e6      	bne.n	800cee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	3308      	adds	r3, #8
 800cf1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	e853 3f00 	ldrex	r3, [r3]
 800cf24:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf2c:	f023 0301 	bic.w	r3, r3, #1
 800cf30:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	3308      	adds	r3, #8
 800cf38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf42:	e841 2300 	strex	r3, r2, [r1]
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1e3      	bne.n	800cf16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d118      	bne.n	800cf88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	e853 3f00 	ldrex	r3, [r3]
 800cf62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	f023 0310 	bic.w	r3, r3, #16
 800cf6a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	461a      	mov	r2, r3
 800cf72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf74:	61bb      	str	r3, [r7, #24]
 800cf76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf78:	6979      	ldr	r1, [r7, #20]
 800cf7a:	69ba      	ldr	r2, [r7, #24]
 800cf7c:	e841 2300 	strex	r3, r2, [r1]
 800cf80:	613b      	str	r3, [r7, #16]
   return(result);
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1e6      	bne.n	800cf56 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2220      	movs	r2, #32
 800cf8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cf9c:	bf00      	nop
 800cf9e:	3754      	adds	r7, #84	; 0x54
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bc80      	pop	{r7}
 800cfa4:	4770      	bx	lr

0800cfa6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b090      	sub	sp, #64	; 0x40
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 0320 	and.w	r3, r3, #32
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d137      	bne.n	800d032 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800cfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3308      	adds	r3, #8
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd4:	e853 3f00 	ldrex	r3, [r3]
 800cfd8:	623b      	str	r3, [r7, #32]
   return(result);
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3308      	adds	r3, #8
 800cfe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfea:	633a      	str	r2, [r7, #48]	; 0x30
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cff2:	e841 2300 	strex	r3, r2, [r1]
 800cff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e5      	bne.n	800cfca <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	e853 3f00 	ldrex	r3, [r3]
 800d00a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d012:	637b      	str	r3, [r7, #52]	; 0x34
 800d014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	461a      	mov	r2, r3
 800d01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01c:	61fb      	str	r3, [r7, #28]
 800d01e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d020:	69b9      	ldr	r1, [r7, #24]
 800d022:	69fa      	ldr	r2, [r7, #28]
 800d024:	e841 2300 	strex	r3, r2, [r1]
 800d028:	617b      	str	r3, [r7, #20]
   return(result);
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1e6      	bne.n	800cffe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d030:	e002      	b.n	800d038 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d034:	f7f6 f908 	bl	8003248 <HAL_UART_TxCpltCallback>
}
 800d038:	bf00      	nop
 800d03a:	3740      	adds	r7, #64	; 0x40
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7ff f99a 	bl	800c388 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d054:	bf00      	nop
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d070:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d078:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d084:	2b80      	cmp	r3, #128	; 0x80
 800d086:	d109      	bne.n	800d09c <UART_DMAError+0x40>
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	2b21      	cmp	r3, #33	; 0x21
 800d08c:	d106      	bne.n	800d09c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2200      	movs	r2, #0
 800d092:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d096:	6978      	ldr	r0, [r7, #20]
 800d098:	f7ff fee0 	bl	800ce5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a6:	2b40      	cmp	r3, #64	; 0x40
 800d0a8:	d109      	bne.n	800d0be <UART_DMAError+0x62>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b22      	cmp	r3, #34	; 0x22
 800d0ae:	d106      	bne.n	800d0be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d0b8:	6978      	ldr	r0, [r7, #20]
 800d0ba:	f7ff ff0f 	bl	800cedc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c4:	f043 0210 	orr.w	r2, r3, #16
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0ce:	6978      	ldr	r0, [r7, #20]
 800d0d0:	f7ff f963 	bl	800c39a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0d4:	bf00      	nop
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff f94d 	bl	800c39a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d100:	bf00      	nop
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	e853 3f00 	ldrex	r3, [r3]
 800d11c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d124:	61fb      	str	r3, [r7, #28]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	61bb      	str	r3, [r7, #24]
 800d130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d132:	6979      	ldr	r1, [r7, #20]
 800d134:	69ba      	ldr	r2, [r7, #24]
 800d136:	e841 2300 	strex	r3, r2, [r1]
 800d13a:	613b      	str	r3, [r7, #16]
   return(result);
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1e6      	bne.n	800d110 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2220      	movs	r2, #32
 800d146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7f6 f879 	bl	8003248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d156:	bf00      	nop
 800d158:	3720      	adds	r7, #32
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b09c      	sub	sp, #112	; 0x70
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d16e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d178:	2b22      	cmp	r3, #34	; 0x22
 800d17a:	f040 80be 	bne.w	800d2fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d184:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d188:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d18c:	b2d9      	uxtb	r1, r3
 800d18e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d192:	b2da      	uxtb	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d198:	400a      	ands	r2, r1
 800d19a:	b2d2      	uxtb	r2, r2
 800d19c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f040 80a1 	bne.w	800d30a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d0:	e853 3f00 	ldrex	r3, [r3]
 800d1d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1ee:	e841 2300 	strex	r3, r2, [r1]
 800d1f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1e6      	bne.n	800d1c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3308      	adds	r3, #8
 800d200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20c:	f023 0301 	bic.w	r3, r3, #1
 800d210:	667b      	str	r3, [r7, #100]	; 0x64
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3308      	adds	r3, #8
 800d218:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d21a:	647a      	str	r2, [r7, #68]	; 0x44
 800d21c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d222:	e841 2300 	strex	r3, r2, [r1]
 800d226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1e5      	bne.n	800d1fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2220      	movs	r2, #32
 800d232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a33      	ldr	r2, [pc, #204]	; (800d314 <UART_RxISR_8BIT+0x1b4>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d01f      	beq.n	800d28c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d256:	2b00      	cmp	r3, #0
 800d258:	d018      	beq.n	800d28c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	e853 3f00 	ldrex	r3, [r3]
 800d266:	623b      	str	r3, [r7, #32]
   return(result);
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d26e:	663b      	str	r3, [r7, #96]	; 0x60
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	461a      	mov	r2, r3
 800d276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d278:	633b      	str	r3, [r7, #48]	; 0x30
 800d27a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d280:	e841 2300 	strex	r3, r2, [r1]
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1e6      	bne.n	800d25a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d290:	2b01      	cmp	r3, #1
 800d292:	d12e      	bne.n	800d2f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	e853 3f00 	ldrex	r3, [r3]
 800d2a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f023 0310 	bic.w	r3, r3, #16
 800d2ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2b8:	61fb      	str	r3, [r7, #28]
 800d2ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2bc:	69b9      	ldr	r1, [r7, #24]
 800d2be:	69fa      	ldr	r2, [r7, #28]
 800d2c0:	e841 2300 	strex	r3, r2, [r1]
 800d2c4:	617b      	str	r3, [r7, #20]
   return(result);
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1e6      	bne.n	800d29a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	69db      	ldr	r3, [r3, #28]
 800d2d2:	f003 0310 	and.w	r3, r3, #16
 800d2d6:	2b10      	cmp	r3, #16
 800d2d8:	d103      	bne.n	800d2e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2210      	movs	r2, #16
 800d2e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff f85e 	bl	800c3ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d2f0:	e00b      	b.n	800d30a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7f5 ffbe 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 800d2f8:	e007      	b.n	800d30a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	699a      	ldr	r2, [r3, #24]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f042 0208 	orr.w	r2, r2, #8
 800d308:	619a      	str	r2, [r3, #24]
}
 800d30a:	bf00      	nop
 800d30c:	3770      	adds	r7, #112	; 0x70
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	40008000 	.word	0x40008000

0800d318 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b09c      	sub	sp, #112	; 0x70
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d326:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d330:	2b22      	cmp	r3, #34	; 0x22
 800d332:	f040 80be 	bne.w	800d4b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d344:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d346:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d34a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d34e:	4013      	ands	r3, r2
 800d350:	b29a      	uxth	r2, r3
 800d352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d354:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d35a:	1c9a      	adds	r2, r3, #2
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d366:	b29b      	uxth	r3, r3
 800d368:	3b01      	subs	r3, #1
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d378:	b29b      	uxth	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f040 80a1 	bne.w	800d4c2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d394:	667b      	str	r3, [r7, #100]	; 0x64
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d39e:	657b      	str	r3, [r7, #84]	; 0x54
 800d3a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3a6:	e841 2300 	strex	r3, r2, [r1]
 800d3aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e6      	bne.n	800d380 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3bc:	e853 3f00 	ldrex	r3, [r3]
 800d3c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	f023 0301 	bic.w	r3, r3, #1
 800d3c8:	663b      	str	r3, [r7, #96]	; 0x60
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3d2:	643a      	str	r2, [r7, #64]	; 0x40
 800d3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3da:	e841 2300 	strex	r3, r2, [r1]
 800d3de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1e5      	bne.n	800d3b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2220      	movs	r2, #32
 800d3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a33      	ldr	r2, [pc, #204]	; (800d4cc <UART_RxISR_16BIT+0x1b4>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d01f      	beq.n	800d444 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d018      	beq.n	800d444 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d418:	6a3b      	ldr	r3, [r7, #32]
 800d41a:	e853 3f00 	ldrex	r3, [r3]
 800d41e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d426:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	461a      	mov	r2, r3
 800d42e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d430:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d432:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d438:	e841 2300 	strex	r3, r2, [r1]
 800d43c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1e6      	bne.n	800d412 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d12e      	bne.n	800d4aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	e853 3f00 	ldrex	r3, [r3]
 800d45e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	f023 0310 	bic.w	r3, r3, #16
 800d466:	65bb      	str	r3, [r7, #88]	; 0x58
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	461a      	mov	r2, r3
 800d46e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d474:	6979      	ldr	r1, [r7, #20]
 800d476:	69ba      	ldr	r2, [r7, #24]
 800d478:	e841 2300 	strex	r3, r2, [r1]
 800d47c:	613b      	str	r3, [r7, #16]
   return(result);
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1e6      	bne.n	800d452 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	69db      	ldr	r3, [r3, #28]
 800d48a:	f003 0310 	and.w	r3, r3, #16
 800d48e:	2b10      	cmp	r3, #16
 800d490:	d103      	bne.n	800d49a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2210      	movs	r2, #16
 800d498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7fe ff82 	bl	800c3ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d4a8:	e00b      	b.n	800d4c2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7f5 fee2 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 800d4b0:	e007      	b.n	800d4c2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	699a      	ldr	r2, [r3, #24]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f042 0208 	orr.w	r2, r2, #8
 800d4c0:	619a      	str	r2, [r3, #24]
}
 800d4c2:	bf00      	nop
 800d4c4:	3770      	adds	r7, #112	; 0x70
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	40008000 	.word	0x40008000

0800d4d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b0ac      	sub	sp, #176	; 0xb0
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	69db      	ldr	r3, [r3, #28]
 800d4e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d506:	2b22      	cmp	r3, #34	; 0x22
 800d508:	f040 8182 	bne.w	800d810 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d512:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d516:	e125      	b.n	800d764 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d522:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d526:	b2d9      	uxtb	r1, r3
 800d528:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d532:	400a      	ands	r2, r1
 800d534:	b2d2      	uxtb	r2, r2
 800d536:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d53c:	1c5a      	adds	r2, r3, #1
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d548:	b29b      	uxth	r3, r3
 800d54a:	3b01      	subs	r3, #1
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	69db      	ldr	r3, [r3, #28]
 800d55a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d562:	f003 0307 	and.w	r3, r3, #7
 800d566:	2b00      	cmp	r3, #0
 800d568:	d053      	beq.n	800d612 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d56a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	d011      	beq.n	800d59a <UART_RxISR_8BIT_FIFOEN+0xca>
 800d576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00b      	beq.n	800d59a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2201      	movs	r2, #1
 800d588:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d590:	f043 0201 	orr.w	r2, r3, #1
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d59a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d59e:	f003 0302 	and.w	r3, r3, #2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d011      	beq.n	800d5ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d5a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00b      	beq.n	800d5ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2202      	movs	r2, #2
 800d5b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5c0:	f043 0204 	orr.w	r2, r3, #4
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5ce:	f003 0304 	and.w	r3, r3, #4
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d011      	beq.n	800d5fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d5d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00b      	beq.n	800d5fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2204      	movs	r2, #4
 800d5e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5f0:	f043 0202 	orr.w	r2, r3, #2
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d600:	2b00      	cmp	r3, #0
 800d602:	d006      	beq.n	800d612 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7fe fec8 	bl	800c39a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d618:	b29b      	uxth	r3, r3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	f040 80a2 	bne.w	800d764 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d628:	e853 3f00 	ldrex	r3, [r3]
 800d62c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d642:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d644:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d646:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d648:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d64a:	e841 2300 	strex	r3, r2, [r1]
 800d64e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1e4      	bne.n	800d620 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	3308      	adds	r3, #8
 800d65c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d660:	e853 3f00 	ldrex	r3, [r3]
 800d664:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d66c:	f023 0301 	bic.w	r3, r3, #1
 800d670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3308      	adds	r3, #8
 800d67a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d67e:	66ba      	str	r2, [r7, #104]	; 0x68
 800d680:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d682:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d684:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d686:	e841 2300 	strex	r3, r2, [r1]
 800d68a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d68c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1e1      	bne.n	800d656 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2220      	movs	r2, #32
 800d696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a5f      	ldr	r2, [pc, #380]	; (800d828 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d021      	beq.n	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d01a      	beq.n	800d6f4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c6:	e853 3f00 	ldrex	r3, [r3]
 800d6ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d6d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6e0:	657b      	str	r3, [r7, #84]	; 0x54
 800d6e2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6e8:	e841 2300 	strex	r3, r2, [r1]
 800d6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1e4      	bne.n	800d6be <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d130      	bne.n	800d75e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d70a:	e853 3f00 	ldrex	r3, [r3]
 800d70e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	f023 0310 	bic.w	r3, r3, #16
 800d716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	461a      	mov	r2, r3
 800d720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d724:	643b      	str	r3, [r7, #64]	; 0x40
 800d726:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d72a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d72c:	e841 2300 	strex	r3, r2, [r1]
 800d730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1e4      	bne.n	800d702 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	69db      	ldr	r3, [r3, #28]
 800d73e:	f003 0310 	and.w	r3, r3, #16
 800d742:	2b10      	cmp	r3, #16
 800d744:	d103      	bne.n	800d74e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	2210      	movs	r2, #16
 800d74c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7fe fe28 	bl	800c3ac <HAL_UARTEx_RxEventCallback>
 800d75c:	e002      	b.n	800d764 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7f5 fd88 	bl	8003274 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d764:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d006      	beq.n	800d77a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800d76c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d770:	f003 0320 	and.w	r3, r3, #32
 800d774:	2b00      	cmp	r3, #0
 800d776:	f47f aecf 	bne.w	800d518 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d780:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d784:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d049      	beq.n	800d820 <UART_RxISR_8BIT_FIFOEN+0x350>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d792:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d796:	429a      	cmp	r2, r3
 800d798:	d242      	bcs.n	800d820 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	3308      	adds	r3, #8
 800d7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a2:	6a3b      	ldr	r3, [r7, #32]
 800d7a4:	e853 3f00 	ldrex	r3, [r3]
 800d7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3308      	adds	r3, #8
 800d7ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d7be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7c6:	e841 2300 	strex	r3, r2, [r1]
 800d7ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1e3      	bne.n	800d79a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a15      	ldr	r2, [pc, #84]	; (800d82c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d7d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	e853 3f00 	ldrex	r3, [r3]
 800d7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	f043 0320 	orr.w	r3, r3, #32
 800d7ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7fa:	61bb      	str	r3, [r7, #24]
 800d7fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fe:	6979      	ldr	r1, [r7, #20]
 800d800:	69ba      	ldr	r2, [r7, #24]
 800d802:	e841 2300 	strex	r3, r2, [r1]
 800d806:	613b      	str	r3, [r7, #16]
   return(result);
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1e4      	bne.n	800d7d8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d80e:	e007      	b.n	800d820 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	699a      	ldr	r2, [r3, #24]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f042 0208 	orr.w	r2, r2, #8
 800d81e:	619a      	str	r2, [r3, #24]
}
 800d820:	bf00      	nop
 800d822:	37b0      	adds	r7, #176	; 0xb0
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	40008000 	.word	0x40008000
 800d82c:	0800d161 	.word	0x0800d161

0800d830 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b0ae      	sub	sp, #184	; 0xb8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d83e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	69db      	ldr	r3, [r3, #28]
 800d848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d866:	2b22      	cmp	r3, #34	; 0x22
 800d868:	f040 8186 	bne.w	800db78 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d872:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d876:	e129      	b.n	800dacc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d88a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d88e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d892:	4013      	ands	r3, r2
 800d894:	b29a      	uxth	r2, r3
 800d896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d89a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8a0:	1c9a      	adds	r2, r3, #2
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	69db      	ldr	r3, [r3, #28]
 800d8be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d8c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8c6:	f003 0307 	and.w	r3, r3, #7
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d053      	beq.n	800d976 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d8ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d011      	beq.n	800d8fe <UART_RxISR_16BIT_FIFOEN+0xce>
 800d8da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00b      	beq.n	800d8fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8f4:	f043 0201 	orr.w	r2, r3, #1
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d902:	f003 0302 	and.w	r3, r3, #2
 800d906:	2b00      	cmp	r3, #0
 800d908:	d011      	beq.n	800d92e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d90a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00b      	beq.n	800d92e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2202      	movs	r2, #2
 800d91c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d924:	f043 0204 	orr.w	r2, r3, #4
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d92e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d932:	f003 0304 	and.w	r3, r3, #4
 800d936:	2b00      	cmp	r3, #0
 800d938:	d011      	beq.n	800d95e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d93a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00b      	beq.n	800d95e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2204      	movs	r2, #4
 800d94c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d954:	f043 0202 	orr.w	r2, r3, #2
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d964:	2b00      	cmp	r3, #0
 800d966:	d006      	beq.n	800d976 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7fe fd16 	bl	800c39a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f040 80a4 	bne.w	800dacc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d98c:	e853 3f00 	ldrex	r3, [r3]
 800d990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d9aa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d9ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d9b2:	e841 2300 	strex	r3, r2, [r1]
 800d9b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1e2      	bne.n	800d984 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9c8:	e853 3f00 	ldrex	r3, [r3]
 800d9cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9d4:	f023 0301 	bic.w	r3, r3, #1
 800d9d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d9e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d9e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d9ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d9ee:	e841 2300 	strex	r3, r2, [r1]
 800d9f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1e1      	bne.n	800d9be <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a5f      	ldr	r2, [pc, #380]	; (800db90 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d021      	beq.n	800da5c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da22:	2b00      	cmp	r3, #0
 800da24:	d01a      	beq.n	800da5c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da2e:	e853 3f00 	ldrex	r3, [r3]
 800da32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800da3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da48:	65bb      	str	r3, [r7, #88]	; 0x58
 800da4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da50:	e841 2300 	strex	r3, r2, [r1]
 800da54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e4      	bne.n	800da26 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da60:	2b01      	cmp	r3, #1
 800da62:	d130      	bne.n	800dac6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da72:	e853 3f00 	ldrex	r3, [r3]
 800da76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da7a:	f023 0310 	bic.w	r3, r3, #16
 800da7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	461a      	mov	r2, r3
 800da88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da8c:	647b      	str	r3, [r7, #68]	; 0x44
 800da8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da94:	e841 2300 	strex	r3, r2, [r1]
 800da98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1e4      	bne.n	800da6a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	69db      	ldr	r3, [r3, #28]
 800daa6:	f003 0310 	and.w	r3, r3, #16
 800daaa:	2b10      	cmp	r3, #16
 800daac:	d103      	bne.n	800dab6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2210      	movs	r2, #16
 800dab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7fe fc74 	bl	800c3ac <HAL_UARTEx_RxEventCallback>
 800dac4:	e002      	b.n	800dacc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7f5 fbd4 	bl	8003274 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dacc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d006      	beq.n	800dae2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800dad4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dad8:	f003 0320 	and.w	r3, r3, #32
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f47f aecb 	bne.w	800d878 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dae8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800daec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d049      	beq.n	800db88 <UART_RxISR_16BIT_FIFOEN+0x358>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dafa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800dafe:	429a      	cmp	r2, r3
 800db00:	d242      	bcs.n	800db88 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3308      	adds	r3, #8
 800db08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	e853 3f00 	ldrex	r3, [r3]
 800db10:	623b      	str	r3, [r7, #32]
   return(result);
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3308      	adds	r3, #8
 800db22:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800db26:	633a      	str	r2, [r7, #48]	; 0x30
 800db28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db2e:	e841 2300 	strex	r3, r2, [r1]
 800db32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1e3      	bne.n	800db02 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a15      	ldr	r2, [pc, #84]	; (800db94 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800db3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	e853 3f00 	ldrex	r3, [r3]
 800db4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f043 0320 	orr.w	r3, r3, #32
 800db54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	461a      	mov	r2, r3
 800db5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db62:	61fb      	str	r3, [r7, #28]
 800db64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db66:	69b9      	ldr	r1, [r7, #24]
 800db68:	69fa      	ldr	r2, [r7, #28]
 800db6a:	e841 2300 	strex	r3, r2, [r1]
 800db6e:	617b      	str	r3, [r7, #20]
   return(result);
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1e4      	bne.n	800db40 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db76:	e007      	b.n	800db88 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	699a      	ldr	r2, [r3, #24]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f042 0208 	orr.w	r2, r2, #8
 800db86:	619a      	str	r2, [r3, #24]
}
 800db88:	bf00      	nop
 800db8a:	37b8      	adds	r7, #184	; 0xb8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	40008000 	.word	0x40008000
 800db94:	0800d319 	.word	0x0800d319

0800db98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dba0:	bf00      	nop
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bc80      	pop	{r7}
 800dba8:	4770      	bx	lr

0800dbaa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b083      	sub	sp, #12
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dbb2:	bf00      	nop
 800dbb4:	370c      	adds	r7, #12
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bc80      	pop	{r7}
 800dbba:	4770      	bx	lr

0800dbbc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bc80      	pop	{r7}
 800dbcc:	4770      	bx	lr

0800dbce <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b088      	sub	sp, #32
 800dbd2:	af02      	add	r7, sp, #8
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	1d3b      	adds	r3, r7, #4
 800dbd8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d101      	bne.n	800dbee <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800dbea:	2302      	movs	r3, #2
 800dbec:	e046      	b.n	800dc7c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2224      	movs	r2, #36	; 0x24
 800dbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f022 0201 	bic.w	r2, r2, #1
 800dc0c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	430a      	orrs	r2, r1
 800dc20:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d105      	bne.n	800dc34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800dc28:	1d3b      	adds	r3, r7, #4
 800dc2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f000 f911 	bl	800de56 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f042 0201 	orr.w	r2, r2, #1
 800dc42:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc44:	f7f4 fe14 	bl	8002870 <HAL_GetTick>
 800dc48:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7fe ff16 	bl	800ca8a <UART_WaitOnFlagUntilTimeout>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800dc64:	2303      	movs	r3, #3
 800dc66:	75fb      	strb	r3, [r7, #23]
 800dc68:	e003      	b.n	800dc72 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2220      	movs	r2, #32
 800dc6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3718      	adds	r7, #24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b089      	sub	sp, #36	; 0x24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d101      	bne.n	800dc9a <HAL_UARTEx_EnableStopMode+0x16>
 800dc96:	2302      	movs	r3, #2
 800dc98:	e021      	b.n	800dcde <HAL_UARTEx_EnableStopMode+0x5a>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	e853 3f00 	ldrex	r3, [r3]
 800dcae:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f043 0302 	orr.w	r3, r3, #2
 800dcb6:	61fb      	str	r3, [r7, #28]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	61bb      	str	r3, [r7, #24]
 800dcc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc4:	6979      	ldr	r1, [r7, #20]
 800dcc6:	69ba      	ldr	r2, [r7, #24]
 800dcc8:	e841 2300 	strex	r3, r2, [r1]
 800dccc:	613b      	str	r3, [r7, #16]
   return(result);
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1e6      	bne.n	800dca2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3724      	adds	r7, #36	; 0x24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bc80      	pop	{r7}
 800dce6:	4770      	bx	lr

0800dce8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d101      	bne.n	800dcfe <HAL_UARTEx_EnableFifoMode+0x16>
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	e02b      	b.n	800dd56 <HAL_UARTEx_EnableFifoMode+0x6e>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2224      	movs	r2, #36	; 0x24
 800dd0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0201 	bic.w	r2, r2, #1
 800dd24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800dd34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 f8ac 	bl	800de9c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2220      	movs	r2, #32
 800dd48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b084      	sub	sp, #16
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d101      	bne.n	800dd76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd72:	2302      	movs	r3, #2
 800dd74:	e02d      	b.n	800ddd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2224      	movs	r2, #36	; 0x24
 800dd82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f022 0201 	bic.w	r2, r2, #1
 800dd9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	430a      	orrs	r2, r1
 800ddb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f872 	bl	800de9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d101      	bne.n	800ddf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddee:	2302      	movs	r3, #2
 800ddf0:	e02d      	b.n	800de4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2224      	movs	r2, #36	; 0x24
 800ddfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f022 0201 	bic.w	r2, r2, #1
 800de18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	683a      	ldr	r2, [r7, #0]
 800de2a:	430a      	orrs	r2, r1
 800de2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 f834 	bl	800de9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2220      	movs	r2, #32
 800de40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800de56:	b480      	push	{r7}
 800de58:	b085      	sub	sp, #20
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	60f8      	str	r0, [r7, #12]
 800de5e:	1d3b      	adds	r3, r7, #4
 800de60:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	f023 0210 	bic.w	r2, r3, #16
 800de6e:	893b      	ldrh	r3, [r7, #8]
 800de70:	4619      	mov	r1, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	430a      	orrs	r2, r1
 800de78:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800de84:	7abb      	ldrb	r3, [r7, #10]
 800de86:	061a      	lsls	r2, r3, #24
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	430a      	orrs	r2, r1
 800de8e:	605a      	str	r2, [r3, #4]
}
 800de90:	bf00      	nop
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	bc80      	pop	{r7}
 800de98:	4770      	bx	lr
	...

0800de9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d108      	bne.n	800debe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800debc:	e031      	b.n	800df22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800debe:	2308      	movs	r3, #8
 800dec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dec2:	2308      	movs	r3, #8
 800dec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	0e5b      	lsrs	r3, r3, #25
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 0307 	and.w	r3, r3, #7
 800ded4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	0f5b      	lsrs	r3, r3, #29
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	f003 0307 	and.w	r3, r3, #7
 800dee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dee6:	7bbb      	ldrb	r3, [r7, #14]
 800dee8:	7b3a      	ldrb	r2, [r7, #12]
 800deea:	4910      	ldr	r1, [pc, #64]	; (800df2c <UARTEx_SetNbDataToProcess+0x90>)
 800deec:	5c8a      	ldrb	r2, [r1, r2]
 800deee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800def2:	7b3a      	ldrb	r2, [r7, #12]
 800def4:	490e      	ldr	r1, [pc, #56]	; (800df30 <UARTEx_SetNbDataToProcess+0x94>)
 800def6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800def8:	fb93 f3f2 	sdiv	r3, r3, r2
 800defc:	b29a      	uxth	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df04:	7bfb      	ldrb	r3, [r7, #15]
 800df06:	7b7a      	ldrb	r2, [r7, #13]
 800df08:	4908      	ldr	r1, [pc, #32]	; (800df2c <UARTEx_SetNbDataToProcess+0x90>)
 800df0a:	5c8a      	ldrb	r2, [r1, r2]
 800df0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df10:	7b7a      	ldrb	r2, [r7, #13]
 800df12:	4907      	ldr	r1, [pc, #28]	; (800df30 <UARTEx_SetNbDataToProcess+0x94>)
 800df14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df16:	fb93 f3f2 	sdiv	r3, r3, r2
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df22:	bf00      	nop
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	bc80      	pop	{r7}
 800df2a:	4770      	bx	lr
 800df2c:	080219cc 	.word	0x080219cc
 800df30:	080219d4 	.word	0x080219d4

0800df34 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800df38:	f7f4 fb3a 	bl	80025b0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800df3c:	f000 f854 	bl	800dfe8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800df40:	bf00      	nop
 800df42:	bd80      	pop	{r7, pc}

0800df44 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800df48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df4c:	f011 fbb6 	bl	801f6bc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800df50:	bf00      	nop
 800df52:	bd80      	pop	{r7, pc}

0800df54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800df54:	b480      	push	{r7}
 800df56:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800df58:	f3bf 8f4f 	dsb	sy
}
 800df5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800df5e:	4b06      	ldr	r3, [pc, #24]	; (800df78 <__NVIC_SystemReset+0x24>)
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800df66:	4904      	ldr	r1, [pc, #16]	; (800df78 <__NVIC_SystemReset+0x24>)
 800df68:	4b04      	ldr	r3, [pc, #16]	; (800df7c <__NVIC_SystemReset+0x28>)
 800df6a:	4313      	orrs	r3, r2
 800df6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800df6e:	f3bf 8f4f 	dsb	sy
}
 800df72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800df74:	bf00      	nop
 800df76:	e7fd      	b.n	800df74 <__NVIC_SystemReset+0x20>
 800df78:	e000ed00 	.word	0xe000ed00
 800df7c:	05fa0004 	.word	0x05fa0004

0800df80 <disableLoRaWAN>:
/* USER CODE END PV */

/* Exported functions ---------------------------------------------------------*/
/* USER CODE BEGIN EF */

void disableLoRaWAN(void){
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
	// Determine the total number of tasks from the last value in the enum
	int totalTasks = (int)CFG_SEQ_Task_NBR;
 800df86:	2304      	movs	r3, #4
 800df88:	60bb      	str	r3, [r7, #8]

	// Iterate through each task ID
	for (int taskID = CFG_SEQ_Task_LmHandlerProcess; taskID < totalTasks; taskID++) {
 800df8a:	2300      	movs	r3, #0
 800df8c:	60fb      	str	r3, [r7, #12]
 800df8e:	e00a      	b.n	800dfa6 <disableLoRaWAN+0x26>
		UTIL_SEQ_bm_t taskMask = (1U << taskID);
 800df90:	2201      	movs	r2, #1
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	fa02 f303 	lsl.w	r3, r2, r3
 800df98:	607b      	str	r3, [r7, #4]

		UTIL_SEQ_PauseTask(taskMask);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f011 fcd8 	bl	801f950 <UTIL_SEQ_PauseTask>
	for (int taskID = CFG_SEQ_Task_LmHandlerProcess; taskID < totalTasks; taskID++) {
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	60fb      	str	r3, [r7, #12]
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	dbf0      	blt.n	800df90 <disableLoRaWAN+0x10>
	}
	UTIL_TIMER_Stop(&TxTimer);
 800dfae:	4809      	ldr	r0, [pc, #36]	; (800dfd4 <disableLoRaWAN+0x54>)
 800dfb0:	f011 fde8 	bl	801fb84 <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&StopJoinTimer);
 800dfb4:	4808      	ldr	r0, [pc, #32]	; (800dfd8 <disableLoRaWAN+0x58>)
 800dfb6:	f011 fde5 	bl	801fb84 <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&TxLedTimer);
 800dfba:	4808      	ldr	r0, [pc, #32]	; (800dfdc <disableLoRaWAN+0x5c>)
 800dfbc:	f011 fde2 	bl	801fb84 <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&RxLedTimer);
 800dfc0:	4807      	ldr	r0, [pc, #28]	; (800dfe0 <disableLoRaWAN+0x60>)
 800dfc2:	f011 fddf 	bl	801fb84 <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&JoinLedTimer);
 800dfc6:	4807      	ldr	r0, [pc, #28]	; (800dfe4 <disableLoRaWAN+0x64>)
 800dfc8:	f011 fddc 	bl	801fb84 <UTIL_TIMER_Stop>
}
 800dfcc:	bf00      	nop
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	200005a8 	.word	0x200005a8
 800dfd8:	200005c0 	.word	0x200005c0
 800dfdc:	200006cc 	.word	0x200006cc
 800dfe0:	200006e4 	.word	0x200006e4
 800dfe4:	200006fc 	.word	0x200006fc

0800dfe8 <LoRaWAN_Init>:

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800dff2:	2300      	movs	r3, #0
 800dff4:	9302      	str	r3, [sp, #8]
 800dff6:	2303      	movs	r3, #3
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	2301      	movs	r3, #1
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	4b59      	ldr	r3, [pc, #356]	; (800e164 <LoRaWAN_Init+0x17c>)
 800e000:	2200      	movs	r2, #0
 800e002:	2100      	movs	r1, #0
 800e004:	2002      	movs	r0, #2
 800e006:	f011 ffc7 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800e00a:	2300      	movs	r3, #0
 800e00c:	9302      	str	r3, [sp, #8]
 800e00e:	2305      	movs	r3, #5
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	2302      	movs	r3, #2
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	4b54      	ldr	r3, [pc, #336]	; (800e168 <LoRaWAN_Init+0x180>)
 800e018:	2200      	movs	r2, #0
 800e01a:	2100      	movs	r1, #0
 800e01c:	2002      	movs	r0, #2
 800e01e:	f011 ffbb 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800e022:	2300      	movs	r3, #0
 800e024:	9302      	str	r3, [sp, #8]
 800e026:	2303      	movs	r3, #3
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	2301      	movs	r3, #1
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	4b4f      	ldr	r3, [pc, #316]	; (800e16c <LoRaWAN_Init+0x184>)
 800e030:	2200      	movs	r2, #0
 800e032:	2100      	movs	r1, #0
 800e034:	2002      	movs	r0, #2
 800e036:	f011 ffaf 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800e03a:	1d3b      	adds	r3, r7, #4
 800e03c:	4619      	mov	r1, r3
 800e03e:	2000      	movs	r0, #0
 800e040:	f003 fa70 	bl	8011524 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	0e1b      	lsrs	r3, r3, #24
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	461a      	mov	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	0c1b      	lsrs	r3, r3, #16
 800e050:	b2db      	uxtb	r3, r3
 800e052:	4619      	mov	r1, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	0a1b      	lsrs	r3, r3, #8
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	9302      	str	r3, [sp, #8]
 800e05c:	9101      	str	r1, [sp, #4]
 800e05e:	9200      	str	r2, [sp, #0]
 800e060:	4b43      	ldr	r3, [pc, #268]	; (800e170 <LoRaWAN_Init+0x188>)
 800e062:	2200      	movs	r2, #0
 800e064:	2100      	movs	r1, #0
 800e066:	2002      	movs	r0, #2
 800e068:	f011 ff96 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800e06c:	1d3b      	adds	r3, r7, #4
 800e06e:	4619      	mov	r1, r3
 800e070:	2001      	movs	r0, #1
 800e072:	f003 fa57 	bl	8011524 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	0e1b      	lsrs	r3, r3, #24
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	461a      	mov	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	0c1b      	lsrs	r3, r3, #16
 800e082:	b2db      	uxtb	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	0a1b      	lsrs	r3, r3, #8
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	b2c0      	uxtb	r0, r0
 800e090:	9003      	str	r0, [sp, #12]
 800e092:	9302      	str	r3, [sp, #8]
 800e094:	9101      	str	r1, [sp, #4]
 800e096:	9200      	str	r2, [sp, #0]
 800e098:	4b36      	ldr	r3, [pc, #216]	; (800e174 <LoRaWAN_Init+0x18c>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	2100      	movs	r1, #0
 800e09e:	2002      	movs	r0, #2
 800e0a0:	f011 ff7a 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	4b33      	ldr	r3, [pc, #204]	; (800e178 <LoRaWAN_Init+0x190>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0b0:	4832      	ldr	r0, [pc, #200]	; (800e17c <LoRaWAN_Init+0x194>)
 800e0b2:	f011 fcc3 	bl	801fa3c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	4b31      	ldr	r3, [pc, #196]	; (800e180 <LoRaWAN_Init+0x198>)
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0c2:	4830      	ldr	r0, [pc, #192]	; (800e184 <LoRaWAN_Init+0x19c>)
 800e0c4:	f011 fcba 	bl	801fa3c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	4b2e      	ldr	r3, [pc, #184]	; (800e188 <LoRaWAN_Init+0x1a0>)
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0d4:	482d      	ldr	r0, [pc, #180]	; (800e18c <LoRaWAN_Init+0x1a4>)
 800e0d6:	f011 fcb1 	bl	801fa3c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800e0da:	2300      	movs	r3, #0
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	4b2c      	ldr	r3, [pc, #176]	; (800e190 <LoRaWAN_Init+0x1a8>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e0e6:	482b      	ldr	r0, [pc, #172]	; (800e194 <LoRaWAN_Init+0x1ac>)
 800e0e8:	f011 fca8 	bl	801fa3c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800e0ec:	4a2a      	ldr	r2, [pc, #168]	; (800e198 <LoRaWAN_Init+0x1b0>)
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	2001      	movs	r0, #1
 800e0f2:	f011 fbdf 	bl	801f8b4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800e0f6:	4a29      	ldr	r2, [pc, #164]	; (800e19c <LoRaWAN_Init+0x1b4>)
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	2002      	movs	r0, #2
 800e0fc:	f011 fbda 	bl	801f8b4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800e100:	4a27      	ldr	r2, [pc, #156]	; (800e1a0 <LoRaWAN_Init+0x1b8>)
 800e102:	2100      	movs	r1, #0
 800e104:	2004      	movs	r0, #4
 800e106:	f011 fbd5 	bl	801f8b4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800e10a:	4a26      	ldr	r2, [pc, #152]	; (800e1a4 <LoRaWAN_Init+0x1bc>)
 800e10c:	2100      	movs	r1, #0
 800e10e:	2008      	movs	r0, #8
 800e110:	f011 fbd0 	bl	801f8b4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800e114:	f000 fd64 	bl	800ebe0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800e118:	4923      	ldr	r1, [pc, #140]	; (800e1a8 <LoRaWAN_Init+0x1c0>)
 800e11a:	4824      	ldr	r0, [pc, #144]	; (800e1ac <LoRaWAN_Init+0x1c4>)
 800e11c:	f002 fa74 	bl	8010608 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800e120:	4823      	ldr	r0, [pc, #140]	; (800e1b0 <LoRaWAN_Init+0x1c8>)
 800e122:	f002 fadf 	bl	80106e4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800e126:	4819      	ldr	r0, [pc, #100]	; (800e18c <LoRaWAN_Init+0x1a4>)
 800e128:	f011 fcbe 	bl	801faa8 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800e12c:	4b21      	ldr	r3, [pc, #132]	; (800e1b4 <LoRaWAN_Init+0x1cc>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	4a21      	ldr	r2, [pc, #132]	; (800e1b8 <LoRaWAN_Init+0x1d0>)
 800e132:	7812      	ldrb	r2, [r2, #0]
 800e134:	4611      	mov	r1, r2
 800e136:	4618      	mov	r0, r3
 800e138:	f002 fc2c 	bl	8010994 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800e13c:	4b1f      	ldr	r3, [pc, #124]	; (800e1bc <LoRaWAN_Init+0x1d4>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10b      	bne.n	800e15c <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800e144:	4b1e      	ldr	r3, [pc, #120]	; (800e1c0 <LoRaWAN_Init+0x1d8>)
 800e146:	6819      	ldr	r1, [r3, #0]
 800e148:	2300      	movs	r3, #0
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	4b1d      	ldr	r3, [pc, #116]	; (800e1c4 <LoRaWAN_Init+0x1dc>)
 800e14e:	2200      	movs	r2, #0
 800e150:	481d      	ldr	r0, [pc, #116]	; (800e1c8 <LoRaWAN_Init+0x1e0>)
 800e152:	f011 fc73 	bl	801fa3c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800e156:	481c      	ldr	r0, [pc, #112]	; (800e1c8 <LoRaWAN_Init+0x1e0>)
 800e158:	f011 fca6 	bl	801faa8 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	0802103c 	.word	0x0802103c
 800e168:	08021060 	.word	0x08021060
 800e16c:	08021084 	.word	0x08021084
 800e170:	080210a8 	.word	0x080210a8
 800e174:	080210cc 	.word	0x080210cc
 800e178:	0800e701 	.word	0x0800e701
 800e17c:	200006cc 	.word	0x200006cc
 800e180:	0800e713 	.word	0x0800e713
 800e184:	200006e4 	.word	0x200006e4
 800e188:	0800e725 	.word	0x0800e725
 800e18c:	200006fc 	.word	0x200006fc
 800e190:	0800eae1 	.word	0x0800eae1
 800e194:	200005c0 	.word	0x200005c0
 800e198:	08010929 	.word	0x08010929
 800e19c:	0800e315 	.word	0x0800e315
 800e1a0:	0800eb05 	.word	0x0800eb05
 800e1a4:	0800ea61 	.word	0x0800ea61
 800e1a8:	01030000 	.word	0x01030000
 800e1ac:	20000024 	.word	0x20000024
 800e1b0:	20000070 	.word	0x20000070
 800e1b4:	20000020 	.word	0x20000020
 800e1b8:	20000021 	.word	0x20000021
 800e1bc:	200005a4 	.word	0x200005a4
 800e1c0:	20000088 	.word	0x20000088
 800e1c4:	0800e6cd 	.word	0x0800e6cd
 800e1c8:	200005a8 	.word	0x200005a8

0800e1cc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800e1cc:	b5b0      	push	{r4, r5, r7, lr}
 800e1ce:	b08a      	sub	sp, #40	; 0x28
 800e1d0:	af06      	add	r7, sp, #24
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 8086 	beq.w	800e2ee <OnRxData+0x122>
  {

    UTIL_TIMER_Start(&RxLedTimer);
 800e1e2:	4845      	ldr	r0, [pc, #276]	; (800e2f8 <OnRxData+0x12c>)
 800e1e4:	f011 fc60 	bl	801faa8 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d05a      	beq.n	800e2a6 <OnRxData+0xda>
    {
      if (appData != NULL)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d057      	beq.n	800e2a6 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d050      	beq.n	800e2a6 <OnRxData+0xda>
        {
          switch (appData->Port)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d01f      	beq.n	800e24c <OnRxData+0x80>
 800e20c:	2b03      	cmp	r3, #3
 800e20e:	d145      	bne.n	800e29c <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	785b      	ldrb	r3, [r3, #1]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d143      	bne.n	800e2a0 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d00e      	beq.n	800e240 <OnRxData+0x74>
 800e222:	2b02      	cmp	r3, #2
 800e224:	dc10      	bgt.n	800e248 <OnRxData+0x7c>
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <OnRxData+0x64>
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d004      	beq.n	800e238 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800e22e:	e00b      	b.n	800e248 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800e230:	2000      	movs	r0, #0
 800e232:	f002 fd63 	bl	8010cfc <LmHandlerRequestClass>
                    break;
 800e236:	e008      	b.n	800e24a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800e238:	2001      	movs	r0, #1
 800e23a:	f002 fd5f 	bl	8010cfc <LmHandlerRequestClass>
                    break;
 800e23e:	e004      	b.n	800e24a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800e240:	2002      	movs	r0, #2
 800e242:	f002 fd5b 	bl	8010cfc <LmHandlerRequestClass>
                    break;
 800e246:	e000      	b.n	800e24a <OnRxData+0x7e>
                    break;
 800e248:	bf00      	nop
                }
              }
              break;
 800e24a:	e029      	b.n	800e2a0 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	785b      	ldrb	r3, [r3, #1]
 800e250:	2b01      	cmp	r3, #1
 800e252:	d127      	bne.n	800e2a4 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	4b26      	ldr	r3, [pc, #152]	; (800e2fc <OnRxData+0x130>)
 800e262:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800e264:	4b25      	ldr	r3, [pc, #148]	; (800e2fc <OnRxData+0x130>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10b      	bne.n	800e284 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800e26c:	4b24      	ldr	r3, [pc, #144]	; (800e300 <OnRxData+0x134>)
 800e26e:	2200      	movs	r2, #0
 800e270:	2100      	movs	r1, #0
 800e272:	2003      	movs	r0, #3
 800e274:	f011 fe90 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800e278:	2201      	movs	r2, #1
 800e27a:	2120      	movs	r1, #32
 800e27c:	4821      	ldr	r0, [pc, #132]	; (800e304 <OnRxData+0x138>)
 800e27e:	f7f9 fd3c 	bl	8007cfa <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800e282:	e00f      	b.n	800e2a4 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800e284:	4b20      	ldr	r3, [pc, #128]	; (800e308 <OnRxData+0x13c>)
 800e286:	2200      	movs	r2, #0
 800e288:	2100      	movs	r1, #0
 800e28a:	2003      	movs	r0, #3
 800e28c:	f011 fe84 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800e290:	2200      	movs	r2, #0
 800e292:	2120      	movs	r1, #32
 800e294:	481b      	ldr	r0, [pc, #108]	; (800e304 <OnRxData+0x138>)
 800e296:	f7f9 fd30 	bl	8007cfa <HAL_GPIO_WritePin>
              break;
 800e29a:	e003      	b.n	800e2a4 <OnRxData+0xd8>

            default:

              break;
 800e29c:	bf00      	nop
 800e29e:	e002      	b.n	800e2a6 <OnRxData+0xda>
              break;
 800e2a0:	bf00      	nop
 800e2a2:	e000      	b.n	800e2a6 <OnRxData+0xda>
              break;
 800e2a4:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	7c1b      	ldrb	r3, [r3, #16]
 800e2aa:	2b05      	cmp	r3, #5
 800e2ac:	d81f      	bhi.n	800e2ee <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	7bfa      	ldrb	r2, [r7, #15]
 800e2b4:	6839      	ldr	r1, [r7, #0]
 800e2b6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	7c09      	ldrb	r1, [r1, #16]
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	4912      	ldr	r1, [pc, #72]	; (800e30c <OnRxData+0x140>)
 800e2c4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e2c8:	6838      	ldr	r0, [r7, #0]
 800e2ca:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	6838      	ldr	r0, [r7, #0]
 800e2d2:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800e2d6:	9005      	str	r0, [sp, #20]
 800e2d8:	9504      	str	r5, [sp, #16]
 800e2da:	9103      	str	r1, [sp, #12]
 800e2dc:	9402      	str	r4, [sp, #8]
 800e2de:	9201      	str	r2, [sp, #4]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <OnRxData+0x144>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	2003      	movs	r0, #3
 800e2ea:	f011 fe55 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800e2ee:	bf00      	nop
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bdb0      	pop	{r4, r5, r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	200006e4 	.word	0x200006e4
 800e2fc:	200006ca 	.word	0x200006ca
 800e300:	080210f0 	.word	0x080210f0
 800e304:	48000400 	.word	0x48000400
 800e308:	080210fc 	.word	0x080210fc
 800e30c:	20000008 	.word	0x20000008
 800e310:	08021108 	.word	0x08021108

0800e314 <SendTxData>:

static void SendTxData(void)
{
 800e314:	b590      	push	{r4, r7, lr}
 800e316:	b093      	sub	sp, #76	; 0x4c
 800e318:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800e31a:	23ff      	movs	r3, #255	; 0xff
 800e31c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t batteryLevel = GetBatteryLevel();
 800e320:	f7f4 f976 	bl	8002610 <GetBatteryLevel>
 800e324:	4603      	mov	r3, r0
 800e326:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t pressure = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	86bb      	strh	r3, [r7, #52]	; 0x34
  int16_t temperature = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t humidity = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t i = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	63bb      	str	r3, [r7, #56]	; 0x38
  int32_t latitude = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t longitude = 0;
 800e342:	2300      	movs	r3, #0
 800e344:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t altitudeGps = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	84fb      	strh	r3, [r7, #38]	; 0x26

  EnvSensors_Read(&sensor_data);
 800e34a:	1d3b      	adds	r3, r7, #4
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7f4 fad1 	bl	80028f4 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800e352:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	4b72      	ldr	r3, [pc, #456]	; (800e524 <SendTxData+0x210>)
 800e35a:	2201      	movs	r2, #1
 800e35c:	2100      	movs	r1, #0
 800e35e:	2002      	movs	r0, #2
 800e360:	f011 fe1a 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
  float temperature_f = sensor_data.temperature*100;
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	4970      	ldr	r1, [pc, #448]	; (800e528 <SendTxData+0x214>)
 800e368:	4618      	mov	r0, r3
 800e36a:	f7f2 fd3d 	bl	8000de8 <__aeabi_fmul>
 800e36e:	4603      	mov	r3, r0
 800e370:	623b      	str	r3, [r7, #32]
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature_f / 100, (int)temperature_f % 100);
 800e372:	6a38      	ldr	r0, [r7, #32]
 800e374:	f7f2 fe88 	bl	8001088 <__aeabi_f2iz>
 800e378:	4603      	mov	r3, r0
 800e37a:	4a6c      	ldr	r2, [pc, #432]	; (800e52c <SendTxData+0x218>)
 800e37c:	fb82 1203 	smull	r1, r2, r2, r3
 800e380:	1152      	asrs	r2, r2, #5
 800e382:	17db      	asrs	r3, r3, #31
 800e384:	1ad4      	subs	r4, r2, r3
 800e386:	6a38      	ldr	r0, [r7, #32]
 800e388:	f7f2 fe7e 	bl	8001088 <__aeabi_f2iz>
 800e38c:	4602      	mov	r2, r0
 800e38e:	4b67      	ldr	r3, [pc, #412]	; (800e52c <SendTxData+0x218>)
 800e390:	fb83 1302 	smull	r1, r3, r3, r2
 800e394:	1159      	asrs	r1, r3, #5
 800e396:	17d3      	asrs	r3, r2, #31
 800e398:	1acb      	subs	r3, r1, r3
 800e39a:	2164      	movs	r1, #100	; 0x64
 800e39c:	fb01 f303 	mul.w	r3, r1, r3
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	9400      	str	r4, [sp, #0]
 800e3a6:	4b62      	ldr	r3, [pc, #392]	; (800e530 <SendTxData+0x21c>)
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	2002      	movs	r0, #2
 800e3ae:	f011 fdf3 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
  temperature = (uint16_t)temperature_f;
 800e3b2:	6a38      	ldr	r0, [r7, #32]
 800e3b4:	f7f2 fe8e 	bl	80010d4 <__aeabi_f2uiz>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	867b      	strh	r3, [r7, #50]	; 0x32

  float pressure_f = sensor_data.pressure*100;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4959      	ldr	r1, [pc, #356]	; (800e528 <SendTxData+0x214>)
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7f2 fd10 	bl	8000de8 <__aeabi_fmul>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	61fb      	str	r3, [r7, #28]
  APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure_f / 100, (int)pressure_f % 100);
 800e3cc:	69f8      	ldr	r0, [r7, #28]
 800e3ce:	f7f2 fe5b 	bl	8001088 <__aeabi_f2iz>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	4a55      	ldr	r2, [pc, #340]	; (800e52c <SendTxData+0x218>)
 800e3d6:	fb82 1203 	smull	r1, r2, r2, r3
 800e3da:	1152      	asrs	r2, r2, #5
 800e3dc:	17db      	asrs	r3, r3, #31
 800e3de:	1ad4      	subs	r4, r2, r3
 800e3e0:	69f8      	ldr	r0, [r7, #28]
 800e3e2:	f7f2 fe51 	bl	8001088 <__aeabi_f2iz>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	4b50      	ldr	r3, [pc, #320]	; (800e52c <SendTxData+0x218>)
 800e3ea:	fb83 1302 	smull	r1, r3, r3, r2
 800e3ee:	1159      	asrs	r1, r3, #5
 800e3f0:	17d3      	asrs	r3, r2, #31
 800e3f2:	1acb      	subs	r3, r1, r3
 800e3f4:	2164      	movs	r1, #100	; 0x64
 800e3f6:	fb01 f303 	mul.w	r3, r1, r3
 800e3fa:	1ad3      	subs	r3, r2, r3
 800e3fc:	9301      	str	r3, [sp, #4]
 800e3fe:	9400      	str	r4, [sp, #0]
 800e400:	4b4c      	ldr	r3, [pc, #304]	; (800e534 <SendTxData+0x220>)
 800e402:	2201      	movs	r2, #1
 800e404:	2100      	movs	r1, #0
 800e406:	2002      	movs	r0, #2
 800e408:	f011 fdc6 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800e40c:	4b4a      	ldr	r3, [pc, #296]	; (800e538 <SendTxData+0x224>)
 800e40e:	2202      	movs	r2, #2
 800e410:	701a      	strb	r2, [r3, #0]

  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	4949      	ldr	r1, [pc, #292]	; (800e53c <SendTxData+0x228>)
 800e416:	4618      	mov	r0, r3
 800e418:	f7f2 fce6 	bl	8000de8 <__aeabi_fmul>
 800e41c:	4603      	mov	r3, r0
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f2 fe58 	bl	80010d4 <__aeabi_f2uiz>
 800e424:	4603      	mov	r3, r0
 800e426:	863b      	strh	r3, [r7, #48]	; 0x30
  temperature = (int16_t)(sensor_data.temperature);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f2 fe2c 	bl	8001088 <__aeabi_f2iz>
 800e430:	4603      	mov	r3, r0
 800e432:	867b      	strh	r3, [r7, #50]	; 0x32
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	493c      	ldr	r1, [pc, #240]	; (800e528 <SendTxData+0x214>)
 800e438:	4618      	mov	r0, r3
 800e43a:	f7f2 fcd5 	bl	8000de8 <__aeabi_fmul>
 800e43e:	4603      	mov	r3, r0
 800e440:	493e      	ldr	r1, [pc, #248]	; (800e53c <SendTxData+0x228>)
 800e442:	4618      	mov	r0, r3
 800e444:	f7f2 fd84 	bl	8000f50 <__aeabi_fdiv>
 800e448:	4603      	mov	r3, r0
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7f2 fe42 	bl	80010d4 <__aeabi_f2uiz>
 800e450:	4603      	mov	r3, r0
 800e452:	86bb      	strh	r3, [r7, #52]	; 0x34

  AppData.Buffer[i++] = AppLedStateOn;
 800e454:	4b38      	ldr	r3, [pc, #224]	; (800e538 <SendTxData+0x224>)
 800e456:	685a      	ldr	r2, [r3, #4]
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	1c59      	adds	r1, r3, #1
 800e45c:	63b9      	str	r1, [r7, #56]	; 0x38
 800e45e:	4413      	add	r3, r2
 800e460:	4a37      	ldr	r2, [pc, #220]	; (800e540 <SendTxData+0x22c>)
 800e462:	7812      	ldrb	r2, [r2, #0]
 800e464:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800e466:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e468:	0a1b      	lsrs	r3, r3, #8
 800e46a:	b298      	uxth	r0, r3
 800e46c:	4b32      	ldr	r3, [pc, #200]	; (800e538 <SendTxData+0x224>)
 800e46e:	685a      	ldr	r2, [r3, #4]
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	1c59      	adds	r1, r3, #1
 800e474:	63b9      	str	r1, [r7, #56]	; 0x38
 800e476:	4413      	add	r3, r2
 800e478:	b2c2      	uxtb	r2, r0
 800e47a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800e47c:	4b2e      	ldr	r3, [pc, #184]	; (800e538 <SendTxData+0x224>)
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e482:	1c59      	adds	r1, r3, #1
 800e484:	63b9      	str	r1, [r7, #56]	; 0x38
 800e486:	4413      	add	r3, r2
 800e488:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e48a:	b2d2      	uxtb	r2, r2
 800e48c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800e48e:	4b2a      	ldr	r3, [pc, #168]	; (800e538 <SendTxData+0x224>)
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e494:	1c59      	adds	r1, r3, #1
 800e496:	63b9      	str	r1, [r7, #56]	; 0x38
 800e498:	4413      	add	r3, r2
 800e49a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e49c:	b2d2      	uxtb	r2, r2
 800e49e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800e4a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e4a2:	0a1b      	lsrs	r3, r3, #8
 800e4a4:	b298      	uxth	r0, r3
 800e4a6:	4b24      	ldr	r3, [pc, #144]	; (800e538 <SendTxData+0x224>)
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ac:	1c59      	adds	r1, r3, #1
 800e4ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4b0:	4413      	add	r3, r2
 800e4b2:	b2c2      	uxtb	r2, r0
 800e4b4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800e4b6:	4b20      	ldr	r3, [pc, #128]	; (800e538 <SendTxData+0x224>)
 800e4b8:	685a      	ldr	r2, [r3, #4]
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4bc:	1c59      	adds	r1, r3, #1
 800e4be:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4c0:	4413      	add	r3, r2
 800e4c2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e4c4:	b2d2      	uxtb	r2, r2
 800e4c6:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800e4c8:	4b1e      	ldr	r3, [pc, #120]	; (800e544 <SendTxData+0x230>)
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	2b08      	cmp	r3, #8
 800e4ce:	d007      	beq.n	800e4e0 <SendTxData+0x1cc>
 800e4d0:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <SendTxData+0x230>)
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d003      	beq.n	800e4e0 <SendTxData+0x1cc>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	; (800e544 <SendTxData+0x230>)
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d133      	bne.n	800e548 <SendTxData+0x234>
  {
    AppData.Buffer[i++] = 0;
 800e4e0:	4b15      	ldr	r3, [pc, #84]	; (800e538 <SendTxData+0x224>)
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e6:	1c59      	adds	r1, r3, #1
 800e4e8:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4ea:	4413      	add	r3, r2
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e4f0:	4b11      	ldr	r3, [pc, #68]	; (800e538 <SendTxData+0x224>)
 800e4f2:	685a      	ldr	r2, [r3, #4]
 800e4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f6:	1c59      	adds	r1, r3, #1
 800e4f8:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4fa:	4413      	add	r3, r2
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e500:	4b0d      	ldr	r3, [pc, #52]	; (800e538 <SendTxData+0x224>)
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e506:	1c59      	adds	r1, r3, #1
 800e508:	63b9      	str	r1, [r7, #56]	; 0x38
 800e50a:	4413      	add	r3, r2
 800e50c:	2200      	movs	r2, #0
 800e50e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e510:	4b09      	ldr	r3, [pc, #36]	; (800e538 <SendTxData+0x224>)
 800e512:	685a      	ldr	r2, [r3, #4]
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	1c59      	adds	r1, r3, #1
 800e518:	63b9      	str	r1, [r7, #56]	; 0x38
 800e51a:	4413      	add	r3, r2
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
 800e520:	e06e      	b.n	800e600 <SendTxData+0x2ec>
 800e522:	bf00      	nop
 800e524:	08021150 	.word	0x08021150
 800e528:	42c80000 	.word	0x42c80000
 800e52c:	51eb851f 	.word	0x51eb851f
 800e530:	0802115c 	.word	0x0802115c
 800e534:	08021170 	.word	0x08021170
 800e538:	2000008c 	.word	0x2000008c
 800e53c:	41200000 	.word	0x41200000
 800e540:	200006ca 	.word	0x200006ca
 800e544:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	62fb      	str	r3, [r7, #44]	; 0x2c
    longitude = sensor_data.longitude;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	62bb      	str	r3, [r7, #40]	; 0x28

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800e550:	4b55      	ldr	r3, [pc, #340]	; (800e6a8 <SendTxData+0x394>)
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	1c59      	adds	r1, r3, #1
 800e558:	63b9      	str	r1, [r7, #56]	; 0x38
 800e55a:	18d4      	adds	r4, r2, r3
 800e55c:	f7f4 f858 	bl	8002610 <GetBatteryLevel>
 800e560:	4603      	mov	r3, r0
 800e562:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	1418      	asrs	r0, r3, #16
 800e568:	4b4f      	ldr	r3, [pc, #316]	; (800e6a8 <SendTxData+0x394>)
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56e:	1c59      	adds	r1, r3, #1
 800e570:	63b9      	str	r1, [r7, #56]	; 0x38
 800e572:	4413      	add	r3, r2
 800e574:	b2c2      	uxtb	r2, r0
 800e576:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800e578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57a:	1218      	asrs	r0, r3, #8
 800e57c:	4b4a      	ldr	r3, [pc, #296]	; (800e6a8 <SendTxData+0x394>)
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	1c59      	adds	r1, r3, #1
 800e584:	63b9      	str	r1, [r7, #56]	; 0x38
 800e586:	4413      	add	r3, r2
 800e588:	b2c2      	uxtb	r2, r0
 800e58a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800e58c:	4b46      	ldr	r3, [pc, #280]	; (800e6a8 <SendTxData+0x394>)
 800e58e:	685a      	ldr	r2, [r3, #4]
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	1c59      	adds	r1, r3, #1
 800e594:	63b9      	str	r1, [r7, #56]	; 0x38
 800e596:	4413      	add	r3, r2
 800e598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	1418      	asrs	r0, r3, #16
 800e5a2:	4b41      	ldr	r3, [pc, #260]	; (800e6a8 <SendTxData+0x394>)
 800e5a4:	685a      	ldr	r2, [r3, #4]
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	1c59      	adds	r1, r3, #1
 800e5aa:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5ac:	4413      	add	r3, r2
 800e5ae:	b2c2      	uxtb	r2, r0
 800e5b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800e5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b4:	1218      	asrs	r0, r3, #8
 800e5b6:	4b3c      	ldr	r3, [pc, #240]	; (800e6a8 <SendTxData+0x394>)
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5bc:	1c59      	adds	r1, r3, #1
 800e5be:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5c0:	4413      	add	r3, r2
 800e5c2:	b2c2      	uxtb	r2, r0
 800e5c4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800e5c6:	4b38      	ldr	r3, [pc, #224]	; (800e6a8 <SendTxData+0x394>)
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5cc:	1c59      	adds	r1, r3, #1
 800e5ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5d0:	4413      	add	r3, r2
 800e5d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5d4:	b2d2      	uxtb	r2, r2
 800e5d6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800e5d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e5da:	0a1b      	lsrs	r3, r3, #8
 800e5dc:	b298      	uxth	r0, r3
 800e5de:	4b32      	ldr	r3, [pc, #200]	; (800e6a8 <SendTxData+0x394>)
 800e5e0:	685a      	ldr	r2, [r3, #4]
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	1c59      	adds	r1, r3, #1
 800e5e6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5e8:	4413      	add	r3, r2
 800e5ea:	b2c2      	uxtb	r2, r0
 800e5ec:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800e5ee:	4b2e      	ldr	r3, [pc, #184]	; (800e6a8 <SendTxData+0x394>)
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	1c59      	adds	r1, r3, #1
 800e5f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5f8:	4413      	add	r3, r2
 800e5fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e5fc:	b2d2      	uxtb	r2, r2
 800e5fe:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	b2da      	uxtb	r2, r3
 800e604:	4b28      	ldr	r3, [pc, #160]	; (800e6a8 <SendTxData+0x394>)
 800e606:	705a      	strb	r2, [r3, #1]


  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800e608:	4b28      	ldr	r3, [pc, #160]	; (800e6ac <SendTxData+0x398>)
 800e60a:	7a5b      	ldrb	r3, [r3, #9]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d007      	beq.n	800e620 <SendTxData+0x30c>
 800e610:	f002 fa62 	bl	8010ad8 <LmHandlerJoinStatus>
 800e614:	4603      	mov	r3, r0
 800e616:	2b01      	cmp	r3, #1
 800e618:	d102      	bne.n	800e620 <SendTxData+0x30c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800e61a:	4824      	ldr	r0, [pc, #144]	; (800e6ac <SendTxData+0x398>)
 800e61c:	f011 fab2 	bl	801fb84 <UTIL_TIMER_Stop>
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800e620:	4b23      	ldr	r3, [pc, #140]	; (800e6b0 <SendTxData+0x39c>)
 800e622:	78db      	ldrb	r3, [r3, #3]
 800e624:	2200      	movs	r2, #0
 800e626:	4619      	mov	r1, r3
 800e628:	481f      	ldr	r0, [pc, #124]	; (800e6a8 <SendTxData+0x394>)
 800e62a:	f002 fa71 	bl	8010b10 <LmHandlerSend>
 800e62e:	4603      	mov	r3, r0
 800e630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (LORAMAC_HANDLER_SUCCESS == status)
 800e634:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d106      	bne.n	800e64a <SendTxData+0x336>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800e63c:	4b1d      	ldr	r3, [pc, #116]	; (800e6b4 <SendTxData+0x3a0>)
 800e63e:	2201      	movs	r2, #1
 800e640:	2100      	movs	r1, #0
 800e642:	2001      	movs	r0, #1
 800e644:	f011 fca8 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
 800e648:	e016      	b.n	800e678 <SendTxData+0x364>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800e64a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e64e:	f113 0f06 	cmn.w	r3, #6
 800e652:	d111      	bne.n	800e678 <SendTxData+0x364>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800e654:	f002 f994 	bl	8010980 <LmHandlerGetDutyCycleWaitTime>
 800e658:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (nextTxIn > 0)
 800e65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <SendTxData+0x364>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800e660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e662:	4a15      	ldr	r2, [pc, #84]	; (800e6b8 <SendTxData+0x3a4>)
 800e664:	fba2 2303 	umull	r2, r3, r2, r3
 800e668:	099b      	lsrs	r3, r3, #6
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	4b13      	ldr	r3, [pc, #76]	; (800e6bc <SendTxData+0x3a8>)
 800e66e:	2201      	movs	r2, #1
 800e670:	2100      	movs	r1, #0
 800e672:	2001      	movs	r0, #1
 800e674:	f011 fc90 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800e678:	4b11      	ldr	r3, [pc, #68]	; (800e6c0 <SendTxData+0x3ac>)
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10f      	bne.n	800e6a0 <SendTxData+0x38c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800e680:	4810      	ldr	r0, [pc, #64]	; (800e6c4 <SendTxData+0x3b0>)
 800e682:	f011 fa7f 	bl	801fb84 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800e686:	4b10      	ldr	r3, [pc, #64]	; (800e6c8 <SendTxData+0x3b4>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68c:	4293      	cmp	r3, r2
 800e68e:	bf38      	it	cc
 800e690:	4613      	movcc	r3, r2
 800e692:	4619      	mov	r1, r3
 800e694:	480b      	ldr	r0, [pc, #44]	; (800e6c4 <SendTxData+0x3b0>)
 800e696:	f011 fae5 	bl	801fc64 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800e69a:	480a      	ldr	r0, [pc, #40]	; (800e6c4 <SendTxData+0x3b0>)
 800e69c:	f011 fa04 	bl	801faa8 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800e6a0:	bf00      	nop
 800e6a2:	3744      	adds	r7, #68	; 0x44
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd90      	pop	{r4, r7, pc}
 800e6a8:	2000008c 	.word	0x2000008c
 800e6ac:	200006fc 	.word	0x200006fc
 800e6b0:	20000070 	.word	0x20000070
 800e6b4:	0802118c 	.word	0x0802118c
 800e6b8:	10624dd3 	.word	0x10624dd3
 800e6bc:	0802119c 	.word	0x0802119c
 800e6c0:	200005a4 	.word	0x200005a4
 800e6c4:	200005a8 	.word	0x200005a8
 800e6c8:	20000088 	.word	0x20000088

0800e6cc <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */
	APP_LOG(TS_ON, VLEVEL_M, "starting TX timer\r\n");
 800e6d4:	4b08      	ldr	r3, [pc, #32]	; (800e6f8 <OnTxTimerEvent+0x2c>)
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	2100      	movs	r1, #0
 800e6da:	2002      	movs	r0, #2
 800e6dc:	f011 fc5c 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	2002      	movs	r0, #2
 800e6e4:	f011 f908 	bl	801f8f8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800e6e8:	4804      	ldr	r0, [pc, #16]	; (800e6fc <OnTxTimerEvent+0x30>)
 800e6ea:	f011 f9dd 	bl	801faa8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	080211bc 	.word	0x080211bc
 800e6fc:	200005a8 	.word	0x200005a8

0800e700 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{ }
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	bf00      	nop
 800e70a:	370c      	adds	r7, #12
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bc80      	pop	{r7}
 800e710:	4770      	bx	lr

0800e712 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{ }
 800e712:	b480      	push	{r7}
 800e714:	b083      	sub	sp, #12
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	bf00      	nop
 800e71c:	370c      	adds	r7, #12
 800e71e:	46bd      	mov	sp, r7
 800e720:	bc80      	pop	{r7}
 800e722:	4770      	bx	lr

0800e724 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{ }
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	bc80      	pop	{r7}
 800e734:	4770      	bx	lr
	...

0800e738 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af04      	add	r7, sp, #16
 800e73e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d041      	beq.n	800e7ca <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d03d      	beq.n	800e7ca <OnTxData+0x92>
    {
      UTIL_TIMER_Start(&TxLedTimer);
 800e74e:	4821      	ldr	r0, [pc, #132]	; (800e7d4 <OnTxData+0x9c>)
 800e750:	f011 f9aa 	bl	801faa8 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800e754:	4b20      	ldr	r3, [pc, #128]	; (800e7d8 <OnTxData+0xa0>)
 800e756:	2200      	movs	r2, #0
 800e758:	2100      	movs	r1, #0
 800e75a:	2002      	movs	r0, #2
 800e75c:	f011 fc1c 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	7c12      	ldrb	r2, [r2, #16]
 800e768:	4611      	mov	r1, r2
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800e770:	4610      	mov	r0, r2
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800e778:	9203      	str	r2, [sp, #12]
 800e77a:	9002      	str	r0, [sp, #8]
 800e77c:	9101      	str	r1, [sp, #4]
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	4b16      	ldr	r3, [pc, #88]	; (800e7dc <OnTxData+0xa4>)
 800e782:	2200      	movs	r2, #0
 800e784:	2100      	movs	r1, #0
 800e786:	2002      	movs	r0, #2
 800e788:	f011 fc06 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_M, " | MSG TYPE:");
 800e78c:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <OnTxData+0xa8>)
 800e78e:	2200      	movs	r2, #0
 800e790:	2100      	movs	r1, #0
 800e792:	2002      	movs	r0, #2
 800e794:	f011 fc00 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	7a1b      	ldrb	r3, [r3, #8]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d10e      	bne.n	800e7be <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7a5b      	ldrb	r3, [r3, #9]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <OnTxData+0x74>
 800e7a8:	4b0e      	ldr	r3, [pc, #56]	; (800e7e4 <OnTxData+0xac>)
 800e7aa:	e000      	b.n	800e7ae <OnTxData+0x76>
 800e7ac:	4b0e      	ldr	r3, [pc, #56]	; (800e7e8 <OnTxData+0xb0>)
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	4b0e      	ldr	r3, [pc, #56]	; (800e7ec <OnTxData+0xb4>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	2002      	movs	r0, #2
 800e7b8:	f011 fbee 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800e7bc:	e005      	b.n	800e7ca <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
 800e7be:	4b0c      	ldr	r3, [pc, #48]	; (800e7f0 <OnTxData+0xb8>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	2002      	movs	r0, #2
 800e7c6:	f011 fbe7 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	200006cc 	.word	0x200006cc
 800e7d8:	080211d0 	.word	0x080211d0
 800e7dc:	08021204 	.word	0x08021204
 800e7e0:	08021238 	.word	0x08021238
 800e7e4:	08021248 	.word	0x08021248
 800e7e8:	0802124c 	.word	0x0802124c
 800e7ec:	08021254 	.word	0x08021254
 800e7f0:	08021268 	.word	0x08021268

0800e7f4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d039      	beq.n	800e876 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d11e      	bne.n	800e84a <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800e80c:	2100      	movs	r1, #0
 800e80e:	2004      	movs	r0, #4
 800e810:	f011 f872 	bl	801f8f8 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800e814:	481a      	ldr	r0, [pc, #104]	; (800e880 <OnJoinRequest+0x8c>)
 800e816:	f011 f9b5 	bl	801fb84 <UTIL_TIMER_Stop>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800e81a:	4b1a      	ldr	r3, [pc, #104]	; (800e884 <OnJoinRequest+0x90>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	2100      	movs	r1, #0
 800e820:	2002      	movs	r0, #2
 800e822:	f011 fbb9 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	79db      	ldrb	r3, [r3, #7]
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d106      	bne.n	800e83c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800e82e:	4b16      	ldr	r3, [pc, #88]	; (800e888 <OnJoinRequest+0x94>)
 800e830:	2200      	movs	r2, #0
 800e832:	2100      	movs	r1, #0
 800e834:	2002      	movs	r0, #2
 800e836:	f011 fbaf 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800e83a:	e01c      	b.n	800e876 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800e83c:	4b13      	ldr	r3, [pc, #76]	; (800e88c <OnJoinRequest+0x98>)
 800e83e:	2200      	movs	r2, #0
 800e840:	2100      	movs	r1, #0
 800e842:	2002      	movs	r0, #2
 800e844:	f011 fba8 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 800e848:	e015      	b.n	800e876 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800e84a:	4b11      	ldr	r3, [pc, #68]	; (800e890 <OnJoinRequest+0x9c>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	2100      	movs	r1, #0
 800e850:	2002      	movs	r0, #2
 800e852:	f011 fba1 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	79db      	ldrb	r3, [r3, #7]
 800e85a:	2b02      	cmp	r3, #2
 800e85c:	d10b      	bne.n	800e876 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800e85e:	4b0d      	ldr	r3, [pc, #52]	; (800e894 <OnJoinRequest+0xa0>)
 800e860:	2200      	movs	r2, #0
 800e862:	2100      	movs	r1, #0
 800e864:	2002      	movs	r0, #2
 800e866:	f011 fb97 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800e86a:	4b0b      	ldr	r3, [pc, #44]	; (800e898 <OnJoinRequest+0xa4>)
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	2101      	movs	r1, #1
 800e870:	4618      	mov	r0, r3
 800e872:	f002 f88f 	bl	8010994 <LmHandlerJoin>
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	200006fc 	.word	0x200006fc
 800e884:	08021278 	.word	0x08021278
 800e888:	08021290 	.word	0x08021290
 800e88c:	080212b0 	.word	0x080212b0
 800e890:	080212d0 	.word	0x080212d0
 800e894:	080212ec 	.word	0x080212ec
 800e898:	20000020 	.word	0x20000020

0800e89c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800e89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e89e:	b093      	sub	sp, #76	; 0x4c
 800e8a0:	af0c      	add	r7, sp, #48	; 0x30
 800e8a2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d056      	beq.n	800e958 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	785b      	ldrb	r3, [r3, #1]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d008      	beq.n	800e8c4 <OnBeaconStatusChange+0x28>
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d049      	beq.n	800e94a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800e8b6:	4b2a      	ldr	r3, [pc, #168]	; (800e960 <OnBeaconStatusChange+0xc4>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	2002      	movs	r0, #2
 800e8be:	f011 fb6b 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e8c2:	e049      	b.n	800e958 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	7c1b      	ldrb	r3, [r3, #16]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e8d0:	461c      	mov	r4, r3
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800e8d8:	461d      	mov	r5, r3
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	697a      	ldr	r2, [r7, #20]
 800e8e0:	6852      	ldr	r2, [r2, #4]
 800e8e2:	6979      	ldr	r1, [r7, #20]
 800e8e4:	7d89      	ldrb	r1, [r1, #22]
 800e8e6:	460e      	mov	r6, r1
 800e8e8:	6979      	ldr	r1, [r7, #20]
 800e8ea:	7dc9      	ldrb	r1, [r1, #23]
 800e8ec:	6139      	str	r1, [r7, #16]
 800e8ee:	6979      	ldr	r1, [r7, #20]
 800e8f0:	7e09      	ldrb	r1, [r1, #24]
 800e8f2:	60f9      	str	r1, [r7, #12]
 800e8f4:	6979      	ldr	r1, [r7, #20]
 800e8f6:	7e49      	ldrb	r1, [r1, #25]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	6979      	ldr	r1, [r7, #20]
 800e8fc:	7e89      	ldrb	r1, [r1, #26]
 800e8fe:	6079      	str	r1, [r7, #4]
 800e900:	6979      	ldr	r1, [r7, #20]
 800e902:	7ec9      	ldrb	r1, [r1, #27]
 800e904:	6039      	str	r1, [r7, #0]
 800e906:	6979      	ldr	r1, [r7, #20]
 800e908:	7f09      	ldrb	r1, [r1, #28]
 800e90a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e90c:	f8d7 c000 	ldr.w	ip, [r7]
 800e910:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800e914:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800e918:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e91c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800e920:	f8cd c020 	str.w	ip, [sp, #32]
 800e924:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800e928:	f8cd c01c 	str.w	ip, [sp, #28]
 800e92c:	6939      	ldr	r1, [r7, #16]
 800e92e:	9106      	str	r1, [sp, #24]
 800e930:	9605      	str	r6, [sp, #20]
 800e932:	9204      	str	r2, [sp, #16]
 800e934:	9303      	str	r3, [sp, #12]
 800e936:	9502      	str	r5, [sp, #8]
 800e938:	9401      	str	r4, [sp, #4]
 800e93a:	9000      	str	r0, [sp, #0]
 800e93c:	4b09      	ldr	r3, [pc, #36]	; (800e964 <OnBeaconStatusChange+0xc8>)
 800e93e:	2200      	movs	r2, #0
 800e940:	2100      	movs	r1, #0
 800e942:	2002      	movs	r0, #2
 800e944:	f011 fb28 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800e948:	e006      	b.n	800e958 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800e94a:	4b07      	ldr	r3, [pc, #28]	; (800e968 <OnBeaconStatusChange+0xcc>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	2002      	movs	r0, #2
 800e952:	f011 fb21 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e956:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800e958:	bf00      	nop
 800e95a:	371c      	adds	r7, #28
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e960:	08021310 	.word	0x08021310
 800e964:	08021328 	.word	0x08021328
 800e968:	0802139c 	.word	0x0802139c

0800e96c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800e970:	bf00      	nop
 800e972:	46bd      	mov	sp, r7
 800e974:	bc80      	pop	{r7}
 800e976:	4770      	bx	lr

0800e978 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	4603      	mov	r3, r0
 800e980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e982:	79fb      	ldrb	r3, [r7, #7]
 800e984:	4a06      	ldr	r2, [pc, #24]	; (800e9a0 <OnClassChange+0x28>)
 800e986:	5cd3      	ldrb	r3, [r2, r3]
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <OnClassChange+0x2c>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	2100      	movs	r1, #0
 800e990:	2002      	movs	r0, #2
 800e992:	f011 fb01 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800e996:	bf00      	nop
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	080213d8 	.word	0x080213d8
 800e9a4:	080213bc 	.word	0x080213bc

0800e9a8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	2001      	movs	r0, #1
 800e9b0:	f010 ffa2 	bl	801f8f8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800e9b4:	bf00      	nop
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800e9c0:	4a0d      	ldr	r2, [pc, #52]	; (800e9f8 <OnTxPeriodicityChanged+0x40>)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800e9c6:	4b0c      	ldr	r3, [pc, #48]	; (800e9f8 <OnTxPeriodicityChanged+0x40>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d103      	bne.n	800e9d6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800e9ce:	4b0a      	ldr	r3, [pc, #40]	; (800e9f8 <OnTxPeriodicityChanged+0x40>)
 800e9d0:	f242 7210 	movw	r2, #10000	; 0x2710
 800e9d4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800e9d6:	4809      	ldr	r0, [pc, #36]	; (800e9fc <OnTxPeriodicityChanged+0x44>)
 800e9d8:	f011 f8d4 	bl	801fb84 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800e9dc:	4b06      	ldr	r3, [pc, #24]	; (800e9f8 <OnTxPeriodicityChanged+0x40>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4806      	ldr	r0, [pc, #24]	; (800e9fc <OnTxPeriodicityChanged+0x44>)
 800e9e4:	f011 f93e 	bl	801fc64 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800e9e8:	4804      	ldr	r0, [pc, #16]	; (800e9fc <OnTxPeriodicityChanged+0x44>)
 800e9ea:	f011 f85d 	bl	801faa8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800e9ee:	bf00      	nop
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20000088 	.word	0x20000088
 800e9fc:	200005a8 	.word	0x200005a8

0800ea00 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ea0a:	4a04      	ldr	r2, [pc, #16]	; (800ea1c <OnTxFrameCtrlChanged+0x1c>)
 800ea0c:	79fb      	ldrb	r3, [r7, #7]
 800ea0e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bc80      	pop	{r7}
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	20000070 	.word	0x20000070

0800ea20 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	4603      	mov	r3, r0
 800ea28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ea2a:	4a04      	ldr	r2, [pc, #16]	; (800ea3c <OnPingSlotPeriodicityChanged+0x1c>)
 800ea2c:	79fb      	ldrb	r3, [r7, #7]
 800ea2e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ea30:	bf00      	nop
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bc80      	pop	{r7}
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	20000070 	.word	0x20000070

0800ea40 <OnSystemReset>:

static void OnSystemReset(void)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ea44:	f002 fd9f 	bl	8011586 <LmHandlerHalt>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d106      	bne.n	800ea5c <OnSystemReset+0x1c>
 800ea4e:	f002 f843 	bl	8010ad8 <LmHandlerJoinStatus>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d101      	bne.n	800ea5c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ea58:	f7ff fa7c 	bl	800df54 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ea5c:	bf00      	nop
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <StopJoin>:

static void StopJoin(void)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ea64:	4817      	ldr	r0, [pc, #92]	; (800eac4 <StopJoin+0x64>)
 800ea66:	f011 f88d 	bl	801fb84 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800ea6a:	f002 fd7f 	bl	801156c <LmHandlerStop>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d006      	beq.n	800ea82 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ea74:	4b14      	ldr	r3, [pc, #80]	; (800eac8 <StopJoin+0x68>)
 800ea76:	2200      	movs	r2, #0
 800ea78:	2100      	movs	r1, #0
 800ea7a:	2002      	movs	r0, #2
 800ea7c:	f011 fa8c 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
 800ea80:	e01a      	b.n	800eab8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ea82:	4b12      	ldr	r3, [pc, #72]	; (800eacc <StopJoin+0x6c>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	2100      	movs	r1, #0
 800ea88:	2002      	movs	r0, #2
 800ea8a:	f011 fa85 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ea8e:	4b10      	ldr	r3, [pc, #64]	; (800ead0 <StopJoin+0x70>)
 800ea90:	2201      	movs	r2, #1
 800ea92:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ea94:	4b0f      	ldr	r3, [pc, #60]	; (800ead4 <StopJoin+0x74>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	2100      	movs	r1, #0
 800ea9a:	2002      	movs	r0, #2
 800ea9c:	f011 fa7c 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800eaa0:	480d      	ldr	r0, [pc, #52]	; (800ead8 <StopJoin+0x78>)
 800eaa2:	f001 fe1f 	bl	80106e4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800eaa6:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <StopJoin+0x70>)
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	2101      	movs	r1, #1
 800eaac:	4618      	mov	r0, r3
 800eaae:	f001 ff71 	bl	8010994 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800eab2:	4804      	ldr	r0, [pc, #16]	; (800eac4 <StopJoin+0x64>)
 800eab4:	f010 fff8 	bl	801faa8 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800eab8:	4808      	ldr	r0, [pc, #32]	; (800eadc <StopJoin+0x7c>)
 800eaba:	f010 fff5 	bl	801faa8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800eabe:	bf00      	nop
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	200005a8 	.word	0x200005a8
 800eac8:	080213dc 	.word	0x080213dc
 800eacc:	080213fc 	.word	0x080213fc
 800ead0:	20000020 	.word	0x20000020
 800ead4:	08021410 	.word	0x08021410
 800ead8:	20000070 	.word	0x20000070
 800eadc:	200005c0 	.word	0x200005c0

0800eae0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800eae8:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <OnStopJoinTimerEvent+0x20>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	d103      	bne.n	800eaf8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	2008      	movs	r0, #8
 800eaf4:	f010 ff00 	bl	801f8f8 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	20000020 	.word	0x20000020

0800eb04 <StoreContext>:

static void StoreContext(void)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800eb0a:	23ff      	movs	r3, #255	; 0xff
 800eb0c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800eb0e:	f002 fd6f 	bl	80115f0 <LmHandlerNvmDataStore>
 800eb12:	4603      	mov	r3, r0
 800eb14:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800eb16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb1a:	f113 0f08 	cmn.w	r3, #8
 800eb1e:	d106      	bne.n	800eb2e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800eb20:	4b0a      	ldr	r3, [pc, #40]	; (800eb4c <StoreContext+0x48>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	2100      	movs	r1, #0
 800eb26:	2002      	movs	r0, #2
 800eb28:	f011 fa36 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800eb2c:	e00a      	b.n	800eb44 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800eb2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb36:	d105      	bne.n	800eb44 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800eb38:	4b05      	ldr	r3, [pc, #20]	; (800eb50 <StoreContext+0x4c>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	2002      	movs	r0, #2
 800eb40:	f011 fa2a 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	08021430 	.word	0x08021430
 800eb50:	08021448 	.word	0x08021448

0800eb54 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800eb5e:	79fb      	ldrb	r3, [r7, #7]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d106      	bne.n	800eb72 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800eb64:	4b08      	ldr	r3, [pc, #32]	; (800eb88 <OnNvmDataChange+0x34>)
 800eb66:	2200      	movs	r2, #0
 800eb68:	2100      	movs	r1, #0
 800eb6a:	2002      	movs	r0, #2
 800eb6c:	f011 fa14 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800eb70:	e005      	b.n	800eb7e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800eb72:	4b06      	ldr	r3, [pc, #24]	; (800eb8c <OnNvmDataChange+0x38>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	2100      	movs	r1, #0
 800eb78:	2002      	movs	r0, #2
 800eb7a:	f011 fa0d 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb7e:	bf00      	nop
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	08021460 	.word	0x08021460
 800eb8c:	08021474 	.word	0x08021474

0800eb90 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800eb9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eb9e:	4807      	ldr	r0, [pc, #28]	; (800ebbc <OnStoreContextRequest+0x2c>)
 800eba0:	f7f2 fe10 	bl	80017c4 <FLASH_IF_Erase>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d104      	bne.n	800ebb4 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	6879      	ldr	r1, [r7, #4]
 800ebae:	4803      	ldr	r0, [pc, #12]	; (800ebbc <OnStoreContextRequest+0x2c>)
 800ebb0:	f7f2 fdb8 	bl	8001724 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ebb4:	bf00      	nop
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	0803f000 	.word	0x0803f000

0800ebc0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	4903      	ldr	r1, [pc, #12]	; (800ebdc <OnRestoreContextRequest+0x1c>)
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7f2 fdd0 	bl	8001774 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ebd4:	bf00      	nop
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	0803f000 	.word	0x0803f000

0800ebe0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800ebe4:	4b15      	ldr	r3, [pc, #84]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ebea:	4b14      	ldr	r3, [pc, #80]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ebf0:	4b12      	ldr	r3, [pc, #72]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ebf6:	4b11      	ldr	r3, [pc, #68]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800ebfc:	4b0f      	ldr	r3, [pc, #60]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec04:	4a0d      	ldr	r2, [pc, #52]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ec06:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ec08:	4b0c      	ldr	r3, [pc, #48]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d10c      	bne.n	800ec2a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ec10:	4b0b      	ldr	r3, [pc, #44]	; (800ec40 <LoraInfo_Init+0x60>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	2100      	movs	r1, #0
 800ec16:	2000      	movs	r0, #0
 800ec18:	f011 f9be 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ec1c:	bf00      	nop
 800ec1e:	f011 f9a9 	bl	801ff74 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d1fa      	bne.n	800ec1e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ec28:	e7fe      	b.n	800ec28 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ec2a:	4b04      	ldr	r3, [pc, #16]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800ec30:	4b02      	ldr	r3, [pc, #8]	; (800ec3c <LoraInfo_Init+0x5c>)
 800ec32:	2201      	movs	r2, #1
 800ec34:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ec36:	bf00      	nop
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	20000714 	.word	0x20000714
 800ec40:	08021488 	.word	0x08021488

0800ec44 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ec44:	b480      	push	{r7}
 800ec46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ec48:	4b02      	ldr	r3, [pc, #8]	; (800ec54 <LoraInfo_GetPtr+0x10>)
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bc80      	pop	{r7}
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	20000714 	.word	0x20000714

0800ec58 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ec5c:	f7f6 fc1e 	bl	800549c <BSP_RADIO_Init>
 800ec60:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b082      	sub	sp, #8
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ec70:	79fb      	ldrb	r3, [r7, #7]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7f6 fc44 	bl	8005500 <BSP_RADIO_ConfigRFSwitch>
 800ec78:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ec86:	f7f6 fc89 	bl	800559c <BSP_RADIO_GetTxConfig>
 800ec8a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ec94:	f7f6 fc89 	bl	80055aa <BSP_RADIO_IsTCXO>
 800ec98:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800eca2:	f7f6 fc89 	bl	80055b8 <BSP_RADIO_IsDCDC>
 800eca6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7f6 fc84 	bl	80055c6 <BSP_RADIO_GetRFOMaxPowerConfig>
 800ecbe:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	33f1      	adds	r3, #241	; 0xf1
 800ecd4:	2210      	movs	r2, #16
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f00c fdd3 	bl	801b884 <memset1>
    ctx->M_n = 0;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	22f0      	movs	r2, #240	; 0xf0
 800ecea:	2100      	movs	r1, #0
 800ecec:	4618      	mov	r0, r3
 800ecee:	f00c fdc9 	bl	801b884 <memset1>
}
 800ecf2:	bf00      	nop
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b082      	sub	sp, #8
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	461a      	mov	r2, r3
 800ed08:	2110      	movs	r1, #16
 800ed0a:	6838      	ldr	r0, [r7, #0]
 800ed0c:	f000 fe5c 	bl	800f9c8 <lorawan_aes_set_key>
}
 800ed10:	bf00      	nop
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08c      	sub	sp, #48	; 0x30
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f000 80a1 	beq.w	800ee72 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed36:	f1c3 0310 	rsb	r3, r3, #16
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	bf28      	it	cs
 800ed40:	4613      	movcs	r3, r2
 800ed42:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed50:	4413      	add	r3, r2
 800ed52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed54:	b292      	uxth	r2, r2
 800ed56:	68b9      	ldr	r1, [r7, #8]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f00c fd58 	bl	801b80e <memcpy1>
        ctx->M_n += mlen;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	441a      	add	r2, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed74:	2b0f      	cmp	r3, #15
 800ed76:	f240 808d 	bls.w	800ee94 <AES_CMAC_Update+0x17c>
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	f000 8088 	beq.w	800ee94 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ed84:	2300      	movs	r3, #0
 800ed86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed88:	e015      	b.n	800edb6 <AES_CMAC_Update+0x9e>
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	4413      	add	r3, r2
 800ed90:	33f1      	adds	r3, #241	; 0xf1
 800ed92:	781a      	ldrb	r2, [r3, #0]
 800ed94:	68f9      	ldr	r1, [r7, #12]
 800ed96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed98:	440b      	add	r3, r1
 800ed9a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	4053      	eors	r3, r2
 800eda2:	b2d9      	uxtb	r1, r3
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	4413      	add	r3, r2
 800edaa:	33f1      	adds	r3, #241	; 0xf1
 800edac:	460a      	mov	r2, r1
 800edae:	701a      	strb	r2, [r3, #0]
 800edb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb2:	3301      	adds	r3, #1
 800edb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb8:	2b0f      	cmp	r3, #15
 800edba:	dde6      	ble.n	800ed8a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800edc2:	f107 0314 	add.w	r3, r7, #20
 800edc6:	2210      	movs	r2, #16
 800edc8:	4618      	mov	r0, r3
 800edca:	f00c fd20 	bl	801b80e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	f107 0114 	add.w	r1, r7, #20
 800edd4:	f107 0314 	add.w	r3, r7, #20
 800edd8:	4618      	mov	r0, r3
 800edda:	f000 fed3 	bl	800fb84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	33f1      	adds	r3, #241	; 0xf1
 800ede2:	f107 0114 	add.w	r1, r7, #20
 800ede6:	2210      	movs	r2, #16
 800ede8:	4618      	mov	r0, r3
 800edea:	f00c fd10 	bl	801b80e <memcpy1>

        data += mlen;
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	4413      	add	r3, r2
 800edf4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800edfe:	e038      	b.n	800ee72 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ee00:	2300      	movs	r3, #0
 800ee02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee04:	e013      	b.n	800ee2e <AES_CMAC_Update+0x116>
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	4413      	add	r3, r2
 800ee0c:	33f1      	adds	r3, #241	; 0xf1
 800ee0e:	781a      	ldrb	r2, [r3, #0]
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	68b9      	ldr	r1, [r7, #8]
 800ee14:	440b      	add	r3, r1
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	4053      	eors	r3, r2
 800ee1a:	b2d9      	uxtb	r1, r3
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	4413      	add	r3, r2
 800ee22:	33f1      	adds	r3, #241	; 0xf1
 800ee24:	460a      	mov	r2, r1
 800ee26:	701a      	strb	r2, [r3, #0]
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee30:	2b0f      	cmp	r3, #15
 800ee32:	dde8      	ble.n	800ee06 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ee3a:	f107 0314 	add.w	r3, r7, #20
 800ee3e:	2210      	movs	r2, #16
 800ee40:	4618      	mov	r0, r3
 800ee42:	f00c fce4 	bl	801b80e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	f107 0114 	add.w	r1, r7, #20
 800ee4c:	f107 0314 	add.w	r3, r7, #20
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 fe97 	bl	800fb84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	33f1      	adds	r3, #241	; 0xf1
 800ee5a:	f107 0114 	add.w	r1, r7, #20
 800ee5e:	2210      	movs	r2, #16
 800ee60:	4618      	mov	r0, r3
 800ee62:	f00c fcd4 	bl	801b80e <memcpy1>

        data += 16;
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	3310      	adds	r3, #16
 800ee6a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	3b10      	subs	r3, #16
 800ee70:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2b10      	cmp	r3, #16
 800ee76:	d8c3      	bhi.n	800ee00 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	b292      	uxth	r2, r2
 800ee82:	68b9      	ldr	r1, [r7, #8]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f00c fcc2 	bl	801b80e <memcpy1>
    ctx->M_n = len;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ee92:	e000      	b.n	800ee96 <AES_CMAC_Update+0x17e>
            return;
 800ee94:	bf00      	nop
}
 800ee96:	3730      	adds	r7, #48	; 0x30
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b092      	sub	sp, #72	; 0x48
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800eea6:	f107 031c 	add.w	r3, r7, #28
 800eeaa:	2210      	movs	r2, #16
 800eeac:	2100      	movs	r1, #0
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f00c fce8 	bl	801b884 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800eeb4:	683a      	ldr	r2, [r7, #0]
 800eeb6:	f107 011c 	add.w	r1, r7, #28
 800eeba:	f107 031c 	add.w	r3, r7, #28
 800eebe:	4618      	mov	r0, r3
 800eec0:	f000 fe60 	bl	800fb84 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800eec4:	7f3b      	ldrb	r3, [r7, #28]
 800eec6:	b25b      	sxtb	r3, r3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	da30      	bge.n	800ef2e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800eecc:	2300      	movs	r3, #0
 800eece:	647b      	str	r3, [r7, #68]	; 0x44
 800eed0:	e01b      	b.n	800ef0a <AES_CMAC_Final+0x6e>
 800eed2:	f107 021c 	add.w	r2, r7, #28
 800eed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eed8:	4413      	add	r3, r2
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	005b      	lsls	r3, r3, #1
 800eede:	b25a      	sxtb	r2, r3
 800eee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eee2:	3301      	adds	r3, #1
 800eee4:	3348      	adds	r3, #72	; 0x48
 800eee6:	443b      	add	r3, r7
 800eee8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800eeec:	09db      	lsrs	r3, r3, #7
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	b25b      	sxtb	r3, r3
 800eef2:	4313      	orrs	r3, r2
 800eef4:	b25b      	sxtb	r3, r3
 800eef6:	b2d9      	uxtb	r1, r3
 800eef8:	f107 021c 	add.w	r2, r7, #28
 800eefc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eefe:	4413      	add	r3, r2
 800ef00:	460a      	mov	r2, r1
 800ef02:	701a      	strb	r2, [r3, #0]
 800ef04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef06:	3301      	adds	r3, #1
 800ef08:	647b      	str	r3, [r7, #68]	; 0x44
 800ef0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef0c:	2b0e      	cmp	r3, #14
 800ef0e:	dde0      	ble.n	800eed2 <AES_CMAC_Final+0x36>
 800ef10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef14:	005b      	lsls	r3, r3, #1
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ef1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef20:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ef24:	43db      	mvns	r3, r3
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef2c:	e027      	b.n	800ef7e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800ef2e:	2300      	movs	r3, #0
 800ef30:	643b      	str	r3, [r7, #64]	; 0x40
 800ef32:	e01b      	b.n	800ef6c <AES_CMAC_Final+0xd0>
 800ef34:	f107 021c 	add.w	r2, r7, #28
 800ef38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef3a:	4413      	add	r3, r2
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	005b      	lsls	r3, r3, #1
 800ef40:	b25a      	sxtb	r2, r3
 800ef42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef44:	3301      	adds	r3, #1
 800ef46:	3348      	adds	r3, #72	; 0x48
 800ef48:	443b      	add	r3, r7
 800ef4a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ef4e:	09db      	lsrs	r3, r3, #7
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	b25b      	sxtb	r3, r3
 800ef54:	4313      	orrs	r3, r2
 800ef56:	b25b      	sxtb	r3, r3
 800ef58:	b2d9      	uxtb	r1, r3
 800ef5a:	f107 021c 	add.w	r2, r7, #28
 800ef5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef60:	4413      	add	r3, r2
 800ef62:	460a      	mov	r2, r1
 800ef64:	701a      	strb	r2, [r3, #0]
 800ef66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef68:	3301      	adds	r3, #1
 800ef6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ef6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef6e:	2b0e      	cmp	r3, #14
 800ef70:	dde0      	ble.n	800ef34 <AES_CMAC_Final+0x98>
 800ef72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ef84:	2b10      	cmp	r3, #16
 800ef86:	d11d      	bne.n	800efc4 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ef88:	2300      	movs	r3, #0
 800ef8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef8c:	e016      	b.n	800efbc <AES_CMAC_Final+0x120>
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef92:	4413      	add	r3, r2
 800ef94:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ef98:	781a      	ldrb	r2, [r3, #0]
 800ef9a:	f107 011c 	add.w	r1, r7, #28
 800ef9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa0:	440b      	add	r3, r1
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	4053      	eors	r3, r2
 800efa6:	b2d9      	uxtb	r1, r3
 800efa8:	683a      	ldr	r2, [r7, #0]
 800efaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efac:	4413      	add	r3, r2
 800efae:	f203 1301 	addw	r3, r3, #257	; 0x101
 800efb2:	460a      	mov	r2, r1
 800efb4:	701a      	strb	r2, [r3, #0]
 800efb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb8:	3301      	adds	r3, #1
 800efba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efbe:	2b0f      	cmp	r3, #15
 800efc0:	dde5      	ble.n	800ef8e <AES_CMAC_Final+0xf2>
 800efc2:	e096      	b.n	800f0f2 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800efc4:	7f3b      	ldrb	r3, [r7, #28]
 800efc6:	b25b      	sxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	da30      	bge.n	800f02e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800efcc:	2300      	movs	r3, #0
 800efce:	63bb      	str	r3, [r7, #56]	; 0x38
 800efd0:	e01b      	b.n	800f00a <AES_CMAC_Final+0x16e>
 800efd2:	f107 021c 	add.w	r2, r7, #28
 800efd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd8:	4413      	add	r3, r2
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	b25a      	sxtb	r2, r3
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	3301      	adds	r3, #1
 800efe4:	3348      	adds	r3, #72	; 0x48
 800efe6:	443b      	add	r3, r7
 800efe8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800efec:	09db      	lsrs	r3, r3, #7
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	b25b      	sxtb	r3, r3
 800eff2:	4313      	orrs	r3, r2
 800eff4:	b25b      	sxtb	r3, r3
 800eff6:	b2d9      	uxtb	r1, r3
 800eff8:	f107 021c 	add.w	r2, r7, #28
 800effc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effe:	4413      	add	r3, r2
 800f000:	460a      	mov	r2, r1
 800f002:	701a      	strb	r2, [r3, #0]
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	3301      	adds	r3, #1
 800f008:	63bb      	str	r3, [r7, #56]	; 0x38
 800f00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00c:	2b0e      	cmp	r3, #14
 800f00e:	dde0      	ble.n	800efd2 <AES_CMAC_Final+0x136>
 800f010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	b2db      	uxtb	r3, r3
 800f018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800f01c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f020:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800f024:	43db      	mvns	r3, r3
 800f026:	b2db      	uxtb	r3, r3
 800f028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f02c:	e027      	b.n	800f07e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800f02e:	2300      	movs	r3, #0
 800f030:	637b      	str	r3, [r7, #52]	; 0x34
 800f032:	e01b      	b.n	800f06c <AES_CMAC_Final+0x1d0>
 800f034:	f107 021c 	add.w	r2, r7, #28
 800f038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03a:	4413      	add	r3, r2
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	005b      	lsls	r3, r3, #1
 800f040:	b25a      	sxtb	r2, r3
 800f042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f044:	3301      	adds	r3, #1
 800f046:	3348      	adds	r3, #72	; 0x48
 800f048:	443b      	add	r3, r7
 800f04a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f04e:	09db      	lsrs	r3, r3, #7
 800f050:	b2db      	uxtb	r3, r3
 800f052:	b25b      	sxtb	r3, r3
 800f054:	4313      	orrs	r3, r2
 800f056:	b25b      	sxtb	r3, r3
 800f058:	b2d9      	uxtb	r1, r3
 800f05a:	f107 021c 	add.w	r2, r7, #28
 800f05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f060:	4413      	add	r3, r2
 800f062:	460a      	mov	r2, r1
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f068:	3301      	adds	r3, #1
 800f06a:	637b      	str	r3, [r7, #52]	; 0x34
 800f06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f06e:	2b0e      	cmp	r3, #14
 800f070:	dde0      	ble.n	800f034 <AES_CMAC_Final+0x198>
 800f072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f084:	683a      	ldr	r2, [r7, #0]
 800f086:	4413      	add	r3, r2
 800f088:	2280      	movs	r2, #128	; 0x80
 800f08a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f08e:	e007      	b.n	800f0a0 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	4413      	add	r3, r2
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f0b4:	2b0f      	cmp	r3, #15
 800f0b6:	d9eb      	bls.n	800f090 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	633b      	str	r3, [r7, #48]	; 0x30
 800f0bc:	e016      	b.n	800f0ec <AES_CMAC_Final+0x250>
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f0c8:	781a      	ldrb	r2, [r3, #0]
 800f0ca:	f107 011c 	add.w	r1, r7, #28
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d0:	440b      	add	r3, r1
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	4053      	eors	r3, r2
 800f0d6:	b2d9      	uxtb	r1, r3
 800f0d8:	683a      	ldr	r2, [r7, #0]
 800f0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0dc:	4413      	add	r3, r2
 800f0de:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f0e2:	460a      	mov	r2, r1
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	633b      	str	r3, [r7, #48]	; 0x30
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	2b0f      	cmp	r3, #15
 800f0f0:	dde5      	ble.n	800f0be <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0f6:	e015      	b.n	800f124 <AES_CMAC_Final+0x288>
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fc:	4413      	add	r3, r2
 800f0fe:	33f1      	adds	r3, #241	; 0xf1
 800f100:	781a      	ldrb	r2, [r3, #0]
 800f102:	6839      	ldr	r1, [r7, #0]
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	440b      	add	r3, r1
 800f108:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	4053      	eors	r3, r2
 800f110:	b2d9      	uxtb	r1, r3
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	4413      	add	r3, r2
 800f118:	33f1      	adds	r3, #241	; 0xf1
 800f11a:	460a      	mov	r2, r1
 800f11c:	701a      	strb	r2, [r3, #0]
 800f11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f120:	3301      	adds	r3, #1
 800f122:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	2b0f      	cmp	r3, #15
 800f128:	dde6      	ble.n	800f0f8 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800f130:	f107 030c 	add.w	r3, r7, #12
 800f134:	2210      	movs	r2, #16
 800f136:	4618      	mov	r0, r3
 800f138:	f00c fb69 	bl	801b80e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f13c:	683a      	ldr	r2, [r7, #0]
 800f13e:	f107 030c 	add.w	r3, r7, #12
 800f142:	6879      	ldr	r1, [r7, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	f000 fd1d 	bl	800fb84 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f14a:	f107 031c 	add.w	r3, r7, #28
 800f14e:	2210      	movs	r2, #16
 800f150:	2100      	movs	r1, #0
 800f152:	4618      	mov	r0, r3
 800f154:	f00c fb96 	bl	801b884 <memset1>
}
 800f158:	bf00      	nop
 800f15a:	3748      	adds	r7, #72	; 0x48
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	781a      	ldrb	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	3301      	adds	r3, #1
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	7852      	ldrb	r2, [r2, #1]
 800f17a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3302      	adds	r3, #2
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	7892      	ldrb	r2, [r2, #2]
 800f184:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	3303      	adds	r3, #3
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	78d2      	ldrb	r2, [r2, #3]
 800f18e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	3304      	adds	r3, #4
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	7912      	ldrb	r2, [r2, #4]
 800f198:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	3305      	adds	r3, #5
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	7952      	ldrb	r2, [r2, #5]
 800f1a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3306      	adds	r3, #6
 800f1a8:	683a      	ldr	r2, [r7, #0]
 800f1aa:	7992      	ldrb	r2, [r2, #6]
 800f1ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	3307      	adds	r3, #7
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	79d2      	ldrb	r2, [r2, #7]
 800f1b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	7a12      	ldrb	r2, [r2, #8]
 800f1c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3309      	adds	r3, #9
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	7a52      	ldrb	r2, [r2, #9]
 800f1ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	330a      	adds	r3, #10
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	7a92      	ldrb	r2, [r2, #10]
 800f1d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	330b      	adds	r3, #11
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	7ad2      	ldrb	r2, [r2, #11]
 800f1de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	330c      	adds	r3, #12
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	7b12      	ldrb	r2, [r2, #12]
 800f1e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	330d      	adds	r3, #13
 800f1ee:	683a      	ldr	r2, [r7, #0]
 800f1f0:	7b52      	ldrb	r2, [r2, #13]
 800f1f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	330e      	adds	r3, #14
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	7b92      	ldrb	r2, [r2, #14]
 800f1fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	330f      	adds	r3, #15
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	7bd2      	ldrb	r2, [r2, #15]
 800f206:	701a      	strb	r2, [r3, #0]
#endif
}
 800f208:	bf00      	nop
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bc80      	pop	{r7}
 800f210:	4770      	bx	lr

0800f212 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800f212:	b480      	push	{r7}
 800f214:	b085      	sub	sp, #20
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	4613      	mov	r3, r2
 800f21e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800f220:	e007      	b.n	800f232 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	1c53      	adds	r3, r2, #1
 800f226:	60bb      	str	r3, [r7, #8]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	1c59      	adds	r1, r3, #1
 800f22c:	60f9      	str	r1, [r7, #12]
 800f22e:	7812      	ldrb	r2, [r2, #0]
 800f230:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	1e5a      	subs	r2, r3, #1
 800f236:	71fa      	strb	r2, [r7, #7]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1f2      	bne.n	800f222 <copy_block_nn+0x10>
}
 800f23c:	bf00      	nop
 800f23e:	bf00      	nop
 800f240:	3714      	adds	r7, #20
 800f242:	46bd      	mov	sp, r7
 800f244:	bc80      	pop	{r7}
 800f246:	4770      	bx	lr

0800f248 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	781a      	ldrb	r2, [r3, #0]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	4053      	eors	r3, r2
 800f25c:	b2da      	uxtb	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	3301      	adds	r3, #1
 800f266:	7819      	ldrb	r1, [r3, #0]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	3301      	adds	r3, #1
 800f26c:	781a      	ldrb	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	3301      	adds	r3, #1
 800f272:	404a      	eors	r2, r1
 800f274:	b2d2      	uxtb	r2, r2
 800f276:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	3302      	adds	r3, #2
 800f27c:	7819      	ldrb	r1, [r3, #0]
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	3302      	adds	r3, #2
 800f282:	781a      	ldrb	r2, [r3, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3302      	adds	r3, #2
 800f288:	404a      	eors	r2, r1
 800f28a:	b2d2      	uxtb	r2, r2
 800f28c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	3303      	adds	r3, #3
 800f292:	7819      	ldrb	r1, [r3, #0]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	3303      	adds	r3, #3
 800f298:	781a      	ldrb	r2, [r3, #0]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	3303      	adds	r3, #3
 800f29e:	404a      	eors	r2, r1
 800f2a0:	b2d2      	uxtb	r2, r2
 800f2a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	7819      	ldrb	r1, [r3, #0]
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	3304      	adds	r3, #4
 800f2ae:	781a      	ldrb	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	404a      	eors	r2, r1
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	3305      	adds	r3, #5
 800f2be:	7819      	ldrb	r1, [r3, #0]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	3305      	adds	r3, #5
 800f2c4:	781a      	ldrb	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	3305      	adds	r3, #5
 800f2ca:	404a      	eors	r2, r1
 800f2cc:	b2d2      	uxtb	r2, r2
 800f2ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3306      	adds	r3, #6
 800f2d4:	7819      	ldrb	r1, [r3, #0]
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	3306      	adds	r3, #6
 800f2da:	781a      	ldrb	r2, [r3, #0]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3306      	adds	r3, #6
 800f2e0:	404a      	eors	r2, r1
 800f2e2:	b2d2      	uxtb	r2, r2
 800f2e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	3307      	adds	r3, #7
 800f2ea:	7819      	ldrb	r1, [r3, #0]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	3307      	adds	r3, #7
 800f2f0:	781a      	ldrb	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3307      	adds	r3, #7
 800f2f6:	404a      	eors	r2, r1
 800f2f8:	b2d2      	uxtb	r2, r2
 800f2fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	3308      	adds	r3, #8
 800f300:	7819      	ldrb	r1, [r3, #0]
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	3308      	adds	r3, #8
 800f306:	781a      	ldrb	r2, [r3, #0]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3308      	adds	r3, #8
 800f30c:	404a      	eors	r2, r1
 800f30e:	b2d2      	uxtb	r2, r2
 800f310:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	3309      	adds	r3, #9
 800f316:	7819      	ldrb	r1, [r3, #0]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	3309      	adds	r3, #9
 800f31c:	781a      	ldrb	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	3309      	adds	r3, #9
 800f322:	404a      	eors	r2, r1
 800f324:	b2d2      	uxtb	r2, r2
 800f326:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	330a      	adds	r3, #10
 800f32c:	7819      	ldrb	r1, [r3, #0]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	330a      	adds	r3, #10
 800f332:	781a      	ldrb	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	330a      	adds	r3, #10
 800f338:	404a      	eors	r2, r1
 800f33a:	b2d2      	uxtb	r2, r2
 800f33c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	330b      	adds	r3, #11
 800f342:	7819      	ldrb	r1, [r3, #0]
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	330b      	adds	r3, #11
 800f348:	781a      	ldrb	r2, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	330b      	adds	r3, #11
 800f34e:	404a      	eors	r2, r1
 800f350:	b2d2      	uxtb	r2, r2
 800f352:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	330c      	adds	r3, #12
 800f358:	7819      	ldrb	r1, [r3, #0]
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	330c      	adds	r3, #12
 800f35e:	781a      	ldrb	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	330c      	adds	r3, #12
 800f364:	404a      	eors	r2, r1
 800f366:	b2d2      	uxtb	r2, r2
 800f368:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	330d      	adds	r3, #13
 800f36e:	7819      	ldrb	r1, [r3, #0]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	330d      	adds	r3, #13
 800f374:	781a      	ldrb	r2, [r3, #0]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	330d      	adds	r3, #13
 800f37a:	404a      	eors	r2, r1
 800f37c:	b2d2      	uxtb	r2, r2
 800f37e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	330e      	adds	r3, #14
 800f384:	7819      	ldrb	r1, [r3, #0]
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	330e      	adds	r3, #14
 800f38a:	781a      	ldrb	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	330e      	adds	r3, #14
 800f390:	404a      	eors	r2, r1
 800f392:	b2d2      	uxtb	r2, r2
 800f394:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	330f      	adds	r3, #15
 800f39a:	7819      	ldrb	r1, [r3, #0]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	330f      	adds	r3, #15
 800f3a0:	781a      	ldrb	r2, [r3, #0]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	330f      	adds	r3, #15
 800f3a6:	404a      	eors	r2, r1
 800f3a8:	b2d2      	uxtb	r2, r2
 800f3aa:	701a      	strb	r2, [r3, #0]
#endif
}
 800f3ac:	bf00      	nop
 800f3ae:	370c      	adds	r7, #12
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bc80      	pop	{r7}
 800f3b4:	4770      	bx	lr

0800f3b6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800f3b6:	b480      	push	{r7}
 800f3b8:	b085      	sub	sp, #20
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	60f8      	str	r0, [r7, #12]
 800f3be:	60b9      	str	r1, [r7, #8]
 800f3c0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	781a      	ldrb	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	4053      	eors	r3, r2
 800f3cc:	b2da      	uxtb	r2, r3
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	7819      	ldrb	r1, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	781a      	ldrb	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	404a      	eors	r2, r1
 800f3e4:	b2d2      	uxtb	r2, r2
 800f3e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	3302      	adds	r3, #2
 800f3ec:	7819      	ldrb	r1, [r3, #0]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	3302      	adds	r3, #2
 800f3f2:	781a      	ldrb	r2, [r3, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	3302      	adds	r3, #2
 800f3f8:	404a      	eors	r2, r1
 800f3fa:	b2d2      	uxtb	r2, r2
 800f3fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	3303      	adds	r3, #3
 800f402:	7819      	ldrb	r1, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	3303      	adds	r3, #3
 800f408:	781a      	ldrb	r2, [r3, #0]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	3303      	adds	r3, #3
 800f40e:	404a      	eors	r2, r1
 800f410:	b2d2      	uxtb	r2, r2
 800f412:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	3304      	adds	r3, #4
 800f418:	7819      	ldrb	r1, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	3304      	adds	r3, #4
 800f41e:	781a      	ldrb	r2, [r3, #0]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	3304      	adds	r3, #4
 800f424:	404a      	eors	r2, r1
 800f426:	b2d2      	uxtb	r2, r2
 800f428:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	3305      	adds	r3, #5
 800f42e:	7819      	ldrb	r1, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3305      	adds	r3, #5
 800f434:	781a      	ldrb	r2, [r3, #0]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3305      	adds	r3, #5
 800f43a:	404a      	eors	r2, r1
 800f43c:	b2d2      	uxtb	r2, r2
 800f43e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	3306      	adds	r3, #6
 800f444:	7819      	ldrb	r1, [r3, #0]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3306      	adds	r3, #6
 800f44a:	781a      	ldrb	r2, [r3, #0]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	3306      	adds	r3, #6
 800f450:	404a      	eors	r2, r1
 800f452:	b2d2      	uxtb	r2, r2
 800f454:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	3307      	adds	r3, #7
 800f45a:	7819      	ldrb	r1, [r3, #0]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3307      	adds	r3, #7
 800f460:	781a      	ldrb	r2, [r3, #0]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3307      	adds	r3, #7
 800f466:	404a      	eors	r2, r1
 800f468:	b2d2      	uxtb	r2, r2
 800f46a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	3308      	adds	r3, #8
 800f470:	7819      	ldrb	r1, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	3308      	adds	r3, #8
 800f476:	781a      	ldrb	r2, [r3, #0]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	3308      	adds	r3, #8
 800f47c:	404a      	eors	r2, r1
 800f47e:	b2d2      	uxtb	r2, r2
 800f480:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	3309      	adds	r3, #9
 800f486:	7819      	ldrb	r1, [r3, #0]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3309      	adds	r3, #9
 800f48c:	781a      	ldrb	r2, [r3, #0]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	3309      	adds	r3, #9
 800f492:	404a      	eors	r2, r1
 800f494:	b2d2      	uxtb	r2, r2
 800f496:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	330a      	adds	r3, #10
 800f49c:	7819      	ldrb	r1, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	330a      	adds	r3, #10
 800f4a2:	781a      	ldrb	r2, [r3, #0]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	330a      	adds	r3, #10
 800f4a8:	404a      	eors	r2, r1
 800f4aa:	b2d2      	uxtb	r2, r2
 800f4ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	330b      	adds	r3, #11
 800f4b2:	7819      	ldrb	r1, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	330b      	adds	r3, #11
 800f4b8:	781a      	ldrb	r2, [r3, #0]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	330b      	adds	r3, #11
 800f4be:	404a      	eors	r2, r1
 800f4c0:	b2d2      	uxtb	r2, r2
 800f4c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	330c      	adds	r3, #12
 800f4c8:	7819      	ldrb	r1, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	330c      	adds	r3, #12
 800f4ce:	781a      	ldrb	r2, [r3, #0]
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	330c      	adds	r3, #12
 800f4d4:	404a      	eors	r2, r1
 800f4d6:	b2d2      	uxtb	r2, r2
 800f4d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	330d      	adds	r3, #13
 800f4de:	7819      	ldrb	r1, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	330d      	adds	r3, #13
 800f4e4:	781a      	ldrb	r2, [r3, #0]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	330d      	adds	r3, #13
 800f4ea:	404a      	eors	r2, r1
 800f4ec:	b2d2      	uxtb	r2, r2
 800f4ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	330e      	adds	r3, #14
 800f4f4:	7819      	ldrb	r1, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	330e      	adds	r3, #14
 800f4fa:	781a      	ldrb	r2, [r3, #0]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	330e      	adds	r3, #14
 800f500:	404a      	eors	r2, r1
 800f502:	b2d2      	uxtb	r2, r2
 800f504:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	330f      	adds	r3, #15
 800f50a:	7819      	ldrb	r1, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	330f      	adds	r3, #15
 800f510:	781a      	ldrb	r2, [r3, #0]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	330f      	adds	r3, #15
 800f516:	404a      	eors	r2, r1
 800f518:	b2d2      	uxtb	r2, r2
 800f51a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f51c:	bf00      	nop
 800f51e:	3714      	adds	r7, #20
 800f520:	46bd      	mov	sp, r7
 800f522:	bc80      	pop	{r7}
 800f524:	4770      	bx	lr

0800f526 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b082      	sub	sp, #8
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800f530:	6839      	ldr	r1, [r7, #0]
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7ff fe88 	bl	800f248 <xor_block>
}
 800f538:	bf00      	nop
 800f53a:	3708      	adds	r7, #8
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	461a      	mov	r2, r3
 800f54e:	4b48      	ldr	r3, [pc, #288]	; (800f670 <shift_sub_rows+0x130>)
 800f550:	5c9a      	ldrb	r2, [r3, r2]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	701a      	strb	r2, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	3304      	adds	r3, #4
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	4619      	mov	r1, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	3304      	adds	r3, #4
 800f562:	4a43      	ldr	r2, [pc, #268]	; (800f670 <shift_sub_rows+0x130>)
 800f564:	5c52      	ldrb	r2, [r2, r1]
 800f566:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3308      	adds	r3, #8
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	4619      	mov	r1, r3
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3308      	adds	r3, #8
 800f574:	4a3e      	ldr	r2, [pc, #248]	; (800f670 <shift_sub_rows+0x130>)
 800f576:	5c52      	ldrb	r2, [r2, r1]
 800f578:	701a      	strb	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	330c      	adds	r3, #12
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	4619      	mov	r1, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	330c      	adds	r3, #12
 800f586:	4a3a      	ldr	r2, [pc, #232]	; (800f670 <shift_sub_rows+0x130>)
 800f588:	5c52      	ldrb	r2, [r2, r1]
 800f58a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	785b      	ldrb	r3, [r3, #1]
 800f590:	73fb      	strb	r3, [r7, #15]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	3305      	adds	r3, #5
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	4619      	mov	r1, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3301      	adds	r3, #1
 800f59e:	4a34      	ldr	r2, [pc, #208]	; (800f670 <shift_sub_rows+0x130>)
 800f5a0:	5c52      	ldrb	r2, [r2, r1]
 800f5a2:	701a      	strb	r2, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	3309      	adds	r3, #9
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3305      	adds	r3, #5
 800f5b0:	4a2f      	ldr	r2, [pc, #188]	; (800f670 <shift_sub_rows+0x130>)
 800f5b2:	5c52      	ldrb	r2, [r2, r1]
 800f5b4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	330d      	adds	r3, #13
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	4619      	mov	r1, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	3309      	adds	r3, #9
 800f5c2:	4a2b      	ldr	r2, [pc, #172]	; (800f670 <shift_sub_rows+0x130>)
 800f5c4:	5c52      	ldrb	r2, [r2, r1]
 800f5c6:	701a      	strb	r2, [r3, #0]
 800f5c8:	7bfa      	ldrb	r2, [r7, #15]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	330d      	adds	r3, #13
 800f5ce:	4928      	ldr	r1, [pc, #160]	; (800f670 <shift_sub_rows+0x130>)
 800f5d0:	5c8a      	ldrb	r2, [r1, r2]
 800f5d2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	789b      	ldrb	r3, [r3, #2]
 800f5d8:	73fb      	strb	r3, [r7, #15]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	330a      	adds	r3, #10
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3302      	adds	r3, #2
 800f5e6:	4a22      	ldr	r2, [pc, #136]	; (800f670 <shift_sub_rows+0x130>)
 800f5e8:	5c52      	ldrb	r2, [r2, r1]
 800f5ea:	701a      	strb	r2, [r3, #0]
 800f5ec:	7bfa      	ldrb	r2, [r7, #15]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	330a      	adds	r3, #10
 800f5f2:	491f      	ldr	r1, [pc, #124]	; (800f670 <shift_sub_rows+0x130>)
 800f5f4:	5c8a      	ldrb	r2, [r1, r2]
 800f5f6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	799b      	ldrb	r3, [r3, #6]
 800f5fc:	73fb      	strb	r3, [r7, #15]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	330e      	adds	r3, #14
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	4619      	mov	r1, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	3306      	adds	r3, #6
 800f60a:	4a19      	ldr	r2, [pc, #100]	; (800f670 <shift_sub_rows+0x130>)
 800f60c:	5c52      	ldrb	r2, [r2, r1]
 800f60e:	701a      	strb	r2, [r3, #0]
 800f610:	7bfa      	ldrb	r2, [r7, #15]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	330e      	adds	r3, #14
 800f616:	4916      	ldr	r1, [pc, #88]	; (800f670 <shift_sub_rows+0x130>)
 800f618:	5c8a      	ldrb	r2, [r1, r2]
 800f61a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	7bdb      	ldrb	r3, [r3, #15]
 800f620:	73fb      	strb	r3, [r7, #15]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	330b      	adds	r3, #11
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	4619      	mov	r1, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	330f      	adds	r3, #15
 800f62e:	4a10      	ldr	r2, [pc, #64]	; (800f670 <shift_sub_rows+0x130>)
 800f630:	5c52      	ldrb	r2, [r2, r1]
 800f632:	701a      	strb	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3307      	adds	r3, #7
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	4619      	mov	r1, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	330b      	adds	r3, #11
 800f640:	4a0b      	ldr	r2, [pc, #44]	; (800f670 <shift_sub_rows+0x130>)
 800f642:	5c52      	ldrb	r2, [r2, r1]
 800f644:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	3303      	adds	r3, #3
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	4619      	mov	r1, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3307      	adds	r3, #7
 800f652:	4a07      	ldr	r2, [pc, #28]	; (800f670 <shift_sub_rows+0x130>)
 800f654:	5c52      	ldrb	r2, [r2, r1]
 800f656:	701a      	strb	r2, [r3, #0]
 800f658:	7bfa      	ldrb	r2, [r7, #15]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3303      	adds	r3, #3
 800f65e:	4904      	ldr	r1, [pc, #16]	; (800f670 <shift_sub_rows+0x130>)
 800f660:	5c8a      	ldrb	r2, [r1, r2]
 800f662:	701a      	strb	r2, [r3, #0]
}
 800f664:	bf00      	nop
 800f666:	3714      	adds	r7, #20
 800f668:	46bd      	mov	sp, r7
 800f66a:	bc80      	pop	{r7}
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	080219dc 	.word	0x080219dc

0800f674 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800f67c:	f107 0308 	add.w	r3, r7, #8
 800f680:	6879      	ldr	r1, [r7, #4]
 800f682:	4618      	mov	r0, r3
 800f684:	f7ff fd6c 	bl	800f160 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f688:	7a3b      	ldrb	r3, [r7, #8]
 800f68a:	461a      	mov	r2, r3
 800f68c:	4b9a      	ldr	r3, [pc, #616]	; (800f8f8 <mix_sub_columns+0x284>)
 800f68e:	5c9a      	ldrb	r2, [r3, r2]
 800f690:	7b7b      	ldrb	r3, [r7, #13]
 800f692:	4619      	mov	r1, r3
 800f694:	4b99      	ldr	r3, [pc, #612]	; (800f8fc <mix_sub_columns+0x288>)
 800f696:	5c5b      	ldrb	r3, [r3, r1]
 800f698:	4053      	eors	r3, r2
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	7cbb      	ldrb	r3, [r7, #18]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	4b97      	ldr	r3, [pc, #604]	; (800f900 <mix_sub_columns+0x28c>)
 800f6a2:	5c5b      	ldrb	r3, [r3, r1]
 800f6a4:	4053      	eors	r3, r2
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	7dfb      	ldrb	r3, [r7, #23]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4b94      	ldr	r3, [pc, #592]	; (800f900 <mix_sub_columns+0x28c>)
 800f6ae:	5c5b      	ldrb	r3, [r3, r1]
 800f6b0:	4053      	eors	r3, r2
 800f6b2:	b2da      	uxtb	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f6b8:	7a3b      	ldrb	r3, [r7, #8]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	4b90      	ldr	r3, [pc, #576]	; (800f900 <mix_sub_columns+0x28c>)
 800f6be:	5c9a      	ldrb	r2, [r3, r2]
 800f6c0:	7b7b      	ldrb	r3, [r7, #13]
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4b8c      	ldr	r3, [pc, #560]	; (800f8f8 <mix_sub_columns+0x284>)
 800f6c6:	5c5b      	ldrb	r3, [r3, r1]
 800f6c8:	4053      	eors	r3, r2
 800f6ca:	b2da      	uxtb	r2, r3
 800f6cc:	7cbb      	ldrb	r3, [r7, #18]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	4b8a      	ldr	r3, [pc, #552]	; (800f8fc <mix_sub_columns+0x288>)
 800f6d2:	5c5b      	ldrb	r3, [r3, r1]
 800f6d4:	4053      	eors	r3, r2
 800f6d6:	b2d9      	uxtb	r1, r3
 800f6d8:	7dfb      	ldrb	r3, [r7, #23]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	4b88      	ldr	r3, [pc, #544]	; (800f900 <mix_sub_columns+0x28c>)
 800f6de:	5c9a      	ldrb	r2, [r3, r2]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	404a      	eors	r2, r1
 800f6e6:	b2d2      	uxtb	r2, r2
 800f6e8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f6ea:	7a3b      	ldrb	r3, [r7, #8]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	4b84      	ldr	r3, [pc, #528]	; (800f900 <mix_sub_columns+0x28c>)
 800f6f0:	5c9a      	ldrb	r2, [r3, r2]
 800f6f2:	7b7b      	ldrb	r3, [r7, #13]
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4b82      	ldr	r3, [pc, #520]	; (800f900 <mix_sub_columns+0x28c>)
 800f6f8:	5c5b      	ldrb	r3, [r3, r1]
 800f6fa:	4053      	eors	r3, r2
 800f6fc:	b2da      	uxtb	r2, r3
 800f6fe:	7cbb      	ldrb	r3, [r7, #18]
 800f700:	4619      	mov	r1, r3
 800f702:	4b7d      	ldr	r3, [pc, #500]	; (800f8f8 <mix_sub_columns+0x284>)
 800f704:	5c5b      	ldrb	r3, [r3, r1]
 800f706:	4053      	eors	r3, r2
 800f708:	b2d9      	uxtb	r1, r3
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	461a      	mov	r2, r3
 800f70e:	4b7b      	ldr	r3, [pc, #492]	; (800f8fc <mix_sub_columns+0x288>)
 800f710:	5c9a      	ldrb	r2, [r3, r2]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	3302      	adds	r3, #2
 800f716:	404a      	eors	r2, r1
 800f718:	b2d2      	uxtb	r2, r2
 800f71a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800f71c:	7a3b      	ldrb	r3, [r7, #8]
 800f71e:	461a      	mov	r2, r3
 800f720:	4b76      	ldr	r3, [pc, #472]	; (800f8fc <mix_sub_columns+0x288>)
 800f722:	5c9a      	ldrb	r2, [r3, r2]
 800f724:	7b7b      	ldrb	r3, [r7, #13]
 800f726:	4619      	mov	r1, r3
 800f728:	4b75      	ldr	r3, [pc, #468]	; (800f900 <mix_sub_columns+0x28c>)
 800f72a:	5c5b      	ldrb	r3, [r3, r1]
 800f72c:	4053      	eors	r3, r2
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	7cbb      	ldrb	r3, [r7, #18]
 800f732:	4619      	mov	r1, r3
 800f734:	4b72      	ldr	r3, [pc, #456]	; (800f900 <mix_sub_columns+0x28c>)
 800f736:	5c5b      	ldrb	r3, [r3, r1]
 800f738:	4053      	eors	r3, r2
 800f73a:	b2d9      	uxtb	r1, r3
 800f73c:	7dfb      	ldrb	r3, [r7, #23]
 800f73e:	461a      	mov	r2, r3
 800f740:	4b6d      	ldr	r3, [pc, #436]	; (800f8f8 <mix_sub_columns+0x284>)
 800f742:	5c9a      	ldrb	r2, [r3, r2]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	3303      	adds	r3, #3
 800f748:	404a      	eors	r2, r1
 800f74a:	b2d2      	uxtb	r2, r2
 800f74c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800f74e:	7b3b      	ldrb	r3, [r7, #12]
 800f750:	461a      	mov	r2, r3
 800f752:	4b69      	ldr	r3, [pc, #420]	; (800f8f8 <mix_sub_columns+0x284>)
 800f754:	5c9a      	ldrb	r2, [r3, r2]
 800f756:	7c7b      	ldrb	r3, [r7, #17]
 800f758:	4619      	mov	r1, r3
 800f75a:	4b68      	ldr	r3, [pc, #416]	; (800f8fc <mix_sub_columns+0x288>)
 800f75c:	5c5b      	ldrb	r3, [r3, r1]
 800f75e:	4053      	eors	r3, r2
 800f760:	b2da      	uxtb	r2, r3
 800f762:	7dbb      	ldrb	r3, [r7, #22]
 800f764:	4619      	mov	r1, r3
 800f766:	4b66      	ldr	r3, [pc, #408]	; (800f900 <mix_sub_columns+0x28c>)
 800f768:	5c5b      	ldrb	r3, [r3, r1]
 800f76a:	4053      	eors	r3, r2
 800f76c:	b2d9      	uxtb	r1, r3
 800f76e:	7afb      	ldrb	r3, [r7, #11]
 800f770:	461a      	mov	r2, r3
 800f772:	4b63      	ldr	r3, [pc, #396]	; (800f900 <mix_sub_columns+0x28c>)
 800f774:	5c9a      	ldrb	r2, [r3, r2]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3304      	adds	r3, #4
 800f77a:	404a      	eors	r2, r1
 800f77c:	b2d2      	uxtb	r2, r2
 800f77e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f780:	7b3b      	ldrb	r3, [r7, #12]
 800f782:	461a      	mov	r2, r3
 800f784:	4b5e      	ldr	r3, [pc, #376]	; (800f900 <mix_sub_columns+0x28c>)
 800f786:	5c9a      	ldrb	r2, [r3, r2]
 800f788:	7c7b      	ldrb	r3, [r7, #17]
 800f78a:	4619      	mov	r1, r3
 800f78c:	4b5a      	ldr	r3, [pc, #360]	; (800f8f8 <mix_sub_columns+0x284>)
 800f78e:	5c5b      	ldrb	r3, [r3, r1]
 800f790:	4053      	eors	r3, r2
 800f792:	b2da      	uxtb	r2, r3
 800f794:	7dbb      	ldrb	r3, [r7, #22]
 800f796:	4619      	mov	r1, r3
 800f798:	4b58      	ldr	r3, [pc, #352]	; (800f8fc <mix_sub_columns+0x288>)
 800f79a:	5c5b      	ldrb	r3, [r3, r1]
 800f79c:	4053      	eors	r3, r2
 800f79e:	b2d9      	uxtb	r1, r3
 800f7a0:	7afb      	ldrb	r3, [r7, #11]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	4b56      	ldr	r3, [pc, #344]	; (800f900 <mix_sub_columns+0x28c>)
 800f7a6:	5c9a      	ldrb	r2, [r3, r2]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	3305      	adds	r3, #5
 800f7ac:	404a      	eors	r2, r1
 800f7ae:	b2d2      	uxtb	r2, r2
 800f7b0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f7b2:	7b3b      	ldrb	r3, [r7, #12]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	4b52      	ldr	r3, [pc, #328]	; (800f900 <mix_sub_columns+0x28c>)
 800f7b8:	5c9a      	ldrb	r2, [r3, r2]
 800f7ba:	7c7b      	ldrb	r3, [r7, #17]
 800f7bc:	4619      	mov	r1, r3
 800f7be:	4b50      	ldr	r3, [pc, #320]	; (800f900 <mix_sub_columns+0x28c>)
 800f7c0:	5c5b      	ldrb	r3, [r3, r1]
 800f7c2:	4053      	eors	r3, r2
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	7dbb      	ldrb	r3, [r7, #22]
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	4b4b      	ldr	r3, [pc, #300]	; (800f8f8 <mix_sub_columns+0x284>)
 800f7cc:	5c5b      	ldrb	r3, [r3, r1]
 800f7ce:	4053      	eors	r3, r2
 800f7d0:	b2d9      	uxtb	r1, r3
 800f7d2:	7afb      	ldrb	r3, [r7, #11]
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	4b49      	ldr	r3, [pc, #292]	; (800f8fc <mix_sub_columns+0x288>)
 800f7d8:	5c9a      	ldrb	r2, [r3, r2]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	3306      	adds	r3, #6
 800f7de:	404a      	eors	r2, r1
 800f7e0:	b2d2      	uxtb	r2, r2
 800f7e2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f7e4:	7b3b      	ldrb	r3, [r7, #12]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	4b44      	ldr	r3, [pc, #272]	; (800f8fc <mix_sub_columns+0x288>)
 800f7ea:	5c9a      	ldrb	r2, [r3, r2]
 800f7ec:	7c7b      	ldrb	r3, [r7, #17]
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	4b43      	ldr	r3, [pc, #268]	; (800f900 <mix_sub_columns+0x28c>)
 800f7f2:	5c5b      	ldrb	r3, [r3, r1]
 800f7f4:	4053      	eors	r3, r2
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	7dbb      	ldrb	r3, [r7, #22]
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	4b40      	ldr	r3, [pc, #256]	; (800f900 <mix_sub_columns+0x28c>)
 800f7fe:	5c5b      	ldrb	r3, [r3, r1]
 800f800:	4053      	eors	r3, r2
 800f802:	b2d9      	uxtb	r1, r3
 800f804:	7afb      	ldrb	r3, [r7, #11]
 800f806:	461a      	mov	r2, r3
 800f808:	4b3b      	ldr	r3, [pc, #236]	; (800f8f8 <mix_sub_columns+0x284>)
 800f80a:	5c9a      	ldrb	r2, [r3, r2]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	3307      	adds	r3, #7
 800f810:	404a      	eors	r2, r1
 800f812:	b2d2      	uxtb	r2, r2
 800f814:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f816:	7c3b      	ldrb	r3, [r7, #16]
 800f818:	461a      	mov	r2, r3
 800f81a:	4b37      	ldr	r3, [pc, #220]	; (800f8f8 <mix_sub_columns+0x284>)
 800f81c:	5c9a      	ldrb	r2, [r3, r2]
 800f81e:	7d7b      	ldrb	r3, [r7, #21]
 800f820:	4619      	mov	r1, r3
 800f822:	4b36      	ldr	r3, [pc, #216]	; (800f8fc <mix_sub_columns+0x288>)
 800f824:	5c5b      	ldrb	r3, [r3, r1]
 800f826:	4053      	eors	r3, r2
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	7abb      	ldrb	r3, [r7, #10]
 800f82c:	4619      	mov	r1, r3
 800f82e:	4b34      	ldr	r3, [pc, #208]	; (800f900 <mix_sub_columns+0x28c>)
 800f830:	5c5b      	ldrb	r3, [r3, r1]
 800f832:	4053      	eors	r3, r2
 800f834:	b2d9      	uxtb	r1, r3
 800f836:	7bfb      	ldrb	r3, [r7, #15]
 800f838:	461a      	mov	r2, r3
 800f83a:	4b31      	ldr	r3, [pc, #196]	; (800f900 <mix_sub_columns+0x28c>)
 800f83c:	5c9a      	ldrb	r2, [r3, r2]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	3308      	adds	r3, #8
 800f842:	404a      	eors	r2, r1
 800f844:	b2d2      	uxtb	r2, r2
 800f846:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f848:	7c3b      	ldrb	r3, [r7, #16]
 800f84a:	461a      	mov	r2, r3
 800f84c:	4b2c      	ldr	r3, [pc, #176]	; (800f900 <mix_sub_columns+0x28c>)
 800f84e:	5c9a      	ldrb	r2, [r3, r2]
 800f850:	7d7b      	ldrb	r3, [r7, #21]
 800f852:	4619      	mov	r1, r3
 800f854:	4b28      	ldr	r3, [pc, #160]	; (800f8f8 <mix_sub_columns+0x284>)
 800f856:	5c5b      	ldrb	r3, [r3, r1]
 800f858:	4053      	eors	r3, r2
 800f85a:	b2da      	uxtb	r2, r3
 800f85c:	7abb      	ldrb	r3, [r7, #10]
 800f85e:	4619      	mov	r1, r3
 800f860:	4b26      	ldr	r3, [pc, #152]	; (800f8fc <mix_sub_columns+0x288>)
 800f862:	5c5b      	ldrb	r3, [r3, r1]
 800f864:	4053      	eors	r3, r2
 800f866:	b2d9      	uxtb	r1, r3
 800f868:	7bfb      	ldrb	r3, [r7, #15]
 800f86a:	461a      	mov	r2, r3
 800f86c:	4b24      	ldr	r3, [pc, #144]	; (800f900 <mix_sub_columns+0x28c>)
 800f86e:	5c9a      	ldrb	r2, [r3, r2]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3309      	adds	r3, #9
 800f874:	404a      	eors	r2, r1
 800f876:	b2d2      	uxtb	r2, r2
 800f878:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f87a:	7c3b      	ldrb	r3, [r7, #16]
 800f87c:	461a      	mov	r2, r3
 800f87e:	4b20      	ldr	r3, [pc, #128]	; (800f900 <mix_sub_columns+0x28c>)
 800f880:	5c9a      	ldrb	r2, [r3, r2]
 800f882:	7d7b      	ldrb	r3, [r7, #21]
 800f884:	4619      	mov	r1, r3
 800f886:	4b1e      	ldr	r3, [pc, #120]	; (800f900 <mix_sub_columns+0x28c>)
 800f888:	5c5b      	ldrb	r3, [r3, r1]
 800f88a:	4053      	eors	r3, r2
 800f88c:	b2da      	uxtb	r2, r3
 800f88e:	7abb      	ldrb	r3, [r7, #10]
 800f890:	4619      	mov	r1, r3
 800f892:	4b19      	ldr	r3, [pc, #100]	; (800f8f8 <mix_sub_columns+0x284>)
 800f894:	5c5b      	ldrb	r3, [r3, r1]
 800f896:	4053      	eors	r3, r2
 800f898:	b2d9      	uxtb	r1, r3
 800f89a:	7bfb      	ldrb	r3, [r7, #15]
 800f89c:	461a      	mov	r2, r3
 800f89e:	4b17      	ldr	r3, [pc, #92]	; (800f8fc <mix_sub_columns+0x288>)
 800f8a0:	5c9a      	ldrb	r2, [r3, r2]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	330a      	adds	r3, #10
 800f8a6:	404a      	eors	r2, r1
 800f8a8:	b2d2      	uxtb	r2, r2
 800f8aa:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800f8ac:	7c3b      	ldrb	r3, [r7, #16]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	4b12      	ldr	r3, [pc, #72]	; (800f8fc <mix_sub_columns+0x288>)
 800f8b2:	5c9a      	ldrb	r2, [r3, r2]
 800f8b4:	7d7b      	ldrb	r3, [r7, #21]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	4b11      	ldr	r3, [pc, #68]	; (800f900 <mix_sub_columns+0x28c>)
 800f8ba:	5c5b      	ldrb	r3, [r3, r1]
 800f8bc:	4053      	eors	r3, r2
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	7abb      	ldrb	r3, [r7, #10]
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4b0e      	ldr	r3, [pc, #56]	; (800f900 <mix_sub_columns+0x28c>)
 800f8c6:	5c5b      	ldrb	r3, [r3, r1]
 800f8c8:	4053      	eors	r3, r2
 800f8ca:	b2d9      	uxtb	r1, r3
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	4b09      	ldr	r3, [pc, #36]	; (800f8f8 <mix_sub_columns+0x284>)
 800f8d2:	5c9a      	ldrb	r2, [r3, r2]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	330b      	adds	r3, #11
 800f8d8:	404a      	eors	r2, r1
 800f8da:	b2d2      	uxtb	r2, r2
 800f8dc:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f8de:	7d3b      	ldrb	r3, [r7, #20]
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	4b05      	ldr	r3, [pc, #20]	; (800f8f8 <mix_sub_columns+0x284>)
 800f8e4:	5c9a      	ldrb	r2, [r3, r2]
 800f8e6:	7a7b      	ldrb	r3, [r7, #9]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	4b04      	ldr	r3, [pc, #16]	; (800f8fc <mix_sub_columns+0x288>)
 800f8ec:	5c5b      	ldrb	r3, [r3, r1]
 800f8ee:	4053      	eors	r3, r2
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	7bbb      	ldrb	r3, [r7, #14]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	e005      	b.n	800f904 <mix_sub_columns+0x290>
 800f8f8:	08021adc 	.word	0x08021adc
 800f8fc:	08021bdc 	.word	0x08021bdc
 800f900:	080219dc 	.word	0x080219dc
 800f904:	4b2d      	ldr	r3, [pc, #180]	; (800f9bc <mix_sub_columns+0x348>)
 800f906:	5c5b      	ldrb	r3, [r3, r1]
 800f908:	4053      	eors	r3, r2
 800f90a:	b2d9      	uxtb	r1, r3
 800f90c:	7cfb      	ldrb	r3, [r7, #19]
 800f90e:	461a      	mov	r2, r3
 800f910:	4b2a      	ldr	r3, [pc, #168]	; (800f9bc <mix_sub_columns+0x348>)
 800f912:	5c9a      	ldrb	r2, [r3, r2]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	330c      	adds	r3, #12
 800f918:	404a      	eors	r2, r1
 800f91a:	b2d2      	uxtb	r2, r2
 800f91c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800f91e:	7d3b      	ldrb	r3, [r7, #20]
 800f920:	461a      	mov	r2, r3
 800f922:	4b26      	ldr	r3, [pc, #152]	; (800f9bc <mix_sub_columns+0x348>)
 800f924:	5c9a      	ldrb	r2, [r3, r2]
 800f926:	7a7b      	ldrb	r3, [r7, #9]
 800f928:	4619      	mov	r1, r3
 800f92a:	4b25      	ldr	r3, [pc, #148]	; (800f9c0 <mix_sub_columns+0x34c>)
 800f92c:	5c5b      	ldrb	r3, [r3, r1]
 800f92e:	4053      	eors	r3, r2
 800f930:	b2da      	uxtb	r2, r3
 800f932:	7bbb      	ldrb	r3, [r7, #14]
 800f934:	4619      	mov	r1, r3
 800f936:	4b23      	ldr	r3, [pc, #140]	; (800f9c4 <mix_sub_columns+0x350>)
 800f938:	5c5b      	ldrb	r3, [r3, r1]
 800f93a:	4053      	eors	r3, r2
 800f93c:	b2d9      	uxtb	r1, r3
 800f93e:	7cfb      	ldrb	r3, [r7, #19]
 800f940:	461a      	mov	r2, r3
 800f942:	4b1e      	ldr	r3, [pc, #120]	; (800f9bc <mix_sub_columns+0x348>)
 800f944:	5c9a      	ldrb	r2, [r3, r2]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	330d      	adds	r3, #13
 800f94a:	404a      	eors	r2, r1
 800f94c:	b2d2      	uxtb	r2, r2
 800f94e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800f950:	7d3b      	ldrb	r3, [r7, #20]
 800f952:	461a      	mov	r2, r3
 800f954:	4b19      	ldr	r3, [pc, #100]	; (800f9bc <mix_sub_columns+0x348>)
 800f956:	5c9a      	ldrb	r2, [r3, r2]
 800f958:	7a7b      	ldrb	r3, [r7, #9]
 800f95a:	4619      	mov	r1, r3
 800f95c:	4b17      	ldr	r3, [pc, #92]	; (800f9bc <mix_sub_columns+0x348>)
 800f95e:	5c5b      	ldrb	r3, [r3, r1]
 800f960:	4053      	eors	r3, r2
 800f962:	b2da      	uxtb	r2, r3
 800f964:	7bbb      	ldrb	r3, [r7, #14]
 800f966:	4619      	mov	r1, r3
 800f968:	4b15      	ldr	r3, [pc, #84]	; (800f9c0 <mix_sub_columns+0x34c>)
 800f96a:	5c5b      	ldrb	r3, [r3, r1]
 800f96c:	4053      	eors	r3, r2
 800f96e:	b2d9      	uxtb	r1, r3
 800f970:	7cfb      	ldrb	r3, [r7, #19]
 800f972:	461a      	mov	r2, r3
 800f974:	4b13      	ldr	r3, [pc, #76]	; (800f9c4 <mix_sub_columns+0x350>)
 800f976:	5c9a      	ldrb	r2, [r3, r2]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	330e      	adds	r3, #14
 800f97c:	404a      	eors	r2, r1
 800f97e:	b2d2      	uxtb	r2, r2
 800f980:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800f982:	7d3b      	ldrb	r3, [r7, #20]
 800f984:	461a      	mov	r2, r3
 800f986:	4b0f      	ldr	r3, [pc, #60]	; (800f9c4 <mix_sub_columns+0x350>)
 800f988:	5c9a      	ldrb	r2, [r3, r2]
 800f98a:	7a7b      	ldrb	r3, [r7, #9]
 800f98c:	4619      	mov	r1, r3
 800f98e:	4b0b      	ldr	r3, [pc, #44]	; (800f9bc <mix_sub_columns+0x348>)
 800f990:	5c5b      	ldrb	r3, [r3, r1]
 800f992:	4053      	eors	r3, r2
 800f994:	b2da      	uxtb	r2, r3
 800f996:	7bbb      	ldrb	r3, [r7, #14]
 800f998:	4619      	mov	r1, r3
 800f99a:	4b08      	ldr	r3, [pc, #32]	; (800f9bc <mix_sub_columns+0x348>)
 800f99c:	5c5b      	ldrb	r3, [r3, r1]
 800f99e:	4053      	eors	r3, r2
 800f9a0:	b2d9      	uxtb	r1, r3
 800f9a2:	7cfb      	ldrb	r3, [r7, #19]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4b06      	ldr	r3, [pc, #24]	; (800f9c0 <mix_sub_columns+0x34c>)
 800f9a8:	5c9a      	ldrb	r2, [r3, r2]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	330f      	adds	r3, #15
 800f9ae:	404a      	eors	r2, r1
 800f9b0:	b2d2      	uxtb	r2, r2
 800f9b2:	701a      	strb	r2, [r3, #0]
  }
 800f9b4:	bf00      	nop
 800f9b6:	3718      	adds	r7, #24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	080219dc 	.word	0x080219dc
 800f9c0:	08021adc 	.word	0x08021adc
 800f9c4:	08021bdc 	.word	0x08021bdc

0800f9c8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	607a      	str	r2, [r7, #4]
 800f9d4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800f9d6:	7afb      	ldrb	r3, [r7, #11]
 800f9d8:	3b10      	subs	r3, #16
 800f9da:	2b10      	cmp	r3, #16
 800f9dc:	bf8c      	ite	hi
 800f9de:	2201      	movhi	r2, #1
 800f9e0:	2200      	movls	r2, #0
 800f9e2:	b2d2      	uxtb	r2, r2
 800f9e4:	2a00      	cmp	r2, #0
 800f9e6:	d10b      	bne.n	800fa00 <lorawan_aes_set_key+0x38>
 800f9e8:	4a64      	ldr	r2, [pc, #400]	; (800fb7c <lorawan_aes_set_key+0x1b4>)
 800f9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ee:	f003 0301 	and.w	r3, r3, #1
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	bf14      	ite	ne
 800f9f6:	2301      	movne	r3, #1
 800f9f8:	2300      	moveq	r3, #0
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d105      	bne.n	800fa0c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800fa08:	23ff      	movs	r3, #255	; 0xff
 800fa0a:	e0b2      	b.n	800fb72 <lorawan_aes_set_key+0x1aa>
        break;
 800fa0c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	7afa      	ldrb	r2, [r7, #11]
 800fa12:	68f9      	ldr	r1, [r7, #12]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff fbfc 	bl	800f212 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800fa1a:	7afb      	ldrb	r3, [r7, #11]
 800fa1c:	331c      	adds	r3, #28
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800fa24:	7c7b      	ldrb	r3, [r7, #17]
 800fa26:	091b      	lsrs	r3, r3, #4
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fa34:	7afb      	ldrb	r3, [r7, #11]
 800fa36:	75fb      	strb	r3, [r7, #23]
 800fa38:	2301      	movs	r3, #1
 800fa3a:	75bb      	strb	r3, [r7, #22]
 800fa3c:	e093      	b.n	800fb66 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
 800fa40:	3b04      	subs	r3, #4
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	5cd3      	ldrb	r3, [r2, r3]
 800fa46:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	3b03      	subs	r3, #3
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	5cd3      	ldrb	r3, [r2, r3]
 800fa50:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800fa52:	7dfb      	ldrb	r3, [r7, #23]
 800fa54:	3b02      	subs	r3, #2
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	5cd3      	ldrb	r3, [r2, r3]
 800fa5a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800fa5c:	7dfb      	ldrb	r3, [r7, #23]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	5cd3      	ldrb	r3, [r2, r3]
 800fa64:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800fa66:	7dfb      	ldrb	r3, [r7, #23]
 800fa68:	7afa      	ldrb	r2, [r7, #11]
 800fa6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa6e:	fb01 f202 	mul.w	r2, r1, r2
 800fa72:	1a9b      	subs	r3, r3, r2
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d127      	bne.n	800faca <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800fa7a:	7d7b      	ldrb	r3, [r7, #21]
 800fa7c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800fa7e:	7d3b      	ldrb	r3, [r7, #20]
 800fa80:	4a3f      	ldr	r2, [pc, #252]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800fa82:	5cd2      	ldrb	r2, [r2, r3]
 800fa84:	7dbb      	ldrb	r3, [r7, #22]
 800fa86:	4053      	eors	r3, r2
 800fa88:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800fa8a:	7cfb      	ldrb	r3, [r7, #19]
 800fa8c:	4a3c      	ldr	r2, [pc, #240]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800fa8e:	5cd3      	ldrb	r3, [r2, r3]
 800fa90:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800fa92:	7cbb      	ldrb	r3, [r7, #18]
 800fa94:	4a3a      	ldr	r2, [pc, #232]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800fa96:	5cd3      	ldrb	r3, [r2, r3]
 800fa98:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800fa9a:	7c3b      	ldrb	r3, [r7, #16]
 800fa9c:	4a38      	ldr	r2, [pc, #224]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800fa9e:	5cd3      	ldrb	r3, [r2, r3]
 800faa0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800faa2:	7dbb      	ldrb	r3, [r7, #22]
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	b25a      	sxtb	r2, r3
 800faa8:	7dbb      	ldrb	r3, [r7, #22]
 800faaa:	09db      	lsrs	r3, r3, #7
 800faac:	b2db      	uxtb	r3, r3
 800faae:	4619      	mov	r1, r3
 800fab0:	0049      	lsls	r1, r1, #1
 800fab2:	440b      	add	r3, r1
 800fab4:	4619      	mov	r1, r3
 800fab6:	00c8      	lsls	r0, r1, #3
 800fab8:	4619      	mov	r1, r3
 800faba:	4603      	mov	r3, r0
 800fabc:	440b      	add	r3, r1
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	b25b      	sxtb	r3, r3
 800fac2:	4053      	eors	r3, r2
 800fac4:	b25b      	sxtb	r3, r3
 800fac6:	75bb      	strb	r3, [r7, #22]
 800fac8:	e01c      	b.n	800fb04 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800faca:	7afb      	ldrb	r3, [r7, #11]
 800facc:	2b18      	cmp	r3, #24
 800face:	d919      	bls.n	800fb04 <lorawan_aes_set_key+0x13c>
 800fad0:	7dfb      	ldrb	r3, [r7, #23]
 800fad2:	7afa      	ldrb	r2, [r7, #11]
 800fad4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fad8:	fb01 f202 	mul.w	r2, r1, r2
 800fadc:	1a9b      	subs	r3, r3, r2
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b10      	cmp	r3, #16
 800fae2:	d10f      	bne.n	800fb04 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800fae4:	7d7b      	ldrb	r3, [r7, #21]
 800fae6:	4a26      	ldr	r2, [pc, #152]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800fae8:	5cd3      	ldrb	r3, [r2, r3]
 800faea:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800faec:	7d3b      	ldrb	r3, [r7, #20]
 800faee:	4a24      	ldr	r2, [pc, #144]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800faf0:	5cd3      	ldrb	r3, [r2, r3]
 800faf2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800faf4:	7cfb      	ldrb	r3, [r7, #19]
 800faf6:	4a22      	ldr	r2, [pc, #136]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800faf8:	5cd3      	ldrb	r3, [r2, r3]
 800fafa:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800fafc:	7cbb      	ldrb	r3, [r7, #18]
 800fafe:	4a20      	ldr	r2, [pc, #128]	; (800fb80 <lorawan_aes_set_key+0x1b8>)
 800fb00:	5cd3      	ldrb	r3, [r2, r3]
 800fb02:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800fb04:	7dfa      	ldrb	r2, [r7, #23]
 800fb06:	7afb      	ldrb	r3, [r7, #11]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800fb0c:	7c3b      	ldrb	r3, [r7, #16]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	5cd1      	ldrb	r1, [r2, r3]
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
 800fb14:	7d7a      	ldrb	r2, [r7, #21]
 800fb16:	404a      	eors	r2, r1
 800fb18:	b2d1      	uxtb	r1, r2
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800fb1e:	7c3b      	ldrb	r3, [r7, #16]
 800fb20:	3301      	adds	r3, #1
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	5cd1      	ldrb	r1, [r2, r3]
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	7d3a      	ldrb	r2, [r7, #20]
 800fb2c:	404a      	eors	r2, r1
 800fb2e:	b2d1      	uxtb	r1, r2
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800fb34:	7c3b      	ldrb	r3, [r7, #16]
 800fb36:	3302      	adds	r3, #2
 800fb38:	687a      	ldr	r2, [r7, #4]
 800fb3a:	5cd1      	ldrb	r1, [r2, r3]
 800fb3c:	7dfb      	ldrb	r3, [r7, #23]
 800fb3e:	3302      	adds	r3, #2
 800fb40:	7cfa      	ldrb	r2, [r7, #19]
 800fb42:	404a      	eors	r2, r1
 800fb44:	b2d1      	uxtb	r1, r2
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800fb4a:	7c3b      	ldrb	r3, [r7, #16]
 800fb4c:	3303      	adds	r3, #3
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	5cd1      	ldrb	r1, [r2, r3]
 800fb52:	7dfb      	ldrb	r3, [r7, #23]
 800fb54:	3303      	adds	r3, #3
 800fb56:	7cba      	ldrb	r2, [r7, #18]
 800fb58:	404a      	eors	r2, r1
 800fb5a:	b2d1      	uxtb	r1, r2
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fb60:	7dfb      	ldrb	r3, [r7, #23]
 800fb62:	3304      	adds	r3, #4
 800fb64:	75fb      	strb	r3, [r7, #23]
 800fb66:	7dfa      	ldrb	r2, [r7, #23]
 800fb68:	7c7b      	ldrb	r3, [r7, #17]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	f4ff af67 	bcc.w	800fa3e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3718      	adds	r7, #24
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	00010101 	.word	0x00010101
 800fb80:	080219dc 	.word	0x080219dc

0800fb84 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b08a      	sub	sp, #40	; 0x28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d038      	beq.n	800fc0c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	f107 0314 	add.w	r3, r7, #20
 800fba0:	68f9      	ldr	r1, [r7, #12]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7ff fc07 	bl	800f3b6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800fba8:	2301      	movs	r3, #1
 800fbaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbae:	e014      	b.n	800fbda <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800fbb0:	f107 0314 	add.w	r3, r7, #20
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7ff fd5d 	bl	800f674 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fbc0:	0112      	lsls	r2, r2, #4
 800fbc2:	441a      	add	r2, r3
 800fbc4:	f107 0314 	add.w	r3, r7, #20
 800fbc8:	4611      	mov	r1, r2
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff fcab 	bl	800f526 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800fbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800fbe0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d3e3      	bcc.n	800fbb0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800fbe8:	f107 0314 	add.w	r3, r7, #20
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7ff fca7 	bl	800f540 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fbf8:	0112      	lsls	r2, r2, #4
 800fbfa:	441a      	add	r2, r3
 800fbfc:	f107 0314 	add.w	r3, r7, #20
 800fc00:	4619      	mov	r1, r3
 800fc02:	68b8      	ldr	r0, [r7, #8]
 800fc04:	f7ff fbd7 	bl	800f3b6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	e000      	b.n	800fc0e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800fc0c:	23ff      	movs	r3, #255	; 0xff
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3728      	adds	r7, #40	; 0x28
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
	...

0800fc18 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc1a:	b0a1      	sub	sp, #132	; 0x84
 800fc1c:	af12      	add	r7, sp, #72	; 0x48
 800fc1e:	4603      	mov	r3, r0
 800fc20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800fc24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fc28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc2c:	4611      	mov	r1, r2
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f000 fa12 	bl	8010058 <SecureElementGetKeyByID>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d174      	bne.n	800fd24 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fc40:	e06c      	b.n	800fd1c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800fc42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc46:	4939      	ldr	r1, [pc, #228]	; (800fd2c <PrintKey+0x114>)
 800fc48:	4613      	mov	r3, r2
 800fc4a:	005b      	lsls	r3, r3, #1
 800fc4c:	4413      	add	r3, r2
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	440b      	add	r3, r1
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d15a      	bne.n	800fd12 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800fc5c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc60:	4932      	ldr	r1, [pc, #200]	; (800fd2c <PrintKey+0x114>)
 800fc62:	4613      	mov	r3, r2
 800fc64:	005b      	lsls	r3, r3, #1
 800fc66:	4413      	add	r3, r2
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	440b      	add	r3, r1
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	6819      	ldr	r1, [r3, #0]
 800fc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc72:	785b      	ldrb	r3, [r3, #1]
 800fc74:	461d      	mov	r5, r3
 800fc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc78:	789b      	ldrb	r3, [r3, #2]
 800fc7a:	461e      	mov	r6, r3
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	78db      	ldrb	r3, [r3, #3]
 800fc80:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	791b      	ldrb	r3, [r3, #4]
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
 800fc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8a:	795b      	ldrb	r3, [r3, #5]
 800fc8c:	623b      	str	r3, [r7, #32]
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	799b      	ldrb	r3, [r3, #6]
 800fc92:	61fb      	str	r3, [r7, #28]
 800fc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc96:	79db      	ldrb	r3, [r3, #7]
 800fc98:	61bb      	str	r3, [r7, #24]
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	7a1b      	ldrb	r3, [r3, #8]
 800fc9e:	617b      	str	r3, [r7, #20]
 800fca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca2:	7a5b      	ldrb	r3, [r3, #9]
 800fca4:	613b      	str	r3, [r7, #16]
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	7a9b      	ldrb	r3, [r3, #10]
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	7adb      	ldrb	r3, [r3, #11]
 800fcb0:	60bb      	str	r3, [r7, #8]
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	7b1b      	ldrb	r3, [r3, #12]
 800fcb6:	607b      	str	r3, [r7, #4]
 800fcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcba:	7b5b      	ldrb	r3, [r3, #13]
 800fcbc:	461c      	mov	r4, r3
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc0:	7b9b      	ldrb	r3, [r3, #14]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc6:	7bdb      	ldrb	r3, [r3, #15]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fccc:	7c1b      	ldrb	r3, [r3, #16]
 800fcce:	9310      	str	r3, [sp, #64]	; 0x40
 800fcd0:	920f      	str	r2, [sp, #60]	; 0x3c
 800fcd2:	900e      	str	r0, [sp, #56]	; 0x38
 800fcd4:	940d      	str	r4, [sp, #52]	; 0x34
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	920c      	str	r2, [sp, #48]	; 0x30
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	920b      	str	r2, [sp, #44]	; 0x2c
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	920a      	str	r2, [sp, #40]	; 0x28
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	9209      	str	r2, [sp, #36]	; 0x24
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	9208      	str	r2, [sp, #32]
 800fcea:	69ba      	ldr	r2, [r7, #24]
 800fcec:	9207      	str	r2, [sp, #28]
 800fcee:	69fa      	ldr	r2, [r7, #28]
 800fcf0:	9206      	str	r2, [sp, #24]
 800fcf2:	6a3a      	ldr	r2, [r7, #32]
 800fcf4:	9205      	str	r2, [sp, #20]
 800fcf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcf8:	9204      	str	r2, [sp, #16]
 800fcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfc:	9303      	str	r3, [sp, #12]
 800fcfe:	9602      	str	r6, [sp, #8]
 800fd00:	9501      	str	r5, [sp, #4]
 800fd02:	9100      	str	r1, [sp, #0]
 800fd04:	4b0a      	ldr	r3, [pc, #40]	; (800fd30 <PrintKey+0x118>)
 800fd06:	2200      	movs	r2, #0
 800fd08:	2100      	movs	r1, #0
 800fd0a:	2002      	movs	r0, #2
 800fd0c:	f010 f944 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
 800fd10:	e008      	b.n	800fd24 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fd12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd16:	3301      	adds	r3, #1
 800fd18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fd1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd20:	2b0a      	cmp	r3, #10
 800fd22:	d98e      	bls.n	800fc42 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800fd24:	373c      	adds	r7, #60	; 0x3c
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	08021cdc 	.word	0x08021cdc
 800fd30:	0802156c 	.word	0x0802156c

0800fd34 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800fd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd36:	b091      	sub	sp, #68	; 0x44
 800fd38:	af08      	add	r7, sp, #32
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800fd42:	f107 0310 	add.w	r3, r7, #16
 800fd46:	4618      	mov	r0, r3
 800fd48:	f000 fbda 	bl	8010500 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800fd4c:	7c3b      	ldrb	r3, [r7, #16]
 800fd4e:	7c7a      	ldrb	r2, [r7, #17]
 800fd50:	7cb9      	ldrb	r1, [r7, #18]
 800fd52:	7cf8      	ldrb	r0, [r7, #19]
 800fd54:	7d3c      	ldrb	r4, [r7, #20]
 800fd56:	7d7d      	ldrb	r5, [r7, #21]
 800fd58:	7dbe      	ldrb	r6, [r7, #22]
 800fd5a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800fd5e:	f8cd c01c 	str.w	ip, [sp, #28]
 800fd62:	9606      	str	r6, [sp, #24]
 800fd64:	9505      	str	r5, [sp, #20]
 800fd66:	9404      	str	r4, [sp, #16]
 800fd68:	9003      	str	r0, [sp, #12]
 800fd6a:	9102      	str	r1, [sp, #8]
 800fd6c:	9201      	str	r2, [sp, #4]
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	4b24      	ldr	r3, [pc, #144]	; (800fe04 <PrintIds+0xd0>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	2100      	movs	r1, #0
 800fd76:	2002      	movs	r0, #2
 800fd78:	f010 f90e 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800fd7c:	f107 0318 	add.w	r3, r7, #24
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 fbed 	bl	8010560 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800fd86:	7e3b      	ldrb	r3, [r7, #24]
 800fd88:	7e7a      	ldrb	r2, [r7, #25]
 800fd8a:	7eb9      	ldrb	r1, [r7, #26]
 800fd8c:	7ef8      	ldrb	r0, [r7, #27]
 800fd8e:	7f3c      	ldrb	r4, [r7, #28]
 800fd90:	7f7d      	ldrb	r5, [r7, #29]
 800fd92:	7fbe      	ldrb	r6, [r7, #30]
 800fd94:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800fd98:	f8cd c01c 	str.w	ip, [sp, #28]
 800fd9c:	9606      	str	r6, [sp, #24]
 800fd9e:	9505      	str	r5, [sp, #20]
 800fda0:	9404      	str	r4, [sp, #16]
 800fda2:	9003      	str	r0, [sp, #12]
 800fda4:	9102      	str	r1, [sp, #8]
 800fda6:	9201      	str	r2, [sp, #4]
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	4b17      	ldr	r3, [pc, #92]	; (800fe08 <PrintIds+0xd4>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	2100      	movs	r1, #0
 800fdb0:	2002      	movs	r0, #2
 800fdb2:	f010 f8f1 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800fdb6:	f107 020c 	add.w	r2, r7, #12
 800fdba:	79fb      	ldrb	r3, [r7, #7]
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 fc00 	bl	80105c4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800fdc4:	f107 030c 	add.w	r3, r7, #12
 800fdc8:	3303      	adds	r3, #3
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	f107 030c 	add.w	r3, r7, #12
 800fdd2:	3302      	adds	r3, #2
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	f107 030c 	add.w	r3, r7, #12
 800fddc:	3301      	adds	r3, #1
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f107 030c 	add.w	r3, r7, #12
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	9303      	str	r3, [sp, #12]
 800fdea:	9002      	str	r0, [sp, #8]
 800fdec:	9101      	str	r1, [sp, #4]
 800fdee:	9200      	str	r2, [sp, #0]
 800fdf0:	4b06      	ldr	r3, [pc, #24]	; (800fe0c <PrintIds+0xd8>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	2002      	movs	r0, #2
 800fdf8:	f010 f8ce 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800fdfc:	bf00      	nop
 800fdfe:	3724      	adds	r7, #36	; 0x24
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe04:	080215c8 	.word	0x080215c8
 800fe08:	08021608 	.word	0x08021608
 800fe0c:	08021648 	.word	0x08021648

0800fe10 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	6039      	str	r1, [r7, #0]
 800fe1a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	73fb      	strb	r3, [r7, #15]
 800fe20:	e01a      	b.n	800fe58 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fe22:	4b12      	ldr	r3, [pc, #72]	; (800fe6c <GetKeyByID+0x5c>)
 800fe24:	6819      	ldr	r1, [r3, #0]
 800fe26:	7bfa      	ldrb	r2, [r7, #15]
 800fe28:	4613      	mov	r3, r2
 800fe2a:	011b      	lsls	r3, r3, #4
 800fe2c:	4413      	add	r3, r2
 800fe2e:	440b      	add	r3, r1
 800fe30:	3318      	adds	r3, #24
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	79fa      	ldrb	r2, [r7, #7]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d10b      	bne.n	800fe52 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800fe3a:	4b0c      	ldr	r3, [pc, #48]	; (800fe6c <GetKeyByID+0x5c>)
 800fe3c:	6819      	ldr	r1, [r3, #0]
 800fe3e:	7bfa      	ldrb	r2, [r7, #15]
 800fe40:	4613      	mov	r3, r2
 800fe42:	011b      	lsls	r3, r3, #4
 800fe44:	4413      	add	r3, r2
 800fe46:	3318      	adds	r3, #24
 800fe48:	18ca      	adds	r2, r1, r3
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e006      	b.n	800fe60 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe52:	7bfb      	ldrb	r3, [r7, #15]
 800fe54:	3301      	adds	r3, #1
 800fe56:	73fb      	strb	r3, [r7, #15]
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
 800fe5a:	2b0a      	cmp	r3, #10
 800fe5c:	d9e1      	bls.n	800fe22 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fe5e:	2303      	movs	r3, #3
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bc80      	pop	{r7}
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	20000724 	.word	0x20000724

0800fe70 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800fe70:	b590      	push	{r4, r7, lr}
 800fe72:	b0d1      	sub	sp, #324	; 0x144
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800fe7a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800fe7e:	6020      	str	r0, [r4, #0]
 800fe80:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800fe84:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800fe88:	6001      	str	r1, [r0, #0]
 800fe8a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800fe8e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800fe92:	600a      	str	r2, [r1, #0]
 800fe94:	461a      	mov	r2, r3
 800fe96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fe9a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800fe9e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800fea0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fea4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d003      	beq.n	800feb6 <ComputeCmac+0x46>
 800feae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d101      	bne.n	800feba <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800feb6:	2302      	movs	r3, #2
 800feb8:	e05d      	b.n	800ff76 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800feba:	f107 0314 	add.w	r3, r7, #20
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fe ff02 	bl	800ecc8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800fec4:	f107 0210 	add.w	r2, r7, #16
 800fec8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fecc:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	4611      	mov	r1, r2
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7ff ff9b 	bl	800fe10 <GetKeyByID>
 800feda:	4603      	mov	r3, r0
 800fedc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fee0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d144      	bne.n	800ff72 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800fee8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800feec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	1c5a      	adds	r2, r3, #1
 800fef4:	f107 0314 	add.w	r3, r7, #20
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe fefd 	bl	800ecfa <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ff00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d009      	beq.n	800ff22 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ff0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ff16:	f107 0014 	add.w	r0, r7, #20
 800ff1a:	2210      	movs	r2, #16
 800ff1c:	6819      	ldr	r1, [r3, #0]
 800ff1e:	f7fe fefb 	bl	800ed18 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ff22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff26:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800ff2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ff32:	f107 0014 	add.w	r0, r7, #20
 800ff36:	6812      	ldr	r2, [r2, #0]
 800ff38:	6819      	ldr	r1, [r3, #0]
 800ff3a:	f7fe feed 	bl	800ed18 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ff3e:	f107 0214 	add.w	r2, r7, #20
 800ff42:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ff46:	4611      	mov	r1, r2
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe ffa7 	bl	800ee9c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ff4e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800ff52:	461a      	mov	r2, r3
 800ff54:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ff58:	021b      	lsls	r3, r3, #8
 800ff5a:	431a      	orrs	r2, r3
 800ff5c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ff60:	041b      	lsls	r3, r3, #16
 800ff62:	431a      	orrs	r2, r3
 800ff64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ff68:	061b      	lsls	r3, r3, #24
 800ff6a:	431a      	orrs	r2, r3
 800ff6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ff70:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ff72:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd90      	pop	{r4, r7, pc}

0800ff80 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d101      	bne.n	800ff92 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ff8e:	2302      	movs	r3, #2
 800ff90:	e00a      	b.n	800ffa8 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800ff92:	4a07      	ldr	r2, [pc, #28]	; (800ffb0 <SecureElementInit+0x30>)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800ff98:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <SecureElementInit+0x30>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	22d8      	movs	r2, #216	; 0xd8
 800ff9e:	4905      	ldr	r1, [pc, #20]	; (800ffb4 <SecureElementInit+0x34>)
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f00b fc34 	bl	801b80e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800ffa6:	2300      	movs	r3, #0
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	20000724 	.word	0x20000724
 800ffb4:	08021f78 	.word	0x08021f78

0800ffb8 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800ffc6:	f107 030c 	add.w	r3, r7, #12
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f000 fa98 	bl	8010500 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800ffd0:	f107 0308 	add.w	r3, r7, #8
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	2001      	movs	r0, #1
 800ffd8:	f000 faf4 	bl	80105c4 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d024      	beq.n	801002c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	75bb      	strb	r3, [r7, #22]
 800ffea:	e00c      	b.n	8010006 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800ffec:	7dbb      	ldrb	r3, [r7, #22]
 800ffee:	3318      	adds	r3, #24
 800fff0:	443b      	add	r3, r7
 800fff2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800fffa:	2301      	movs	r3, #1
 800fffc:	75fb      	strb	r3, [r7, #23]
                break;
 800fffe:	e005      	b.n	801000c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010000:	7dbb      	ldrb	r3, [r7, #22]
 8010002:	3301      	adds	r3, #1
 8010004:	75bb      	strb	r3, [r7, #22]
 8010006:	7dbb      	ldrb	r3, [r7, #22]
 8010008:	2b07      	cmp	r3, #7
 801000a:	d9ef      	bls.n	800ffec <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 801000c:	7dfb      	ldrb	r3, [r7, #23]
 801000e:	f083 0301 	eor.w	r3, r3, #1
 8010012:	b2db      	uxtb	r3, r3
 8010014:	2b00      	cmp	r3, #0
 8010016:	d009      	beq.n	801002c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 8010018:	f107 020c 	add.w	r2, r7, #12
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4610      	mov	r0, r2
 8010020:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 8010022:	f107 030c 	add.w	r3, r7, #12
 8010026:	4618      	mov	r0, r3
 8010028:	f000 fa52 	bl	80104d0 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00c      	beq.n	801004c <SecureElementInitMcuID+0x94>
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d109      	bne.n	801004c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 8010038:	f107 0208 	add.w	r2, r7, #8
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	4610      	mov	r0, r2
 8010040:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	4619      	mov	r1, r3
 8010046:	2001      	movs	r0, #1
 8010048:	f000 faa2 	bl	8010590 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3718      	adds	r7, #24
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	4603      	mov	r3, r0
 8010060:	6039      	str	r1, [r7, #0]
 8010062:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010064:	2300      	movs	r3, #0
 8010066:	73fb      	strb	r3, [r7, #15]
 8010068:	e01a      	b.n	80100a0 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801006a:	4b12      	ldr	r3, [pc, #72]	; (80100b4 <SecureElementGetKeyByID+0x5c>)
 801006c:	6819      	ldr	r1, [r3, #0]
 801006e:	7bfa      	ldrb	r2, [r7, #15]
 8010070:	4613      	mov	r3, r2
 8010072:	011b      	lsls	r3, r3, #4
 8010074:	4413      	add	r3, r2
 8010076:	440b      	add	r3, r1
 8010078:	3318      	adds	r3, #24
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	79fa      	ldrb	r2, [r7, #7]
 801007e:	429a      	cmp	r2, r3
 8010080:	d10b      	bne.n	801009a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8010082:	4b0c      	ldr	r3, [pc, #48]	; (80100b4 <SecureElementGetKeyByID+0x5c>)
 8010084:	6819      	ldr	r1, [r3, #0]
 8010086:	7bfa      	ldrb	r2, [r7, #15]
 8010088:	4613      	mov	r3, r2
 801008a:	011b      	lsls	r3, r3, #4
 801008c:	4413      	add	r3, r2
 801008e:	3318      	adds	r3, #24
 8010090:	18ca      	adds	r2, r1, r3
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010096:	2300      	movs	r3, #0
 8010098:	e006      	b.n	80100a8 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801009a:	7bfb      	ldrb	r3, [r7, #15]
 801009c:	3301      	adds	r3, #1
 801009e:	73fb      	strb	r3, [r7, #15]
 80100a0:	7bfb      	ldrb	r3, [r7, #15]
 80100a2:	2b0a      	cmp	r3, #10
 80100a4:	d9e1      	bls.n	801006a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80100a6:	2303      	movs	r3, #3
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bc80      	pop	{r7}
 80100b0:	4770      	bx	lr
 80100b2:	bf00      	nop
 80100b4:	20000724 	.word	0x20000724

080100b8 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 80100bc:	2000      	movs	r0, #0
 80100be:	f7ff fdab 	bl	800fc18 <PrintKey>
    PrintKey( NWK_KEY );
 80100c2:	2001      	movs	r0, #1
 80100c4:	f7ff fda8 	bl	800fc18 <PrintKey>
    PrintKey( APP_S_KEY );
 80100c8:	2009      	movs	r0, #9
 80100ca:	f7ff fda5 	bl	800fc18 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80100ce:	2008      	movs	r0, #8
 80100d0:	f7ff fda2 	bl	800fc18 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 80100d4:	2000      	movs	r0, #0
 80100d6:	f7ff fe2d 	bl	800fd34 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	bd80      	pop	{r7, pc}

080100e0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	4603      	mov	r3, r0
 80100e8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 80100ea:	200b      	movs	r0, #11
 80100ec:	f7ff fd94 	bl	800fc18 <PrintKey>
    PrintKey( MC_KE_KEY );
 80100f0:	200c      	movs	r0, #12
 80100f2:	f7ff fd91 	bl	800fc18 <PrintKey>
    PrintKey( APP_S_KEY );
 80100f6:	2009      	movs	r0, #9
 80100f8:	f7ff fd8e 	bl	800fc18 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80100fc:	2008      	movs	r0, #8
 80100fe:	f7ff fd8b 	bl	800fc18 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 8010102:	200a      	movs	r0, #10
 8010104:	f7ff fd88 	bl	800fc18 <PrintKey>
    PrintIds( mode );
 8010108:	79fb      	ldrb	r3, [r7, #7]
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff fe12 	bl	800fd34 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
	...

0801011c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b088      	sub	sp, #32
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	6039      	str	r1, [r7, #0]
 8010126:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801012e:	2302      	movs	r3, #2
 8010130:	e04c      	b.n	80101cc <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010132:	2300      	movs	r3, #0
 8010134:	77fb      	strb	r3, [r7, #31]
 8010136:	e045      	b.n	80101c4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010138:	4b26      	ldr	r3, [pc, #152]	; (80101d4 <SecureElementSetKey+0xb8>)
 801013a:	6819      	ldr	r1, [r3, #0]
 801013c:	7ffa      	ldrb	r2, [r7, #31]
 801013e:	4613      	mov	r3, r2
 8010140:	011b      	lsls	r3, r3, #4
 8010142:	4413      	add	r3, r2
 8010144:	440b      	add	r3, r1
 8010146:	3318      	adds	r3, #24
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	79fa      	ldrb	r2, [r7, #7]
 801014c:	429a      	cmp	r2, r3
 801014e:	d136      	bne.n	80101be <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	2b0d      	cmp	r3, #13
 8010154:	d123      	bne.n	801019e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8010156:	2306      	movs	r3, #6
 8010158:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 801015a:	2300      	movs	r3, #0
 801015c:	60fb      	str	r3, [r7, #12]
 801015e:	f107 0310 	add.w	r3, r7, #16
 8010162:	2200      	movs	r2, #0
 8010164:	601a      	str	r2, [r3, #0]
 8010166:	605a      	str	r2, [r3, #4]
 8010168:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 801016a:	f107 030c 	add.w	r3, r7, #12
 801016e:	220c      	movs	r2, #12
 8010170:	2110      	movs	r1, #16
 8010172:	6838      	ldr	r0, [r7, #0]
 8010174:	f000 f876 	bl	8010264 <SecureElementAesEncrypt>
 8010178:	4603      	mov	r3, r0
 801017a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 801017c:	4b15      	ldr	r3, [pc, #84]	; (80101d4 <SecureElementSetKey+0xb8>)
 801017e:	6819      	ldr	r1, [r3, #0]
 8010180:	7ffa      	ldrb	r2, [r7, #31]
 8010182:	4613      	mov	r3, r2
 8010184:	011b      	lsls	r3, r3, #4
 8010186:	4413      	add	r3, r2
 8010188:	3318      	adds	r3, #24
 801018a:	440b      	add	r3, r1
 801018c:	3301      	adds	r3, #1
 801018e:	f107 010c 	add.w	r1, r7, #12
 8010192:	2210      	movs	r2, #16
 8010194:	4618      	mov	r0, r3
 8010196:	f00b fb3a 	bl	801b80e <memcpy1>
                return retval;
 801019a:	7fbb      	ldrb	r3, [r7, #30]
 801019c:	e016      	b.n	80101cc <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 801019e:	4b0d      	ldr	r3, [pc, #52]	; (80101d4 <SecureElementSetKey+0xb8>)
 80101a0:	6819      	ldr	r1, [r3, #0]
 80101a2:	7ffa      	ldrb	r2, [r7, #31]
 80101a4:	4613      	mov	r3, r2
 80101a6:	011b      	lsls	r3, r3, #4
 80101a8:	4413      	add	r3, r2
 80101aa:	3318      	adds	r3, #24
 80101ac:	440b      	add	r3, r1
 80101ae:	3301      	adds	r3, #1
 80101b0:	2210      	movs	r2, #16
 80101b2:	6839      	ldr	r1, [r7, #0]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f00b fb2a 	bl	801b80e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80101ba:	2300      	movs	r3, #0
 80101bc:	e006      	b.n	80101cc <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80101be:	7ffb      	ldrb	r3, [r7, #31]
 80101c0:	3301      	adds	r3, #1
 80101c2:	77fb      	strb	r3, [r7, #31]
 80101c4:	7ffb      	ldrb	r3, [r7, #31]
 80101c6:	2b0a      	cmp	r3, #10
 80101c8:	d9b6      	bls.n	8010138 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80101ca:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3720      	adds	r7, #32
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	20000724 	.word	0x20000724

080101d8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b086      	sub	sp, #24
 80101dc:	af02      	add	r7, sp, #8
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 80101e6:	78fb      	ldrb	r3, [r7, #3]
 80101e8:	2b0b      	cmp	r3, #11
 80101ea:	d901      	bls.n	80101f0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80101ec:	2303      	movs	r3, #3
 80101ee:	e009      	b.n	8010204 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80101f0:	78fa      	ldrb	r2, [r7, #3]
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	9300      	str	r3, [sp, #0]
 80101f6:	4613      	mov	r3, r2
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	68b9      	ldr	r1, [r7, #8]
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f7ff fe37 	bl	800fe70 <ComputeCmac>
 8010202:	4603      	mov	r3, r0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3710      	adds	r7, #16
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b088      	sub	sp, #32
 8010210:	af02      	add	r7, sp, #8
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
 8010218:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d101      	bne.n	8010224 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010220:	2302      	movs	r3, #2
 8010222:	e01b      	b.n	801025c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 8010224:	2306      	movs	r3, #6
 8010226:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8010228:	2300      	movs	r3, #0
 801022a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801022c:	78fa      	ldrb	r2, [r7, #3]
 801022e:	f107 0310 	add.w	r3, r7, #16
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	4613      	mov	r3, r2
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	68f9      	ldr	r1, [r7, #12]
 801023a:	2000      	movs	r0, #0
 801023c:	f7ff fe18 	bl	800fe70 <ComputeCmac>
 8010240:	4603      	mov	r3, r0
 8010242:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010244:	7dfb      	ldrb	r3, [r7, #23]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d001      	beq.n	801024e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	e006      	b.n	801025c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	429a      	cmp	r2, r3
 8010254:	d001      	beq.n	801025a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010256:	2301      	movs	r3, #1
 8010258:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 801025a:	7dfb      	ldrb	r3, [r7, #23]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3718      	adds	r7, #24
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b0c2      	sub	sp, #264	; 0x108
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010270:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8010274:	6001      	str	r1, [r0, #0]
 8010276:	4611      	mov	r1, r2
 8010278:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801027c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010280:	6013      	str	r3, [r2, #0]
 8010282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010286:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801028a:	460a      	mov	r2, r1
 801028c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d006      	beq.n	80102a2 <SecureElementAesEncrypt+0x3e>
 8010294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d101      	bne.n	80102a6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80102a2:	2302      	movs	r3, #2
 80102a4:	e059      	b.n	801035a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 80102a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f003 030f 	and.w	r3, r3, #15
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d001      	beq.n	80102bc <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80102b8:	2305      	movs	r3, #5
 80102ba:	e04e      	b.n	801035a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80102bc:	f107 0314 	add.w	r3, r7, #20
 80102c0:	22f0      	movs	r2, #240	; 0xf0
 80102c2:	2100      	movs	r1, #0
 80102c4:	4618      	mov	r0, r3
 80102c6:	f00b fadd 	bl	801b884 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80102ca:	f107 0210 	add.w	r2, r7, #16
 80102ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102d2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f7ff fd98 	bl	800fe10 <GetKeyByID>
 80102e0:	4603      	mov	r3, r0
 80102e2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80102e6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d133      	bne.n	8010356 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	3301      	adds	r3, #1
 80102f2:	f107 0214 	add.w	r2, r7, #20
 80102f6:	2110      	movs	r1, #16
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7ff fb65 	bl	800f9c8 <lorawan_aes_set_key>

        uint8_t block = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 8010304:	e020      	b.n	8010348 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8010306:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	18d0      	adds	r0, r2, r3
 801030e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8010312:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8010316:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 801031a:	6812      	ldr	r2, [r2, #0]
 801031c:	4413      	add	r3, r2
 801031e:	f107 0214 	add.w	r2, r7, #20
 8010322:	4619      	mov	r1, r3
 8010324:	f7ff fc2e 	bl	800fb84 <lorawan_aes_encrypt>
            block = block + 16;
 8010328:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801032c:	3310      	adds	r3, #16
 801032e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 8010332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010336:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801033a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801033e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8010342:	6812      	ldr	r2, [r2, #0]
 8010344:	3a10      	subs	r2, #16
 8010346:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8010348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801034c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1d7      	bne.n	8010306 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8010356:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 801035a:	4618      	mov	r0, r3
 801035c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b088      	sub	sp, #32
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	460b      	mov	r3, r1
 801036e:	70fb      	strb	r3, [r7, #3]
 8010370:	4613      	mov	r3, r2
 8010372:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d101      	bne.n	801037e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801037a:	2302      	movs	r3, #2
 801037c:	e02e      	b.n	80103dc <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 801037e:	2306      	movs	r3, #6
 8010380:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8010382:	78bb      	ldrb	r3, [r7, #2]
 8010384:	2b0c      	cmp	r3, #12
 8010386:	d104      	bne.n	8010392 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010388:	78fb      	ldrb	r3, [r7, #3]
 801038a:	2b0b      	cmp	r3, #11
 801038c:	d001      	beq.n	8010392 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801038e:	2303      	movs	r3, #3
 8010390:	e024      	b.n	80103dc <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8010392:	2300      	movs	r3, #0
 8010394:	60fb      	str	r3, [r7, #12]
 8010396:	f107 0310 	add.w	r3, r7, #16
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
 801039e:	605a      	str	r2, [r3, #4]
 80103a0:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 80103a2:	f107 030c 	add.w	r3, r7, #12
 80103a6:	78fa      	ldrb	r2, [r7, #3]
 80103a8:	2110      	movs	r1, #16
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7ff ff5a 	bl	8010264 <SecureElementAesEncrypt>
 80103b0:	4603      	mov	r3, r0
 80103b2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80103b4:	7ffb      	ldrb	r3, [r7, #31]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d001      	beq.n	80103be <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 80103ba:	7ffb      	ldrb	r3, [r7, #31]
 80103bc:	e00e      	b.n	80103dc <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 80103be:	f107 020c 	add.w	r2, r7, #12
 80103c2:	78bb      	ldrb	r3, [r7, #2]
 80103c4:	4611      	mov	r1, r2
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff fea8 	bl	801011c <SecureElementSetKey>
 80103cc:	4603      	mov	r3, r0
 80103ce:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80103d0:	7ffb      	ldrb	r3, [r7, #31]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d001      	beq.n	80103da <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 80103d6:	7ffb      	ldrb	r3, [r7, #31]
 80103d8:	e000      	b.n	80103dc <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 80103da:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3720      	adds	r7, #32
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60b9      	str	r1, [r7, #8]
 80103ec:	607b      	str	r3, [r7, #4]
 80103ee:	4603      	mov	r3, r0
 80103f0:	73fb      	strb	r3, [r7, #15]
 80103f2:	4613      	mov	r3, r2
 80103f4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d005      	beq.n	8010408 <SecureElementProcessJoinAccept+0x24>
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d002      	beq.n	8010408 <SecureElementProcessJoinAccept+0x24>
 8010402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010404:	2b00      	cmp	r3, #0
 8010406:	d101      	bne.n	801040c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010408:	2302      	movs	r3, #2
 801040a:	e05c      	b.n	80104c6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 801040c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010410:	2b21      	cmp	r3, #33	; 0x21
 8010412:	d901      	bls.n	8010418 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010414:	2305      	movs	r3, #5
 8010416:	e056      	b.n	80104c6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 8010418:	2301      	movs	r3, #1
 801041a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 801041c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010420:	b29b      	uxth	r3, r3
 8010422:	461a      	mov	r2, r3
 8010424:	6879      	ldr	r1, [r7, #4]
 8010426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010428:	f00b f9f1 	bl	801b80e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	1c58      	adds	r0, r3, #1
 8010430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010434:	3b01      	subs	r3, #1
 8010436:	4619      	mov	r1, r3
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	3301      	adds	r3, #1
 801043c:	7dfa      	ldrb	r2, [r7, #23]
 801043e:	f7ff ff11 	bl	8010264 <SecureElementAesEncrypt>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010448:	2307      	movs	r3, #7
 801044a:	e03c      	b.n	80104c6 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044e:	330b      	adds	r3, #11
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	09db      	lsrs	r3, r3, #7
 8010454:	b2da      	uxtb	r2, r3
 8010456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010458:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 801045a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801045e:	3b04      	subs	r3, #4
 8010460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010462:	4413      	add	r3, r2
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	4619      	mov	r1, r3
 8010468:	f897 3020 	ldrb.w	r3, [r7, #32]
 801046c:	3b03      	subs	r3, #3
 801046e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010470:	4413      	add	r3, r2
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	021b      	lsls	r3, r3, #8
 8010476:	ea41 0203 	orr.w	r2, r1, r3
 801047a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801047e:	3b02      	subs	r3, #2
 8010480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010482:	440b      	add	r3, r1
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	041b      	lsls	r3, r3, #16
 8010488:	431a      	orrs	r2, r3
 801048a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801048e:	3b01      	subs	r3, #1
 8010490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010492:	440b      	add	r3, r1
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	061b      	lsls	r3, r3, #24
 8010498:	4313      	orrs	r3, r2
 801049a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10d      	bne.n	80104c0 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80104a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104a8:	3b04      	subs	r3, #4
 80104aa:	4619      	mov	r1, r3
 80104ac:	2301      	movs	r3, #1
 80104ae:	693a      	ldr	r2, [r7, #16]
 80104b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104b2:	f7ff feab 	bl	801020c <SecureElementVerifyAesCmac>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d003      	beq.n	80104c4 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80104bc:	2301      	movs	r3, #1
 80104be:	e002      	b.n	80104c6 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80104c0:	2304      	movs	r3, #4
 80104c2:	e000      	b.n	80104c6 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3718      	adds	r7, #24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
	...

080104d0 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d101      	bne.n	80104e2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80104de:	2302      	movs	r3, #2
 80104e0:	e007      	b.n	80104f2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 80104e2:	4b06      	ldr	r3, [pc, #24]	; (80104fc <SecureElementSetDevEui+0x2c>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2208      	movs	r2, #8
 80104e8:	6879      	ldr	r1, [r7, #4]
 80104ea:	4618      	mov	r0, r3
 80104ec:	f00b f98f 	bl	801b80e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80104f0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3708      	adds	r7, #8
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	20000724 	.word	0x20000724

08010500 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d101      	bne.n	8010512 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801050e:	2302      	movs	r3, #2
 8010510:	e007      	b.n	8010522 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8010512:	4b06      	ldr	r3, [pc, #24]	; (801052c <SecureElementGetDevEui+0x2c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2208      	movs	r2, #8
 8010518:	4619      	mov	r1, r3
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f00b f977 	bl	801b80e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010520:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010522:	4618      	mov	r0, r3
 8010524:	3708      	adds	r7, #8
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	20000724 	.word	0x20000724

08010530 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d101      	bne.n	8010542 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801053e:	2302      	movs	r3, #2
 8010540:	e008      	b.n	8010554 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8010542:	4b06      	ldr	r3, [pc, #24]	; (801055c <SecureElementSetJoinEui+0x2c>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	3308      	adds	r3, #8
 8010548:	2208      	movs	r2, #8
 801054a:	6879      	ldr	r1, [r7, #4]
 801054c:	4618      	mov	r0, r3
 801054e:	f00b f95e 	bl	801b80e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010552:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010554:	4618      	mov	r0, r3
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	20000724 	.word	0x20000724

08010560 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d101      	bne.n	8010572 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801056e:	2302      	movs	r3, #2
 8010570:	e008      	b.n	8010584 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8010572:	4b06      	ldr	r3, [pc, #24]	; (801058c <SecureElementGetJoinEui+0x2c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	3308      	adds	r3, #8
 8010578:	2208      	movs	r2, #8
 801057a:	4619      	mov	r1, r3
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f00b f946 	bl	801b80e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010582:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010584:	4618      	mov	r0, r3
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	20000724 	.word	0x20000724

08010590 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	6039      	str	r1, [r7, #0]
 801059a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 801059c:	79fb      	ldrb	r3, [r7, #7]
 801059e:	2b02      	cmp	r3, #2
 80105a0:	d104      	bne.n	80105ac <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80105a2:	4b07      	ldr	r3, [pc, #28]	; (80105c0 <SecureElementSetDevAddr+0x30>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	611a      	str	r2, [r3, #16]
 80105aa:	e003      	b.n	80105b4 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 80105ac:	4b04      	ldr	r3, [pc, #16]	; (80105c0 <SecureElementSetDevAddr+0x30>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 80105b4:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	370c      	adds	r7, #12
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bc80      	pop	{r7}
 80105be:	4770      	bx	lr
 80105c0:	20000724 	.word	0x20000724

080105c4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	4603      	mov	r3, r0
 80105cc:	6039      	str	r1, [r7, #0]
 80105ce:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d101      	bne.n	80105da <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80105d6:	2302      	movs	r3, #2
 80105d8:	e00e      	b.n	80105f8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80105da:	79fb      	ldrb	r3, [r7, #7]
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d105      	bne.n	80105ec <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80105e0:	4b08      	ldr	r3, [pc, #32]	; (8010604 <SecureElementGetDevAddr+0x40>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	691a      	ldr	r2, [r3, #16]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	601a      	str	r2, [r3, #0]
 80105ea:	e004      	b.n	80105f6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80105ec:	4b05      	ldr	r3, [pc, #20]	; (8010604 <SecureElementGetDevAddr+0x40>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	695a      	ldr	r2, [r3, #20]
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80105f6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bc80      	pop	{r7}
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	20000724 	.word	0x20000724

08010608 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 8010612:	4a29      	ldr	r2, [pc, #164]	; (80106b8 <LmHandlerInit+0xb0>)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8010618:	4b28      	ldr	r3, [pc, #160]	; (80106bc <LmHandlerInit+0xb4>)
 801061a:	4a29      	ldr	r2, [pc, #164]	; (80106c0 <LmHandlerInit+0xb8>)
 801061c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 801061e:	4b27      	ldr	r3, [pc, #156]	; (80106bc <LmHandlerInit+0xb4>)
 8010620:	4a28      	ldr	r2, [pc, #160]	; (80106c4 <LmHandlerInit+0xbc>)
 8010622:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8010624:	4b25      	ldr	r3, [pc, #148]	; (80106bc <LmHandlerInit+0xb4>)
 8010626:	4a28      	ldr	r2, [pc, #160]	; (80106c8 <LmHandlerInit+0xc0>)
 8010628:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 801062a:	4b24      	ldr	r3, [pc, #144]	; (80106bc <LmHandlerInit+0xb4>)
 801062c:	4a27      	ldr	r2, [pc, #156]	; (80106cc <LmHandlerInit+0xc4>)
 801062e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8010630:	4b21      	ldr	r3, [pc, #132]	; (80106b8 <LmHandlerInit+0xb0>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4a26      	ldr	r2, [pc, #152]	; (80106d0 <LmHandlerInit+0xc8>)
 8010638:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 801063a:	4b1f      	ldr	r3, [pc, #124]	; (80106b8 <LmHandlerInit+0xb0>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	4a23      	ldr	r2, [pc, #140]	; (80106d0 <LmHandlerInit+0xc8>)
 8010642:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8010644:	4b1c      	ldr	r3, [pc, #112]	; (80106b8 <LmHandlerInit+0xb0>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	4a21      	ldr	r2, [pc, #132]	; (80106d0 <LmHandlerInit+0xc8>)
 801064c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 801064e:	4b1a      	ldr	r3, [pc, #104]	; (80106b8 <LmHandlerInit+0xb0>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	4a1e      	ldr	r2, [pc, #120]	; (80106d0 <LmHandlerInit+0xc8>)
 8010656:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8010658:	4b1d      	ldr	r3, [pc, #116]	; (80106d0 <LmHandlerInit+0xc8>)
 801065a:	4a1e      	ldr	r2, [pc, #120]	; (80106d4 <LmHandlerInit+0xcc>)
 801065c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 801065e:	4b16      	ldr	r3, [pc, #88]	; (80106b8 <LmHandlerInit+0xb0>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	4a1a      	ldr	r2, [pc, #104]	; (80106d0 <LmHandlerInit+0xc8>)
 8010666:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	4a1b      	ldr	r2, [pc, #108]	; (80106d8 <LmHandlerInit+0xd0>)
 801066c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 801066e:	4b12      	ldr	r3, [pc, #72]	; (80106b8 <LmHandlerInit+0xb0>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010674:	4a18      	ldr	r2, [pc, #96]	; (80106d8 <LmHandlerInit+0xd0>)
 8010676:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8010678:	4b17      	ldr	r3, [pc, #92]	; (80106d8 <LmHandlerInit+0xd0>)
 801067a:	4a18      	ldr	r2, [pc, #96]	; (80106dc <LmHandlerInit+0xd4>)
 801067c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 801067e:	4b16      	ldr	r3, [pc, #88]	; (80106d8 <LmHandlerInit+0xd0>)
 8010680:	4a17      	ldr	r2, [pc, #92]	; (80106e0 <LmHandlerInit+0xd8>)
 8010682:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8010684:	4914      	ldr	r1, [pc, #80]	; (80106d8 <LmHandlerInit+0xd0>)
 8010686:	2000      	movs	r0, #0
 8010688:	f000 fdb4 	bl	80111f4 <LmHandlerPackageRegister>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d002      	beq.n	8010698 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 8010692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010696:	e00a      	b.n	80106ae <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8010698:	463b      	mov	r3, r7
 801069a:	4618      	mov	r0, r3
 801069c:	f001 fd2a 	bl	80120f4 <LmhpPackagesRegistrationInit>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d002      	beq.n	80106ac <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 80106a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106aa:	e000      	b.n	80106ae <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 80106ac:	2300      	movs	r3, #0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	2000077c 	.word	0x2000077c
 80106bc:	20000780 	.word	0x20000780
 80106c0:	08010ecd 	.word	0x08010ecd
 80106c4:	08010f41 	.word	0x08010f41
 80106c8:	08011011 	.word	0x08011011
 80106cc:	08011161 	.word	0x08011161
 80106d0:	20000790 	.word	0x20000790
 80106d4:	080116a1 	.word	0x080116a1
 80106d8:	20000740 	.word	0x20000740
 80106dc:	080114b5 	.word	0x080114b5
 80106e0:	080114ed 	.word	0x080114ed

080106e4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b092      	sub	sp, #72	; 0x48
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 80106ec:	2218      	movs	r2, #24
 80106ee:	6879      	ldr	r1, [r7, #4]
 80106f0:	4884      	ldr	r0, [pc, #528]	; (8010904 <LmHandlerConfigure+0x220>)
 80106f2:	f00b f88c 	bl	801b80e <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 80106f6:	4b84      	ldr	r3, [pc, #528]	; (8010908 <LmHandlerConfigure+0x224>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 80106fc:	f7fe faa2 	bl	800ec44 <LoraInfo_GetPtr>
 8010700:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8010702:	4b80      	ldr	r3, [pc, #512]	; (8010904 <LmHandlerConfigure+0x220>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	461a      	mov	r2, r3
 8010708:	2301      	movs	r3, #1
 801070a:	4093      	lsls	r3, r2
 801070c:	461a      	mov	r2, r3
 801070e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	4013      	ands	r3, r2
 8010714:	2b00      	cmp	r3, #0
 8010716:	d106      	bne.n	8010726 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8010718:	4b7c      	ldr	r3, [pc, #496]	; (801090c <LmHandlerConfigure+0x228>)
 801071a:	2201      	movs	r2, #1
 801071c:	2100      	movs	r1, #0
 801071e:	2000      	movs	r0, #0
 8010720:	f00f fc3a 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8010724:	e7fe      	b.n	8010724 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8010726:	4b77      	ldr	r3, [pc, #476]	; (8010904 <LmHandlerConfigure+0x220>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	4978      	ldr	r1, [pc, #480]	; (8010910 <LmHandlerConfigure+0x22c>)
 801072e:	4879      	ldr	r0, [pc, #484]	; (8010914 <LmHandlerConfigure+0x230>)
 8010730:	f004 ffd4 	bl	80156dc <LoRaMacInitialization>
 8010734:	4603      	mov	r3, r0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d002      	beq.n	8010740 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 801073a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801073e:	e0dc      	b.n	80108fa <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 8010740:	2327      	movs	r3, #39	; 0x27
 8010742:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010744:	f107 0318 	add.w	r3, r7, #24
 8010748:	4618      	mov	r0, r3
 801074a:	f005 fd53 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d103      	bne.n	801075c <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 8010754:	4b70      	ldr	r3, [pc, #448]	; (8010918 <LmHandlerConfigure+0x234>)
 8010756:	2201      	movs	r2, #1
 8010758:	701a      	strb	r2, [r3, #0]
 801075a:	e02a      	b.n	80107b2 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 801075c:	2328      	movs	r3, #40	; 0x28
 801075e:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8010760:	4b6e      	ldr	r3, [pc, #440]	; (801091c <LmHandlerConfigure+0x238>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	691b      	ldr	r3, [r3, #16]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00c      	beq.n	8010784 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 801076a:	f107 0318 	add.w	r3, r7, #24
 801076e:	4618      	mov	r0, r3
 8010770:	f005 fb68 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8010774:	4b69      	ldr	r3, [pc, #420]	; (801091c <LmHandlerConfigure+0x238>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	691b      	ldr	r3, [r3, #16]
 801077a:	69fa      	ldr	r2, [r7, #28]
 801077c:	f240 51cc 	movw	r1, #1484	; 0x5cc
 8010780:	4610      	mov	r0, r2
 8010782:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 8010784:	2327      	movs	r3, #39	; 0x27
 8010786:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010788:	f107 0318 	add.w	r3, r7, #24
 801078c:	4618      	mov	r0, r3
 801078e:	f005 fd31 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d10c      	bne.n	80107b2 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010798:	2301      	movs	r3, #1
 801079a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 801079c:	f107 0318 	add.w	r3, r7, #24
 80107a0:	4618      	mov	r0, r3
 80107a2:	f005 fb4f 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 80107a6:	7f3b      	ldrb	r3, [r7, #28]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d002      	beq.n	80107b2 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 80107ac:	4b5a      	ldr	r3, [pc, #360]	; (8010918 <LmHandlerConfigure+0x234>)
 80107ae:	2201      	movs	r2, #1
 80107b0:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 80107b2:	4b59      	ldr	r3, [pc, #356]	; (8010918 <LmHandlerConfigure+0x234>)
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d022      	beq.n	8010800 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80107ba:	4b58      	ldr	r3, [pc, #352]	; (801091c <LmHandlerConfigure+0x238>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	69db      	ldr	r3, [r3, #28]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d004      	beq.n	80107ce <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80107c4:	4b55      	ldr	r3, [pc, #340]	; (801091c <LmHandlerConfigure+0x238>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	69db      	ldr	r3, [r3, #28]
 80107ca:	2000      	movs	r0, #0
 80107cc:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 80107ce:	2327      	movs	r3, #39	; 0x27
 80107d0:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80107d2:	f107 0318 	add.w	r3, r7, #24
 80107d6:	4618      	mov	r0, r3
 80107d8:	f005 fb34 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80107e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80107e6:	4b47      	ldr	r3, [pc, #284]	; (8010904 <LmHandlerConfigure+0x220>)
 80107e8:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 80107ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ec:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80107f0:	4b44      	ldr	r3, [pc, #272]	; (8010904 <LmHandlerConfigure+0x220>)
 80107f2:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 80107f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80107fa:	4b42      	ldr	r3, [pc, #264]	; (8010904 <LmHandlerConfigure+0x220>)
 80107fc:	709a      	strb	r2, [r3, #2]
 80107fe:	e008      	b.n	8010812 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 8010800:	2305      	movs	r3, #5
 8010802:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8010804:	2300      	movs	r3, #0
 8010806:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8010808:	f107 0318 	add.w	r3, r7, #24
 801080c:	4618      	mov	r0, r3
 801080e:	f005 fcf1 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8010812:	4b3f      	ldr	r3, [pc, #252]	; (8010910 <LmHandlerConfigure+0x22c>)
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	4a3e      	ldr	r2, [pc, #248]	; (8010910 <LmHandlerConfigure+0x22c>)
 8010818:	68d2      	ldr	r2, [r2, #12]
 801081a:	4611      	mov	r1, r2
 801081c:	4618      	mov	r0, r3
 801081e:	f7ff fbcb 	bl	800ffb8 <SecureElementInitMcuID>
 8010822:	4603      	mov	r3, r0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801082c:	e065      	b.n	80108fa <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 801082e:	2306      	movs	r3, #6
 8010830:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010832:	f107 0318 	add.w	r3, r7, #24
 8010836:	4618      	mov	r0, r3
 8010838:	f005 fb04 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	4a38      	ldr	r2, [pc, #224]	; (8010920 <LmHandlerConfigure+0x23c>)
 8010840:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010842:	f107 0318 	add.w	r3, r7, #24
 8010846:	4618      	mov	r0, r3
 8010848:	f005 fcd4 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 801084c:	2302      	movs	r3, #2
 801084e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8010850:	4b33      	ldr	r3, [pc, #204]	; (8010920 <LmHandlerConfigure+0x23c>)
 8010852:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010854:	f107 0318 	add.w	r3, r7, #24
 8010858:	4618      	mov	r0, r3
 801085a:	f005 faf3 	bl	8015e44 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 801085e:	2303      	movs	r3, #3
 8010860:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8010862:	4b30      	ldr	r3, [pc, #192]	; (8010924 <LmHandlerConfigure+0x240>)
 8010864:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010866:	f107 0318 	add.w	r3, r7, #24
 801086a:	4618      	mov	r0, r3
 801086c:	f005 faea 	bl	8015e44 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 8010870:	f7ff fc22 	bl	80100b8 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 8010874:	230f      	movs	r3, #15
 8010876:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8010878:	2301      	movs	r3, #1
 801087a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801087c:	f107 0318 	add.w	r3, r7, #24
 8010880:	4618      	mov	r0, r3
 8010882:	f005 fcb7 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 8010886:	2310      	movs	r3, #16
 8010888:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 801088a:	2300      	movs	r3, #0
 801088c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801088e:	f107 0318 	add.w	r3, r7, #24
 8010892:	4618      	mov	r0, r3
 8010894:	f005 fcae 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 8010898:	2304      	movs	r3, #4
 801089a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 801089c:	4b19      	ldr	r3, [pc, #100]	; (8010904 <LmHandlerConfigure+0x220>)
 801089e:	789b      	ldrb	r3, [r3, #2]
 80108a0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80108a2:	f107 0318 	add.w	r3, r7, #24
 80108a6:	4618      	mov	r0, r3
 80108a8:	f005 fca4 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80108ac:	233a      	movs	r3, #58	; 0x3a
 80108ae:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80108b0:	4b14      	ldr	r3, [pc, #80]	; (8010904 <LmHandlerConfigure+0x220>)
 80108b2:	695b      	ldr	r3, [r3, #20]
 80108b4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80108b6:	f107 0318 	add.w	r3, r7, #24
 80108ba:	4618      	mov	r0, r3
 80108bc:	f005 fc9a 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80108c0:	230f      	movs	r3, #15
 80108c2:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80108c4:	4b0f      	ldr	r3, [pc, #60]	; (8010904 <LmHandlerConfigure+0x220>)
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	f107 0210 	add.w	r2, r7, #16
 80108cc:	4611      	mov	r1, r2
 80108ce:	4618      	mov	r0, r3
 80108d0:	f008 fbe5 	bl	801909e <RegionGetPhyParam>
 80108d4:	4603      	mov	r3, r0
 80108d6:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	bf14      	ite	ne
 80108de:	2301      	movne	r3, #1
 80108e0:	2300      	moveq	r3, #0
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	4b07      	ldr	r3, [pc, #28]	; (8010904 <LmHandlerConfigure+0x220>)
 80108e6:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 80108e8:	2014      	movs	r0, #20
 80108ea:	f000 fad7 	bl	8010e9c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80108ee:	4b05      	ldr	r3, [pc, #20]	; (8010904 <LmHandlerConfigure+0x220>)
 80108f0:	79db      	ldrb	r3, [r3, #7]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f006 faf8 	bl	8016ee8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3748      	adds	r7, #72	; 0x48
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	20000764 	.word	0x20000764
 8010908:	200007ac 	.word	0x200007ac
 801090c:	08021674 	.word	0x08021674
 8010910:	20000790 	.word	0x20000790
 8010914:	20000780 	.word	0x20000780
 8010918:	200008a2 	.word	0x200008a2
 801091c:	2000077c 	.word	0x2000077c
 8010920:	20000728 	.word	0x20000728
 8010924:	20000730 	.word	0x20000730

08010928 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 801092e:	f002 fe49 	bl	80135c4 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 8010932:	f000 fd8b 	bl	801144c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 8010936:	f000 fd5f 	bl	80113f8 <LmHandlerPackageIsTxPending>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d117      	bne.n	8010970 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 8010940:	4b0d      	ldr	r3, [pc, #52]	; (8010978 <LmHandlerProcess+0x50>)
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d014      	beq.n	8010972 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 8010948:	2300      	movs	r3, #0
 801094a:	703b      	strb	r3, [r7, #0]
 801094c:	2300      	movs	r3, #0
 801094e:	707b      	strb	r3, [r7, #1]
 8010950:	2300      	movs	r3, #0
 8010952:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8010954:	4b09      	ldr	r3, [pc, #36]	; (801097c <LmHandlerProcess+0x54>)
 8010956:	78d9      	ldrb	r1, [r3, #3]
 8010958:	463b      	mov	r3, r7
 801095a:	2200      	movs	r2, #0
 801095c:	4618      	mov	r0, r3
 801095e:	f000 f8d7 	bl	8010b10 <LmHandlerSend>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d104      	bne.n	8010972 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 8010968:	4b03      	ldr	r3, [pc, #12]	; (8010978 <LmHandlerProcess+0x50>)
 801096a:	2200      	movs	r2, #0
 801096c:	701a      	strb	r2, [r3, #0]
 801096e:	e000      	b.n	8010972 <LmHandlerProcess+0x4a>
        return;
 8010970:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	200007ac 	.word	0x200007ac
 801097c:	20000764 	.word	0x20000764

08010980 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 8010980:	b480      	push	{r7}
 8010982:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 8010984:	4b02      	ldr	r3, [pc, #8]	; (8010990 <LmHandlerGetDutyCycleWaitTime+0x10>)
 8010986:	681b      	ldr	r3, [r3, #0]
}
 8010988:	4618      	mov	r0, r3
 801098a:	46bd      	mov	sp, r7
 801098c:	bc80      	pop	{r7}
 801098e:	4770      	bx	lr
 8010990:	200007a8 	.word	0x200007a8

08010994 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b092      	sub	sp, #72	; 0x48
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	460a      	mov	r2, r1
 801099e:	71fb      	strb	r3, [r7, #7]
 80109a0:	4613      	mov	r3, r2
 80109a2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 80109a4:	2301      	movs	r3, #1
 80109a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80109aa:	4b46      	ldr	r3, [pc, #280]	; (8010ac4 <LmHandlerJoin+0x130>)
 80109ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 80109b6:	4b43      	ldr	r3, [pc, #268]	; (8010ac4 <LmHandlerJoin+0x130>)
 80109b8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80109bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 80109c0:	79fb      	ldrb	r3, [r7, #7]
 80109c2:	2b02      	cmp	r3, #2
 80109c4:	d10b      	bne.n	80109de <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80109c6:	2302      	movs	r3, #2
 80109c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80109cc:	4b3e      	ldr	r3, [pc, #248]	; (8010ac8 <LmHandlerJoin+0x134>)
 80109ce:	2202      	movs	r2, #2
 80109d0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 80109d2:	4a3d      	ldr	r2, [pc, #244]	; (8010ac8 <LmHandlerJoin+0x134>)
 80109d4:	79bb      	ldrb	r3, [r7, #6]
 80109d6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 80109d8:	f005 f936 	bl	8015c48 <LoRaMacStart>
 80109dc:	e05c      	b.n	8010a98 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80109de:	2301      	movs	r3, #1
 80109e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80109e4:	4b38      	ldr	r3, [pc, #224]	; (8010ac8 <LmHandlerJoin+0x134>)
 80109e6:	2201      	movs	r2, #1
 80109e8:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80109ea:	4b36      	ldr	r3, [pc, #216]	; (8010ac4 <LmHandlerJoin+0x130>)
 80109ec:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80109f0:	4b35      	ldr	r3, [pc, #212]	; (8010ac8 <LmHandlerJoin+0x134>)
 80109f2:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 80109f4:	4b33      	ldr	r3, [pc, #204]	; (8010ac4 <LmHandlerJoin+0x130>)
 80109f6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80109fa:	4b33      	ldr	r3, [pc, #204]	; (8010ac8 <LmHandlerJoin+0x134>)
 80109fc:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80109fe:	4b32      	ldr	r3, [pc, #200]	; (8010ac8 <LmHandlerJoin+0x134>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8010a04:	4a30      	ldr	r2, [pc, #192]	; (8010ac8 <LmHandlerJoin+0x134>)
 8010a06:	79bb      	ldrb	r3, [r7, #6]
 8010a08:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 8010a0a:	4b30      	ldr	r3, [pc, #192]	; (8010acc <LmHandlerJoin+0x138>)
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	f083 0301 	eor.w	r3, r3, #1
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d034      	beq.n	8010a82 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8010a18:	231f      	movs	r3, #31
 8010a1a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8010a1c:	4b29      	ldr	r3, [pc, #164]	; (8010ac4 <LmHandlerJoin+0x130>)
 8010a1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010a22:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a24:	f107 030c 	add.w	r3, r7, #12
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f005 fbe3 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 8010a2e:	2320      	movs	r3, #32
 8010a30:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8010a32:	4b24      	ldr	r3, [pc, #144]	; (8010ac4 <LmHandlerJoin+0x130>)
 8010a34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010a38:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a3a:	f107 030c 	add.w	r3, r7, #12
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f005 fbd8 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8010a44:	2322      	movs	r3, #34	; 0x22
 8010a46:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8010a48:	4b1e      	ldr	r3, [pc, #120]	; (8010ac4 <LmHandlerJoin+0x130>)
 8010a4a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010a4e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a50:	f107 030c 	add.w	r3, r7, #12
 8010a54:	4618      	mov	r0, r3
 8010a56:	f005 fbcd 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010a5a:	2321      	movs	r3, #33	; 0x21
 8010a5c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8010a5e:	4b19      	ldr	r3, [pc, #100]	; (8010ac4 <LmHandlerJoin+0x130>)
 8010a60:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010a64:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a66:	f107 030c 	add.w	r3, r7, #12
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f005 fbc2 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8010a70:	2329      	movs	r3, #41	; 0x29
 8010a72:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8010a74:	4b16      	ldr	r3, [pc, #88]	; (8010ad0 <LmHandlerJoin+0x13c>)
 8010a76:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a78:	f107 030c 	add.w	r3, r7, #12
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f005 fbb9 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 8010a82:	f005 f8e1 	bl	8015c48 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010a86:	2301      	movs	r3, #1
 8010a88:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8010a8e:	f107 030c 	add.w	r3, r7, #12
 8010a92:	4618      	mov	r0, r3
 8010a94:	f005 fbae 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8010a98:	4b0c      	ldr	r3, [pc, #48]	; (8010acc <LmHandlerJoin+0x138>)
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	f083 0301 	eor.w	r3, r3, #1
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d102      	bne.n	8010aac <LmHandlerJoin+0x118>
 8010aa6:	79bb      	ldrb	r3, [r7, #6]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d004      	beq.n	8010ab6 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 8010aac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f005 ff49 	bl	8016948 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ab8:	4a06      	ldr	r2, [pc, #24]	; (8010ad4 <LmHandlerJoin+0x140>)
 8010aba:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 8010abc:	bf00      	nop
 8010abe:	3748      	adds	r7, #72	; 0x48
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	20000764 	.word	0x20000764
 8010ac8:	20000094 	.word	0x20000094
 8010acc:	200008a2 	.word	0x200008a2
 8010ad0:	01000400 	.word	0x01000400
 8010ad4:	200007a8 	.word	0x200007a8

08010ad8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b08c      	sub	sp, #48	; 0x30
 8010adc:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8010ae2:	1d3b      	adds	r3, r7, #4
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f005 f9ad 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
 8010aea:	4603      	mov	r3, r0
 8010aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 8010af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d106      	bne.n	8010b06 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010af8:	7a3b      	ldrb	r3, [r7, #8]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8010afe:	2300      	movs	r3, #0
 8010b00:	e002      	b.n	8010b08 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8010b02:	2301      	movs	r3, #1
 8010b04:	e000      	b.n	8010b08 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8010b06:	2300      	movs	r3, #0
    }
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3730      	adds	r7, #48	; 0x30
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b08a      	sub	sp, #40	; 0x28
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	460b      	mov	r3, r1
 8010b1a:	70fb      	strb	r3, [r7, #3]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8010b20:	23ff      	movs	r3, #255	; 0xff
 8010b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 8010b26:	f002 faa7 	bl	8013078 <LoRaMacIsBusy>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d002      	beq.n	8010b36 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010b30:	f06f 0301 	mvn.w	r3, #1
 8010b34:	e0ab      	b.n	8010c8e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 8010b36:	f002 fac7 	bl	80130c8 <LoRaMacIsStopped>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010b40:	f06f 0302 	mvn.w	r3, #2
 8010b44:	e0a3      	b.n	8010c8e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8010b46:	f7ff ffc7 	bl	8010ad8 <LmHandlerJoinStatus>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d00a      	beq.n	8010b66 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8010b50:	4b51      	ldr	r3, [pc, #324]	; (8010c98 <LmHandlerSend+0x188>)
 8010b52:	79db      	ldrb	r3, [r3, #7]
 8010b54:	4a50      	ldr	r2, [pc, #320]	; (8010c98 <LmHandlerSend+0x188>)
 8010b56:	7a12      	ldrb	r2, [r2, #8]
 8010b58:	4611      	mov	r1, r2
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7ff ff1a 	bl	8010994 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010b60:	f06f 0302 	mvn.w	r3, #2
 8010b64:	e093      	b.n	8010c8e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 8010b66:	4a4d      	ldr	r2, [pc, #308]	; (8010c9c <LmHandlerSend+0x18c>)
 8010b68:	78fb      	ldrb	r3, [r7, #3]
 8010b6a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8010b6c:	78fb      	ldrb	r3, [r7, #3]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	bf14      	ite	ne
 8010b72:	2301      	movne	r3, #1
 8010b74:	2300      	moveq	r3, #0
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8010b7a:	4b49      	ldr	r3, [pc, #292]	; (8010ca0 <LmHandlerSend+0x190>)
 8010b7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010b80:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	785b      	ldrb	r3, [r3, #1]
 8010b86:	f107 020c 	add.w	r2, r7, #12
 8010b8a:	4611      	mov	r1, r2
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f005 f8c9 	bl	8015d24 <LoRaMacQueryTxPossible>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d009      	beq.n	8010bac <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8010ba4:	23f9      	movs	r3, #249	; 0xf9
 8010ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010baa:	e009      	b.n	8010bc0 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	785b      	ldrb	r3, [r3, #1]
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8010bc0:	4b36      	ldr	r3, [pc, #216]	; (8010c9c <LmHandlerSend+0x18c>)
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	3310      	adds	r3, #16
 8010bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bca:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8010bce:	4b34      	ldr	r3, [pc, #208]	; (8010ca0 <LmHandlerSend+0x190>)
 8010bd0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010bd4:	4b31      	ldr	r3, [pc, #196]	; (8010c9c <LmHandlerSend+0x18c>)
 8010bd6:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8010bd8:	78ba      	ldrb	r2, [r7, #2]
 8010bda:	f107 0310 	add.w	r3, r7, #16
 8010bde:	4611      	mov	r1, r2
 8010be0:	4618      	mov	r0, r3
 8010be2:	f006 f849 	bl	8016c78 <LoRaMacMcpsRequest>
 8010be6:	4603      	mov	r3, r0
 8010be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	4a2d      	ldr	r2, [pc, #180]	; (8010ca4 <LmHandlerSend+0x194>)
 8010bf0:	6013      	str	r3, [r2, #0]

    switch( status )
 8010bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010bf6:	2b11      	cmp	r3, #17
 8010bf8:	d842      	bhi.n	8010c80 <LmHandlerSend+0x170>
 8010bfa:	a201      	add	r2, pc, #4	; (adr r2, 8010c00 <LmHandlerSend+0xf0>)
 8010bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c00:	08010c49 	.word	0x08010c49
 8010c04:	08010c61 	.word	0x08010c61
 8010c08:	08010c81 	.word	0x08010c81
 8010c0c:	08010c81 	.word	0x08010c81
 8010c10:	08010c81 	.word	0x08010c81
 8010c14:	08010c81 	.word	0x08010c81
 8010c18:	08010c81 	.word	0x08010c81
 8010c1c:	08010c69 	.word	0x08010c69
 8010c20:	08010c81 	.word	0x08010c81
 8010c24:	08010c81 	.word	0x08010c81
 8010c28:	08010c81 	.word	0x08010c81
 8010c2c:	08010c79 	.word	0x08010c79
 8010c30:	08010c81 	.word	0x08010c81
 8010c34:	08010c81 	.word	0x08010c81
 8010c38:	08010c61 	.word	0x08010c61
 8010c3c:	08010c61 	.word	0x08010c61
 8010c40:	08010c61 	.word	0x08010c61
 8010c44:	08010c71 	.word	0x08010c71
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 8010c48:	4b17      	ldr	r3, [pc, #92]	; (8010ca8 <LmHandlerSend+0x198>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8010c4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c52:	f113 0f07 	cmn.w	r3, #7
 8010c56:	d017      	beq.n	8010c88 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8010c5e:	e013      	b.n	8010c88 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8010c60:	23fe      	movs	r3, #254	; 0xfe
 8010c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c66:	e010      	b.n	8010c8a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010c68:	23fd      	movs	r3, #253	; 0xfd
 8010c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c6e:	e00c      	b.n	8010c8a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8010c70:	23fb      	movs	r3, #251	; 0xfb
 8010c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c76:	e008      	b.n	8010c8a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8010c78:	23fa      	movs	r3, #250	; 0xfa
 8010c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c7e:	e004      	b.n	8010c8a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010c80:	23ff      	movs	r3, #255	; 0xff
 8010c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c86:	e000      	b.n	8010c8a <LmHandlerSend+0x17a>
            break;
 8010c88:	bf00      	nop
    }

    return lmhStatus;
 8010c8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3728      	adds	r7, #40	; 0x28
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	20000094 	.word	0x20000094
 8010c9c:	200000a0 	.word	0x200000a0
 8010ca0:	20000764 	.word	0x20000764
 8010ca4:	200007a8 	.word	0x200007a8
 8010ca8:	200007ac 	.word	0x200007ac

08010cac <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b086      	sub	sp, #24
 8010cb0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8010cb2:	2309      	movs	r3, #9
 8010cb4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010cb6:	463b      	mov	r3, r7
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f005 fe45 	bl	8016948 <LoRaMacMlmeRequest>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	4a06      	ldr	r2, [pc, #24]	; (8010ce0 <LmHandlerDeviceTimeReq+0x34>)
 8010cc6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010cc8:	7dfb      	ldrb	r3, [r7, #23]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e001      	b.n	8010cd6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3718      	adds	r7, #24
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	200007a8 	.word	0x200007a8

08010ce4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8010cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	370c      	adds	r7, #12
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bc80      	pop	{r7}
 8010cfa:	4770      	bx	lr

08010cfc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b08e      	sub	sp, #56	; 0x38
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8010d06:	2300      	movs	r3, #0
 8010d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 8010d0c:	f002 f9b4 	bl	8013078 <LoRaMacIsBusy>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d002      	beq.n	8010d1c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010d16:	f06f 0301 	mvn.w	r3, #1
 8010d1a:	e071      	b.n	8010e00 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8010d1c:	f7ff fedc 	bl	8010ad8 <LmHandlerJoinStatus>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d002      	beq.n	8010d2c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010d26:	f06f 0302 	mvn.w	r3, #2
 8010d2a:	e069      	b.n	8010e00 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010d30:	f107 030c 	add.w	r3, r7, #12
 8010d34:	4618      	mov	r0, r3
 8010d36:	f005 f885 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d44:	e05c      	b.n	8010e00 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 8010d46:	7c3b      	ldrb	r3, [r7, #16]
 8010d48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 8010d4c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d052      	beq.n	8010dfc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 8010d56:	79fb      	ldrb	r3, [r7, #7]
 8010d58:	2b02      	cmp	r3, #2
 8010d5a:	d028      	beq.n	8010dae <LmHandlerRequestClass+0xb2>
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	dc48      	bgt.n	8010df2 <LmHandlerRequestClass+0xf6>
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d002      	beq.n	8010d6a <LmHandlerRequestClass+0x6e>
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	d01e      	beq.n	8010da6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 8010d68:	e043      	b.n	8010df2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 8010d6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d041      	beq.n	8010df6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 8010d72:	79fb      	ldrb	r3, [r7, #7]
 8010d74:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010d76:	f107 030c 	add.w	r3, r7, #12
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f005 fa3a 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d10b      	bne.n	8010d9e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010d86:	4b20      	ldr	r3, [pc, #128]	; (8010e08 <LmHandlerRequestClass+0x10c>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d032      	beq.n	8010df6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010d90:	4b1d      	ldr	r3, [pc, #116]	; (8010e08 <LmHandlerRequestClass+0x10c>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d96:	79fa      	ldrb	r2, [r7, #7]
 8010d98:	4610      	mov	r0, r2
 8010d9a:	4798      	blx	r3
                break;
 8010d9c:	e02b      	b.n	8010df6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010d9e:	23ff      	movs	r3, #255	; 0xff
 8010da0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010da4:	e027      	b.n	8010df6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8010da6:	23ff      	movs	r3, #255	; 0xff
 8010da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010dac:	e026      	b.n	8010dfc <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 8010dae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d003      	beq.n	8010dbe <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8010db6:	23ff      	movs	r3, #255	; 0xff
 8010db8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010dbc:	e01d      	b.n	8010dfa <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010dc2:	f107 030c 	add.w	r3, r7, #12
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f005 fa14 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d10b      	bne.n	8010dea <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010dd2:	4b0d      	ldr	r3, [pc, #52]	; (8010e08 <LmHandlerRequestClass+0x10c>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00e      	beq.n	8010dfa <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010ddc:	4b0a      	ldr	r3, [pc, #40]	; (8010e08 <LmHandlerRequestClass+0x10c>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de2:	79fa      	ldrb	r2, [r7, #7]
 8010de4:	4610      	mov	r0, r2
 8010de6:	4798      	blx	r3
                break;
 8010de8:	e007      	b.n	8010dfa <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010dea:	23ff      	movs	r3, #255	; 0xff
 8010dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010df0:	e003      	b.n	8010dfa <LmHandlerRequestClass+0xfe>
                break;
 8010df2:	bf00      	nop
 8010df4:	e002      	b.n	8010dfc <LmHandlerRequestClass+0x100>
                break;
 8010df6:	bf00      	nop
 8010df8:	e000      	b.n	8010dfc <LmHandlerRequestClass+0x100>
                break;
 8010dfa:	bf00      	nop
        }
    }
    return errorStatus;
 8010dfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3738      	adds	r7, #56	; 0x38
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	2000077c 	.word	0x2000077c

08010e0c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b08c      	sub	sp, #48	; 0x30
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d102      	bne.n	8010e20 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e1e:	e010      	b.n	8010e42 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010e20:	2300      	movs	r3, #0
 8010e22:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010e24:	f107 0308 	add.w	r3, r7, #8
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f005 f80b 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d002      	beq.n	8010e3a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e38:	e003      	b.n	8010e42 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8010e3a:	7b3a      	ldrb	r2, [r7, #12]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3730      	adds	r7, #48	; 0x30
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
	...

08010e4c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b08c      	sub	sp, #48	; 0x30
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d102      	bne.n	8010e60 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e5e:	e016      	b.n	8010e8e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8010e60:	2320      	movs	r3, #32
 8010e62:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8010e64:	f107 0308 	add.w	r3, r7, #8
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f004 ffeb 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d002      	beq.n	8010e7a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e78:	e009      	b.n	8010e8e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 8010e7a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f993 2000 	ldrsb.w	r2, [r3]
 8010e88:	4b03      	ldr	r3, [pc, #12]	; (8010e98 <LmHandlerGetTxDatarate+0x4c>)
 8010e8a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8010e8c:	2300      	movs	r3, #0
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3730      	adds	r7, #48	; 0x30
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	20000764 	.word	0x20000764

08010e9c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b08c      	sub	sp, #48	; 0x30
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8010ea4:	2323      	movs	r3, #35	; 0x23
 8010ea6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010eac:	f107 0308 	add.w	r3, r7, #8
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f005 f99f 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d002      	beq.n	8010ec2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8010ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ec0:	e000      	b.n	8010ec4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 8010ec2:	2300      	movs	r3, #0
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3730      	adds	r7, #48	; 0x30
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8010ed4:	4b18      	ldr	r3, [pc, #96]	; (8010f38 <McpsConfirm+0x6c>)
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	785a      	ldrb	r2, [r3, #1]
 8010ede:	4b16      	ldr	r3, [pc, #88]	; (8010f38 <McpsConfirm+0x6c>)
 8010ee0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	789b      	ldrb	r3, [r3, #2]
 8010ee6:	b25a      	sxtb	r2, r3
 8010ee8:	4b13      	ldr	r3, [pc, #76]	; (8010f38 <McpsConfirm+0x6c>)
 8010eea:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	4a11      	ldr	r2, [pc, #68]	; (8010f38 <McpsConfirm+0x6c>)
 8010ef2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8010efa:	4b0f      	ldr	r3, [pc, #60]	; (8010f38 <McpsConfirm+0x6c>)
 8010efc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	b2da      	uxtb	r2, r3
 8010f04:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <McpsConfirm+0x6c>)
 8010f06:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	791b      	ldrb	r3, [r3, #4]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4b0a      	ldr	r3, [pc, #40]	; (8010f38 <McpsConfirm+0x6c>)
 8010f10:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 8010f12:	4b0a      	ldr	r3, [pc, #40]	; (8010f3c <McpsConfirm+0x70>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d004      	beq.n	8010f26 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8010f1c:	4b07      	ldr	r3, [pc, #28]	; (8010f3c <McpsConfirm+0x70>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f22:	4805      	ldr	r0, [pc, #20]	; (8010f38 <McpsConfirm+0x6c>)
 8010f24:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8010f26:	6879      	ldr	r1, [r7, #4]
 8010f28:	2000      	movs	r0, #0
 8010f2a:	f000 f9e9 	bl	8011300 <LmHandlerPackagesNotify>
}
 8010f2e:	bf00      	nop
 8010f30:	3708      	adds	r7, #8
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	200000a0 	.word	0x200000a0
 8010f3c:	2000077c 	.word	0x2000077c

08010f40 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b086      	sub	sp, #24
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 8010f4e:	4b2d      	ldr	r3, [pc, #180]	; (8011004 <McpsIndication+0xc4>)
 8010f50:	2201      	movs	r2, #1
 8010f52:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	785a      	ldrb	r2, [r3, #1]
 8010f58:	4b2a      	ldr	r3, [pc, #168]	; (8011004 <McpsIndication+0xc4>)
 8010f5a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8010f5c:	4b29      	ldr	r3, [pc, #164]	; (8011004 <McpsIndication+0xc4>)
 8010f5e:	785b      	ldrb	r3, [r3, #1]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d14b      	bne.n	8010ffc <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	791b      	ldrb	r3, [r3, #4]
 8010f68:	b25a      	sxtb	r2, r3
 8010f6a:	4b26      	ldr	r3, [pc, #152]	; (8011004 <McpsIndication+0xc4>)
 8010f6c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f74:	b25a      	sxtb	r2, r3
 8010f76:	4b23      	ldr	r3, [pc, #140]	; (8011004 <McpsIndication+0xc4>)
 8010f78:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010f80:	4b20      	ldr	r3, [pc, #128]	; (8011004 <McpsIndication+0xc4>)
 8010f82:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	78da      	ldrb	r2, [r3, #3]
 8010f88:	4b1e      	ldr	r3, [pc, #120]	; (8011004 <McpsIndication+0xc4>)
 8010f8a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	4a1c      	ldr	r2, [pc, #112]	; (8011004 <McpsIndication+0xc4>)
 8010f92:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	78db      	ldrb	r3, [r3, #3]
 8010f98:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	7b1b      	ldrb	r3, [r3, #12]
 8010f9e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 8010fa6:	4b18      	ldr	r3, [pc, #96]	; (8011008 <McpsIndication+0xc8>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d007      	beq.n	8010fc0 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8010fb0:	4b15      	ldr	r3, [pc, #84]	; (8011008 <McpsIndication+0xc8>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fb6:	f107 0210 	add.w	r2, r7, #16
 8010fba:	4912      	ldr	r1, [pc, #72]	; (8011004 <McpsIndication+0xc4>)
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8010fc0:	4b11      	ldr	r3, [pc, #68]	; (8011008 <McpsIndication+0xc8>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d007      	beq.n	8010fda <McpsIndication+0x9a>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	7e1b      	ldrb	r3, [r3, #24]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d003      	beq.n	8010fda <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8010fd2:	4b0d      	ldr	r3, [pc, #52]	; (8011008 <McpsIndication+0xc8>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fd8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8010fda:	6879      	ldr	r1, [r7, #4]
 8010fdc:	2001      	movs	r0, #1
 8010fde:	f000 f98f 	bl	8011300 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 8010fe2:	f107 030f 	add.w	r3, r7, #15
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7ff ff10 	bl	8010e0c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	795b      	ldrb	r3, [r3, #5]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d004      	beq.n	8010ffe <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 8010ff4:	4b05      	ldr	r3, [pc, #20]	; (801100c <McpsIndication+0xcc>)
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	701a      	strb	r2, [r3, #0]
 8010ffa:	e000      	b.n	8010ffe <McpsIndication+0xbe>
        return;
 8010ffc:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 8010ffe:	3718      	adds	r7, #24
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	200000bc 	.word	0x200000bc
 8011008:	2000077c 	.word	0x2000077c
 801100c:	200007ac 	.word	0x200007ac

08011010 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b08c      	sub	sp, #48	; 0x30
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8011018:	4b49      	ldr	r3, [pc, #292]	; (8011140 <MlmeConfirm+0x130>)
 801101a:	2200      	movs	r2, #0
 801101c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	785a      	ldrb	r2, [r3, #1]
 8011022:	4b47      	ldr	r3, [pc, #284]	; (8011140 <MlmeConfirm+0x130>)
 8011024:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8011026:	4b47      	ldr	r3, [pc, #284]	; (8011144 <MlmeConfirm+0x134>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801102c:	2b00      	cmp	r3, #0
 801102e:	d004      	beq.n	801103a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8011030:	4b44      	ldr	r3, [pc, #272]	; (8011144 <MlmeConfirm+0x134>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011036:	4842      	ldr	r0, [pc, #264]	; (8011140 <MlmeConfirm+0x130>)
 8011038:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 801103a:	6879      	ldr	r1, [r7, #4]
 801103c:	2002      	movs	r0, #2
 801103e:	f000 f95f 	bl	8011300 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	3b01      	subs	r3, #1
 8011048:	2b0b      	cmp	r3, #11
 801104a:	d872      	bhi.n	8011132 <MlmeConfirm+0x122>
 801104c:	a201      	add	r2, pc, #4	; (adr r2, 8011054 <MlmeConfirm+0x44>)
 801104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011052:	bf00      	nop
 8011054:	08011085 	.word	0x08011085
 8011058:	08011133 	.word	0x08011133
 801105c:	08011133 	.word	0x08011133
 8011060:	08011133 	.word	0x08011133
 8011064:	08011101 	.word	0x08011101
 8011068:	08011133 	.word	0x08011133
 801106c:	08011133 	.word	0x08011133
 8011070:	08011133 	.word	0x08011133
 8011074:	08011133 	.word	0x08011133
 8011078:	08011133 	.word	0x08011133
 801107c:	08011119 	.word	0x08011119
 8011080:	08011133 	.word	0x08011133
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8011084:	2306      	movs	r3, #6
 8011086:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8011088:	f107 0308 	add.w	r3, r7, #8
 801108c:	4618      	mov	r0, r3
 801108e:	f004 fed9 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8011092:	4b2d      	ldr	r3, [pc, #180]	; (8011148 <MlmeConfirm+0x138>)
 8011094:	79db      	ldrb	r3, [r3, #7]
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	4611      	mov	r1, r2
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff fa78 	bl	8010590 <SecureElementSetDevAddr>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d102      	bne.n	80110ac <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	4a28      	ldr	r2, [pc, #160]	; (801114c <MlmeConfirm+0x13c>)
 80110aa:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80110ac:	4828      	ldr	r0, [pc, #160]	; (8011150 <MlmeConfirm+0x140>)
 80110ae:	f7ff fecd 	bl	8010e4c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80110b2:	4828      	ldr	r0, [pc, #160]	; (8011154 <MlmeConfirm+0x144>)
 80110b4:	f000 fa74 	bl	80115a0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80110b8:	4b21      	ldr	r3, [pc, #132]	; (8011140 <MlmeConfirm+0x130>)
 80110ba:	785b      	ldrb	r3, [r3, #1]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d108      	bne.n	80110d2 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80110c0:	4b21      	ldr	r3, [pc, #132]	; (8011148 <MlmeConfirm+0x138>)
 80110c2:	2200      	movs	r2, #0
 80110c4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80110c6:	4b24      	ldr	r3, [pc, #144]	; (8011158 <MlmeConfirm+0x148>)
 80110c8:	785b      	ldrb	r3, [r3, #1]
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7ff fe16 	bl	8010cfc <LmHandlerRequestClass>
 80110d0:	e002      	b.n	80110d8 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80110d2:	4b1d      	ldr	r3, [pc, #116]	; (8011148 <MlmeConfirm+0x138>)
 80110d4:	22ff      	movs	r2, #255	; 0xff
 80110d6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80110d8:	4b1a      	ldr	r3, [pc, #104]	; (8011144 <MlmeConfirm+0x134>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d004      	beq.n	80110ec <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80110e2:	4b18      	ldr	r3, [pc, #96]	; (8011144 <MlmeConfirm+0x134>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e8:	4817      	ldr	r0, [pc, #92]	; (8011148 <MlmeConfirm+0x138>)
 80110ea:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80110ec:	4b14      	ldr	r3, [pc, #80]	; (8011140 <MlmeConfirm+0x130>)
 80110ee:	785b      	ldrb	r3, [r3, #1]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d120      	bne.n	8011136 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80110f4:	4b14      	ldr	r3, [pc, #80]	; (8011148 <MlmeConfirm+0x138>)
 80110f6:	79db      	ldrb	r3, [r3, #7]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fe fff1 	bl	80100e0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 80110fe:	e01a      	b.n	8011136 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8011100:	4b16      	ldr	r3, [pc, #88]	; (801115c <MlmeConfirm+0x14c>)
 8011102:	2201      	movs	r2, #1
 8011104:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	7a1a      	ldrb	r2, [r3, #8]
 801110a:	4b14      	ldr	r3, [pc, #80]	; (801115c <MlmeConfirm+0x14c>)
 801110c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	7a5a      	ldrb	r2, [r3, #9]
 8011112:	4b12      	ldr	r3, [pc, #72]	; (801115c <MlmeConfirm+0x14c>)
 8011114:	74da      	strb	r2, [r3, #19]
            }
            break;
 8011116:	e00f      	b.n	8011138 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	785b      	ldrb	r3, [r3, #1]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d105      	bne.n	801112c <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8011120:	4b0d      	ldr	r3, [pc, #52]	; (8011158 <MlmeConfirm+0x148>)
 8011122:	7c1b      	ldrb	r3, [r3, #16]
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff fddd 	bl	8010ce4 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801112a:	e005      	b.n	8011138 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 801112c:	f7ff fdbe 	bl	8010cac <LmHandlerDeviceTimeReq>
            break;
 8011130:	e002      	b.n	8011138 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8011132:	bf00      	nop
 8011134:	e000      	b.n	8011138 <MlmeConfirm+0x128>
            break;
 8011136:	bf00      	nop
    }
}
 8011138:	bf00      	nop
 801113a:	3730      	adds	r7, #48	; 0x30
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	200000a0 	.word	0x200000a0
 8011144:	2000077c 	.word	0x2000077c
 8011148:	20000094 	.word	0x20000094
 801114c:	20000728 	.word	0x20000728
 8011150:	20000098 	.word	0x20000098
 8011154:	20000099 	.word	0x20000099
 8011158:	20000764 	.word	0x20000764
 801115c:	200000bc 	.word	0x200000bc

08011160 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801116a:	4b20      	ldr	r3, [pc, #128]	; (80111ec <MlmeIndication+0x8c>)
 801116c:	2200      	movs	r2, #0
 801116e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	785a      	ldrb	r2, [r3, #1]
 8011174:	4b1d      	ldr	r3, [pc, #116]	; (80111ec <MlmeIndication+0x8c>)
 8011176:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	789b      	ldrb	r3, [r3, #2]
 801117c:	b25a      	sxtb	r2, r3
 801117e:	4b1b      	ldr	r3, [pc, #108]	; (80111ec <MlmeIndication+0x8c>)
 8011180:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011188:	b25a      	sxtb	r2, r3
 801118a:	4b18      	ldr	r3, [pc, #96]	; (80111ec <MlmeIndication+0x8c>)
 801118c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8011194:	4b15      	ldr	r3, [pc, #84]	; (80111ec <MlmeIndication+0x8c>)
 8011196:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	78da      	ldrb	r2, [r3, #3]
 801119c:	4b13      	ldr	r3, [pc, #76]	; (80111ec <MlmeIndication+0x8c>)
 801119e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	4a11      	ldr	r2, [pc, #68]	; (80111ec <MlmeIndication+0x8c>)
 80111a6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80111a8:	4b11      	ldr	r3, [pc, #68]	; (80111f0 <MlmeIndication+0x90>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00d      	beq.n	80111ce <MlmeIndication+0x6e>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	2b0a      	cmp	r3, #10
 80111b8:	d009      	beq.n	80111ce <MlmeIndication+0x6e>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b0e      	cmp	r3, #14
 80111c0:	d005      	beq.n	80111ce <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80111c2:	4b0b      	ldr	r3, [pc, #44]	; (80111f0 <MlmeIndication+0x90>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111c8:	4908      	ldr	r1, [pc, #32]	; (80111ec <MlmeIndication+0x8c>)
 80111ca:	2000      	movs	r0, #0
 80111cc:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80111ce:	6879      	ldr	r1, [r7, #4]
 80111d0:	2003      	movs	r0, #3
 80111d2:	f000 f895 	bl	8011300 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2b0a      	cmp	r3, #10
 80111dc:	d001      	beq.n	80111e2 <MlmeIndication+0x82>
 80111de:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 80111e0:	e000      	b.n	80111e4 <MlmeIndication+0x84>
            break;
 80111e2:	bf00      	nop
    }
}
 80111e4:	bf00      	nop
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	200000bc 	.word	0x200000bc
 80111f0:	2000077c 	.word	0x2000077c

080111f4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	4603      	mov	r3, r0
 80111fc:	6039      	str	r1, [r7, #0]
 80111fe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8011200:	2300      	movs	r3, #0
 8011202:	60fb      	str	r3, [r7, #12]
    switch( id )
 8011204:	79fb      	ldrb	r3, [r7, #7]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d104      	bne.n	8011214 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 801120a:	f000 fa8b 	bl	8011724 <LmhpCompliancePackageFactory>
 801120e:	4603      	mov	r3, r0
 8011210:	60fb      	str	r3, [r7, #12]
                break;
 8011212:	e00d      	b.n	8011230 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8011214:	f107 020c 	add.w	r2, r7, #12
 8011218:	79fb      	ldrb	r3, [r7, #7]
 801121a:	4611      	mov	r1, r2
 801121c:	4618      	mov	r0, r3
 801121e:	f000 ff73 	bl	8012108 <LmhpPackagesRegister>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d002      	beq.n	801122e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8011228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801122c:	e03b      	b.n	80112a6 <LmHandlerPackageRegister+0xb2>
                }
                break;
 801122e:	bf00      	nop
            }
    }
    if( package != NULL )
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d035      	beq.n	80112a2 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 8011236:	79fb      	ldrb	r3, [r7, #7]
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	491d      	ldr	r1, [pc, #116]	; (80112b0 <LmHandlerPackageRegister+0xbc>)
 801123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8011240:	79fb      	ldrb	r3, [r7, #7]
 8011242:	4a1b      	ldr	r2, [pc, #108]	; (80112b0 <LmHandlerPackageRegister+0xbc>)
 8011244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011248:	4a1a      	ldr	r2, [pc, #104]	; (80112b4 <LmHandlerPackageRegister+0xc0>)
 801124a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 801124c:	4b1a      	ldr	r3, [pc, #104]	; (80112b8 <LmHandlerPackageRegister+0xc4>)
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	79fb      	ldrb	r3, [r7, #7]
 8011252:	4917      	ldr	r1, [pc, #92]	; (80112b0 <LmHandlerPackageRegister+0xbc>)
 8011254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011258:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801125a:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 801125c:	4b16      	ldr	r3, [pc, #88]	; (80112b8 <LmHandlerPackageRegister+0xc4>)
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	4913      	ldr	r1, [pc, #76]	; (80112b0 <LmHandlerPackageRegister+0xbc>)
 8011264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011268:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801126a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 801126c:	79fb      	ldrb	r3, [r7, #7]
 801126e:	4a10      	ldr	r2, [pc, #64]	; (80112b0 <LmHandlerPackageRegister+0xbc>)
 8011270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011274:	4a11      	ldr	r2, [pc, #68]	; (80112bc <LmHandlerPackageRegister+0xc8>)
 8011276:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8011278:	4b0f      	ldr	r3, [pc, #60]	; (80112b8 <LmHandlerPackageRegister+0xc4>)
 801127a:	681a      	ldr	r2, [r3, #0]
 801127c:	79fb      	ldrb	r3, [r7, #7]
 801127e:	490c      	ldr	r1, [pc, #48]	; (80112b0 <LmHandlerPackageRegister+0xbc>)
 8011280:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011284:	6992      	ldr	r2, [r2, #24]
 8011286:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8011288:	79fb      	ldrb	r3, [r7, #7]
 801128a:	4a09      	ldr	r2, [pc, #36]	; (80112b0 <LmHandlerPackageRegister+0xbc>)
 801128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	4a0b      	ldr	r2, [pc, #44]	; (80112c0 <LmHandlerPackageRegister+0xcc>)
 8011294:	6851      	ldr	r1, [r2, #4]
 8011296:	4a0a      	ldr	r2, [pc, #40]	; (80112c0 <LmHandlerPackageRegister+0xcc>)
 8011298:	7852      	ldrb	r2, [r2, #1]
 801129a:	6838      	ldr	r0, [r7, #0]
 801129c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 801129e:	2300      	movs	r3, #0
 80112a0:	e001      	b.n	80112a6 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80112a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3710      	adds	r7, #16
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	20000750 	.word	0x20000750
 80112b4:	08010995 	.word	0x08010995
 80112b8:	2000077c 	.word	0x2000077c
 80112bc:	08010cad 	.word	0x08010cad
 80112c0:	200000d0 	.word	0x200000d0

080112c4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	4603      	mov	r3, r0
 80112cc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80112ce:	79fb      	ldrb	r3, [r7, #7]
 80112d0:	2b04      	cmp	r3, #4
 80112d2:	d80e      	bhi.n	80112f2 <LmHandlerPackageIsInitialized+0x2e>
 80112d4:	79fb      	ldrb	r3, [r7, #7]
 80112d6:	4a09      	ldr	r2, [pc, #36]	; (80112fc <LmHandlerPackageIsInitialized+0x38>)
 80112d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d007      	beq.n	80112f2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80112e2:	79fb      	ldrb	r3, [r7, #7]
 80112e4:	4a05      	ldr	r2, [pc, #20]	; (80112fc <LmHandlerPackageIsInitialized+0x38>)
 80112e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112ea:	689b      	ldr	r3, [r3, #8]
 80112ec:	4798      	blx	r3
 80112ee:	4603      	mov	r3, r0
 80112f0:	e000      	b.n	80112f4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 80112f2:	2300      	movs	r3, #0
    }
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	20000750 	.word	0x20000750

08011300 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	4603      	mov	r3, r0
 8011308:	6039      	str	r1, [r7, #0]
 801130a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801130c:	2300      	movs	r3, #0
 801130e:	73fb      	strb	r3, [r7, #15]
 8011310:	e067      	b.n	80113e2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 8011312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011316:	4a37      	ldr	r2, [pc, #220]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 8011318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d05a      	beq.n	80113d6 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 8011320:	79fb      	ldrb	r3, [r7, #7]
 8011322:	2b03      	cmp	r3, #3
 8011324:	d84e      	bhi.n	80113c4 <LmHandlerPackagesNotify+0xc4>
 8011326:	a201      	add	r2, pc, #4	; (adr r2, 801132c <LmHandlerPackagesNotify+0x2c>)
 8011328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132c:	0801133d 	.word	0x0801133d
 8011330:	0801135f 	.word	0x0801135f
 8011334:	08011381 	.word	0x08011381
 8011338:	080113a3 	.word	0x080113a3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 801133c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011340:	4a2c      	ldr	r2, [pc, #176]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 8011342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011346:	699b      	ldr	r3, [r3, #24]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d03d      	beq.n	80113c8 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 801134c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011350:	4a28      	ldr	r2, [pc, #160]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 8011352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011356:	699b      	ldr	r3, [r3, #24]
 8011358:	6838      	ldr	r0, [r7, #0]
 801135a:	4798      	blx	r3
                        }
                        break;
 801135c:	e034      	b.n	80113c8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 801135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011362:	4a24      	ldr	r2, [pc, #144]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 8011364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011368:	69db      	ldr	r3, [r3, #28]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d02e      	beq.n	80113cc <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 801136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011372:	4a20      	ldr	r2, [pc, #128]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 8011374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011378:	69db      	ldr	r3, [r3, #28]
 801137a:	6838      	ldr	r0, [r7, #0]
 801137c:	4798      	blx	r3
                        }
                        break;
 801137e:	e025      	b.n	80113cc <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8011380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011384:	4a1b      	ldr	r2, [pc, #108]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 8011386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801138a:	6a1b      	ldr	r3, [r3, #32]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d01f      	beq.n	80113d0 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8011390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011394:	4a17      	ldr	r2, [pc, #92]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 8011396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801139a:	6a1b      	ldr	r3, [r3, #32]
 801139c:	6838      	ldr	r0, [r7, #0]
 801139e:	4798      	blx	r3
                        }
                        break;
 80113a0:	e016      	b.n	80113d0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80113a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113a6:	4a13      	ldr	r2, [pc, #76]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 80113a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d010      	beq.n	80113d4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80113b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113b6:	4a0f      	ldr	r2, [pc, #60]	; (80113f4 <LmHandlerPackagesNotify+0xf4>)
 80113b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113be:	6838      	ldr	r0, [r7, #0]
 80113c0:	4798      	blx	r3
                        }
                        break;
 80113c2:	e007      	b.n	80113d4 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 80113c4:	bf00      	nop
 80113c6:	e006      	b.n	80113d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80113c8:	bf00      	nop
 80113ca:	e004      	b.n	80113d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80113cc:	bf00      	nop
 80113ce:	e002      	b.n	80113d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80113d0:	bf00      	nop
 80113d2:	e000      	b.n	80113d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 80113d4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80113d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	3301      	adds	r3, #1
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	73fb      	strb	r3, [r7, #15]
 80113e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113e6:	2b04      	cmp	r3, #4
 80113e8:	dd93      	ble.n	8011312 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 80113ea:	bf00      	nop
 80113ec:	bf00      	nop
 80113ee:	3710      	adds	r7, #16
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	20000750 	.word	0x20000750

080113f8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80113fe:	2300      	movs	r3, #0
 8011400:	71fb      	strb	r3, [r7, #7]
 8011402:	e018      	b.n	8011436 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8011404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011408:	4a0f      	ldr	r2, [pc, #60]	; (8011448 <LmHandlerPackageIsTxPending+0x50>)
 801140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00b      	beq.n	801142a <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8011412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011416:	4a0c      	ldr	r2, [pc, #48]	; (8011448 <LmHandlerPackageIsTxPending+0x50>)
 8011418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	4798      	blx	r3
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d001      	beq.n	801142a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 8011426:	2301      	movs	r3, #1
 8011428:	e00a      	b.n	8011440 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801142e:	b2db      	uxtb	r3, r3
 8011430:	3301      	adds	r3, #1
 8011432:	b2db      	uxtb	r3, r3
 8011434:	71fb      	strb	r3, [r7, #7]
 8011436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801143a:	2b04      	cmp	r3, #4
 801143c:	dde2      	ble.n	8011404 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 801143e:	2300      	movs	r3, #0
}
 8011440:	4618      	mov	r0, r3
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	20000750 	.word	0x20000750

0801144c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011452:	2300      	movs	r3, #0
 8011454:	71fb      	strb	r3, [r7, #7]
 8011456:	e022      	b.n	801149e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8011458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801145c:	4a14      	ldr	r2, [pc, #80]	; (80114b0 <LmHandlerPackagesProcess+0x64>)
 801145e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d015      	beq.n	8011492 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8011466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801146a:	4a11      	ldr	r2, [pc, #68]	; (80114b0 <LmHandlerPackagesProcess+0x64>)
 801146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011470:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00d      	beq.n	8011492 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff ff23 	bl	80112c4 <LmHandlerPackageIsInitialized>
 801147e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8011480:	2b00      	cmp	r3, #0
 8011482:	d006      	beq.n	8011492 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8011484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011488:	4a09      	ldr	r2, [pc, #36]	; (80114b0 <LmHandlerPackagesProcess+0x64>)
 801148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011496:	b2db      	uxtb	r3, r3
 8011498:	3301      	adds	r3, #1
 801149a:	b2db      	uxtb	r3, r3
 801149c:	71fb      	strb	r3, [r7, #7]
 801149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114a2:	2b04      	cmp	r3, #4
 80114a4:	ddd8      	ble.n	8011458 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80114a6:	bf00      	nop
 80114a8:	bf00      	nop
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	20000750 	.word	0x20000750

080114b4 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	4603      	mov	r3, r0
 80114bc:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80114be:	4a09      	ldr	r2, [pc, #36]	; (80114e4 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 80114c0:	79fb      	ldrb	r3, [r7, #7]
 80114c2:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 80114c4:	4b08      	ldr	r3, [pc, #32]	; (80114e8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d005      	beq.n	80114da <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 80114ce:	4b06      	ldr	r3, [pc, #24]	; (80114e8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114d4:	79fa      	ldrb	r2, [r7, #7]
 80114d6:	4610      	mov	r0, r2
 80114d8:	4798      	blx	r3
    }
}
 80114da:	bf00      	nop
 80114dc:	3708      	adds	r7, #8
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	bf00      	nop
 80114e4:	20000764 	.word	0x20000764
 80114e8:	2000077c 	.word	0x2000077c

080114ec <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80114f6:	4a09      	ldr	r2, [pc, #36]	; (801151c <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 80114f8:	79fb      	ldrb	r3, [r7, #7]
 80114fa:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 80114fc:	4b08      	ldr	r3, [pc, #32]	; (8011520 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011502:	2b00      	cmp	r3, #0
 8011504:	d005      	beq.n	8011512 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8011506:	4b06      	ldr	r3, [pc, #24]	; (8011520 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801150c:	79fa      	ldrb	r2, [r7, #7]
 801150e:	4610      	mov	r0, r2
 8011510:	4798      	blx	r3
    }
}
 8011512:	bf00      	nop
 8011514:	3708      	adds	r7, #8
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	20000764 	.word	0x20000764
 8011520:	2000077c 	.word	0x2000077c

08011524 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	4603      	mov	r3, r0
 801152c:	6039      	str	r1, [r7, #0]
 801152e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d102      	bne.n	801153c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8011536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801153a:	e00e      	b.n	801155a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 801153c:	79fb      	ldrb	r3, [r7, #7]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d002      	beq.n	8011548 <LmHandlerGetVersion+0x24>
 8011542:	2b01      	cmp	r3, #1
 8011544:	d004      	beq.n	8011550 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 8011546:	e007      	b.n	8011558 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	4a06      	ldr	r2, [pc, #24]	; (8011564 <LmHandlerGetVersion+0x40>)
 801154c:	601a      	str	r2, [r3, #0]
            break;
 801154e:	e003      	b.n	8011558 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	4a05      	ldr	r2, [pc, #20]	; (8011568 <LmHandlerGetVersion+0x44>)
 8011554:	601a      	str	r2, [r3, #0]
            break;
 8011556:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011558:	2300      	movs	r3, #0
}
 801155a:	4618      	mov	r0, r3
 801155c:	370c      	adds	r7, #12
 801155e:	46bd      	mov	sp, r7
 8011560:	bc80      	pop	{r7}
 8011562:	4770      	bx	lr
 8011564:	01000400 	.word	0x01000400
 8011568:	02010001 	.word	0x02010001

0801156c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8011570:	f005 fce0 	bl	8016f34 <LoRaMacDeInitialization>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d101      	bne.n	801157e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801157a:	2300      	movs	r3, #0
 801157c:	e001      	b.n	8011582 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801157e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8011582:	4618      	mov	r0, r3
 8011584:	bd80      	pop	{r7, pc}

08011586 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8011586:	b580      	push	{r7, lr}
 8011588:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 801158a:	f004 fb93 	bl	8015cb4 <LoRaMacHalt>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d101      	bne.n	8011598 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8011594:	2300      	movs	r3, #0
 8011596:	e001      	b.n	801159c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8011598:	f06f 0301 	mvn.w	r3, #1
    }
}
 801159c:	4618      	mov	r0, r3
 801159e:	bd80      	pop	{r7, pc}

080115a0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b08c      	sub	sp, #48	; 0x30
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d102      	bne.n	80115b4 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80115ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115b2:	e016      	b.n	80115e2 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80115b4:	2321      	movs	r3, #33	; 0x21
 80115b6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80115b8:	f107 0308 	add.w	r3, r7, #8
 80115bc:	4618      	mov	r0, r3
 80115be:	f004 fc41 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80115c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115cc:	e009      	b.n	80115e2 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80115ce:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f993 2000 	ldrsb.w	r2, [r3]
 80115dc:	4b03      	ldr	r3, [pc, #12]	; (80115ec <LmHandlerGetTxPower+0x4c>)
 80115de:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 80115e0:	2300      	movs	r3, #0
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3730      	adds	r7, #48	; 0x30
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	20000764 	.word	0x20000764

080115f0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b08e      	sub	sp, #56	; 0x38
 80115f4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80115f6:	2300      	movs	r3, #0
 80115f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 80115fc:	2300      	movs	r3, #0
 80115fe:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 8011600:	f7ff ffc1 	bl	8011586 <LmHandlerHalt>
 8011604:	4603      	mov	r3, r0
 8011606:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 801160a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801160e:	2b00      	cmp	r3, #0
 8011610:	d12f      	bne.n	8011672 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 8011612:	f000 f859 	bl	80116c8 <NvmDataMgmtStoreBegin>
 8011616:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 8011618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801161a:	f113 0f02 	cmn.w	r3, #2
 801161e:	d103      	bne.n	8011628 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8011620:	23f8      	movs	r3, #248	; 0xf8
 8011622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011626:	e01c      	b.n	8011662 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8011628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801162a:	2b00      	cmp	r3, #0
 801162c:	d104      	bne.n	8011638 <LmHandlerNvmDataStore+0x48>
 801162e:	4b1b      	ldr	r3, [pc, #108]	; (801169c <LmHandlerNvmDataStore+0xac>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	695b      	ldr	r3, [r3, #20]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d103      	bne.n	8011640 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8011638:	23ff      	movs	r3, #255	; 0xff
 801163a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801163e:	e010      	b.n	8011662 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 8011640:	2327      	movs	r3, #39	; 0x27
 8011642:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8011644:	463b      	mov	r3, r7
 8011646:	4618      	mov	r0, r3
 8011648:	f004 fbfc 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 8011650:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 8011654:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8011656:	4b11      	ldr	r3, [pc, #68]	; (801169c <LmHandlerNvmDataStore+0xac>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	695b      	ldr	r3, [r3, #20]
 801165c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801165e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011660:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8011662:	f000 f847 	bl	80116f4 <NvmDataMgmtStoreEnd>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 801166c:	23ff      	movs	r3, #255	; 0xff
 801166e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8011672:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8011676:	2b00      	cmp	r3, #0
 8011678:	d109      	bne.n	801168e <LmHandlerNvmDataStore+0x9e>
 801167a:	4b08      	ldr	r3, [pc, #32]	; (801169c <LmHandlerNvmDataStore+0xac>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	69db      	ldr	r3, [r3, #28]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d004      	beq.n	801168e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8011684:	4b05      	ldr	r3, [pc, #20]	; (801169c <LmHandlerNvmDataStore+0xac>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	69db      	ldr	r3, [r3, #28]
 801168a:	2001      	movs	r0, #1
 801168c:	4798      	blx	r3
    }

    return lmhStatus;
 801168e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8011692:	4618      	mov	r0, r3
 8011694:	3738      	adds	r7, #56	; 0x38
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	2000077c 	.word	0x2000077c

080116a0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80116a0:	b480      	push	{r7}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	4603      	mov	r3, r0
 80116a8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80116aa:	4b06      	ldr	r3, [pc, #24]	; (80116c4 <NvmDataMgmtEvent+0x24>)
 80116ac:	881a      	ldrh	r2, [r3, #0]
 80116ae:	88fb      	ldrh	r3, [r7, #6]
 80116b0:	4313      	orrs	r3, r2
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	4b03      	ldr	r3, [pc, #12]	; (80116c4 <NvmDataMgmtEvent+0x24>)
 80116b6:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80116b8:	bf00      	nop
 80116ba:	370c      	adds	r7, #12
 80116bc:	46bd      	mov	sp, r7
 80116be:	bc80      	pop	{r7}
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	200008a4 	.word	0x200008a4

080116c8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 80116cc:	4b08      	ldr	r3, [pc, #32]	; (80116f0 <NvmDataMgmtStoreBegin+0x28>)
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d102      	bne.n	80116da <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 80116d4:	f06f 0301 	mvn.w	r3, #1
 80116d8:	e008      	b.n	80116ec <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 80116da:	f004 fac3 	bl	8015c64 <LoRaMacStop>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d002      	beq.n	80116ea <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 80116e4:	f06f 0302 	mvn.w	r3, #2
 80116e8:	e000      	b.n	80116ec <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 80116ea:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	200008a4 	.word	0x200008a4

080116f4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80116f8:	4b03      	ldr	r3, [pc, #12]	; (8011708 <NvmDataMgmtStoreEnd+0x14>)
 80116fa:	2200      	movs	r2, #0
 80116fc:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 80116fe:	f004 faa3 	bl	8015c48 <LoRaMacStart>
    return NVM_DATA_OK;
 8011702:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8011704:	4618      	mov	r0, r3
 8011706:	bd80      	pop	{r7, pc}
 8011708:	200008a4 	.word	0x200008a4

0801170c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 801170c:	b580      	push	{r7, lr}
 801170e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8011710:	2220      	movs	r2, #32
 8011712:	2100      	movs	r1, #0
 8011714:	4802      	ldr	r0, [pc, #8]	; (8011720 <ClassBStatusReset+0x14>)
 8011716:	f00a f8b5 	bl	801b884 <memset1>
}
 801171a:	bf00      	nop
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	200008bc 	.word	0x200008bc

08011724 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8011724:	b480      	push	{r7}
 8011726:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 8011728:	4b02      	ldr	r3, [pc, #8]	; (8011734 <LmhpCompliancePackageFactory+0x10>)
}
 801172a:	4618      	mov	r0, r3
 801172c:	46bd      	mov	sp, r7
 801172e:	bc80      	pop	{r7}
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop
 8011734:	200000d8 	.word	0x200000d8

08011738 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af02      	add	r7, sp, #8
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	4613      	mov	r3, r2
 8011744:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d018      	beq.n	801177e <LmhpComplianceInit+0x46>
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d015      	beq.n	801177e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8011752:	4a19      	ldr	r2, [pc, #100]	; (80117b8 <LmhpComplianceInit+0x80>)
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8011758:	4a18      	ldr	r2, [pc, #96]	; (80117bc <LmhpComplianceInit+0x84>)
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 801175e:	4a17      	ldr	r2, [pc, #92]	; (80117bc <LmhpComplianceInit+0x84>)
 8011760:	79fb      	ldrb	r3, [r7, #7]
 8011762:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 8011764:	4b15      	ldr	r3, [pc, #84]	; (80117bc <LmhpComplianceInit+0x84>)
 8011766:	2201      	movs	r2, #1
 8011768:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 801176a:	2300      	movs	r3, #0
 801176c:	9300      	str	r3, [sp, #0]
 801176e:	4b14      	ldr	r3, [pc, #80]	; (80117c0 <LmhpComplianceInit+0x88>)
 8011770:	2200      	movs	r2, #0
 8011772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011776:	4813      	ldr	r0, [pc, #76]	; (80117c4 <LmhpComplianceInit+0x8c>)
 8011778:	f00e f960 	bl	801fa3c <UTIL_TIMER_Create>
 801177c:	e005      	b.n	801178a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 801177e:	4b0e      	ldr	r3, [pc, #56]	; (80117b8 <LmhpComplianceInit+0x80>)
 8011780:	2200      	movs	r2, #0
 8011782:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8011784:	4b0d      	ldr	r3, [pc, #52]	; (80117bc <LmhpComplianceInit+0x84>)
 8011786:	2200      	movs	r2, #0
 8011788:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 801178a:	4b0c      	ldr	r3, [pc, #48]	; (80117bc <LmhpComplianceInit+0x84>)
 801178c:	2200      	movs	r2, #0
 801178e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 8011790:	f7ff ffbc 	bl	801170c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 8011794:	4b09      	ldr	r3, [pc, #36]	; (80117bc <LmhpComplianceInit+0x84>)
 8011796:	2200      	movs	r2, #0
 8011798:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 801179a:	4b08      	ldr	r3, [pc, #32]	; (80117bc <LmhpComplianceInit+0x84>)
 801179c:	2200      	movs	r2, #0
 801179e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 80117a0:	4b06      	ldr	r3, [pc, #24]	; (80117bc <LmhpComplianceInit+0x84>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 80117a8:	4b04      	ldr	r3, [pc, #16]	; (80117bc <LmhpComplianceInit+0x84>)
 80117aa:	2200      	movs	r2, #0
 80117ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80117b0:	bf00      	nop
 80117b2:	3710      	adds	r7, #16
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	200008e0 	.word	0x200008e0
 80117bc:	200008a8 	.word	0x200008a8
 80117c0:	080120c1 	.word	0x080120c1
 80117c4:	200008e4 	.word	0x200008e4

080117c8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80117c8:	b480      	push	{r7}
 80117ca:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80117cc:	4b02      	ldr	r3, [pc, #8]	; (80117d8 <LmhpComplianceIsInitialized+0x10>)
 80117ce:	781b      	ldrb	r3, [r3, #0]
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bc80      	pop	{r7}
 80117d6:	4770      	bx	lr
 80117d8:	200008a8 	.word	0x200008a8

080117dc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 80117dc:	b480      	push	{r7}
 80117de:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 80117e0:	4b02      	ldr	r3, [pc, #8]	; (80117ec <LmhpComplianceIsTxPending+0x10>)
 80117e2:	785b      	ldrb	r3, [r3, #1]
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bc80      	pop	{r7}
 80117ea:	4770      	bx	lr
 80117ec:	200008a8 	.word	0x200008a8

080117f0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80117f0:	b590      	push	{r4, r7, lr}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 80117f6:	4b33      	ldr	r3, [pc, #204]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 80117f8:	785b      	ldrb	r3, [r3, #1]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d03e      	beq.n	801187c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 80117fe:	f00e fadb 	bl	801fdb8 <UTIL_TIMER_GetCurrentTime>
 8011802:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8011804:	4b2f      	ldr	r3, [pc, #188]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011806:	685c      	ldr	r4, [r3, #4]
 8011808:	f7ff f8ba 	bl	8010980 <LmHandlerGetDutyCycleWaitTime>
 801180c:	4603      	mov	r3, r0
 801180e:	4423      	add	r3, r4
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	429a      	cmp	r2, r3
 8011814:	d941      	bls.n	801189a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 8011816:	4b2b      	ldr	r3, [pc, #172]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011818:	7a9b      	ldrb	r3, [r3, #10]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d03d      	beq.n	801189a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 801181e:	23e0      	movs	r3, #224	; 0xe0
 8011820:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 8011822:	4b28      	ldr	r3, [pc, #160]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011824:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 8011826:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8011828:	4b26      	ldr	r3, [pc, #152]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 801182a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 801182c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 801182e:	23ff      	movs	r3, #255	; 0xff
 8011830:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8011832:	4b24      	ldr	r3, [pc, #144]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011834:	7a19      	ldrb	r1, [r3, #8]
 8011836:	463b      	mov	r3, r7
 8011838:	2201      	movs	r2, #1
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff f968 	bl	8010b10 <LmHandlerSend>
 8011840:	4603      	mov	r3, r0
 8011842:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8011844:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d004      	beq.n	8011856 <LmhpComplianceProcess+0x66>
 801184c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011850:	f113 0f07 	cmn.w	r3, #7
 8011854:	d106      	bne.n	8011864 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 8011856:	4b1b      	ldr	r3, [pc, #108]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011858:	2200      	movs	r2, #0
 801185a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 801185c:	4b19      	ldr	r3, [pc, #100]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 801185e:	2200      	movs	r2, #0
 8011860:	729a      	strb	r2, [r3, #10]
 8011862:	e007      	b.n	8011874 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 8011864:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011868:	4817      	ldr	r0, [pc, #92]	; (80118c8 <LmhpComplianceProcess+0xd8>)
 801186a:	f00e f9fb 	bl	801fc64 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 801186e:	4816      	ldr	r0, [pc, #88]	; (80118c8 <LmhpComplianceProcess+0xd8>)
 8011870:	f00e f91a 	bl	801faa8 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 8011874:	4a13      	ldr	r2, [pc, #76]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6053      	str	r3, [r2, #4]
 801187a:	e00e      	b.n	801189a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 801187c:	4b11      	ldr	r3, [pc, #68]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 801187e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011882:	2b00      	cmp	r3, #0
 8011884:	d009      	beq.n	801189a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 8011886:	4b0f      	ldr	r3, [pc, #60]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011888:	2200      	movs	r2, #0
 801188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 801188e:	4b0d      	ldr	r3, [pc, #52]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 8011890:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011894:	4618      	mov	r0, r3
 8011896:	f7ff fa31 	bl	8010cfc <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 801189a:	4b0a      	ldr	r3, [pc, #40]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 801189c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d00a      	beq.n	80118ba <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 80118a4:	4b07      	ldr	r3, [pc, #28]	; (80118c4 <LmhpComplianceProcess+0xd4>)
 80118a6:	2200      	movs	r2, #0
 80118a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 80118ac:	4b07      	ldr	r3, [pc, #28]	; (80118cc <LmhpComplianceProcess+0xdc>)
 80118ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d002      	beq.n	80118ba <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 80118b4:	4b05      	ldr	r3, [pc, #20]	; (80118cc <LmhpComplianceProcess+0xdc>)
 80118b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b8:	4798      	blx	r3
        }
    }
}
 80118ba:	bf00      	nop
 80118bc:	3714      	adds	r7, #20
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd90      	pop	{r4, r7, pc}
 80118c2:	bf00      	nop
 80118c4:	200008a8 	.word	0x200008a8
 80118c8:	200008e4 	.word	0x200008e4
 80118cc:	200000d8 	.word	0x200000d8

080118d0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80118d0:	b5b0      	push	{r4, r5, r7, lr}
 80118d2:	b0a4      	sub	sp, #144	; 0x90
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 80118d8:	2300      	movs	r3, #0
 80118da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 80118de:	4bd0      	ldr	r3, [pc, #832]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	f083 0301 	eor.w	r3, r3, #1
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	f040 83bf 	bne.w	801206c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	78db      	ldrb	r3, [r3, #3]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d103      	bne.n	80118fe <LmhpComplianceOnMcpsIndication+0x2e>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	7b9b      	ldrb	r3, [r3, #14]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d005      	beq.n	801190a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 80118fe:	4bc8      	ldr	r3, [pc, #800]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011900:	8a1b      	ldrh	r3, [r3, #16]
 8011902:	3301      	adds	r3, #1
 8011904:	b29a      	uxth	r2, r3
 8011906:	4bc6      	ldr	r3, [pc, #792]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011908:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	7b5b      	ldrb	r3, [r3, #13]
 801190e:	f083 0301 	eor.w	r3, r3, #1
 8011912:	b2db      	uxtb	r3, r3
 8011914:	2b00      	cmp	r3, #0
 8011916:	f040 83ab 	bne.w	8012070 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	78db      	ldrb	r3, [r3, #3]
 801191e:	2be0      	cmp	r3, #224	; 0xe0
 8011920:	f040 83a8 	bne.w	8012074 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 8011924:	4bbe      	ldr	r3, [pc, #760]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011926:	2200      	movs	r2, #0
 8011928:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	689a      	ldr	r2, [r3, #8]
 801192e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011932:	1c59      	adds	r1, r3, #1
 8011934:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011938:	4413      	add	r3, r2
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	2b7f      	cmp	r3, #127	; 0x7f
 801193e:	f200 8372 	bhi.w	8012026 <LmhpComplianceOnMcpsIndication+0x756>
 8011942:	a201      	add	r2, pc, #4	; (adr r2, 8011948 <LmhpComplianceOnMcpsIndication+0x78>)
 8011944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011948:	08011b49 	.word	0x08011b49
 801194c:	08011b8d 	.word	0x08011b8d
 8011950:	08011b97 	.word	0x08011b97
 8011954:	08011bad 	.word	0x08011bad
 8011958:	08011bcf 	.word	0x08011bcf
 801195c:	08011bfd 	.word	0x08011bfd
 8011960:	08011c29 	.word	0x08011c29
 8011964:	08011c87 	.word	0x08011c87
 8011968:	08011cdf 	.word	0x08011cdf
 801196c:	08011d4b 	.word	0x08011d4b
 8011970:	08011d9b 	.word	0x08011d9b
 8011974:	08012027 	.word	0x08012027
 8011978:	08012027 	.word	0x08012027
 801197c:	08012027 	.word	0x08012027
 8011980:	08012027 	.word	0x08012027
 8011984:	08012027 	.word	0x08012027
 8011988:	08012027 	.word	0x08012027
 801198c:	08012027 	.word	0x08012027
 8011990:	08012027 	.word	0x08012027
 8011994:	08012027 	.word	0x08012027
 8011998:	08012027 	.word	0x08012027
 801199c:	08012027 	.word	0x08012027
 80119a0:	08012027 	.word	0x08012027
 80119a4:	08012027 	.word	0x08012027
 80119a8:	08012027 	.word	0x08012027
 80119ac:	08012027 	.word	0x08012027
 80119b0:	08012027 	.word	0x08012027
 80119b4:	08012027 	.word	0x08012027
 80119b8:	08012027 	.word	0x08012027
 80119bc:	08012027 	.word	0x08012027
 80119c0:	08012027 	.word	0x08012027
 80119c4:	08012027 	.word	0x08012027
 80119c8:	08011da3 	.word	0x08011da3
 80119cc:	08011db5 	.word	0x08011db5
 80119d0:	08011dbd 	.word	0x08011dbd
 80119d4:	08012027 	.word	0x08012027
 80119d8:	08012027 	.word	0x08012027
 80119dc:	08012027 	.word	0x08012027
 80119e0:	08012027 	.word	0x08012027
 80119e4:	08012027 	.word	0x08012027
 80119e8:	08012027 	.word	0x08012027
 80119ec:	08012027 	.word	0x08012027
 80119f0:	08012027 	.word	0x08012027
 80119f4:	08012027 	.word	0x08012027
 80119f8:	08012027 	.word	0x08012027
 80119fc:	08012027 	.word	0x08012027
 8011a00:	08012027 	.word	0x08012027
 8011a04:	08012027 	.word	0x08012027
 8011a08:	08012027 	.word	0x08012027
 8011a0c:	08012027 	.word	0x08012027
 8011a10:	08012027 	.word	0x08012027
 8011a14:	08012027 	.word	0x08012027
 8011a18:	08012027 	.word	0x08012027
 8011a1c:	08012027 	.word	0x08012027
 8011a20:	08012027 	.word	0x08012027
 8011a24:	08012027 	.word	0x08012027
 8011a28:	08012027 	.word	0x08012027
 8011a2c:	08012027 	.word	0x08012027
 8011a30:	08012027 	.word	0x08012027
 8011a34:	08012027 	.word	0x08012027
 8011a38:	08012027 	.word	0x08012027
 8011a3c:	08012027 	.word	0x08012027
 8011a40:	08012027 	.word	0x08012027
 8011a44:	08012027 	.word	0x08012027
 8011a48:	08012027 	.word	0x08012027
 8011a4c:	08012027 	.word	0x08012027
 8011a50:	08012027 	.word	0x08012027
 8011a54:	08012027 	.word	0x08012027
 8011a58:	08012027 	.word	0x08012027
 8011a5c:	08012027 	.word	0x08012027
 8011a60:	08012027 	.word	0x08012027
 8011a64:	08012027 	.word	0x08012027
 8011a68:	08012027 	.word	0x08012027
 8011a6c:	08012027 	.word	0x08012027
 8011a70:	08012027 	.word	0x08012027
 8011a74:	08012027 	.word	0x08012027
 8011a78:	08012027 	.word	0x08012027
 8011a7c:	08012027 	.word	0x08012027
 8011a80:	08012027 	.word	0x08012027
 8011a84:	08012027 	.word	0x08012027
 8011a88:	08012027 	.word	0x08012027
 8011a8c:	08012027 	.word	0x08012027
 8011a90:	08012027 	.word	0x08012027
 8011a94:	08012027 	.word	0x08012027
 8011a98:	08012027 	.word	0x08012027
 8011a9c:	08012027 	.word	0x08012027
 8011aa0:	08012027 	.word	0x08012027
 8011aa4:	08012027 	.word	0x08012027
 8011aa8:	08012027 	.word	0x08012027
 8011aac:	08012027 	.word	0x08012027
 8011ab0:	08012027 	.word	0x08012027
 8011ab4:	08012027 	.word	0x08012027
 8011ab8:	08012027 	.word	0x08012027
 8011abc:	08012027 	.word	0x08012027
 8011ac0:	08012027 	.word	0x08012027
 8011ac4:	08012027 	.word	0x08012027
 8011ac8:	08012027 	.word	0x08012027
 8011acc:	08012027 	.word	0x08012027
 8011ad0:	08012027 	.word	0x08012027
 8011ad4:	08012027 	.word	0x08012027
 8011ad8:	08012027 	.word	0x08012027
 8011adc:	08012027 	.word	0x08012027
 8011ae0:	08012027 	.word	0x08012027
 8011ae4:	08012027 	.word	0x08012027
 8011ae8:	08012027 	.word	0x08012027
 8011aec:	08012027 	.word	0x08012027
 8011af0:	08012027 	.word	0x08012027
 8011af4:	08012027 	.word	0x08012027
 8011af8:	08012027 	.word	0x08012027
 8011afc:	08012027 	.word	0x08012027
 8011b00:	08012027 	.word	0x08012027
 8011b04:	08012027 	.word	0x08012027
 8011b08:	08012027 	.word	0x08012027
 8011b0c:	08012027 	.word	0x08012027
 8011b10:	08012027 	.word	0x08012027
 8011b14:	08012027 	.word	0x08012027
 8011b18:	08012027 	.word	0x08012027
 8011b1c:	08012027 	.word	0x08012027
 8011b20:	08012027 	.word	0x08012027
 8011b24:	08012027 	.word	0x08012027
 8011b28:	08012027 	.word	0x08012027
 8011b2c:	08012027 	.word	0x08012027
 8011b30:	08012027 	.word	0x08012027
 8011b34:	08012027 	.word	0x08012027
 8011b38:	08012027 	.word	0x08012027
 8011b3c:	08011def 	.word	0x08011def
 8011b40:	08011e9f 	.word	0x08011e9f
 8011b44:	08011ed1 	.word	0x08011ed1
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8011b48:	4b35      	ldr	r3, [pc, #212]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b4a:	68da      	ldr	r2, [r3, #12]
 8011b4c:	4b34      	ldr	r3, [pc, #208]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b4e:	7a9b      	ldrb	r3, [r3, #10]
 8011b50:	1c59      	adds	r1, r3, #1
 8011b52:	b2c8      	uxtb	r0, r1
 8011b54:	4932      	ldr	r1, [pc, #200]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b56:	7288      	strb	r0, [r1, #10]
 8011b58:	4413      	add	r3, r2
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8011b5e:	4b30      	ldr	r3, [pc, #192]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b60:	68da      	ldr	r2, [r3, #12]
 8011b62:	4b2f      	ldr	r3, [pc, #188]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b64:	7a9b      	ldrb	r3, [r3, #10]
 8011b66:	1c59      	adds	r1, r3, #1
 8011b68:	b2c8      	uxtb	r0, r1
 8011b6a:	492d      	ldr	r1, [pc, #180]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b6c:	7288      	strb	r0, [r1, #10]
 8011b6e:	4413      	add	r3, r2
 8011b70:	2206      	movs	r2, #6
 8011b72:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8011b74:	4b2a      	ldr	r3, [pc, #168]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b76:	68da      	ldr	r2, [r3, #12]
 8011b78:	4b29      	ldr	r3, [pc, #164]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b7a:	7a9b      	ldrb	r3, [r3, #10]
 8011b7c:	1c59      	adds	r1, r3, #1
 8011b7e:	b2c8      	uxtb	r0, r1
 8011b80:	4927      	ldr	r1, [pc, #156]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b82:	7288      	strb	r0, [r1, #10]
 8011b84:	4413      	add	r3, r2
 8011b86:	2201      	movs	r2, #1
 8011b88:	701a      	strb	r2, [r3, #0]
                break;
 8011b8a:	e257      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8011b8c:	4b24      	ldr	r3, [pc, #144]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b8e:	2201      	movs	r2, #1
 8011b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8011b94:	e252      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 8011b96:	4b23      	ldr	r3, [pc, #140]	; (8011c24 <LmhpComplianceOnMcpsIndication+0x354>)
 8011b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f000 8245 	beq.w	801202a <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8011ba0:	4b20      	ldr	r3, [pc, #128]	; (8011c24 <LmhpComplianceOnMcpsIndication+0x354>)
 8011ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ba4:	2101      	movs	r1, #1
 8011ba6:	2002      	movs	r0, #2
 8011ba8:	4798      	blx	r3
                }
                break;
 8011baa:	e23e      	b.n	801202a <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	689a      	ldr	r2, [r3, #8]
 8011bb0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011bb4:	1c59      	adds	r1, r3, #1
 8011bb6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011bba:	4413      	add	r3, r2
 8011bbc:	781a      	ldrb	r2, [r3, #0]
 8011bbe:	4b18      	ldr	r3, [pc, #96]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011bc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8011bc4:	4b16      	ldr	r3, [pc, #88]	; (8011c20 <LmhpComplianceOnMcpsIndication+0x350>)
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8011bcc:	e236      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 8011bce:	2304      	movs	r3, #4
 8011bd0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	689a      	ldr	r2, [r3, #8]
 8011bd6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011bda:	1c59      	adds	r1, r3, #1
 8011bdc:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011be0:	4413      	add	r3, r2
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	bf14      	ite	ne
 8011be8:	2301      	movne	r3, #1
 8011bea:	2300      	moveq	r3, #0
 8011bec:	b2db      	uxtb	r3, r3
 8011bee:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 8011bf0:	f107 0308 	add.w	r3, r7, #8
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f004 fafd 	bl	80161f4 <LoRaMacMibSetRequestConfirm>
                break;
 8011bfa:	e21f      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	689a      	ldr	r2, [r3, #8]
 8011c00:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011c04:	1c59      	adds	r1, r3, #1
 8011c06:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011c0a:	4413      	add	r3, r2
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	bf14      	ite	ne
 8011c12:	2301      	movne	r3, #1
 8011c14:	2300      	moveq	r3, #0
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f005 f965 	bl	8016ee8 <LoRaMacTestSetDutyCycleOn>
                break;
 8011c1e:	e20d      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
 8011c20:	200008a8 	.word	0x200008a8
 8011c24:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8011c28:	4ba5      	ldr	r3, [pc, #660]	; (8011ec0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 8011c2a:	f107 0408 	add.w	r4, r7, #8
 8011c2e:	461d      	mov	r5, r3
 8011c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	689a      	ldr	r2, [r3, #8]
 8011c44:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011c48:	1c59      	adds	r1, r3, #1
 8011c4a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011c4e:	4413      	add	r3, r2
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8011c56:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8011c5a:	2b0a      	cmp	r3, #10
 8011c5c:	f200 81e7 	bhi.w	801202e <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8011c60:	4b98      	ldr	r3, [pc, #608]	; (8011ec4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	f000 81e1 	beq.w	801202e <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8011c6c:	4b95      	ldr	r3, [pc, #596]	; (8011ec4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	685a      	ldr	r2, [r3, #4]
 8011c72:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	3390      	adds	r3, #144	; 0x90
 8011c7a:	443b      	add	r3, r7
 8011c7c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8011c80:	4618      	mov	r0, r3
 8011c82:	4790      	blx	r2
                    }
                }
                break;
 8011c84:	e1d3      	b.n	801202e <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	689a      	ldr	r2, [r3, #8]
 8011c8a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011c8e:	1c59      	adds	r1, r3, #1
 8011c90:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011c94:	4413      	add	r3, r2
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8011c9c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d004      	beq.n	8011cae <LmhpComplianceOnMcpsIndication+0x3de>
 8011ca4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	f040 81c2 	bne.w	8012032 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8011cae:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	bf14      	ite	ne
 8011cb6:	2301      	movne	r3, #1
 8011cb8:	2300      	moveq	r3, #0
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	4b82      	ldr	r3, [pc, #520]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011cc0:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8011cc2:	4b80      	ldr	r3, [pc, #512]	; (8011ec4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	689b      	ldr	r3, [r3, #8]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	f000 81b2 	beq.w	8012032 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8011cce:	4b7d      	ldr	r3, [pc, #500]	; (8011ec4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	689b      	ldr	r3, [r3, #8]
 8011cd4:	4a7c      	ldr	r2, [pc, #496]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011cd6:	7a12      	ldrb	r2, [r2, #8]
 8011cd8:	4610      	mov	r0, r2
 8011cda:	4798      	blx	r3
                    }
                }
                break;
 8011cdc:	e1a9      	b.n	8012032 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8011cde:	4b7a      	ldr	r3, [pc, #488]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011ce0:	68da      	ldr	r2, [r3, #12]
 8011ce2:	4b79      	ldr	r3, [pc, #484]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011ce4:	7a9b      	ldrb	r3, [r3, #10]
 8011ce6:	1c59      	adds	r1, r3, #1
 8011ce8:	b2c8      	uxtb	r0, r1
 8011cea:	4977      	ldr	r1, [pc, #476]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011cec:	7288      	strb	r0, [r1, #10]
 8011cee:	4413      	add	r3, r2
 8011cf0:	2208      	movs	r2, #8
 8011cf2:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8011cfa:	e019      	b.n	8011d30 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	689a      	ldr	r2, [r3, #8]
 8011d00:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011d04:	1c59      	adds	r1, r3, #1
 8011d06:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011d0a:	4413      	add	r3, r2
 8011d0c:	781a      	ldrb	r2, [r3, #0]
 8011d0e:	4b6e      	ldr	r3, [pc, #440]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d10:	68d9      	ldr	r1, [r3, #12]
 8011d12:	4b6d      	ldr	r3, [pc, #436]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d14:	7a9b      	ldrb	r3, [r3, #10]
 8011d16:	1c58      	adds	r0, r3, #1
 8011d18:	b2c4      	uxtb	r4, r0
 8011d1a:	486b      	ldr	r0, [pc, #428]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d1c:	7284      	strb	r4, [r0, #10]
 8011d1e:	440b      	add	r3, r1
 8011d20:	3201      	adds	r2, #1
 8011d22:	b2d2      	uxtb	r2, r2
 8011d24:	701a      	strb	r2, [r3, #0]
                     i++ )
 8011d26:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8011d30:	4b65      	ldr	r3, [pc, #404]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d32:	7a5a      	ldrb	r2, [r3, #9]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	7b1b      	ldrb	r3, [r3, #12]
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	bf28      	it	cs
 8011d3c:	4613      	movcs	r3, r2
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d3d9      	bcc.n	8011cfc <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 8011d48:	e178      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8011d4a:	4b5f      	ldr	r3, [pc, #380]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d4c:	68da      	ldr	r2, [r3, #12]
 8011d4e:	4b5e      	ldr	r3, [pc, #376]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d50:	7a9b      	ldrb	r3, [r3, #10]
 8011d52:	1c59      	adds	r1, r3, #1
 8011d54:	b2c8      	uxtb	r0, r1
 8011d56:	495c      	ldr	r1, [pc, #368]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d58:	7288      	strb	r0, [r1, #10]
 8011d5a:	4413      	add	r3, r2
 8011d5c:	2209      	movs	r2, #9
 8011d5e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8011d60:	4b59      	ldr	r3, [pc, #356]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d62:	8a18      	ldrh	r0, [r3, #16]
 8011d64:	4b58      	ldr	r3, [pc, #352]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d66:	68da      	ldr	r2, [r3, #12]
 8011d68:	4b57      	ldr	r3, [pc, #348]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d6a:	7a9b      	ldrb	r3, [r3, #10]
 8011d6c:	1c59      	adds	r1, r3, #1
 8011d6e:	b2cc      	uxtb	r4, r1
 8011d70:	4955      	ldr	r1, [pc, #340]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d72:	728c      	strb	r4, [r1, #10]
 8011d74:	4413      	add	r3, r2
 8011d76:	b2c2      	uxtb	r2, r0
 8011d78:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8011d7a:	4b53      	ldr	r3, [pc, #332]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d7c:	8a1b      	ldrh	r3, [r3, #16]
 8011d7e:	0a1b      	lsrs	r3, r3, #8
 8011d80:	b298      	uxth	r0, r3
 8011d82:	4b51      	ldr	r3, [pc, #324]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d84:	68da      	ldr	r2, [r3, #12]
 8011d86:	4b50      	ldr	r3, [pc, #320]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d88:	7a9b      	ldrb	r3, [r3, #10]
 8011d8a:	1c59      	adds	r1, r3, #1
 8011d8c:	b2cc      	uxtb	r4, r1
 8011d8e:	494e      	ldr	r1, [pc, #312]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d90:	728c      	strb	r4, [r1, #10]
 8011d92:	4413      	add	r3, r2
 8011d94:	b2c2      	uxtb	r2, r0
 8011d96:	701a      	strb	r2, [r3, #0]
                break;
 8011d98:	e150      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 8011d9a:	4b4b      	ldr	r3, [pc, #300]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	821a      	strh	r2, [r3, #16]
                break;
 8011da0:	e14c      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 8011da2:	2305      	movs	r3, #5
 8011da4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 8011da8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011dac:	4618      	mov	r0, r3
 8011dae:	f004 fdcb 	bl	8016948 <LoRaMacMlmeRequest>
                break;
 8011db2:	e143      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 8011db4:	4b45      	ldr	r3, [pc, #276]	; (8011ecc <LmhpComplianceOnMcpsIndication+0x5fc>)
 8011db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db8:	4798      	blx	r3
                break;
 8011dba:	e13f      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	689a      	ldr	r2, [r3, #8]
 8011dc0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011dc4:	1c59      	adds	r1, r3, #1
 8011dc6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011dca:	4413      	add	r3, r2
 8011dcc:	781a      	ldrb	r2, [r3, #0]
 8011dce:	4b3e      	ldr	r3, [pc, #248]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011dd0:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8011dd2:	4b3c      	ldr	r3, [pc, #240]	; (8011ec4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f000 812c 	beq.w	8012036 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8011dde:	4b39      	ldr	r3, [pc, #228]	; (8011ec4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	4a38      	ldr	r2, [pc, #224]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011de6:	7d52      	ldrb	r2, [r2, #21]
 8011de8:	4610      	mov	r0, r2
 8011dea:	4798      	blx	r3
                }
                break;
 8011dec:	e123      	b.n	8012036 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	7b1b      	ldrb	r3, [r3, #12]
 8011df2:	2b07      	cmp	r3, #7
 8011df4:	f040 8121 	bne.w	801203a <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 8011df8:	2306      	movs	r3, #6
 8011dfa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	689a      	ldr	r2, [r3, #8]
 8011e02:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e06:	4413      	add	r3, r2
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	b21a      	sxth	r2, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6899      	ldr	r1, [r3, #8]
 8011e10:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e14:	3301      	adds	r3, #1
 8011e16:	440b      	add	r3, r1
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	021b      	lsls	r3, r3, #8
 8011e1c:	b21b      	sxth	r3, r3
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	b21b      	sxth	r3, r3
 8011e22:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 8011e24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 8011e28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e2c:	3302      	adds	r3, #2
 8011e2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	689a      	ldr	r2, [r3, #8]
 8011e36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e3a:	4413      	add	r3, r2
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	4619      	mov	r1, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	689a      	ldr	r2, [r3, #8]
 8011e44:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e48:	3301      	adds	r3, #1
 8011e4a:	4413      	add	r3, r2
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	021b      	lsls	r3, r3, #8
 8011e50:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6899      	ldr	r1, [r3, #8]
 8011e58:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e5c:	3302      	adds	r3, #2
 8011e5e:	440b      	add	r3, r1
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8011e64:	4313      	orrs	r3, r2
 8011e66:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8011e68:	2364      	movs	r3, #100	; 0x64
 8011e6a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8011e6e:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 8011e70:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e74:	3303      	adds	r3, #3
 8011e76:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	689a      	ldr	r2, [r3, #8]
 8011e7e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e82:	1c59      	adds	r1, r3, #1
 8011e84:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011e88:	4413      	add	r3, r2
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	b25b      	sxtb	r3, r3
 8011e8e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8011e92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011e96:	4618      	mov	r0, r3
 8011e98:	f004 fd56 	bl	8016948 <LoRaMacMlmeRequest>
                }
                break;
 8011e9c:	e0cd      	b.n	801203a <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8011e9e:	233b      	movs	r3, #59	; 0x3b
 8011ea0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 8011eaa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f004 f9a0 	bl	80161f4 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 8011eb4:	4b04      	ldr	r3, [pc, #16]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8011ebc:	e0be      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
 8011ebe:	bf00      	nop
 8011ec0:	080216c0 	.word	0x080216c0
 8011ec4:	200008e0 	.word	0x200008e0
 8011ec8:	200008a8 	.word	0x200008a8
 8011ecc:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 8011ed0:	232a      	movs	r3, #42	; 0x2a
 8011ed2:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 8011ed4:	f107 0308 	add.w	r3, r7, #8
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f003 ffb3 	bl	8015e44 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8011ee6:	4b65      	ldr	r3, [pc, #404]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ee8:	68da      	ldr	r2, [r3, #12]
 8011eea:	4b64      	ldr	r3, [pc, #400]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011eec:	7a9b      	ldrb	r3, [r3, #10]
 8011eee:	1c59      	adds	r1, r3, #1
 8011ef0:	b2c8      	uxtb	r0, r1
 8011ef2:	4962      	ldr	r1, [pc, #392]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ef4:	7288      	strb	r0, [r1, #10]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	227f      	movs	r2, #127	; 0x7f
 8011efa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8011efc:	4b60      	ldr	r3, [pc, #384]	; (8012080 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	4b5e      	ldr	r3, [pc, #376]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f02:	68d9      	ldr	r1, [r3, #12]
 8011f04:	4b5d      	ldr	r3, [pc, #372]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f06:	7a9b      	ldrb	r3, [r3, #10]
 8011f08:	1c58      	adds	r0, r3, #1
 8011f0a:	b2c4      	uxtb	r4, r0
 8011f0c:	485b      	ldr	r0, [pc, #364]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f0e:	7284      	strb	r4, [r0, #10]
 8011f10:	440b      	add	r3, r1
 8011f12:	78d2      	ldrb	r2, [r2, #3]
 8011f14:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8011f16:	4b5a      	ldr	r3, [pc, #360]	; (8012080 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	4b58      	ldr	r3, [pc, #352]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f1c:	68d9      	ldr	r1, [r3, #12]
 8011f1e:	4b57      	ldr	r3, [pc, #348]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f20:	7a9b      	ldrb	r3, [r3, #10]
 8011f22:	1c58      	adds	r0, r3, #1
 8011f24:	b2c4      	uxtb	r4, r0
 8011f26:	4855      	ldr	r0, [pc, #340]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f28:	7284      	strb	r4, [r0, #10]
 8011f2a:	440b      	add	r3, r1
 8011f2c:	7892      	ldrb	r2, [r2, #2]
 8011f2e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8011f30:	4b53      	ldr	r3, [pc, #332]	; (8012080 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	4b51      	ldr	r3, [pc, #324]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f36:	68d9      	ldr	r1, [r3, #12]
 8011f38:	4b50      	ldr	r3, [pc, #320]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f3a:	7a9b      	ldrb	r3, [r3, #10]
 8011f3c:	1c58      	adds	r0, r3, #1
 8011f3e:	b2c4      	uxtb	r4, r0
 8011f40:	484e      	ldr	r0, [pc, #312]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f42:	7284      	strb	r4, [r0, #10]
 8011f44:	440b      	add	r3, r1
 8011f46:	7852      	ldrb	r2, [r2, #1]
 8011f48:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8011f4a:	4b4d      	ldr	r3, [pc, #308]	; (8012080 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	4b4b      	ldr	r3, [pc, #300]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f50:	68d9      	ldr	r1, [r3, #12]
 8011f52:	4b4a      	ldr	r3, [pc, #296]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f54:	7a9b      	ldrb	r3, [r3, #10]
 8011f56:	1c58      	adds	r0, r3, #1
 8011f58:	b2c4      	uxtb	r4, r0
 8011f5a:	4848      	ldr	r0, [pc, #288]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f5c:	7284      	strb	r4, [r0, #10]
 8011f5e:	440b      	add	r3, r1
 8011f60:	7812      	ldrb	r2, [r2, #0]
 8011f62:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8011f64:	4b45      	ldr	r3, [pc, #276]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f66:	68da      	ldr	r2, [r3, #12]
 8011f68:	4b44      	ldr	r3, [pc, #272]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f6a:	7a9b      	ldrb	r3, [r3, #10]
 8011f6c:	1c59      	adds	r1, r3, #1
 8011f6e:	b2c8      	uxtb	r0, r1
 8011f70:	4942      	ldr	r1, [pc, #264]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f72:	7288      	strb	r0, [r1, #10]
 8011f74:	4413      	add	r3, r2
 8011f76:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8011f7a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8011f7c:	4b3f      	ldr	r3, [pc, #252]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f7e:	68da      	ldr	r2, [r3, #12]
 8011f80:	4b3e      	ldr	r3, [pc, #248]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f82:	7a9b      	ldrb	r3, [r3, #10]
 8011f84:	1c59      	adds	r1, r3, #1
 8011f86:	b2c8      	uxtb	r0, r1
 8011f88:	493c      	ldr	r1, [pc, #240]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f8a:	7288      	strb	r0, [r1, #10]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8011f92:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8011f94:	4b39      	ldr	r3, [pc, #228]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f96:	68da      	ldr	r2, [r3, #12]
 8011f98:	4b38      	ldr	r3, [pc, #224]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f9a:	7a9b      	ldrb	r3, [r3, #10]
 8011f9c:	1c59      	adds	r1, r3, #1
 8011f9e:	b2c8      	uxtb	r0, r1
 8011fa0:	4936      	ldr	r1, [pc, #216]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fa2:	7288      	strb	r0, [r1, #10]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8011faa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8011fac:	4b33      	ldr	r3, [pc, #204]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fae:	68da      	ldr	r2, [r3, #12]
 8011fb0:	4b32      	ldr	r3, [pc, #200]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fb2:	7a9b      	ldrb	r3, [r3, #10]
 8011fb4:	1c59      	adds	r1, r3, #1
 8011fb6:	b2c8      	uxtb	r0, r1
 8011fb8:	4930      	ldr	r1, [pc, #192]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fba:	7288      	strb	r0, [r1, #10]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011fc2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8011fc4:	4b2d      	ldr	r3, [pc, #180]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fc6:	68da      	ldr	r2, [r3, #12]
 8011fc8:	4b2c      	ldr	r3, [pc, #176]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fca:	7a9b      	ldrb	r3, [r3, #10]
 8011fcc:	1c59      	adds	r1, r3, #1
 8011fce:	b2c8      	uxtb	r0, r1
 8011fd0:	492a      	ldr	r1, [pc, #168]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fd2:	7288      	strb	r0, [r1, #10]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011fda:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8011fdc:	4b27      	ldr	r3, [pc, #156]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fde:	68da      	ldr	r2, [r3, #12]
 8011fe0:	4b26      	ldr	r3, [pc, #152]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fe2:	7a9b      	ldrb	r3, [r3, #10]
 8011fe4:	1c59      	adds	r1, r3, #1
 8011fe6:	b2c8      	uxtb	r0, r1
 8011fe8:	4924      	ldr	r1, [pc, #144]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fea:	7288      	strb	r0, [r1, #10]
 8011fec:	4413      	add	r3, r2
 8011fee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011ff2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8011ff4:	4b21      	ldr	r3, [pc, #132]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ff6:	68da      	ldr	r2, [r3, #12]
 8011ff8:	4b20      	ldr	r3, [pc, #128]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ffa:	7a9b      	ldrb	r3, [r3, #10]
 8011ffc:	1c59      	adds	r1, r3, #1
 8011ffe:	b2c8      	uxtb	r0, r1
 8012000:	491e      	ldr	r1, [pc, #120]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012002:	7288      	strb	r0, [r1, #10]
 8012004:	4413      	add	r3, r2
 8012006:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801200a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 801200c:	4b1b      	ldr	r3, [pc, #108]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801200e:	68da      	ldr	r2, [r3, #12]
 8012010:	4b1a      	ldr	r3, [pc, #104]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012012:	7a9b      	ldrb	r3, [r3, #10]
 8012014:	1c59      	adds	r1, r3, #1
 8012016:	b2c8      	uxtb	r0, r1
 8012018:	4918      	ldr	r1, [pc, #96]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801201a:	7288      	strb	r0, [r1, #10]
 801201c:	4413      	add	r3, r2
 801201e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012022:	701a      	strb	r2, [r3, #0]
                break;
 8012024:	e00a      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 8012026:	bf00      	nop
 8012028:	e008      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801202a:	bf00      	nop
 801202c:	e006      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801202e:	bf00      	nop
 8012030:	e004      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012032:	bf00      	nop
 8012034:	e002      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012036:	bf00      	nop
 8012038:	e000      	b.n	801203c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801203a:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 801203c:	4b0f      	ldr	r3, [pc, #60]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801203e:	7a9b      	ldrb	r3, [r3, #10]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d00c      	beq.n	801205e <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 8012044:	4b0f      	ldr	r3, [pc, #60]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012046:	7a5b      	ldrb	r3, [r3, #9]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d114      	bne.n	8012076 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 801204c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012050:	480c      	ldr	r0, [pc, #48]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012052:	f00d fe07 	bl	801fc64 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8012056:	480b      	ldr	r0, [pc, #44]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012058:	f00d fd26 	bl	801faa8 <UTIL_TIMER_Start>
 801205c:	e00b      	b.n	8012076 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 801205e:	4809      	ldr	r0, [pc, #36]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012060:	f00d fd90 	bl	801fb84 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8012064:	4b05      	ldr	r3, [pc, #20]	; (801207c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012066:	2200      	movs	r2, #0
 8012068:	705a      	strb	r2, [r3, #1]
 801206a:	e004      	b.n	8012076 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 801206c:	bf00      	nop
 801206e:	e002      	b.n	8012076 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012070:	bf00      	nop
 8012072:	e000      	b.n	8012076 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012074:	bf00      	nop
    }
}
 8012076:	3790      	adds	r7, #144	; 0x90
 8012078:	46bd      	mov	sp, r7
 801207a:	bdb0      	pop	{r4, r5, r7, pc}
 801207c:	200008a8 	.word	0x200008a8
 8012080:	200008e0 	.word	0x200008e0
 8012084:	200008e4 	.word	0x200008e4

08012088 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 8012090:	bf00      	nop
    }
}
 8012092:	bf00      	nop
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	bc80      	pop	{r7}
 801209a:	4770      	bx	lr

0801209c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80120a4:	4b05      	ldr	r3, [pc, #20]	; (80120bc <LmhpComplianceOnMlmeIndication+0x20>)
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	f083 0301 	eor.w	r3, r3, #1
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	2b00      	cmp	r3, #0
    {
        return;
 80120b0:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bc80      	pop	{r7}
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	200008a8 	.word	0x200008a8

080120c0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 80120c8:	4b08      	ldr	r3, [pc, #32]	; (80120ec <OnProcessTimer+0x2c>)
 80120ca:	7a9b      	ldrb	r3, [r3, #10]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d002      	beq.n	80120d6 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 80120d0:	4b06      	ldr	r3, [pc, #24]	; (80120ec <OnProcessTimer+0x2c>)
 80120d2:	2201      	movs	r2, #1
 80120d4:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 80120d6:	4b06      	ldr	r3, [pc, #24]	; (80120f0 <OnProcessTimer+0x30>)
 80120d8:	695b      	ldr	r3, [r3, #20]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d002      	beq.n	80120e4 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 80120de:	4b04      	ldr	r3, [pc, #16]	; (80120f0 <OnProcessTimer+0x30>)
 80120e0:	695b      	ldr	r3, [r3, #20]
 80120e2:	4798      	blx	r3
    }
}
 80120e4:	bf00      	nop
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	200008a8 	.word	0x200008a8
 80120f0:	200000d8 	.word	0x200000d8

080120f4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 80120fc:	2300      	movs	r3, #0
}
 80120fe:	4618      	mov	r0, r3
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	bc80      	pop	{r7}
 8012106:	4770      	bx	lr

08012108 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	4603      	mov	r3, r0
 8012110:	6039      	str	r1, [r7, #0]
 8012112:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8012114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	bc80      	pop	{r7}
 8012120:	4770      	bx	lr
	...

08012124 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8012124:	b590      	push	{r4, r7, lr}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 801212a:	f00d fe45 	bl	801fdb8 <UTIL_TIMER_GetCurrentTime>
 801212e:	4603      	mov	r3, r0
 8012130:	4a0f      	ldr	r2, [pc, #60]	; (8012170 <OnRadioTxDone+0x4c>)
 8012132:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8012134:	4c0f      	ldr	r4, [pc, #60]	; (8012174 <OnRadioTxDone+0x50>)
 8012136:	463b      	mov	r3, r7
 8012138:	4618      	mov	r0, r3
 801213a:	f00c ff9b 	bl	801f074 <SysTimeGet>
 801213e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8012142:	463a      	mov	r2, r7
 8012144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012148:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 801214c:	4a0a      	ldr	r2, [pc, #40]	; (8012178 <OnRadioTxDone+0x54>)
 801214e:	7813      	ldrb	r3, [r2, #0]
 8012150:	f043 0320 	orr.w	r3, r3, #32
 8012154:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012156:	f003 fa71 	bl	801563c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 801215a:	4b08      	ldr	r3, [pc, #32]	; (801217c <OnRadioTxDone+0x58>)
 801215c:	2201      	movs	r2, #1
 801215e:	2100      	movs	r1, #0
 8012160:	2002      	movs	r0, #2
 8012162:	f00d ff19 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 8012166:	bf00      	nop
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	bd90      	pop	{r4, r7, pc}
 801216e:	bf00      	nop
 8012170:	20001a44 	.word	0x20001a44
 8012174:	200008fc 	.word	0x200008fc
 8012178:	20001a40 	.word	0x20001a40
 801217c:	080216ec 	.word	0x080216ec

08012180 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	4608      	mov	r0, r1
 801218a:	4611      	mov	r1, r2
 801218c:	461a      	mov	r2, r3
 801218e:	4603      	mov	r3, r0
 8012190:	817b      	strh	r3, [r7, #10]
 8012192:	460b      	mov	r3, r1
 8012194:	813b      	strh	r3, [r7, #8]
 8012196:	4613      	mov	r3, r2
 8012198:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 801219a:	f00d fe0d 	bl	801fdb8 <UTIL_TIMER_GetCurrentTime>
 801219e:	4603      	mov	r3, r0
 80121a0:	4a11      	ldr	r2, [pc, #68]	; (80121e8 <OnRadioRxDone+0x68>)
 80121a2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 80121a4:	4a10      	ldr	r2, [pc, #64]	; (80121e8 <OnRadioRxDone+0x68>)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 80121aa:	4a0f      	ldr	r2, [pc, #60]	; (80121e8 <OnRadioRxDone+0x68>)
 80121ac:	897b      	ldrh	r3, [r7, #10]
 80121ae:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 80121b0:	4a0d      	ldr	r2, [pc, #52]	; (80121e8 <OnRadioRxDone+0x68>)
 80121b2:	893b      	ldrh	r3, [r7, #8]
 80121b4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 80121b6:	4a0c      	ldr	r2, [pc, #48]	; (80121e8 <OnRadioRxDone+0x68>)
 80121b8:	79fb      	ldrb	r3, [r7, #7]
 80121ba:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 80121bc:	4a0b      	ldr	r2, [pc, #44]	; (80121ec <OnRadioRxDone+0x6c>)
 80121be:	7813      	ldrb	r3, [r2, #0]
 80121c0:	f043 0310 	orr.w	r3, r3, #16
 80121c4:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80121c6:	4a09      	ldr	r2, [pc, #36]	; (80121ec <OnRadioRxDone+0x6c>)
 80121c8:	7813      	ldrb	r3, [r2, #0]
 80121ca:	f043 0301 	orr.w	r3, r3, #1
 80121ce:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 80121d0:	f003 fa34 	bl	801563c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80121d4:	4b06      	ldr	r3, [pc, #24]	; (80121f0 <OnRadioRxDone+0x70>)
 80121d6:	2201      	movs	r2, #1
 80121d8:	2100      	movs	r1, #0
 80121da:	2002      	movs	r0, #2
 80121dc:	f00d fedc 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 80121e0:	bf00      	nop
 80121e2:	3710      	adds	r7, #16
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	20001a48 	.word	0x20001a48
 80121ec:	20001a40 	.word	0x20001a40
 80121f0:	080216fc 	.word	0x080216fc

080121f4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80121f8:	4a07      	ldr	r2, [pc, #28]	; (8012218 <OnRadioTxTimeout+0x24>)
 80121fa:	7813      	ldrb	r3, [r2, #0]
 80121fc:	f043 0308 	orr.w	r3, r3, #8
 8012200:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012202:	f003 fa1b 	bl	801563c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8012206:	4b05      	ldr	r3, [pc, #20]	; (801221c <OnRadioTxTimeout+0x28>)
 8012208:	2201      	movs	r2, #1
 801220a:	2100      	movs	r1, #0
 801220c:	2002      	movs	r0, #2
 801220e:	f00d fec3 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 8012212:	bf00      	nop
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	20001a40 	.word	0x20001a40
 801221c:	0802170c 	.word	0x0802170c

08012220 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8012220:	b580      	push	{r7, lr}
 8012222:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8012224:	4a04      	ldr	r2, [pc, #16]	; (8012238 <OnRadioRxError+0x18>)
 8012226:	7813      	ldrb	r3, [r2, #0]
 8012228:	f043 0304 	orr.w	r3, r3, #4
 801222c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801222e:	f003 fa05 	bl	801563c <OnMacProcessNotify>
}
 8012232:	bf00      	nop
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	20001a40 	.word	0x20001a40

0801223c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 801223c:	b580      	push	{r7, lr}
 801223e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8012240:	4a07      	ldr	r2, [pc, #28]	; (8012260 <OnRadioRxTimeout+0x24>)
 8012242:	7813      	ldrb	r3, [r2, #0]
 8012244:	f043 0302 	orr.w	r3, r3, #2
 8012248:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801224a:	f003 f9f7 	bl	801563c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 801224e:	4b05      	ldr	r3, [pc, #20]	; (8012264 <OnRadioRxTimeout+0x28>)
 8012250:	2201      	movs	r2, #1
 8012252:	2100      	movs	r1, #0
 8012254:	2002      	movs	r0, #2
 8012256:	f00d fe9f 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 801225a:	bf00      	nop
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	20001a40 	.word	0x20001a40
 8012264:	0802171c 	.word	0x0802171c

08012268 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8012268:	b480      	push	{r7}
 801226a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801226c:	4b08      	ldr	r3, [pc, #32]	; (8012290 <UpdateRxSlotIdleState+0x28>)
 801226e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012272:	2b02      	cmp	r3, #2
 8012274:	d004      	beq.n	8012280 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8012276:	4b07      	ldr	r3, [pc, #28]	; (8012294 <UpdateRxSlotIdleState+0x2c>)
 8012278:	2206      	movs	r2, #6
 801227a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 801227e:	e003      	b.n	8012288 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012280:	4b04      	ldr	r3, [pc, #16]	; (8012294 <UpdateRxSlotIdleState+0x2c>)
 8012282:	2202      	movs	r2, #2
 8012284:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 8012288:	bf00      	nop
 801228a:	46bd      	mov	sp, r7
 801228c:	bc80      	pop	{r7}
 801228e:	4770      	bx	lr
 8012290:	20000e18 	.word	0x20000e18
 8012294:	200008fc 	.word	0x200008fc

08012298 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b092      	sub	sp, #72	; 0x48
 801229c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801229e:	4b4a      	ldr	r3, [pc, #296]	; (80123c8 <ProcessRadioTxDone+0x130>)
 80122a0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80122a4:	2b02      	cmp	r3, #2
 80122a6:	d002      	beq.n	80122ae <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 80122a8:	4b48      	ldr	r3, [pc, #288]	; (80123cc <ProcessRadioTxDone+0x134>)
 80122aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ac:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122ae:	f3ef 8310 	mrs	r3, PRIMASK
 80122b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80122b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 80122b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 80122b8:	b672      	cpsid	i
}
 80122ba:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 80122bc:	f00d fd7c 	bl	801fdb8 <UTIL_TIMER_GetCurrentTime>
 80122c0:	4602      	mov	r2, r0
 80122c2:	4b43      	ldr	r3, [pc, #268]	; (80123d0 <ProcessRadioTxDone+0x138>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	1ad3      	subs	r3, r2, r3
 80122c8:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 80122ca:	4b42      	ldr	r3, [pc, #264]	; (80123d4 <ProcessRadioTxDone+0x13c>)
 80122cc:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 80122d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	4619      	mov	r1, r3
 80122d6:	4840      	ldr	r0, [pc, #256]	; (80123d8 <ProcessRadioTxDone+0x140>)
 80122d8:	f00d fcc4 	bl	801fc64 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80122dc:	483e      	ldr	r0, [pc, #248]	; (80123d8 <ProcessRadioTxDone+0x140>)
 80122de:	f00d fbe3 	bl	801faa8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 80122e2:	4b3c      	ldr	r3, [pc, #240]	; (80123d4 <ProcessRadioTxDone+0x13c>)
 80122e4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80122e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	4619      	mov	r1, r3
 80122ee:	483b      	ldr	r0, [pc, #236]	; (80123dc <ProcessRadioTxDone+0x144>)
 80122f0:	f00d fcb8 	bl	801fc64 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80122f4:	4839      	ldr	r0, [pc, #228]	; (80123dc <ProcessRadioTxDone+0x144>)
 80122f6:	f00d fbd7 	bl	801faa8 <UTIL_TIMER_Start>
 80122fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012300:	f383 8810 	msr	PRIMASK, r3
}
 8012304:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8012306:	4b33      	ldr	r3, [pc, #204]	; (80123d4 <ProcessRadioTxDone+0x13c>)
 8012308:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801230c:	2b00      	cmp	r3, #0
 801230e:	d01a      	beq.n	8012346 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8012310:	2315      	movs	r3, #21
 8012312:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012316:	4b2c      	ldr	r3, [pc, #176]	; (80123c8 <ProcessRadioTxDone+0x130>)
 8012318:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801231c:	f107 0220 	add.w	r2, r7, #32
 8012320:	4611      	mov	r1, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f006 febb 	bl	801909e <RegionGetPhyParam>
 8012328:	4603      	mov	r3, r0
 801232a:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 801232c:	4b29      	ldr	r3, [pc, #164]	; (80123d4 <ProcessRadioTxDone+0x13c>)
 801232e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	4413      	add	r3, r2
 8012336:	4619      	mov	r1, r3
 8012338:	4829      	ldr	r0, [pc, #164]	; (80123e0 <ProcessRadioTxDone+0x148>)
 801233a:	f00d fc93 	bl	801fc64 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 801233e:	4828      	ldr	r0, [pc, #160]	; (80123e0 <ProcessRadioTxDone+0x148>)
 8012340:	f00d fbb2 	bl	801faa8 <UTIL_TIMER_Start>
 8012344:	e003      	b.n	801234e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012346:	4b23      	ldr	r3, [pc, #140]	; (80123d4 <ProcessRadioTxDone+0x13c>)
 8012348:	2200      	movs	r2, #0
 801234a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 801234e:	4b20      	ldr	r3, [pc, #128]	; (80123d0 <ProcessRadioTxDone+0x138>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4a1d      	ldr	r2, [pc, #116]	; (80123c8 <ProcessRadioTxDone+0x130>)
 8012354:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8012356:	4b1f      	ldr	r3, [pc, #124]	; (80123d4 <ProcessRadioTxDone+0x13c>)
 8012358:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 801235c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 801235e:	4b1c      	ldr	r3, [pc, #112]	; (80123d0 <ProcessRadioTxDone+0x138>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8012364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012368:	4618      	mov	r0, r3
 801236a:	f00c febb 	bl	801f0e4 <SysTimeGetMcuTime>
 801236e:	4638      	mov	r0, r7
 8012370:	4b15      	ldr	r3, [pc, #84]	; (80123c8 <ProcessRadioTxDone+0x130>)
 8012372:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8012376:	9200      	str	r2, [sp, #0]
 8012378:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801237c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012380:	ca06      	ldmia	r2, {r1, r2}
 8012382:	f00c fe10 	bl	801efa6 <SysTimeSub>
 8012386:	f107 0314 	add.w	r3, r7, #20
 801238a:	463a      	mov	r2, r7
 801238c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012390:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8012394:	4b0f      	ldr	r3, [pc, #60]	; (80123d4 <ProcessRadioTxDone+0x13c>)
 8012396:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801239a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 801239c:	2301      	movs	r3, #1
 801239e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80123a0:	4b09      	ldr	r3, [pc, #36]	; (80123c8 <ProcessRadioTxDone+0x130>)
 80123a2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d101      	bne.n	80123ae <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 80123aa:	2300      	movs	r3, #0
 80123ac:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80123ae:	4b06      	ldr	r3, [pc, #24]	; (80123c8 <ProcessRadioTxDone+0x130>)
 80123b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80123b4:	f107 0208 	add.w	r2, r7, #8
 80123b8:	4611      	mov	r1, r2
 80123ba:	4618      	mov	r0, r3
 80123bc:	f006 fe87 	bl	80190ce <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 80123c0:	bf00      	nop
 80123c2:	3740      	adds	r7, #64	; 0x40
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	20000e18 	.word	0x20000e18
 80123cc:	08021df4 	.word	0x08021df4
 80123d0:	20001a44 	.word	0x20001a44
 80123d4:	200008fc 	.word	0x200008fc
 80123d8:	20000c7c 	.word	0x20000c7c
 80123dc:	20000c94 	.word	0x20000c94
 80123e0:	20000cfc 	.word	0x20000cfc

080123e4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80123e8:	4b10      	ldr	r3, [pc, #64]	; (801242c <PrepareRxDoneAbort+0x48>)
 80123ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123f2:	4a0e      	ldr	r2, [pc, #56]	; (801242c <PrepareRxDoneAbort+0x48>)
 80123f4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 80123f8:	4b0c      	ldr	r3, [pc, #48]	; (801242c <PrepareRxDoneAbort+0x48>)
 80123fa:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d002      	beq.n	8012408 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8012402:	2000      	movs	r0, #0
 8012404:	f001 f9fa 	bl	80137fc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8012408:	4a08      	ldr	r2, [pc, #32]	; (801242c <PrepareRxDoneAbort+0x48>)
 801240a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801240e:	f043 0302 	orr.w	r3, r3, #2
 8012412:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012416:	4a05      	ldr	r2, [pc, #20]	; (801242c <PrepareRxDoneAbort+0x48>)
 8012418:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801241c:	f043 0310 	orr.w	r3, r3, #16
 8012420:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 8012424:	f7ff ff20 	bl	8012268 <UpdateRxSlotIdleState>
}
 8012428:	bf00      	nop
 801242a:	bd80      	pop	{r7, pc}
 801242c:	200008fc 	.word	0x200008fc

08012430 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8012430:	b590      	push	{r4, r7, lr}
 8012432:	b0ab      	sub	sp, #172	; 0xac
 8012434:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012436:	2312      	movs	r3, #18
 8012438:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 801243c:	4b81      	ldr	r3, [pc, #516]	; (8012644 <ProcessRadioRxDone+0x214>)
 801243e:	685b      	ldr	r3, [r3, #4]
 8012440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 8012444:	4b7f      	ldr	r3, [pc, #508]	; (8012644 <ProcessRadioRxDone+0x214>)
 8012446:	891b      	ldrh	r3, [r3, #8]
 8012448:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 801244c:	4b7d      	ldr	r3, [pc, #500]	; (8012644 <ProcessRadioRxDone+0x214>)
 801244e:	895b      	ldrh	r3, [r3, #10]
 8012450:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 8012454:	4b7b      	ldr	r3, [pc, #492]	; (8012644 <ProcessRadioRxDone+0x214>)
 8012456:	7b1b      	ldrb	r3, [r3, #12]
 8012458:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 801245c:	2300      	movs	r3, #0
 801245e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 8012462:	2300      	movs	r3, #0
 8012464:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8012466:	4b78      	ldr	r3, [pc, #480]	; (8012648 <ProcessRadioRxDone+0x218>)
 8012468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801246c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8012470:	2300      	movs	r3, #0
 8012472:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8012476:	2301      	movs	r3, #1
 8012478:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 801247c:	2301      	movs	r3, #1
 801247e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8012482:	4a72      	ldr	r2, [pc, #456]	; (801264c <ProcessRadioRxDone+0x21c>)
 8012484:	7813      	ldrb	r3, [r2, #0]
 8012486:	f36f 0300 	bfc	r3, #0, #1
 801248a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 801248c:	4b70      	ldr	r3, [pc, #448]	; (8012650 <ProcessRadioRxDone+0x220>)
 801248e:	2200      	movs	r2, #0
 8012490:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8012494:	4a6e      	ldr	r2, [pc, #440]	; (8012650 <ProcessRadioRxDone+0x220>)
 8012496:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 801249a:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 801249e:	4a6c      	ldr	r2, [pc, #432]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80124a4:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80124a8:	4b69      	ldr	r3, [pc, #420]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124aa:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 80124ae:	4b68      	ldr	r3, [pc, #416]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124b0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 80124b4:	4b66      	ldr	r3, [pc, #408]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124b6:	2200      	movs	r2, #0
 80124b8:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 80124bc:	4b64      	ldr	r3, [pc, #400]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124be:	2200      	movs	r2, #0
 80124c0:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 80124c4:	4b62      	ldr	r3, [pc, #392]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 80124cc:	4b60      	ldr	r3, [pc, #384]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124ce:	2200      	movs	r2, #0
 80124d0:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 80124d4:	4b5e      	ldr	r3, [pc, #376]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 80124dc:	4b5c      	ldr	r3, [pc, #368]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 80124e4:	4b5a      	ldr	r3, [pc, #360]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80124ec:	4b58      	ldr	r3, [pc, #352]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80124f4:	4b56      	ldr	r3, [pc, #344]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 80124fc:	4b54      	ldr	r3, [pc, #336]	; (8012650 <ProcessRadioRxDone+0x220>)
 80124fe:	2200      	movs	r2, #0
 8012500:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8012504:	4b52      	ldr	r3, [pc, #328]	; (8012650 <ProcessRadioRxDone+0x220>)
 8012506:	2200      	movs	r2, #0
 8012508:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 801250c:	4b50      	ldr	r3, [pc, #320]	; (8012650 <ProcessRadioRxDone+0x220>)
 801250e:	2200      	movs	r2, #0
 8012510:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8012514:	4b4f      	ldr	r3, [pc, #316]	; (8012654 <ProcessRadioRxDone+0x224>)
 8012516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012518:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801251a:	4b4d      	ldr	r3, [pc, #308]	; (8012650 <ProcessRadioRxDone+0x220>)
 801251c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012520:	2b00      	cmp	r3, #0
 8012522:	d102      	bne.n	801252a <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012524:	484c      	ldr	r0, [pc, #304]	; (8012658 <ProcessRadioRxDone+0x228>)
 8012526:	f00d fb2d 	bl	801fb84 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 801252a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801252e:	4619      	mov	r1, r3
 8012530:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8012534:	f004 fe28 	bl	8017188 <LoRaMacClassBRxBeacon>
 8012538:	4603      	mov	r3, r0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00b      	beq.n	8012556 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801253e:	4a44      	ldr	r2, [pc, #272]	; (8012650 <ProcessRadioRxDone+0x220>)
 8012540:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8012544:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8012548:	4a41      	ldr	r2, [pc, #260]	; (8012650 <ProcessRadioRxDone+0x220>)
 801254a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801254e:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 8012552:	f000 bc75 	b.w	8012e40 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012556:	4b3c      	ldr	r3, [pc, #240]	; (8012648 <ProcessRadioRxDone+0x218>)
 8012558:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801255c:	2b01      	cmp	r3, #1
 801255e:	d11e      	bne.n	801259e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012560:	f004 fe25 	bl	80171ae <LoRaMacClassBIsPingExpected>
 8012564:	4603      	mov	r3, r0
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00a      	beq.n	8012580 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801256a:	2000      	movs	r0, #0
 801256c:	f004 fdd6 	bl	801711c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8012570:	2000      	movs	r0, #0
 8012572:	f004 fdf7 	bl	8017164 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8012576:	4b36      	ldr	r3, [pc, #216]	; (8012650 <ProcessRadioRxDone+0x220>)
 8012578:	2204      	movs	r2, #4
 801257a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 801257e:	e00e      	b.n	801259e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012580:	f004 fe1c 	bl	80171bc <LoRaMacClassBIsMulticastExpected>
 8012584:	4603      	mov	r3, r0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d009      	beq.n	801259e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801258a:	2000      	movs	r0, #0
 801258c:	f004 fdd0 	bl	8017130 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8012590:	2000      	movs	r0, #0
 8012592:	f004 fdf0 	bl	8017176 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8012596:	4b2e      	ldr	r3, [pc, #184]	; (8012650 <ProcessRadioRxDone+0x220>)
 8012598:	2205      	movs	r2, #5
 801259a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801259e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d107      	bne.n	80125b6 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80125a6:	4b2a      	ldr	r3, [pc, #168]	; (8012650 <ProcessRadioRxDone+0x220>)
 80125a8:	2201      	movs	r2, #1
 80125aa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 80125ae:	f7ff ff19 	bl	80123e4 <PrepareRxDoneAbort>
        return;
 80125b2:	f000 bc45 	b.w	8012e40 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 80125b6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80125ba:	1c5a      	adds	r2, r3, #1
 80125bc:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 80125c0:	461a      	mov	r2, r3
 80125c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80125c6:	4413      	add	r3, r2
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80125ce:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80125d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	3b01      	subs	r3, #1
 80125da:	2b06      	cmp	r3, #6
 80125dc:	f200 8403 	bhi.w	8012de6 <ProcessRadioRxDone+0x9b6>
 80125e0:	a201      	add	r2, pc, #4	; (adr r2, 80125e8 <ProcessRadioRxDone+0x1b8>)
 80125e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125e6:	bf00      	nop
 80125e8:	08012605 	.word	0x08012605
 80125ec:	08012de7 	.word	0x08012de7
 80125f0:	08012803 	.word	0x08012803
 80125f4:	08012de7 	.word	0x08012de7
 80125f8:	080127fb 	.word	0x080127fb
 80125fc:	08012de7 	.word	0x08012de7
 8012600:	08012d8b 	.word	0x08012d8b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8012604:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012608:	2b10      	cmp	r3, #16
 801260a:	d807      	bhi.n	801261c <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801260c:	4b10      	ldr	r3, [pc, #64]	; (8012650 <ProcessRadioRxDone+0x220>)
 801260e:	2201      	movs	r2, #1
 8012610:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012614:	f7ff fee6 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 8012618:	f000 bc12 	b.w	8012e40 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 801261c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012620:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 8012622:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012626:	b2db      	uxtb	r3, r3
 8012628:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801262a:	4b07      	ldr	r3, [pc, #28]	; (8012648 <ProcessRadioRxDone+0x218>)
 801262c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012630:	2b00      	cmp	r3, #0
 8012632:	d013      	beq.n	801265c <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012634:	4b06      	ldr	r3, [pc, #24]	; (8012650 <ProcessRadioRxDone+0x220>)
 8012636:	2201      	movs	r2, #1
 8012638:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801263c:	f7ff fed2 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 8012640:	e3fe      	b.n	8012e40 <ProcessRadioRxDone+0xa10>
 8012642:	bf00      	nop
 8012644:	20001a48 	.word	0x20001a48
 8012648:	20000e18 	.word	0x20000e18
 801264c:	20001a40 	.word	0x20001a40
 8012650:	200008fc 	.word	0x200008fc
 8012654:	08021df4 	.word	0x08021df4
 8012658:	20000c94 	.word	0x20000c94
            }

            SecureElementGetJoinEui( joinEui );
 801265c:	f107 0308 	add.w	r3, r7, #8
 8012660:	4618      	mov	r0, r3
 8012662:	f7fd ff7d 	bl	8010560 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8012666:	f107 0218 	add.w	r2, r7, #24
 801266a:	f107 0308 	add.w	r3, r7, #8
 801266e:	4619      	mov	r1, r3
 8012670:	20ff      	movs	r0, #255	; 0xff
 8012672:	f005 ff95 	bl	80185a0 <LoRaMacCryptoHandleJoinAccept>
 8012676:	4603      	mov	r3, r0
 8012678:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 801267c:	2300      	movs	r3, #0
 801267e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8012682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012686:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801268a:	b2db      	uxtb	r3, r3
 801268c:	b25b      	sxtb	r3, r3
 801268e:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012690:	4bb1      	ldr	r3, [pc, #708]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012692:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012696:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8012698:	4baf      	ldr	r3, [pc, #700]	; (8012958 <ProcessRadioRxDone+0x528>)
 801269a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801269e:	1d39      	adds	r1, r7, #4
 80126a0:	2207      	movs	r2, #7
 80126a2:	4618      	mov	r0, r3
 80126a4:	f006 fd36 	bl	8019114 <RegionVerify>
 80126a8:	4603      	mov	r3, r0
 80126aa:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80126ae:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	f040 8095 	bne.w	80127e2 <ProcessRadioRxDone+0x3b2>
 80126b8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f000 8090 	beq.w	80127e2 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80126c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80126c6:	461a      	mov	r2, r3
 80126c8:	4ba3      	ldr	r3, [pc, #652]	; (8012958 <ProcessRadioRxDone+0x528>)
 80126ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80126ce:	4ba2      	ldr	r3, [pc, #648]	; (8012958 <ProcessRadioRxDone+0x528>)
 80126d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80126d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126d8:	021b      	lsls	r3, r3, #8
 80126da:	4313      	orrs	r3, r2
 80126dc:	4a9e      	ldr	r2, [pc, #632]	; (8012958 <ProcessRadioRxDone+0x528>)
 80126de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80126e2:	4b9d      	ldr	r3, [pc, #628]	; (8012958 <ProcessRadioRxDone+0x528>)
 80126e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80126e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126ec:	041b      	lsls	r3, r3, #16
 80126ee:	4313      	orrs	r3, r2
 80126f0:	4a99      	ldr	r2, [pc, #612]	; (8012958 <ProcessRadioRxDone+0x528>)
 80126f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80126f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f8:	4a97      	ldr	r2, [pc, #604]	; (8012958 <ProcessRadioRxDone+0x528>)
 80126fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80126fe:	4b96      	ldr	r3, [pc, #600]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8012704:	4619      	mov	r1, r3
 8012706:	2002      	movs	r0, #2
 8012708:	f7fd ff42 	bl	8010590 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 801270c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012710:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8012714:	b2db      	uxtb	r3, r3
 8012716:	461a      	mov	r2, r3
 8012718:	4b8f      	ldr	r3, [pc, #572]	; (8012958 <ProcessRadioRxDone+0x528>)
 801271a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801271e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012722:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012726:	b2db      	uxtb	r3, r3
 8012728:	461a      	mov	r2, r3
 801272a:	4b8b      	ldr	r3, [pc, #556]	; (8012958 <ProcessRadioRxDone+0x528>)
 801272c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8012730:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012734:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012738:	b2db      	uxtb	r3, r3
 801273a:	461a      	mov	r2, r3
 801273c:	4b86      	ldr	r3, [pc, #536]	; (8012958 <ProcessRadioRxDone+0x528>)
 801273e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8012742:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8012746:	461a      	mov	r2, r3
 8012748:	4b83      	ldr	r3, [pc, #524]	; (8012958 <ProcessRadioRxDone+0x528>)
 801274a:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 801274c:	4b82      	ldr	r3, [pc, #520]	; (8012958 <ProcessRadioRxDone+0x528>)
 801274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012750:	2b00      	cmp	r3, #0
 8012752:	d102      	bne.n	801275a <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8012754:	4b80      	ldr	r3, [pc, #512]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012756:	2201      	movs	r2, #1
 8012758:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 801275a:	4b7f      	ldr	r3, [pc, #508]	; (8012958 <ProcessRadioRxDone+0x528>)
 801275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801275e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012762:	fb02 f303 	mul.w	r3, r2, r3
 8012766:	4a7c      	ldr	r2, [pc, #496]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012768:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801276a:	4b7b      	ldr	r3, [pc, #492]	; (8012958 <ProcessRadioRxDone+0x528>)
 801276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801276e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012772:	4a79      	ldr	r2, [pc, #484]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012774:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8012776:	4b78      	ldr	r3, [pc, #480]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012778:	2201      	movs	r2, #1
 801277a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 801277e:	4b76      	ldr	r3, [pc, #472]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012780:	2200      	movs	r2, #0
 8012782:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8012786:	f107 0318 	add.w	r3, r7, #24
 801278a:	3312      	adds	r3, #18
 801278c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8012790:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012794:	b2db      	uxtb	r3, r3
 8012796:	3b11      	subs	r3, #17
 8012798:	b2db      	uxtb	r3, r3
 801279a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 801279e:	4b6f      	ldr	r3, [pc, #444]	; (801295c <ProcessRadioRxDone+0x52c>)
 80127a0:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80127a4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80127a8:	4b6b      	ldr	r3, [pc, #428]	; (8012958 <ProcessRadioRxDone+0x528>)
 80127aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127ae:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80127b2:	4611      	mov	r1, r2
 80127b4:	4618      	mov	r0, r3
 80127b6:	f006 fcc4 	bl	8019142 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80127ba:	4b67      	ldr	r3, [pc, #412]	; (8012958 <ProcessRadioRxDone+0x528>)
 80127bc:	2202      	movs	r2, #2
 80127be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80127c2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80127c6:	4618      	mov	r0, r3
 80127c8:	f005 f9f4 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f000 8311 	beq.w	8012df6 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80127d4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80127d8:	4619      	mov	r1, r3
 80127da:	2000      	movs	r0, #0
 80127dc:	f005 f95e 	bl	8017a9c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80127e0:	e309      	b.n	8012df6 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80127e2:	2001      	movs	r0, #1
 80127e4:	f005 f9e6 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f000 8302 	beq.w	8012df4 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80127f0:	2101      	movs	r1, #1
 80127f2:	2007      	movs	r0, #7
 80127f4:	f005 f952 	bl	8017a9c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 80127f8:	e2fc      	b.n	8012df4 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80127fa:	4b58      	ldr	r3, [pc, #352]	; (801295c <ProcessRadioRxDone+0x52c>)
 80127fc:	2201      	movs	r2, #1
 80127fe:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012802:	4b55      	ldr	r3, [pc, #340]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012804:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012808:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 801280c:	4b53      	ldr	r3, [pc, #332]	; (801295c <ProcessRadioRxDone+0x52c>)
 801280e:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 8012812:	b25b      	sxtb	r3, r3
 8012814:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012818:	230d      	movs	r3, #13
 801281a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801281e:	4b4e      	ldr	r3, [pc, #312]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012820:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012828:	230e      	movs	r3, #14
 801282a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801282e:	4b4a      	ldr	r3, [pc, #296]	; (8012958 <ProcessRadioRxDone+0x528>)
 8012830:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012834:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8012838:	4611      	mov	r1, r2
 801283a:	4618      	mov	r0, r3
 801283c:	f006 fc2f 	bl	801909e <RegionGetPhyParam>
 8012840:	4603      	mov	r3, r0
 8012842:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8012844:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012848:	3b0d      	subs	r3, #13
 801284a:	b29b      	uxth	r3, r3
 801284c:	b21b      	sxth	r3, r3
 801284e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012852:	b21a      	sxth	r2, r3
 8012854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012856:	b21b      	sxth	r3, r3
 8012858:	429a      	cmp	r2, r3
 801285a:	dc03      	bgt.n	8012864 <ProcessRadioRxDone+0x434>
 801285c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012860:	2b0b      	cmp	r3, #11
 8012862:	d806      	bhi.n	8012872 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012864:	4b3d      	ldr	r3, [pc, #244]	; (801295c <ProcessRadioRxDone+0x52c>)
 8012866:	2201      	movs	r2, #1
 8012868:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801286c:	f7ff fdba 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 8012870:	e2e6      	b.n	8012e40 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 8012872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012876:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 8012878:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801287c:	b2db      	uxtb	r3, r3
 801287e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8012882:	4b37      	ldr	r3, [pc, #220]	; (8012960 <ProcessRadioRxDone+0x530>)
 8012884:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8012886:	23ff      	movs	r3, #255	; 0xff
 8012888:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801288c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012890:	4618      	mov	r0, r3
 8012892:	f006 f987 	bl	8018ba4 <LoRaMacParserData>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d006      	beq.n	80128aa <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801289c:	4b2f      	ldr	r3, [pc, #188]	; (801295c <ProcessRadioRxDone+0x52c>)
 801289e:	2201      	movs	r2, #1
 80128a0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80128a4:	f7ff fd9e 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 80128a8:	e2ca      	b.n	8012e40 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80128aa:	4b2b      	ldr	r3, [pc, #172]	; (8012958 <ProcessRadioRxDone+0x528>)
 80128ac:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	d132      	bne.n	801291a <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 80128b4:	f004 fc7b 	bl	80171ae <LoRaMacClassBIsPingExpected>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d014      	beq.n	80128e8 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80128be:	2000      	movs	r0, #0
 80128c0:	f004 fc2c 	bl	801711c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80128c4:	2000      	movs	r0, #0
 80128c6:	f004 fc4d 	bl	8017164 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80128ca:	4b24      	ldr	r3, [pc, #144]	; (801295c <ProcessRadioRxDone+0x52c>)
 80128cc:	2204      	movs	r2, #4
 80128ce:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80128d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80128d4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80128d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	4619      	mov	r1, r3
 80128e0:	4610      	mov	r0, r2
 80128e2:	f004 fced 	bl	80172c0 <LoRaMacClassBSetFPendingBit>
 80128e6:	e018      	b.n	801291a <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80128e8:	f004 fc68 	bl	80171bc <LoRaMacClassBIsMulticastExpected>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d013      	beq.n	801291a <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80128f2:	2000      	movs	r0, #0
 80128f4:	f004 fc1c 	bl	8017130 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80128f8:	2000      	movs	r0, #0
 80128fa:	f004 fc3c 	bl	8017176 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80128fe:	4b17      	ldr	r3, [pc, #92]	; (801295c <ProcessRadioRxDone+0x52c>)
 8012900:	2205      	movs	r2, #5
 8012902:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8012906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012908:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801290c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012910:	b2db      	uxtb	r3, r3
 8012912:	4619      	mov	r1, r3
 8012914:	4610      	mov	r0, r2
 8012916:	f004 fcd3 	bl	80172c0 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 801291a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801291c:	4a0f      	ldr	r2, [pc, #60]	; (801295c <ProcessRadioRxDone+0x52c>)
 801291e:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8012922:	f107 0212 	add.w	r2, r7, #18
 8012926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801292a:	4611      	mov	r1, r2
 801292c:	4618      	mov	r0, r3
 801292e:	f002 fd81 	bl	8015434 <DetermineFrameType>
 8012932:	4603      	mov	r3, r0
 8012934:	2b00      	cmp	r3, #0
 8012936:	d006      	beq.n	8012946 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012938:	4b08      	ldr	r3, [pc, #32]	; (801295c <ProcessRadioRxDone+0x52c>)
 801293a:	2201      	movs	r2, #1
 801293c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012940:	f7ff fd50 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 8012944:	e27c      	b.n	8012e40 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 8012946:	2300      	movs	r3, #0
 8012948:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 801294c:	2300      	movs	r3, #0
 801294e:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012950:	2300      	movs	r3, #0
 8012952:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8012956:	e055      	b.n	8012a04 <ProcessRadioRxDone+0x5d4>
 8012958:	20000e18 	.word	0x20000e18
 801295c:	200008fc 	.word	0x200008fc
 8012960:	20000b34 	.word	0x20000b34
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8012964:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012968:	499f      	ldr	r1, [pc, #636]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 801296a:	4613      	mov	r3, r2
 801296c:	005b      	lsls	r3, r3, #1
 801296e:	4413      	add	r3, r2
 8012970:	011b      	lsls	r3, r3, #4
 8012972:	440b      	add	r3, r1
 8012974:	33ec      	adds	r3, #236	; 0xec
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801297a:	429a      	cmp	r2, r3
 801297c:	d13d      	bne.n	80129fa <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801297e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012982:	4999      	ldr	r1, [pc, #612]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012984:	4613      	mov	r3, r2
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	4413      	add	r3, r2
 801298a:	011b      	lsls	r3, r3, #4
 801298c:	440b      	add	r3, r1
 801298e:	33e9      	adds	r3, #233	; 0xe9
 8012990:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8012992:	2b00      	cmp	r3, #0
 8012994:	d031      	beq.n	80129fa <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 8012996:	2301      	movs	r3, #1
 8012998:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 801299c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80129a0:	4991      	ldr	r1, [pc, #580]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 80129a2:	4613      	mov	r3, r2
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	4413      	add	r3, r2
 80129a8:	011b      	lsls	r3, r3, #4
 80129aa:	440b      	add	r3, r1
 80129ac:	33ea      	adds	r3, #234	; 0xea
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80129b4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80129b8:	498b      	ldr	r1, [pc, #556]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 80129ba:	4613      	mov	r3, r2
 80129bc:	005b      	lsls	r3, r3, #1
 80129be:	4413      	add	r3, r2
 80129c0:	011b      	lsls	r3, r3, #4
 80129c2:	440b      	add	r3, r1
 80129c4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80129ce:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80129d2:	4985      	ldr	r1, [pc, #532]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 80129d4:	4613      	mov	r3, r2
 80129d6:	005b      	lsls	r3, r3, #1
 80129d8:	4413      	add	r3, r2
 80129da:	011b      	lsls	r3, r3, #4
 80129dc:	440b      	add	r3, r1
 80129de:	33ec      	adds	r3, #236	; 0xec
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80129e6:	4b80      	ldr	r3, [pc, #512]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 80129e8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80129ec:	2b02      	cmp	r3, #2
 80129ee:	d10e      	bne.n	8012a0e <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80129f0:	4b7e      	ldr	r3, [pc, #504]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 80129f2:	2203      	movs	r2, #3
 80129f4:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 80129f8:	e009      	b.n	8012a0e <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80129fa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80129fe:	3301      	adds	r3, #1
 8012a00:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8012a04:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d0ab      	beq.n	8012964 <ProcessRadioRxDone+0x534>
 8012a0c:	e000      	b.n	8012a10 <ProcessRadioRxDone+0x5e0>
                    break;
 8012a0e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8012a10:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d117      	bne.n	8012a48 <ProcessRadioRxDone+0x618>
 8012a18:	7cbb      	ldrb	r3, [r7, #18]
 8012a1a:	2b03      	cmp	r3, #3
 8012a1c:	d10d      	bne.n	8012a3a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8012a1e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012a22:	f003 0320 	and.w	r3, r3, #32
 8012a26:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d106      	bne.n	8012a3a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8012a2c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a34:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d006      	beq.n	8012a48 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a3a:	4b6c      	ldr	r3, [pc, #432]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012a42:	f7ff fccf 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 8012a46:	e1fb      	b.n	8012e40 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8012a48:	7cb9      	ldrb	r1, [r7, #18]
 8012a4a:	4c67      	ldr	r4, [pc, #412]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012a4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012a50:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8012a54:	f107 0314 	add.w	r3, r7, #20
 8012a58:	9301      	str	r3, [sp, #4]
 8012a5a:	f107 0313 	add.w	r3, r7, #19
 8012a5e:	9300      	str	r3, [sp, #0]
 8012a60:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8012a64:	f000 fee4 	bl	8013830 <GetFCntDown>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012a6e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d017      	beq.n	8012aa6 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8012a76:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012a7a:	2b07      	cmp	r3, #7
 8012a7c:	d104      	bne.n	8012a88 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8012a7e:	4b5b      	ldr	r3, [pc, #364]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012a80:	2208      	movs	r2, #8
 8012a82:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8012a86:	e003      	b.n	8012a90 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a88:	4b58      	ldr	r3, [pc, #352]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	4a56      	ldr	r2, [pc, #344]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012a94:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	4a54      	ldr	r2, [pc, #336]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012a9c:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8012aa0:	f7ff fca0 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 8012aa4:	e1cc      	b.n	8012e40 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8012aa6:	7cfa      	ldrb	r2, [r7, #19]
 8012aa8:	6979      	ldr	r1, [r7, #20]
 8012aaa:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8012aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012ab2:	9300      	str	r3, [sp, #0]
 8012ab4:	460b      	mov	r3, r1
 8012ab6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012aba:	f005 fed3 	bl	8018864 <LoRaMacCryptoUnsecureMessage>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012ac4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d00f      	beq.n	8012aec <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8012acc:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012ad0:	2b02      	cmp	r3, #2
 8012ad2:	d104      	bne.n	8012ade <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8012ad4:	4b45      	ldr	r3, [pc, #276]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012ad6:	220a      	movs	r2, #10
 8012ad8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8012adc:	e003      	b.n	8012ae6 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8012ade:	4b43      	ldr	r3, [pc, #268]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012ae0:	220b      	movs	r2, #11
 8012ae2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 8012ae6:	f7ff fc7d 	bl	80123e4 <PrepareRxDoneAbort>
                return;
 8012aea:	e1a9      	b.n	8012e40 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012aec:	4b3f      	ldr	r3, [pc, #252]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012aee:	2200      	movs	r2, #0
 8012af0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8012af4:	4a3d      	ldr	r2, [pc, #244]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012af6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012afa:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8012afe:	4b3b      	ldr	r3, [pc, #236]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b00:	2200      	movs	r2, #0
 8012b02:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8012b06:	4b39      	ldr	r3, [pc, #228]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	4a36      	ldr	r2, [pc, #216]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b12:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	4a34      	ldr	r2, [pc, #208]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b1a:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8012b1e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012b22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	bf14      	ite	ne
 8012b2c:	2301      	movne	r3, #1
 8012b2e:	2300      	moveq	r3, #0
 8012b30:	b2da      	uxtb	r2, r3
 8012b32:	4b2e      	ldr	r3, [pc, #184]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b34:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012b38:	4b2c      	ldr	r3, [pc, #176]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8012b40:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012b44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	bf14      	ite	ne
 8012b4e:	2301      	movne	r3, #1
 8012b50:	2300      	moveq	r3, #0
 8012b52:	b2da      	uxtb	r2, r3
 8012b54:	4b25      	ldr	r3, [pc, #148]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b56:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012b5a:	4b24      	ldr	r3, [pc, #144]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b5c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d004      	beq.n	8012b6e <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012b64:	4b21      	ldr	r3, [pc, #132]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b66:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d106      	bne.n	8012b7c <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8012b6e:	4b1e      	ldr	r3, [pc, #120]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012b70:	2200      	movs	r2, #0
 8012b72:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8012b74:	4b1c      	ldr	r3, [pc, #112]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012b76:	2201      	movs	r2, #1
 8012b78:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8012b7c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d104      	bne.n	8012b8e <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8012b84:	4b19      	ldr	r3, [pc, #100]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012b86:	2202      	movs	r2, #2
 8012b88:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8012b8c:	e03a      	b.n	8012c04 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8012b8e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8012b92:	f023 031f 	bic.w	r3, r3, #31
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	2ba0      	cmp	r3, #160	; 0xa0
 8012b9a:	d12b      	bne.n	8012bf4 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8012b9c:	4b12      	ldr	r3, [pc, #72]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8012ba4:	4b10      	ldr	r3, [pc, #64]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012ba6:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d102      	bne.n	8012bb4 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8012bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bb0:	4a0d      	ldr	r2, [pc, #52]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012bb2:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8012bb4:	4b0d      	ldr	r3, [pc, #52]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012bbc:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012bbe:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d01e      	beq.n	8012c04 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8012bc6:	4b09      	ldr	r3, [pc, #36]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012bc8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d019      	beq.n	8012c04 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012bd0:	4b05      	ldr	r3, [pc, #20]	; (8012be8 <ProcessRadioRxDone+0x7b8>)
 8012bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bd6:	4a05      	ldr	r2, [pc, #20]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012bd8:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8012bdc:	4b04      	ldr	r3, [pc, #16]	; (8012bf0 <ProcessRadioRxDone+0x7c0>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4a02      	ldr	r2, [pc, #8]	; (8012bec <ProcessRadioRxDone+0x7bc>)
 8012be2:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 8012be6:	e00d      	b.n	8012c04 <ProcessRadioRxDone+0x7d4>
 8012be8:	20000e18 	.word	0x20000e18
 8012bec:	200008fc 	.word	0x200008fc
 8012bf0:	20001a48 	.word	0x20001a48
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8012bf4:	4b94      	ldr	r3, [pc, #592]	; (8012e48 <ProcessRadioRxDone+0xa18>)
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8012bfc:	4b93      	ldr	r3, [pc, #588]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8012c04:	4b90      	ldr	r3, [pc, #576]	; (8012e48 <ProcessRadioRxDone+0xa18>)
 8012c06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d106      	bne.n	8012c1c <ProcessRadioRxDone+0x7ec>
 8012c0e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012c12:	f003 0310 	and.w	r3, r3, #16
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d008      	beq.n	8012c2e <ProcessRadioRxDone+0x7fe>
 8012c1c:	4b8a      	ldr	r3, [pc, #552]	; (8012e48 <ProcessRadioRxDone+0xa18>)
 8012c1e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d103      	bne.n	8012c2e <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8012c26:	4b89      	ldr	r3, [pc, #548]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012c28:	2201      	movs	r2, #1
 8012c2a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8012c2e:	4b87      	ldr	r3, [pc, #540]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012c30:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012c34:	4a85      	ldr	r2, [pc, #532]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012c36:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 8012c3a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f001 ff8a 	bl	8014b58 <RemoveMacCommands>

            switch( fType )
 8012c44:	7cbb      	ldrb	r3, [r7, #18]
 8012c46:	2b03      	cmp	r3, #3
 8012c48:	d873      	bhi.n	8012d32 <ProcessRadioRxDone+0x902>
 8012c4a:	a201      	add	r2, pc, #4	; (adr r2, 8012c50 <ProcessRadioRxDone+0x820>)
 8012c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c50:	08012c61 	.word	0x08012c61
 8012c54:	08012cb1 	.word	0x08012cb1
 8012c58:	08012ce7 	.word	0x08012ce7
 8012c5c:	08012d0d 	.word	0x08012d0d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8012c60:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012c64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	461c      	mov	r4, r3
 8012c6c:	4b77      	ldr	r3, [pc, #476]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012c6e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012c72:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012c76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012c7a:	f102 0010 	add.w	r0, r2, #16
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	460b      	mov	r3, r1
 8012c82:	4622      	mov	r2, r4
 8012c84:	2100      	movs	r1, #0
 8012c86:	f000 ff4f 	bl	8013b28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012c8a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012c8e:	4b6f      	ldr	r3, [pc, #444]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012c90:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8012c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c96:	4a6d      	ldr	r2, [pc, #436]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012c98:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8012c9c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012ca0:	4b6a      	ldr	r3, [pc, #424]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012ca2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8012ca6:	4b69      	ldr	r3, [pc, #420]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012ca8:	2201      	movs	r2, #1
 8012caa:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8012cae:	e047      	b.n	8012d40 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8012cb0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012cb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	461c      	mov	r4, r3
 8012cbc:	4b63      	ldr	r3, [pc, #396]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012cbe:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012cc2:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012cc6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012cca:	f102 0010 	add.w	r0, r2, #16
 8012cce:	9300      	str	r3, [sp, #0]
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	4622      	mov	r2, r4
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	f000 ff27 	bl	8013b28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012cda:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012cde:	4b5b      	ldr	r3, [pc, #364]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012ce0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8012ce4:	e02c      	b.n	8012d40 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8012ce6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012ce8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012cec:	4b57      	ldr	r3, [pc, #348]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012cee:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012cf2:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012cf6:	9300      	str	r3, [sp, #0]
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	f000 ff14 	bl	8013b28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012d00:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012d04:	4b51      	ldr	r3, [pc, #324]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d06:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8012d0a:	e019      	b.n	8012d40 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012d0c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012d10:	4b4e      	ldr	r3, [pc, #312]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d12:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8012d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d18:	4a4c      	ldr	r2, [pc, #304]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d1a:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8012d1e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012d22:	4b4a      	ldr	r3, [pc, #296]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d24:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8012d28:	4b48      	ldr	r3, [pc, #288]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8012d30:	e006      	b.n	8012d40 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012d32:	4b46      	ldr	r3, [pc, #280]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d34:	2201      	movs	r2, #1
 8012d36:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8012d3a:	f7ff fb53 	bl	80123e4 <PrepareRxDoneAbort>
                    break;
 8012d3e:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8012d40:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8012d44:	2be0      	cmp	r3, #224	; 0xe0
 8012d46:	d118      	bne.n	8012d7a <ProcessRadioRxDone+0x94a>
 8012d48:	4b3f      	ldr	r3, [pc, #252]	; (8012e48 <ProcessRadioRxDone+0xa18>)
 8012d4a:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8012d4e:	f083 0301 	eor.w	r3, r3, #1
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d010      	beq.n	8012d7a <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012d58:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012d5c:	4b3b      	ldr	r3, [pc, #236]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d5e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8012d62:	4b3a      	ldr	r3, [pc, #232]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d64:	2200      	movs	r2, #0
 8012d66:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8012d6a:	4b38      	ldr	r3, [pc, #224]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8012d72:	4b36      	ldr	r3, [pc, #216]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8012d7a:	4a34      	ldr	r2, [pc, #208]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012d7c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012d80:	f043 0302 	orr.w	r3, r3, #2
 8012d84:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8012d88:	e035      	b.n	8012df6 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8012d8a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012d92:	18d1      	adds	r1, r2, r3
 8012d94:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	461a      	mov	r2, r3
 8012da4:	482a      	ldr	r0, [pc, #168]	; (8012e50 <ProcessRadioRxDone+0xa20>)
 8012da6:	f008 fd32 	bl	801b80e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8012daa:	4b28      	ldr	r3, [pc, #160]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012dac:	2203      	movs	r2, #3
 8012dae:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012db2:	4b26      	ldr	r3, [pc, #152]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012db4:	2200      	movs	r2, #0
 8012db6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8012dba:	4b24      	ldr	r3, [pc, #144]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012dbc:	4a24      	ldr	r2, [pc, #144]	; (8012e50 <ProcessRadioRxDone+0xa20>)
 8012dbe:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8012dc2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012dc6:	b2da      	uxtb	r2, r3
 8012dc8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	4b1e      	ldr	r3, [pc, #120]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012dd2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8012dd6:	4a1d      	ldr	r2, [pc, #116]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012dd8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012ddc:	f043 0302 	orr.w	r3, r3, #2
 8012de0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8012de4:	e007      	b.n	8012df6 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012de6:	4b19      	ldr	r3, [pc, #100]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012de8:	2201      	movs	r2, #1
 8012dea:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8012dee:	f7ff faf9 	bl	80123e4 <PrepareRxDoneAbort>
            break;
 8012df2:	e000      	b.n	8012df6 <ProcessRadioRxDone+0x9c6>
            break;
 8012df4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012df6:	4b15      	ldr	r3, [pc, #84]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012df8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d004      	beq.n	8012e0a <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012e00:	4b12      	ldr	r3, [pc, #72]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012e02:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d10c      	bne.n	8012e24 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8012e0a:	4b10      	ldr	r3, [pc, #64]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012e0c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d007      	beq.n	8012e24 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8012e14:	4b0d      	ldr	r3, [pc, #52]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012e16:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d002      	beq.n	8012e24 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8012e1e:	2000      	movs	r0, #0
 8012e20:	f000 fcec 	bl	80137fc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8012e24:	4b09      	ldr	r3, [pc, #36]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012e26:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012e2a:	2b02      	cmp	r3, #2
 8012e2c:	d006      	beq.n	8012e3c <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8012e2e:	4a07      	ldr	r2, [pc, #28]	; (8012e4c <ProcessRadioRxDone+0xa1c>)
 8012e30:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012e34:	f043 0310 	orr.w	r3, r3, #16
 8012e38:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8012e3c:	f7ff fa14 	bl	8012268 <UpdateRxSlotIdleState>
}
 8012e40:	37a4      	adds	r7, #164	; 0xa4
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd90      	pop	{r4, r7, pc}
 8012e46:	bf00      	nop
 8012e48:	20000e18 	.word	0x20000e18
 8012e4c:	200008fc 	.word	0x200008fc
 8012e50:	20000b34 	.word	0x20000b34

08012e54 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012e58:	4b11      	ldr	r3, [pc, #68]	; (8012ea0 <ProcessRadioTxTimeout+0x4c>)
 8012e5a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e5e:	2b02      	cmp	r3, #2
 8012e60:	d002      	beq.n	8012e68 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8012e62:	4b10      	ldr	r3, [pc, #64]	; (8012ea4 <ProcessRadioTxTimeout+0x50>)
 8012e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e66:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8012e68:	f7ff f9fe 	bl	8012268 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8012e6c:	4b0e      	ldr	r3, [pc, #56]	; (8012ea8 <ProcessRadioTxTimeout+0x54>)
 8012e6e:	2202      	movs	r2, #2
 8012e70:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8012e74:	2002      	movs	r0, #2
 8012e76:	f004 fe69 	bl	8017b4c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8012e7a:	4b0b      	ldr	r3, [pc, #44]	; (8012ea8 <ProcessRadioTxTimeout+0x54>)
 8012e7c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d003      	beq.n	8012e8c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8012e84:	4b08      	ldr	r3, [pc, #32]	; (8012ea8 <ProcessRadioTxTimeout+0x54>)
 8012e86:	2201      	movs	r2, #1
 8012e88:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012e8c:	4a06      	ldr	r2, [pc, #24]	; (8012ea8 <ProcessRadioTxTimeout+0x54>)
 8012e8e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012e92:	f043 0310 	orr.w	r3, r3, #16
 8012e96:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8012e9a:	bf00      	nop
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	20000e18 	.word	0x20000e18
 8012ea4:	08021df4 	.word	0x08021df4
 8012ea8:	200008fc 	.word	0x200008fc

08012eac <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	460a      	mov	r2, r1
 8012eb6:	71fb      	strb	r3, [r7, #7]
 8012eb8:	4613      	mov	r3, r2
 8012eba:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012ec0:	4b3d      	ldr	r3, [pc, #244]	; (8012fb8 <HandleRadioRxErrorTimeout+0x10c>)
 8012ec2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ec6:	2b02      	cmp	r3, #2
 8012ec8:	d002      	beq.n	8012ed0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8012eca:	4b3c      	ldr	r3, [pc, #240]	; (8012fbc <HandleRadioRxErrorTimeout+0x110>)
 8012ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ece:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012ed0:	f004 f966 	bl	80171a0 <LoRaMacClassBIsBeaconExpected>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d007      	beq.n	8012eea <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8012eda:	2002      	movs	r0, #2
 8012edc:	f004 f914 	bl	8017108 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8012ee0:	2000      	movs	r0, #0
 8012ee2:	f004 f936 	bl	8017152 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012eea:	4b33      	ldr	r3, [pc, #204]	; (8012fb8 <HandleRadioRxErrorTimeout+0x10c>)
 8012eec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	d119      	bne.n	8012f28 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012ef4:	f004 f95b 	bl	80171ae <LoRaMacClassBIsPingExpected>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d007      	beq.n	8012f0e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012efe:	2000      	movs	r0, #0
 8012f00:	f004 f90c 	bl	801711c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8012f04:	2000      	movs	r0, #0
 8012f06:	f004 f92d 	bl	8017164 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012f0e:	f004 f955 	bl	80171bc <LoRaMacClassBIsMulticastExpected>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d007      	beq.n	8012f28 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012f18:	2000      	movs	r0, #0
 8012f1a:	f004 f909 	bl	8017130 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8012f1e:	2000      	movs	r0, #0
 8012f20:	f004 f929 	bl	8017176 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8012f24:	2301      	movs	r3, #1
 8012f26:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8012f28:	7bfb      	ldrb	r3, [r7, #15]
 8012f2a:	f083 0301 	eor.w	r3, r3, #1
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d03b      	beq.n	8012fac <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012f34:	4b22      	ldr	r3, [pc, #136]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012f36:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d122      	bne.n	8012f84 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8012f3e:	4b20      	ldr	r3, [pc, #128]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012f40:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d003      	beq.n	8012f50 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8012f48:	4a1d      	ldr	r2, [pc, #116]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012f4a:	79fb      	ldrb	r3, [r7, #7]
 8012f4c:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8012f50:	79fb      	ldrb	r3, [r7, #7]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f004 fdfa 	bl	8017b4c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8012f58:	4b17      	ldr	r3, [pc, #92]	; (8012fb8 <HandleRadioRxErrorTimeout+0x10c>)
 8012f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f00c ff3d 	bl	801fddc <UTIL_TIMER_GetElapsedTime>
 8012f62:	4602      	mov	r2, r0
 8012f64:	4b16      	ldr	r3, [pc, #88]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012f66:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d31e      	bcc.n	8012fac <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8012f6e:	4815      	ldr	r0, [pc, #84]	; (8012fc4 <HandleRadioRxErrorTimeout+0x118>)
 8012f70:	f00c fe08 	bl	801fb84 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012f74:	4a12      	ldr	r2, [pc, #72]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012f76:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012f7a:	f043 0310 	orr.w	r3, r3, #16
 8012f7e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8012f82:	e013      	b.n	8012fac <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8012f84:	4b0e      	ldr	r3, [pc, #56]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012f86:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d003      	beq.n	8012f96 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8012f8e:	4a0c      	ldr	r2, [pc, #48]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012f90:	79bb      	ldrb	r3, [r7, #6]
 8012f92:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8012f96:	79bb      	ldrb	r3, [r7, #6]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f004 fdd7 	bl	8017b4c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8012f9e:	4a08      	ldr	r2, [pc, #32]	; (8012fc0 <HandleRadioRxErrorTimeout+0x114>)
 8012fa0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012fa4:	f043 0310 	orr.w	r3, r3, #16
 8012fa8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8012fac:	f7ff f95c 	bl	8012268 <UpdateRxSlotIdleState>
}
 8012fb0:	bf00      	nop
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	20000e18 	.word	0x20000e18
 8012fbc:	08021df4 	.word	0x08021df4
 8012fc0:	200008fc 	.word	0x200008fc
 8012fc4:	20000c94 	.word	0x20000c94

08012fc8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8012fcc:	2106      	movs	r1, #6
 8012fce:	2005      	movs	r0, #5
 8012fd0:	f7ff ff6c 	bl	8012eac <HandleRadioRxErrorTimeout>
}
 8012fd4:	bf00      	nop
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8012fdc:	2104      	movs	r1, #4
 8012fde:	2003      	movs	r0, #3
 8012fe0:	f7ff ff64 	bl	8012eac <HandleRadioRxErrorTimeout>
}
 8012fe4:	bf00      	nop
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b084      	sub	sp, #16
 8012fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fee:	f3ef 8310 	mrs	r3, PRIMASK
 8012ff2:	607b      	str	r3, [r7, #4]
  return(result);
 8012ff4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8012ff6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8012ff8:	b672      	cpsid	i
}
 8012ffa:	bf00      	nop
    events = LoRaMacRadioEvents;
 8012ffc:	4b1d      	ldr	r3, [pc, #116]	; (8013074 <LoRaMacHandleIrqEvents+0x8c>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8013002:	4b1c      	ldr	r3, [pc, #112]	; (8013074 <LoRaMacHandleIrqEvents+0x8c>)
 8013004:	2200      	movs	r2, #0
 8013006:	601a      	str	r2, [r3, #0]
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	f383 8810 	msr	PRIMASK, r3
}
 8013012:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d027      	beq.n	801306a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 801301a:	783b      	ldrb	r3, [r7, #0]
 801301c:	f003 0320 	and.w	r3, r3, #32
 8013020:	b2db      	uxtb	r3, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	d001      	beq.n	801302a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8013026:	f7ff f937 	bl	8012298 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 801302a:	783b      	ldrb	r3, [r7, #0]
 801302c:	f003 0310 	and.w	r3, r3, #16
 8013030:	b2db      	uxtb	r3, r3
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8013036:	f7ff f9fb 	bl	8012430 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801303a:	783b      	ldrb	r3, [r7, #0]
 801303c:	f003 0308 	and.w	r3, r3, #8
 8013040:	b2db      	uxtb	r3, r3
 8013042:	2b00      	cmp	r3, #0
 8013044:	d001      	beq.n	801304a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8013046:	f7ff ff05 	bl	8012e54 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801304a:	783b      	ldrb	r3, [r7, #0]
 801304c:	f003 0304 	and.w	r3, r3, #4
 8013050:	b2db      	uxtb	r3, r3
 8013052:	2b00      	cmp	r3, #0
 8013054:	d001      	beq.n	801305a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8013056:	f7ff ffb7 	bl	8012fc8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801305a:	783b      	ldrb	r3, [r7, #0]
 801305c:	f003 0302 	and.w	r3, r3, #2
 8013060:	b2db      	uxtb	r3, r3
 8013062:	2b00      	cmp	r3, #0
 8013064:	d001      	beq.n	801306a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8013066:	f7ff ffb7 	bl	8012fd8 <ProcessRadioRxTimeout>
        }
    }
}
 801306a:	bf00      	nop
 801306c:	3710      	adds	r7, #16
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	20001a40 	.word	0x20001a40

08013078 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8013078:	b480      	push	{r7}
 801307a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 801307c:	4b10      	ldr	r3, [pc, #64]	; (80130c0 <LoRaMacIsBusy+0x48>)
 801307e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013082:	2b01      	cmp	r3, #1
 8013084:	d101      	bne.n	801308a <LoRaMacIsBusy+0x12>
    {
        return false;
 8013086:	2300      	movs	r3, #0
 8013088:	e015      	b.n	80130b6 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 801308a:	4b0e      	ldr	r3, [pc, #56]	; (80130c4 <LoRaMacIsBusy+0x4c>)
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	f003 0301 	and.w	r3, r3, #1
 8013092:	b2db      	uxtb	r3, r3
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <LoRaMacIsBusy+0x24>
    {
        return true;
 8013098:	2301      	movs	r3, #1
 801309a:	e00c      	b.n	80130b6 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801309c:	4b08      	ldr	r3, [pc, #32]	; (80130c0 <LoRaMacIsBusy+0x48>)
 801309e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d106      	bne.n	80130b4 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80130a6:	4b06      	ldr	r3, [pc, #24]	; (80130c0 <LoRaMacIsBusy+0x48>)
 80130a8:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d101      	bne.n	80130b4 <LoRaMacIsBusy+0x3c>
    {
        return false;
 80130b0:	2300      	movs	r3, #0
 80130b2:	e000      	b.n	80130b6 <LoRaMacIsBusy+0x3e>
    }
    return true;
 80130b4:	2301      	movs	r3, #1
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bc80      	pop	{r7}
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	200008fc 	.word	0x200008fc
 80130c4:	20001a40 	.word	0x20001a40

080130c8 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80130c8:	b480      	push	{r7}
 80130ca:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80130cc:	4b05      	ldr	r3, [pc, #20]	; (80130e4 <LoRaMacIsStopped+0x1c>)
 80130ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d101      	bne.n	80130da <LoRaMacIsStopped+0x12>
    {
        return true;
 80130d6:	2301      	movs	r3, #1
 80130d8:	e000      	b.n	80130dc <LoRaMacIsStopped+0x14>
    }
    return false;
 80130da:	2300      	movs	r3, #0
}
 80130dc:	4618      	mov	r0, r3
 80130de:	46bd      	mov	sp, r7
 80130e0:	bc80      	pop	{r7}
 80130e2:	4770      	bx	lr
 80130e4:	200008fc 	.word	0x200008fc

080130e8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	4603      	mov	r3, r0
 80130f0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80130f2:	4a04      	ldr	r2, [pc, #16]	; (8013104 <LoRaMacEnableRequests+0x1c>)
 80130f4:	79fb      	ldrb	r3, [r7, #7]
 80130f6:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 80130fa:	bf00      	nop
 80130fc:	370c      	adds	r7, #12
 80130fe:	46bd      	mov	sp, r7
 8013100:	bc80      	pop	{r7}
 8013102:	4770      	bx	lr
 8013104:	200008fc 	.word	0x200008fc

08013108 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801310e:	4b2c      	ldr	r3, [pc, #176]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013110:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013114:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8013116:	4b2a      	ldr	r3, [pc, #168]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013118:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801311c:	2b00      	cmp	r3, #0
 801311e:	d14a      	bne.n	80131b6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8013120:	4b27      	ldr	r3, [pc, #156]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013122:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013126:	f003 0301 	and.w	r3, r3, #1
 801312a:	b2db      	uxtb	r3, r3
 801312c:	2b00      	cmp	r3, #0
 801312e:	d006      	beq.n	801313e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8013130:	4a23      	ldr	r2, [pc, #140]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013132:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013136:	f36f 0300 	bfc	r3, #0, #1
 801313a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801313e:	4b20      	ldr	r3, [pc, #128]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013140:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013144:	f003 0304 	and.w	r3, r3, #4
 8013148:	b2db      	uxtb	r3, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	d006      	beq.n	801315c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801314e:	4a1c      	ldr	r2, [pc, #112]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013150:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013154:	f36f 0382 	bfc	r3, #2, #1
 8013158:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801315c:	2001      	movs	r0, #1
 801315e:	f7ff ffc3 	bl	80130e8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8013162:	793b      	ldrb	r3, [r7, #4]
 8013164:	f003 0301 	and.w	r3, r3, #1
 8013168:	b2db      	uxtb	r3, r3
 801316a:	2b00      	cmp	r3, #0
 801316c:	d005      	beq.n	801317a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801316e:	4b14      	ldr	r3, [pc, #80]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013170:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4813      	ldr	r0, [pc, #76]	; (80131c4 <LoRaMacHandleRequestEvents+0xbc>)
 8013178:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801317a:	793b      	ldrb	r3, [r7, #4]
 801317c:	f003 0304 	and.w	r3, r3, #4
 8013180:	b2db      	uxtb	r3, r3
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00e      	beq.n	80131a4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8013186:	4810      	ldr	r0, [pc, #64]	; (80131c8 <LoRaMacHandleRequestEvents+0xc0>)
 8013188:	f004 fd2e 	bl	8017be8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 801318c:	f004 fd7e 	bl	8017c8c <LoRaMacConfirmQueueGetCnt>
 8013190:	4603      	mov	r3, r0
 8013192:	2b00      	cmp	r3, #0
 8013194:	d006      	beq.n	80131a4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013196:	4a0a      	ldr	r2, [pc, #40]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 8013198:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801319c:	f043 0304 	orr.w	r3, r3, #4
 80131a0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80131a4:	f004 f828 	bl	80171f8 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80131a8:	4a05      	ldr	r2, [pc, #20]	; (80131c0 <LoRaMacHandleRequestEvents+0xb8>)
 80131aa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80131ae:	f36f 1304 	bfc	r3, #4, #1
 80131b2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80131b6:	bf00      	nop
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}
 80131be:	bf00      	nop
 80131c0:	200008fc 	.word	0x200008fc
 80131c4:	20000d3c 	.word	0x20000d3c
 80131c8:	20000d50 	.word	0x20000d50

080131cc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80131d0:	4b16      	ldr	r3, [pc, #88]	; (801322c <LoRaMacHandleIndicationEvents+0x60>)
 80131d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80131d6:	f003 0308 	and.w	r3, r3, #8
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00d      	beq.n	80131fc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80131e0:	4a12      	ldr	r2, [pc, #72]	; (801322c <LoRaMacHandleIndicationEvents+0x60>)
 80131e2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80131e6:	f36f 03c3 	bfc	r3, #3, #1
 80131ea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80131ee:	4b0f      	ldr	r3, [pc, #60]	; (801322c <LoRaMacHandleIndicationEvents+0x60>)
 80131f0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80131f4:	68db      	ldr	r3, [r3, #12]
 80131f6:	490e      	ldr	r1, [pc, #56]	; (8013230 <LoRaMacHandleIndicationEvents+0x64>)
 80131f8:	480e      	ldr	r0, [pc, #56]	; (8013234 <LoRaMacHandleIndicationEvents+0x68>)
 80131fa:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80131fc:	4b0b      	ldr	r3, [pc, #44]	; (801322c <LoRaMacHandleIndicationEvents+0x60>)
 80131fe:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013202:	f003 0302 	and.w	r3, r3, #2
 8013206:	b2db      	uxtb	r3, r3
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00d      	beq.n	8013228 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801320c:	4a07      	ldr	r2, [pc, #28]	; (801322c <LoRaMacHandleIndicationEvents+0x60>)
 801320e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013212:	f36f 0341 	bfc	r3, #1, #1
 8013216:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801321a:	4b04      	ldr	r3, [pc, #16]	; (801322c <LoRaMacHandleIndicationEvents+0x60>)
 801321c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	4903      	ldr	r1, [pc, #12]	; (8013230 <LoRaMacHandleIndicationEvents+0x64>)
 8013224:	4804      	ldr	r0, [pc, #16]	; (8013238 <LoRaMacHandleIndicationEvents+0x6c>)
 8013226:	4798      	blx	r3
    }
}
 8013228:	bf00      	nop
 801322a:	bd80      	pop	{r7, pc}
 801322c:	200008fc 	.word	0x200008fc
 8013230:	20000d88 	.word	0x20000d88
 8013234:	20000d64 	.word	0x20000d64
 8013238:	20000d1c 	.word	0x20000d1c

0801323c <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8013242:	4b2a      	ldr	r3, [pc, #168]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 8013244:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013248:	f003 0301 	and.w	r3, r3, #1
 801324c:	b2db      	uxtb	r3, r3
 801324e:	2b00      	cmp	r3, #0
 8013250:	d048      	beq.n	80132e4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8013252:	2300      	movs	r3, #0
 8013254:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8013256:	2300      	movs	r3, #0
 8013258:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801325a:	4b24      	ldr	r3, [pc, #144]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 801325c:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8013260:	2b00      	cmp	r3, #0
 8013262:	d004      	beq.n	801326e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8013264:	4b21      	ldr	r3, [pc, #132]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 8013266:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801326a:	2b03      	cmp	r3, #3
 801326c:	d104      	bne.n	8013278 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801326e:	f002 f943 	bl	80154f8 <CheckRetransUnconfirmedUplink>
 8013272:	4603      	mov	r3, r0
 8013274:	71fb      	strb	r3, [r7, #7]
 8013276:	e010      	b.n	801329a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8013278:	4b1c      	ldr	r3, [pc, #112]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 801327a:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 801327e:	2b01      	cmp	r3, #1
 8013280:	d10b      	bne.n	801329a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8013282:	4b1a      	ldr	r3, [pc, #104]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 8013284:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8013288:	2b00      	cmp	r3, #0
 801328a:	d004      	beq.n	8013296 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 801328c:	f002 f960 	bl	8015550 <CheckRetransConfirmedUplink>
 8013290:	4603      	mov	r3, r0
 8013292:	71fb      	strb	r3, [r7, #7]
 8013294:	e001      	b.n	801329a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8013296:	2301      	movs	r3, #1
 8013298:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801329a:	79fb      	ldrb	r3, [r7, #7]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00d      	beq.n	80132bc <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80132a0:	4813      	ldr	r0, [pc, #76]	; (80132f0 <LoRaMacHandleMcpsRequest+0xb4>)
 80132a2:	f00c fc6f 	bl	801fb84 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80132a6:	4b11      	ldr	r3, [pc, #68]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 80132a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80132ac:	f023 0320 	bic.w	r3, r3, #32
 80132b0:	4a0e      	ldr	r2, [pc, #56]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 80132b2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80132b6:	f002 f985 	bl	80155c4 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80132ba:	e013      	b.n	80132e4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80132bc:	79bb      	ldrb	r3, [r7, #6]
 80132be:	f083 0301 	eor.w	r3, r3, #1
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00d      	beq.n	80132e4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80132c8:	4a08      	ldr	r2, [pc, #32]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 80132ca:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80132ce:	f36f 1304 	bfc	r3, #4, #1
 80132d2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80132d6:	4b05      	ldr	r3, [pc, #20]	; (80132ec <LoRaMacHandleMcpsRequest+0xb0>)
 80132d8:	2200      	movs	r2, #0
 80132da:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 80132de:	2000      	movs	r0, #0
 80132e0:	f000 f9c8 	bl	8013674 <OnTxDelayedTimerEvent>
}
 80132e4:	bf00      	nop
 80132e6:	3708      	adds	r7, #8
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	200008fc 	.word	0x200008fc
 80132f0:	20000c64 	.word	0x20000c64

080132f4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80132f8:	4b18      	ldr	r3, [pc, #96]	; (801335c <LoRaMacHandleMlmeRequest+0x68>)
 80132fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80132fe:	f003 0304 	and.w	r3, r3, #4
 8013302:	b2db      	uxtb	r3, r3
 8013304:	2b00      	cmp	r3, #0
 8013306:	d026      	beq.n	8013356 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8013308:	2001      	movs	r0, #1
 801330a:	f004 fc53 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d012      	beq.n	801333a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8013314:	2001      	movs	r0, #1
 8013316:	f004 fbef 	bl	8017af8 <LoRaMacConfirmQueueGetStatus>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d103      	bne.n	8013328 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8013320:	4b0e      	ldr	r3, [pc, #56]	; (801335c <LoRaMacHandleMlmeRequest+0x68>)
 8013322:	2200      	movs	r2, #0
 8013324:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013328:	4b0c      	ldr	r3, [pc, #48]	; (801335c <LoRaMacHandleMlmeRequest+0x68>)
 801332a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801332e:	f023 0302 	bic.w	r3, r3, #2
 8013332:	4a0a      	ldr	r2, [pc, #40]	; (801335c <LoRaMacHandleMlmeRequest+0x68>)
 8013334:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8013338:	e00d      	b.n	8013356 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 801333a:	2006      	movs	r0, #6
 801333c:	f004 fc3a 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 8013340:	4603      	mov	r3, r0
 8013342:	2b00      	cmp	r3, #0
 8013344:	d007      	beq.n	8013356 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013346:	4b05      	ldr	r3, [pc, #20]	; (801335c <LoRaMacHandleMlmeRequest+0x68>)
 8013348:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801334c:	f023 0302 	bic.w	r3, r3, #2
 8013350:	4a02      	ldr	r2, [pc, #8]	; (801335c <LoRaMacHandleMlmeRequest+0x68>)
 8013352:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8013356:	bf00      	nop
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	200008fc 	.word	0x200008fc

08013360 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8013364:	200b      	movs	r0, #11
 8013366:	f004 fc25 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 801336a:	4603      	mov	r3, r0
 801336c:	2b00      	cmp	r3, #0
 801336e:	d019      	beq.n	80133a4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8013370:	4b0e      	ldr	r3, [pc, #56]	; (80133ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8013372:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013376:	f003 0301 	and.w	r3, r3, #1
 801337a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801337c:	2b00      	cmp	r3, #0
 801337e:	d111      	bne.n	80133a4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013380:	4b0a      	ldr	r3, [pc, #40]	; (80133ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8013382:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013386:	f003 0304 	and.w	r3, r3, #4
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d009      	beq.n	80133a4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013390:	4b06      	ldr	r3, [pc, #24]	; (80133ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8013392:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013396:	f023 0302 	bic.w	r3, r3, #2
 801339a:	4a04      	ldr	r2, [pc, #16]	; (80133ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801339c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80133a0:	2301      	movs	r3, #1
 80133a2:	e000      	b.n	80133a6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80133a4:	2300      	movs	r3, #0
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	200008fc 	.word	0x200008fc

080133b0 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80133b0:	b480      	push	{r7}
 80133b2:	b083      	sub	sp, #12
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	4603      	mov	r3, r0
 80133b8:	71fb      	strb	r3, [r7, #7]
 80133ba:	460b      	mov	r3, r1
 80133bc:	71bb      	strb	r3, [r7, #6]
 80133be:	4613      	mov	r3, r2
 80133c0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80133c2:	79fb      	ldrb	r3, [r7, #7]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00a      	beq.n	80133de <CheckForMinimumAbpDatarate+0x2e>
 80133c8:	79bb      	ldrb	r3, [r7, #6]
 80133ca:	2b01      	cmp	r3, #1
 80133cc:	d107      	bne.n	80133de <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80133ce:	797b      	ldrb	r3, [r7, #5]
 80133d0:	f083 0301 	eor.w	r3, r3, #1
 80133d4:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d001      	beq.n	80133de <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 80133da:	2301      	movs	r3, #1
 80133dc:	e000      	b.n	80133e0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 80133de:	2300      	movs	r3, #0
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	370c      	adds	r7, #12
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bc80      	pop	{r7}
 80133e8:	4770      	bx	lr
	...

080133ec <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80133ec:	b480      	push	{r7}
 80133ee:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80133f0:	4b0d      	ldr	r3, [pc, #52]	; (8013428 <LoRaMacCheckForRxAbort+0x3c>)
 80133f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80133f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00f      	beq.n	801341e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80133fe:	4b0a      	ldr	r3, [pc, #40]	; (8013428 <LoRaMacCheckForRxAbort+0x3c>)
 8013400:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013408:	4a07      	ldr	r2, [pc, #28]	; (8013428 <LoRaMacCheckForRxAbort+0x3c>)
 801340a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801340e:	4b06      	ldr	r3, [pc, #24]	; (8013428 <LoRaMacCheckForRxAbort+0x3c>)
 8013410:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013414:	f023 0302 	bic.w	r3, r3, #2
 8013418:	4a03      	ldr	r2, [pc, #12]	; (8013428 <LoRaMacCheckForRxAbort+0x3c>)
 801341a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801341e:	bf00      	nop
 8013420:	46bd      	mov	sp, r7
 8013422:	bc80      	pop	{r7}
 8013424:	4770      	bx	lr
 8013426:	bf00      	nop
 8013428:	200008fc 	.word	0x200008fc

0801342c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8013434:	2300      	movs	r3, #0
 8013436:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8013438:	2300      	movs	r3, #0
 801343a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801343c:	4b51      	ldr	r3, [pc, #324]	; (8013584 <LoRaMacHandleNvm+0x158>)
 801343e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013442:	2b00      	cmp	r3, #0
 8013444:	f040 8099 	bne.w	801357a <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2124      	movs	r1, #36	; 0x24
 801344c:	4618      	mov	r0, r3
 801344e:	f008 fa33 	bl	801b8b8 <Crc32>
 8013452:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013458:	68ba      	ldr	r2, [r7, #8]
 801345a:	429a      	cmp	r2, r3
 801345c:	d006      	beq.n	801346c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8013464:	89fb      	ldrh	r3, [r7, #14]
 8013466:	f043 0301 	orr.w	r3, r3, #1
 801346a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	3328      	adds	r3, #40	; 0x28
 8013470:	211c      	movs	r1, #28
 8013472:	4618      	mov	r0, r3
 8013474:	f008 fa20 	bl	801b8b8 <Crc32>
 8013478:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801347e:	68ba      	ldr	r2, [r7, #8]
 8013480:	429a      	cmp	r2, r3
 8013482:	d006      	beq.n	8013492 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	68ba      	ldr	r2, [r7, #8]
 8013488:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801348a:	89fb      	ldrh	r3, [r7, #14]
 801348c:	f043 0302 	orr.w	r3, r3, #2
 8013490:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	3348      	adds	r3, #72	; 0x48
 8013496:	f44f 7180 	mov.w	r1, #256	; 0x100
 801349a:	4618      	mov	r0, r3
 801349c:	f008 fa0c 	bl	801b8b8 <Crc32>
 80134a0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80134a8:	68ba      	ldr	r2, [r7, #8]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d007      	beq.n	80134be <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	68ba      	ldr	r2, [r7, #8]
 80134b2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80134b6:	89fb      	ldrh	r3, [r7, #14]
 80134b8:	f043 0304 	orr.w	r3, r3, #4
 80134bc:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80134c4:	21d4      	movs	r1, #212	; 0xd4
 80134c6:	4618      	mov	r0, r3
 80134c8:	f008 f9f6 	bl	801b8b8 <Crc32>
 80134cc:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80134d4:	68ba      	ldr	r2, [r7, #8]
 80134d6:	429a      	cmp	r2, r3
 80134d8:	d007      	beq.n	80134ea <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	68ba      	ldr	r2, [r7, #8]
 80134de:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80134e2:	89fb      	ldrh	r3, [r7, #14]
 80134e4:	f043 0308 	orr.w	r3, r3, #8
 80134e8:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80134f0:	2110      	movs	r1, #16
 80134f2:	4618      	mov	r0, r3
 80134f4:	f008 f9e0 	bl	801b8b8 <Crc32>
 80134f8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8013500:	68ba      	ldr	r2, [r7, #8]
 8013502:	429a      	cmp	r2, r3
 8013504:	d007      	beq.n	8013516 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801350e:	89fb      	ldrh	r3, [r7, #14]
 8013510:	f043 0310 	orr.w	r3, r3, #16
 8013514:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f503 730e 	add.w	r3, r3, #568	; 0x238
 801351c:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013520:	4618      	mov	r0, r3
 8013522:	f008 f9c9 	bl	801b8b8 <Crc32>
 8013526:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	429a      	cmp	r2, r3
 8013532:	d007      	beq.n	8013544 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801353c:	89fb      	ldrh	r3, [r7, #14]
 801353e:	f043 0320 	orr.w	r3, r3, #32
 8013542:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 801354a:	2114      	movs	r1, #20
 801354c:	4618      	mov	r0, r3
 801354e:	f008 f9b3 	bl	801b8b8 <Crc32>
 8013552:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 801355a:	68ba      	ldr	r2, [r7, #8]
 801355c:	429a      	cmp	r2, r3
 801355e:	d007      	beq.n	8013570 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	68ba      	ldr	r2, [r7, #8]
 8013564:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8013568:	89fb      	ldrh	r3, [r7, #14]
 801356a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801356e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8013570:	89fb      	ldrh	r3, [r7, #14]
 8013572:	4618      	mov	r0, r3
 8013574:	f002 f878 	bl	8015668 <CallNvmDataChangeCallback>
 8013578:	e000      	b.n	801357c <LoRaMacHandleNvm+0x150>
        return;
 801357a:	bf00      	nop
}
 801357c:	3710      	adds	r7, #16
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	200008fc 	.word	0x200008fc

08013588 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d00d      	beq.n	80135b4 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8013598:	6838      	ldr	r0, [r7, #0]
 801359a:	f00c fc1f 	bl	801fddc <UTIL_TIMER_GetElapsedTime>
 801359e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80135a0:	68fa      	ldr	r2, [r7, #12]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d905      	bls.n	80135b4 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80135a8:	4b05      	ldr	r3, [pc, #20]	; (80135c0 <LoRaMacHandleResponseTimeout+0x38>)
 80135aa:	2200      	movs	r2, #0
 80135ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80135b0:	2301      	movs	r3, #1
 80135b2:	e000      	b.n	80135b6 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80135b4:	2300      	movs	r3, #0
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3710      	adds	r7, #16
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	20000e18 	.word	0x20000e18

080135c4 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80135ca:	2300      	movs	r3, #0
 80135cc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80135ce:	f7ff fd0b 	bl	8012fe8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80135d2:	f003 fe80 	bl	80172d6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80135d6:	4b25      	ldr	r3, [pc, #148]	; (801366c <LoRaMacProcess+0xa8>)
 80135d8:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80135dc:	f003 0310 	and.w	r3, r3, #16
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d023      	beq.n	801362e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80135e6:	2000      	movs	r0, #0
 80135e8:	f7ff fd7e 	bl	80130e8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80135ec:	f7ff fefe 	bl	80133ec <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80135f0:	f002 f858 	bl	80156a4 <IsRequestPending>
 80135f4:	4603      	mov	r3, r0
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d006      	beq.n	8013608 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80135fa:	f7ff feb1 	bl	8013360 <LoRaMacCheckForBeaconAcquisition>
 80135fe:	4603      	mov	r3, r0
 8013600:	461a      	mov	r2, r3
 8013602:	79fb      	ldrb	r3, [r7, #7]
 8013604:	4313      	orrs	r3, r2
 8013606:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8013608:	79fb      	ldrb	r3, [r7, #7]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d103      	bne.n	8013616 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801360e:	f7ff fe71 	bl	80132f4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8013612:	f7ff fe13 	bl	801323c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8013616:	f7ff fd77 	bl	8013108 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801361a:	2001      	movs	r0, #1
 801361c:	f7ff fd64 	bl	80130e8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013620:	4a12      	ldr	r2, [pc, #72]	; (801366c <LoRaMacProcess+0xa8>)
 8013622:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013626:	f043 0320 	orr.w	r3, r3, #32
 801362a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 801362e:	f7ff fdcd 	bl	80131cc <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8013632:	4b0e      	ldr	r3, [pc, #56]	; (801366c <LoRaMacProcess+0xa8>)
 8013634:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8013638:	2b02      	cmp	r3, #2
 801363a:	d101      	bne.n	8013640 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 801363c:	f001 fc1a 	bl	8014e74 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8013640:	4b0a      	ldr	r3, [pc, #40]	; (801366c <LoRaMacProcess+0xa8>)
 8013642:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013646:	f003 0320 	and.w	r3, r3, #32
 801364a:	b2db      	uxtb	r3, r3
 801364c:	2b00      	cmp	r3, #0
 801364e:	d009      	beq.n	8013664 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8013650:	4a06      	ldr	r2, [pc, #24]	; (801366c <LoRaMacProcess+0xa8>)
 8013652:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013656:	f36f 1345 	bfc	r3, #5, #1
 801365a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 801365e:	4804      	ldr	r0, [pc, #16]	; (8013670 <LoRaMacProcess+0xac>)
 8013660:	f7ff fee4 	bl	801342c <LoRaMacHandleNvm>
    }
}
 8013664:	bf00      	nop
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	200008fc 	.word	0x200008fc
 8013670:	20000e18 	.word	0x20000e18

08013674 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 801367c:	481e      	ldr	r0, [pc, #120]	; (80136f8 <OnTxDelayedTimerEvent+0x84>)
 801367e:	f00c fa81 	bl	801fb84 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8013682:	4b1e      	ldr	r3, [pc, #120]	; (80136fc <OnTxDelayedTimerEvent+0x88>)
 8013684:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013688:	f023 0320 	bic.w	r3, r3, #32
 801368c:	4a1b      	ldr	r2, [pc, #108]	; (80136fc <OnTxDelayedTimerEvent+0x88>)
 801368e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8013692:	4b1b      	ldr	r3, [pc, #108]	; (8013700 <OnTxDelayedTimerEvent+0x8c>)
 8013694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013698:	4a18      	ldr	r2, [pc, #96]	; (80136fc <OnTxDelayedTimerEvent+0x88>)
 801369a:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 801369e:	4611      	mov	r1, r2
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7ff ff71 	bl	8013588 <LoRaMacHandleResponseTimeout>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d11e      	bne.n	80136ea <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80136ac:	2001      	movs	r0, #1
 80136ae:	f001 f92b 	bl	8014908 <ScheduleTx>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d01a      	beq.n	80136ee <OnTxDelayedTimerEvent+0x7a>
 80136b8:	2b0b      	cmp	r3, #11
 80136ba:	d018      	beq.n	80136ee <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80136bc:	4b10      	ldr	r3, [pc, #64]	; (8013700 <OnTxDelayedTimerEvent+0x8c>)
 80136be:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80136c2:	b2da      	uxtb	r2, r3
 80136c4:	4b0d      	ldr	r3, [pc, #52]	; (80136fc <OnTxDelayedTimerEvent+0x88>)
 80136c6:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80136ca:	4b0c      	ldr	r3, [pc, #48]	; (80136fc <OnTxDelayedTimerEvent+0x88>)
 80136cc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80136d0:	4b0a      	ldr	r3, [pc, #40]	; (80136fc <OnTxDelayedTimerEvent+0x88>)
 80136d2:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80136d6:	4b09      	ldr	r3, [pc, #36]	; (80136fc <OnTxDelayedTimerEvent+0x88>)
 80136d8:	2209      	movs	r2, #9
 80136da:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80136de:	2009      	movs	r0, #9
 80136e0:	f004 fa34 	bl	8017b4c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80136e4:	f001 ff6e 	bl	80155c4 <StopRetransmission>
            break;
 80136e8:	e002      	b.n	80136f0 <OnTxDelayedTimerEvent+0x7c>
        return;
 80136ea:	bf00      	nop
 80136ec:	e000      	b.n	80136f0 <OnTxDelayedTimerEvent+0x7c>
            break;
 80136ee:	bf00      	nop
        }
    }
}
 80136f0:	3708      	adds	r7, #8
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	20000c64 	.word	0x20000c64
 80136fc:	200008fc 	.word	0x200008fc
 8013700:	20000e18 	.word	0x20000e18

08013704 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 801370c:	4b17      	ldr	r3, [pc, #92]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 801370e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013712:	4b16      	ldr	r3, [pc, #88]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 8013714:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8013718:	4b15      	ldr	r3, [pc, #84]	; (8013770 <OnRxWindow1TimerEvent+0x6c>)
 801371a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801371e:	b25a      	sxtb	r2, r3
 8013720:	4b12      	ldr	r3, [pc, #72]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 8013722:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013726:	4b12      	ldr	r3, [pc, #72]	; (8013770 <OnRxWindow1TimerEvent+0x6c>)
 8013728:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801372c:	4b0f      	ldr	r3, [pc, #60]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 801372e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013732:	4b0f      	ldr	r3, [pc, #60]	; (8013770 <OnRxWindow1TimerEvent+0x6c>)
 8013734:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013738:	4b0c      	ldr	r3, [pc, #48]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 801373a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801373e:	4b0b      	ldr	r3, [pc, #44]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 8013740:	2200      	movs	r2, #0
 8013742:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8013746:	4b09      	ldr	r3, [pc, #36]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 8013748:	2200      	movs	r2, #0
 801374a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801374e:	4b08      	ldr	r3, [pc, #32]	; (8013770 <OnRxWindow1TimerEvent+0x6c>)
 8013750:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013754:	4b05      	ldr	r3, [pc, #20]	; (801376c <OnRxWindow1TimerEvent+0x68>)
 8013756:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801375a:	4906      	ldr	r1, [pc, #24]	; (8013774 <OnRxWindow1TimerEvent+0x70>)
 801375c:	4806      	ldr	r0, [pc, #24]	; (8013778 <OnRxWindow1TimerEvent+0x74>)
 801375e:	f001 fb55 	bl	8014e0c <RxWindowSetup>
}
 8013762:	bf00      	nop
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	200008fc 	.word	0x200008fc
 8013770:	20000e18 	.word	0x20000e18
 8013774:	20000cb4 	.word	0x20000cb4
 8013778:	20000c7c 	.word	0x20000c7c

0801377c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8013784:	4b19      	ldr	r3, [pc, #100]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 8013786:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801378a:	2b00      	cmp	r3, #0
 801378c:	d029      	beq.n	80137e2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801378e:	4b17      	ldr	r3, [pc, #92]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 8013790:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013794:	4b15      	ldr	r3, [pc, #84]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 8013796:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801379a:	4b15      	ldr	r3, [pc, #84]	; (80137f0 <OnRxWindow2TimerEvent+0x74>)
 801379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801379e:	4a13      	ldr	r2, [pc, #76]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 80137a0:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137a4:	4b12      	ldr	r3, [pc, #72]	; (80137f0 <OnRxWindow2TimerEvent+0x74>)
 80137a6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80137aa:	4b10      	ldr	r3, [pc, #64]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 80137ac:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80137b0:	4b0f      	ldr	r3, [pc, #60]	; (80137f0 <OnRxWindow2TimerEvent+0x74>)
 80137b2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80137b6:	4b0d      	ldr	r3, [pc, #52]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 80137b8:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80137bc:	4b0b      	ldr	r3, [pc, #44]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 80137be:	2200      	movs	r2, #0
 80137c0:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80137c4:	4b09      	ldr	r3, [pc, #36]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 80137c6:	2201      	movs	r2, #1
 80137c8:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80137cc:	4b08      	ldr	r3, [pc, #32]	; (80137f0 <OnRxWindow2TimerEvent+0x74>)
 80137ce:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80137d2:	4b06      	ldr	r3, [pc, #24]	; (80137ec <OnRxWindow2TimerEvent+0x70>)
 80137d4:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80137d8:	4906      	ldr	r1, [pc, #24]	; (80137f4 <OnRxWindow2TimerEvent+0x78>)
 80137da:	4807      	ldr	r0, [pc, #28]	; (80137f8 <OnRxWindow2TimerEvent+0x7c>)
 80137dc:	f001 fb16 	bl	8014e0c <RxWindowSetup>
 80137e0:	e000      	b.n	80137e4 <OnRxWindow2TimerEvent+0x68>
        return;
 80137e2:	bf00      	nop
}
 80137e4:	3708      	adds	r7, #8
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	200008fc 	.word	0x200008fc
 80137f0:	20000e18 	.word	0x20000e18
 80137f4:	20000ccc 	.word	0x20000ccc
 80137f8:	20000c94 	.word	0x20000c94

080137fc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8013804:	4808      	ldr	r0, [pc, #32]	; (8013828 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8013806:	f00c f9bd 	bl	801fb84 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801380a:	4b08      	ldr	r3, [pc, #32]	; (801382c <OnRetransmitTimeoutTimerEvent+0x30>)
 801380c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8013810:	2b00      	cmp	r3, #0
 8013812:	d003      	beq.n	801381c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8013814:	4b05      	ldr	r3, [pc, #20]	; (801382c <OnRetransmitTimeoutTimerEvent+0x30>)
 8013816:	2201      	movs	r2, #1
 8013818:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 801381c:	f001 ff0e 	bl	801563c <OnMacProcessNotify>
}
 8013820:	bf00      	nop
 8013822:	3708      	adds	r7, #8
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	20000cfc 	.word	0x20000cfc
 801382c:	200008fc 	.word	0x200008fc

08013830 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	60ba      	str	r2, [r7, #8]
 8013838:	607b      	str	r3, [r7, #4]
 801383a:	4603      	mov	r3, r0
 801383c:	73fb      	strb	r3, [r7, #15]
 801383e:	460b      	mov	r3, r1
 8013840:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d005      	beq.n	8013854 <GetFCntDown+0x24>
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d002      	beq.n	8013854 <GetFCntDown+0x24>
 801384e:	69fb      	ldr	r3, [r7, #28]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d101      	bne.n	8013858 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013854:	2309      	movs	r3, #9
 8013856:	e028      	b.n	80138aa <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8013858:	7bfb      	ldrb	r3, [r7, #15]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d016      	beq.n	801388c <GetFCntDown+0x5c>
 801385e:	2b01      	cmp	r3, #1
 8013860:	d118      	bne.n	8013894 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8013862:	79bb      	ldrb	r3, [r7, #6]
 8013864:	2b01      	cmp	r3, #1
 8013866:	d10d      	bne.n	8013884 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8013868:	7bbb      	ldrb	r3, [r7, #14]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d002      	beq.n	8013874 <GetFCntDown+0x44>
 801386e:	7bbb      	ldrb	r3, [r7, #14]
 8013870:	2b03      	cmp	r3, #3
 8013872:	d103      	bne.n	801387c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8013874:	69bb      	ldr	r3, [r7, #24]
 8013876:	2202      	movs	r2, #2
 8013878:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801387a:	e00d      	b.n	8013898 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	2201      	movs	r2, #1
 8013880:	701a      	strb	r2, [r3, #0]
            break;
 8013882:	e009      	b.n	8013898 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	2203      	movs	r2, #3
 8013888:	701a      	strb	r2, [r3, #0]
            break;
 801388a:	e005      	b.n	8013898 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	2204      	movs	r2, #4
 8013890:	701a      	strb	r2, [r3, #0]
            break;
 8013892:	e001      	b.n	8013898 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013894:	2305      	movs	r3, #5
 8013896:	e008      	b.n	80138aa <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8013898:	69bb      	ldr	r3, [r7, #24]
 801389a:	7818      	ldrb	r0, [r3, #0]
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	89db      	ldrh	r3, [r3, #14]
 80138a0:	69fa      	ldr	r2, [r7, #28]
 80138a2:	4619      	mov	r1, r3
 80138a4:	f004 fd90 	bl	80183c8 <LoRaMacCryptoGetFCntDown>
 80138a8:	4603      	mov	r3, r0
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3710      	adds	r7, #16
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
	...

080138b4 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80138b4:	b5b0      	push	{r4, r5, r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	4603      	mov	r3, r0
 80138bc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138be:	2303      	movs	r3, #3
 80138c0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80138c2:	4b6e      	ldr	r3, [pc, #440]	; (8013a7c <SwitchClass+0x1c8>)
 80138c4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80138c8:	2b02      	cmp	r3, #2
 80138ca:	f000 80bb 	beq.w	8013a44 <SwitchClass+0x190>
 80138ce:	2b02      	cmp	r3, #2
 80138d0:	f300 80ce 	bgt.w	8013a70 <SwitchClass+0x1bc>
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d003      	beq.n	80138e0 <SwitchClass+0x2c>
 80138d8:	2b01      	cmp	r3, #1
 80138da:	f000 80a5 	beq.w	8013a28 <SwitchClass+0x174>
 80138de:	e0c7      	b.n	8013a70 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80138e0:	79fb      	ldrb	r3, [r7, #7]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d109      	bne.n	80138fa <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80138e6:	4b65      	ldr	r3, [pc, #404]	; (8013a7c <SwitchClass+0x1c8>)
 80138e8:	4a64      	ldr	r2, [pc, #400]	; (8013a7c <SwitchClass+0x1c8>)
 80138ea:	3374      	adds	r3, #116	; 0x74
 80138ec:	326c      	adds	r2, #108	; 0x6c
 80138ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138f2:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80138f6:	2300      	movs	r3, #0
 80138f8:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80138fa:	79fb      	ldrb	r3, [r7, #7]
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d10c      	bne.n	801391a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8013900:	79fb      	ldrb	r3, [r7, #7]
 8013902:	4618      	mov	r0, r3
 8013904:	f003 fc7e 	bl	8017204 <LoRaMacClassBSwitchClass>
 8013908:	4603      	mov	r3, r0
 801390a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 801390c:	7bfb      	ldrb	r3, [r7, #15]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d103      	bne.n	801391a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8013912:	4a5a      	ldr	r2, [pc, #360]	; (8013a7c <SwitchClass+0x1c8>)
 8013914:	79fb      	ldrb	r3, [r7, #7]
 8013916:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 801391a:	79fb      	ldrb	r3, [r7, #7]
 801391c:	2b02      	cmp	r3, #2
 801391e:	f040 80a2 	bne.w	8013a66 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013922:	4a56      	ldr	r2, [pc, #344]	; (8013a7c <SwitchClass+0x1c8>)
 8013924:	79fb      	ldrb	r3, [r7, #7]
 8013926:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801392a:	4a55      	ldr	r2, [pc, #340]	; (8013a80 <SwitchClass+0x1cc>)
 801392c:	4b54      	ldr	r3, [pc, #336]	; (8013a80 <SwitchClass+0x1cc>)
 801392e:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8013932:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8013936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801393a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801393e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013942:	4b4f      	ldr	r3, [pc, #316]	; (8013a80 <SwitchClass+0x1cc>)
 8013944:	2202      	movs	r2, #2
 8013946:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801394a:	2300      	movs	r3, #0
 801394c:	73bb      	strb	r3, [r7, #14]
 801394e:	e05b      	b.n	8013a08 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8013950:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013954:	4949      	ldr	r1, [pc, #292]	; (8013a7c <SwitchClass+0x1c8>)
 8013956:	4613      	mov	r3, r2
 8013958:	005b      	lsls	r3, r3, #1
 801395a:	4413      	add	r3, r2
 801395c:	011b      	lsls	r3, r3, #4
 801395e:	440b      	add	r3, r1
 8013960:	33e9      	adds	r3, #233	; 0xe9
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d049      	beq.n	80139fc <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8013968:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801396c:	4943      	ldr	r1, [pc, #268]	; (8013a7c <SwitchClass+0x1c8>)
 801396e:	4613      	mov	r3, r2
 8013970:	005b      	lsls	r3, r3, #1
 8013972:	4413      	add	r3, r2
 8013974:	011b      	lsls	r3, r3, #4
 8013976:	440b      	add	r3, r1
 8013978:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801397c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801397e:	2b02      	cmp	r3, #2
 8013980:	d13c      	bne.n	80139fc <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8013982:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013986:	493d      	ldr	r1, [pc, #244]	; (8013a7c <SwitchClass+0x1c8>)
 8013988:	4613      	mov	r3, r2
 801398a:	005b      	lsls	r3, r3, #1
 801398c:	4413      	add	r3, r2
 801398e:	011b      	lsls	r3, r3, #4
 8013990:	440b      	add	r3, r1
 8013992:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	4a38      	ldr	r2, [pc, #224]	; (8013a7c <SwitchClass+0x1c8>)
 801399a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 801399c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80139a0:	4936      	ldr	r1, [pc, #216]	; (8013a7c <SwitchClass+0x1c8>)
 80139a2:	4613      	mov	r3, r2
 80139a4:	005b      	lsls	r3, r3, #1
 80139a6:	4413      	add	r3, r2
 80139a8:	011b      	lsls	r3, r3, #4
 80139aa:	440b      	add	r3, r1
 80139ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80139b0:	f993 3000 	ldrsb.w	r3, [r3]
 80139b4:	b2da      	uxtb	r2, r3
 80139b6:	4b31      	ldr	r3, [pc, #196]	; (8013a7c <SwitchClass+0x1c8>)
 80139b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80139bc:	4b30      	ldr	r3, [pc, #192]	; (8013a80 <SwitchClass+0x1cc>)
 80139be:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80139c2:	4b2f      	ldr	r3, [pc, #188]	; (8013a80 <SwitchClass+0x1cc>)
 80139c4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80139c8:	4b2c      	ldr	r3, [pc, #176]	; (8013a7c <SwitchClass+0x1c8>)
 80139ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139cc:	4a2c      	ldr	r2, [pc, #176]	; (8013a80 <SwitchClass+0x1cc>)
 80139ce:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80139d2:	4b2a      	ldr	r3, [pc, #168]	; (8013a7c <SwitchClass+0x1c8>)
 80139d4:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80139d8:	4b29      	ldr	r3, [pc, #164]	; (8013a80 <SwitchClass+0x1cc>)
 80139da:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80139de:	4b27      	ldr	r3, [pc, #156]	; (8013a7c <SwitchClass+0x1c8>)
 80139e0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80139e4:	4b26      	ldr	r3, [pc, #152]	; (8013a80 <SwitchClass+0x1cc>)
 80139e6:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80139ea:	4b25      	ldr	r3, [pc, #148]	; (8013a80 <SwitchClass+0x1cc>)
 80139ec:	2203      	movs	r2, #3
 80139ee:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80139f2:	4b23      	ldr	r3, [pc, #140]	; (8013a80 <SwitchClass+0x1cc>)
 80139f4:	2201      	movs	r2, #1
 80139f6:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 80139fa:	e009      	b.n	8013a10 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80139fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a00:	b2db      	uxtb	r3, r3
 8013a02:	3301      	adds	r3, #1
 8013a04:	b2db      	uxtb	r3, r3
 8013a06:	73bb      	strb	r3, [r7, #14]
 8013a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	dd9f      	ble.n	8013950 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8013a10:	4b1b      	ldr	r3, [pc, #108]	; (8013a80 <SwitchClass+0x1cc>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8013a18:	4b1a      	ldr	r3, [pc, #104]	; (8013a84 <SwitchClass+0x1d0>)
 8013a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a1c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8013a1e:	f001 fa29 	bl	8014e74 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8013a26:	e01e      	b.n	8013a66 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8013a28:	79fb      	ldrb	r3, [r7, #7]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f003 fbea 	bl	8017204 <LoRaMacClassBSwitchClass>
 8013a30:	4603      	mov	r3, r0
 8013a32:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8013a34:	7bfb      	ldrb	r3, [r7, #15]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d117      	bne.n	8013a6a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013a3a:	4a10      	ldr	r2, [pc, #64]	; (8013a7c <SwitchClass+0x1c8>)
 8013a3c:	79fb      	ldrb	r3, [r7, #7]
 8013a3e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8013a42:	e012      	b.n	8013a6a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8013a44:	79fb      	ldrb	r3, [r7, #7]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d111      	bne.n	8013a6e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8013a4a:	4b0d      	ldr	r3, [pc, #52]	; (8013a80 <SwitchClass+0x1cc>)
 8013a4c:	2206      	movs	r2, #6
 8013a4e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013a52:	4a0a      	ldr	r2, [pc, #40]	; (8013a7c <SwitchClass+0x1c8>)
 8013a54:	79fb      	ldrb	r3, [r7, #7]
 8013a56:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8013a5a:	4b0a      	ldr	r3, [pc, #40]	; (8013a84 <SwitchClass+0x1d0>)
 8013a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a5e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8013a60:	2300      	movs	r3, #0
 8013a62:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8013a64:	e003      	b.n	8013a6e <SwitchClass+0x1ba>
            break;
 8013a66:	bf00      	nop
 8013a68:	e002      	b.n	8013a70 <SwitchClass+0x1bc>
            break;
 8013a6a:	bf00      	nop
 8013a6c:	e000      	b.n	8013a70 <SwitchClass+0x1bc>
            break;
 8013a6e:	bf00      	nop
        }
    }

    return status;
 8013a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3710      	adds	r7, #16
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bdb0      	pop	{r4, r5, r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	20000e18 	.word	0x20000e18
 8013a80:	200008fc 	.word	0x200008fc
 8013a84:	08021df4 	.word	0x08021df4

08013a88 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b086      	sub	sp, #24
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	4603      	mov	r3, r0
 8013a90:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a92:	4b10      	ldr	r3, [pc, #64]	; (8013ad4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013a94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013a98:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8013a9a:	79fb      	ldrb	r3, [r7, #7]
 8013a9c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8013a9e:	230d      	movs	r3, #13
 8013aa0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8013aa2:	4b0c      	ldr	r3, [pc, #48]	; (8013ad4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013aa4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d001      	beq.n	8013ab0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8013aac:	230e      	movs	r3, #14
 8013aae:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ab0:	4b08      	ldr	r3, [pc, #32]	; (8013ad4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013ab2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ab6:	f107 0210 	add.w	r2, r7, #16
 8013aba:	4611      	mov	r1, r2
 8013abc:	4618      	mov	r0, r3
 8013abe:	f005 faee 	bl	801909e <RegionGetPhyParam>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	b2db      	uxtb	r3, r3
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3718      	adds	r7, #24
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	20000e18 	.word	0x20000e18

08013ad8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	4603      	mov	r3, r0
 8013ae0:	71fb      	strb	r3, [r7, #7]
 8013ae2:	460b      	mov	r3, r1
 8013ae4:	71bb      	strb	r3, [r7, #6]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8013aea:	2300      	movs	r3, #0
 8013aec:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8013aee:	2300      	movs	r3, #0
 8013af0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013af2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ff ffc6 	bl	8013a88 <GetMaxAppPayloadWithoutFOptsLength>
 8013afc:	4603      	mov	r3, r0
 8013afe:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8013b00:	79fb      	ldrb	r3, [r7, #7]
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	797b      	ldrb	r3, [r7, #5]
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	4413      	add	r3, r2
 8013b0a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8013b0c:	89ba      	ldrh	r2, [r7, #12]
 8013b0e:	89fb      	ldrh	r3, [r7, #14]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d804      	bhi.n	8013b1e <ValidatePayloadLength+0x46>
 8013b14:	89bb      	ldrh	r3, [r7, #12]
 8013b16:	2bff      	cmp	r3, #255	; 0xff
 8013b18:	d801      	bhi.n	8013b1e <ValidatePayloadLength+0x46>
    {
        return true;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e000      	b.n	8013b20 <ValidatePayloadLength+0x48>
    }
    return false;
 8013b1e:	2300      	movs	r3, #0
}
 8013b20:	4618      	mov	r0, r3
 8013b22:	3710      	adds	r7, #16
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8013b28:	b590      	push	{r4, r7, lr}
 8013b2a:	b0a5      	sub	sp, #148	; 0x94
 8013b2c:	af02      	add	r7, sp, #8
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	4608      	mov	r0, r1
 8013b32:	4611      	mov	r1, r2
 8013b34:	461a      	mov	r2, r3
 8013b36:	4603      	mov	r3, r0
 8013b38:	70fb      	strb	r3, [r7, #3]
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	70bb      	strb	r3, [r7, #2]
 8013b3e:	4613      	mov	r3, r2
 8013b40:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8013b42:	2300      	movs	r3, #0
 8013b44:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013b4e:	2300      	movs	r3, #0
 8013b50:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8013b54:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f000 84ab 	beq.w	80144b4 <ProcessMacCommands+0x98c>
 8013b5e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	f040 84ac 	bne.w	80144c0 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8013b68:	f000 bca4 	b.w	80144b4 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8013b6c:	78fb      	ldrb	r3, [r7, #3]
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	4413      	add	r3, r2
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f003 fe45 	bl	8017804 <LoRaMacCommandsGetCmdSize>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	78fb      	ldrb	r3, [r7, #3]
 8013b80:	441a      	add	r2, r3
 8013b82:	78bb      	ldrb	r3, [r7, #2]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	f300 849d 	bgt.w	80144c4 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8013b8a:	78fb      	ldrb	r3, [r7, #3]
 8013b8c:	1c5a      	adds	r2, r3, #1
 8013b8e:	70fa      	strb	r2, [r7, #3]
 8013b90:	461a      	mov	r2, r3
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4413      	add	r3, r2
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	3b02      	subs	r3, #2
 8013b9a:	2b11      	cmp	r3, #17
 8013b9c:	f200 8494 	bhi.w	80144c8 <ProcessMacCommands+0x9a0>
 8013ba0:	a201      	add	r2, pc, #4	; (adr r2, 8013ba8 <ProcessMacCommands+0x80>)
 8013ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ba6:	bf00      	nop
 8013ba8:	08013bf1 	.word	0x08013bf1
 8013bac:	08013c33 	.word	0x08013c33
 8013bb0:	08013daf 	.word	0x08013daf
 8013bb4:	08013ded 	.word	0x08013ded
 8013bb8:	08013ee5 	.word	0x08013ee5
 8013bbc:	08013f35 	.word	0x08013f35
 8013bc0:	08013ff1 	.word	0x08013ff1
 8013bc4:	08014047 	.word	0x08014047
 8013bc8:	0801412d 	.word	0x0801412d
 8013bcc:	080144c9 	.word	0x080144c9
 8013bd0:	080144c9 	.word	0x080144c9
 8013bd4:	080141d5 	.word	0x080141d5
 8013bd8:	080144c9 	.word	0x080144c9
 8013bdc:	080144c9 	.word	0x080144c9
 8013be0:	080142f5 	.word	0x080142f5
 8013be4:	08014329 	.word	0x08014329
 8013be8:	080143b9 	.word	0x080143b9
 8013bec:	0801442f 	.word	0x0801442f
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8013bf0:	2005      	movs	r0, #5
 8013bf2:	f003 ffdf 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	f000 845b 	beq.w	80144b4 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8013bfe:	2105      	movs	r1, #5
 8013c00:	2000      	movs	r0, #0
 8013c02:	f003 ff4b 	bl	8017a9c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8013c06:	78fb      	ldrb	r3, [r7, #3]
 8013c08:	1c5a      	adds	r2, r3, #1
 8013c0a:	70fa      	strb	r2, [r7, #3]
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	4413      	add	r3, r2
 8013c12:	781a      	ldrb	r2, [r3, #0]
 8013c14:	4bb0      	ldr	r3, [pc, #704]	; (8013ed8 <ProcessMacCommands+0x3b0>)
 8013c16:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8013c1a:	78fb      	ldrb	r3, [r7, #3]
 8013c1c:	1c5a      	adds	r2, r3, #1
 8013c1e:	70fa      	strb	r2, [r7, #3]
 8013c20:	461a      	mov	r2, r3
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4413      	add	r3, r2
 8013c26:	781a      	ldrb	r2, [r3, #0]
 8013c28:	4bab      	ldr	r3, [pc, #684]	; (8013ed8 <ProcessMacCommands+0x3b0>)
 8013c2a:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 8013c2e:	f000 bc41 	b.w	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8013c32:	2300      	movs	r3, #0
 8013c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8013c44:	2300      	movs	r3, #0
 8013c46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8013c4a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013c4e:	f083 0301 	eor.w	r3, r3, #1
 8013c52:	b2db      	uxtb	r3, r3
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f000 80a5 	beq.w	8013da4 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8013c60:	78fb      	ldrb	r3, [r7, #3]
 8013c62:	3b01      	subs	r3, #1
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	4413      	add	r3, r2
 8013c68:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013c6a:	4b9c      	ldr	r3, [pc, #624]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013c6c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013c70:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013c74:	4b99      	ldr	r3, [pc, #612]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013c76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013c7a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c7e:	4b97      	ldr	r3, [pc, #604]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013c80:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c84:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013c88:	4b94      	ldr	r3, [pc, #592]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013c8a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013c8e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013c92:	4b92      	ldr	r3, [pc, #584]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013c94:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013c98:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8013c9c:	4b8f      	ldr	r3, [pc, #572]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013c9e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8013ca2:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013ca4:	4b8d      	ldr	r3, [pc, #564]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013ca6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d008      	beq.n	8013cc0 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8013cae:	78ba      	ldrb	r2, [r7, #2]
 8013cb0:	78fb      	ldrb	r3, [r7, #3]
 8013cb2:	1ad3      	subs	r3, r2, r3
 8013cb4:	b2db      	uxtb	r3, r3
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8013cbe:	e002      	b.n	8013cc6 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8013cc0:	2305      	movs	r3, #5
 8013cc2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8013cc6:	4b85      	ldr	r3, [pc, #532]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013cc8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013ccc:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8013cd0:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8013cd4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013cdc:	9301      	str	r3, [sp, #4]
 8013cde:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8013ce2:	9300      	str	r3, [sp, #0]
 8013ce4:	4623      	mov	r3, r4
 8013ce6:	f005 fa97 	bl	8019218 <RegionLinkAdrReq>
 8013cea:	4603      	mov	r3, r0
 8013cec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8013cf0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013cf4:	f003 0307 	and.w	r3, r3, #7
 8013cf8:	2b07      	cmp	r3, #7
 8013cfa:	d119      	bne.n	8013d30 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8013cfc:	4b77      	ldr	r3, [pc, #476]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013cfe:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8013d02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8013d06:	429a      	cmp	r2, r3
 8013d08:	da03      	bge.n	8013d12 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8013d0a:	4b74      	ldr	r3, [pc, #464]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8013d12:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8013d16:	4b71      	ldr	r3, [pc, #452]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8013d1c:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8013d20:	4b6e      	ldr	r3, [pc, #440]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8013d26:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8013d2a:	4b6c      	ldr	r3, [pc, #432]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013d2c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8013d30:	2300      	movs	r3, #0
 8013d32:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8013d36:	e00b      	b.n	8013d50 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8013d38:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	4619      	mov	r1, r3
 8013d40:	2003      	movs	r0, #3
 8013d42:	f003 fbff 	bl	8017544 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8013d46:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8013d50:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8013d54:	4a62      	ldr	r2, [pc, #392]	; (8013ee0 <ProcessMacCommands+0x3b8>)
 8013d56:	fba2 2303 	umull	r2, r3, r2, r3
 8013d5a:	089b      	lsrs	r3, r3, #2
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d3e8      	bcc.n	8013d38 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8013d66:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8013d6a:	78fb      	ldrb	r3, [r7, #3]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	3b01      	subs	r3, #1
 8013d72:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8013d74:	78fa      	ldrb	r2, [r7, #3]
 8013d76:	78bb      	ldrb	r3, [r7, #2]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d20a      	bcs.n	8013d92 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8013d7c:	78fb      	ldrb	r3, [r7, #3]
 8013d7e:	1c5a      	adds	r2, r3, #1
 8013d80:	70fa      	strb	r2, [r7, #3]
 8013d82:	461a      	mov	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	4413      	add	r3, r2
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	2b03      	cmp	r3, #3
 8013d8c:	f43f af68 	beq.w	8013c60 <ProcessMacCommands+0x138>
 8013d90:	e000      	b.n	8013d94 <ProcessMacCommands+0x26c>
                            break;
 8013d92:	bf00      	nop

                    if( macIndex < commandsSize )
 8013d94:	78fa      	ldrb	r2, [r7, #3]
 8013d96:	78bb      	ldrb	r3, [r7, #2]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d206      	bcs.n	8013daa <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8013d9c:	78fb      	ldrb	r3, [r7, #3]
 8013d9e:	3b01      	subs	r3, #1
 8013da0:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8013da2:	e002      	b.n	8013daa <ProcessMacCommands+0x282>
                    macIndex += 4;
 8013da4:	78fb      	ldrb	r3, [r7, #3]
 8013da6:	3304      	adds	r3, #4
 8013da8:	70fb      	strb	r3, [r7, #3]
                break;
 8013daa:	bf00      	nop
 8013dac:	e382      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8013dae:	78fb      	ldrb	r3, [r7, #3]
 8013db0:	1c5a      	adds	r2, r3, #1
 8013db2:	70fa      	strb	r2, [r7, #3]
 8013db4:	461a      	mov	r2, r3
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	4413      	add	r3, r2
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	f003 030f 	and.w	r3, r3, #15
 8013dc0:	b2da      	uxtb	r2, r3
 8013dc2:	4b46      	ldr	r3, [pc, #280]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013dc4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8013dc8:	4b44      	ldr	r3, [pc, #272]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013dca:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8013dce:	461a      	mov	r2, r3
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	4093      	lsls	r3, r2
 8013dd4:	b29a      	uxth	r2, r3
 8013dd6:	4b41      	ldr	r3, [pc, #260]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013dd8:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8013ddc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013de0:	2200      	movs	r2, #0
 8013de2:	4619      	mov	r1, r3
 8013de4:	2004      	movs	r0, #4
 8013de6:	f003 fbad 	bl	8017544 <LoRaMacCommandsAddCmd>
                break;
 8013dea:	e363      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8013dec:	2307      	movs	r3, #7
 8013dee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8013df2:	78fb      	ldrb	r3, [r7, #3]
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	4413      	add	r3, r2
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	091b      	lsrs	r3, r3, #4
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	b25b      	sxtb	r3, r3
 8013e00:	f003 0307 	and.w	r3, r3, #7
 8013e04:	b25b      	sxtb	r3, r3
 8013e06:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8013e0a:	78fb      	ldrb	r3, [r7, #3]
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	4413      	add	r3, r2
 8013e10:	781b      	ldrb	r3, [r3, #0]
 8013e12:	b25b      	sxtb	r3, r3
 8013e14:	f003 030f 	and.w	r3, r3, #15
 8013e18:	b25b      	sxtb	r3, r3
 8013e1a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8013e1e:	78fb      	ldrb	r3, [r7, #3]
 8013e20:	3301      	adds	r3, #1
 8013e22:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8013e24:	78fb      	ldrb	r3, [r7, #3]
 8013e26:	1c5a      	adds	r2, r3, #1
 8013e28:	70fa      	strb	r2, [r7, #3]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	4413      	add	r3, r2
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013e34:	78fb      	ldrb	r3, [r7, #3]
 8013e36:	1c5a      	adds	r2, r3, #1
 8013e38:	70fa      	strb	r2, [r7, #3]
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	4413      	add	r3, r2
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	021a      	lsls	r2, r3, #8
 8013e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e46:	4313      	orrs	r3, r2
 8013e48:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8013e4a:	78fb      	ldrb	r3, [r7, #3]
 8013e4c:	1c5a      	adds	r2, r3, #1
 8013e4e:	70fa      	strb	r2, [r7, #3]
 8013e50:	461a      	mov	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	4413      	add	r3, r2
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	041a      	lsls	r2, r3, #16
 8013e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8013e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e62:	2264      	movs	r2, #100	; 0x64
 8013e64:	fb02 f303 	mul.w	r3, r2, r3
 8013e68:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8013e6a:	4b1c      	ldr	r3, [pc, #112]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013e6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e70:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013e74:	4611      	mov	r1, r2
 8013e76:	4618      	mov	r0, r3
 8013e78:	f005 f9e8 	bl	801924c <RegionRxParamSetupReq>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8013e82:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013e86:	f003 0307 	and.w	r3, r3, #7
 8013e8a:	2b07      	cmp	r3, #7
 8013e8c:	d117      	bne.n	8013ebe <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8013e8e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8013e92:	b2da      	uxtb	r2, r3
 8013e94:	4b11      	ldr	r3, [pc, #68]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013e96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8013e9a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8013e9e:	b2da      	uxtb	r2, r3
 8013ea0:	4b0e      	ldr	r3, [pc, #56]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8013ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ea8:	4a0c      	ldr	r2, [pc, #48]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013eaa:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8013eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eae:	4a0b      	ldr	r2, [pc, #44]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013eb0:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8013eb2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8013eb6:	b2da      	uxtb	r2, r3
 8013eb8:	4b08      	ldr	r3, [pc, #32]	; (8013edc <ProcessMacCommands+0x3b4>)
 8013eba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8013ebe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013ec2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8013ec6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013eca:	2201      	movs	r2, #1
 8013ecc:	4619      	mov	r1, r3
 8013ece:	2005      	movs	r0, #5
 8013ed0:	f003 fb38 	bl	8017544 <LoRaMacCommandsAddCmd>
                break;
 8013ed4:	bf00      	nop
 8013ed6:	e2ed      	b.n	80144b4 <ProcessMacCommands+0x98c>
 8013ed8:	200008fc 	.word	0x200008fc
 8013edc:	20000e18 	.word	0x20000e18
 8013ee0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8013ee4:	23ff      	movs	r3, #255	; 0xff
 8013ee6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8013eea:	4bb7      	ldr	r3, [pc, #732]	; (80141c8 <ProcessMacCommands+0x6a0>)
 8013eec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d00d      	beq.n	8013f10 <ProcessMacCommands+0x3e8>
 8013ef4:	4bb4      	ldr	r3, [pc, #720]	; (80141c8 <ProcessMacCommands+0x6a0>)
 8013ef6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d007      	beq.n	8013f10 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8013f00:	4bb1      	ldr	r3, [pc, #708]	; (80141c8 <ProcessMacCommands+0x6a0>)
 8013f02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	4798      	blx	r3
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8013f10:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8013f14:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8013f18:	787b      	ldrb	r3, [r7, #1]
 8013f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8013f24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013f28:	2202      	movs	r2, #2
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	2006      	movs	r0, #6
 8013f2e:	f003 fb09 	bl	8017544 <LoRaMacCommandsAddCmd>
                break;
 8013f32:	e2bf      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8013f34:	2303      	movs	r3, #3
 8013f36:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8013f3a:	78fb      	ldrb	r3, [r7, #3]
 8013f3c:	1c5a      	adds	r2, r3, #1
 8013f3e:	70fa      	strb	r2, [r7, #3]
 8013f40:	461a      	mov	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	4413      	add	r3, r2
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	b25b      	sxtb	r3, r3
 8013f4a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8013f4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013f52:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8013f54:	78fb      	ldrb	r3, [r7, #3]
 8013f56:	1c5a      	adds	r2, r3, #1
 8013f58:	70fa      	strb	r2, [r7, #3]
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	4413      	add	r3, r2
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013f64:	78fb      	ldrb	r3, [r7, #3]
 8013f66:	1c5a      	adds	r2, r3, #1
 8013f68:	70fa      	strb	r2, [r7, #3]
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	4413      	add	r3, r2
 8013f70:	781b      	ldrb	r3, [r3, #0]
 8013f72:	021a      	lsls	r2, r3, #8
 8013f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f76:	4313      	orrs	r3, r2
 8013f78:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8013f7a:	78fb      	ldrb	r3, [r7, #3]
 8013f7c:	1c5a      	adds	r2, r3, #1
 8013f7e:	70fa      	strb	r2, [r7, #3]
 8013f80:	461a      	mov	r2, r3
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	4413      	add	r3, r2
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	041a      	lsls	r2, r3, #16
 8013f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8c:	4313      	orrs	r3, r2
 8013f8e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8013f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f92:	2264      	movs	r2, #100	; 0x64
 8013f94:	fb02 f303 	mul.w	r3, r2, r3
 8013f98:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8013f9e:	78fb      	ldrb	r3, [r7, #3]
 8013fa0:	1c5a      	adds	r2, r3, #1
 8013fa2:	70fa      	strb	r2, [r7, #3]
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	4413      	add	r3, r2
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	b25b      	sxtb	r3, r3
 8013fae:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8013fb2:	4b86      	ldr	r3, [pc, #536]	; (80141cc <ProcessMacCommands+0x6a4>)
 8013fb4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fb8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013fbc:	4611      	mov	r1, r2
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f005 f957 	bl	8019272 <RegionNewChannelReq>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8013fcc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013fd0:	b25b      	sxtb	r3, r3
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	db0a      	blt.n	8013fec <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8013fd6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013fda:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8013fde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	2007      	movs	r0, #7
 8013fe8:	f003 faac 	bl	8017544 <LoRaMacCommandsAddCmd>
                }
                break;
 8013fec:	bf00      	nop
 8013fee:	e261      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8013ff0:	78fb      	ldrb	r3, [r7, #3]
 8013ff2:	1c5a      	adds	r2, r3, #1
 8013ff4:	70fa      	strb	r2, [r7, #3]
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	f003 030f 	and.w	r3, r3, #15
 8014002:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8014006:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801400a:	2b00      	cmp	r3, #0
 801400c:	d104      	bne.n	8014018 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 801400e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8014012:	3301      	adds	r3, #1
 8014014:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8014018:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801401c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014020:	fb02 f303 	mul.w	r3, r2, r3
 8014024:	461a      	mov	r2, r3
 8014026:	4b69      	ldr	r3, [pc, #420]	; (80141cc <ProcessMacCommands+0x6a4>)
 8014028:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801402a:	4b68      	ldr	r3, [pc, #416]	; (80141cc <ProcessMacCommands+0x6a4>)
 801402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801402e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8014032:	4a66      	ldr	r2, [pc, #408]	; (80141cc <ProcessMacCommands+0x6a4>)
 8014034:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8014036:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801403a:	2200      	movs	r2, #0
 801403c:	4619      	mov	r1, r3
 801403e:	2008      	movs	r0, #8
 8014040:	f003 fa80 	bl	8017544 <LoRaMacCommandsAddCmd>
                break;
 8014044:	e236      	b.n	80144b4 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8014046:	78fb      	ldrb	r3, [r7, #3]
 8014048:	1c5a      	adds	r2, r3, #1
 801404a:	70fa      	strb	r2, [r7, #3]
 801404c:	461a      	mov	r2, r3
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	4413      	add	r3, r2
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8014058:	2300      	movs	r3, #0
 801405a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801405e:	2300      	movs	r3, #0
 8014060:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8014064:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8014068:	f003 0320 	and.w	r3, r3, #32
 801406c:	2b00      	cmp	r3, #0
 801406e:	d002      	beq.n	8014076 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8014070:	2301      	movs	r3, #1
 8014072:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8014076:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801407a:	f003 0310 	and.w	r3, r3, #16
 801407e:	2b00      	cmp	r3, #0
 8014080:	d002      	beq.n	8014088 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8014082:	2301      	movs	r3, #1
 8014084:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8014088:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801408c:	f003 030f 	and.w	r3, r3, #15
 8014090:	b2db      	uxtb	r3, r3
 8014092:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8014096:	4b4d      	ldr	r3, [pc, #308]	; (80141cc <ProcessMacCommands+0x6a4>)
 8014098:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801409c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80140a0:	4611      	mov	r1, r2
 80140a2:	4618      	mov	r0, r3
 80140a4:	f005 f8f8 	bl	8019298 <RegionTxParamSetupReq>
 80140a8:	4603      	mov	r3, r0
 80140aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140ae:	d03b      	beq.n	8014128 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80140b0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80140b4:	4b45      	ldr	r3, [pc, #276]	; (80141cc <ProcessMacCommands+0x6a4>)
 80140b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80140ba:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80140be:	4b43      	ldr	r3, [pc, #268]	; (80141cc <ProcessMacCommands+0x6a4>)
 80140c0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80140c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140c8:	461a      	mov	r2, r3
 80140ca:	4b41      	ldr	r3, [pc, #260]	; (80141d0 <ProcessMacCommands+0x6a8>)
 80140cc:	5c9b      	ldrb	r3, [r3, r2]
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7ec fe32 	bl	8000d38 <__aeabi_ui2f>
 80140d4:	4603      	mov	r3, r0
 80140d6:	4a3d      	ldr	r2, [pc, #244]	; (80141cc <ProcessMacCommands+0x6a4>)
 80140d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80140dc:	2302      	movs	r3, #2
 80140de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80140e2:	4b3a      	ldr	r3, [pc, #232]	; (80141cc <ProcessMacCommands+0x6a4>)
 80140e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80140e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140ec:	4b37      	ldr	r3, [pc, #220]	; (80141cc <ProcessMacCommands+0x6a4>)
 80140ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80140f6:	4611      	mov	r1, r2
 80140f8:	4618      	mov	r0, r3
 80140fa:	f004 ffd0 	bl	801909e <RegionGetPhyParam>
 80140fe:	4603      	mov	r3, r0
 8014100:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8014102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014104:	b25a      	sxtb	r2, r3
 8014106:	4b31      	ldr	r3, [pc, #196]	; (80141cc <ProcessMacCommands+0x6a4>)
 8014108:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801410c:	4293      	cmp	r3, r2
 801410e:	bfb8      	it	lt
 8014110:	4613      	movlt	r3, r2
 8014112:	b25a      	sxtb	r2, r3
 8014114:	4b2d      	ldr	r3, [pc, #180]	; (80141cc <ProcessMacCommands+0x6a4>)
 8014116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801411a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801411e:	2200      	movs	r2, #0
 8014120:	4619      	mov	r1, r3
 8014122:	2009      	movs	r0, #9
 8014124:	f003 fa0e 	bl	8017544 <LoRaMacCommandsAddCmd>
                }
                break;
 8014128:	bf00      	nop
 801412a:	e1c3      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801412c:	2303      	movs	r3, #3
 801412e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8014132:	78fb      	ldrb	r3, [r7, #3]
 8014134:	1c5a      	adds	r2, r3, #1
 8014136:	70fa      	strb	r2, [r7, #3]
 8014138:	461a      	mov	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	4413      	add	r3, r2
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8014144:	78fb      	ldrb	r3, [r7, #3]
 8014146:	1c5a      	adds	r2, r3, #1
 8014148:	70fa      	strb	r2, [r7, #3]
 801414a:	461a      	mov	r2, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	4413      	add	r3, r2
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8014154:	78fb      	ldrb	r3, [r7, #3]
 8014156:	1c5a      	adds	r2, r3, #1
 8014158:	70fa      	strb	r2, [r7, #3]
 801415a:	461a      	mov	r2, r3
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	4413      	add	r3, r2
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	021a      	lsls	r2, r3, #8
 8014164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014166:	4313      	orrs	r3, r2
 8014168:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801416a:	78fb      	ldrb	r3, [r7, #3]
 801416c:	1c5a      	adds	r2, r3, #1
 801416e:	70fa      	strb	r2, [r7, #3]
 8014170:	461a      	mov	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	4413      	add	r3, r2
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	041a      	lsls	r2, r3, #16
 801417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417c:	4313      	orrs	r3, r2
 801417e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	2264      	movs	r2, #100	; 0x64
 8014184:	fb02 f303 	mul.w	r3, r2, r3
 8014188:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801418a:	4b10      	ldr	r3, [pc, #64]	; (80141cc <ProcessMacCommands+0x6a4>)
 801418c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014190:	f107 0220 	add.w	r2, r7, #32
 8014194:	4611      	mov	r1, r2
 8014196:	4618      	mov	r0, r3
 8014198:	f005 f891 	bl	80192be <RegionDlChannelReq>
 801419c:	4603      	mov	r3, r0
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80141a4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80141a8:	b25b      	sxtb	r3, r3
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	db0a      	blt.n	80141c4 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 80141ae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80141b2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80141b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80141ba:	2201      	movs	r2, #1
 80141bc:	4619      	mov	r1, r3
 80141be:	200a      	movs	r0, #10
 80141c0:	f003 f9c0 	bl	8017544 <LoRaMacCommandsAddCmd>
                }
                break;
 80141c4:	bf00      	nop
 80141c6:	e175      	b.n	80144b4 <ProcessMacCommands+0x98c>
 80141c8:	200008fc 	.word	0x200008fc
 80141cc:	20000e18 	.word	0x20000e18
 80141d0:	08021d60 	.word	0x08021d60
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80141d4:	2009      	movs	r0, #9
 80141d6:	f003 fced 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b00      	cmp	r3, #0
 80141de:	f000 8084 	beq.w	80142ea <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80141e2:	2109      	movs	r1, #9
 80141e4:	2000      	movs	r0, #0
 80141e6:	f003 fc59 	bl	8017a9c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80141ea:	f107 0318 	add.w	r3, r7, #24
 80141ee:	2200      	movs	r2, #0
 80141f0:	601a      	str	r2, [r3, #0]
 80141f2:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80141f4:	f107 0310 	add.w	r3, r7, #16
 80141f8:	2200      	movs	r2, #0
 80141fa:	601a      	str	r2, [r3, #0]
 80141fc:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80141fe:	f107 0308 	add.w	r3, r7, #8
 8014202:	2200      	movs	r2, #0
 8014204:	601a      	str	r2, [r3, #0]
 8014206:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8014208:	78fb      	ldrb	r3, [r7, #3]
 801420a:	1c5a      	adds	r2, r3, #1
 801420c:	70fa      	strb	r2, [r7, #3]
 801420e:	461a      	mov	r2, r3
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	4413      	add	r3, r2
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8014218:	78fb      	ldrb	r3, [r7, #3]
 801421a:	1c5a      	adds	r2, r3, #1
 801421c:	70fa      	strb	r2, [r7, #3]
 801421e:	461a      	mov	r2, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	4413      	add	r3, r2
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	021a      	lsls	r2, r3, #8
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	4313      	orrs	r3, r2
 801422c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801422e:	78fb      	ldrb	r3, [r7, #3]
 8014230:	1c5a      	adds	r2, r3, #1
 8014232:	70fa      	strb	r2, [r7, #3]
 8014234:	461a      	mov	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	4413      	add	r3, r2
 801423a:	781b      	ldrb	r3, [r3, #0]
 801423c:	041a      	lsls	r2, r3, #16
 801423e:	69bb      	ldr	r3, [r7, #24]
 8014240:	4313      	orrs	r3, r2
 8014242:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8014244:	78fb      	ldrb	r3, [r7, #3]
 8014246:	1c5a      	adds	r2, r3, #1
 8014248:	70fa      	strb	r2, [r7, #3]
 801424a:	461a      	mov	r2, r3
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	4413      	add	r3, r2
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	061a      	lsls	r2, r3, #24
 8014254:	69bb      	ldr	r3, [r7, #24]
 8014256:	4313      	orrs	r3, r2
 8014258:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801425a:	78fb      	ldrb	r3, [r7, #3]
 801425c:	1c5a      	adds	r2, r3, #1
 801425e:	70fa      	strb	r2, [r7, #3]
 8014260:	461a      	mov	r2, r3
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	4413      	add	r3, r2
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	b21b      	sxth	r3, r3
 801426a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801426c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8014270:	461a      	mov	r2, r3
 8014272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014276:	fb02 f303 	mul.w	r3, r2, r3
 801427a:	121b      	asrs	r3, r3, #8
 801427c:	b21b      	sxth	r3, r3
 801427e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8014280:	f107 0310 	add.w	r3, r7, #16
 8014284:	f107 0218 	add.w	r2, r7, #24
 8014288:	e892 0003 	ldmia.w	r2, {r0, r1}
 801428c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8014290:	693a      	ldr	r2, [r7, #16]
 8014292:	4b8f      	ldr	r3, [pc, #572]	; (80144d0 <ProcessMacCommands+0x9a8>)
 8014294:	4413      	add	r3, r2
 8014296:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8014298:	f107 0308 	add.w	r3, r7, #8
 801429c:	4618      	mov	r0, r3
 801429e:	f00a fee9 	bl	801f074 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80142a2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80142a6:	4b8b      	ldr	r3, [pc, #556]	; (80144d4 <ProcessMacCommands+0x9ac>)
 80142a8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80142ac:	9200      	str	r2, [sp, #0]
 80142ae:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80142b2:	f107 0210 	add.w	r2, r7, #16
 80142b6:	ca06      	ldmia	r2, {r1, r2}
 80142b8:	f00a fe75 	bl	801efa6 <SysTimeSub>
 80142bc:	f107 0010 	add.w	r0, r7, #16
 80142c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142c2:	9300      	str	r3, [sp, #0]
 80142c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142c6:	f107 0208 	add.w	r2, r7, #8
 80142ca:	ca06      	ldmia	r2, {r1, r2}
 80142cc:	f00a fe32 	bl	801ef34 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80142d0:	f107 0310 	add.w	r3, r7, #16
 80142d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142d8:	f00a fe9e 	bl	801f018 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80142dc:	f002 ffd0 	bl	8017280 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80142e0:	4b7c      	ldr	r3, [pc, #496]	; (80144d4 <ProcessMacCommands+0x9ac>)
 80142e2:	2201      	movs	r2, #1
 80142e4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80142e8:	e0e4      	b.n	80144b4 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80142ea:	4b7a      	ldr	r3, [pc, #488]	; (80144d4 <ProcessMacCommands+0x9ac>)
 80142ec:	2200      	movs	r2, #0
 80142ee:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 80142f2:	e0df      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80142f4:	200c      	movs	r0, #12
 80142f6:	f003 fc5d 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f000 80d9 	beq.w	80144b4 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8014302:	210c      	movs	r1, #12
 8014304:	2000      	movs	r0, #0
 8014306:	f003 fbc9 	bl	8017a9c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801430a:	4b72      	ldr	r3, [pc, #456]	; (80144d4 <ProcessMacCommands+0x9ac>)
 801430c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8014310:	2b04      	cmp	r3, #4
 8014312:	f000 80cf 	beq.w	80144b4 <ProcessMacCommands+0x98c>
 8014316:	4b6f      	ldr	r3, [pc, #444]	; (80144d4 <ProcessMacCommands+0x9ac>)
 8014318:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801431c:	2b05      	cmp	r3, #5
 801431e:	f000 80c9 	beq.w	80144b4 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8014322:	f002 ff8e 	bl	8017242 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8014326:	e0c5      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8014328:	2303      	movs	r3, #3
 801432a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 801432e:	2300      	movs	r3, #0
 8014330:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8014332:	78fb      	ldrb	r3, [r7, #3]
 8014334:	1c5a      	adds	r2, r3, #1
 8014336:	70fa      	strb	r2, [r7, #3]
 8014338:	461a      	mov	r2, r3
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	4413      	add	r3, r2
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8014342:	78fb      	ldrb	r3, [r7, #3]
 8014344:	1c5a      	adds	r2, r3, #1
 8014346:	70fa      	strb	r2, [r7, #3]
 8014348:	461a      	mov	r2, r3
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	4413      	add	r3, r2
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	021b      	lsls	r3, r3, #8
 8014352:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014354:	4313      	orrs	r3, r2
 8014356:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014358:	78fb      	ldrb	r3, [r7, #3]
 801435a:	1c5a      	adds	r2, r3, #1
 801435c:	70fa      	strb	r2, [r7, #3]
 801435e:	461a      	mov	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	4413      	add	r3, r2
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	041b      	lsls	r3, r3, #16
 8014368:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801436a:	4313      	orrs	r3, r2
 801436c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801436e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014370:	2264      	movs	r2, #100	; 0x64
 8014372:	fb02 f303 	mul.w	r3, r2, r3
 8014376:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8014378:	78fb      	ldrb	r3, [r7, #3]
 801437a:	1c5a      	adds	r2, r3, #1
 801437c:	70fa      	strb	r2, [r7, #3]
 801437e:	461a      	mov	r2, r3
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	4413      	add	r3, r2
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	f003 030f 	and.w	r3, r3, #15
 801438a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801438e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014392:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014394:	4618      	mov	r0, r3
 8014396:	f002 ff5a 	bl	801724e <LoRaMacClassBPingSlotChannelReq>
 801439a:	4603      	mov	r3, r0
 801439c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80143a0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80143a4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80143a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80143ac:	2201      	movs	r2, #1
 80143ae:	4619      	mov	r1, r3
 80143b0:	2011      	movs	r0, #17
 80143b2:	f003 f8c7 	bl	8017544 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80143b6:	e07d      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80143b8:	200d      	movs	r0, #13
 80143ba:	f003 fbfb 	bl	8017bb4 <LoRaMacConfirmQueueIsCmdActive>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d077      	beq.n	80144b4 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80143c4:	210d      	movs	r1, #13
 80143c6:	2000      	movs	r0, #0
 80143c8:	f003 fb68 	bl	8017a9c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80143cc:	2300      	movs	r3, #0
 80143ce:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80143d2:	2300      	movs	r3, #0
 80143d4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80143d8:	78fb      	ldrb	r3, [r7, #3]
 80143da:	1c5a      	adds	r2, r3, #1
 80143dc:	70fa      	strb	r2, [r7, #3]
 80143de:	461a      	mov	r2, r3
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	4413      	add	r3, r2
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80143ea:	78fb      	ldrb	r3, [r7, #3]
 80143ec:	1c5a      	adds	r2, r3, #1
 80143ee:	70fa      	strb	r2, [r7, #3]
 80143f0:	461a      	mov	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	4413      	add	r3, r2
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	021b      	lsls	r3, r3, #8
 80143fa:	b21a      	sxth	r2, r3
 80143fc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8014400:	4313      	orrs	r3, r2
 8014402:	b21b      	sxth	r3, r3
 8014404:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8014408:	78fb      	ldrb	r3, [r7, #3]
 801440a:	1c5a      	adds	r2, r3, #1
 801440c:	70fa      	strb	r2, [r7, #3]
 801440e:	461a      	mov	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	4413      	add	r3, r2
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801441a:	4b2f      	ldr	r3, [pc, #188]	; (80144d8 <ProcessMacCommands+0x9b0>)
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8014422:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8014426:	4618      	mov	r0, r3
 8014428:	f002 ff1d 	bl	8017266 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801442c:	e042      	b.n	80144b4 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801442e:	2300      	movs	r3, #0
 8014430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8014434:	78fb      	ldrb	r3, [r7, #3]
 8014436:	1c5a      	adds	r2, r3, #1
 8014438:	70fa      	strb	r2, [r7, #3]
 801443a:	461a      	mov	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	4413      	add	r3, r2
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8014446:	78fb      	ldrb	r3, [r7, #3]
 8014448:	1c5a      	adds	r2, r3, #1
 801444a:	70fa      	strb	r2, [r7, #3]
 801444c:	461a      	mov	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	4413      	add	r3, r2
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	021b      	lsls	r3, r3, #8
 8014456:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801445a:	4313      	orrs	r3, r2
 801445c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014460:	78fb      	ldrb	r3, [r7, #3]
 8014462:	1c5a      	adds	r2, r3, #1
 8014464:	70fa      	strb	r2, [r7, #3]
 8014466:	461a      	mov	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	4413      	add	r3, r2
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	041b      	lsls	r3, r3, #16
 8014470:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014474:	4313      	orrs	r3, r2
 8014476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 801447a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801447e:	2264      	movs	r2, #100	; 0x64
 8014480:	fb02 f303 	mul.w	r3, r2, r3
 8014484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8014488:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801448c:	f002 fefe 	bl	801728c <LoRaMacClassBBeaconFreqReq>
 8014490:	4603      	mov	r3, r0
 8014492:	2b00      	cmp	r3, #0
 8014494:	d003      	beq.n	801449e <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8014496:	2301      	movs	r3, #1
 8014498:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801449c:	e002      	b.n	80144a4 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801449e:	2300      	movs	r3, #0
 80144a0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80144a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80144a8:	2201      	movs	r2, #1
 80144aa:	4619      	mov	r1, r3
 80144ac:	2013      	movs	r0, #19
 80144ae:	f003 f849 	bl	8017544 <LoRaMacCommandsAddCmd>
                }
                break;
 80144b2:	bf00      	nop
    while( macIndex < commandsSize )
 80144b4:	78fa      	ldrb	r2, [r7, #3]
 80144b6:	78bb      	ldrb	r3, [r7, #2]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	f4ff ab57 	bcc.w	8013b6c <ProcessMacCommands+0x44>
 80144be:	e004      	b.n	80144ca <ProcessMacCommands+0x9a2>
        return;
 80144c0:	bf00      	nop
 80144c2:	e002      	b.n	80144ca <ProcessMacCommands+0x9a2>
            return;
 80144c4:	bf00      	nop
 80144c6:	e000      	b.n	80144ca <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80144c8:	bf00      	nop
        }
    }
}
 80144ca:	378c      	adds	r7, #140	; 0x8c
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd90      	pop	{r4, r7, pc}
 80144d0:	12d53d80 	.word	0x12d53d80
 80144d4:	200008fc 	.word	0x200008fc
 80144d8:	20001a48 	.word	0x20001a48

080144dc <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b08e      	sub	sp, #56	; 0x38
 80144e0:	af02      	add	r7, sp, #8
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	607a      	str	r2, [r7, #4]
 80144e6:	461a      	mov	r2, r3
 80144e8:	460b      	mov	r3, r1
 80144ea:	72fb      	strb	r3, [r7, #11]
 80144ec:	4613      	mov	r3, r2
 80144ee:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144f0:	2303      	movs	r3, #3
 80144f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80144f6:	4b66      	ldr	r3, [pc, #408]	; (8014690 <Send+0x1b4>)
 80144f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80144fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8014500:	4b63      	ldr	r3, [pc, #396]	; (8014690 <Send+0x1b4>)
 8014502:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014506:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801450a:	4b61      	ldr	r3, [pc, #388]	; (8014690 <Send+0x1b4>)
 801450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801450e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8014510:	4b5f      	ldr	r3, [pc, #380]	; (8014690 <Send+0x1b4>)
 8014512:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014516:	2b00      	cmp	r3, #0
 8014518:	d101      	bne.n	801451e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801451a:	2307      	movs	r3, #7
 801451c:	e0b4      	b.n	8014688 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801451e:	4b5c      	ldr	r3, [pc, #368]	; (8014690 <Send+0x1b4>)
 8014520:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8014524:	2b00      	cmp	r3, #0
 8014526:	d102      	bne.n	801452e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014528:	4b59      	ldr	r3, [pc, #356]	; (8014690 <Send+0x1b4>)
 801452a:	2200      	movs	r2, #0
 801452c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801452e:	2300      	movs	r3, #0
 8014530:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8014534:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014538:	f36f 0303 	bfc	r3, #0, #4
 801453c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8014540:	4b53      	ldr	r3, [pc, #332]	; (8014690 <Send+0x1b4>)
 8014542:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8014546:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801454a:	f362 13c7 	bfi	r3, r2, #7, #1
 801454e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8014552:	4b4f      	ldr	r3, [pc, #316]	; (8014690 <Send+0x1b4>)
 8014554:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014558:	2b01      	cmp	r3, #1
 801455a:	d106      	bne.n	801456a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801455c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014560:	f043 0310 	orr.w	r3, r3, #16
 8014564:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8014568:	e005      	b.n	8014576 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801456a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801456e:	f36f 1304 	bfc	r3, #4, #1
 8014572:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8014576:	4b46      	ldr	r3, [pc, #280]	; (8014690 <Send+0x1b4>)
 8014578:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801457c:	2b00      	cmp	r3, #0
 801457e:	d005      	beq.n	801458c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8014580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014584:	f043 0320 	orr.w	r3, r3, #32
 8014588:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 801458c:	2301      	movs	r3, #1
 801458e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8014590:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014594:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014598:	b2db      	uxtb	r3, r3
 801459a:	2b00      	cmp	r3, #0
 801459c:	bf14      	ite	ne
 801459e:	2301      	movne	r3, #1
 80145a0:	2300      	moveq	r3, #0
 80145a2:	b2db      	uxtb	r3, r3
 80145a4:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145a6:	4b3a      	ldr	r3, [pc, #232]	; (8014690 <Send+0x1b4>)
 80145a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145aa:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80145ac:	4b38      	ldr	r3, [pc, #224]	; (8014690 <Send+0x1b4>)
 80145ae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80145b2:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80145b4:	4b36      	ldr	r3, [pc, #216]	; (8014690 <Send+0x1b4>)
 80145b6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80145ba:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80145bc:	4b34      	ldr	r3, [pc, #208]	; (8014690 <Send+0x1b4>)
 80145be:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80145c2:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80145c6:	4b32      	ldr	r3, [pc, #200]	; (8014690 <Send+0x1b4>)
 80145c8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80145cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80145d0:	4b2f      	ldr	r3, [pc, #188]	; (8014690 <Send+0x1b4>)
 80145d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80145d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80145da:	4b2d      	ldr	r3, [pc, #180]	; (8014690 <Send+0x1b4>)
 80145dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80145e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80145e4:	4b2a      	ldr	r3, [pc, #168]	; (8014690 <Send+0x1b4>)
 80145e6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80145ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80145ee:	f107 0014 	add.w	r0, r7, #20
 80145f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	4b26      	ldr	r3, [pc, #152]	; (8014694 <Send+0x1b8>)
 80145fa:	4a27      	ldr	r2, [pc, #156]	; (8014698 <Send+0x1bc>)
 80145fc:	4927      	ldr	r1, [pc, #156]	; (801469c <Send+0x1c0>)
 80145fe:	f002 fcbf 	bl	8016f80 <LoRaMacAdrCalcNext>
 8014602:	4603      	mov	r3, r0
 8014604:	461a      	mov	r2, r3
 8014606:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801460a:	f362 1386 	bfi	r3, r2, #6, #1
 801460e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8014612:	7afa      	ldrb	r2, [r7, #11]
 8014614:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8014618:	893b      	ldrh	r3, [r7, #8]
 801461a:	9300      	str	r3, [sp, #0]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	68f8      	ldr	r0, [r7, #12]
 8014620:	f000 fc72 	bl	8014f08 <PrepareFrame>
 8014624:	4603      	mov	r3, r0
 8014626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801462a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801462e:	2b00      	cmp	r3, #0
 8014630:	d003      	beq.n	801463a <Send+0x15e>
 8014632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014636:	2b0a      	cmp	r3, #10
 8014638:	d107      	bne.n	801464a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801463a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801463e:	4618      	mov	r0, r3
 8014640:	f000 f962 	bl	8014908 <ScheduleTx>
 8014644:	4603      	mov	r3, r0
 8014646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801464a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00a      	beq.n	8014668 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8014652:	4a0f      	ldr	r2, [pc, #60]	; (8014690 <Send+0x1b4>)
 8014654:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014658:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801465c:	4a0c      	ldr	r2, [pc, #48]	; (8014690 <Send+0x1b4>)
 801465e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014662:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8014666:	e00d      	b.n	8014684 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8014668:	4b09      	ldr	r3, [pc, #36]	; (8014690 <Send+0x1b4>)
 801466a:	2200      	movs	r2, #0
 801466c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8014670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014672:	4a07      	ldr	r2, [pc, #28]	; (8014690 <Send+0x1b4>)
 8014674:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8014676:	f003 f80b 	bl	8017690 <LoRaMacCommandsRemoveNoneStickyCmds>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d001      	beq.n	8014684 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014680:	2313      	movs	r3, #19
 8014682:	e001      	b.n	8014688 <Send+0x1ac>
        }
    }
    return status;
 8014684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014688:	4618      	mov	r0, r3
 801468a:	3730      	adds	r7, #48	; 0x30
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	20000e18 	.word	0x20000e18
 8014694:	20000e80 	.word	0x20000e80
 8014698:	20000e50 	.word	0x20000e50
 801469c:	20000e51 	.word	0x20000e51

080146a0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	4603      	mov	r3, r0
 80146a8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80146aa:	2300      	movs	r3, #0
 80146ac:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80146ae:	2300      	movs	r3, #0
 80146b0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80146b2:	2301      	movs	r3, #1
 80146b4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80146b6:	79fb      	ldrb	r3, [r7, #7]
 80146b8:	2bff      	cmp	r3, #255	; 0xff
 80146ba:	d11f      	bne.n	80146fc <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80146bc:	2000      	movs	r0, #0
 80146be:	f7ff f8f9 	bl	80138b4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80146c2:	4b15      	ldr	r3, [pc, #84]	; (8014718 <SendReJoinReq+0x78>)
 80146c4:	2200      	movs	r2, #0
 80146c6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80146ca:	4b13      	ldr	r3, [pc, #76]	; (8014718 <SendReJoinReq+0x78>)
 80146cc:	4a13      	ldr	r2, [pc, #76]	; (801471c <SendReJoinReq+0x7c>)
 80146ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80146d2:	4b11      	ldr	r3, [pc, #68]	; (8014718 <SendReJoinReq+0x78>)
 80146d4:	22ff      	movs	r2, #255	; 0xff
 80146d6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80146da:	7b3b      	ldrb	r3, [r7, #12]
 80146dc:	f36f 1347 	bfc	r3, #5, #3
 80146e0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80146e2:	7b3a      	ldrb	r2, [r7, #12]
 80146e4:	4b0c      	ldr	r3, [pc, #48]	; (8014718 <SendReJoinReq+0x78>)
 80146e6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80146ea:	480d      	ldr	r0, [pc, #52]	; (8014720 <SendReJoinReq+0x80>)
 80146ec:	f7fb ff38 	bl	8010560 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80146f0:	480c      	ldr	r0, [pc, #48]	; (8014724 <SendReJoinReq+0x84>)
 80146f2:	f7fb ff05 	bl	8010500 <SecureElementGetDevEui>

            allowDelayedTx = false;
 80146f6:	2300      	movs	r3, #0
 80146f8:	73fb      	strb	r3, [r7, #15]

            break;
 80146fa:	e002      	b.n	8014702 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80146fc:	2302      	movs	r3, #2
 80146fe:	73bb      	strb	r3, [r7, #14]
            break;
 8014700:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8014702:	7bfb      	ldrb	r3, [r7, #15]
 8014704:	4618      	mov	r0, r3
 8014706:	f000 f8ff 	bl	8014908 <ScheduleTx>
 801470a:	4603      	mov	r3, r0
 801470c:	73bb      	strb	r3, [r7, #14]
    return status;
 801470e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014710:	4618      	mov	r0, r3
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	200008fc 	.word	0x200008fc
 801471c:	200008fe 	.word	0x200008fe
 8014720:	20000a0a 	.word	0x20000a0a
 8014724:	20000a12 	.word	0x20000a12

08014728 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801472c:	f002 fd38 	bl	80171a0 <LoRaMacClassBIsBeaconExpected>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8014736:	230e      	movs	r3, #14
 8014738:	e013      	b.n	8014762 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801473a:	4b0b      	ldr	r3, [pc, #44]	; (8014768 <CheckForClassBCollision+0x40>)
 801473c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014740:	2b01      	cmp	r3, #1
 8014742:	d10d      	bne.n	8014760 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8014744:	f002 fd33 	bl	80171ae <LoRaMacClassBIsPingExpected>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d001      	beq.n	8014752 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801474e:	230f      	movs	r3, #15
 8014750:	e007      	b.n	8014762 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8014752:	f002 fd33 	bl	80171bc <LoRaMacClassBIsMulticastExpected>
 8014756:	4603      	mov	r3, r0
 8014758:	2b00      	cmp	r3, #0
 801475a:	d001      	beq.n	8014760 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801475c:	230f      	movs	r3, #15
 801475e:	e000      	b.n	8014762 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8014760:	2300      	movs	r3, #0
}
 8014762:	4618      	mov	r0, r3
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	20000e18 	.word	0x20000e18

0801476c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801476c:	b590      	push	{r4, r7, lr}
 801476e:	b083      	sub	sp, #12
 8014770:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014772:	4b2d      	ldr	r3, [pc, #180]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 8014774:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8014778:	4b2b      	ldr	r3, [pc, #172]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 801477a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801477e:	4b2a      	ldr	r3, [pc, #168]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 8014780:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8014784:	4b28      	ldr	r3, [pc, #160]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 8014786:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801478a:	4b27      	ldr	r3, [pc, #156]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 801478c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8014790:	b25b      	sxtb	r3, r3
 8014792:	f004 fdd9 	bl	8019348 <RegionApplyDrOffset>
 8014796:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014798:	b259      	sxtb	r1, r3
 801479a:	4b23      	ldr	r3, [pc, #140]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 801479c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80147a0:	4b21      	ldr	r3, [pc, #132]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147a4:	4821      	ldr	r0, [pc, #132]	; (801482c <ComputeRxWindowParameters+0xc0>)
 80147a6:	9000      	str	r0, [sp, #0]
 80147a8:	4620      	mov	r0, r4
 80147aa:	f004 fcef 	bl	801918c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80147ae:	4b1e      	ldr	r3, [pc, #120]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147b0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80147b4:	4b1c      	ldr	r3, [pc, #112]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80147ba:	b259      	sxtb	r1, r3
 80147bc:	4b1a      	ldr	r3, [pc, #104]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147be:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80147c2:	4b19      	ldr	r3, [pc, #100]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147c6:	4c1a      	ldr	r4, [pc, #104]	; (8014830 <ComputeRxWindowParameters+0xc4>)
 80147c8:	9400      	str	r4, [sp, #0]
 80147ca:	f004 fcdf 	bl	801918c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80147ce:	4b16      	ldr	r3, [pc, #88]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80147d2:	4a18      	ldr	r2, [pc, #96]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 80147d4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80147d8:	4413      	add	r3, r2
 80147da:	4a16      	ldr	r2, [pc, #88]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 80147dc:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80147e0:	4b11      	ldr	r3, [pc, #68]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80147e4:	4a13      	ldr	r2, [pc, #76]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 80147e6:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80147ea:	4413      	add	r3, r2
 80147ec:	4a11      	ldr	r2, [pc, #68]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 80147ee:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80147f2:	4b10      	ldr	r3, [pc, #64]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 80147f4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80147f8:	2b04      	cmp	r3, #4
 80147fa:	d011      	beq.n	8014820 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80147fc:	4b0a      	ldr	r3, [pc, #40]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 80147fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014800:	4a0c      	ldr	r2, [pc, #48]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 8014802:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8014806:	4413      	add	r3, r2
 8014808:	4a0a      	ldr	r2, [pc, #40]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 801480a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801480e:	4b06      	ldr	r3, [pc, #24]	; (8014828 <ComputeRxWindowParameters+0xbc>)
 8014810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014812:	4a08      	ldr	r2, [pc, #32]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 8014814:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8014818:	4413      	add	r3, r2
 801481a:	4a06      	ldr	r2, [pc, #24]	; (8014834 <ComputeRxWindowParameters+0xc8>)
 801481c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8014820:	bf00      	nop
 8014822:	3704      	adds	r7, #4
 8014824:	46bd      	mov	sp, r7
 8014826:	bd90      	pop	{r4, r7, pc}
 8014828:	20000e18 	.word	0x20000e18
 801482c:	20000cb4 	.word	0x20000cb4
 8014830:	20000ccc 	.word	0x20000ccc
 8014834:	200008fc 	.word	0x200008fc

08014838 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801483e:	2300      	movs	r3, #0
 8014840:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8014842:	4b13      	ldr	r3, [pc, #76]	; (8014890 <VerifyTxFrame+0x58>)
 8014844:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014848:	2b00      	cmp	r3, #0
 801484a:	d01b      	beq.n	8014884 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801484c:	1d3b      	adds	r3, r7, #4
 801484e:	4618      	mov	r0, r3
 8014850:	f002 ff6e 	bl	8017730 <LoRaMacCommandsGetSizeSerializedCmds>
 8014854:	4603      	mov	r3, r0
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801485a:	2313      	movs	r3, #19
 801485c:	e013      	b.n	8014886 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801485e:	4b0d      	ldr	r3, [pc, #52]	; (8014894 <VerifyTxFrame+0x5c>)
 8014860:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8014864:	4a0a      	ldr	r2, [pc, #40]	; (8014890 <VerifyTxFrame+0x58>)
 8014866:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801486a:	687a      	ldr	r2, [r7, #4]
 801486c:	b2d2      	uxtb	r2, r2
 801486e:	4618      	mov	r0, r3
 8014870:	f7ff f932 	bl	8013ad8 <ValidatePayloadLength>
 8014874:	4603      	mov	r3, r0
 8014876:	f083 0301 	eor.w	r3, r3, #1
 801487a:	b2db      	uxtb	r3, r3
 801487c:	2b00      	cmp	r3, #0
 801487e:	d001      	beq.n	8014884 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8014880:	2308      	movs	r3, #8
 8014882:	e000      	b.n	8014886 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8014884:	2300      	movs	r3, #0
}
 8014886:	4618      	mov	r0, r3
 8014888:	3708      	adds	r7, #8
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	20000e18 	.word	0x20000e18
 8014894:	200008fc 	.word	0x200008fc

08014898 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801489e:	4b18      	ldr	r3, [pc, #96]	; (8014900 <SerializeTxFrame+0x68>)
 80148a0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d002      	beq.n	80148ae <SerializeTxFrame+0x16>
 80148a8:	2b04      	cmp	r3, #4
 80148aa:	d011      	beq.n	80148d0 <SerializeTxFrame+0x38>
 80148ac:	e021      	b.n	80148f2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80148ae:	4815      	ldr	r0, [pc, #84]	; (8014904 <SerializeTxFrame+0x6c>)
 80148b0:	f004 fa6c 	bl	8018d8c <LoRaMacSerializerJoinRequest>
 80148b4:	4603      	mov	r3, r0
 80148b6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80148b8:	79fb      	ldrb	r3, [r7, #7]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d001      	beq.n	80148c2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80148be:	2311      	movs	r3, #17
 80148c0:	e01a      	b.n	80148f8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80148c2:	4b0f      	ldr	r3, [pc, #60]	; (8014900 <SerializeTxFrame+0x68>)
 80148c4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	4b0d      	ldr	r3, [pc, #52]	; (8014900 <SerializeTxFrame+0x68>)
 80148cc:	801a      	strh	r2, [r3, #0]
            break;
 80148ce:	e012      	b.n	80148f6 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80148d0:	480c      	ldr	r0, [pc, #48]	; (8014904 <SerializeTxFrame+0x6c>)
 80148d2:	f004 fadd 	bl	8018e90 <LoRaMacSerializerData>
 80148d6:	4603      	mov	r3, r0
 80148d8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80148da:	79fb      	ldrb	r3, [r7, #7]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d001      	beq.n	80148e4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80148e0:	2311      	movs	r3, #17
 80148e2:	e009      	b.n	80148f8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80148e4:	4b06      	ldr	r3, [pc, #24]	; (8014900 <SerializeTxFrame+0x68>)
 80148e6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80148ea:	b29a      	uxth	r2, r3
 80148ec:	4b04      	ldr	r3, [pc, #16]	; (8014900 <SerializeTxFrame+0x68>)
 80148ee:	801a      	strh	r2, [r3, #0]
            break;
 80148f0:	e001      	b.n	80148f6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80148f2:	2303      	movs	r3, #3
 80148f4:	e000      	b.n	80148f8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80148f6:	2300      	movs	r3, #0
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	200008fc 	.word	0x200008fc
 8014904:	20000a04 	.word	0x20000a04

08014908 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b090      	sub	sp, #64	; 0x40
 801490c:	af02      	add	r7, sp, #8
 801490e:	4603      	mov	r3, r0
 8014910:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014912:	2303      	movs	r3, #3
 8014914:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8014918:	f7ff ff06 	bl	8014728 <CheckForClassBCollision>
 801491c:	4603      	mov	r3, r0
 801491e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8014922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014926:	2b00      	cmp	r3, #0
 8014928:	d002      	beq.n	8014930 <ScheduleTx+0x28>
    {
        return status;
 801492a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801492e:	e092      	b.n	8014a56 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8014930:	f000 f8f8 	bl	8014b24 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8014934:	f7ff ffb0 	bl	8014898 <SerializeTxFrame>
 8014938:	4603      	mov	r3, r0
 801493a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801493e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014942:	2b00      	cmp	r3, #0
 8014944:	d002      	beq.n	801494c <ScheduleTx+0x44>
    {
        return status;
 8014946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801494a:	e084      	b.n	8014a56 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801494c:	4b44      	ldr	r3, [pc, #272]	; (8014a60 <ScheduleTx+0x158>)
 801494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014950:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014952:	4b43      	ldr	r3, [pc, #268]	; (8014a60 <ScheduleTx+0x158>)
 8014954:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014958:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801495a:	4b41      	ldr	r3, [pc, #260]	; (8014a60 <ScheduleTx+0x158>)
 801495c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8014960:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8014962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014966:	4618      	mov	r0, r3
 8014968:	f00a fbbc 	bl	801f0e4 <SysTimeGetMcuTime>
 801496c:	4638      	mov	r0, r7
 801496e:	4b3c      	ldr	r3, [pc, #240]	; (8014a60 <ScheduleTx+0x158>)
 8014970:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8014974:	9200      	str	r2, [sp, #0]
 8014976:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801497a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801497e:	ca06      	ldmia	r2, {r1, r2}
 8014980:	f00a fb11 	bl	801efa6 <SysTimeSub>
 8014984:	f107 0320 	add.w	r3, r7, #32
 8014988:	463a      	mov	r2, r7
 801498a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801498e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8014992:	4b33      	ldr	r3, [pc, #204]	; (8014a60 <ScheduleTx+0x158>)
 8014994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014996:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8014998:	2300      	movs	r3, #0
 801499a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801499e:	2301      	movs	r3, #1
 80149a0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80149a2:	4b30      	ldr	r3, [pc, #192]	; (8014a64 <ScheduleTx+0x15c>)
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80149a8:	4b2d      	ldr	r3, [pc, #180]	; (8014a60 <ScheduleTx+0x158>)
 80149aa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d104      	bne.n	80149bc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80149b2:	2301      	movs	r3, #1
 80149b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80149b8:	2300      	movs	r3, #0
 80149ba:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80149bc:	4b28      	ldr	r3, [pc, #160]	; (8014a60 <ScheduleTx+0x158>)
 80149be:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80149c2:	f107 0114 	add.w	r1, r7, #20
 80149c6:	4b28      	ldr	r3, [pc, #160]	; (8014a68 <ScheduleTx+0x160>)
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	4b28      	ldr	r3, [pc, #160]	; (8014a6c <ScheduleTx+0x164>)
 80149cc:	4a28      	ldr	r2, [pc, #160]	; (8014a70 <ScheduleTx+0x168>)
 80149ce:	f004 fca3 	bl	8019318 <RegionNextChannel>
 80149d2:	4603      	mov	r3, r0
 80149d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80149d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d025      	beq.n	8014a2c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80149e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80149e4:	2b0b      	cmp	r3, #11
 80149e6:	d11e      	bne.n	8014a26 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80149e8:	4b1e      	ldr	r3, [pc, #120]	; (8014a64 <ScheduleTx+0x15c>)
 80149ea:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d01c      	beq.n	8014a2c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80149f2:	7bfb      	ldrb	r3, [r7, #15]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d013      	beq.n	8014a20 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80149f8:	4b1a      	ldr	r3, [pc, #104]	; (8014a64 <ScheduleTx+0x15c>)
 80149fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80149fe:	f043 0320 	orr.w	r3, r3, #32
 8014a02:	4a18      	ldr	r2, [pc, #96]	; (8014a64 <ScheduleTx+0x15c>)
 8014a04:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8014a08:	4b16      	ldr	r3, [pc, #88]	; (8014a64 <ScheduleTx+0x15c>)
 8014a0a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8014a0e:	4619      	mov	r1, r3
 8014a10:	4818      	ldr	r0, [pc, #96]	; (8014a74 <ScheduleTx+0x16c>)
 8014a12:	f00b f927 	bl	801fc64 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8014a16:	4817      	ldr	r0, [pc, #92]	; (8014a74 <ScheduleTx+0x16c>)
 8014a18:	f00b f846 	bl	801faa8 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	e01a      	b.n	8014a56 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8014a20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a24:	e017      	b.n	8014a56 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8014a26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a2a:	e014      	b.n	8014a56 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8014a2c:	f7ff fe9e 	bl	801476c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8014a30:	f7ff ff02 	bl	8014838 <VerifyTxFrame>
 8014a34:	4603      	mov	r3, r0
 8014a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8014a3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d002      	beq.n	8014a48 <ScheduleTx+0x140>
    {
        return status;
 8014a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a46:	e006      	b.n	8014a56 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8014a48:	4b06      	ldr	r3, [pc, #24]	; (8014a64 <ScheduleTx+0x15c>)
 8014a4a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f000 fb76 	bl	8015140 <SendFrameOnChannel>
 8014a54:	4603      	mov	r3, r0
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3738      	adds	r7, #56	; 0x38
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	20000e18 	.word	0x20000e18
 8014a64:	200008fc 	.word	0x200008fc
 8014a68:	20000e48 	.word	0x20000e48
 8014a6c:	20000d90 	.word	0x20000d90
 8014a70:	20000d17 	.word	0x20000d17
 8014a74:	20000c64 	.word	0x20000c64

08014a78 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	4603      	mov	r3, r0
 8014a80:	460a      	mov	r2, r1
 8014a82:	71fb      	strb	r3, [r7, #7]
 8014a84:	4613      	mov	r3, r2
 8014a86:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014a88:	2312      	movs	r3, #18
 8014a8a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8014a90:	4b22      	ldr	r3, [pc, #136]	; (8014b1c <SecureFrame+0xa4>)
 8014a92:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d002      	beq.n	8014aa0 <SecureFrame+0x28>
 8014a9a:	2b04      	cmp	r3, #4
 8014a9c:	d011      	beq.n	8014ac2 <SecureFrame+0x4a>
 8014a9e:	e036      	b.n	8014b0e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8014aa0:	481f      	ldr	r0, [pc, #124]	; (8014b20 <SecureFrame+0xa8>)
 8014aa2:	f003 fd3f 	bl	8018524 <LoRaMacCryptoPrepareJoinRequest>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8014aaa:	7bfb      	ldrb	r3, [r7, #15]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d001      	beq.n	8014ab4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ab0:	2311      	movs	r3, #17
 8014ab2:	e02f      	b.n	8014b14 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8014ab4:	4b19      	ldr	r3, [pc, #100]	; (8014b1c <SecureFrame+0xa4>)
 8014ab6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8014aba:	b29a      	uxth	r2, r3
 8014abc:	4b17      	ldr	r3, [pc, #92]	; (8014b1c <SecureFrame+0xa4>)
 8014abe:	801a      	strh	r2, [r3, #0]
            break;
 8014ac0:	e027      	b.n	8014b12 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8014ac2:	f107 0308 	add.w	r3, r7, #8
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f003 fc66 	bl	8018398 <LoRaMacCryptoGetFCntUp>
 8014acc:	4603      	mov	r3, r0
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d001      	beq.n	8014ad6 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8014ad2:	2312      	movs	r3, #18
 8014ad4:	e01e      	b.n	8014b14 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8014ad6:	4b11      	ldr	r3, [pc, #68]	; (8014b1c <SecureFrame+0xa4>)
 8014ad8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	3b01      	subs	r3, #1
 8014ae4:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8014ae6:	68b8      	ldr	r0, [r7, #8]
 8014ae8:	79ba      	ldrb	r2, [r7, #6]
 8014aea:	79f9      	ldrb	r1, [r7, #7]
 8014aec:	4b0c      	ldr	r3, [pc, #48]	; (8014b20 <SecureFrame+0xa8>)
 8014aee:	f003 fe41 	bl	8018774 <LoRaMacCryptoSecureMessage>
 8014af2:	4603      	mov	r3, r0
 8014af4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8014af6:	7bfb      	ldrb	r3, [r7, #15]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d001      	beq.n	8014b00 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8014afc:	2311      	movs	r3, #17
 8014afe:	e009      	b.n	8014b14 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8014b00:	4b06      	ldr	r3, [pc, #24]	; (8014b1c <SecureFrame+0xa4>)
 8014b02:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8014b06:	b29a      	uxth	r2, r3
 8014b08:	4b04      	ldr	r3, [pc, #16]	; (8014b1c <SecureFrame+0xa4>)
 8014b0a:	801a      	strh	r2, [r3, #0]
            break;
 8014b0c:	e001      	b.n	8014b12 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014b0e:	2303      	movs	r3, #3
 8014b10:	e000      	b.n	8014b14 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8014b12:	2300      	movs	r3, #0
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	3710      	adds	r7, #16
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}
 8014b1c:	200008fc 	.word	0x200008fc
 8014b20:	20000a04 	.word	0x20000a04

08014b24 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8014b24:	b480      	push	{r7}
 8014b26:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8014b28:	4b09      	ldr	r3, [pc, #36]	; (8014b50 <CalculateBackOff+0x2c>)
 8014b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d10a      	bne.n	8014b46 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8014b30:	4b07      	ldr	r3, [pc, #28]	; (8014b50 <CalculateBackOff+0x2c>)
 8014b32:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8014b36:	3b01      	subs	r3, #1
 8014b38:	4a06      	ldr	r2, [pc, #24]	; (8014b54 <CalculateBackOff+0x30>)
 8014b3a:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8014b3e:	fb02 f303 	mul.w	r3, r2, r3
 8014b42:	4a03      	ldr	r2, [pc, #12]	; (8014b50 <CalculateBackOff+0x2c>)
 8014b44:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8014b46:	bf00      	nop
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bc80      	pop	{r7}
 8014b4c:	4770      	bx	lr
 8014b4e:	bf00      	nop
 8014b50:	20000e18 	.word	0x20000e18
 8014b54:	200008fc 	.word	0x200008fc

08014b58 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	4603      	mov	r3, r0
 8014b60:	7139      	strb	r1, [r7, #4]
 8014b62:	71fb      	strb	r3, [r7, #7]
 8014b64:	4613      	mov	r3, r2
 8014b66:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8014b68:	79fb      	ldrb	r3, [r7, #7]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d002      	beq.n	8014b74 <RemoveMacCommands+0x1c>
 8014b6e:	79fb      	ldrb	r3, [r7, #7]
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d10d      	bne.n	8014b90 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8014b74:	79bb      	ldrb	r3, [r7, #6]
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	d108      	bne.n	8014b8c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8014b7a:	793b      	ldrb	r3, [r7, #4]
 8014b7c:	f003 0320 	and.w	r3, r3, #32
 8014b80:	b2db      	uxtb	r3, r3
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d004      	beq.n	8014b90 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8014b86:	f002 fda7 	bl	80176d8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8014b8a:	e001      	b.n	8014b90 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8014b8c:	f002 fda4 	bl	80176d8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8014b90:	bf00      	nop
 8014b92:	3708      	adds	r7, #8
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}

08014b98 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8014b98:	b5b0      	push	{r4, r5, r7, lr}
 8014b9a:	b092      	sub	sp, #72	; 0x48
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
 8014ba4:	f083 0301 	eor.w	r3, r3, #1
 8014ba8:	b2db      	uxtb	r3, r3
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d003      	beq.n	8014bb6 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8014bae:	4b88      	ldr	r3, [pc, #544]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8014bb6:	4b86      	ldr	r3, [pc, #536]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bb8:	2200      	movs	r2, #0
 8014bba:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8014bbc:	4b85      	ldr	r3, [pc, #532]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8014bc4:	4b83      	ldr	r3, [pc, #524]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8014bcc:	4b81      	ldr	r3, [pc, #516]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8014bd4:	4b7e      	ldr	r3, [pc, #504]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8014bdc:	4b7c      	ldr	r3, [pc, #496]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bde:	2201      	movs	r2, #1
 8014be0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014be4:	4b7a      	ldr	r3, [pc, #488]	; (8014dd0 <ResetMacParameters+0x238>)
 8014be6:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014bea:	4b79      	ldr	r3, [pc, #484]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014bf0:	4b77      	ldr	r3, [pc, #476]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bf2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8014bf6:	4b76      	ldr	r3, [pc, #472]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8014bfc:	4b74      	ldr	r3, [pc, #464]	; (8014dd0 <ResetMacParameters+0x238>)
 8014bfe:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8014c02:	4b73      	ldr	r3, [pc, #460]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c04:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014c08:	4b71      	ldr	r3, [pc, #452]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c0a:	4a71      	ldr	r2, [pc, #452]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c0c:	336c      	adds	r3, #108	; 0x6c
 8014c0e:	32b4      	adds	r2, #180	; 0xb4
 8014c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c14:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014c18:	4b6d      	ldr	r3, [pc, #436]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c1a:	4a6d      	ldr	r2, [pc, #436]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c1c:	3374      	adds	r3, #116	; 0x74
 8014c1e:	32bc      	adds	r2, #188	; 0xbc
 8014c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c24:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8014c28:	4b69      	ldr	r3, [pc, #420]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c2a:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8014c2e:	4b68      	ldr	r3, [pc, #416]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8014c34:	4b66      	ldr	r3, [pc, #408]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c36:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8014c3a:	4b65      	ldr	r3, [pc, #404]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c3c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8014c40:	4b63      	ldr	r3, [pc, #396]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c42:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014c46:	4a62      	ldr	r2, [pc, #392]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014c4c:	4b60      	ldr	r3, [pc, #384]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c4e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014c52:	4a5f      	ldr	r2, [pc, #380]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014c58:	4b5d      	ldr	r3, [pc, #372]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c5a:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014c5e:	4b5c      	ldr	r3, [pc, #368]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c60:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8014c64:	4b5a      	ldr	r3, [pc, #360]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c66:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014c6a:	4b59      	ldr	r3, [pc, #356]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c6c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8014c70:	4b58      	ldr	r3, [pc, #352]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014c72:	2200      	movs	r2, #0
 8014c74:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8014c78:	4b55      	ldr	r3, [pc, #340]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8014c80:	4b53      	ldr	r3, [pc, #332]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8014c88:	4b51      	ldr	r3, [pc, #324]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8014c90:	4b4f      	ldr	r3, [pc, #316]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c92:	2200      	movs	r2, #0
 8014c94:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8014c98:	4b4d      	ldr	r3, [pc, #308]	; (8014dd0 <ResetMacParameters+0x238>)
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8014ca0:	4b4b      	ldr	r3, [pc, #300]	; (8014dd0 <ResetMacParameters+0x238>)
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8014ca8:	4b49      	ldr	r3, [pc, #292]	; (8014dd0 <ResetMacParameters+0x238>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8014cb0:	4b47      	ldr	r3, [pc, #284]	; (8014dd0 <ResetMacParameters+0x238>)
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8014cb8:	4b45      	ldr	r3, [pc, #276]	; (8014dd0 <ResetMacParameters+0x238>)
 8014cba:	2200      	movs	r2, #0
 8014cbc:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8014cc0:	4b43      	ldr	r3, [pc, #268]	; (8014dd0 <ResetMacParameters+0x238>)
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8014cc8:	4b41      	ldr	r3, [pc, #260]	; (8014dd0 <ResetMacParameters+0x238>)
 8014cca:	2200      	movs	r2, #0
 8014ccc:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014cd4:	4b40      	ldr	r3, [pc, #256]	; (8014dd8 <ResetMacParameters+0x240>)
 8014cd6:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014cd8:	4b40      	ldr	r3, [pc, #256]	; (8014ddc <ResetMacParameters+0x244>)
 8014cda:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8014cdc:	4b40      	ldr	r3, [pc, #256]	; (8014de0 <ResetMacParameters+0x248>)
 8014cde:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014ce0:	4b3b      	ldr	r3, [pc, #236]	; (8014dd0 <ResetMacParameters+0x238>)
 8014ce2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ce6:	f107 020c 	add.w	r2, r7, #12
 8014cea:	4611      	mov	r1, r2
 8014cec:	4618      	mov	r0, r3
 8014cee:	f004 f9ff 	bl	80190f0 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8014cf2:	4b38      	ldr	r3, [pc, #224]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8014cfa:	4b36      	ldr	r3, [pc, #216]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014cfc:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8014d00:	4b34      	ldr	r3, [pc, #208]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d02:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8014d06:	4b32      	ldr	r3, [pc, #200]	; (8014dd0 <ResetMacParameters+0x238>)
 8014d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d0a:	4a32      	ldr	r2, [pc, #200]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d0c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d10:	4b2f      	ldr	r3, [pc, #188]	; (8014dd0 <ResetMacParameters+0x238>)
 8014d12:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8014d16:	4b2f      	ldr	r3, [pc, #188]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d18:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014d1c:	4b2c      	ldr	r3, [pc, #176]	; (8014dd0 <ResetMacParameters+0x238>)
 8014d1e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014d22:	4b2c      	ldr	r3, [pc, #176]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d24:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8014d28:	4b2a      	ldr	r3, [pc, #168]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8014d30:	4b28      	ldr	r3, [pc, #160]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d32:	2201      	movs	r2, #1
 8014d34:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014d38:	4b25      	ldr	r3, [pc, #148]	; (8014dd0 <ResetMacParameters+0x238>)
 8014d3a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014d3e:	4b25      	ldr	r3, [pc, #148]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d40:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8014d44:	4a23      	ldr	r2, [pc, #140]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d46:	4b23      	ldr	r3, [pc, #140]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d48:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8014d4c:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8014d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014d58:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014d5c:	4b1d      	ldr	r3, [pc, #116]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d5e:	2201      	movs	r2, #1
 8014d60:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014d64:	4b1b      	ldr	r3, [pc, #108]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d66:	2202      	movs	r2, #2
 8014d68:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8014d70:	2300      	movs	r3, #0
 8014d72:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8014d74:	4b17      	ldr	r3, [pc, #92]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d009      	beq.n	8014d92 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8014d7e:	4b15      	ldr	r3, [pc, #84]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d80:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8014d88:	4b12      	ldr	r3, [pc, #72]	; (8014dd4 <ResetMacParameters+0x23c>)
 8014d8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014d8e:	695b      	ldr	r3, [r3, #20]
 8014d90:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8014d92:	4b14      	ldr	r3, [pc, #80]	; (8014de4 <ResetMacParameters+0x24c>)
 8014d94:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8014d96:	4b14      	ldr	r3, [pc, #80]	; (8014de8 <ResetMacParameters+0x250>)
 8014d98:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8014d9a:	4b14      	ldr	r3, [pc, #80]	; (8014dec <ResetMacParameters+0x254>)
 8014d9c:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8014d9e:	4b14      	ldr	r3, [pc, #80]	; (8014df0 <ResetMacParameters+0x258>)
 8014da0:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8014da2:	4b14      	ldr	r3, [pc, #80]	; (8014df4 <ResetMacParameters+0x25c>)
 8014da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8014da6:	4b14      	ldr	r3, [pc, #80]	; (8014df8 <ResetMacParameters+0x260>)
 8014da8:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8014daa:	4b14      	ldr	r3, [pc, #80]	; (8014dfc <ResetMacParameters+0x264>)
 8014dac:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8014dae:	4b14      	ldr	r3, [pc, #80]	; (8014e00 <ResetMacParameters+0x268>)
 8014db0:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8014db2:	4b14      	ldr	r3, [pc, #80]	; (8014e04 <ResetMacParameters+0x26c>)
 8014db4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8014db6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014dba:	f107 031c 	add.w	r3, r7, #28
 8014dbe:	4a12      	ldr	r2, [pc, #72]	; (8014e08 <ResetMacParameters+0x270>)
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f002 f996 	bl	80170f2 <LoRaMacClassBInit>
}
 8014dc6:	bf00      	nop
 8014dc8:	3748      	adds	r7, #72	; 0x48
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8014dce:	bf00      	nop
 8014dd0:	20000e18 	.word	0x20000e18
 8014dd4:	200008fc 	.word	0x200008fc
 8014dd8:	2000103c 	.word	0x2000103c
 8014ddc:	20001050 	.word	0x20001050
 8014de0:	200019b0 	.word	0x200019b0
 8014de4:	20000d64 	.word	0x20000d64
 8014de8:	20000d1c 	.word	0x20000d1c
 8014dec:	20000d50 	.word	0x20000d50
 8014df0:	20000d8d 	.word	0x20000d8d
 8014df4:	20000efc 	.word	0x20000efc
 8014df8:	20000e60 	.word	0x20000e60
 8014dfc:	20000e64 	.word	0x20000e64
 8014e00:	20000f00 	.word	0x20000f00
 8014e04:	20000f48 	.word	0x20000f48
 8014e08:	200013cc 	.word	0x200013cc

08014e0c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	f00a feb4 	bl	801fb84 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8014e1c:	4b11      	ldr	r3, [pc, #68]	; (8014e64 <RxWindowSetup+0x58>)
 8014e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e20:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8014e22:	4b11      	ldr	r3, [pc, #68]	; (8014e68 <RxWindowSetup+0x5c>)
 8014e24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e28:	4a10      	ldr	r2, [pc, #64]	; (8014e6c <RxWindowSetup+0x60>)
 8014e2a:	6839      	ldr	r1, [r7, #0]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f004 f9c7 	bl	80191c0 <RegionRxConfig>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d010      	beq.n	8014e5a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8014e38:	4b0d      	ldr	r3, [pc, #52]	; (8014e70 <RxWindowSetup+0x64>)
 8014e3a:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8014e3e:	4b0c      	ldr	r3, [pc, #48]	; (8014e70 <RxWindowSetup+0x64>)
 8014e40:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8014e44:	4b07      	ldr	r3, [pc, #28]	; (8014e64 <RxWindowSetup+0x58>)
 8014e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e48:	4a07      	ldr	r2, [pc, #28]	; (8014e68 <RxWindowSetup+0x5c>)
 8014e4a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8014e4c:	4610      	mov	r0, r2
 8014e4e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	7cda      	ldrb	r2, [r3, #19]
 8014e54:	4b06      	ldr	r3, [pc, #24]	; (8014e70 <RxWindowSetup+0x64>)
 8014e56:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8014e5a:	bf00      	nop
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	08021df4 	.word	0x08021df4
 8014e68:	20000e18 	.word	0x20000e18
 8014e6c:	20000d20 	.word	0x20000d20
 8014e70:	200008fc 	.word	0x200008fc

08014e74 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8014e74:	b590      	push	{r4, r7, lr}
 8014e76:	b083      	sub	sp, #12
 8014e78:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014e7a:	4b1e      	ldr	r3, [pc, #120]	; (8014ef4 <OpenContinuousRxCWindow+0x80>)
 8014e7c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8014e80:	4b1c      	ldr	r3, [pc, #112]	; (8014ef4 <OpenContinuousRxCWindow+0x80>)
 8014e82:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014e86:	b259      	sxtb	r1, r3
 8014e88:	4b1a      	ldr	r3, [pc, #104]	; (8014ef4 <OpenContinuousRxCWindow+0x80>)
 8014e8a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014e8e:	4b19      	ldr	r3, [pc, #100]	; (8014ef4 <OpenContinuousRxCWindow+0x80>)
 8014e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e92:	4c19      	ldr	r4, [pc, #100]	; (8014ef8 <OpenContinuousRxCWindow+0x84>)
 8014e94:	9400      	str	r4, [sp, #0]
 8014e96:	f004 f979 	bl	801918c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014e9a:	4b18      	ldr	r3, [pc, #96]	; (8014efc <OpenContinuousRxCWindow+0x88>)
 8014e9c:	2202      	movs	r2, #2
 8014e9e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014ea2:	4b14      	ldr	r3, [pc, #80]	; (8014ef4 <OpenContinuousRxCWindow+0x80>)
 8014ea4:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014ea8:	4b14      	ldr	r3, [pc, #80]	; (8014efc <OpenContinuousRxCWindow+0x88>)
 8014eaa:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014eae:	4b13      	ldr	r3, [pc, #76]	; (8014efc <OpenContinuousRxCWindow+0x88>)
 8014eb0:	2201      	movs	r2, #1
 8014eb2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8014eb6:	4b0f      	ldr	r3, [pc, #60]	; (8014ef4 <OpenContinuousRxCWindow+0x80>)
 8014eb8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ebc:	4a10      	ldr	r2, [pc, #64]	; (8014f00 <OpenContinuousRxCWindow+0x8c>)
 8014ebe:	490e      	ldr	r1, [pc, #56]	; (8014ef8 <OpenContinuousRxCWindow+0x84>)
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f004 f97d 	bl	80191c0 <RegionRxConfig>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d00f      	beq.n	8014eec <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8014ecc:	4b0b      	ldr	r3, [pc, #44]	; (8014efc <OpenContinuousRxCWindow+0x88>)
 8014ece:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8014ed2:	4b0a      	ldr	r3, [pc, #40]	; (8014efc <OpenContinuousRxCWindow+0x88>)
 8014ed4:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8014ed8:	4b0a      	ldr	r3, [pc, #40]	; (8014f04 <OpenContinuousRxCWindow+0x90>)
 8014eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014edc:	2000      	movs	r0, #0
 8014ede:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8014ee0:	4b06      	ldr	r3, [pc, #24]	; (8014efc <OpenContinuousRxCWindow+0x88>)
 8014ee2:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8014ee6:	4b05      	ldr	r3, [pc, #20]	; (8014efc <OpenContinuousRxCWindow+0x88>)
 8014ee8:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8014eec:	bf00      	nop
 8014eee:	3704      	adds	r7, #4
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd90      	pop	{r4, r7, pc}
 8014ef4:	20000e18 	.word	0x20000e18
 8014ef8:	20000ce4 	.word	0x20000ce4
 8014efc:	200008fc 	.word	0x200008fc
 8014f00:	20000d20 	.word	0x20000d20
 8014f04:	08021df4 	.word	0x08021df4

08014f08 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b088      	sub	sp, #32
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	603b      	str	r3, [r7, #0]
 8014f14:	4613      	mov	r3, r2
 8014f16:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8014f18:	4b82      	ldr	r3, [pc, #520]	; (8015124 <PrepareFrame+0x21c>)
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8014f1e:	4b81      	ldr	r3, [pc, #516]	; (8015124 <PrepareFrame+0x21c>)
 8014f20:	2200      	movs	r2, #0
 8014f22:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8014f26:	2300      	movs	r3, #0
 8014f28:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d101      	bne.n	8014f3c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8014f3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014f3e:	461a      	mov	r2, r3
 8014f40:	6839      	ldr	r1, [r7, #0]
 8014f42:	4879      	ldr	r0, [pc, #484]	; (8015128 <PrepareFrame+0x220>)
 8014f44:	f006 fc63 	bl	801b80e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8014f48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014f4a:	b2da      	uxtb	r2, r3
 8014f4c:	4b75      	ldr	r3, [pc, #468]	; (8015124 <PrepareFrame+0x21c>)
 8014f4e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	781a      	ldrb	r2, [r3, #0]
 8014f56:	4b73      	ldr	r3, [pc, #460]	; (8015124 <PrepareFrame+0x21c>)
 8014f58:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	2b07      	cmp	r3, #7
 8014f66:	f000 80b9 	beq.w	80150dc <PrepareFrame+0x1d4>
 8014f6a:	2b07      	cmp	r3, #7
 8014f6c:	f300 80d0 	bgt.w	8015110 <PrepareFrame+0x208>
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	d006      	beq.n	8014f82 <PrepareFrame+0x7a>
 8014f74:	2b04      	cmp	r3, #4
 8014f76:	f040 80cb 	bne.w	8015110 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8014f7a:	4b6a      	ldr	r3, [pc, #424]	; (8015124 <PrepareFrame+0x21c>)
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8014f82:	4b68      	ldr	r3, [pc, #416]	; (8015124 <PrepareFrame+0x21c>)
 8014f84:	2204      	movs	r2, #4
 8014f86:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8014f8a:	4b66      	ldr	r3, [pc, #408]	; (8015124 <PrepareFrame+0x21c>)
 8014f8c:	4a67      	ldr	r2, [pc, #412]	; (801512c <PrepareFrame+0x224>)
 8014f8e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8014f92:	4b64      	ldr	r3, [pc, #400]	; (8015124 <PrepareFrame+0x21c>)
 8014f94:	22ff      	movs	r2, #255	; 0xff
 8014f96:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	781a      	ldrb	r2, [r3, #0]
 8014f9e:	4b61      	ldr	r3, [pc, #388]	; (8015124 <PrepareFrame+0x21c>)
 8014fa0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8014fa4:	4a5f      	ldr	r2, [pc, #380]	; (8015124 <PrepareFrame+0x21c>)
 8014fa6:	79fb      	ldrb	r3, [r7, #7]
 8014fa8:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8014fac:	4b60      	ldr	r3, [pc, #384]	; (8015130 <PrepareFrame+0x228>)
 8014fae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8014fb2:	4a5c      	ldr	r2, [pc, #368]	; (8015124 <PrepareFrame+0x21c>)
 8014fb4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	781a      	ldrb	r2, [r3, #0]
 8014fbc:	4b59      	ldr	r3, [pc, #356]	; (8015124 <PrepareFrame+0x21c>)
 8014fbe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8014fc2:	4b58      	ldr	r3, [pc, #352]	; (8015124 <PrepareFrame+0x21c>)
 8014fc4:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8014fc8:	4b56      	ldr	r3, [pc, #344]	; (8015124 <PrepareFrame+0x21c>)
 8014fca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8014fce:	4b55      	ldr	r3, [pc, #340]	; (8015124 <PrepareFrame+0x21c>)
 8014fd0:	4a55      	ldr	r2, [pc, #340]	; (8015128 <PrepareFrame+0x220>)
 8014fd2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8014fd6:	f107 0318 	add.w	r3, r7, #24
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f003 f9dc 	bl	8018398 <LoRaMacCryptoGetFCntUp>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d001      	beq.n	8014fea <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8014fe6:	2312      	movs	r3, #18
 8014fe8:	e098      	b.n	801511c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	b29a      	uxth	r2, r3
 8014fee:	4b4d      	ldr	r3, [pc, #308]	; (8015124 <PrepareFrame+0x21c>)
 8014ff0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8014ff4:	4b4b      	ldr	r3, [pc, #300]	; (8015124 <PrepareFrame+0x21c>)
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8014ffc:	4b49      	ldr	r3, [pc, #292]	; (8015124 <PrepareFrame+0x21c>)
 8014ffe:	2200      	movs	r2, #0
 8015000:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	4a47      	ldr	r2, [pc, #284]	; (8015124 <PrepareFrame+0x21c>)
 8015008:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801500c:	f107 0314 	add.w	r3, r7, #20
 8015010:	4618      	mov	r0, r3
 8015012:	f002 fb8d 	bl	8017730 <LoRaMacCommandsGetSizeSerializedCmds>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	d001      	beq.n	8015020 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801501c:	2313      	movs	r3, #19
 801501e:	e07d      	b.n	801511c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d076      	beq.n	8015114 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8015026:	4b42      	ldr	r3, [pc, #264]	; (8015130 <PrepareFrame+0x228>)
 8015028:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801502c:	4618      	mov	r0, r3
 801502e:	f7fe fd2b 	bl	8013a88 <GetMaxAppPayloadWithoutFOptsLength>
 8015032:	4603      	mov	r3, r0
 8015034:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8015036:	4b3b      	ldr	r3, [pc, #236]	; (8015124 <PrepareFrame+0x21c>)
 8015038:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801503c:	2b00      	cmp	r3, #0
 801503e:	d01d      	beq.n	801507c <PrepareFrame+0x174>
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	2b0f      	cmp	r3, #15
 8015044:	d81a      	bhi.n	801507c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8015046:	f107 0314 	add.w	r3, r7, #20
 801504a:	4a3a      	ldr	r2, [pc, #232]	; (8015134 <PrepareFrame+0x22c>)
 801504c:	4619      	mov	r1, r3
 801504e:	200f      	movs	r0, #15
 8015050:	f002 fb84 	bl	801775c <LoRaMacCommandsSerializeCmds>
 8015054:	4603      	mov	r3, r0
 8015056:	2b00      	cmp	r3, #0
 8015058:	d001      	beq.n	801505e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801505a:	2313      	movs	r3, #19
 801505c:	e05e      	b.n	801511c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	f003 030f 	and.w	r3, r3, #15
 8015064:	b2d9      	uxtb	r1, r3
 8015066:	68ba      	ldr	r2, [r7, #8]
 8015068:	7813      	ldrb	r3, [r2, #0]
 801506a:	f361 0303 	bfi	r3, r1, #0, #4
 801506e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	781a      	ldrb	r2, [r3, #0]
 8015074:	4b2b      	ldr	r3, [pc, #172]	; (8015124 <PrepareFrame+0x21c>)
 8015076:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801507a:	e04b      	b.n	8015114 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801507c:	4b29      	ldr	r3, [pc, #164]	; (8015124 <PrepareFrame+0x21c>)
 801507e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8015082:	2b00      	cmp	r3, #0
 8015084:	d010      	beq.n	80150a8 <PrepareFrame+0x1a0>
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	2b0f      	cmp	r3, #15
 801508a:	d90d      	bls.n	80150a8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801508c:	7ffb      	ldrb	r3, [r7, #31]
 801508e:	f107 0114 	add.w	r1, r7, #20
 8015092:	4a29      	ldr	r2, [pc, #164]	; (8015138 <PrepareFrame+0x230>)
 8015094:	4618      	mov	r0, r3
 8015096:	f002 fb61 	bl	801775c <LoRaMacCommandsSerializeCmds>
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	d001      	beq.n	80150a4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80150a0:	2313      	movs	r3, #19
 80150a2:	e03b      	b.n	801511c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80150a4:	230a      	movs	r3, #10
 80150a6:	e039      	b.n	801511c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80150a8:	7ffb      	ldrb	r3, [r7, #31]
 80150aa:	f107 0114 	add.w	r1, r7, #20
 80150ae:	4a22      	ldr	r2, [pc, #136]	; (8015138 <PrepareFrame+0x230>)
 80150b0:	4618      	mov	r0, r3
 80150b2:	f002 fb53 	bl	801775c <LoRaMacCommandsSerializeCmds>
 80150b6:	4603      	mov	r3, r0
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d001      	beq.n	80150c0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80150bc:	2313      	movs	r3, #19
 80150be:	e02d      	b.n	801511c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80150c0:	4b18      	ldr	r3, [pc, #96]	; (8015124 <PrepareFrame+0x21c>)
 80150c2:	2200      	movs	r2, #0
 80150c4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80150c8:	4b16      	ldr	r3, [pc, #88]	; (8015124 <PrepareFrame+0x21c>)
 80150ca:	4a1b      	ldr	r2, [pc, #108]	; (8015138 <PrepareFrame+0x230>)
 80150cc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	b2da      	uxtb	r2, r3
 80150d4:	4b13      	ldr	r3, [pc, #76]	; (8015124 <PrepareFrame+0x21c>)
 80150d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80150da:	e01b      	b.n	8015114 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d01a      	beq.n	8015118 <PrepareFrame+0x210>
 80150e2:	4b10      	ldr	r3, [pc, #64]	; (8015124 <PrepareFrame+0x21c>)
 80150e4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d015      	beq.n	8015118 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80150ec:	4813      	ldr	r0, [pc, #76]	; (801513c <PrepareFrame+0x234>)
 80150ee:	4b0d      	ldr	r3, [pc, #52]	; (8015124 <PrepareFrame+0x21c>)
 80150f0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	461a      	mov	r2, r3
 80150f8:	6839      	ldr	r1, [r7, #0]
 80150fa:	f006 fb88 	bl	801b80e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80150fe:	4b09      	ldr	r3, [pc, #36]	; (8015124 <PrepareFrame+0x21c>)
 8015100:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8015104:	b29b      	uxth	r3, r3
 8015106:	3301      	adds	r3, #1
 8015108:	b29a      	uxth	r2, r3
 801510a:	4b06      	ldr	r3, [pc, #24]	; (8015124 <PrepareFrame+0x21c>)
 801510c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801510e:	e003      	b.n	8015118 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015110:	2302      	movs	r3, #2
 8015112:	e003      	b.n	801511c <PrepareFrame+0x214>
            break;
 8015114:	bf00      	nop
 8015116:	e000      	b.n	801511a <PrepareFrame+0x212>
            break;
 8015118:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801511a:	2300      	movs	r3, #0
}
 801511c:	4618      	mov	r0, r3
 801511e:	3720      	adds	r7, #32
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	200008fc 	.word	0x200008fc
 8015128:	20000a34 	.word	0x20000a34
 801512c:	200008fe 	.word	0x200008fe
 8015130:	20000e18 	.word	0x20000e18
 8015134:	20000a14 	.word	0x20000a14
 8015138:	20000d98 	.word	0x20000d98
 801513c:	200008ff 	.word	0x200008ff

08015140 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b08a      	sub	sp, #40	; 0x28
 8015144:	af00      	add	r7, sp, #0
 8015146:	4603      	mov	r3, r0
 8015148:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801514a:	2303      	movs	r3, #3
 801514c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8015150:	2300      	movs	r3, #0
 8015152:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8015154:	79fb      	ldrb	r3, [r7, #7]
 8015156:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015158:	4b4b      	ldr	r3, [pc, #300]	; (8015288 <SendFrameOnChannel+0x148>)
 801515a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801515e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015160:	4b49      	ldr	r3, [pc, #292]	; (8015288 <SendFrameOnChannel+0x148>)
 8015162:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8015166:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8015168:	4b47      	ldr	r3, [pc, #284]	; (8015288 <SendFrameOnChannel+0x148>)
 801516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801516e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015170:	4b45      	ldr	r3, [pc, #276]	; (8015288 <SendFrameOnChannel+0x148>)
 8015172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015176:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8015178:	4b44      	ldr	r3, [pc, #272]	; (801528c <SendFrameOnChannel+0x14c>)
 801517a:	881b      	ldrh	r3, [r3, #0]
 801517c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801517e:	4b42      	ldr	r3, [pc, #264]	; (8015288 <SendFrameOnChannel+0x148>)
 8015180:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8015184:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8015186:	4b40      	ldr	r3, [pc, #256]	; (8015288 <SendFrameOnChannel+0x148>)
 8015188:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801518c:	f107 020f 	add.w	r2, r7, #15
 8015190:	f107 0110 	add.w	r1, r7, #16
 8015194:	4b3e      	ldr	r3, [pc, #248]	; (8015290 <SendFrameOnChannel+0x150>)
 8015196:	f004 f828 	bl	80191ea <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801519a:	4b3c      	ldr	r3, [pc, #240]	; (801528c <SendFrameOnChannel+0x14c>)
 801519c:	2201      	movs	r2, #1
 801519e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80151a2:	4b39      	ldr	r3, [pc, #228]	; (8015288 <SendFrameOnChannel+0x148>)
 80151a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80151a8:	b2da      	uxtb	r2, r3
 80151aa:	4b38      	ldr	r3, [pc, #224]	; (801528c <SendFrameOnChannel+0x14c>)
 80151ac:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 80151b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80151b4:	4b35      	ldr	r3, [pc, #212]	; (801528c <SendFrameOnChannel+0x14c>)
 80151b6:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80151ba:	79fb      	ldrb	r3, [r7, #7]
 80151bc:	4a33      	ldr	r2, [pc, #204]	; (801528c <SendFrameOnChannel+0x14c>)
 80151be:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80151c2:	4b32      	ldr	r3, [pc, #200]	; (801528c <SendFrameOnChannel+0x14c>)
 80151c4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80151c8:	4a30      	ldr	r2, [pc, #192]	; (801528c <SendFrameOnChannel+0x14c>)
 80151ca:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80151ce:	4b2f      	ldr	r3, [pc, #188]	; (801528c <SendFrameOnChannel+0x14c>)
 80151d0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80151d4:	4a2d      	ldr	r2, [pc, #180]	; (801528c <SendFrameOnChannel+0x14c>)
 80151d6:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80151da:	f001 fff6 	bl	80171ca <LoRaMacClassBIsBeaconModeActive>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d00b      	beq.n	80151fc <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80151e4:	4b29      	ldr	r3, [pc, #164]	; (801528c <SendFrameOnChannel+0x14c>)
 80151e6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80151ea:	4618      	mov	r0, r3
 80151ec:	f002 f858 	bl	80172a0 <LoRaMacClassBIsUplinkCollision>
 80151f0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80151f2:	6a3b      	ldr	r3, [r7, #32]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d001      	beq.n	80151fc <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80151f8:	2310      	movs	r3, #16
 80151fa:	e040      	b.n	801527e <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80151fc:	4b22      	ldr	r3, [pc, #136]	; (8015288 <SendFrameOnChannel+0x148>)
 80151fe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015202:	2b01      	cmp	r3, #1
 8015204:	d101      	bne.n	801520a <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8015206:	f002 f855 	bl	80172b4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801520a:	f001 ffef 	bl	80171ec <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801520e:	4b1e      	ldr	r3, [pc, #120]	; (8015288 <SendFrameOnChannel+0x148>)
 8015210:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015214:	b2db      	uxtb	r3, r3
 8015216:	4a1d      	ldr	r2, [pc, #116]	; (801528c <SendFrameOnChannel+0x14c>)
 8015218:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 801521c:	4611      	mov	r1, r2
 801521e:	4618      	mov	r0, r3
 8015220:	f7ff fc2a 	bl	8014a78 <SecureFrame>
 8015224:	4603      	mov	r3, r0
 8015226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801522a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801522e:	2b00      	cmp	r3, #0
 8015230:	d002      	beq.n	8015238 <SendFrameOnChannel+0xf8>
    {
        return status;
 8015232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015236:	e022      	b.n	801527e <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8015238:	4b14      	ldr	r3, [pc, #80]	; (801528c <SendFrameOnChannel+0x14c>)
 801523a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801523e:	f043 0302 	orr.w	r3, r3, #2
 8015242:	4a12      	ldr	r2, [pc, #72]	; (801528c <SendFrameOnChannel+0x14c>)
 8015244:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8015248:	4b10      	ldr	r3, [pc, #64]	; (801528c <SendFrameOnChannel+0x14c>)
 801524a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801524e:	3301      	adds	r3, #1
 8015250:	b2da      	uxtb	r2, r3
 8015252:	4b0e      	ldr	r3, [pc, #56]	; (801528c <SendFrameOnChannel+0x14c>)
 8015254:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8015258:	4b0c      	ldr	r3, [pc, #48]	; (801528c <SendFrameOnChannel+0x14c>)
 801525a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801525e:	4b0b      	ldr	r3, [pc, #44]	; (801528c <SendFrameOnChannel+0x14c>)
 8015260:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8015264:	4b09      	ldr	r3, [pc, #36]	; (801528c <SendFrameOnChannel+0x14c>)
 8015266:	2200      	movs	r2, #0
 8015268:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801526c:	4b09      	ldr	r3, [pc, #36]	; (8015294 <SendFrameOnChannel+0x154>)
 801526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015270:	4a06      	ldr	r2, [pc, #24]	; (801528c <SendFrameOnChannel+0x14c>)
 8015272:	8812      	ldrh	r2, [r2, #0]
 8015274:	b2d2      	uxtb	r2, r2
 8015276:	4611      	mov	r1, r2
 8015278:	4807      	ldr	r0, [pc, #28]	; (8015298 <SendFrameOnChannel+0x158>)
 801527a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 801527c:	2300      	movs	r3, #0
}
 801527e:	4618      	mov	r0, r3
 8015280:	3728      	adds	r7, #40	; 0x28
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}
 8015286:	bf00      	nop
 8015288:	20000e18 	.word	0x20000e18
 801528c:	200008fc 	.word	0x200008fc
 8015290:	20000d18 	.word	0x20000d18
 8015294:	08021df4 	.word	0x08021df4
 8015298:	200008fe 	.word	0x200008fe

0801529c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	4603      	mov	r3, r0
 80152a4:	6039      	str	r1, [r7, #0]
 80152a6:	80fb      	strh	r3, [r7, #6]
 80152a8:	4613      	mov	r3, r2
 80152aa:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80152ac:	4b09      	ldr	r3, [pc, #36]	; (80152d4 <SetTxContinuousWave+0x38>)
 80152ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152b0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80152b4:	88fa      	ldrh	r2, [r7, #6]
 80152b6:	6838      	ldr	r0, [r7, #0]
 80152b8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80152ba:	4b07      	ldr	r3, [pc, #28]	; (80152d8 <SetTxContinuousWave+0x3c>)
 80152bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80152c0:	f043 0302 	orr.w	r3, r3, #2
 80152c4:	4a04      	ldr	r2, [pc, #16]	; (80152d8 <SetTxContinuousWave+0x3c>)
 80152c6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80152ca:	2300      	movs	r3, #0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3708      	adds	r7, #8
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}
 80152d4:	08021df4 	.word	0x08021df4
 80152d8:	200008fc 	.word	0x200008fc

080152dc <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 80152e2:	2300      	movs	r3, #0
 80152e4:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80152e6:	4b49      	ldr	r3, [pc, #292]	; (801540c <RestoreNvmData+0x130>)
 80152e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d001      	beq.n	80152f4 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80152f0:	2301      	movs	r3, #1
 80152f2:	e087      	b.n	8015404 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80152f4:	2124      	movs	r1, #36	; 0x24
 80152f6:	4846      	ldr	r0, [pc, #280]	; (8015410 <RestoreNvmData+0x134>)
 80152f8:	f006 fade 	bl	801b8b8 <Crc32>
 80152fc:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80152fe:	4b44      	ldr	r3, [pc, #272]	; (8015410 <RestoreNvmData+0x134>)
 8015300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	429a      	cmp	r2, r3
 8015306:	d001      	beq.n	801530c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015308:	2317      	movs	r3, #23
 801530a:	e07b      	b.n	8015404 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801530c:	211c      	movs	r1, #28
 801530e:	4841      	ldr	r0, [pc, #260]	; (8015414 <RestoreNvmData+0x138>)
 8015310:	f006 fad2 	bl	801b8b8 <Crc32>
 8015314:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8015316:	4b3e      	ldr	r3, [pc, #248]	; (8015410 <RestoreNvmData+0x134>)
 8015318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801531a:	687a      	ldr	r2, [r7, #4]
 801531c:	429a      	cmp	r2, r3
 801531e:	d001      	beq.n	8015324 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015320:	2317      	movs	r3, #23
 8015322:	e06f      	b.n	8015404 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8015324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015328:	483b      	ldr	r0, [pc, #236]	; (8015418 <RestoreNvmData+0x13c>)
 801532a:	f006 fac5 	bl	801b8b8 <Crc32>
 801532e:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8015330:	4b37      	ldr	r3, [pc, #220]	; (8015410 <RestoreNvmData+0x134>)
 8015332:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	429a      	cmp	r2, r3
 801533a:	d001      	beq.n	8015340 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801533c:	2317      	movs	r3, #23
 801533e:	e061      	b.n	8015404 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8015340:	21d4      	movs	r1, #212	; 0xd4
 8015342:	4836      	ldr	r0, [pc, #216]	; (801541c <RestoreNvmData+0x140>)
 8015344:	f006 fab8 	bl	801b8b8 <Crc32>
 8015348:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 801534a:	4b31      	ldr	r3, [pc, #196]	; (8015410 <RestoreNvmData+0x134>)
 801534c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	429a      	cmp	r2, r3
 8015354:	d001      	beq.n	801535a <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015356:	2317      	movs	r3, #23
 8015358:	e054      	b.n	8015404 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 801535a:	2110      	movs	r1, #16
 801535c:	4830      	ldr	r0, [pc, #192]	; (8015420 <RestoreNvmData+0x144>)
 801535e:	f006 faab 	bl	801b8b8 <Crc32>
 8015362:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8015364:	4b2a      	ldr	r3, [pc, #168]	; (8015410 <RestoreNvmData+0x134>)
 8015366:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801536a:	687a      	ldr	r2, [r7, #4]
 801536c:	429a      	cmp	r2, r3
 801536e:	d001      	beq.n	8015374 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015370:	2317      	movs	r3, #23
 8015372:	e047      	b.n	8015404 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8015374:	f44f 715e 	mov.w	r1, #888	; 0x378
 8015378:	482a      	ldr	r0, [pc, #168]	; (8015424 <RestoreNvmData+0x148>)
 801537a:	f006 fa9d 	bl	801b8b8 <Crc32>
 801537e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8015380:	4b23      	ldr	r3, [pc, #140]	; (8015410 <RestoreNvmData+0x134>)
 8015382:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	429a      	cmp	r2, r3
 801538a:	d001      	beq.n	8015390 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801538c:	2317      	movs	r3, #23
 801538e:	e039      	b.n	8015404 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8015390:	2114      	movs	r1, #20
 8015392:	4825      	ldr	r0, [pc, #148]	; (8015428 <RestoreNvmData+0x14c>)
 8015394:	f006 fa90 	bl	801b8b8 <Crc32>
 8015398:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801539a:	4b1d      	ldr	r3, [pc, #116]	; (8015410 <RestoreNvmData+0x134>)
 801539c:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80153a0:	687a      	ldr	r2, [r7, #4]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d001      	beq.n	80153aa <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80153a6:	2317      	movs	r3, #23
 80153a8:	e02c      	b.n	8015404 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80153aa:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80153ae:	4918      	ldr	r1, [pc, #96]	; (8015410 <RestoreNvmData+0x134>)
 80153b0:	481e      	ldr	r0, [pc, #120]	; (801542c <RestoreNvmData+0x150>)
 80153b2:	f006 fa2c 	bl	801b80e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80153b6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80153ba:	2100      	movs	r1, #0
 80153bc:	4814      	ldr	r0, [pc, #80]	; (8015410 <RestoreNvmData+0x134>)
 80153be:	f006 fa61 	bl	801b884 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80153c2:	4b12      	ldr	r3, [pc, #72]	; (801540c <RestoreNvmData+0x130>)
 80153c4:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80153c8:	4b10      	ldr	r3, [pc, #64]	; (801540c <RestoreNvmData+0x130>)
 80153ca:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80153ce:	4b17      	ldr	r3, [pc, #92]	; (801542c <RestoreNvmData+0x150>)
 80153d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153d2:	4a0e      	ldr	r2, [pc, #56]	; (801540c <RestoreNvmData+0x130>)
 80153d4:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80153d8:	4b14      	ldr	r3, [pc, #80]	; (801542c <RestoreNvmData+0x150>)
 80153da:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80153de:	4b0b      	ldr	r3, [pc, #44]	; (801540c <RestoreNvmData+0x130>)
 80153e0:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80153e4:	4b09      	ldr	r3, [pc, #36]	; (801540c <RestoreNvmData+0x130>)
 80153e6:	2201      	movs	r2, #1
 80153e8:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80153ec:	4b07      	ldr	r3, [pc, #28]	; (801540c <RestoreNvmData+0x130>)
 80153ee:	2202      	movs	r2, #2
 80153f0:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80153f4:	4b0e      	ldr	r3, [pc, #56]	; (8015430 <RestoreNvmData+0x154>)
 80153f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153f8:	4a0c      	ldr	r2, [pc, #48]	; (801542c <RestoreNvmData+0x150>)
 80153fa:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80153fe:	4610      	mov	r0, r2
 8015400:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	3708      	adds	r7, #8
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}
 801540c:	200008fc 	.word	0x200008fc
 8015410:	200013e4 	.word	0x200013e4
 8015414:	2000140c 	.word	0x2000140c
 8015418:	2000142c 	.word	0x2000142c
 801541c:	20001530 	.word	0x20001530
 8015420:	20001608 	.word	0x20001608
 8015424:	2000161c 	.word	0x2000161c
 8015428:	20001998 	.word	0x20001998
 801542c:	20000e18 	.word	0x20000e18
 8015430:	08021df4 	.word	0x08021df4

08015434 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8015434:	b480      	push	{r7}
 8015436:	b083      	sub	sp, #12
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d002      	beq.n	801544a <DetermineFrameType+0x16>
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d101      	bne.n	801544e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801544a:	2303      	movs	r3, #3
 801544c:	e03b      	b.n	80154c6 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	7b1b      	ldrb	r3, [r3, #12]
 8015452:	f003 030f 	and.w	r3, r3, #15
 8015456:	b2db      	uxtb	r3, r3
 8015458:	2b00      	cmp	r3, #0
 801545a:	d008      	beq.n	801546e <DetermineFrameType+0x3a>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d003      	beq.n	801546e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	2200      	movs	r2, #0
 801546a:	701a      	strb	r2, [r3, #0]
 801546c:	e02a      	b.n	80154c4 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015474:	2b00      	cmp	r3, #0
 8015476:	d103      	bne.n	8015480 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	2201      	movs	r2, #1
 801547c:	701a      	strb	r2, [r3, #0]
 801547e:	e021      	b.n	80154c4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	7b1b      	ldrb	r3, [r3, #12]
 8015484:	f003 030f 	and.w	r3, r3, #15
 8015488:	b2db      	uxtb	r3, r3
 801548a:	2b00      	cmp	r3, #0
 801548c:	d108      	bne.n	80154a0 <DetermineFrameType+0x6c>
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d103      	bne.n	80154a0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	2202      	movs	r2, #2
 801549c:	701a      	strb	r2, [r3, #0]
 801549e:	e011      	b.n	80154c4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	7b1b      	ldrb	r3, [r3, #12]
 80154a4:	f003 030f 	and.w	r3, r3, #15
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d108      	bne.n	80154c0 <DetermineFrameType+0x8c>
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d003      	beq.n	80154c0 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	2203      	movs	r2, #3
 80154bc:	701a      	strb	r2, [r3, #0]
 80154be:	e001      	b.n	80154c4 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80154c0:	2318      	movs	r3, #24
 80154c2:	e000      	b.n	80154c6 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80154c4:	2300      	movs	r3, #0
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	370c      	adds	r7, #12
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bc80      	pop	{r7}
 80154ce:	4770      	bx	lr

080154d0 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80154d0:	b480      	push	{r7}
 80154d2:	b083      	sub	sp, #12
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	4603      	mov	r3, r0
 80154d8:	460a      	mov	r2, r1
 80154da:	71fb      	strb	r3, [r7, #7]
 80154dc:	4613      	mov	r3, r2
 80154de:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80154e0:	79fa      	ldrb	r2, [r7, #7]
 80154e2:	79bb      	ldrb	r3, [r7, #6]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d301      	bcc.n	80154ec <CheckRetrans+0x1c>
    {
        return true;
 80154e8:	2301      	movs	r3, #1
 80154ea:	e000      	b.n	80154ee <CheckRetrans+0x1e>
    }
    return false;
 80154ec:	2300      	movs	r3, #0
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	370c      	adds	r7, #12
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bc80      	pop	{r7}
 80154f6:	4770      	bx	lr

080154f8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80154fc:	4b12      	ldr	r3, [pc, #72]	; (8015548 <CheckRetransUnconfirmedUplink+0x50>)
 80154fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015502:	4a12      	ldr	r2, [pc, #72]	; (801554c <CheckRetransUnconfirmedUplink+0x54>)
 8015504:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8015508:	4611      	mov	r1, r2
 801550a:	4618      	mov	r0, r3
 801550c:	f7ff ffe0 	bl	80154d0 <CheckRetrans>
 8015510:	4603      	mov	r3, r0
 8015512:	2b00      	cmp	r3, #0
 8015514:	d001      	beq.n	801551a <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8015516:	2301      	movs	r3, #1
 8015518:	e014      	b.n	8015544 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801551a:	4b0b      	ldr	r3, [pc, #44]	; (8015548 <CheckRetransUnconfirmedUplink+0x50>)
 801551c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8015520:	f003 0302 	and.w	r3, r3, #2
 8015524:	b2db      	uxtb	r3, r3
 8015526:	2b00      	cmp	r3, #0
 8015528:	d00b      	beq.n	8015542 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801552a:	4b07      	ldr	r3, [pc, #28]	; (8015548 <CheckRetransUnconfirmedUplink+0x50>)
 801552c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8015530:	2b00      	cmp	r3, #0
 8015532:	d004      	beq.n	801553e <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8015534:	4b04      	ldr	r3, [pc, #16]	; (8015548 <CheckRetransUnconfirmedUplink+0x50>)
 8015536:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801553a:	2b01      	cmp	r3, #1
 801553c:	d101      	bne.n	8015542 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801553e:	2301      	movs	r3, #1
 8015540:	e000      	b.n	8015544 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8015542:	2300      	movs	r3, #0
}
 8015544:	4618      	mov	r0, r3
 8015546:	bd80      	pop	{r7, pc}
 8015548:	200008fc 	.word	0x200008fc
 801554c:	20000e18 	.word	0x20000e18

08015550 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8015550:	b580      	push	{r7, lr}
 8015552:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8015554:	4b10      	ldr	r3, [pc, #64]	; (8015598 <CheckRetransConfirmedUplink+0x48>)
 8015556:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801555a:	4a10      	ldr	r2, [pc, #64]	; (801559c <CheckRetransConfirmedUplink+0x4c>)
 801555c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8015560:	4611      	mov	r1, r2
 8015562:	4618      	mov	r0, r3
 8015564:	f7ff ffb4 	bl	80154d0 <CheckRetrans>
 8015568:	4603      	mov	r3, r0
 801556a:	2b00      	cmp	r3, #0
 801556c:	d001      	beq.n	8015572 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801556e:	2301      	movs	r3, #1
 8015570:	e00f      	b.n	8015592 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8015572:	4b09      	ldr	r3, [pc, #36]	; (8015598 <CheckRetransConfirmedUplink+0x48>)
 8015574:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8015578:	f003 0302 	and.w	r3, r3, #2
 801557c:	b2db      	uxtb	r3, r3
 801557e:	2b00      	cmp	r3, #0
 8015580:	d006      	beq.n	8015590 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8015582:	4b05      	ldr	r3, [pc, #20]	; (8015598 <CheckRetransConfirmedUplink+0x48>)
 8015584:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8015588:	2b00      	cmp	r3, #0
 801558a:	d001      	beq.n	8015590 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 801558c:	2301      	movs	r3, #1
 801558e:	e000      	b.n	8015592 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8015590:	2300      	movs	r3, #0
}
 8015592:	4618      	mov	r0, r3
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	200008fc 	.word	0x200008fc
 801559c:	20000e18 	.word	0x20000e18

080155a0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80155a0:	b480      	push	{r7}
 80155a2:	b083      	sub	sp, #12
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155ae:	d002      	beq.n	80155b6 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	3301      	adds	r3, #1
 80155b4:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80155b6:	687b      	ldr	r3, [r7, #4]
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	370c      	adds	r7, #12
 80155bc:	46bd      	mov	sp, r7
 80155be:	bc80      	pop	{r7}
 80155c0:	4770      	bx	lr
	...

080155c4 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80155c8:	4b1a      	ldr	r3, [pc, #104]	; (8015634 <StopRetransmission+0x70>)
 80155ca:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80155ce:	f003 0302 	and.w	r3, r3, #2
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d009      	beq.n	80155ec <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80155d8:	4b16      	ldr	r3, [pc, #88]	; (8015634 <StopRetransmission+0x70>)
 80155da:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d011      	beq.n	8015606 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80155e2:	4b14      	ldr	r3, [pc, #80]	; (8015634 <StopRetransmission+0x70>)
 80155e4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80155e8:	2b01      	cmp	r3, #1
 80155ea:	d00c      	beq.n	8015606 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80155ec:	4b12      	ldr	r3, [pc, #72]	; (8015638 <StopRetransmission+0x74>)
 80155ee:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d007      	beq.n	8015606 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80155f6:	4b10      	ldr	r3, [pc, #64]	; (8015638 <StopRetransmission+0x74>)
 80155f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7ff ffd0 	bl	80155a0 <IncreaseAdrAckCounter>
 8015600:	4603      	mov	r3, r0
 8015602:	4a0d      	ldr	r2, [pc, #52]	; (8015638 <StopRetransmission+0x74>)
 8015604:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8015606:	4b0b      	ldr	r3, [pc, #44]	; (8015634 <StopRetransmission+0x70>)
 8015608:	2200      	movs	r2, #0
 801560a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 801560e:	4b09      	ldr	r3, [pc, #36]	; (8015634 <StopRetransmission+0x70>)
 8015610:	2200      	movs	r2, #0
 8015612:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8015616:	4b07      	ldr	r3, [pc, #28]	; (8015634 <StopRetransmission+0x70>)
 8015618:	2200      	movs	r2, #0
 801561a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801561e:	4b05      	ldr	r3, [pc, #20]	; (8015634 <StopRetransmission+0x70>)
 8015620:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015624:	f023 0302 	bic.w	r3, r3, #2
 8015628:	4a02      	ldr	r2, [pc, #8]	; (8015634 <StopRetransmission+0x70>)
 801562a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801562e:	2301      	movs	r3, #1
}
 8015630:	4618      	mov	r0, r3
 8015632:	bd80      	pop	{r7, pc}
 8015634:	200008fc 	.word	0x200008fc
 8015638:	20000e18 	.word	0x20000e18

0801563c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 801563c:	b580      	push	{r7, lr}
 801563e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8015640:	4b08      	ldr	r3, [pc, #32]	; (8015664 <OnMacProcessNotify+0x28>)
 8015642:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015646:	2b00      	cmp	r3, #0
 8015648:	d00a      	beq.n	8015660 <OnMacProcessNotify+0x24>
 801564a:	4b06      	ldr	r3, [pc, #24]	; (8015664 <OnMacProcessNotify+0x28>)
 801564c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015650:	695b      	ldr	r3, [r3, #20]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d004      	beq.n	8015660 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8015656:	4b03      	ldr	r3, [pc, #12]	; (8015664 <OnMacProcessNotify+0x28>)
 8015658:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801565c:	695b      	ldr	r3, [r3, #20]
 801565e:	4798      	blx	r3
    }
}
 8015660:	bf00      	nop
 8015662:	bd80      	pop	{r7, pc}
 8015664:	200008fc 	.word	0x200008fc

08015668 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
 801566e:	4603      	mov	r3, r0
 8015670:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8015672:	4b0b      	ldr	r3, [pc, #44]	; (80156a0 <CallNvmDataChangeCallback+0x38>)
 8015674:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015678:	2b00      	cmp	r3, #0
 801567a:	d00c      	beq.n	8015696 <CallNvmDataChangeCallback+0x2e>
 801567c:	4b08      	ldr	r3, [pc, #32]	; (80156a0 <CallNvmDataChangeCallback+0x38>)
 801567e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015682:	691b      	ldr	r3, [r3, #16]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d006      	beq.n	8015696 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8015688:	4b05      	ldr	r3, [pc, #20]	; (80156a0 <CallNvmDataChangeCallback+0x38>)
 801568a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801568e:	691b      	ldr	r3, [r3, #16]
 8015690:	88fa      	ldrh	r2, [r7, #6]
 8015692:	4610      	mov	r0, r2
 8015694:	4798      	blx	r3
    }
}
 8015696:	bf00      	nop
 8015698:	3708      	adds	r7, #8
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	200008fc 	.word	0x200008fc

080156a4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80156a4:	b480      	push	{r7}
 80156a6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80156a8:	4b0b      	ldr	r3, [pc, #44]	; (80156d8 <IsRequestPending+0x34>)
 80156aa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80156ae:	f003 0304 	and.w	r3, r3, #4
 80156b2:	b2db      	uxtb	r3, r3
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d107      	bne.n	80156c8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80156b8:	4b07      	ldr	r3, [pc, #28]	; (80156d8 <IsRequestPending+0x34>)
 80156ba:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80156be:	f003 0301 	and.w	r3, r3, #1
 80156c2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d001      	beq.n	80156cc <IsRequestPending+0x28>
    {
        return 1;
 80156c8:	2301      	movs	r3, #1
 80156ca:	e000      	b.n	80156ce <IsRequestPending+0x2a>
    }
    return 0;
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bc80      	pop	{r7}
 80156d4:	4770      	bx	lr
 80156d6:	bf00      	nop
 80156d8:	200008fc 	.word	0x200008fc

080156dc <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80156dc:	b590      	push	{r4, r7, lr}
 80156de:	b091      	sub	sp, #68	; 0x44
 80156e0:	af02      	add	r7, sp, #8
 80156e2:	6178      	str	r0, [r7, #20]
 80156e4:	6139      	str	r1, [r7, #16]
 80156e6:	4613      	mov	r3, r2
 80156e8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d002      	beq.n	80156f6 <LoRaMacInitialization+0x1a>
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d101      	bne.n	80156fa <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80156f6:	2303      	movs	r3, #3
 80156f8:	e27a      	b.n	8015bf0 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d00b      	beq.n	801571a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8015706:	2b00      	cmp	r3, #0
 8015708:	d007      	beq.n	801571a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801570e:	2b00      	cmp	r3, #0
 8015710:	d003      	beq.n	801571a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8015716:	2b00      	cmp	r3, #0
 8015718:	d101      	bne.n	801571e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801571a:	2303      	movs	r3, #3
 801571c:	e268      	b.n	8015bf0 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801571e:	7bfb      	ldrb	r3, [r7, #15]
 8015720:	4618      	mov	r0, r3
 8015722:	f003 fcac 	bl	801907e <RegionIsActive>
 8015726:	4603      	mov	r3, r0
 8015728:	f083 0301 	eor.w	r3, r3, #1
 801572c:	b2db      	uxtb	r3, r3
 801572e:	2b00      	cmp	r3, #0
 8015730:	d001      	beq.n	8015736 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015732:	2309      	movs	r3, #9
 8015734:	e25c      	b.n	8015bf0 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8015736:	6978      	ldr	r0, [r7, #20]
 8015738:	f002 f932 	bl	80179a0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801573c:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8015740:	2100      	movs	r1, #0
 8015742:	48c7      	ldr	r0, [pc, #796]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015744:	f006 f89e 	bl	801b884 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8015748:	f240 521c 	movw	r2, #1308	; 0x51c
 801574c:	2100      	movs	r1, #0
 801574e:	48c5      	ldr	r0, [pc, #788]	; (8015a64 <LoRaMacInitialization+0x388>)
 8015750:	f006 f898 	bl	801b884 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8015754:	4ac2      	ldr	r2, [pc, #776]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015756:	7bfb      	ldrb	r3, [r7, #15]
 8015758:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801575c:	4bc0      	ldr	r3, [pc, #768]	; (8015a60 <LoRaMacInitialization+0x384>)
 801575e:	2200      	movs	r2, #0
 8015760:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8015764:	4bbe      	ldr	r3, [pc, #760]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015766:	2200      	movs	r2, #0
 8015768:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801576c:	4bbc      	ldr	r3, [pc, #752]	; (8015a60 <LoRaMacInitialization+0x384>)
 801576e:	4abe      	ldr	r2, [pc, #760]	; (8015a68 <LoRaMacInitialization+0x38c>)
 8015770:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8015774:	2300      	movs	r3, #0
 8015776:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801577a:	4bbc      	ldr	r3, [pc, #752]	; (8015a6c <LoRaMacInitialization+0x390>)
 801577c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801577e:	4bbc      	ldr	r3, [pc, #752]	; (8015a70 <LoRaMacInitialization+0x394>)
 8015780:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8015782:	4bbc      	ldr	r3, [pc, #752]	; (8015a74 <LoRaMacInitialization+0x398>)
 8015784:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8015786:	4bb6      	ldr	r3, [pc, #728]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015788:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801578c:	f107 021c 	add.w	r2, r7, #28
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f003 fcac 	bl	80190f0 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8015798:	230f      	movs	r3, #15
 801579a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801579e:	4bb0      	ldr	r3, [pc, #704]	; (8015a60 <LoRaMacInitialization+0x384>)
 80157a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80157a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80157a8:	4611      	mov	r1, r2
 80157aa:	4618      	mov	r0, r3
 80157ac:	f003 fc77 	bl	801909e <RegionGetPhyParam>
 80157b0:	4603      	mov	r3, r0
 80157b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80157b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	bf14      	ite	ne
 80157ba:	2301      	movne	r3, #1
 80157bc:	2300      	moveq	r3, #0
 80157be:	b2da      	uxtb	r2, r3
 80157c0:	4ba7      	ldr	r3, [pc, #668]	; (8015a60 <LoRaMacInitialization+0x384>)
 80157c2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80157c6:	230a      	movs	r3, #10
 80157c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80157cc:	4ba4      	ldr	r3, [pc, #656]	; (8015a60 <LoRaMacInitialization+0x384>)
 80157ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80157d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80157d6:	4611      	mov	r1, r2
 80157d8:	4618      	mov	r0, r3
 80157da:	f003 fc60 	bl	801909e <RegionGetPhyParam>
 80157de:	4603      	mov	r3, r0
 80157e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80157e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e4:	b25a      	sxtb	r2, r3
 80157e6:	4b9e      	ldr	r3, [pc, #632]	; (8015a60 <LoRaMacInitialization+0x384>)
 80157e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80157ec:	2306      	movs	r3, #6
 80157ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80157f2:	4b9b      	ldr	r3, [pc, #620]	; (8015a60 <LoRaMacInitialization+0x384>)
 80157f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80157f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80157fc:	4611      	mov	r1, r2
 80157fe:	4618      	mov	r0, r3
 8015800:	f003 fc4d 	bl	801909e <RegionGetPhyParam>
 8015804:	4603      	mov	r3, r0
 8015806:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8015808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580a:	b25a      	sxtb	r2, r3
 801580c:	4b94      	ldr	r3, [pc, #592]	; (8015a60 <LoRaMacInitialization+0x384>)
 801580e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8015812:	2310      	movs	r3, #16
 8015814:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015818:	4b91      	ldr	r3, [pc, #580]	; (8015a60 <LoRaMacInitialization+0x384>)
 801581a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801581e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015822:	4611      	mov	r1, r2
 8015824:	4618      	mov	r0, r3
 8015826:	f003 fc3a 	bl	801909e <RegionGetPhyParam>
 801582a:	4603      	mov	r3, r0
 801582c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015830:	4a8b      	ldr	r2, [pc, #556]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015832:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8015836:	2311      	movs	r3, #17
 8015838:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801583c:	4b88      	ldr	r3, [pc, #544]	; (8015a60 <LoRaMacInitialization+0x384>)
 801583e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015842:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015846:	4611      	mov	r1, r2
 8015848:	4618      	mov	r0, r3
 801584a:	f003 fc28 	bl	801909e <RegionGetPhyParam>
 801584e:	4603      	mov	r3, r0
 8015850:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8015852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015854:	4a82      	ldr	r2, [pc, #520]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015856:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801585a:	2312      	movs	r3, #18
 801585c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015860:	4b7f      	ldr	r3, [pc, #508]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015862:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015866:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801586a:	4611      	mov	r1, r2
 801586c:	4618      	mov	r0, r3
 801586e:	f003 fc16 	bl	801909e <RegionGetPhyParam>
 8015872:	4603      	mov	r3, r0
 8015874:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8015876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015878:	4a79      	ldr	r2, [pc, #484]	; (8015a60 <LoRaMacInitialization+0x384>)
 801587a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801587e:	2313      	movs	r3, #19
 8015880:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015884:	4b76      	ldr	r3, [pc, #472]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015886:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801588a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801588e:	4611      	mov	r1, r2
 8015890:	4618      	mov	r0, r3
 8015892:	f003 fc04 	bl	801909e <RegionGetPhyParam>
 8015896:	4603      	mov	r3, r0
 8015898:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589c:	4a70      	ldr	r2, [pc, #448]	; (8015a60 <LoRaMacInitialization+0x384>)
 801589e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80158a2:	2314      	movs	r3, #20
 80158a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158a8:	4b6d      	ldr	r3, [pc, #436]	; (8015a60 <LoRaMacInitialization+0x384>)
 80158aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80158b2:	4611      	mov	r1, r2
 80158b4:	4618      	mov	r0, r3
 80158b6:	f003 fbf2 	bl	801909e <RegionGetPhyParam>
 80158ba:	4603      	mov	r3, r0
 80158bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80158be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c0:	4a67      	ldr	r2, [pc, #412]	; (8015a60 <LoRaMacInitialization+0x384>)
 80158c2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80158c6:	2316      	movs	r3, #22
 80158c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158cc:	4b64      	ldr	r3, [pc, #400]	; (8015a60 <LoRaMacInitialization+0x384>)
 80158ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80158d6:	4611      	mov	r1, r2
 80158d8:	4618      	mov	r0, r3
 80158da:	f003 fbe0 	bl	801909e <RegionGetPhyParam>
 80158de:	4603      	mov	r3, r0
 80158e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80158e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e4:	b2da      	uxtb	r2, r3
 80158e6:	4b5e      	ldr	r3, [pc, #376]	; (8015a60 <LoRaMacInitialization+0x384>)
 80158e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80158ec:	2317      	movs	r3, #23
 80158ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158f2:	4b5b      	ldr	r3, [pc, #364]	; (8015a60 <LoRaMacInitialization+0x384>)
 80158f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80158fc:	4611      	mov	r1, r2
 80158fe:	4618      	mov	r0, r3
 8015900:	f003 fbcd 	bl	801909e <RegionGetPhyParam>
 8015904:	4603      	mov	r3, r0
 8015906:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8015908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590a:	4a55      	ldr	r2, [pc, #340]	; (8015a60 <LoRaMacInitialization+0x384>)
 801590c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8015910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015912:	4a53      	ldr	r2, [pc, #332]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015914:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8015918:	2318      	movs	r3, #24
 801591a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801591e:	4b50      	ldr	r3, [pc, #320]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015920:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015924:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015928:	4611      	mov	r1, r2
 801592a:	4618      	mov	r0, r3
 801592c:	f003 fbb7 	bl	801909e <RegionGetPhyParam>
 8015930:	4603      	mov	r3, r0
 8015932:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8015934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015936:	b2da      	uxtb	r2, r3
 8015938:	4b49      	ldr	r3, [pc, #292]	; (8015a60 <LoRaMacInitialization+0x384>)
 801593a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015940:	b2da      	uxtb	r2, r3
 8015942:	4b47      	ldr	r3, [pc, #284]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015944:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8015948:	231d      	movs	r3, #29
 801594a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801594e:	4b44      	ldr	r3, [pc, #272]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015950:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015954:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015958:	4611      	mov	r1, r2
 801595a:	4618      	mov	r0, r3
 801595c:	f003 fb9f 	bl	801909e <RegionGetPhyParam>
 8015960:	4603      	mov	r3, r0
 8015962:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8015964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015966:	b2da      	uxtb	r2, r3
 8015968:	4b3d      	ldr	r3, [pc, #244]	; (8015a60 <LoRaMacInitialization+0x384>)
 801596a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801596e:	231e      	movs	r3, #30
 8015970:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015974:	4b3a      	ldr	r3, [pc, #232]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015976:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801597a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801597e:	4611      	mov	r1, r2
 8015980:	4618      	mov	r0, r3
 8015982:	f003 fb8c 	bl	801909e <RegionGetPhyParam>
 8015986:	4603      	mov	r3, r0
 8015988:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598c:	b2da      	uxtb	r2, r3
 801598e:	4b34      	ldr	r3, [pc, #208]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015990:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8015994:	231f      	movs	r3, #31
 8015996:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801599a:	4b31      	ldr	r3, [pc, #196]	; (8015a60 <LoRaMacInitialization+0x384>)
 801599c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159a4:	4611      	mov	r1, r2
 80159a6:	4618      	mov	r0, r3
 80159a8:	f003 fb79 	bl	801909e <RegionGetPhyParam>
 80159ac:	4603      	mov	r3, r0
 80159ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80159b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b2:	4a2b      	ldr	r2, [pc, #172]	; (8015a60 <LoRaMacInitialization+0x384>)
 80159b4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80159b8:	2320      	movs	r3, #32
 80159ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159be:	4b28      	ldr	r3, [pc, #160]	; (8015a60 <LoRaMacInitialization+0x384>)
 80159c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159c8:	4611      	mov	r1, r2
 80159ca:	4618      	mov	r0, r3
 80159cc:	f003 fb67 	bl	801909e <RegionGetPhyParam>
 80159d0:	4603      	mov	r3, r0
 80159d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80159d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d6:	4a22      	ldr	r2, [pc, #136]	; (8015a60 <LoRaMacInitialization+0x384>)
 80159d8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80159dc:	230b      	movs	r3, #11
 80159de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159e2:	4b1f      	ldr	r3, [pc, #124]	; (8015a60 <LoRaMacInitialization+0x384>)
 80159e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159ec:	4611      	mov	r1, r2
 80159ee:	4618      	mov	r0, r3
 80159f0:	f003 fb55 	bl	801909e <RegionGetPhyParam>
 80159f4:	4603      	mov	r3, r0
 80159f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80159f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159fa:	b29a      	uxth	r2, r3
 80159fc:	4b18      	ldr	r3, [pc, #96]	; (8015a60 <LoRaMacInitialization+0x384>)
 80159fe:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8015a02:	230c      	movs	r3, #12
 8015a04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015a08:	4b15      	ldr	r3, [pc, #84]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015a12:	4611      	mov	r1, r2
 8015a14:	4618      	mov	r0, r3
 8015a16:	f003 fb42 	bl	801909e <RegionGetPhyParam>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8015a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	4b0f      	ldr	r3, [pc, #60]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a24:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8015a28:	4b0d      	ldr	r3, [pc, #52]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a2a:	2201      	movs	r2, #1
 8015a2c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8015a30:	4b0b      	ldr	r3, [pc, #44]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a32:	220a      	movs	r2, #10
 8015a34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8015a38:	4b09      	ldr	r3, [pc, #36]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a3a:	2206      	movs	r2, #6
 8015a3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8015a40:	4b07      	ldr	r3, [pc, #28]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015a46:	4a06      	ldr	r2, [pc, #24]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a48:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8015a4a:	4b05      	ldr	r3, [pc, #20]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a4c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015a50:	4b03      	ldr	r3, [pc, #12]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8015a56:	4b02      	ldr	r3, [pc, #8]	; (8015a60 <LoRaMacInitialization+0x384>)
 8015a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015a5c:	e00c      	b.n	8015a78 <LoRaMacInitialization+0x39c>
 8015a5e:	bf00      	nop
 8015a60:	20000e18 	.word	0x20000e18
 8015a64:	200008fc 	.word	0x200008fc
 8015a68:	01000400 	.word	0x01000400
 8015a6c:	2000103c 	.word	0x2000103c
 8015a70:	20001050 	.word	0x20001050
 8015a74:	200019b0 	.word	0x200019b0
 8015a78:	4a5f      	ldr	r2, [pc, #380]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a7a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8015a7c:	4b5e      	ldr	r3, [pc, #376]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015a82:	4a5d      	ldr	r2, [pc, #372]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a84:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8015a86:	4b5c      	ldr	r3, [pc, #368]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015a8c:	4a5a      	ldr	r2, [pc, #360]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a8e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8015a90:	4b59      	ldr	r3, [pc, #356]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015a96:	4a58      	ldr	r2, [pc, #352]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a98:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8015a9a:	4b57      	ldr	r3, [pc, #348]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015a9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015aa0:	4a55      	ldr	r2, [pc, #340]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015aa2:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8015aa4:	4b54      	ldr	r3, [pc, #336]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015aa6:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8015aaa:	4b53      	ldr	r3, [pc, #332]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015aac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8015ab0:	4b51      	ldr	r3, [pc, #324]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8015ab8:	4a50      	ldr	r2, [pc, #320]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	f7ff f869 	bl	8014b98 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8015ac6:	4b4c      	ldr	r3, [pc, #304]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015ac8:	2201      	movs	r2, #1
 8015aca:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8015ace:	4a4b      	ldr	r2, [pc, #300]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8015ad6:	4b49      	ldr	r3, [pc, #292]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015ad8:	2200      	movs	r2, #0
 8015ada:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8015ade:	4b47      	ldr	r3, [pc, #284]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015ae0:	2201      	movs	r2, #1
 8015ae2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8015ae6:	4b44      	ldr	r3, [pc, #272]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015ae8:	2200      	movs	r2, #0
 8015aea:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8015aec:	4b42      	ldr	r3, [pc, #264]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015aee:	2200      	movs	r2, #0
 8015af0:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8015af2:	2300      	movs	r3, #0
 8015af4:	9300      	str	r3, [sp, #0]
 8015af6:	4b42      	ldr	r3, [pc, #264]	; (8015c00 <LoRaMacInitialization+0x524>)
 8015af8:	2200      	movs	r2, #0
 8015afa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015afe:	4841      	ldr	r0, [pc, #260]	; (8015c04 <LoRaMacInitialization+0x528>)
 8015b00:	f009 ff9c 	bl	801fa3c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8015b04:	2300      	movs	r3, #0
 8015b06:	9300      	str	r3, [sp, #0]
 8015b08:	4b3f      	ldr	r3, [pc, #252]	; (8015c08 <LoRaMacInitialization+0x52c>)
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b10:	483e      	ldr	r0, [pc, #248]	; (8015c0c <LoRaMacInitialization+0x530>)
 8015b12:	f009 ff93 	bl	801fa3c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8015b16:	2300      	movs	r3, #0
 8015b18:	9300      	str	r3, [sp, #0]
 8015b1a:	4b3d      	ldr	r3, [pc, #244]	; (8015c10 <LoRaMacInitialization+0x534>)
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b22:	483c      	ldr	r0, [pc, #240]	; (8015c14 <LoRaMacInitialization+0x538>)
 8015b24:	f009 ff8a 	bl	801fa3c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8015b28:	2300      	movs	r3, #0
 8015b2a:	9300      	str	r3, [sp, #0]
 8015b2c:	4b3a      	ldr	r3, [pc, #232]	; (8015c18 <LoRaMacInitialization+0x53c>)
 8015b2e:	2200      	movs	r2, #0
 8015b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b34:	4839      	ldr	r0, [pc, #228]	; (8015c1c <LoRaMacInitialization+0x540>)
 8015b36:	f009 ff81 	bl	801fa3c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8015b3a:	4c2f      	ldr	r4, [pc, #188]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015b3c:	463b      	mov	r3, r7
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f009 fad0 	bl	801f0e4 <SysTimeGetMcuTime>
 8015b44:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8015b48:	463a      	mov	r2, r7
 8015b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015b4e:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8015b52:	4b33      	ldr	r3, [pc, #204]	; (8015c20 <LoRaMacInitialization+0x544>)
 8015b54:	2200      	movs	r2, #0
 8015b56:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8015b58:	4b28      	ldr	r3, [pc, #160]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015b5a:	4a32      	ldr	r2, [pc, #200]	; (8015c24 <LoRaMacInitialization+0x548>)
 8015b5c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8015b60:	4b26      	ldr	r3, [pc, #152]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015b62:	4a31      	ldr	r2, [pc, #196]	; (8015c28 <LoRaMacInitialization+0x54c>)
 8015b64:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8015b68:	4b24      	ldr	r3, [pc, #144]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015b6a:	4a30      	ldr	r2, [pc, #192]	; (8015c2c <LoRaMacInitialization+0x550>)
 8015b6c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8015b70:	4b22      	ldr	r3, [pc, #136]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015b72:	4a2f      	ldr	r2, [pc, #188]	; (8015c30 <LoRaMacInitialization+0x554>)
 8015b74:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8015b78:	4b20      	ldr	r3, [pc, #128]	; (8015bfc <LoRaMacInitialization+0x520>)
 8015b7a:	4a2e      	ldr	r2, [pc, #184]	; (8015c34 <LoRaMacInitialization+0x558>)
 8015b7c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8015b80:	4b2d      	ldr	r3, [pc, #180]	; (8015c38 <LoRaMacInitialization+0x55c>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	482d      	ldr	r0, [pc, #180]	; (8015c3c <LoRaMacInitialization+0x560>)
 8015b86:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8015b88:	482d      	ldr	r0, [pc, #180]	; (8015c40 <LoRaMacInitialization+0x564>)
 8015b8a:	f7fa f9f9 	bl	800ff80 <SecureElementInit>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d001      	beq.n	8015b98 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015b94:	2311      	movs	r3, #17
 8015b96:	e02b      	b.n	8015bf0 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8015b98:	4817      	ldr	r0, [pc, #92]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015b9a:	f002 fbc1 	bl	8018320 <LoRaMacCryptoInit>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d001      	beq.n	8015ba8 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015ba4:	2311      	movs	r3, #17
 8015ba6:	e023      	b.n	8015bf0 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8015ba8:	f001 fcbc 	bl	8017524 <LoRaMacCommandsInit>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d001      	beq.n	8015bb6 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015bb2:	2313      	movs	r3, #19
 8015bb4:	e01c      	b.n	8015bf0 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8015bb6:	4823      	ldr	r0, [pc, #140]	; (8015c44 <LoRaMacInitialization+0x568>)
 8015bb8:	f002 fc52 	bl	8018460 <LoRaMacCryptoSetMulticastReference>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d001      	beq.n	8015bc6 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015bc2:	2311      	movs	r3, #17
 8015bc4:	e014      	b.n	8015bf0 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8015bc6:	4b1c      	ldr	r3, [pc, #112]	; (8015c38 <LoRaMacInitialization+0x55c>)
 8015bc8:	695b      	ldr	r3, [r3, #20]
 8015bca:	4798      	blx	r3
 8015bcc:	4603      	mov	r3, r0
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f005 fdf8 	bl	801b7c4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8015bd4:	4b18      	ldr	r3, [pc, #96]	; (8015c38 <LoRaMacInitialization+0x55c>)
 8015bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bd8:	4a07      	ldr	r2, [pc, #28]	; (8015bf8 <LoRaMacInitialization+0x51c>)
 8015bda:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8015bde:	4610      	mov	r0, r2
 8015be0:	4798      	blx	r3
    Radio.Sleep( );
 8015be2:	4b15      	ldr	r3, [pc, #84]	; (8015c38 <LoRaMacInitialization+0x55c>)
 8015be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015be6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8015be8:	2001      	movs	r0, #1
 8015bea:	f7fd fa7d 	bl	80130e8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8015bee:	2300      	movs	r3, #0
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	373c      	adds	r7, #60	; 0x3c
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd90      	pop	{r4, r7, pc}
 8015bf8:	20000e18 	.word	0x20000e18
 8015bfc:	200008fc 	.word	0x200008fc
 8015c00:	08013675 	.word	0x08013675
 8015c04:	20000c64 	.word	0x20000c64
 8015c08:	08013705 	.word	0x08013705
 8015c0c:	20000c7c 	.word	0x20000c7c
 8015c10:	0801377d 	.word	0x0801377d
 8015c14:	20000c94 	.word	0x20000c94
 8015c18:	080137fd 	.word	0x080137fd
 8015c1c:	20000cfc 	.word	0x20000cfc
 8015c20:	20001a40 	.word	0x20001a40
 8015c24:	08012125 	.word	0x08012125
 8015c28:	08012181 	.word	0x08012181
 8015c2c:	08012221 	.word	0x08012221
 8015c30:	080121f5 	.word	0x080121f5
 8015c34:	0801223d 	.word	0x0801223d
 8015c38:	08021df4 	.word	0x08021df4
 8015c3c:	20000c48 	.word	0x20000c48
 8015c40:	20000f64 	.word	0x20000f64
 8015c44:	20000f00 	.word	0x20000f00

08015c48 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8015c4c:	4b04      	ldr	r3, [pc, #16]	; (8015c60 <LoRaMacStart+0x18>)
 8015c4e:	2200      	movs	r2, #0
 8015c50:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8015c54:	f7fc fb08 	bl	8012268 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8015c58:	2300      	movs	r3, #0
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	200008fc 	.word	0x200008fc

08015c64 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8015c68:	f7fd fa06 	bl	8013078 <LoRaMacIsBusy>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	f083 0301 	eor.w	r3, r3, #1
 8015c72:	b2db      	uxtb	r3, r3
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00d      	beq.n	8015c94 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8015c78:	4b0b      	ldr	r3, [pc, #44]	; (8015ca8 <LoRaMacStop+0x44>)
 8015c7a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015c7e:	2b02      	cmp	r3, #2
 8015c80:	d102      	bne.n	8015c88 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8015c82:	4b0a      	ldr	r3, [pc, #40]	; (8015cac <LoRaMacStop+0x48>)
 8015c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c86:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8015c88:	4b09      	ldr	r3, [pc, #36]	; (8015cb0 <LoRaMacStop+0x4c>)
 8015c8a:	2201      	movs	r2, #1
 8015c8c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8015c90:	2300      	movs	r3, #0
 8015c92:	e007      	b.n	8015ca4 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8015c94:	4b06      	ldr	r3, [pc, #24]	; (8015cb0 <LoRaMacStop+0x4c>)
 8015c96:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015c9a:	2b01      	cmp	r3, #1
 8015c9c:	d101      	bne.n	8015ca2 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	e000      	b.n	8015ca4 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8015ca2:	2301      	movs	r3, #1
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	bd80      	pop	{r7, pc}
 8015ca8:	20000e18 	.word	0x20000e18
 8015cac:	08021df4 	.word	0x08021df4
 8015cb0:	200008fc 	.word	0x200008fc

08015cb4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8015cb8:	4812      	ldr	r0, [pc, #72]	; (8015d04 <LoRaMacHalt+0x50>)
 8015cba:	f009 ff63 	bl	801fb84 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8015cbe:	4812      	ldr	r0, [pc, #72]	; (8015d08 <LoRaMacHalt+0x54>)
 8015cc0:	f009 ff60 	bl	801fb84 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8015cc4:	4811      	ldr	r0, [pc, #68]	; (8015d0c <LoRaMacHalt+0x58>)
 8015cc6:	f009 ff5d 	bl	801fb84 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8015cca:	4811      	ldr	r0, [pc, #68]	; (8015d10 <LoRaMacHalt+0x5c>)
 8015ccc:	f009 ff5a 	bl	801fb84 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8015cd0:	f001 fa8c 	bl	80171ec <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8015cd4:	4b0f      	ldr	r3, [pc, #60]	; (8015d14 <LoRaMacHalt+0x60>)
 8015cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8015cda:	4b0f      	ldr	r3, [pc, #60]	; (8015d18 <LoRaMacHalt+0x64>)
 8015cdc:	2200      	movs	r2, #0
 8015cde:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8015ce2:	480e      	ldr	r0, [pc, #56]	; (8015d1c <LoRaMacHalt+0x68>)
 8015ce4:	f7fd fba2 	bl	801342c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8015ce8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8015cec:	490b      	ldr	r1, [pc, #44]	; (8015d1c <LoRaMacHalt+0x68>)
 8015cee:	480c      	ldr	r0, [pc, #48]	; (8015d20 <LoRaMacHalt+0x6c>)
 8015cf0:	f005 fd8d 	bl	801b80e <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8015cf4:	4b08      	ldr	r3, [pc, #32]	; (8015d18 <LoRaMacHalt+0x64>)
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8015cfc:	2300      	movs	r3, #0
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	20000c64 	.word	0x20000c64
 8015d08:	20000c7c 	.word	0x20000c7c
 8015d0c:	20000c94 	.word	0x20000c94
 8015d10:	20000cfc 	.word	0x20000cfc
 8015d14:	08021df4 	.word	0x08021df4
 8015d18:	200008fc 	.word	0x200008fc
 8015d1c:	20000e18 	.word	0x20000e18
 8015d20:	200013e4 	.word	0x200013e4

08015d24 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8015d24:	b590      	push	{r4, r7, lr}
 8015d26:	b08d      	sub	sp, #52	; 0x34
 8015d28:	af02      	add	r7, sp, #8
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	6039      	str	r1, [r7, #0]
 8015d2e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8015d30:	4b42      	ldr	r3, [pc, #264]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d34:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8015d36:	4b41      	ldr	r3, [pc, #260]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d38:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8015d3c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015d3e:	4b3f      	ldr	r3, [pc, #252]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d40:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8015d44:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8015d46:	4b3e      	ldr	r3, [pc, #248]	; (8015e40 <LoRaMacQueryTxPossible+0x11c>)
 8015d48:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015d4c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015d58:	2303      	movs	r3, #3
 8015d5a:	e06b      	b.n	8015e34 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8015d60:	4b36      	ldr	r3, [pc, #216]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d62:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015d66:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8015d68:	4b34      	ldr	r3, [pc, #208]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d6c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8015d6e:	4b33      	ldr	r3, [pc, #204]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d70:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8015d74:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8015d76:	4b31      	ldr	r3, [pc, #196]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d78:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8015d7c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015d7e:	4b2f      	ldr	r3, [pc, #188]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d80:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015d84:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015d88:	4b2c      	ldr	r3, [pc, #176]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d8a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8015d8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8015d92:	4b2b      	ldr	r3, [pc, #172]	; (8015e40 <LoRaMacQueryTxPossible+0x11c>)
 8015d94:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015d9c:	4b27      	ldr	r3, [pc, #156]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015d9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8015da6:	4b25      	ldr	r3, [pc, #148]	; (8015e3c <LoRaMacQueryTxPossible+0x118>)
 8015da8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015dac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8015db0:	f107 040d 	add.w	r4, r7, #13
 8015db4:	f107 020e 	add.w	r2, r7, #14
 8015db8:	f107 010f 	add.w	r1, r7, #15
 8015dbc:	f107 0014 	add.w	r0, r7, #20
 8015dc0:	f107 0310 	add.w	r3, r7, #16
 8015dc4:	9300      	str	r3, [sp, #0]
 8015dc6:	4623      	mov	r3, r4
 8015dc8:	f001 f8da 	bl	8016f80 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8015dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7fd fe59 	bl	8013a88 <GetMaxAppPayloadWithoutFOptsLength>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	461a      	mov	r2, r3
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015dde:	f107 0308 	add.w	r3, r7, #8
 8015de2:	4618      	mov	r0, r3
 8015de4:	f001 fca4 	bl	8017730 <LoRaMacCommandsGetSizeSerializedCmds>
 8015de8:	4603      	mov	r3, r0
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d001      	beq.n	8015df2 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015dee:	2313      	movs	r3, #19
 8015df0:	e020      	b.n	8015e34 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	2b0f      	cmp	r3, #15
 8015df6:	d819      	bhi.n	8015e2c <LoRaMacQueryTxPossible+0x108>
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	785b      	ldrb	r3, [r3, #1]
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d313      	bcc.n	8015e2c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	785a      	ldrb	r2, [r3, #1]
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	1ad3      	subs	r3, r2, r3
 8015e0e:	b2da      	uxtb	r2, r3
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	785b      	ldrb	r3, [r3, #1]
 8015e18:	4619      	mov	r1, r3
 8015e1a:	79fa      	ldrb	r2, [r7, #7]
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	4413      	add	r3, r2
 8015e20:	4299      	cmp	r1, r3
 8015e22:	d301      	bcc.n	8015e28 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8015e24:	2300      	movs	r3, #0
 8015e26:	e005      	b.n	8015e34 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8015e28:	2308      	movs	r3, #8
 8015e2a:	e003      	b.n	8015e34 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8015e32:	2308      	movs	r3, #8
    }
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	372c      	adds	r7, #44	; 0x2c
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd90      	pop	{r4, r7, pc}
 8015e3c:	20000e18 	.word	0x20000e18
 8015e40:	200008fc 	.word	0x200008fc

08015e44 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8015e44:	b590      	push	{r4, r7, lr}
 8015e46:	b087      	sub	sp, #28
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d101      	bne.n	8015e5a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e56:	2303      	movs	r3, #3
 8015e58:	e1c4      	b.n	80161e4 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	2b41      	cmp	r3, #65	; 0x41
 8015e60:	f200 81b9 	bhi.w	80161d6 <LoRaMacMibGetRequestConfirm+0x392>
 8015e64:	a201      	add	r2, pc, #4	; (adr r2, 8015e6c <LoRaMacMibGetRequestConfirm+0x28>)
 8015e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e6a:	bf00      	nop
 8015e6c:	08015f75 	.word	0x08015f75
 8015e70:	08015f81 	.word	0x08015f81
 8015e74:	08015f8d 	.word	0x08015f8d
 8015e78:	08015f99 	.word	0x08015f99
 8015e7c:	08015fa5 	.word	0x08015fa5
 8015e80:	08015fb1 	.word	0x08015fb1
 8015e84:	08015fbd 	.word	0x08015fbd
 8015e88:	080161d7 	.word	0x080161d7
 8015e8c:	080161d7 	.word	0x080161d7
 8015e90:	080161d7 	.word	0x080161d7
 8015e94:	080161d7 	.word	0x080161d7
 8015e98:	080161d7 	.word	0x080161d7
 8015e9c:	080161d7 	.word	0x080161d7
 8015ea0:	080161d7 	.word	0x080161d7
 8015ea4:	080161d7 	.word	0x080161d7
 8015ea8:	08015fd1 	.word	0x08015fd1
 8015eac:	08015fdd 	.word	0x08015fdd
 8015eb0:	08015fe9 	.word	0x08015fe9
 8015eb4:	0801600b 	.word	0x0801600b
 8015eb8:	0801601d 	.word	0x0801601d
 8015ebc:	0801602f 	.word	0x0801602f
 8015ec0:	08016041 	.word	0x08016041
 8015ec4:	08016075 	.word	0x08016075
 8015ec8:	08016053 	.word	0x08016053
 8015ecc:	08016097 	.word	0x08016097
 8015ed0:	080160a3 	.word	0x080160a3
 8015ed4:	080160ad 	.word	0x080160ad
 8015ed8:	080160b7 	.word	0x080160b7
 8015edc:	080160c1 	.word	0x080160c1
 8015ee0:	080160cb 	.word	0x080160cb
 8015ee4:	080160d5 	.word	0x080160d5
 8015ee8:	08016101 	.word	0x08016101
 8015eec:	0801610d 	.word	0x0801610d
 8015ef0:	08016125 	.word	0x08016125
 8015ef4:	08016119 	.word	0x08016119
 8015ef8:	08016131 	.word	0x08016131
 8015efc:	0801613b 	.word	0x0801613b
 8015f00:	08016147 	.word	0x08016147
 8015f04:	08016163 	.word	0x08016163
 8015f08:	08016153 	.word	0x08016153
 8015f0c:	0801615b 	.word	0x0801615b
 8015f10:	080161d7 	.word	0x080161d7
 8015f14:	0801616f 	.word	0x0801616f
 8015f18:	080161d7 	.word	0x080161d7
 8015f1c:	080161d7 	.word	0x080161d7
 8015f20:	080161d7 	.word	0x080161d7
 8015f24:	080161d7 	.word	0x080161d7
 8015f28:	080161d7 	.word	0x080161d7
 8015f2c:	080161d7 	.word	0x080161d7
 8015f30:	080161d7 	.word	0x080161d7
 8015f34:	080161d7 	.word	0x080161d7
 8015f38:	080161d7 	.word	0x080161d7
 8015f3c:	080161d7 	.word	0x080161d7
 8015f40:	080161d7 	.word	0x080161d7
 8015f44:	080161d7 	.word	0x080161d7
 8015f48:	080161d7 	.word	0x080161d7
 8015f4c:	080161d7 	.word	0x080161d7
 8015f50:	080161d7 	.word	0x080161d7
 8015f54:	08016183 	.word	0x08016183
 8015f58:	0801618f 	.word	0x0801618f
 8015f5c:	0801619b 	.word	0x0801619b
 8015f60:	080161a7 	.word	0x080161a7
 8015f64:	080161b3 	.word	0x080161b3
 8015f68:	080161bf 	.word	0x080161bf
 8015f6c:	080161cb 	.word	0x080161cb
 8015f70:	080161d1 	.word	0x080161d1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8015f74:	4b9d      	ldr	r3, [pc, #628]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015f76:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	711a      	strb	r2, [r3, #4]
            break;
 8015f7e:	e130      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8015f80:	4b9a      	ldr	r3, [pc, #616]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015f82:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	711a      	strb	r2, [r3, #4]
            break;
 8015f8a:	e12a      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	685b      	ldr	r3, [r3, #4]
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7fa fab5 	bl	8010500 <SecureElementGetDevEui>
            break;
 8015f96:	e124      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7fa fadf 	bl	8010560 <SecureElementGetJoinEui>
            break;
 8015fa2:	e11e      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8015fa4:	4b91      	ldr	r3, [pc, #580]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fa6:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	711a      	strb	r2, [r3, #4]
            break;
 8015fae:	e118      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8015fb0:	4b8e      	ldr	r3, [pc, #568]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	605a      	str	r2, [r3, #4]
            break;
 8015fba:	e112      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8015fbc:	4b8b      	ldr	r3, [pc, #556]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fbe:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	3304      	adds	r3, #4
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	4610      	mov	r0, r2
 8015fca:	f7fa fafb 	bl	80105c4 <SecureElementGetDevAddr>
            break;
 8015fce:	e108      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8015fd0:	4b86      	ldr	r3, [pc, #536]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fd2:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	711a      	strb	r2, [r3, #4]
            break;
 8015fda:	e102      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8015fdc:	4b83      	ldr	r3, [pc, #524]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fde:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	711a      	strb	r2, [r3, #4]
            break;
 8015fe6:	e0fc      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8015fe8:	231c      	movs	r3, #28
 8015fea:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015fec:	4b7f      	ldr	r3, [pc, #508]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015ff2:	f107 0210 	add.w	r2, r7, #16
 8015ff6:	4611      	mov	r1, r2
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f003 f850 	bl	801909e <RegionGetPhyParam>
 8015ffe:	4603      	mov	r3, r0
 8016000:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8016002:	68fa      	ldr	r2, [r7, #12]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	605a      	str	r2, [r3, #4]
            break;
 8016008:	e0eb      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	4a77      	ldr	r2, [pc, #476]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 801600e:	3304      	adds	r3, #4
 8016010:	326c      	adds	r2, #108	; 0x6c
 8016012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016016:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801601a:	e0e2      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4a73      	ldr	r2, [pc, #460]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016020:	3304      	adds	r3, #4
 8016022:	32b4      	adds	r2, #180	; 0xb4
 8016024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016028:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801602c:	e0d9      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	4a6e      	ldr	r2, [pc, #440]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016032:	3304      	adds	r3, #4
 8016034:	3274      	adds	r2, #116	; 0x74
 8016036:	e892 0003 	ldmia.w	r2, {r0, r1}
 801603a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801603e:	e0d0      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	4a6a      	ldr	r2, [pc, #424]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016044:	3304      	adds	r3, #4
 8016046:	32bc      	adds	r2, #188	; 0xbc
 8016048:	e892 0003 	ldmia.w	r2, {r0, r1}
 801604c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016050:	e0c7      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8016052:	231a      	movs	r3, #26
 8016054:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016056:	4b65      	ldr	r3, [pc, #404]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016058:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801605c:	f107 0210 	add.w	r2, r7, #16
 8016060:	4611      	mov	r1, r2
 8016062:	4618      	mov	r0, r3
 8016064:	f003 f81b 	bl	801909e <RegionGetPhyParam>
 8016068:	4603      	mov	r3, r0
 801606a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801606c:	68fa      	ldr	r2, [r7, #12]
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	605a      	str	r2, [r3, #4]
            break;
 8016072:	e0b6      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8016074:	2319      	movs	r3, #25
 8016076:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016078:	4b5c      	ldr	r3, [pc, #368]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 801607a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801607e:	f107 0210 	add.w	r2, r7, #16
 8016082:	4611      	mov	r1, r2
 8016084:	4618      	mov	r0, r3
 8016086:	f003 f80a 	bl	801909e <RegionGetPhyParam>
 801608a:	4603      	mov	r3, r0
 801608c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801608e:	68fa      	ldr	r2, [r7, #12]
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	605a      	str	r2, [r3, #4]
            break;
 8016094:	e0a5      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8016096:	4b55      	ldr	r3, [pc, #340]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016098:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	711a      	strb	r2, [r3, #4]
            break;
 80160a0:	e09f      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80160a2:	4b52      	ldr	r3, [pc, #328]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	605a      	str	r2, [r3, #4]
            break;
 80160aa:	e09a      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80160ac:	4b4f      	ldr	r3, [pc, #316]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	605a      	str	r2, [r3, #4]
            break;
 80160b4:	e095      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80160b6:	4b4d      	ldr	r3, [pc, #308]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	605a      	str	r2, [r3, #4]
            break;
 80160be:	e090      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80160c0:	4b4a      	ldr	r3, [pc, #296]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	605a      	str	r2, [r3, #4]
            break;
 80160c8:	e08b      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80160ca:	4b48      	ldr	r3, [pc, #288]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	605a      	str	r2, [r3, #4]
            break;
 80160d2:	e086      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80160d4:	2302      	movs	r3, #2
 80160d6:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80160d8:	4b44      	ldr	r3, [pc, #272]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80160de:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80160e0:	4b42      	ldr	r3, [pc, #264]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80160e6:	f107 0210 	add.w	r2, r7, #16
 80160ea:	4611      	mov	r1, r2
 80160ec:	4618      	mov	r0, r3
 80160ee:	f002 ffd6 	bl	801909e <RegionGetPhyParam>
 80160f2:	4603      	mov	r3, r0
 80160f4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	b25a      	sxtb	r2, r3
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	711a      	strb	r2, [r3, #4]
            break;
 80160fe:	e070      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8016100:	4b3a      	ldr	r3, [pc, #232]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016102:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	711a      	strb	r2, [r3, #4]
            break;
 801610a:	e06a      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801610c:	4b37      	ldr	r3, [pc, #220]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 801610e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	711a      	strb	r2, [r3, #4]
            break;
 8016116:	e064      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8016118:	4b34      	ldr	r3, [pc, #208]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 801611a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	711a      	strb	r2, [r3, #4]
            break;
 8016122:	e05e      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8016124:	4b31      	ldr	r3, [pc, #196]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016126:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	711a      	strb	r2, [r3, #4]
            break;
 801612e:	e058      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8016130:	4b2e      	ldr	r3, [pc, #184]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	605a      	str	r2, [r3, #4]
            break;
 8016138:	e053      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801613a:	4b2c      	ldr	r3, [pc, #176]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 801613c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	711a      	strb	r2, [r3, #4]
            break;
 8016144:	e04d      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8016146:	4b29      	ldr	r3, [pc, #164]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016148:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	605a      	str	r2, [r3, #4]
            break;
 8016150:	e047      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	4a25      	ldr	r2, [pc, #148]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016156:	605a      	str	r2, [r3, #4]
            break;
 8016158:	e043      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	4a24      	ldr	r2, [pc, #144]	; (80161f0 <LoRaMacMibGetRequestConfirm+0x3ac>)
 801615e:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8016160:	e03f      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8016162:	4b22      	ldr	r3, [pc, #136]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016164:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	605a      	str	r2, [r3, #4]
            break;
 801616c:	e039      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	4a1e      	ldr	r2, [pc, #120]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016172:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8016176:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8016178:	687c      	ldr	r4, [r7, #4]
 801617a:	f003 f907 	bl	801938c <RegionGetVersion>
 801617e:	60a0      	str	r0, [r4, #8]
            break;
 8016180:	e02f      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8016182:	4b1a      	ldr	r3, [pc, #104]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016184:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	605a      	str	r2, [r3, #4]
            break;
 801618c:	e029      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801618e:	4b17      	ldr	r3, [pc, #92]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016190:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	711a      	strb	r2, [r3, #4]
            break;
 8016198:	e023      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801619a:	4b14      	ldr	r3, [pc, #80]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 801619c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	809a      	strh	r2, [r3, #4]
            break;
 80161a4:	e01d      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80161a6:	4b11      	ldr	r3, [pc, #68]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161a8:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	809a      	strh	r2, [r3, #4]
            break;
 80161b0:	e017      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80161b2:	4b0e      	ldr	r3, [pc, #56]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161b4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	809a      	strh	r2, [r3, #4]
            break;
 80161bc:	e011      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80161be:	4b0b      	ldr	r3, [pc, #44]	; (80161ec <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161c0:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	809a      	strh	r2, [r3, #4]
            break;
 80161c8:	e00b      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80161ca:	2318      	movs	r3, #24
 80161cc:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80161ce:	e008      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80161d0:	2318      	movs	r3, #24
 80161d2:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80161d4:	e005      	b.n	80161e2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f001 f81f 	bl	801721a <LoRaMacClassBMibGetRequestConfirm>
 80161dc:	4603      	mov	r3, r0
 80161de:	75fb      	strb	r3, [r7, #23]
            break;
 80161e0:	bf00      	nop
        }
    }
    return status;
 80161e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	371c      	adds	r7, #28
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd90      	pop	{r4, r7, pc}
 80161ec:	20000e18 	.word	0x20000e18
 80161f0:	200013e4 	.word	0x200013e4

080161f4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b086      	sub	sp, #24
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80161fc:	2300      	movs	r3, #0
 80161fe:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d101      	bne.n	801620a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016206:	2303      	movs	r3, #3
 8016208:	e396      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801620a:	4bbd      	ldr	r3, [pc, #756]	; (8016500 <LoRaMacMibSetRequestConfirm+0x30c>)
 801620c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8016210:	f003 0302 	and.w	r3, r3, #2
 8016214:	2b00      	cmp	r3, #0
 8016216:	d001      	beq.n	801621c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8016218:	2301      	movs	r3, #1
 801621a:	e38d      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	2b41      	cmp	r3, #65	; 0x41
 8016222:	f200 835d 	bhi.w	80168e0 <LoRaMacMibSetRequestConfirm+0x6ec>
 8016226:	a201      	add	r2, pc, #4	; (adr r2, 801622c <LoRaMacMibSetRequestConfirm+0x38>)
 8016228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801622c:	08016335 	.word	0x08016335
 8016230:	08016345 	.word	0x08016345
 8016234:	0801635f 	.word	0x0801635f
 8016238:	08016377 	.word	0x08016377
 801623c:	0801638f 	.word	0x0801638f
 8016240:	0801639b 	.word	0x0801639b
 8016244:	080163a7 	.word	0x080163a7
 8016248:	080163d1 	.word	0x080163d1
 801624c:	080163f7 	.word	0x080163f7
 8016250:	0801641d 	.word	0x0801641d
 8016254:	08016443 	.word	0x08016443
 8016258:	08016469 	.word	0x08016469
 801625c:	0801648f 	.word	0x0801648f
 8016260:	080164b5 	.word	0x080164b5
 8016264:	080164db 	.word	0x080164db
 8016268:	08016509 	.word	0x08016509
 801626c:	08016529 	.word	0x08016529
 8016270:	080168e1 	.word	0x080168e1
 8016274:	08016535 	.word	0x08016535
 8016278:	080165a5 	.word	0x080165a5
 801627c:	080165e5 	.word	0x080165e5
 8016280:	08016647 	.word	0x08016647
 8016284:	080166b7 	.word	0x080166b7
 8016288:	08016687 	.word	0x08016687
 801628c:	080166e7 	.word	0x080166e7
 8016290:	08016709 	.word	0x08016709
 8016294:	08016713 	.word	0x08016713
 8016298:	0801671d 	.word	0x0801671d
 801629c:	08016727 	.word	0x08016727
 80162a0:	08016731 	.word	0x08016731
 80162a4:	080168e1 	.word	0x080168e1
 80162a8:	0801673b 	.word	0x0801673b
 80162ac:	0801676d 	.word	0x0801676d
 80162b0:	080167e1 	.word	0x080167e1
 80162b4:	080167a7 	.word	0x080167a7
 80162b8:	08016813 	.word	0x08016813
 80162bc:	08016829 	.word	0x08016829
 80162c0:	08016841 	.word	0x08016841
 80162c4:	0801684d 	.word	0x0801684d
 80162c8:	08016859 	.word	0x08016859
 80162cc:	080168e1 	.word	0x080168e1
 80162d0:	08016863 	.word	0x08016863
 80162d4:	080168e1 	.word	0x080168e1
 80162d8:	080168e1 	.word	0x080168e1
 80162dc:	080168e1 	.word	0x080168e1
 80162e0:	080168e1 	.word	0x080168e1
 80162e4:	080168e1 	.word	0x080168e1
 80162e8:	080168e1 	.word	0x080168e1
 80162ec:	080168e1 	.word	0x080168e1
 80162f0:	080168e1 	.word	0x080168e1
 80162f4:	080168e1 	.word	0x080168e1
 80162f8:	080168e1 	.word	0x080168e1
 80162fc:	080168e1 	.word	0x080168e1
 8016300:	080168e1 	.word	0x080168e1
 8016304:	080168e1 	.word	0x080168e1
 8016308:	080168e1 	.word	0x080168e1
 801630c:	080168e1 	.word	0x080168e1
 8016310:	080168e1 	.word	0x080168e1
 8016314:	0801688d 	.word	0x0801688d
 8016318:	08016899 	.word	0x08016899
 801631c:	080168a5 	.word	0x080168a5
 8016320:	080168b1 	.word	0x080168b1
 8016324:	080168bd 	.word	0x080168bd
 8016328:	080168c9 	.word	0x080168c9
 801632c:	080168d5 	.word	0x080168d5
 8016330:	080168db 	.word	0x080168db
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	791b      	ldrb	r3, [r3, #4]
 8016338:	4618      	mov	r0, r3
 801633a:	f7fd fabb 	bl	80138b4 <SwitchClass>
 801633e:	4603      	mov	r3, r0
 8016340:	75fb      	strb	r3, [r7, #23]
            break;
 8016342:	e2ee      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	791b      	ldrb	r3, [r3, #4]
 8016348:	2b02      	cmp	r3, #2
 801634a:	d005      	beq.n	8016358 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	791a      	ldrb	r2, [r3, #4]
 8016350:	4b6c      	ldr	r3, [pc, #432]	; (8016504 <LoRaMacMibSetRequestConfirm+0x310>)
 8016352:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016356:	e2e4      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016358:	2303      	movs	r3, #3
 801635a:	75fb      	strb	r3, [r7, #23]
            break;
 801635c:	e2e1      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	4618      	mov	r0, r3
 8016364:	f7fa f8b4 	bl	80104d0 <SecureElementSetDevEui>
 8016368:	4603      	mov	r3, r0
 801636a:	2b00      	cmp	r3, #0
 801636c:	f000 82be 	beq.w	80168ec <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016370:	2303      	movs	r3, #3
 8016372:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016374:	e2ba      	b.n	80168ec <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	685b      	ldr	r3, [r3, #4]
 801637a:	4618      	mov	r0, r3
 801637c:	f7fa f8d8 	bl	8010530 <SecureElementSetJoinEui>
 8016380:	4603      	mov	r3, r0
 8016382:	2b00      	cmp	r3, #0
 8016384:	f000 82b4 	beq.w	80168f0 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016388:	2303      	movs	r3, #3
 801638a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801638c:	e2b0      	b.n	80168f0 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	791a      	ldrb	r2, [r3, #4]
 8016392:	4b5c      	ldr	r3, [pc, #368]	; (8016504 <LoRaMacMibSetRequestConfirm+0x310>)
 8016394:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8016398:	e2c3      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	4a59      	ldr	r2, [pc, #356]	; (8016504 <LoRaMacMibSetRequestConfirm+0x310>)
 80163a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80163a4:	e2bd      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80163a6:	4b57      	ldr	r3, [pc, #348]	; (8016504 <LoRaMacMibSetRequestConfirm+0x310>)
 80163a8:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	4619      	mov	r1, r3
 80163b2:	4610      	mov	r0, r2
 80163b4:	f7fa f8ec 	bl	8010590 <SecureElementSetDevAddr>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d002      	beq.n	80163c4 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80163be:	2303      	movs	r3, #3
 80163c0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80163c2:	e2ae      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	4a4e      	ldr	r2, [pc, #312]	; (8016504 <LoRaMacMibSetRequestConfirm+0x310>)
 80163ca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80163ce:	e2a8      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d00b      	beq.n	80163f0 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	4619      	mov	r1, r3
 80163de:	2000      	movs	r0, #0
 80163e0:	f002 f868 	bl	80184b4 <LoRaMacCryptoSetKey>
 80163e4:	4603      	mov	r3, r0
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	f000 8284 	beq.w	80168f4 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80163ec:	2311      	movs	r3, #17
 80163ee:	e2a3      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80163f0:	2303      	movs	r3, #3
 80163f2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80163f4:	e27e      	b.n	80168f4 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	685b      	ldr	r3, [r3, #4]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d00b      	beq.n	8016416 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	4619      	mov	r1, r3
 8016404:	2001      	movs	r0, #1
 8016406:	f002 f855 	bl	80184b4 <LoRaMacCryptoSetKey>
 801640a:	4603      	mov	r3, r0
 801640c:	2b00      	cmp	r3, #0
 801640e:	f000 8273 	beq.w	80168f8 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016412:	2311      	movs	r3, #17
 8016414:	e290      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016416:	2303      	movs	r3, #3
 8016418:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801641a:	e26d      	b.n	80168f8 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	685b      	ldr	r3, [r3, #4]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d00b      	beq.n	801643c <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	4619      	mov	r1, r3
 801642a:	2008      	movs	r0, #8
 801642c:	f002 f842 	bl	80184b4 <LoRaMacCryptoSetKey>
 8016430:	4603      	mov	r3, r0
 8016432:	2b00      	cmp	r3, #0
 8016434:	f000 8262 	beq.w	80168fc <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016438:	2311      	movs	r3, #17
 801643a:	e27d      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801643c:	2303      	movs	r3, #3
 801643e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016440:	e25c      	b.n	80168fc <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	685b      	ldr	r3, [r3, #4]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d00b      	beq.n	8016462 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	4619      	mov	r1, r3
 8016450:	2009      	movs	r0, #9
 8016452:	f002 f82f 	bl	80184b4 <LoRaMacCryptoSetKey>
 8016456:	4603      	mov	r3, r0
 8016458:	2b00      	cmp	r3, #0
 801645a:	f000 8251 	beq.w	8016900 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801645e:	2311      	movs	r3, #17
 8016460:	e26a      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016462:	2303      	movs	r3, #3
 8016464:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016466:	e24b      	b.n	8016900 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d00b      	beq.n	8016488 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	4619      	mov	r1, r3
 8016476:	200c      	movs	r0, #12
 8016478:	f002 f81c 	bl	80184b4 <LoRaMacCryptoSetKey>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	f000 8240 	beq.w	8016904 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016484:	2311      	movs	r3, #17
 8016486:	e257      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016488:	2303      	movs	r3, #3
 801648a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801648c:	e23a      	b.n	8016904 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d00b      	beq.n	80164ae <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	4619      	mov	r1, r3
 801649c:	200d      	movs	r0, #13
 801649e:	f002 f809 	bl	80184b4 <LoRaMacCryptoSetKey>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	f000 822f 	beq.w	8016908 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80164aa:	2311      	movs	r3, #17
 80164ac:	e244      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80164ae:	2303      	movs	r3, #3
 80164b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80164b2:	e229      	b.n	8016908 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d00b      	beq.n	80164d4 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	4619      	mov	r1, r3
 80164c2:	200e      	movs	r0, #14
 80164c4:	f001 fff6 	bl	80184b4 <LoRaMacCryptoSetKey>
 80164c8:	4603      	mov	r3, r0
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	f000 821e 	beq.w	801690c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80164d0:	2311      	movs	r3, #17
 80164d2:	e231      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80164d4:	2303      	movs	r3, #3
 80164d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80164d8:	e218      	b.n	801690c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d00b      	beq.n	80164fa <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	4619      	mov	r1, r3
 80164e8:	200f      	movs	r0, #15
 80164ea:	f001 ffe3 	bl	80184b4 <LoRaMacCryptoSetKey>
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	f000 820d 	beq.w	8016910 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80164f6:	2311      	movs	r3, #17
 80164f8:	e21e      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80164fa:	2303      	movs	r3, #3
 80164fc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80164fe:	e207      	b.n	8016910 <LoRaMacMibSetRequestConfirm+0x71c>
 8016500:	200008fc 	.word	0x200008fc
 8016504:	20000e18 	.word	0x20000e18
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	791a      	ldrb	r2, [r3, #4]
 801650c:	4bb2      	ldr	r3, [pc, #712]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801650e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8016512:	4bb2      	ldr	r3, [pc, #712]	; (80167dc <LoRaMacMibSetRequestConfirm+0x5e8>)
 8016514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016516:	4ab0      	ldr	r2, [pc, #704]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016518:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801651c:	4610      	mov	r0, r2
 801651e:	4798      	blx	r3
            Radio.Sleep( );
 8016520:	4bae      	ldr	r3, [pc, #696]	; (80167dc <LoRaMacMibSetRequestConfirm+0x5e8>)
 8016522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016524:	4798      	blx	r3
            break;
 8016526:	e1fc      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	791a      	ldrb	r2, [r3, #4]
 801652c:	4baa      	ldr	r3, [pc, #680]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801652e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8016532:	e1f6      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	7a1b      	ldrb	r3, [r3, #8]
 8016538:	b25b      	sxtb	r3, r3
 801653a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801653c:	4ba6      	ldr	r3, [pc, #664]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801653e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8016542:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8016544:	4ba4      	ldr	r3, [pc, #656]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016546:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801654a:	f107 0108 	add.w	r1, r7, #8
 801654e:	2207      	movs	r2, #7
 8016550:	4618      	mov	r0, r3
 8016552:	f002 fddf 	bl	8019114 <RegionVerify>
 8016556:	4603      	mov	r3, r0
 8016558:	f083 0301 	eor.w	r3, r3, #1
 801655c:	b2db      	uxtb	r3, r3
 801655e:	2b00      	cmp	r3, #0
 8016560:	d002      	beq.n	8016568 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016562:	2303      	movs	r3, #3
 8016564:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8016566:	e1dc      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801656e:	4b9a      	ldr	r3, [pc, #616]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016570:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016574:	f107 0108 	add.w	r1, r7, #8
 8016578:	2200      	movs	r2, #0
 801657a:	4618      	mov	r0, r3
 801657c:	f002 fdca 	bl	8019114 <RegionVerify>
 8016580:	4603      	mov	r3, r0
 8016582:	f083 0301 	eor.w	r3, r3, #1
 8016586:	b2db      	uxtb	r3, r3
 8016588:	2b00      	cmp	r3, #0
 801658a:	d002      	beq.n	8016592 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801658c:	2303      	movs	r3, #3
 801658e:	75fb      	strb	r3, [r7, #23]
            break;
 8016590:	e1c7      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8016592:	4b91      	ldr	r3, [pc, #580]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016594:	687a      	ldr	r2, [r7, #4]
 8016596:	336c      	adds	r3, #108	; 0x6c
 8016598:	3204      	adds	r2, #4
 801659a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801659e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80165a2:	e1be      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	7a1b      	ldrb	r3, [r3, #8]
 80165a8:	b25b      	sxtb	r3, r3
 80165aa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80165ac:	4b8a      	ldr	r3, [pc, #552]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165ae:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80165b2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80165b4:	4b88      	ldr	r3, [pc, #544]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80165ba:	f107 0108 	add.w	r1, r7, #8
 80165be:	2207      	movs	r2, #7
 80165c0:	4618      	mov	r0, r3
 80165c2:	f002 fda7 	bl	8019114 <RegionVerify>
 80165c6:	4603      	mov	r3, r0
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d008      	beq.n	80165de <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80165cc:	4b82      	ldr	r3, [pc, #520]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165ce:	687a      	ldr	r2, [r7, #4]
 80165d0:	33b4      	adds	r3, #180	; 0xb4
 80165d2:	3204      	adds	r2, #4
 80165d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165d8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80165dc:	e1a1      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80165de:	2303      	movs	r3, #3
 80165e0:	75fb      	strb	r3, [r7, #23]
            break;
 80165e2:	e19e      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	7a1b      	ldrb	r3, [r3, #8]
 80165e8:	b25b      	sxtb	r3, r3
 80165ea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80165ec:	4b7a      	ldr	r3, [pc, #488]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165ee:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80165f2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80165f4:	4b78      	ldr	r3, [pc, #480]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80165fa:	f107 0108 	add.w	r1, r7, #8
 80165fe:	2207      	movs	r2, #7
 8016600:	4618      	mov	r0, r3
 8016602:	f002 fd87 	bl	8019114 <RegionVerify>
 8016606:	4603      	mov	r3, r0
 8016608:	2b00      	cmp	r3, #0
 801660a:	d019      	beq.n	8016640 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801660c:	4b72      	ldr	r3, [pc, #456]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	3374      	adds	r3, #116	; 0x74
 8016612:	3204      	adds	r2, #4
 8016614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016618:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801661c:	4b6e      	ldr	r3, [pc, #440]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801661e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8016622:	2b02      	cmp	r3, #2
 8016624:	f040 8176 	bne.w	8016914 <LoRaMacMibSetRequestConfirm+0x720>
 8016628:	4b6b      	ldr	r3, [pc, #428]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801662a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801662e:	2b00      	cmp	r3, #0
 8016630:	f000 8170 	beq.w	8016914 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8016634:	4b69      	ldr	r3, [pc, #420]	; (80167dc <LoRaMacMibSetRequestConfirm+0x5e8>)
 8016636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016638:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801663a:	f7fe fc1b 	bl	8014e74 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801663e:	e169      	b.n	8016914 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016640:	2303      	movs	r3, #3
 8016642:	75fb      	strb	r3, [r7, #23]
            break;
 8016644:	e166      	b.n	8016914 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	7a1b      	ldrb	r3, [r3, #8]
 801664a:	b25b      	sxtb	r3, r3
 801664c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801664e:	4b62      	ldr	r3, [pc, #392]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016650:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8016654:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8016656:	4b60      	ldr	r3, [pc, #384]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016658:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801665c:	f107 0108 	add.w	r1, r7, #8
 8016660:	2207      	movs	r2, #7
 8016662:	4618      	mov	r0, r3
 8016664:	f002 fd56 	bl	8019114 <RegionVerify>
 8016668:	4603      	mov	r3, r0
 801666a:	2b00      	cmp	r3, #0
 801666c:	d008      	beq.n	8016680 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801666e:	4b5a      	ldr	r3, [pc, #360]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	33bc      	adds	r3, #188	; 0xbc
 8016674:	3204      	adds	r2, #4
 8016676:	e892 0003 	ldmia.w	r2, {r0, r1}
 801667a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801667e:	e150      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016680:	2303      	movs	r3, #3
 8016682:	75fb      	strb	r3, [r7, #23]
            break;
 8016684:	e14d      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	685b      	ldr	r3, [r3, #4]
 801668a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801668c:	2301      	movs	r3, #1
 801668e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8016690:	4b51      	ldr	r3, [pc, #324]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016692:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016696:	f107 020c 	add.w	r2, r7, #12
 801669a:	4611      	mov	r1, r2
 801669c:	4618      	mov	r0, r3
 801669e:	f002 fd62 	bl	8019166 <RegionChanMaskSet>
 80166a2:	4603      	mov	r3, r0
 80166a4:	f083 0301 	eor.w	r3, r3, #1
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	f000 8134 	beq.w	8016918 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80166b0:	2303      	movs	r3, #3
 80166b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80166b4:	e130      	b.n	8016918 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80166bc:	2300      	movs	r3, #0
 80166be:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80166c0:	4b45      	ldr	r3, [pc, #276]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80166c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80166c6:	f107 020c 	add.w	r2, r7, #12
 80166ca:	4611      	mov	r1, r2
 80166cc:	4618      	mov	r0, r3
 80166ce:	f002 fd4a 	bl	8019166 <RegionChanMaskSet>
 80166d2:	4603      	mov	r3, r0
 80166d4:	f083 0301 	eor.w	r3, r3, #1
 80166d8:	b2db      	uxtb	r3, r3
 80166da:	2b00      	cmp	r3, #0
 80166dc:	f000 811e 	beq.w	801691c <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80166e0:	2303      	movs	r3, #3
 80166e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80166e4:	e11a      	b.n	801691c <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	791b      	ldrb	r3, [r3, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d009      	beq.n	8016702 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80166f2:	2b0f      	cmp	r3, #15
 80166f4:	d805      	bhi.n	8016702 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	791a      	ldrb	r2, [r3, #4]
 80166fa:	4b37      	ldr	r3, [pc, #220]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80166fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016700:	e10f      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016702:	2303      	movs	r3, #3
 8016704:	75fb      	strb	r3, [r7, #23]
            break;
 8016706:	e10c      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	4a32      	ldr	r2, [pc, #200]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801670e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8016710:	e107      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	4a30      	ldr	r2, [pc, #192]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016718:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 801671a:	e102      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	4a2d      	ldr	r2, [pc, #180]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016722:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8016724:	e0fd      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	685b      	ldr	r3, [r3, #4]
 801672a:	4a2b      	ldr	r2, [pc, #172]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801672c:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 801672e:	e0f8      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	4a28      	ldr	r2, [pc, #160]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016736:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8016738:	e0f3      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016740:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8016742:	4b25      	ldr	r3, [pc, #148]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016744:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016748:	f107 0108 	add.w	r1, r7, #8
 801674c:	2206      	movs	r2, #6
 801674e:	4618      	mov	r0, r3
 8016750:	f002 fce0 	bl	8019114 <RegionVerify>
 8016754:	4603      	mov	r3, r0
 8016756:	2b00      	cmp	r3, #0
 8016758:	d005      	beq.n	8016766 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801675a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801675e:	4b1e      	ldr	r3, [pc, #120]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016760:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016764:	e0dd      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016766:	2303      	movs	r3, #3
 8016768:	75fb      	strb	r3, [r7, #23]
            break;
 801676a:	e0da      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016772:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016774:	4b18      	ldr	r3, [pc, #96]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016776:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801677a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801677c:	4b16      	ldr	r3, [pc, #88]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801677e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016782:	f107 0108 	add.w	r1, r7, #8
 8016786:	2205      	movs	r2, #5
 8016788:	4618      	mov	r0, r3
 801678a:	f002 fcc3 	bl	8019114 <RegionVerify>
 801678e:	4603      	mov	r3, r0
 8016790:	2b00      	cmp	r3, #0
 8016792:	d005      	beq.n	80167a0 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8016794:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8016798:	4b0f      	ldr	r3, [pc, #60]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801679a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801679e:	e0c0      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80167a0:	2303      	movs	r3, #3
 80167a2:	75fb      	strb	r3, [r7, #23]
            break;
 80167a4:	e0bd      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80167ac:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80167ae:	4b0a      	ldr	r3, [pc, #40]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80167b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80167b4:	f107 0108 	add.w	r1, r7, #8
 80167b8:	220a      	movs	r2, #10
 80167ba:	4618      	mov	r0, r3
 80167bc:	f002 fcaa 	bl	8019114 <RegionVerify>
 80167c0:	4603      	mov	r3, r0
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d005      	beq.n	80167d2 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80167c6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80167ca:	4b03      	ldr	r3, [pc, #12]	; (80167d8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80167cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80167d0:	e0a7      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80167d2:	2303      	movs	r3, #3
 80167d4:	75fb      	strb	r3, [r7, #23]
            break;
 80167d6:	e0a4      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
 80167d8:	20000e18 	.word	0x20000e18
 80167dc:	08021df4 	.word	0x08021df4
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80167e6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80167e8:	4b55      	ldr	r3, [pc, #340]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 80167ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80167ee:	f107 0108 	add.w	r1, r7, #8
 80167f2:	2209      	movs	r2, #9
 80167f4:	4618      	mov	r0, r3
 80167f6:	f002 fc8d 	bl	8019114 <RegionVerify>
 80167fa:	4603      	mov	r3, r0
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d005      	beq.n	801680c <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8016800:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8016804:	4b4e      	ldr	r3, [pc, #312]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801680a:	e08a      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801680c:	2303      	movs	r3, #3
 801680e:	75fb      	strb	r3, [r7, #23]
            break;
 8016810:	e087      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	685b      	ldr	r3, [r3, #4]
 8016816:	4a4a      	ldr	r2, [pc, #296]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801681c:	4b48      	ldr	r3, [pc, #288]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 801681e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016822:	4a47      	ldr	r2, [pc, #284]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016824:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8016826:	e07c      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	791a      	ldrb	r2, [r3, #4]
 801682c:	4b44      	ldr	r3, [pc, #272]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 801682e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8016832:	4b43      	ldr	r3, [pc, #268]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016834:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8016838:	4b41      	ldr	r3, [pc, #260]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 801683a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 801683e:	e070      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	4a3e      	ldr	r2, [pc, #248]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016846:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801684a:	e06a      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	4a3b      	ldr	r2, [pc, #236]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016852:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8016856:	e064      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8016858:	f7fe fd40 	bl	80152dc <RestoreNvmData>
 801685c:	4603      	mov	r3, r0
 801685e:	75fb      	strb	r3, [r7, #23]
            break;
 8016860:	e05f      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	799b      	ldrb	r3, [r3, #6]
 8016866:	2b01      	cmp	r3, #1
 8016868:	d80d      	bhi.n	8016886 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801686a:	4a35      	ldr	r2, [pc, #212]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6858      	ldr	r0, [r3, #4]
 8016878:	f001 fd7e 	bl	8018378 <LoRaMacCryptoSetLrWanVersion>
 801687c:	4603      	mov	r3, r0
 801687e:	2b00      	cmp	r3, #0
 8016880:	d04e      	beq.n	8016920 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016882:	2311      	movs	r3, #17
 8016884:	e058      	b.n	8016938 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016886:	2303      	movs	r3, #3
 8016888:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801688a:	e049      	b.n	8016920 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	4a2b      	ldr	r2, [pc, #172]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8016896:	e044      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	791a      	ldrb	r2, [r3, #4]
 801689c:	4b28      	ldr	r3, [pc, #160]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 801689e:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 80168a2:	e03e      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	889a      	ldrh	r2, [r3, #4]
 80168a8:	4b25      	ldr	r3, [pc, #148]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168aa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80168ae:	e038      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	889a      	ldrh	r2, [r3, #4]
 80168b4:	4b22      	ldr	r3, [pc, #136]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168b6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80168ba:	e032      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	889a      	ldrh	r2, [r3, #4]
 80168c0:	4b1f      	ldr	r3, [pc, #124]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168c2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80168c6:	e02c      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	889a      	ldrh	r2, [r3, #4]
 80168cc:	4b1c      	ldr	r3, [pc, #112]	; (8016940 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168ce:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80168d2:	e026      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80168d4:	2318      	movs	r3, #24
 80168d6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80168d8:	e023      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80168da:	2318      	movs	r3, #24
 80168dc:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80168de:	e020      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f000 fca4 	bl	801722e <LoRaMacMibClassBSetRequestConfirm>
 80168e6:	4603      	mov	r3, r0
 80168e8:	75fb      	strb	r3, [r7, #23]
            break;
 80168ea:	e01a      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168ec:	bf00      	nop
 80168ee:	e018      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168f0:	bf00      	nop
 80168f2:	e016      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168f4:	bf00      	nop
 80168f6:	e014      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168f8:	bf00      	nop
 80168fa:	e012      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168fc:	bf00      	nop
 80168fe:	e010      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016900:	bf00      	nop
 8016902:	e00e      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016904:	bf00      	nop
 8016906:	e00c      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016908:	bf00      	nop
 801690a:	e00a      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801690c:	bf00      	nop
 801690e:	e008      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016910:	bf00      	nop
 8016912:	e006      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016914:	bf00      	nop
 8016916:	e004      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016918:	bf00      	nop
 801691a:	e002      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801691c:	bf00      	nop
 801691e:	e000      	b.n	8016922 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016920:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8016922:	7dfb      	ldrb	r3, [r7, #23]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d106      	bne.n	8016936 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8016928:	4a06      	ldr	r2, [pc, #24]	; (8016944 <LoRaMacMibSetRequestConfirm+0x750>)
 801692a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801692e:	f043 0320 	orr.w	r3, r3, #32
 8016932:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8016936:	7dfb      	ldrb	r3, [r7, #23]
}
 8016938:	4618      	mov	r0, r3
 801693a:	3718      	adds	r7, #24
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}
 8016940:	20000e18 	.word	0x20000e18
 8016944:	200008fc 	.word	0x200008fc

08016948 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b08a      	sub	sp, #40	; 0x28
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016950:	2302      	movs	r3, #2
 8016952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8016956:	2300      	movs	r3, #0
 8016958:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d101      	bne.n	8016964 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016960:	2303      	movs	r3, #3
 8016962:	e17e      	b.n	8016c62 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2200      	movs	r2, #0
 8016968:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801696a:	f7fc fb85 	bl	8013078 <LoRaMacIsBusy>
 801696e:	4603      	mov	r3, r0
 8016970:	2b00      	cmp	r3, #0
 8016972:	d001      	beq.n	8016978 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8016974:	2301      	movs	r3, #1
 8016976:	e174      	b.n	8016c62 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8016978:	f001 f994 	bl	8017ca4 <LoRaMacConfirmQueueIsFull>
 801697c:	4603      	mov	r3, r0
 801697e:	2b00      	cmp	r3, #0
 8016980:	d001      	beq.n	8016986 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8016982:	2301      	movs	r3, #1
 8016984:	e16d      	b.n	8016c62 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8016986:	f001 f981 	bl	8017c8c <LoRaMacConfirmQueueGetCnt>
 801698a:	4603      	mov	r3, r0
 801698c:	2b00      	cmp	r3, #0
 801698e:	d104      	bne.n	801699a <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8016990:	2214      	movs	r2, #20
 8016992:	2100      	movs	r1, #0
 8016994:	48b5      	ldr	r0, [pc, #724]	; (8016c6c <LoRaMacMlmeRequest+0x324>)
 8016996:	f004 ff75 	bl	801b884 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801699a:	4bb5      	ldr	r3, [pc, #724]	; (8016c70 <LoRaMacMlmeRequest+0x328>)
 801699c:	2201      	movs	r2, #1
 801699e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80169a2:	4ab3      	ldr	r2, [pc, #716]	; (8016c70 <LoRaMacMlmeRequest+0x328>)
 80169a4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80169a8:	f043 0304 	orr.w	r3, r3, #4
 80169ac:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	781b      	ldrb	r3, [r3, #0]
 80169b4:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80169b8:	2301      	movs	r3, #1
 80169ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80169be:	2300      	movs	r3, #0
 80169c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 80169c4:	2300      	movs	r3, #0
 80169c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	781b      	ldrb	r3, [r3, #0]
 80169ce:	3b01      	subs	r3, #1
 80169d0:	2b0c      	cmp	r3, #12
 80169d2:	f200 811a 	bhi.w	8016c0a <LoRaMacMlmeRequest+0x2c2>
 80169d6:	a201      	add	r2, pc, #4	; (adr r2, 80169dc <LoRaMacMlmeRequest+0x94>)
 80169d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169dc:	08016a11 	.word	0x08016a11
 80169e0:	08016c0b 	.word	0x08016c0b
 80169e4:	08016c0b 	.word	0x08016c0b
 80169e8:	08016c0b 	.word	0x08016c0b
 80169ec:	08016aef 	.word	0x08016aef
 80169f0:	08016b13 	.word	0x08016b13
 80169f4:	08016c0b 	.word	0x08016c0b
 80169f8:	08016c0b 	.word	0x08016c0b
 80169fc:	08016b31 	.word	0x08016b31
 8016a00:	08016c0b 	.word	0x08016c0b
 8016a04:	08016bd9 	.word	0x08016bd9
 8016a08:	08016b6d 	.word	0x08016b6d
 8016a0c:	08016bb7 	.word	0x08016bb7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8016a10:	4b97      	ldr	r3, [pc, #604]	; (8016c70 <LoRaMacMlmeRequest+0x328>)
 8016a12:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8016a16:	f003 0320 	and.w	r3, r3, #32
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d001      	beq.n	8016a22 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8016a1e:	2301      	movs	r3, #1
 8016a20:	e11f      	b.n	8016c62 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	791b      	ldrb	r3, [r3, #4]
 8016a26:	2b02      	cmp	r3, #2
 8016a28:	d135      	bne.n	8016a96 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8016a2a:	2000      	movs	r0, #0
 8016a2c:	f7fe f8b4 	bl	8014b98 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8016a30:	4b90      	ldr	r3, [pc, #576]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016a32:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	795b      	ldrb	r3, [r3, #5]
 8016a3a:	b25b      	sxtb	r3, r3
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	4619      	mov	r1, r3
 8016a40:	f002 fc50 	bl	80192e4 <RegionAlternateDr>
 8016a44:	4603      	mov	r3, r0
 8016a46:	461a      	mov	r2, r3
 8016a48:	4b8a      	ldr	r3, [pc, #552]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8016a54:	4b87      	ldr	r3, [pc, #540]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8016a5a:	2307      	movs	r3, #7
 8016a5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8016a60:	20ff      	movs	r0, #255	; 0xff
 8016a62:	f7fd fe1d 	bl	80146a0 <SendReJoinReq>
 8016a66:	4603      	mov	r3, r0
 8016a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8016a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	f000 80cc 	beq.w	8016c0e <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8016a76:	4b7f      	ldr	r3, [pc, #508]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016a78:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	795b      	ldrb	r3, [r3, #5]
 8016a80:	b25b      	sxtb	r3, r3
 8016a82:	2201      	movs	r2, #1
 8016a84:	4619      	mov	r1, r3
 8016a86:	f002 fc2d 	bl	80192e4 <RegionAlternateDr>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	461a      	mov	r2, r3
 8016a8e:	4b79      	ldr	r3, [pc, #484]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8016a94:	e0bb      	b.n	8016c0e <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	791b      	ldrb	r3, [r3, #4]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	f040 80b7 	bne.w	8016c0e <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8016aa0:	4b74      	ldr	r3, [pc, #464]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8016aa8:	2302      	movs	r3, #2
 8016aaa:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8016aac:	4b71      	ldr	r3, [pc, #452]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016aae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016ab2:	f107 020c 	add.w	r2, r7, #12
 8016ab6:	4611      	mov	r1, r2
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f002 fb19 	bl	80190f0 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	791a      	ldrb	r2, [r3, #4]
 8016ac2:	4b6c      	ldr	r3, [pc, #432]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016ac4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8016ace:	2301      	movs	r3, #1
 8016ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8016ad4:	f7fe fdb2 	bl	801563c <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8016ad8:	4a65      	ldr	r2, [pc, #404]	; (8016c70 <LoRaMacMlmeRequest+0x328>)
 8016ada:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016ade:	f043 0310 	orr.w	r3, r3, #16
 8016ae2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016aec:	e08f      	b.n	8016c0e <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016aee:	2300      	movs	r3, #0
 8016af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016af4:	f107 031c 	add.w	r3, r7, #28
 8016af8:	2200      	movs	r2, #0
 8016afa:	4619      	mov	r1, r3
 8016afc:	2002      	movs	r0, #2
 8016afe:	f000 fd21 	bl	8017544 <LoRaMacCommandsAddCmd>
 8016b02:	4603      	mov	r3, r0
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f000 8084 	beq.w	8016c12 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016b0a:	2313      	movs	r3, #19
 8016b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8016b10:	e07f      	b.n	8016c12 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	8898      	ldrh	r0, [r3, #4]
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6899      	ldr	r1, [r3, #8]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016b20:	b2db      	uxtb	r3, r3
 8016b22:	461a      	mov	r2, r3
 8016b24:	f7fe fbba 	bl	801529c <SetTxContinuousWave>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016b2e:	e077      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016b30:	2300      	movs	r3, #0
 8016b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8016b36:	f107 0308 	add.w	r3, r7, #8
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	200d      	movs	r0, #13
 8016b3e:	f000 fd81 	bl	8017644 <LoRaMacCommandsGetCmd>
 8016b42:	4603      	mov	r3, r0
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d103      	bne.n	8016b50 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8016b4e:	e062      	b.n	8016c16 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016b50:	f107 031c 	add.w	r3, r7, #28
 8016b54:	2200      	movs	r2, #0
 8016b56:	4619      	mov	r1, r3
 8016b58:	200d      	movs	r0, #13
 8016b5a:	f000 fcf3 	bl	8017544 <LoRaMacCommandsAddCmd>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d058      	beq.n	8016c16 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016b64:	2313      	movs	r3, #19
 8016b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016b6a:	e054      	b.n	8016c16 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8016b6c:	4b41      	ldr	r3, [pc, #260]	; (8016c74 <LoRaMacMlmeRequest+0x32c>)
 8016b6e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d151      	bne.n	8016c1a <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	791b      	ldrb	r3, [r3, #4]
 8016b7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	791b      	ldrb	r3, [r3, #4]
 8016b82:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f000 fb25 	bl	80171d8 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8016b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b92:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8016b94:	2300      	movs	r3, #0
 8016b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8016b9a:	f107 031c 	add.w	r3, r7, #28
 8016b9e:	2201      	movs	r2, #1
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	2010      	movs	r0, #16
 8016ba4:	f000 fcce 	bl	8017544 <LoRaMacCommandsAddCmd>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d035      	beq.n	8016c1a <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016bae:	2313      	movs	r3, #19
 8016bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8016bb4:	e031      	b.n	8016c1a <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016bbc:	f107 031c 	add.w	r3, r7, #28
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	2012      	movs	r0, #18
 8016bc6:	f000 fcbd 	bl	8017544 <LoRaMacCommandsAddCmd>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d026      	beq.n	8016c1e <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016bd0:	2313      	movs	r3, #19
 8016bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8016bd6:	e022      	b.n	8016c1e <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8016bd8:	2301      	movs	r3, #1
 8016bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8016bde:	f000 fab1 	bl	8017144 <LoRaMacClassBIsAcquisitionInProgress>
 8016be2:	4603      	mov	r3, r0
 8016be4:	f083 0301 	eor.w	r3, r3, #1
 8016be8:	b2db      	uxtb	r3, r3
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d009      	beq.n	8016c02 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8016bee:	2000      	movs	r0, #0
 8016bf0:	f000 fa8a 	bl	8017108 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	f000 faac 	bl	8017152 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8016c00:	e00e      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8016c02:	2301      	movs	r3, #1
 8016c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016c08:	e00a      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8016c0a:	bf00      	nop
 8016c0c:	e008      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c0e:	bf00      	nop
 8016c10:	e006      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c12:	bf00      	nop
 8016c14:	e004      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c16:	bf00      	nop
 8016c18:	e002      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c1a:	bf00      	nop
 8016c1c:	e000      	b.n	8016c20 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c1e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8016c20:	4b13      	ldr	r3, [pc, #76]	; (8016c70 <LoRaMacMlmeRequest+0x328>)
 8016c22:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8016c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d010      	beq.n	8016c54 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8016c32:	f001 f82b 	bl	8017c8c <LoRaMacConfirmQueueGetCnt>
 8016c36:	4603      	mov	r3, r0
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d110      	bne.n	8016c5e <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8016c3c:	4b0c      	ldr	r3, [pc, #48]	; (8016c70 <LoRaMacMlmeRequest+0x328>)
 8016c3e:	2200      	movs	r2, #0
 8016c40:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8016c44:	4a0a      	ldr	r2, [pc, #40]	; (8016c70 <LoRaMacMlmeRequest+0x328>)
 8016c46:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016c4a:	f36f 0382 	bfc	r3, #2, #1
 8016c4e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8016c52:	e004      	b.n	8016c5e <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8016c54:	f107 0320 	add.w	r3, r7, #32
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f000 fec3 	bl	80179e4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8016c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	3728      	adds	r7, #40	; 0x28
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	20000d50 	.word	0x20000d50
 8016c70:	200008fc 	.word	0x200008fc
 8016c74:	20000e18 	.word	0x20000e18

08016c78 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8016c78:	b5b0      	push	{r4, r5, r7, lr}
 8016c7a:	b092      	sub	sp, #72	; 0x48
 8016c7c:	af02      	add	r7, sp, #8
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	460b      	mov	r3, r1
 8016c82:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016c84:	2302      	movs	r3, #2
 8016c86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8016c90:	2300      	movs	r3, #0
 8016c92:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8016c94:	2300      	movs	r3, #0
 8016c96:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d101      	bne.n	8016caa <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016ca6:	2303      	movs	r3, #3
 8016ca8:	e113      	b.n	8016ed2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2200      	movs	r2, #0
 8016cae:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8016cb0:	f7fc f9e2 	bl	8013078 <LoRaMacIsBusy>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d001      	beq.n	8016cbe <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8016cba:	2301      	movs	r3, #1
 8016cbc:	e109      	b.n	8016ed2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	f107 040c 	add.w	r4, r7, #12
 8016cc4:	461d      	mov	r5, r3
 8016cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016cca:	682b      	ldr	r3, [r5, #0]
 8016ccc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8016cd4:	2214      	movs	r2, #20
 8016cd6:	2100      	movs	r1, #0
 8016cd8:	4880      	ldr	r0, [pc, #512]	; (8016edc <LoRaMacMcpsRequest+0x264>)
 8016cda:	f004 fdd3 	bl	801b884 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016cde:	4b80      	ldr	r3, [pc, #512]	; (8016ee0 <LoRaMacMcpsRequest+0x268>)
 8016ce0:	2201      	movs	r2, #1
 8016ce2:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8016ce6:	4b7f      	ldr	r3, [pc, #508]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016ce8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8016cec:	2b02      	cmp	r3, #2
 8016cee:	d111      	bne.n	8016d14 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8016cf0:	4b7c      	ldr	r3, [pc, #496]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016cf2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8016cf6:	2b02      	cmp	r3, #2
 8016cf8:	d10c      	bne.n	8016d14 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8016cfa:	4b7a      	ldr	r3, [pc, #488]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016cfc:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8016d00:	f083 0301 	eor.w	r3, r3, #1
 8016d04:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d004      	beq.n	8016d14 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8016d0a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d101      	bne.n	8016d14 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8016d10:	2301      	movs	r3, #1
 8016d12:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8016d14:	7b3b      	ldrb	r3, [r7, #12]
 8016d16:	2b03      	cmp	r3, #3
 8016d18:	d030      	beq.n	8016d7c <LoRaMacMcpsRequest+0x104>
 8016d1a:	2b03      	cmp	r3, #3
 8016d1c:	dc3f      	bgt.n	8016d9e <LoRaMacMcpsRequest+0x126>
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d002      	beq.n	8016d28 <LoRaMacMcpsRequest+0xb0>
 8016d22:	2b01      	cmp	r3, #1
 8016d24:	d015      	beq.n	8016d52 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8016d26:	e03a      	b.n	8016d9e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8016d28:	2301      	movs	r3, #1
 8016d2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8016d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d32:	2202      	movs	r2, #2
 8016d34:	f362 1347 	bfi	r3, r2, #5, #3
 8016d38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8016d3c:	7c3b      	ldrb	r3, [r7, #16]
 8016d3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8016d46:	8b3b      	ldrh	r3, [r7, #24]
 8016d48:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8016d4a:	7ebb      	ldrb	r3, [r7, #26]
 8016d4c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016d50:	e026      	b.n	8016da0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8016d52:	2301      	movs	r3, #1
 8016d54:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8016d58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d5c:	2204      	movs	r2, #4
 8016d5e:	f362 1347 	bfi	r3, r2, #5, #3
 8016d62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8016d66:	7c3b      	ldrb	r3, [r7, #16]
 8016d68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8016d70:	8b3b      	ldrh	r3, [r7, #24]
 8016d72:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8016d74:	7ebb      	ldrb	r3, [r7, #26]
 8016d76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016d7a:	e011      	b.n	8016da0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8016d82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d86:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8016d8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8016d92:	8abb      	ldrh	r3, [r7, #20]
 8016d94:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8016d96:	7dbb      	ldrb	r3, [r7, #22]
 8016d98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016d9c:	e000      	b.n	8016da0 <LoRaMacMcpsRequest+0x128>
            break;
 8016d9e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016da0:	2302      	movs	r3, #2
 8016da2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016da6:	4b4f      	ldr	r3, [pc, #316]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016da8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016dac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016db0:	4b4c      	ldr	r3, [pc, #304]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016db2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016db6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016dba:	4611      	mov	r1, r2
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f002 f96e 	bl	801909e <RegionGetPhyParam>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8016dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc8:	b25b      	sxtb	r3, r3
 8016dca:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8016dce:	4293      	cmp	r3, r2
 8016dd0:	bfb8      	it	lt
 8016dd2:	4613      	movlt	r3, r2
 8016dd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8016dd8:	4b42      	ldr	r3, [pc, #264]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016dda:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016dde:	4a41      	ldr	r2, [pc, #260]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016de0:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8016de4:	4a3f      	ldr	r2, [pc, #252]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016de6:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7fc fae0 	bl	80133b0 <CheckForMinimumAbpDatarate>
 8016df0:	4603      	mov	r3, r0
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d002      	beq.n	8016dfc <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8016df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8016dfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d05f      	beq.n	8016ec4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8016e04:	4b37      	ldr	r3, [pc, #220]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e06:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016e0a:	f083 0301 	eor.w	r3, r3, #1
 8016e0e:	b2db      	uxtb	r3, r3
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d10e      	bne.n	8016e32 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8016e14:	4b33      	ldr	r3, [pc, #204]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e16:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016e1a:	4a32      	ldr	r2, [pc, #200]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e1c:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8016e20:	4a30      	ldr	r2, [pc, #192]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e22:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7fc fac2 	bl	80133b0 <CheckForMinimumAbpDatarate>
 8016e2c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d01c      	beq.n	8016e6c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8016e32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016e36:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016e3a:	4b2a      	ldr	r3, [pc, #168]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e3c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8016e44:	4b27      	ldr	r3, [pc, #156]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e46:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016e4a:	f107 0120 	add.w	r1, r7, #32
 8016e4e:	2205      	movs	r2, #5
 8016e50:	4618      	mov	r0, r3
 8016e52:	f002 f95f 	bl	8019114 <RegionVerify>
 8016e56:	4603      	mov	r3, r0
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d005      	beq.n	8016e68 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8016e5c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8016e60:	4b20      	ldr	r3, [pc, #128]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8016e66:	e001      	b.n	8016e6c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8016e68:	2303      	movs	r3, #3
 8016e6a:	e032      	b.n	8016ed2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8016e6c:	4b1d      	ldr	r3, [pc, #116]	; (8016ee4 <LoRaMacMcpsRequest+0x26c>)
 8016e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e72:	4a1b      	ldr	r2, [pc, #108]	; (8016ee0 <LoRaMacMcpsRequest+0x268>)
 8016e74:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8016e78:	4611      	mov	r1, r2
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	f7fc fb84 	bl	8013588 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8016e80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016e82:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8016e86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016e8a:	78fb      	ldrb	r3, [r7, #3]
 8016e8c:	9300      	str	r3, [sp, #0]
 8016e8e:	4613      	mov	r3, r2
 8016e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e92:	f7fd fb23 	bl	80144dc <Send>
 8016e96:	4603      	mov	r3, r0
 8016e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8016e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d10b      	bne.n	8016ebc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8016ea4:	7b3a      	ldrb	r2, [r7, #12]
 8016ea6:	4b0e      	ldr	r3, [pc, #56]	; (8016ee0 <LoRaMacMcpsRequest+0x268>)
 8016ea8:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8016eac:	4a0c      	ldr	r2, [pc, #48]	; (8016ee0 <LoRaMacMcpsRequest+0x268>)
 8016eae:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016eb2:	f043 0301 	orr.w	r3, r3, #1
 8016eb6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8016eba:	e003      	b.n	8016ec4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8016ebc:	4b08      	ldr	r3, [pc, #32]	; (8016ee0 <LoRaMacMcpsRequest+0x268>)
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8016ec4:	4b06      	ldr	r3, [pc, #24]	; (8016ee0 <LoRaMacMcpsRequest+0x268>)
 8016ec6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	611a      	str	r2, [r3, #16]

    return status;
 8016ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	3740      	adds	r7, #64	; 0x40
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8016eda:	bf00      	nop
 8016edc:	20000d3c 	.word	0x20000d3c
 8016ee0:	200008fc 	.word	0x200008fc
 8016ee4:	20000e18 	.word	0x20000e18

08016ee8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b084      	sub	sp, #16
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	4603      	mov	r3, r0
 8016ef0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8016ef2:	79fb      	ldrb	r3, [r7, #7]
 8016ef4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8016ef6:	4b0d      	ldr	r3, [pc, #52]	; (8016f2c <LoRaMacTestSetDutyCycleOn+0x44>)
 8016ef8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016efc:	f107 010c 	add.w	r1, r7, #12
 8016f00:	220f      	movs	r2, #15
 8016f02:	4618      	mov	r0, r3
 8016f04:	f002 f906 	bl	8019114 <RegionVerify>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d00a      	beq.n	8016f24 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8016f0e:	4a07      	ldr	r2, [pc, #28]	; (8016f2c <LoRaMacTestSetDutyCycleOn+0x44>)
 8016f10:	79fb      	ldrb	r3, [r7, #7]
 8016f12:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8016f16:	4a06      	ldr	r2, [pc, #24]	; (8016f30 <LoRaMacTestSetDutyCycleOn+0x48>)
 8016f18:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016f1c:	f043 0320 	orr.w	r3, r3, #32
 8016f20:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8016f24:	bf00      	nop
 8016f26:	3710      	adds	r7, #16
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	20000e18 	.word	0x20000e18
 8016f30:	200008fc 	.word	0x200008fc

08016f34 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8016f38:	f7fe fe94 	bl	8015c64 <LoRaMacStop>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d112      	bne.n	8016f68 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8016f42:	480b      	ldr	r0, [pc, #44]	; (8016f70 <LoRaMacDeInitialization+0x3c>)
 8016f44:	f008 fe1e 	bl	801fb84 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8016f48:	480a      	ldr	r0, [pc, #40]	; (8016f74 <LoRaMacDeInitialization+0x40>)
 8016f4a:	f008 fe1b 	bl	801fb84 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8016f4e:	480a      	ldr	r0, [pc, #40]	; (8016f78 <LoRaMacDeInitialization+0x44>)
 8016f50:	f008 fe18 	bl	801fb84 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8016f54:	f000 f94a 	bl	80171ec <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8016f58:	2000      	movs	r0, #0
 8016f5a:	f7fd fe1d 	bl	8014b98 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8016f5e:	4b07      	ldr	r3, [pc, #28]	; (8016f7c <LoRaMacDeInitialization+0x48>)
 8016f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f62:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8016f64:	2300      	movs	r3, #0
 8016f66:	e000      	b.n	8016f6a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8016f68:	2301      	movs	r3, #1
    }
}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	20000c64 	.word	0x20000c64
 8016f74:	20000c7c 	.word	0x20000c7c
 8016f78:	20000c94 	.word	0x20000c94
 8016f7c:	08021df4 	.word	0x08021df4

08016f80 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b08c      	sub	sp, #48	; 0x30
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	60f8      	str	r0, [r7, #12]
 8016f88:	60b9      	str	r1, [r7, #8]
 8016f8a:	607a      	str	r2, [r7, #4]
 8016f8c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8016f8e:	2300      	movs	r3, #0
 8016f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	7b1b      	ldrb	r3, [r3, #12]
 8016f98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	7b5b      	ldrb	r3, [r3, #13]
 8016fa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	7b9b      	ldrb	r3, [r3, #14]
 8016fa8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	685a      	ldr	r2, [r3, #4]
 8016fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fb2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	785b      	ldrb	r3, [r3, #1]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	f000 8088 	beq.w	80170ce <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8016fbe:	2302      	movs	r3, #2
 8016fc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	7bdb      	ldrb	r3, [r3, #15]
 8016fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	7c1b      	ldrb	r3, [r3, #16]
 8016fd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016fd4:	4611      	mov	r1, r2
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f002 f861 	bl	801909e <RegionGetPhyParam>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8016fe0:	6a3b      	ldr	r3, [r7, #32]
 8016fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8016fe6:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8016fea:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	bfb8      	it	lt
 8016ff2:	4613      	movlt	r3, r2
 8016ff4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	685b      	ldr	r3, [r3, #4]
 8016ffc:	68fa      	ldr	r2, [r7, #12]
 8016ffe:	8912      	ldrh	r2, [r2, #8]
 8017000:	4293      	cmp	r3, r2
 8017002:	d302      	bcc.n	801700a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8017004:	2301      	movs	r3, #1
 8017006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	8912      	ldrh	r2, [r2, #8]
 8017012:	4611      	mov	r1, r2
 8017014:	68fa      	ldr	r2, [r7, #12]
 8017016:	8952      	ldrh	r2, [r2, #10]
 8017018:	440a      	add	r2, r1
 801701a:	4293      	cmp	r3, r2
 801701c:	d30f      	bcc.n	801703e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801701e:	230a      	movs	r3, #10
 8017020:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	7c1b      	ldrb	r3, [r3, #16]
 8017028:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801702c:	4611      	mov	r1, r2
 801702e:	4618      	mov	r0, r3
 8017030:	f002 f835 	bl	801909e <RegionGetPhyParam>
 8017034:	4603      	mov	r3, r0
 8017036:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8017038:	6a3b      	ldr	r3, [r7, #32]
 801703a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	685b      	ldr	r3, [r3, #4]
 8017042:	68fa      	ldr	r2, [r7, #12]
 8017044:	8912      	ldrh	r2, [r2, #8]
 8017046:	4611      	mov	r1, r2
 8017048:	68fa      	ldr	r2, [r7, #12]
 801704a:	8952      	ldrh	r2, [r2, #10]
 801704c:	0052      	lsls	r2, r2, #1
 801704e:	440a      	add	r2, r1
 8017050:	4293      	cmp	r3, r2
 8017052:	d33c      	bcc.n	80170ce <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	68fa      	ldr	r2, [r7, #12]
 801705a:	8912      	ldrh	r2, [r2, #8]
 801705c:	1a9b      	subs	r3, r3, r2
 801705e:	68fa      	ldr	r2, [r7, #12]
 8017060:	8952      	ldrh	r2, [r2, #10]
 8017062:	fbb3 f1f2 	udiv	r1, r3, r2
 8017066:	fb01 f202 	mul.w	r2, r1, r2
 801706a:	1a9b      	subs	r3, r3, r2
 801706c:	2b00      	cmp	r3, #0
 801706e:	d12e      	bne.n	80170ce <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8017070:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8017074:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017078:	429a      	cmp	r2, r3
 801707a:	d110      	bne.n	801709e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d009      	beq.n	8017098 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8017084:	2302      	movs	r3, #2
 8017086:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	7c1b      	ldrb	r3, [r3, #16]
 801708c:	f107 0210 	add.w	r2, r7, #16
 8017090:	4611      	mov	r1, r2
 8017092:	4618      	mov	r0, r3
 8017094:	f002 f82c 	bl	80190f0 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8017098:	2301      	movs	r3, #1
 801709a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801709e:	2321      	movs	r3, #33	; 0x21
 80170a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80170a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80170a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	7bdb      	ldrb	r3, [r3, #15]
 80170b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	7c1b      	ldrb	r3, [r3, #16]
 80170b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80170bc:	4611      	mov	r1, r2
 80170be:	4618      	mov	r0, r3
 80170c0:	f001 ffed 	bl	801909e <RegionGetPhyParam>
 80170c4:	4603      	mov	r3, r0
 80170c6:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80170c8:	6a3b      	ldr	r3, [r7, #32]
 80170ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80170d4:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80170dc:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80170e4:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80170e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80170ea:	4618      	mov	r0, r3
 80170ec:	3730      	adds	r7, #48	; 0x30
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}

080170f2 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80170f2:	b480      	push	{r7}
 80170f4:	b085      	sub	sp, #20
 80170f6:	af00      	add	r7, sp, #0
 80170f8:	60f8      	str	r0, [r7, #12]
 80170fa:	60b9      	str	r1, [r7, #8]
 80170fc:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80170fe:	bf00      	nop
 8017100:	3714      	adds	r7, #20
 8017102:	46bd      	mov	sp, r7
 8017104:	bc80      	pop	{r7}
 8017106:	4770      	bx	lr

08017108 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8017108:	b480      	push	{r7}
 801710a:	b083      	sub	sp, #12
 801710c:	af00      	add	r7, sp, #0
 801710e:	4603      	mov	r3, r0
 8017110:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017112:	bf00      	nop
 8017114:	370c      	adds	r7, #12
 8017116:	46bd      	mov	sp, r7
 8017118:	bc80      	pop	{r7}
 801711a:	4770      	bx	lr

0801711c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801711c:	b480      	push	{r7}
 801711e:	b083      	sub	sp, #12
 8017120:	af00      	add	r7, sp, #0
 8017122:	4603      	mov	r3, r0
 8017124:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017126:	bf00      	nop
 8017128:	370c      	adds	r7, #12
 801712a:	46bd      	mov	sp, r7
 801712c:	bc80      	pop	{r7}
 801712e:	4770      	bx	lr

08017130 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8017130:	b480      	push	{r7}
 8017132:	b083      	sub	sp, #12
 8017134:	af00      	add	r7, sp, #0
 8017136:	4603      	mov	r3, r0
 8017138:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801713a:	bf00      	nop
 801713c:	370c      	adds	r7, #12
 801713e:	46bd      	mov	sp, r7
 8017140:	bc80      	pop	{r7}
 8017142:	4770      	bx	lr

08017144 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8017144:	b480      	push	{r7}
 8017146:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8017148:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801714a:	4618      	mov	r0, r3
 801714c:	46bd      	mov	sp, r7
 801714e:	bc80      	pop	{r7}
 8017150:	4770      	bx	lr

08017152 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8017152:	b480      	push	{r7}
 8017154:	b083      	sub	sp, #12
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801715a:	bf00      	nop
 801715c:	370c      	adds	r7, #12
 801715e:	46bd      	mov	sp, r7
 8017160:	bc80      	pop	{r7}
 8017162:	4770      	bx	lr

08017164 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8017164:	b480      	push	{r7}
 8017166:	b083      	sub	sp, #12
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801716c:	bf00      	nop
 801716e:	370c      	adds	r7, #12
 8017170:	46bd      	mov	sp, r7
 8017172:	bc80      	pop	{r7}
 8017174:	4770      	bx	lr

08017176 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8017176:	b480      	push	{r7}
 8017178:	b083      	sub	sp, #12
 801717a:	af00      	add	r7, sp, #0
 801717c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801717e:	bf00      	nop
 8017180:	370c      	adds	r7, #12
 8017182:	46bd      	mov	sp, r7
 8017184:	bc80      	pop	{r7}
 8017186:	4770      	bx	lr

08017188 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8017188:	b480      	push	{r7}
 801718a:	b083      	sub	sp, #12
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	460b      	mov	r3, r1
 8017192:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8017194:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017196:	4618      	mov	r0, r3
 8017198:	370c      	adds	r7, #12
 801719a:	46bd      	mov	sp, r7
 801719c:	bc80      	pop	{r7}
 801719e:	4770      	bx	lr

080171a0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80171a0:	b480      	push	{r7}
 80171a2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171a4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bc80      	pop	{r7}
 80171ac:	4770      	bx	lr

080171ae <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80171ae:	b480      	push	{r7}
 80171b0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171b2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bc80      	pop	{r7}
 80171ba:	4770      	bx	lr

080171bc <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80171bc:	b480      	push	{r7}
 80171be:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171c0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bc80      	pop	{r7}
 80171c8:	4770      	bx	lr

080171ca <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80171ca:	b480      	push	{r7}
 80171cc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171ce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bc80      	pop	{r7}
 80171d6:	4770      	bx	lr

080171d8 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80171d8:	b480      	push	{r7}
 80171da:	b083      	sub	sp, #12
 80171dc:	af00      	add	r7, sp, #0
 80171de:	4603      	mov	r3, r0
 80171e0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171e2:	bf00      	nop
 80171e4:	370c      	adds	r7, #12
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bc80      	pop	{r7}
 80171ea:	4770      	bx	lr

080171ec <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80171ec:	b480      	push	{r7}
 80171ee:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171f0:	bf00      	nop
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bc80      	pop	{r7}
 80171f6:	4770      	bx	lr

080171f8 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80171f8:	b480      	push	{r7}
 80171fa:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171fc:	bf00      	nop
 80171fe:	46bd      	mov	sp, r7
 8017200:	bc80      	pop	{r7}
 8017202:	4770      	bx	lr

08017204 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8017204:	b480      	push	{r7}
 8017206:	b083      	sub	sp, #12
 8017208:	af00      	add	r7, sp, #0
 801720a:	4603      	mov	r3, r0
 801720c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801720e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017210:	4618      	mov	r0, r3
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	bc80      	pop	{r7}
 8017218:	4770      	bx	lr

0801721a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801721a:	b480      	push	{r7}
 801721c:	b083      	sub	sp, #12
 801721e:	af00      	add	r7, sp, #0
 8017220:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017222:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017224:	4618      	mov	r0, r3
 8017226:	370c      	adds	r7, #12
 8017228:	46bd      	mov	sp, r7
 801722a:	bc80      	pop	{r7}
 801722c:	4770      	bx	lr

0801722e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801722e:	b480      	push	{r7}
 8017230:	b083      	sub	sp, #12
 8017232:	af00      	add	r7, sp, #0
 8017234:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017236:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017238:	4618      	mov	r0, r3
 801723a:	370c      	adds	r7, #12
 801723c:	46bd      	mov	sp, r7
 801723e:	bc80      	pop	{r7}
 8017240:	4770      	bx	lr

08017242 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8017242:	b480      	push	{r7}
 8017244:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017246:	bf00      	nop
 8017248:	46bd      	mov	sp, r7
 801724a:	bc80      	pop	{r7}
 801724c:	4770      	bx	lr

0801724e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801724e:	b480      	push	{r7}
 8017250:	b083      	sub	sp, #12
 8017252:	af00      	add	r7, sp, #0
 8017254:	4603      	mov	r3, r0
 8017256:	6039      	str	r1, [r7, #0]
 8017258:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801725a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801725c:	4618      	mov	r0, r3
 801725e:	370c      	adds	r7, #12
 8017260:	46bd      	mov	sp, r7
 8017262:	bc80      	pop	{r7}
 8017264:	4770      	bx	lr

08017266 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8017266:	b480      	push	{r7}
 8017268:	b083      	sub	sp, #12
 801726a:	af00      	add	r7, sp, #0
 801726c:	4603      	mov	r3, r0
 801726e:	603a      	str	r2, [r7, #0]
 8017270:	80fb      	strh	r3, [r7, #6]
 8017272:	460b      	mov	r3, r1
 8017274:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017276:	bf00      	nop
 8017278:	370c      	adds	r7, #12
 801727a:	46bd      	mov	sp, r7
 801727c:	bc80      	pop	{r7}
 801727e:	4770      	bx	lr

08017280 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8017280:	b480      	push	{r7}
 8017282:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017284:	bf00      	nop
 8017286:	46bd      	mov	sp, r7
 8017288:	bc80      	pop	{r7}
 801728a:	4770      	bx	lr

0801728c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801728c:	b480      	push	{r7}
 801728e:	b083      	sub	sp, #12
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8017294:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017296:	4618      	mov	r0, r3
 8017298:	370c      	adds	r7, #12
 801729a:	46bd      	mov	sp, r7
 801729c:	bc80      	pop	{r7}
 801729e:	4770      	bx	lr

080172a0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80172a0:	b480      	push	{r7}
 80172a2:	b083      	sub	sp, #12
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80172a8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172aa:	4618      	mov	r0, r3
 80172ac:	370c      	adds	r7, #12
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bc80      	pop	{r7}
 80172b2:	4770      	bx	lr

080172b4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80172b4:	b480      	push	{r7}
 80172b6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172b8:	bf00      	nop
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bc80      	pop	{r7}
 80172be:	4770      	bx	lr

080172c0 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80172c0:	b480      	push	{r7}
 80172c2:	b083      	sub	sp, #12
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	460b      	mov	r3, r1
 80172ca:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172cc:	bf00      	nop
 80172ce:	370c      	adds	r7, #12
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bc80      	pop	{r7}
 80172d4:	4770      	bx	lr

080172d6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80172d6:	b480      	push	{r7}
 80172d8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172da:	bf00      	nop
 80172dc:	46bd      	mov	sp, r7
 80172de:	bc80      	pop	{r7}
 80172e0:	4770      	bx	lr

080172e2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80172e2:	b480      	push	{r7}
 80172e4:	b085      	sub	sp, #20
 80172e6:	af00      	add	r7, sp, #0
 80172e8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80172ee:	2300      	movs	r3, #0
 80172f0:	81fb      	strh	r3, [r7, #14]
 80172f2:	e00a      	b.n	801730a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80172f4:	89fb      	ldrh	r3, [r7, #14]
 80172f6:	68ba      	ldr	r2, [r7, #8]
 80172f8:	4413      	add	r3, r2
 80172fa:	781b      	ldrb	r3, [r3, #0]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d001      	beq.n	8017304 <IsSlotFree+0x22>
        {
            return false;
 8017300:	2300      	movs	r3, #0
 8017302:	e006      	b.n	8017312 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8017304:	89fb      	ldrh	r3, [r7, #14]
 8017306:	3301      	adds	r3, #1
 8017308:	81fb      	strh	r3, [r7, #14]
 801730a:	89fb      	ldrh	r3, [r7, #14]
 801730c:	2b0f      	cmp	r3, #15
 801730e:	d9f1      	bls.n	80172f4 <IsSlotFree+0x12>
        }
    }
    return true;
 8017310:	2301      	movs	r3, #1
}
 8017312:	4618      	mov	r0, r3
 8017314:	3714      	adds	r7, #20
 8017316:	46bd      	mov	sp, r7
 8017318:	bc80      	pop	{r7}
 801731a:	4770      	bx	lr

0801731c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8017322:	2300      	movs	r3, #0
 8017324:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017326:	e007      	b.n	8017338 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8017328:	79fb      	ldrb	r3, [r7, #7]
 801732a:	3301      	adds	r3, #1
 801732c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801732e:	79fb      	ldrb	r3, [r7, #7]
 8017330:	2b20      	cmp	r3, #32
 8017332:	d101      	bne.n	8017338 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8017334:	2300      	movs	r3, #0
 8017336:	e012      	b.n	801735e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017338:	79fb      	ldrb	r3, [r7, #7]
 801733a:	011b      	lsls	r3, r3, #4
 801733c:	3308      	adds	r3, #8
 801733e:	4a0a      	ldr	r2, [pc, #40]	; (8017368 <MallocNewMacCommandSlot+0x4c>)
 8017340:	4413      	add	r3, r2
 8017342:	4618      	mov	r0, r3
 8017344:	f7ff ffcd 	bl	80172e2 <IsSlotFree>
 8017348:	4603      	mov	r3, r0
 801734a:	f083 0301 	eor.w	r3, r3, #1
 801734e:	b2db      	uxtb	r3, r3
 8017350:	2b00      	cmp	r3, #0
 8017352:	d1e9      	bne.n	8017328 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8017354:	79fb      	ldrb	r3, [r7, #7]
 8017356:	011b      	lsls	r3, r3, #4
 8017358:	3308      	adds	r3, #8
 801735a:	4a03      	ldr	r2, [pc, #12]	; (8017368 <MallocNewMacCommandSlot+0x4c>)
 801735c:	4413      	add	r3, r2
}
 801735e:	4618      	mov	r0, r3
 8017360:	3708      	adds	r7, #8
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	20001a58 	.word	0x20001a58

0801736c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d101      	bne.n	801737e <FreeMacCommandSlot+0x12>
    {
        return false;
 801737a:	2300      	movs	r3, #0
 801737c:	e005      	b.n	801738a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801737e:	2210      	movs	r2, #16
 8017380:	2100      	movs	r1, #0
 8017382:	6878      	ldr	r0, [r7, #4]
 8017384:	f004 fa7e 	bl	801b884 <memset1>

    return true;
 8017388:	2301      	movs	r3, #1
}
 801738a:	4618      	mov	r0, r3
 801738c:	3708      	adds	r7, #8
 801738e:	46bd      	mov	sp, r7
 8017390:	bd80      	pop	{r7, pc}

08017392 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8017392:	b480      	push	{r7}
 8017394:	b083      	sub	sp, #12
 8017396:	af00      	add	r7, sp, #0
 8017398:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d101      	bne.n	80173a4 <LinkedListInit+0x12>
    {
        return false;
 80173a0:	2300      	movs	r3, #0
 80173a2:	e006      	b.n	80173b2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2200      	movs	r2, #0
 80173a8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	2200      	movs	r2, #0
 80173ae:	605a      	str	r2, [r3, #4]

    return true;
 80173b0:	2301      	movs	r3, #1
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	370c      	adds	r7, #12
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bc80      	pop	{r7}
 80173ba:	4770      	bx	lr

080173bc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80173bc:	b480      	push	{r7}
 80173be:	b083      	sub	sp, #12
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d002      	beq.n	80173d2 <LinkedListAdd+0x16>
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d101      	bne.n	80173d6 <LinkedListAdd+0x1a>
    {
        return false;
 80173d2:	2300      	movs	r3, #0
 80173d4:	e015      	b.n	8017402 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d102      	bne.n	80173e4 <LinkedListAdd+0x28>
    {
        list->First = element;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	683a      	ldr	r2, [r7, #0]
 80173e2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	685b      	ldr	r3, [r3, #4]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d003      	beq.n	80173f4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	685b      	ldr	r3, [r3, #4]
 80173f0:	683a      	ldr	r2, [r7, #0]
 80173f2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	2200      	movs	r2, #0
 80173f8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	683a      	ldr	r2, [r7, #0]
 80173fe:	605a      	str	r2, [r3, #4]

    return true;
 8017400:	2301      	movs	r3, #1
}
 8017402:	4618      	mov	r0, r3
 8017404:	370c      	adds	r7, #12
 8017406:	46bd      	mov	sp, r7
 8017408:	bc80      	pop	{r7}
 801740a:	4770      	bx	lr

0801740c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801740c:	b480      	push	{r7}
 801740e:	b085      	sub	sp, #20
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d002      	beq.n	8017422 <LinkedListGetPrevious+0x16>
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d101      	bne.n	8017426 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8017422:	2300      	movs	r3, #0
 8017424:	e016      	b.n	8017454 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801742c:	683a      	ldr	r2, [r7, #0]
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	429a      	cmp	r2, r3
 8017432:	d00c      	beq.n	801744e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8017434:	e002      	b.n	801743c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d007      	beq.n	8017452 <LinkedListGetPrevious+0x46>
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	683a      	ldr	r2, [r7, #0]
 8017448:	429a      	cmp	r2, r3
 801744a:	d1f4      	bne.n	8017436 <LinkedListGetPrevious+0x2a>
 801744c:	e001      	b.n	8017452 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801744e:	2300      	movs	r3, #0
 8017450:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8017452:	68fb      	ldr	r3, [r7, #12]
}
 8017454:	4618      	mov	r0, r3
 8017456:	3714      	adds	r7, #20
 8017458:	46bd      	mov	sp, r7
 801745a:	bc80      	pop	{r7}
 801745c:	4770      	bx	lr

0801745e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801745e:	b580      	push	{r7, lr}
 8017460:	b084      	sub	sp, #16
 8017462:	af00      	add	r7, sp, #0
 8017464:	6078      	str	r0, [r7, #4]
 8017466:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d002      	beq.n	8017474 <LinkedListRemove+0x16>
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d101      	bne.n	8017478 <LinkedListRemove+0x1a>
    {
        return false;
 8017474:	2300      	movs	r3, #0
 8017476:	e020      	b.n	80174ba <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8017478:	6839      	ldr	r1, [r7, #0]
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f7ff ffc6 	bl	801740c <LinkedListGetPrevious>
 8017480:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	683a      	ldr	r2, [r7, #0]
 8017488:	429a      	cmp	r2, r3
 801748a:	d103      	bne.n	8017494 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	681a      	ldr	r2, [r3, #0]
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	683a      	ldr	r2, [r7, #0]
 801749a:	429a      	cmp	r2, r3
 801749c:	d102      	bne.n	80174a4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	68fa      	ldr	r2, [r7, #12]
 80174a2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d003      	beq.n	80174b2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	681a      	ldr	r2, [r3, #0]
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	2200      	movs	r2, #0
 80174b6:	601a      	str	r2, [r3, #0]

    return true;
 80174b8:	2301      	movs	r3, #1
}
 80174ba:	4618      	mov	r0, r3
 80174bc:	3710      	adds	r7, #16
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
	...

080174c4 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80174c4:	b480      	push	{r7}
 80174c6:	b083      	sub	sp, #12
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	4603      	mov	r3, r0
 80174cc:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80174ce:	79fb      	ldrb	r3, [r7, #7]
 80174d0:	2b11      	cmp	r3, #17
 80174d2:	bf8c      	ite	hi
 80174d4:	2201      	movhi	r2, #1
 80174d6:	2200      	movls	r2, #0
 80174d8:	b2d2      	uxtb	r2, r2
 80174da:	2a00      	cmp	r2, #0
 80174dc:	d10d      	bne.n	80174fa <IsSticky+0x36>
 80174de:	4a0a      	ldr	r2, [pc, #40]	; (8017508 <IsSticky+0x44>)
 80174e0:	fa22 f303 	lsr.w	r3, r2, r3
 80174e4:	f003 0301 	and.w	r3, r3, #1
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	bf14      	ite	ne
 80174ec:	2301      	movne	r3, #1
 80174ee:	2300      	moveq	r3, #0
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d001      	beq.n	80174fa <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80174f6:	2301      	movs	r3, #1
 80174f8:	e000      	b.n	80174fc <IsSticky+0x38>
        default:
            return false;
 80174fa:	2300      	movs	r3, #0
    }
}
 80174fc:	4618      	mov	r0, r3
 80174fe:	370c      	adds	r7, #12
 8017500:	46bd      	mov	sp, r7
 8017502:	bc80      	pop	{r7}
 8017504:	4770      	bx	lr
 8017506:	bf00      	nop
 8017508:	00020720 	.word	0x00020720

0801750c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801750c:	b480      	push	{r7}
 801750e:	b083      	sub	sp, #12
 8017510:	af00      	add	r7, sp, #0
 8017512:	4603      	mov	r3, r0
 8017514:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8017516:	2300      	movs	r3, #0
    }
}
 8017518:	4618      	mov	r0, r3
 801751a:	370c      	adds	r7, #12
 801751c:	46bd      	mov	sp, r7
 801751e:	bc80      	pop	{r7}
 8017520:	4770      	bx	lr
	...

08017524 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8017524:	b580      	push	{r7, lr}
 8017526:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8017528:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801752c:	2100      	movs	r1, #0
 801752e:	4804      	ldr	r0, [pc, #16]	; (8017540 <LoRaMacCommandsInit+0x1c>)
 8017530:	f004 f9a8 	bl	801b884 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8017534:	4802      	ldr	r0, [pc, #8]	; (8017540 <LoRaMacCommandsInit+0x1c>)
 8017536:	f7ff ff2c 	bl	8017392 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801753a:	2300      	movs	r3, #0
}
 801753c:	4618      	mov	r0, r3
 801753e:	bd80      	pop	{r7, pc}
 8017540:	20001a58 	.word	0x20001a58

08017544 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af00      	add	r7, sp, #0
 801754a:	4603      	mov	r3, r0
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
 8017550:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d101      	bne.n	801755c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017558:	2301      	movs	r3, #1
 801755a:	e03b      	b.n	80175d4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801755c:	f7ff fede 	bl	801731c <MallocNewMacCommandSlot>
 8017560:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8017562:	697b      	ldr	r3, [r7, #20]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d101      	bne.n	801756c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8017568:	2302      	movs	r3, #2
 801756a:	e033      	b.n	80175d4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801756c:	6979      	ldr	r1, [r7, #20]
 801756e:	481b      	ldr	r0, [pc, #108]	; (80175dc <LoRaMacCommandsAddCmd+0x98>)
 8017570:	f7ff ff24 	bl	80173bc <LinkedListAdd>
 8017574:	4603      	mov	r3, r0
 8017576:	f083 0301 	eor.w	r3, r3, #1
 801757a:	b2db      	uxtb	r3, r3
 801757c:	2b00      	cmp	r3, #0
 801757e:	d001      	beq.n	8017584 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8017580:	2305      	movs	r3, #5
 8017582:	e027      	b.n	80175d4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	7bfa      	ldrb	r2, [r7, #15]
 8017588:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801758a:	697b      	ldr	r3, [r7, #20]
 801758c:	687a      	ldr	r2, [r7, #4]
 801758e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	3305      	adds	r3, #5
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	b292      	uxth	r2, r2
 8017598:	68b9      	ldr	r1, [r7, #8]
 801759a:	4618      	mov	r0, r3
 801759c:	f004 f937 	bl	801b80e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80175a0:	7bfb      	ldrb	r3, [r7, #15]
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7ff ff8e 	bl	80174c4 <IsSticky>
 80175a8:	4603      	mov	r3, r0
 80175aa:	461a      	mov	r2, r3
 80175ac:	697b      	ldr	r3, [r7, #20]
 80175ae:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80175b0:	7bfb      	ldrb	r3, [r7, #15]
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7ff ffaa 	bl	801750c <IsConfirmationRequired>
 80175b8:	4603      	mov	r3, r0
 80175ba:	461a      	mov	r2, r3
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80175c0:	4b06      	ldr	r3, [pc, #24]	; (80175dc <LoRaMacCommandsAddCmd+0x98>)
 80175c2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	4413      	add	r3, r2
 80175ca:	3301      	adds	r3, #1
 80175cc:	4a03      	ldr	r2, [pc, #12]	; (80175dc <LoRaMacCommandsAddCmd+0x98>)
 80175ce:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80175d2:	2300      	movs	r3, #0
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3718      	adds	r7, #24
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}
 80175dc:	20001a58 	.word	0x20001a58

080175e0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d101      	bne.n	80175f2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80175ee:	2301      	movs	r3, #1
 80175f0:	e021      	b.n	8017636 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80175f2:	6879      	ldr	r1, [r7, #4]
 80175f4:	4812      	ldr	r0, [pc, #72]	; (8017640 <LoRaMacCommandsRemoveCmd+0x60>)
 80175f6:	f7ff ff32 	bl	801745e <LinkedListRemove>
 80175fa:	4603      	mov	r3, r0
 80175fc:	f083 0301 	eor.w	r3, r3, #1
 8017600:	b2db      	uxtb	r3, r3
 8017602:	2b00      	cmp	r3, #0
 8017604:	d001      	beq.n	801760a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8017606:	2303      	movs	r3, #3
 8017608:	e015      	b.n	8017636 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801760a:	4b0d      	ldr	r3, [pc, #52]	; (8017640 <LoRaMacCommandsRemoveCmd+0x60>)
 801760c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	689b      	ldr	r3, [r3, #8]
 8017614:	1ad3      	subs	r3, r2, r3
 8017616:	3b01      	subs	r3, #1
 8017618:	4a09      	ldr	r2, [pc, #36]	; (8017640 <LoRaMacCommandsRemoveCmd+0x60>)
 801761a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f7ff fea4 	bl	801736c <FreeMacCommandSlot>
 8017624:	4603      	mov	r3, r0
 8017626:	f083 0301 	eor.w	r3, r3, #1
 801762a:	b2db      	uxtb	r3, r3
 801762c:	2b00      	cmp	r3, #0
 801762e:	d001      	beq.n	8017634 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8017630:	2305      	movs	r3, #5
 8017632:	e000      	b.n	8017636 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8017634:	2300      	movs	r3, #0
}
 8017636:	4618      	mov	r0, r3
 8017638:	3708      	adds	r7, #8
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}
 801763e:	bf00      	nop
 8017640:	20001a58 	.word	0x20001a58

08017644 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8017644:	b480      	push	{r7}
 8017646:	b085      	sub	sp, #20
 8017648:	af00      	add	r7, sp, #0
 801764a:	4603      	mov	r3, r0
 801764c:	6039      	str	r1, [r7, #0]
 801764e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8017650:	4b0e      	ldr	r3, [pc, #56]	; (801768c <LoRaMacCommandsGetCmd+0x48>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8017656:	e002      	b.n	801765e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d004      	beq.n	801766e <LoRaMacCommandsGetCmd+0x2a>
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	791b      	ldrb	r3, [r3, #4]
 8017668:	79fa      	ldrb	r2, [r7, #7]
 801766a:	429a      	cmp	r2, r3
 801766c:	d1f4      	bne.n	8017658 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	68fa      	ldr	r2, [r7, #12]
 8017672:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d101      	bne.n	801767e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801767a:	2303      	movs	r3, #3
 801767c:	e000      	b.n	8017680 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801767e:	2300      	movs	r3, #0
}
 8017680:	4618      	mov	r0, r3
 8017682:	3714      	adds	r7, #20
 8017684:	46bd      	mov	sp, r7
 8017686:	bc80      	pop	{r7}
 8017688:	4770      	bx	lr
 801768a:	bf00      	nop
 801768c:	20001a58 	.word	0x20001a58

08017690 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8017696:	4b0f      	ldr	r3, [pc, #60]	; (80176d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801769c:	e012      	b.n	80176c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	7b1b      	ldrb	r3, [r3, #12]
 80176a2:	f083 0301 	eor.w	r3, r3, #1
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d008      	beq.n	80176be <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f7ff ff94 	bl	80175e0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80176b8:	683b      	ldr	r3, [r7, #0]
 80176ba:	607b      	str	r3, [r7, #4]
 80176bc:	e002      	b.n	80176c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d1e9      	bne.n	801769e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80176ca:	2300      	movs	r3, #0
}
 80176cc:	4618      	mov	r0, r3
 80176ce:	3708      	adds	r7, #8
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	20001a58 	.word	0x20001a58

080176d8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80176de:	4b13      	ldr	r3, [pc, #76]	; (801772c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80176e4:	e01a      	b.n	801771c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	791b      	ldrb	r3, [r3, #4]
 80176f0:	4618      	mov	r0, r3
 80176f2:	f7ff fee7 	bl	80174c4 <IsSticky>
 80176f6:	4603      	mov	r3, r0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d00d      	beq.n	8017718 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	791b      	ldrb	r3, [r3, #4]
 8017700:	4618      	mov	r0, r3
 8017702:	f7ff ff03 	bl	801750c <IsConfirmationRequired>
 8017706:	4603      	mov	r3, r0
 8017708:	f083 0301 	eor.w	r3, r3, #1
 801770c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801770e:	2b00      	cmp	r3, #0
 8017710:	d002      	beq.n	8017718 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f7ff ff64 	bl	80175e0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d1e1      	bne.n	80176e6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8017722:	2300      	movs	r3, #0
}
 8017724:	4618      	mov	r0, r3
 8017726:	3708      	adds	r7, #8
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}
 801772c:	20001a58 	.word	0x20001a58

08017730 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8017730:	b480      	push	{r7}
 8017732:	b083      	sub	sp, #12
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d101      	bne.n	8017742 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801773e:	2301      	movs	r3, #1
 8017740:	e005      	b.n	801774e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8017742:	4b05      	ldr	r3, [pc, #20]	; (8017758 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8017744:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801774c:	2300      	movs	r3, #0
}
 801774e:	4618      	mov	r0, r3
 8017750:	370c      	adds	r7, #12
 8017752:	46bd      	mov	sp, r7
 8017754:	bc80      	pop	{r7}
 8017756:	4770      	bx	lr
 8017758:	20001a58 	.word	0x20001a58

0801775c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b088      	sub	sp, #32
 8017760:	af00      	add	r7, sp, #0
 8017762:	60f8      	str	r0, [r7, #12]
 8017764:	60b9      	str	r1, [r7, #8]
 8017766:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8017768:	4b25      	ldr	r3, [pc, #148]	; (8017800 <LoRaMacCommandsSerializeCmds+0xa4>)
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801776e:	2300      	movs	r3, #0
 8017770:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d002      	beq.n	801777e <LoRaMacCommandsSerializeCmds+0x22>
 8017778:	68bb      	ldr	r3, [r7, #8]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d126      	bne.n	80177cc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801777e:	2301      	movs	r3, #1
 8017780:	e039      	b.n	80177f6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8017782:	7efb      	ldrb	r3, [r7, #27]
 8017784:	68fa      	ldr	r2, [r7, #12]
 8017786:	1ad2      	subs	r2, r2, r3
 8017788:	69fb      	ldr	r3, [r7, #28]
 801778a:	689b      	ldr	r3, [r3, #8]
 801778c:	3301      	adds	r3, #1
 801778e:	429a      	cmp	r2, r3
 8017790:	d320      	bcc.n	80177d4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8017792:	7efb      	ldrb	r3, [r7, #27]
 8017794:	1c5a      	adds	r2, r3, #1
 8017796:	76fa      	strb	r2, [r7, #27]
 8017798:	461a      	mov	r2, r3
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	4413      	add	r3, r2
 801779e:	69fa      	ldr	r2, [r7, #28]
 80177a0:	7912      	ldrb	r2, [r2, #4]
 80177a2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80177a4:	7efb      	ldrb	r3, [r7, #27]
 80177a6:	687a      	ldr	r2, [r7, #4]
 80177a8:	18d0      	adds	r0, r2, r3
 80177aa:	69fb      	ldr	r3, [r7, #28]
 80177ac:	1d59      	adds	r1, r3, #5
 80177ae:	69fb      	ldr	r3, [r7, #28]
 80177b0:	689b      	ldr	r3, [r3, #8]
 80177b2:	b29b      	uxth	r3, r3
 80177b4:	461a      	mov	r2, r3
 80177b6:	f004 f82a 	bl	801b80e <memcpy1>
            itr += curElement->PayloadSize;
 80177ba:	69fb      	ldr	r3, [r7, #28]
 80177bc:	689b      	ldr	r3, [r3, #8]
 80177be:	b2da      	uxtb	r2, r3
 80177c0:	7efb      	ldrb	r3, [r7, #27]
 80177c2:	4413      	add	r3, r2
 80177c4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80177c6:	69fb      	ldr	r3, [r7, #28]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80177cc:	69fb      	ldr	r3, [r7, #28]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d1d7      	bne.n	8017782 <LoRaMacCommandsSerializeCmds+0x26>
 80177d2:	e009      	b.n	80177e8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80177d4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80177d6:	e007      	b.n	80177e8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80177d8:	69fb      	ldr	r3, [r7, #28]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80177de:	69f8      	ldr	r0, [r7, #28]
 80177e0:	f7ff fefe 	bl	80175e0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80177e4:	697b      	ldr	r3, [r7, #20]
 80177e6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80177e8:	69fb      	ldr	r3, [r7, #28]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d1f4      	bne.n	80177d8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80177ee:	68b8      	ldr	r0, [r7, #8]
 80177f0:	f7ff ff9e 	bl	8017730 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80177f4:	2300      	movs	r3, #0
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3720      	adds	r7, #32
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
 80177fe:	bf00      	nop
 8017800:	20001a58 	.word	0x20001a58

08017804 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8017804:	b480      	push	{r7}
 8017806:	b085      	sub	sp, #20
 8017808:	af00      	add	r7, sp, #0
 801780a:	4603      	mov	r3, r0
 801780c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801780e:	2300      	movs	r3, #0
 8017810:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8017812:	79fb      	ldrb	r3, [r7, #7]
 8017814:	3b02      	subs	r3, #2
 8017816:	2b11      	cmp	r3, #17
 8017818:	d850      	bhi.n	80178bc <LoRaMacCommandsGetCmdSize+0xb8>
 801781a:	a201      	add	r2, pc, #4	; (adr r2, 8017820 <LoRaMacCommandsGetCmdSize+0x1c>)
 801781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017820:	08017869 	.word	0x08017869
 8017824:	0801786f 	.word	0x0801786f
 8017828:	08017875 	.word	0x08017875
 801782c:	0801787b 	.word	0x0801787b
 8017830:	08017881 	.word	0x08017881
 8017834:	08017887 	.word	0x08017887
 8017838:	0801788d 	.word	0x0801788d
 801783c:	08017893 	.word	0x08017893
 8017840:	08017899 	.word	0x08017899
 8017844:	080178bd 	.word	0x080178bd
 8017848:	080178bd 	.word	0x080178bd
 801784c:	0801789f 	.word	0x0801789f
 8017850:	080178bd 	.word	0x080178bd
 8017854:	080178bd 	.word	0x080178bd
 8017858:	080178a5 	.word	0x080178a5
 801785c:	080178ab 	.word	0x080178ab
 8017860:	080178b1 	.word	0x080178b1
 8017864:	080178b7 	.word	0x080178b7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8017868:	2303      	movs	r3, #3
 801786a:	73fb      	strb	r3, [r7, #15]
            break;
 801786c:	e027      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801786e:	2305      	movs	r3, #5
 8017870:	73fb      	strb	r3, [r7, #15]
            break;
 8017872:	e024      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8017874:	2302      	movs	r3, #2
 8017876:	73fb      	strb	r3, [r7, #15]
            break;
 8017878:	e021      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801787a:	2305      	movs	r3, #5
 801787c:	73fb      	strb	r3, [r7, #15]
            break;
 801787e:	e01e      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8017880:	2301      	movs	r3, #1
 8017882:	73fb      	strb	r3, [r7, #15]
            break;
 8017884:	e01b      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8017886:	2306      	movs	r3, #6
 8017888:	73fb      	strb	r3, [r7, #15]
            break;
 801788a:	e018      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801788c:	2302      	movs	r3, #2
 801788e:	73fb      	strb	r3, [r7, #15]
            break;
 8017890:	e015      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8017892:	2302      	movs	r3, #2
 8017894:	73fb      	strb	r3, [r7, #15]
            break;
 8017896:	e012      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8017898:	2305      	movs	r3, #5
 801789a:	73fb      	strb	r3, [r7, #15]
            break;
 801789c:	e00f      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801789e:	2306      	movs	r3, #6
 80178a0:	73fb      	strb	r3, [r7, #15]
            break;
 80178a2:	e00c      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80178a4:	2301      	movs	r3, #1
 80178a6:	73fb      	strb	r3, [r7, #15]
            break;
 80178a8:	e009      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80178aa:	2305      	movs	r3, #5
 80178ac:	73fb      	strb	r3, [r7, #15]
            break;
 80178ae:	e006      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80178b0:	2304      	movs	r3, #4
 80178b2:	73fb      	strb	r3, [r7, #15]
            break;
 80178b4:	e003      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80178b6:	2304      	movs	r3, #4
 80178b8:	73fb      	strb	r3, [r7, #15]
            break;
 80178ba:	e000      	b.n	80178be <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80178bc:	bf00      	nop
        }
    }
    return cidSize;
 80178be:	7bfb      	ldrb	r3, [r7, #15]
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	3714      	adds	r7, #20
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bc80      	pop	{r7}
 80178c8:	4770      	bx	lr
 80178ca:	bf00      	nop

080178cc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80178cc:	b480      	push	{r7}
 80178ce:	b083      	sub	sp, #12
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	4a07      	ldr	r2, [pc, #28]	; (80178f4 <IncreaseBufferPointer+0x28>)
 80178d8:	4293      	cmp	r3, r2
 80178da:	d102      	bne.n	80178e2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80178dc:	4b06      	ldr	r3, [pc, #24]	; (80178f8 <IncreaseBufferPointer+0x2c>)
 80178de:	607b      	str	r3, [r7, #4]
 80178e0:	e002      	b.n	80178e8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	3304      	adds	r3, #4
 80178e6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80178e8:	687b      	ldr	r3, [r7, #4]
}
 80178ea:	4618      	mov	r0, r3
 80178ec:	370c      	adds	r7, #12
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bc80      	pop	{r7}
 80178f2:	4770      	bx	lr
 80178f4:	20001c80 	.word	0x20001c80
 80178f8:	20001c70 	.word	0x20001c70

080178fc <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80178fc:	b480      	push	{r7}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
 8017902:	4603      	mov	r3, r0
 8017904:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8017906:	79fb      	ldrb	r3, [r7, #7]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d101      	bne.n	8017910 <IsListEmpty+0x14>
    {
        return true;
 801790c:	2301      	movs	r3, #1
 801790e:	e000      	b.n	8017912 <IsListEmpty+0x16>
    }
    return false;
 8017910:	2300      	movs	r3, #0
}
 8017912:	4618      	mov	r0, r3
 8017914:	370c      	adds	r7, #12
 8017916:	46bd      	mov	sp, r7
 8017918:	bc80      	pop	{r7}
 801791a:	4770      	bx	lr

0801791c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801791c:	b480      	push	{r7}
 801791e:	b083      	sub	sp, #12
 8017920:	af00      	add	r7, sp, #0
 8017922:	4603      	mov	r3, r0
 8017924:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8017926:	79fb      	ldrb	r3, [r7, #7]
 8017928:	2b04      	cmp	r3, #4
 801792a:	d901      	bls.n	8017930 <IsListFull+0x14>
    {
        return true;
 801792c:	2301      	movs	r3, #1
 801792e:	e000      	b.n	8017932 <IsListFull+0x16>
    }
    return false;
 8017930:	2300      	movs	r3, #0
}
 8017932:	4618      	mov	r0, r3
 8017934:	370c      	adds	r7, #12
 8017936:	46bd      	mov	sp, r7
 8017938:	bc80      	pop	{r7}
 801793a:	4770      	bx	lr

0801793c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b086      	sub	sp, #24
 8017940:	af00      	add	r7, sp, #0
 8017942:	4603      	mov	r3, r0
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
 8017948:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801794a:	68bb      	ldr	r3, [r7, #8]
 801794c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801794e:	4b13      	ldr	r3, [pc, #76]	; (801799c <GetElement+0x60>)
 8017950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017954:	4618      	mov	r0, r3
 8017956:	f7ff ffd1 	bl	80178fc <IsListEmpty>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	d001      	beq.n	8017964 <GetElement+0x28>
    {
        return NULL;
 8017960:	2300      	movs	r3, #0
 8017962:	e017      	b.n	8017994 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8017964:	2300      	movs	r3, #0
 8017966:	74fb      	strb	r3, [r7, #19]
 8017968:	e00d      	b.n	8017986 <GetElement+0x4a>
    {
        if( element->Request == request )
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	781b      	ldrb	r3, [r3, #0]
 801796e:	7bfa      	ldrb	r2, [r7, #15]
 8017970:	429a      	cmp	r2, r3
 8017972:	d101      	bne.n	8017978 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8017974:	697b      	ldr	r3, [r7, #20]
 8017976:	e00d      	b.n	8017994 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8017978:	6978      	ldr	r0, [r7, #20]
 801797a:	f7ff ffa7 	bl	80178cc <IncreaseBufferPointer>
 801797e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8017980:	7cfb      	ldrb	r3, [r7, #19]
 8017982:	3301      	adds	r3, #1
 8017984:	74fb      	strb	r3, [r7, #19]
 8017986:	4b05      	ldr	r3, [pc, #20]	; (801799c <GetElement+0x60>)
 8017988:	f893 3020 	ldrb.w	r3, [r3, #32]
 801798c:	7cfa      	ldrb	r2, [r7, #19]
 801798e:	429a      	cmp	r2, r3
 8017990:	d3eb      	bcc.n	801796a <GetElement+0x2e>
    }

    return NULL;
 8017992:	2300      	movs	r3, #0
}
 8017994:	4618      	mov	r0, r3
 8017996:	3718      	adds	r7, #24
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	20001c64 	.word	0x20001c64

080179a0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80179a8:	4a0c      	ldr	r2, [pc, #48]	; (80179dc <LoRaMacConfirmQueueInit+0x3c>)
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80179ae:	4b0b      	ldr	r3, [pc, #44]	; (80179dc <LoRaMacConfirmQueueInit+0x3c>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80179b6:	4b09      	ldr	r3, [pc, #36]	; (80179dc <LoRaMacConfirmQueueInit+0x3c>)
 80179b8:	4a09      	ldr	r2, [pc, #36]	; (80179e0 <LoRaMacConfirmQueueInit+0x40>)
 80179ba:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80179bc:	4b07      	ldr	r3, [pc, #28]	; (80179dc <LoRaMacConfirmQueueInit+0x3c>)
 80179be:	4a08      	ldr	r2, [pc, #32]	; (80179e0 <LoRaMacConfirmQueueInit+0x40>)
 80179c0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80179c2:	2214      	movs	r2, #20
 80179c4:	21ff      	movs	r1, #255	; 0xff
 80179c6:	4806      	ldr	r0, [pc, #24]	; (80179e0 <LoRaMacConfirmQueueInit+0x40>)
 80179c8:	f003 ff5c 	bl	801b884 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80179cc:	4b03      	ldr	r3, [pc, #12]	; (80179dc <LoRaMacConfirmQueueInit+0x3c>)
 80179ce:	2201      	movs	r2, #1
 80179d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80179d4:	bf00      	nop
 80179d6:	3708      	adds	r7, #8
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	20001c64 	.word	0x20001c64
 80179e0:	20001c70 	.word	0x20001c70

080179e4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b082      	sub	sp, #8
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80179ec:	4b19      	ldr	r3, [pc, #100]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 80179ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80179f2:	4618      	mov	r0, r3
 80179f4:	f7ff ff92 	bl	801791c <IsListFull>
 80179f8:	4603      	mov	r3, r0
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d001      	beq.n	8017a02 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80179fe:	2300      	movs	r3, #0
 8017a00:	e024      	b.n	8017a4c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8017a02:	4b14      	ldr	r3, [pc, #80]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a04:	689b      	ldr	r3, [r3, #8]
 8017a06:	687a      	ldr	r2, [r7, #4]
 8017a08:	7812      	ldrb	r2, [r2, #0]
 8017a0a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8017a0c:	4b11      	ldr	r3, [pc, #68]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a0e:	689b      	ldr	r3, [r3, #8]
 8017a10:	687a      	ldr	r2, [r7, #4]
 8017a12:	7852      	ldrb	r2, [r2, #1]
 8017a14:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8017a16:	4b0f      	ldr	r3, [pc, #60]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a18:	689b      	ldr	r3, [r3, #8]
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	78d2      	ldrb	r2, [r2, #3]
 8017a1e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8017a20:	4b0c      	ldr	r3, [pc, #48]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a22:	689b      	ldr	r3, [r3, #8]
 8017a24:	687a      	ldr	r2, [r7, #4]
 8017a26:	7892      	ldrb	r2, [r2, #2]
 8017a28:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8017a2a:	4b0a      	ldr	r3, [pc, #40]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a30:	3301      	adds	r3, #1
 8017a32:	b2da      	uxtb	r2, r3
 8017a34:	4b07      	ldr	r3, [pc, #28]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a36:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8017a3a:	4b06      	ldr	r3, [pc, #24]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a3c:	689b      	ldr	r3, [r3, #8]
 8017a3e:	4618      	mov	r0, r3
 8017a40:	f7ff ff44 	bl	80178cc <IncreaseBufferPointer>
 8017a44:	4603      	mov	r3, r0
 8017a46:	4a03      	ldr	r2, [pc, #12]	; (8017a54 <LoRaMacConfirmQueueAdd+0x70>)
 8017a48:	6093      	str	r3, [r2, #8]

    return true;
 8017a4a:	2301      	movs	r3, #1
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3708      	adds	r7, #8
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	20001c64 	.word	0x20001c64

08017a58 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017a5c:	4b0e      	ldr	r3, [pc, #56]	; (8017a98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a62:	4618      	mov	r0, r3
 8017a64:	f7ff ff4a 	bl	80178fc <IsListEmpty>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d001      	beq.n	8017a72 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	e010      	b.n	8017a94 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8017a72:	4b09      	ldr	r3, [pc, #36]	; (8017a98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a78:	3b01      	subs	r3, #1
 8017a7a:	b2da      	uxtb	r2, r3
 8017a7c:	4b06      	ldr	r3, [pc, #24]	; (8017a98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a7e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8017a82:	4b05      	ldr	r3, [pc, #20]	; (8017a98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a84:	685b      	ldr	r3, [r3, #4]
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7ff ff20 	bl	80178cc <IncreaseBufferPointer>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	4a02      	ldr	r2, [pc, #8]	; (8017a98 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a90:	6053      	str	r3, [r2, #4]

    return true;
 8017a92:	2301      	movs	r3, #1
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	20001c64 	.word	0x20001c64

08017a9c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b084      	sub	sp, #16
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	460a      	mov	r2, r1
 8017aa6:	71fb      	strb	r3, [r7, #7]
 8017aa8:	4613      	mov	r3, r2
 8017aaa:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8017aac:	2300      	movs	r3, #0
 8017aae:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017ab0:	4b10      	ldr	r3, [pc, #64]	; (8017af4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8017ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7ff ff20 	bl	80178fc <IsListEmpty>
 8017abc:	4603      	mov	r3, r0
 8017abe:	f083 0301 	eor.w	r3, r3, #1
 8017ac2:	b2db      	uxtb	r3, r3
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d011      	beq.n	8017aec <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8017ac8:	4b0a      	ldr	r3, [pc, #40]	; (8017af4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8017aca:	6859      	ldr	r1, [r3, #4]
 8017acc:	4b09      	ldr	r3, [pc, #36]	; (8017af4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8017ace:	689a      	ldr	r2, [r3, #8]
 8017ad0:	79bb      	ldrb	r3, [r7, #6]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7ff ff32 	bl	801793c <GetElement>
 8017ad8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d005      	beq.n	8017aec <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	79fa      	ldrb	r2, [r7, #7]
 8017ae4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2201      	movs	r2, #1
 8017aea:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8017aec:	bf00      	nop
 8017aee:	3710      	adds	r7, #16
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}
 8017af4:	20001c64 	.word	0x20001c64

08017af8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b084      	sub	sp, #16
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	4603      	mov	r3, r0
 8017b00:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8017b02:	2300      	movs	r3, #0
 8017b04:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017b06:	4b10      	ldr	r3, [pc, #64]	; (8017b48 <LoRaMacConfirmQueueGetStatus+0x50>)
 8017b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7ff fef5 	bl	80178fc <IsListEmpty>
 8017b12:	4603      	mov	r3, r0
 8017b14:	f083 0301 	eor.w	r3, r3, #1
 8017b18:	b2db      	uxtb	r3, r3
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d00e      	beq.n	8017b3c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8017b1e:	4b0a      	ldr	r3, [pc, #40]	; (8017b48 <LoRaMacConfirmQueueGetStatus+0x50>)
 8017b20:	6859      	ldr	r1, [r3, #4]
 8017b22:	4b09      	ldr	r3, [pc, #36]	; (8017b48 <LoRaMacConfirmQueueGetStatus+0x50>)
 8017b24:	689a      	ldr	r2, [r3, #8]
 8017b26:	79fb      	ldrb	r3, [r7, #7]
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7ff ff07 	bl	801793c <GetElement>
 8017b2e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d002      	beq.n	8017b3c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	785b      	ldrb	r3, [r3, #1]
 8017b3a:	e000      	b.n	8017b3e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8017b3c:	2301      	movs	r3, #1
}
 8017b3e:	4618      	mov	r0, r3
 8017b40:	3710      	adds	r7, #16
 8017b42:	46bd      	mov	sp, r7
 8017b44:	bd80      	pop	{r7, pc}
 8017b46:	bf00      	nop
 8017b48:	20001c64 	.word	0x20001c64

08017b4c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b084      	sub	sp, #16
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	4603      	mov	r3, r0
 8017b54:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8017b56:	4b16      	ldr	r3, [pc, #88]	; (8017bb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8017b5c:	4a14      	ldr	r2, [pc, #80]	; (8017bb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017b5e:	79fb      	ldrb	r3, [r7, #7]
 8017b60:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017b64:	4b12      	ldr	r3, [pc, #72]	; (8017bb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7ff fec6 	bl	80178fc <IsListEmpty>
 8017b70:	4603      	mov	r3, r0
 8017b72:	f083 0301 	eor.w	r3, r3, #1
 8017b76:	b2db      	uxtb	r3, r3
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d015      	beq.n	8017ba8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	79fa      	ldrb	r2, [r7, #7]
 8017b80:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	78db      	ldrb	r3, [r3, #3]
 8017b86:	f083 0301 	eor.w	r3, r3, #1
 8017b8a:	b2db      	uxtb	r3, r3
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d002      	beq.n	8017b96 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2201      	movs	r2, #1
 8017b94:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8017b96:	68f8      	ldr	r0, [r7, #12]
 8017b98:	f7ff fe98 	bl	80178cc <IncreaseBufferPointer>
 8017b9c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8017b9e:	4b04      	ldr	r3, [pc, #16]	; (8017bb0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017ba0:	689b      	ldr	r3, [r3, #8]
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d1e9      	bne.n	8017b7c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8017ba8:	bf00      	nop
 8017baa:	3710      	adds	r7, #16
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}
 8017bb0:	20001c64 	.word	0x20001c64

08017bb4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	4603      	mov	r3, r0
 8017bbc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8017bbe:	4b09      	ldr	r3, [pc, #36]	; (8017be4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8017bc0:	6859      	ldr	r1, [r3, #4]
 8017bc2:	4b08      	ldr	r3, [pc, #32]	; (8017be4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8017bc4:	689a      	ldr	r2, [r3, #8]
 8017bc6:	79fb      	ldrb	r3, [r7, #7]
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7ff feb7 	bl	801793c <GetElement>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d001      	beq.n	8017bd8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	e000      	b.n	8017bda <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8017bd8:	2300      	movs	r3, #0
}
 8017bda:	4618      	mov	r0, r3
 8017bdc:	3708      	adds	r7, #8
 8017bde:	46bd      	mov	sp, r7
 8017be0:	bd80      	pop	{r7, pc}
 8017be2:	bf00      	nop
 8017be4:	20001c64 	.word	0x20001c64

08017be8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b084      	sub	sp, #16
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8017bf0:	4b25      	ldr	r3, [pc, #148]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017bf6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8017bfc:	f107 0308 	add.w	r3, r7, #8
 8017c00:	2204      	movs	r2, #4
 8017c02:	2100      	movs	r1, #0
 8017c04:	4618      	mov	r0, r3
 8017c06:	f003 fe3d 	bl	801b884 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	73fb      	strb	r3, [r7, #15]
 8017c0e:	e032      	b.n	8017c76 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8017c10:	4b1d      	ldr	r3, [pc, #116]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c12:	685b      	ldr	r3, [r3, #4]
 8017c14:	781a      	ldrb	r2, [r3, #0]
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8017c1a:	4b1b      	ldr	r3, [pc, #108]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	785a      	ldrb	r2, [r3, #1]
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8017c24:	4b18      	ldr	r3, [pc, #96]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c26:	685b      	ldr	r3, [r3, #4]
 8017c28:	789b      	ldrb	r3, [r3, #2]
 8017c2a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8017c2c:	7b7b      	ldrb	r3, [r7, #13]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d005      	beq.n	8017c3e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8017c32:	4b15      	ldr	r3, [pc, #84]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	689b      	ldr	r3, [r3, #8]
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	4798      	blx	r3
 8017c3c:	e00b      	b.n	8017c56 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8017c3e:	4b12      	ldr	r3, [pc, #72]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c40:	685b      	ldr	r3, [r3, #4]
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8017c46:	4b10      	ldr	r3, [pc, #64]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	785b      	ldrb	r3, [r3, #1]
 8017c4c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8017c4e:	4b0e      	ldr	r3, [pc, #56]	; (8017c88 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c50:	685b      	ldr	r3, [r3, #4]
 8017c52:	78db      	ldrb	r3, [r3, #3]
 8017c54:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8017c56:	f7ff feff 	bl	8017a58 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8017c5a:	7b7b      	ldrb	r3, [r7, #13]
 8017c5c:	f083 0301 	eor.w	r3, r3, #1
 8017c60:	b2db      	uxtb	r3, r3
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d004      	beq.n	8017c70 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8017c66:	f107 0308 	add.w	r3, r7, #8
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7ff feba 	bl	80179e4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8017c70:	7bfb      	ldrb	r3, [r7, #15]
 8017c72:	3301      	adds	r3, #1
 8017c74:	73fb      	strb	r3, [r7, #15]
 8017c76:	7bfa      	ldrb	r2, [r7, #15]
 8017c78:	7bbb      	ldrb	r3, [r7, #14]
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d3c8      	bcc.n	8017c10 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8017c7e:	bf00      	nop
 8017c80:	bf00      	nop
 8017c82:	3710      	adds	r7, #16
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}
 8017c88:	20001c64 	.word	0x20001c64

08017c8c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8017c8c:	b480      	push	{r7}
 8017c8e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8017c90:	4b03      	ldr	r3, [pc, #12]	; (8017ca0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8017c92:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8017c96:	4618      	mov	r0, r3
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bc80      	pop	{r7}
 8017c9c:	4770      	bx	lr
 8017c9e:	bf00      	nop
 8017ca0:	20001c64 	.word	0x20001c64

08017ca4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017ca8:	4b06      	ldr	r3, [pc, #24]	; (8017cc4 <LoRaMacConfirmQueueIsFull+0x20>)
 8017caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7ff fe34 	bl	801791c <IsListFull>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d001      	beq.n	8017cbe <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8017cba:	2301      	movs	r3, #1
 8017cbc:	e000      	b.n	8017cc0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8017cbe:	2300      	movs	r3, #0
    }
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	bd80      	pop	{r7, pc}
 8017cc4:	20001c64 	.word	0x20001c64

08017cc8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b08e      	sub	sp, #56	; 0x38
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	607b      	str	r3, [r7, #4]
 8017cd2:	460b      	mov	r3, r1
 8017cd4:	817b      	strh	r3, [r7, #10]
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d101      	bne.n	8017ce4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017ce0:	2309      	movs	r3, #9
 8017ce2:	e086      	b.n	8017df2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8017cea:	2301      	movs	r3, #1
 8017cec:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8017cee:	2300      	movs	r3, #0
 8017cf0:	623b      	str	r3, [r7, #32]
 8017cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	601a      	str	r2, [r3, #0]
 8017cfa:	605a      	str	r2, [r3, #4]
 8017cfc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8017cfe:	2300      	movs	r3, #0
 8017d00:	613b      	str	r3, [r7, #16]
 8017d02:	f107 0314 	add.w	r3, r7, #20
 8017d06:	2200      	movs	r2, #0
 8017d08:	601a      	str	r2, [r3, #0]
 8017d0a:	605a      	str	r2, [r3, #4]
 8017d0c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8017d0e:	2301      	movs	r3, #1
 8017d10:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8017d12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017d16:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	0a1b      	lsrs	r3, r3, #8
 8017d22:	b2db      	uxtb	r3, r3
 8017d24:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	0c1b      	lsrs	r3, r3, #16
 8017d2a:	b2db      	uxtb	r3, r3
 8017d2c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	0e1b      	lsrs	r3, r3, #24
 8017d32:	b2db      	uxtb	r3, r3
 8017d34:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8017d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8017d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d3e:	0a1b      	lsrs	r3, r3, #8
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8017d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d46:	0c1b      	lsrs	r3, r3, #16
 8017d48:	b2db      	uxtb	r3, r3
 8017d4a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8017d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d4e:	0e1b      	lsrs	r3, r3, #24
 8017d50:	b2db      	uxtb	r3, r3
 8017d52:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8017d54:	e048      	b.n	8017de8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8017d56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017d58:	b2db      	uxtb	r3, r3
 8017d5a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8017d5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017d5e:	3301      	adds	r3, #1
 8017d60:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8017d62:	f107 0320 	add.w	r3, r7, #32
 8017d66:	7a7a      	ldrb	r2, [r7, #9]
 8017d68:	f107 0010 	add.w	r0, r7, #16
 8017d6c:	2110      	movs	r1, #16
 8017d6e:	f7f8 fa79 	bl	8010264 <SecureElementAesEncrypt>
 8017d72:	4603      	mov	r3, r0
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d001      	beq.n	8017d7c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017d78:	230e      	movs	r3, #14
 8017d7a:	e03a      	b.n	8017df2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8017d82:	e01e      	b.n	8017dc2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8017d84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8017d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017d8c:	4413      	add	r3, r2
 8017d8e:	461a      	mov	r2, r3
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	4413      	add	r3, r2
 8017d94:	7819      	ldrb	r1, [r3, #0]
 8017d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017d9a:	3338      	adds	r3, #56	; 0x38
 8017d9c:	443b      	add	r3, r7
 8017d9e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8017da2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8017da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017daa:	4403      	add	r3, r0
 8017dac:	4618      	mov	r0, r3
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	4403      	add	r3, r0
 8017db2:	404a      	eors	r2, r1
 8017db4:	b2d2      	uxtb	r2, r2
 8017db6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8017db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8017dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017dc6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017dca:	2a10      	cmp	r2, #16
 8017dcc:	bfa8      	it	ge
 8017dce:	2210      	movge	r2, #16
 8017dd0:	b212      	sxth	r2, r2
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	dbd6      	blt.n	8017d84 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8017dd6:	897b      	ldrh	r3, [r7, #10]
 8017dd8:	3b10      	subs	r3, #16
 8017dda:	b29b      	uxth	r3, r3
 8017ddc:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8017dde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017de2:	3310      	adds	r3, #16
 8017de4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8017de8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	dcb2      	bgt.n	8017d56 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017df0:	2300      	movs	r3, #0
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3738      	adds	r7, #56	; 0x38
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}

08017dfa <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8017dfa:	b490      	push	{r4, r7}
 8017dfc:	b082      	sub	sp, #8
 8017dfe:	af00      	add	r7, sp, #0
 8017e00:	4604      	mov	r4, r0
 8017e02:	4608      	mov	r0, r1
 8017e04:	4611      	mov	r1, r2
 8017e06:	461a      	mov	r2, r3
 8017e08:	4623      	mov	r3, r4
 8017e0a:	80fb      	strh	r3, [r7, #6]
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	717b      	strb	r3, [r7, #5]
 8017e10:	460b      	mov	r3, r1
 8017e12:	713b      	strb	r3, [r7, #4]
 8017e14:	4613      	mov	r3, r2
 8017e16:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8017e18:	69bb      	ldr	r3, [r7, #24]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d101      	bne.n	8017e22 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017e1e:	2309      	movs	r3, #9
 8017e20:	e04e      	b.n	8017ec0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8017e22:	69bb      	ldr	r3, [r7, #24]
 8017e24:	2249      	movs	r2, #73	; 0x49
 8017e26:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8017e28:	69bb      	ldr	r3, [r7, #24]
 8017e2a:	3301      	adds	r3, #1
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8017e30:	69bb      	ldr	r3, [r7, #24]
 8017e32:	3302      	adds	r3, #2
 8017e34:	2200      	movs	r2, #0
 8017e36:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	3303      	adds	r3, #3
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8017e40:	69bb      	ldr	r3, [r7, #24]
 8017e42:	3304      	adds	r3, #4
 8017e44:	2200      	movs	r2, #0
 8017e46:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8017e48:	69bb      	ldr	r3, [r7, #24]
 8017e4a:	3305      	adds	r3, #5
 8017e4c:	78fa      	ldrb	r2, [r7, #3]
 8017e4e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8017e50:	69bb      	ldr	r3, [r7, #24]
 8017e52:	3306      	adds	r3, #6
 8017e54:	693a      	ldr	r2, [r7, #16]
 8017e56:	b2d2      	uxtb	r2, r2
 8017e58:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8017e5a:	693b      	ldr	r3, [r7, #16]
 8017e5c:	0a1a      	lsrs	r2, r3, #8
 8017e5e:	69bb      	ldr	r3, [r7, #24]
 8017e60:	3307      	adds	r3, #7
 8017e62:	b2d2      	uxtb	r2, r2
 8017e64:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8017e66:	693b      	ldr	r3, [r7, #16]
 8017e68:	0c1a      	lsrs	r2, r3, #16
 8017e6a:	69bb      	ldr	r3, [r7, #24]
 8017e6c:	3308      	adds	r3, #8
 8017e6e:	b2d2      	uxtb	r2, r2
 8017e70:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8017e72:	693b      	ldr	r3, [r7, #16]
 8017e74:	0e1a      	lsrs	r2, r3, #24
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	3309      	adds	r3, #9
 8017e7a:	b2d2      	uxtb	r2, r2
 8017e7c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	330a      	adds	r3, #10
 8017e82:	697a      	ldr	r2, [r7, #20]
 8017e84:	b2d2      	uxtb	r2, r2
 8017e86:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	0a1a      	lsrs	r2, r3, #8
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	330b      	adds	r3, #11
 8017e90:	b2d2      	uxtb	r2, r2
 8017e92:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	0c1a      	lsrs	r2, r3, #16
 8017e98:	69bb      	ldr	r3, [r7, #24]
 8017e9a:	330c      	adds	r3, #12
 8017e9c:	b2d2      	uxtb	r2, r2
 8017e9e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	0e1a      	lsrs	r2, r3, #24
 8017ea4:	69bb      	ldr	r3, [r7, #24]
 8017ea6:	330d      	adds	r3, #13
 8017ea8:	b2d2      	uxtb	r2, r2
 8017eaa:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8017eac:	69bb      	ldr	r3, [r7, #24]
 8017eae:	330e      	adds	r3, #14
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8017eb4:	69bb      	ldr	r3, [r7, #24]
 8017eb6:	330f      	adds	r3, #15
 8017eb8:	88fa      	ldrh	r2, [r7, #6]
 8017eba:	b2d2      	uxtb	r2, r2
 8017ebc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8017ebe:	2300      	movs	r3, #0
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	3708      	adds	r7, #8
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bc90      	pop	{r4, r7}
 8017ec8:	4770      	bx	lr

08017eca <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8017eca:	b590      	push	{r4, r7, lr}
 8017ecc:	b08b      	sub	sp, #44	; 0x2c
 8017ece:	af04      	add	r7, sp, #16
 8017ed0:	6078      	str	r0, [r7, #4]
 8017ed2:	4608      	mov	r0, r1
 8017ed4:	4611      	mov	r1, r2
 8017ed6:	461a      	mov	r2, r3
 8017ed8:	4603      	mov	r3, r0
 8017eda:	807b      	strh	r3, [r7, #2]
 8017edc:	460b      	mov	r3, r1
 8017ede:	707b      	strb	r3, [r7, #1]
 8017ee0:	4613      	mov	r3, r2
 8017ee2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d002      	beq.n	8017ef0 <ComputeCmacB0+0x26>
 8017eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d101      	bne.n	8017ef4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017ef0:	2309      	movs	r3, #9
 8017ef2:	e024      	b.n	8017f3e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8017ef4:	887b      	ldrh	r3, [r7, #2]
 8017ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017efa:	d901      	bls.n	8017f00 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8017efc:	230d      	movs	r3, #13
 8017efe:	e01e      	b.n	8017f3e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8017f00:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8017f04:	783a      	ldrb	r2, [r7, #0]
 8017f06:	7879      	ldrb	r1, [r7, #1]
 8017f08:	8878      	ldrh	r0, [r7, #2]
 8017f0a:	f107 0308 	add.w	r3, r7, #8
 8017f0e:	9302      	str	r3, [sp, #8]
 8017f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f12:	9301      	str	r3, [sp, #4]
 8017f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f16:	9300      	str	r3, [sp, #0]
 8017f18:	4623      	mov	r3, r4
 8017f1a:	f7ff ff6e 	bl	8017dfa <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8017f1e:	887a      	ldrh	r2, [r7, #2]
 8017f20:	7879      	ldrb	r1, [r7, #1]
 8017f22:	f107 0008 	add.w	r0, r7, #8
 8017f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f28:	9300      	str	r3, [sp, #0]
 8017f2a:	460b      	mov	r3, r1
 8017f2c:	6879      	ldr	r1, [r7, #4]
 8017f2e:	f7f8 f953 	bl	80101d8 <SecureElementComputeAesCmac>
 8017f32:	4603      	mov	r3, r0
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d001      	beq.n	8017f3c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017f38:	230e      	movs	r3, #14
 8017f3a:	e000      	b.n	8017f3e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8017f3c:	2300      	movs	r3, #0
}
 8017f3e:	4618      	mov	r0, r3
 8017f40:	371c      	adds	r7, #28
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd90      	pop	{r4, r7, pc}

08017f46 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8017f46:	b590      	push	{r4, r7, lr}
 8017f48:	b0cd      	sub	sp, #308	; 0x134
 8017f4a:	af04      	add	r7, sp, #16
 8017f4c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8017f50:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8017f54:	6020      	str	r0, [r4, #0]
 8017f56:	460c      	mov	r4, r1
 8017f58:	4610      	mov	r0, r2
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f60:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8017f64:	4622      	mov	r2, r4
 8017f66:	801a      	strh	r2, [r3, #0]
 8017f68:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f6c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8017f70:	4602      	mov	r2, r0
 8017f72:	701a      	strb	r2, [r3, #0]
 8017f74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8017f7c:	460a      	mov	r2, r1
 8017f7e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8017f80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d101      	bne.n	8017f92 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017f8e:	2309      	movs	r3, #9
 8017f90:	e063      	b.n	801805a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8017f92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f96:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8017f9a:	881b      	ldrh	r3, [r3, #0]
 8017f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017fa0:	d901      	bls.n	8017fa6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8017fa2:	230d      	movs	r3, #13
 8017fa4:	e059      	b.n	801805a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8017fa6:	f107 030c 	add.w	r3, r7, #12
 8017faa:	f44f 7288 	mov.w	r2, #272	; 0x110
 8017fae:	2100      	movs	r1, #0
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f003 fc67 	bl	801b884 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8017fb6:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8017fba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017fbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8017fc2:	781a      	ldrb	r2, [r3, #0]
 8017fc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017fc8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8017fcc:	7819      	ldrb	r1, [r3, #0]
 8017fce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017fd2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8017fd6:	8818      	ldrh	r0, [r3, #0]
 8017fd8:	f107 030c 	add.w	r3, r7, #12
 8017fdc:	9302      	str	r3, [sp, #8]
 8017fde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017fe2:	9301      	str	r3, [sp, #4]
 8017fe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017fe8:	9300      	str	r3, [sp, #0]
 8017fea:	4623      	mov	r3, r4
 8017fec:	f7ff ff05 	bl	8017dfa <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8017ff0:	f107 030c 	add.w	r3, r7, #12
 8017ff4:	3310      	adds	r3, #16
 8017ff6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8017ffa:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8017ffe:	8812      	ldrh	r2, [r2, #0]
 8018000:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8018004:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8018008:	6809      	ldr	r1, [r1, #0]
 801800a:	4618      	mov	r0, r3
 801800c:	f003 fbff 	bl	801b80e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8018010:	2306      	movs	r3, #6
 8018012:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8018016:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801801a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801801e:	881b      	ldrh	r3, [r3, #0]
 8018020:	3310      	adds	r3, #16
 8018022:	4619      	mov	r1, r3
 8018024:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018028:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	f107 000c 	add.w	r0, r7, #12
 8018032:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8018036:	f7f8 f8e9 	bl	801020c <SecureElementVerifyAesCmac>
 801803a:	4603      	mov	r3, r0
 801803c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8018040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8018044:	2b00      	cmp	r3, #0
 8018046:	d101      	bne.n	801804c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8018048:	2300      	movs	r3, #0
 801804a:	e006      	b.n	801805a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801804c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8018050:	2b01      	cmp	r3, #1
 8018052:	d101      	bne.n	8018058 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8018054:	2301      	movs	r3, #1
 8018056:	e000      	b.n	801805a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018058:	230e      	movs	r3, #14
}
 801805a:	4618      	mov	r0, r3
 801805c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8018060:	46bd      	mov	sp, r7
 8018062:	bd90      	pop	{r4, r7, pc}

08018064 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8018064:	b480      	push	{r7}
 8018066:	b085      	sub	sp, #20
 8018068:	af00      	add	r7, sp, #0
 801806a:	4603      	mov	r3, r0
 801806c:	6039      	str	r1, [r7, #0]
 801806e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8018070:	2300      	movs	r3, #0
 8018072:	73fb      	strb	r3, [r7, #15]
 8018074:	e011      	b.n	801809a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8018076:	7bfb      	ldrb	r3, [r7, #15]
 8018078:	4a0c      	ldr	r2, [pc, #48]	; (80180ac <GetKeyAddrItem+0x48>)
 801807a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801807e:	79fa      	ldrb	r2, [r7, #7]
 8018080:	429a      	cmp	r2, r3
 8018082:	d107      	bne.n	8018094 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8018084:	7bfb      	ldrb	r3, [r7, #15]
 8018086:	009b      	lsls	r3, r3, #2
 8018088:	4a08      	ldr	r2, [pc, #32]	; (80180ac <GetKeyAddrItem+0x48>)
 801808a:	441a      	add	r2, r3
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8018090:	2300      	movs	r3, #0
 8018092:	e006      	b.n	80180a2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8018094:	7bfb      	ldrb	r3, [r7, #15]
 8018096:	3301      	adds	r3, #1
 8018098:	73fb      	strb	r3, [r7, #15]
 801809a:	7bfb      	ldrb	r3, [r7, #15]
 801809c:	2b01      	cmp	r3, #1
 801809e:	d9ea      	bls.n	8018076 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80180a0:	230b      	movs	r3, #11
}
 80180a2:	4618      	mov	r0, r3
 80180a4:	3714      	adds	r7, #20
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bc80      	pop	{r7}
 80180aa:	4770      	bx	lr
 80180ac:	20000110 	.word	0x20000110

080180b0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b088      	sub	sp, #32
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	60b9      	str	r1, [r7, #8]
 80180b8:	607a      	str	r2, [r7, #4]
 80180ba:	461a      	mov	r2, r3
 80180bc:	4603      	mov	r3, r0
 80180be:	73fb      	strb	r3, [r7, #15]
 80180c0:	4613      	mov	r3, r2
 80180c2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80180c4:	2300      	movs	r3, #0
 80180c6:	613b      	str	r3, [r7, #16]
 80180c8:	f107 0314 	add.w	r3, r7, #20
 80180cc:	2200      	movs	r2, #0
 80180ce:	601a      	str	r2, [r3, #0]
 80180d0:	605a      	str	r2, [r3, #4]
 80180d2:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80180d4:	7bfb      	ldrb	r3, [r7, #15]
 80180d6:	2b08      	cmp	r3, #8
 80180d8:	d002      	beq.n	80180e0 <DeriveSessionKey10x+0x30>
 80180da:	2b09      	cmp	r3, #9
 80180dc:	d003      	beq.n	80180e6 <DeriveSessionKey10x+0x36>
 80180de:	e005      	b.n	80180ec <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80180e0:	2301      	movs	r3, #1
 80180e2:	743b      	strb	r3, [r7, #16]
            break;
 80180e4:	e004      	b.n	80180f0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80180e6:	2302      	movs	r3, #2
 80180e8:	743b      	strb	r3, [r7, #16]
            break;
 80180ea:	e001      	b.n	80180f0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80180ec:	230a      	movs	r3, #10
 80180ee:	e02a      	b.n	8018146 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	b2db      	uxtb	r3, r3
 80180f4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80180f6:	68bb      	ldr	r3, [r7, #8]
 80180f8:	0a1b      	lsrs	r3, r3, #8
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	0c1b      	lsrs	r3, r3, #16
 8018102:	b2db      	uxtb	r3, r3
 8018104:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	b2db      	uxtb	r3, r3
 801810a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	0a1b      	lsrs	r3, r3, #8
 8018110:	b2db      	uxtb	r3, r3
 8018112:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	0c1b      	lsrs	r3, r3, #16
 8018118:	b2db      	uxtb	r3, r3
 801811a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801811c:	89bb      	ldrh	r3, [r7, #12]
 801811e:	b2db      	uxtb	r3, r3
 8018120:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8018122:	89bb      	ldrh	r3, [r7, #12]
 8018124:	0a1b      	lsrs	r3, r3, #8
 8018126:	b29b      	uxth	r3, r3
 8018128:	b2db      	uxtb	r3, r3
 801812a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801812c:	7bfa      	ldrb	r2, [r7, #15]
 801812e:	f107 0310 	add.w	r3, r7, #16
 8018132:	2101      	movs	r1, #1
 8018134:	4618      	mov	r0, r3
 8018136:	f7f8 f915 	bl	8010364 <SecureElementDeriveAndStoreKey>
 801813a:	4603      	mov	r3, r0
 801813c:	2b00      	cmp	r3, #0
 801813e:	d001      	beq.n	8018144 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018140:	230e      	movs	r3, #14
 8018142:	e000      	b.n	8018146 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018144:	2300      	movs	r3, #0
}
 8018146:	4618      	mov	r0, r3
 8018148:	3720      	adds	r7, #32
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}
	...

08018150 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8018150:	b480      	push	{r7}
 8018152:	b083      	sub	sp, #12
 8018154:	af00      	add	r7, sp, #0
 8018156:	4603      	mov	r3, r0
 8018158:	6039      	str	r1, [r7, #0]
 801815a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801815c:	683b      	ldr	r3, [r7, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d101      	bne.n	8018166 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018162:	2309      	movs	r3, #9
 8018164:	e029      	b.n	80181ba <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8018166:	79fb      	ldrb	r3, [r7, #7]
 8018168:	3b01      	subs	r3, #1
 801816a:	2b03      	cmp	r3, #3
 801816c:	d822      	bhi.n	80181b4 <GetLastFcntDown+0x64>
 801816e:	a201      	add	r2, pc, #4	; (adr r2, 8018174 <GetLastFcntDown+0x24>)
 8018170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018174:	08018185 	.word	0x08018185
 8018178:	08018191 	.word	0x08018191
 801817c:	0801819d 	.word	0x0801819d
 8018180:	080181a9 	.word	0x080181a9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8018184:	4b0f      	ldr	r3, [pc, #60]	; (80181c4 <GetLastFcntDown+0x74>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	691a      	ldr	r2, [r3, #16]
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	601a      	str	r2, [r3, #0]
            break;
 801818e:	e013      	b.n	80181b8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8018190:	4b0c      	ldr	r3, [pc, #48]	; (80181c4 <GetLastFcntDown+0x74>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	695a      	ldr	r2, [r3, #20]
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	601a      	str	r2, [r3, #0]
            break;
 801819a:	e00d      	b.n	80181b8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801819c:	4b09      	ldr	r3, [pc, #36]	; (80181c4 <GetLastFcntDown+0x74>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	699a      	ldr	r2, [r3, #24]
 80181a2:	683b      	ldr	r3, [r7, #0]
 80181a4:	601a      	str	r2, [r3, #0]
            break;
 80181a6:	e007      	b.n	80181b8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80181a8:	4b06      	ldr	r3, [pc, #24]	; (80181c4 <GetLastFcntDown+0x74>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	69da      	ldr	r2, [r3, #28]
 80181ae:	683b      	ldr	r3, [r7, #0]
 80181b0:	601a      	str	r2, [r3, #0]
            break;
 80181b2:	e001      	b.n	80181b8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80181b4:	2305      	movs	r3, #5
 80181b6:	e000      	b.n	80181ba <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80181b8:	2300      	movs	r3, #0
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	370c      	adds	r7, #12
 80181be:	46bd      	mov	sp, r7
 80181c0:	bc80      	pop	{r7}
 80181c2:	4770      	bx	lr
 80181c4:	20001c88 	.word	0x20001c88

080181c8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b084      	sub	sp, #16
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	4603      	mov	r3, r0
 80181d0:	6039      	str	r1, [r7, #0]
 80181d2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80181d4:	2300      	movs	r3, #0
 80181d6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80181d8:	f107 020c 	add.w	r2, r7, #12
 80181dc:	79fb      	ldrb	r3, [r7, #7]
 80181de:	4611      	mov	r1, r2
 80181e0:	4618      	mov	r0, r3
 80181e2:	f7ff ffb5 	bl	8018150 <GetLastFcntDown>
 80181e6:	4603      	mov	r3, r0
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d001      	beq.n	80181f0 <CheckFCntDown+0x28>
    {
        return false;
 80181ec:	2300      	movs	r3, #0
 80181ee:	e00a      	b.n	8018206 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	683a      	ldr	r2, [r7, #0]
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d803      	bhi.n	8018200 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80181f8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80181fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80181fe:	d101      	bne.n	8018204 <CheckFCntDown+0x3c>
    {
        return true;
 8018200:	2301      	movs	r3, #1
 8018202:	e000      	b.n	8018206 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8018204:	2300      	movs	r3, #0
    }
}
 8018206:	4618      	mov	r0, r3
 8018208:	3710      	adds	r7, #16
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
	...

08018210 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8018210:	b480      	push	{r7}
 8018212:	b083      	sub	sp, #12
 8018214:	af00      	add	r7, sp, #0
 8018216:	4603      	mov	r3, r0
 8018218:	6039      	str	r1, [r7, #0]
 801821a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801821c:	79fb      	ldrb	r3, [r7, #7]
 801821e:	3b01      	subs	r3, #1
 8018220:	2b03      	cmp	r3, #3
 8018222:	d82b      	bhi.n	801827c <UpdateFCntDown+0x6c>
 8018224:	a201      	add	r2, pc, #4	; (adr r2, 801822c <UpdateFCntDown+0x1c>)
 8018226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801822a:	bf00      	nop
 801822c:	0801823d 	.word	0x0801823d
 8018230:	0801824f 	.word	0x0801824f
 8018234:	08018261 	.word	0x08018261
 8018238:	08018273 	.word	0x08018273
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801823c:	4b12      	ldr	r3, [pc, #72]	; (8018288 <UpdateFCntDown+0x78>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	683a      	ldr	r2, [r7, #0]
 8018242:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8018244:	4b10      	ldr	r3, [pc, #64]	; (8018288 <UpdateFCntDown+0x78>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	683a      	ldr	r2, [r7, #0]
 801824a:	621a      	str	r2, [r3, #32]
            break;
 801824c:	e017      	b.n	801827e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801824e:	4b0e      	ldr	r3, [pc, #56]	; (8018288 <UpdateFCntDown+0x78>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	683a      	ldr	r2, [r7, #0]
 8018254:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8018256:	4b0c      	ldr	r3, [pc, #48]	; (8018288 <UpdateFCntDown+0x78>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	683a      	ldr	r2, [r7, #0]
 801825c:	621a      	str	r2, [r3, #32]
            break;
 801825e:	e00e      	b.n	801827e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8018260:	4b09      	ldr	r3, [pc, #36]	; (8018288 <UpdateFCntDown+0x78>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	683a      	ldr	r2, [r7, #0]
 8018266:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8018268:	4b07      	ldr	r3, [pc, #28]	; (8018288 <UpdateFCntDown+0x78>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	683a      	ldr	r2, [r7, #0]
 801826e:	621a      	str	r2, [r3, #32]
            break;
 8018270:	e005      	b.n	801827e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8018272:	4b05      	ldr	r3, [pc, #20]	; (8018288 <UpdateFCntDown+0x78>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	683a      	ldr	r2, [r7, #0]
 8018278:	61da      	str	r2, [r3, #28]
            break;
 801827a:	e000      	b.n	801827e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801827c:	bf00      	nop
    }
}
 801827e:	bf00      	nop
 8018280:	370c      	adds	r7, #12
 8018282:	46bd      	mov	sp, r7
 8018284:	bc80      	pop	{r7}
 8018286:	4770      	bx	lr
 8018288:	20001c88 	.word	0x20001c88

0801828c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801828c:	b480      	push	{r7}
 801828e:	b083      	sub	sp, #12
 8018290:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8018292:	4b18      	ldr	r3, [pc, #96]	; (80182f4 <ResetFCnts+0x68>)
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	2200      	movs	r2, #0
 8018298:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801829a:	4b16      	ldr	r3, [pc, #88]	; (80182f4 <ResetFCnts+0x68>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182a2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80182a4:	4b13      	ldr	r3, [pc, #76]	; (80182f4 <ResetFCnts+0x68>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182ac:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80182ae:	4b11      	ldr	r3, [pc, #68]	; (80182f4 <ResetFCnts+0x68>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182b6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80182b8:	4b0e      	ldr	r3, [pc, #56]	; (80182f4 <ResetFCnts+0x68>)
 80182ba:	681a      	ldr	r2, [r3, #0]
 80182bc:	4b0d      	ldr	r3, [pc, #52]	; (80182f4 <ResetFCnts+0x68>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	6992      	ldr	r2, [r2, #24]
 80182c2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80182c4:	2300      	movs	r3, #0
 80182c6:	607b      	str	r3, [r7, #4]
 80182c8:	e00b      	b.n	80182e2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80182ca:	4b0a      	ldr	r3, [pc, #40]	; (80182f4 <ResetFCnts+0x68>)
 80182cc:	681a      	ldr	r2, [r3, #0]
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	3306      	adds	r3, #6
 80182d2:	009b      	lsls	r3, r3, #2
 80182d4:	4413      	add	r3, r2
 80182d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182da:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	3301      	adds	r3, #1
 80182e0:	607b      	str	r3, [r7, #4]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	ddf0      	ble.n	80182ca <ResetFCnts+0x3e>
    }
}
 80182e8:	bf00      	nop
 80182ea:	bf00      	nop
 80182ec:	370c      	adds	r7, #12
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bc80      	pop	{r7}
 80182f2:	4770      	bx	lr
 80182f4:	20001c88 	.word	0x20001c88

080182f8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80182f8:	b480      	push	{r7}
 80182fa:	b083      	sub	sp, #12
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8018300:	4b06      	ldr	r3, [pc, #24]	; (801831c <IsJoinNonce10xOk+0x24>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	689b      	ldr	r3, [r3, #8]
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	429a      	cmp	r2, r3
 801830a:	bf8c      	ite	hi
 801830c:	2301      	movhi	r3, #1
 801830e:	2300      	movls	r3, #0
 8018310:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8018312:	4618      	mov	r0, r3
 8018314:	370c      	adds	r7, #12
 8018316:	46bd      	mov	sp, r7
 8018318:	bc80      	pop	{r7}
 801831a:	4770      	bx	lr
 801831c:	20001c88 	.word	0x20001c88

08018320 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b082      	sub	sp, #8
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d101      	bne.n	8018332 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801832e:	2308      	movs	r3, #8
 8018330:	e01c      	b.n	801836c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8018332:	4a10      	ldr	r2, [pc, #64]	; (8018374 <LoRaMacCryptoInit+0x54>)
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8018338:	4b0e      	ldr	r3, [pc, #56]	; (8018374 <LoRaMacCryptoInit+0x54>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	2228      	movs	r2, #40	; 0x28
 801833e:	2100      	movs	r1, #0
 8018340:	4618      	mov	r0, r3
 8018342:	f003 fa9f 	bl	801b884 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8018346:	4b0b      	ldr	r3, [pc, #44]	; (8018374 <LoRaMacCryptoInit+0x54>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	2201      	movs	r2, #1
 801834c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801834e:	4b09      	ldr	r3, [pc, #36]	; (8018374 <LoRaMacCryptoInit+0x54>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	2201      	movs	r2, #1
 8018354:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8018356:	4b07      	ldr	r3, [pc, #28]	; (8018374 <LoRaMacCryptoInit+0x54>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	2201      	movs	r2, #1
 801835c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801835e:	4b05      	ldr	r3, [pc, #20]	; (8018374 <LoRaMacCryptoInit+0x54>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	2200      	movs	r2, #0
 8018364:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8018366:	f7ff ff91 	bl	801828c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801836a:	2300      	movs	r3, #0
}
 801836c:	4618      	mov	r0, r3
 801836e:	3708      	adds	r7, #8
 8018370:	46bd      	mov	sp, r7
 8018372:	bd80      	pop	{r7, pc}
 8018374:	20001c88 	.word	0x20001c88

08018378 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8018378:	b480      	push	{r7}
 801837a:	b083      	sub	sp, #12
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8018380:	4b04      	ldr	r3, [pc, #16]	; (8018394 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	687a      	ldr	r2, [r7, #4]
 8018386:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8018388:	2300      	movs	r3, #0
}
 801838a:	4618      	mov	r0, r3
 801838c:	370c      	adds	r7, #12
 801838e:	46bd      	mov	sp, r7
 8018390:	bc80      	pop	{r7}
 8018392:	4770      	bx	lr
 8018394:	20001c88 	.word	0x20001c88

08018398 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8018398:	b480      	push	{r7}
 801839a:	b083      	sub	sp, #12
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d101      	bne.n	80183aa <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80183a6:	2309      	movs	r3, #9
 80183a8:	e006      	b.n	80183b8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80183aa:	4b06      	ldr	r3, [pc, #24]	; (80183c4 <LoRaMacCryptoGetFCntUp+0x2c>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	68db      	ldr	r3, [r3, #12]
 80183b0:	1c5a      	adds	r2, r3, #1
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80183b6:	2300      	movs	r3, #0
}
 80183b8:	4618      	mov	r0, r3
 80183ba:	370c      	adds	r7, #12
 80183bc:	46bd      	mov	sp, r7
 80183be:	bc80      	pop	{r7}
 80183c0:	4770      	bx	lr
 80183c2:	bf00      	nop
 80183c4:	20001c88 	.word	0x20001c88

080183c8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b088      	sub	sp, #32
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	4603      	mov	r3, r0
 80183d0:	60b9      	str	r1, [r7, #8]
 80183d2:	607a      	str	r2, [r7, #4]
 80183d4:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80183d6:	2300      	movs	r3, #0
 80183d8:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80183da:	2300      	movs	r3, #0
 80183dc:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80183de:	2312      	movs	r3, #18
 80183e0:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d101      	bne.n	80183ec <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80183e8:	2309      	movs	r3, #9
 80183ea:	e035      	b.n	8018458 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80183ec:	f107 0214 	add.w	r2, r7, #20
 80183f0:	7bfb      	ldrb	r3, [r7, #15]
 80183f2:	4611      	mov	r1, r2
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7ff feab 	bl	8018150 <GetLastFcntDown>
 80183fa:	4603      	mov	r3, r0
 80183fc:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80183fe:	7efb      	ldrb	r3, [r7, #27]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d001      	beq.n	8018408 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8018404:	7efb      	ldrb	r3, [r7, #27]
 8018406:	e027      	b.n	8018458 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8018408:	697b      	ldr	r3, [r7, #20]
 801840a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801840e:	d103      	bne.n	8018418 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	68ba      	ldr	r2, [r7, #8]
 8018414:	601a      	str	r2, [r3, #0]
 8018416:	e01e      	b.n	8018456 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	b29b      	uxth	r3, r3
 801841c:	68ba      	ldr	r2, [r7, #8]
 801841e:	1ad3      	subs	r3, r2, r3
 8018420:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8018422:	69fb      	ldr	r3, [r7, #28]
 8018424:	2b00      	cmp	r3, #0
 8018426:	dd05      	ble.n	8018434 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8018428:	697a      	ldr	r2, [r7, #20]
 801842a:	69fb      	ldr	r3, [r7, #28]
 801842c:	441a      	add	r2, r3
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	601a      	str	r2, [r3, #0]
 8018432:	e010      	b.n	8018456 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8018434:	69fb      	ldr	r3, [r7, #28]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d104      	bne.n	8018444 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801843a:	697a      	ldr	r2, [r7, #20]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8018440:	2307      	movs	r3, #7
 8018442:	e009      	b.n	8018458 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8018444:	697b      	ldr	r3, [r7, #20]
 8018446:	0c1b      	lsrs	r3, r3, #16
 8018448:	041b      	lsls	r3, r3, #16
 801844a:	68ba      	ldr	r2, [r7, #8]
 801844c:	4413      	add	r3, r2
 801844e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018456:	2300      	movs	r3, #0
}
 8018458:	4618      	mov	r0, r3
 801845a:	3720      	adds	r7, #32
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}

08018460 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8018460:	b480      	push	{r7}
 8018462:	b085      	sub	sp, #20
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d101      	bne.n	8018472 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801846e:	2309      	movs	r3, #9
 8018470:	e019      	b.n	80184a6 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018472:	2300      	movs	r3, #0
 8018474:	60fb      	str	r3, [r7, #12]
 8018476:	e012      	b.n	801849e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8018478:	4b0d      	ldr	r3, [pc, #52]	; (80184b0 <LoRaMacCryptoSetMulticastReference+0x50>)
 801847a:	6819      	ldr	r1, [r3, #0]
 801847c:	68fa      	ldr	r2, [r7, #12]
 801847e:	4613      	mov	r3, r2
 8018480:	005b      	lsls	r3, r3, #1
 8018482:	4413      	add	r3, r2
 8018484:	011b      	lsls	r3, r3, #4
 8018486:	461a      	mov	r2, r3
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	4413      	add	r3, r2
 801848c:	68fa      	ldr	r2, [r7, #12]
 801848e:	3206      	adds	r2, #6
 8018490:	0092      	lsls	r2, r2, #2
 8018492:	440a      	add	r2, r1
 8018494:	3204      	adds	r2, #4
 8018496:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	3301      	adds	r3, #1
 801849c:	60fb      	str	r3, [r7, #12]
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	dde9      	ble.n	8018478 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80184a4:	2300      	movs	r3, #0
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3714      	adds	r7, #20
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bc80      	pop	{r7}
 80184ae:	4770      	bx	lr
 80184b0:	20001c88 	.word	0x20001c88

080184b4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b082      	sub	sp, #8
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	4603      	mov	r3, r0
 80184bc:	6039      	str	r1, [r7, #0]
 80184be:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80184c0:	79fb      	ldrb	r3, [r7, #7]
 80184c2:	6839      	ldr	r1, [r7, #0]
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7f7 fe29 	bl	801011c <SecureElementSetKey>
 80184ca:	4603      	mov	r3, r0
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d001      	beq.n	80184d4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80184d0:	230e      	movs	r3, #14
 80184d2:	e021      	b.n	8018518 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80184d4:	79fb      	ldrb	r3, [r7, #7]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d11d      	bne.n	8018516 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80184da:	4b11      	ldr	r3, [pc, #68]	; (8018520 <LoRaMacCryptoSetKey+0x6c>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	789b      	ldrb	r3, [r3, #2]
 80184e0:	210b      	movs	r1, #11
 80184e2:	4618      	mov	r0, r3
 80184e4:	f000 fa58 	bl	8018998 <LoRaMacCryptoDeriveLifeTimeKey>
 80184e8:	4603      	mov	r3, r0
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d001      	beq.n	80184f2 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80184ee:	230e      	movs	r3, #14
 80184f0:	e012      	b.n	8018518 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80184f2:	210c      	movs	r1, #12
 80184f4:	2000      	movs	r0, #0
 80184f6:	f000 fa4f 	bl	8018998 <LoRaMacCryptoDeriveLifeTimeKey>
 80184fa:	4603      	mov	r3, r0
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d001      	beq.n	8018504 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018500:	230e      	movs	r3, #14
 8018502:	e009      	b.n	8018518 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8018504:	210a      	movs	r1, #10
 8018506:	2000      	movs	r0, #0
 8018508:	f000 fa46 	bl	8018998 <LoRaMacCryptoDeriveLifeTimeKey>
 801850c:	4603      	mov	r3, r0
 801850e:	2b00      	cmp	r3, #0
 8018510:	d001      	beq.n	8018516 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018512:	230e      	movs	r3, #14
 8018514:	e000      	b.n	8018518 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8018516:	2300      	movs	r3, #0
}
 8018518:	4618      	mov	r0, r3
 801851a:	3708      	adds	r7, #8
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	20001c88 	.word	0x20001c88

08018524 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b086      	sub	sp, #24
 8018528:	af02      	add	r7, sp, #8
 801852a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d101      	bne.n	8018536 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018532:	2309      	movs	r3, #9
 8018534:	e02d      	b.n	8018592 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8018536:	2301      	movs	r3, #1
 8018538:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801853a:	4b18      	ldr	r3, [pc, #96]	; (801859c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	889a      	ldrh	r2, [r3, #4]
 8018540:	3201      	adds	r2, #1
 8018542:	b292      	uxth	r2, r2
 8018544:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8018546:	4b15      	ldr	r3, [pc, #84]	; (801859c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	889a      	ldrh	r2, [r3, #4]
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	f000 fc1b 	bl	8018d8c <LoRaMacSerializerJoinRequest>
 8018556:	4603      	mov	r3, r0
 8018558:	2b00      	cmp	r3, #0
 801855a:	d001      	beq.n	8018560 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801855c:	2310      	movs	r3, #16
 801855e:	e018      	b.n	8018592 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	6819      	ldr	r1, [r3, #0]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	3318      	adds	r3, #24
 8018568:	7bfa      	ldrb	r2, [r7, #15]
 801856a:	9300      	str	r3, [sp, #0]
 801856c:	4613      	mov	r3, r2
 801856e:	2213      	movs	r2, #19
 8018570:	2000      	movs	r0, #0
 8018572:	f7f7 fe31 	bl	80101d8 <SecureElementComputeAesCmac>
 8018576:	4603      	mov	r3, r0
 8018578:	2b00      	cmp	r3, #0
 801857a:	d001      	beq.n	8018580 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801857c:	230e      	movs	r3, #14
 801857e:	e008      	b.n	8018592 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f000 fc03 	bl	8018d8c <LoRaMacSerializerJoinRequest>
 8018586:	4603      	mov	r3, r0
 8018588:	2b00      	cmp	r3, #0
 801858a:	d001      	beq.n	8018590 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801858c:	2310      	movs	r3, #16
 801858e:	e000      	b.n	8018592 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018590:	2300      	movs	r3, #0
}
 8018592:	4618      	mov	r0, r3
 8018594:	3710      	adds	r7, #16
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	20001c88 	.word	0x20001c88

080185a0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80185a0:	b590      	push	{r4, r7, lr}
 80185a2:	b097      	sub	sp, #92	; 0x5c
 80185a4:	af04      	add	r7, sp, #16
 80185a6:	4603      	mov	r3, r0
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	607a      	str	r2, [r7, #4]
 80185ac:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d002      	beq.n	80185ba <LoRaMacCryptoHandleJoinAccept+0x1a>
 80185b4:	68bb      	ldr	r3, [r7, #8]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d101      	bne.n	80185be <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80185ba:	2309      	movs	r3, #9
 80185bc:	e0d3      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80185be:	2312      	movs	r3, #18
 80185c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80185c4:	2300      	movs	r3, #0
 80185c6:	617b      	str	r3, [r7, #20]
 80185c8:	f107 0318 	add.w	r3, r7, #24
 80185cc:	221d      	movs	r2, #29
 80185ce:	2100      	movs	r1, #0
 80185d0:	4618      	mov	r0, r3
 80185d2:	f007 fff9 	bl	80205c8 <memset>
    uint8_t versionMinor         = 0;
 80185d6:	2300      	movs	r3, #0
 80185d8:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80185da:	4b65      	ldr	r3, [pc, #404]	; (8018770 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	889b      	ldrh	r3, [r3, #4]
 80185e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681c      	ldr	r4, [r3, #0]
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	791b      	ldrb	r3, [r3, #4]
 80185ec:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80185f0:	7bf8      	ldrb	r0, [r7, #15]
 80185f2:	f107 0213 	add.w	r2, r7, #19
 80185f6:	9202      	str	r2, [sp, #8]
 80185f8:	f107 0214 	add.w	r2, r7, #20
 80185fc:	9201      	str	r2, [sp, #4]
 80185fe:	9300      	str	r3, [sp, #0]
 8018600:	4623      	mov	r3, r4
 8018602:	460a      	mov	r2, r1
 8018604:	68b9      	ldr	r1, [r7, #8]
 8018606:	f7f7 feed 	bl	80103e4 <SecureElementProcessJoinAccept>
 801860a:	4603      	mov	r3, r0
 801860c:	2b00      	cmp	r3, #0
 801860e:	d001      	beq.n	8018614 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018610:	230e      	movs	r3, #14
 8018612:	e0a8      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	6818      	ldr	r0, [r3, #0]
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	791b      	ldrb	r3, [r3, #4]
 801861c:	b29a      	uxth	r2, r3
 801861e:	f107 0314 	add.w	r3, r7, #20
 8018622:	4619      	mov	r1, r3
 8018624:	f003 f8f3 	bl	801b80e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f000 f9f0 	bl	8018a0e <LoRaMacParserJoinAccept>
 801862e:	4603      	mov	r3, r0
 8018630:	2b00      	cmp	r3, #0
 8018632:	d001      	beq.n	8018638 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8018634:	230f      	movs	r3, #15
 8018636:	e096      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8018638:	2300      	movs	r3, #0
 801863a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	799b      	ldrb	r3, [r3, #6]
 8018642:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	79db      	ldrb	r3, [r3, #7]
 8018648:	021b      	lsls	r3, r3, #8
 801864a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801864c:	4313      	orrs	r3, r2
 801864e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	7a1b      	ldrb	r3, [r3, #8]
 8018654:	041b      	lsls	r3, r3, #16
 8018656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018658:	4313      	orrs	r3, r2
 801865a:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 801865c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801865e:	f7ff fe4b 	bl	80182f8 <IsJoinNonce10xOk>
 8018662:	4603      	mov	r3, r0
 8018664:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8018668:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801866c:	2b00      	cmp	r3, #0
 801866e:	d010      	beq.n	8018692 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8018670:	4b3f      	ldr	r3, [pc, #252]	; (8018770 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018676:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8018678:	7cfb      	ldrb	r3, [r7, #19]
 801867a:	210b      	movs	r1, #11
 801867c:	4618      	mov	r0, r3
 801867e:	f000 f98b 	bl	8018998 <LoRaMacCryptoDeriveLifeTimeKey>
 8018682:	4603      	mov	r3, r0
 8018684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018688:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801868c:	2b00      	cmp	r3, #0
 801868e:	d005      	beq.n	801869c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8018690:	e001      	b.n	8018696 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8018692:	2303      	movs	r3, #3
 8018694:	e067      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8018696:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801869a:	e064      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801869c:	210c      	movs	r1, #12
 801869e:	2000      	movs	r0, #0
 80186a0:	f000 f97a 	bl	8018998 <LoRaMacCryptoDeriveLifeTimeKey>
 80186a4:	4603      	mov	r3, r0
 80186a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80186aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d002      	beq.n	80186b8 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80186b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186b6:	e056      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80186b8:	210a      	movs	r1, #10
 80186ba:	2000      	movs	r0, #0
 80186bc:	f000 f96c 	bl	8018998 <LoRaMacCryptoDeriveLifeTimeKey>
 80186c0:	4603      	mov	r3, r0
 80186c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80186c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d002      	beq.n	80186d4 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80186ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186d2:	e048      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	7a5b      	ldrb	r3, [r3, #9]
 80186d8:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	7a9b      	ldrb	r3, [r3, #10]
 80186de:	021b      	lsls	r3, r3, #8
 80186e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186e2:	4313      	orrs	r3, r2
 80186e4:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	7adb      	ldrb	r3, [r3, #11]
 80186ea:	041b      	lsls	r3, r3, #16
 80186ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186ee:	4313      	orrs	r3, r2
 80186f0:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80186f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80186f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80186fa:	2009      	movs	r0, #9
 80186fc:	f7ff fcd8 	bl	80180b0 <DeriveSessionKey10x>
 8018700:	4603      	mov	r3, r0
 8018702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018706:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801870a:	2b00      	cmp	r3, #0
 801870c:	d002      	beq.n	8018714 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801870e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018712:	e028      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8018714:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801871a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801871c:	2008      	movs	r0, #8
 801871e:	f7ff fcc7 	bl	80180b0 <DeriveSessionKey10x>
 8018722:	4603      	mov	r3, r0
 8018724:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018728:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801872c:	2b00      	cmp	r3, #0
 801872e:	d002      	beq.n	8018736 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8018730:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018734:	e017      	b.n	8018766 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8018736:	4b0e      	ldr	r3, [pc, #56]	; (8018770 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	7cfa      	ldrb	r2, [r7, #19]
 801873c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801873e:	4b0c      	ldr	r3, [pc, #48]	; (8018770 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	2200      	movs	r2, #0
 8018744:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8018746:	4b0a      	ldr	r3, [pc, #40]	; (8018770 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801874e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8018750:	4b07      	ldr	r3, [pc, #28]	; (8018770 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018758:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801875a:	4b05      	ldr	r3, [pc, #20]	; (8018770 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018762:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8018764:	2300      	movs	r3, #0
}
 8018766:	4618      	mov	r0, r3
 8018768:	374c      	adds	r7, #76	; 0x4c
 801876a:	46bd      	mov	sp, r7
 801876c:	bd90      	pop	{r4, r7, pc}
 801876e:	bf00      	nop
 8018770:	20001c88 	.word	0x20001c88

08018774 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8018774:	b590      	push	{r4, r7, lr}
 8018776:	b08b      	sub	sp, #44	; 0x2c
 8018778:	af04      	add	r7, sp, #16
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	607b      	str	r3, [r7, #4]
 801877e:	460b      	mov	r3, r1
 8018780:	72fb      	strb	r3, [r7, #11]
 8018782:	4613      	mov	r3, r2
 8018784:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8018786:	2312      	movs	r3, #18
 8018788:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801878a:	2309      	movs	r3, #9
 801878c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d101      	bne.n	8018798 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018794:	2309      	movs	r3, #9
 8018796:	e05f      	b.n	8018858 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8018798:	4b31      	ldr	r3, [pc, #196]	; (8018860 <LoRaMacCryptoSecureMessage+0xec>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	68db      	ldr	r3, [r3, #12]
 801879e:	68fa      	ldr	r2, [r7, #12]
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d201      	bcs.n	80187a8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80187a4:	2306      	movs	r3, #6
 80187a6:	e057      	b.n	8018858 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d101      	bne.n	80187b6 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80187b2:	2308      	movs	r3, #8
 80187b4:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80187b6:	4b2a      	ldr	r3, [pc, #168]	; (8018860 <LoRaMacCryptoSecureMessage+0xec>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	68fa      	ldr	r2, [r7, #12]
 80187be:	429a      	cmp	r2, r3
 80187c0:	d916      	bls.n	80187f0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187cc:	b219      	sxth	r1, r3
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	689c      	ldr	r4, [r3, #8]
 80187d2:	7dfa      	ldrb	r2, [r7, #23]
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	9301      	str	r3, [sp, #4]
 80187d8:	2300      	movs	r3, #0
 80187da:	9300      	str	r3, [sp, #0]
 80187dc:	4623      	mov	r3, r4
 80187de:	f7ff fa73 	bl	8017cc8 <PayloadEncrypt>
 80187e2:	4603      	mov	r3, r0
 80187e4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80187e6:	7dbb      	ldrb	r3, [r7, #22]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d001      	beq.n	80187f0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80187ec:	7dbb      	ldrb	r3, [r7, #22]
 80187ee:	e033      	b.n	8018858 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f000 fb4d 	bl	8018e90 <LoRaMacSerializerData>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d001      	beq.n	8018800 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80187fc:	2310      	movs	r3, #16
 80187fe:	e02b      	b.n	8018858 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8018800:	2308      	movs	r3, #8
 8018802:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	6818      	ldr	r0, [r3, #0]
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	791b      	ldrb	r3, [r3, #4]
 801880c:	b29b      	uxth	r3, r3
 801880e:	3b04      	subs	r3, #4
 8018810:	b299      	uxth	r1, r3
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	689b      	ldr	r3, [r3, #8]
 8018816:	687a      	ldr	r2, [r7, #4]
 8018818:	322c      	adds	r2, #44	; 0x2c
 801881a:	7dfc      	ldrb	r4, [r7, #23]
 801881c:	9203      	str	r2, [sp, #12]
 801881e:	68fa      	ldr	r2, [r7, #12]
 8018820:	9202      	str	r2, [sp, #8]
 8018822:	9301      	str	r3, [sp, #4]
 8018824:	2300      	movs	r3, #0
 8018826:	9300      	str	r3, [sp, #0]
 8018828:	2300      	movs	r3, #0
 801882a:	4622      	mov	r2, r4
 801882c:	f7ff fb4d 	bl	8017eca <ComputeCmacB0>
 8018830:	4603      	mov	r3, r0
 8018832:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018834:	7dbb      	ldrb	r3, [r7, #22]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d001      	beq.n	801883e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801883a:	7dbb      	ldrb	r3, [r7, #22]
 801883c:	e00c      	b.n	8018858 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801883e:	6878      	ldr	r0, [r7, #4]
 8018840:	f000 fb26 	bl	8018e90 <LoRaMacSerializerData>
 8018844:	4603      	mov	r3, r0
 8018846:	2b00      	cmp	r3, #0
 8018848:	d001      	beq.n	801884e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801884a:	2310      	movs	r3, #16
 801884c:	e004      	b.n	8018858 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801884e:	4b04      	ldr	r3, [pc, #16]	; (8018860 <LoRaMacCryptoSecureMessage+0xec>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	68fa      	ldr	r2, [r7, #12]
 8018854:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8018856:	2300      	movs	r3, #0
}
 8018858:	4618      	mov	r0, r3
 801885a:	371c      	adds	r7, #28
 801885c:	46bd      	mov	sp, r7
 801885e:	bd90      	pop	{r4, r7, pc}
 8018860:	20001c88 	.word	0x20001c88

08018864 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8018864:	b590      	push	{r4, r7, lr}
 8018866:	b08b      	sub	sp, #44	; 0x2c
 8018868:	af04      	add	r7, sp, #16
 801886a:	60b9      	str	r1, [r7, #8]
 801886c:	607b      	str	r3, [r7, #4]
 801886e:	4603      	mov	r3, r0
 8018870:	73fb      	strb	r3, [r7, #15]
 8018872:	4613      	mov	r3, r2
 8018874:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8018876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018878:	2b00      	cmp	r3, #0
 801887a:	d101      	bne.n	8018880 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801887c:	2309      	movs	r3, #9
 801887e:	e084      	b.n	801898a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8018880:	7bbb      	ldrb	r3, [r7, #14]
 8018882:	6879      	ldr	r1, [r7, #4]
 8018884:	4618      	mov	r0, r3
 8018886:	f7ff fc9f 	bl	80181c8 <CheckFCntDown>
 801888a:	4603      	mov	r3, r0
 801888c:	f083 0301 	eor.w	r3, r3, #1
 8018890:	b2db      	uxtb	r3, r3
 8018892:	2b00      	cmp	r3, #0
 8018894:	d001      	beq.n	801889a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8018896:	2306      	movs	r3, #6
 8018898:	e077      	b.n	801898a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801889a:	2312      	movs	r3, #18
 801889c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801889e:	2309      	movs	r3, #9
 80188a0:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80188a2:	2308      	movs	r3, #8
 80188a4:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80188a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188a8:	f000 f97c 	bl	8018ba4 <LoRaMacParserData>
 80188ac:	4603      	mov	r3, r0
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d001      	beq.n	80188b6 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80188b2:	230f      	movs	r3, #15
 80188b4:	e069      	b.n	801898a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80188b6:	f107 0210 	add.w	r2, r7, #16
 80188ba:	7bfb      	ldrb	r3, [r7, #15]
 80188bc:	4611      	mov	r1, r2
 80188be:	4618      	mov	r0, r3
 80188c0:	f7ff fbd0 	bl	8018064 <GetKeyAddrItem>
 80188c4:	4603      	mov	r3, r0
 80188c6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80188c8:	7d7b      	ldrb	r3, [r7, #21]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d001      	beq.n	80188d2 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80188ce:	7d7b      	ldrb	r3, [r7, #21]
 80188d0:	e05b      	b.n	801898a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80188d2:	693b      	ldr	r3, [r7, #16]
 80188d4:	785b      	ldrb	r3, [r3, #1]
 80188d6:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80188d8:	693b      	ldr	r3, [r7, #16]
 80188da:	789b      	ldrb	r3, [r3, #2]
 80188dc:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80188de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188e0:	689b      	ldr	r3, [r3, #8]
 80188e2:	68ba      	ldr	r2, [r7, #8]
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d001      	beq.n	80188ec <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80188e8:	2302      	movs	r3, #2
 80188ea:	e04e      	b.n	801898a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80188ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ee:	7b1b      	ldrb	r3, [r3, #12]
 80188f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80188f4:	b2db      	uxtb	r3, r3
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	bf14      	ite	ne
 80188fa:	2301      	movne	r3, #1
 80188fc:	2300      	moveq	r3, #0
 80188fe:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8018900:	4b24      	ldr	r3, [pc, #144]	; (8018994 <LoRaMacCryptoUnsecureMessage+0x130>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	789b      	ldrb	r3, [r3, #2]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d101      	bne.n	801890e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801890a:	2300      	movs	r3, #0
 801890c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018910:	6818      	ldr	r0, [r3, #0]
 8018912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018914:	791b      	ldrb	r3, [r3, #4]
 8018916:	b29b      	uxth	r3, r3
 8018918:	3b04      	subs	r3, #4
 801891a:	b299      	uxth	r1, r3
 801891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018920:	7dbc      	ldrb	r4, [r7, #22]
 8018922:	7d3a      	ldrb	r2, [r7, #20]
 8018924:	9303      	str	r3, [sp, #12]
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	9302      	str	r3, [sp, #8]
 801892a:	68bb      	ldr	r3, [r7, #8]
 801892c:	9301      	str	r3, [sp, #4]
 801892e:	2301      	movs	r3, #1
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	4623      	mov	r3, r4
 8018934:	f7ff fb07 	bl	8017f46 <VerifyCmacB0>
 8018938:	4603      	mov	r3, r0
 801893a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801893c:	7d7b      	ldrb	r3, [r7, #21]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d001      	beq.n	8018946 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8018942:	7d7b      	ldrb	r3, [r7, #21]
 8018944:	e021      	b.n	801898a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8018946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018948:	f893 3020 	ldrb.w	r3, [r3, #32]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d101      	bne.n	8018954 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8018950:	2308      	movs	r3, #8
 8018952:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8018954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018956:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801895a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801895e:	b219      	sxth	r1, r3
 8018960:	7dfa      	ldrb	r2, [r7, #23]
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	9301      	str	r3, [sp, #4]
 8018966:	2301      	movs	r3, #1
 8018968:	9300      	str	r3, [sp, #0]
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	f7ff f9ac 	bl	8017cc8 <PayloadEncrypt>
 8018970:	4603      	mov	r3, r0
 8018972:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018974:	7d7b      	ldrb	r3, [r7, #21]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d001      	beq.n	801897e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801897a:	7d7b      	ldrb	r3, [r7, #21]
 801897c:	e005      	b.n	801898a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801897e:	7bbb      	ldrb	r3, [r7, #14]
 8018980:	6879      	ldr	r1, [r7, #4]
 8018982:	4618      	mov	r0, r3
 8018984:	f7ff fc44 	bl	8018210 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8018988:	2300      	movs	r3, #0
}
 801898a:	4618      	mov	r0, r3
 801898c:	371c      	adds	r7, #28
 801898e:	46bd      	mov	sp, r7
 8018990:	bd90      	pop	{r4, r7, pc}
 8018992:	bf00      	nop
 8018994:	20001c88 	.word	0x20001c88

08018998 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b088      	sub	sp, #32
 801899c:	af00      	add	r7, sp, #0
 801899e:	4603      	mov	r3, r0
 80189a0:	460a      	mov	r2, r1
 80189a2:	71fb      	strb	r3, [r7, #7]
 80189a4:	4613      	mov	r3, r2
 80189a6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80189a8:	2300      	movs	r3, #0
 80189aa:	60fb      	str	r3, [r7, #12]
 80189ac:	f107 0310 	add.w	r3, r7, #16
 80189b0:	2200      	movs	r2, #0
 80189b2:	601a      	str	r2, [r3, #0]
 80189b4:	605a      	str	r2, [r3, #4]
 80189b6:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80189b8:	2300      	movs	r3, #0
 80189ba:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80189bc:	79bb      	ldrb	r3, [r7, #6]
 80189be:	2b0c      	cmp	r3, #12
 80189c0:	d00b      	beq.n	80189da <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 80189c2:	2b0c      	cmp	r3, #12
 80189c4:	dc0f      	bgt.n	80189e6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 80189c6:	2b0a      	cmp	r3, #10
 80189c8:	d00a      	beq.n	80189e0 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 80189ca:	2b0b      	cmp	r3, #11
 80189cc:	d10b      	bne.n	80189e6 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80189ce:	79fb      	ldrb	r3, [r7, #7]
 80189d0:	2b01      	cmp	r3, #1
 80189d2:	d10a      	bne.n	80189ea <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 80189d4:	2320      	movs	r3, #32
 80189d6:	733b      	strb	r3, [r7, #12]
            }
            break;
 80189d8:	e007      	b.n	80189ea <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80189da:	230b      	movs	r3, #11
 80189dc:	77fb      	strb	r3, [r7, #31]
            break;
 80189de:	e005      	b.n	80189ec <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80189e0:	2330      	movs	r3, #48	; 0x30
 80189e2:	733b      	strb	r3, [r7, #12]
            break;
 80189e4:	e002      	b.n	80189ec <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80189e6:	230a      	movs	r3, #10
 80189e8:	e00d      	b.n	8018a06 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80189ea:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80189ec:	79ba      	ldrb	r2, [r7, #6]
 80189ee:	7ff9      	ldrb	r1, [r7, #31]
 80189f0:	f107 030c 	add.w	r3, r7, #12
 80189f4:	4618      	mov	r0, r3
 80189f6:	f7f7 fcb5 	bl	8010364 <SecureElementDeriveAndStoreKey>
 80189fa:	4603      	mov	r3, r0
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d001      	beq.n	8018a04 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018a00:	230e      	movs	r3, #14
 8018a02:	e000      	b.n	8018a06 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018a04:	2300      	movs	r3, #0
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3720      	adds	r7, #32
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}

08018a0e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8018a0e:	b580      	push	{r7, lr}
 8018a10:	b084      	sub	sp, #16
 8018a12:	af00      	add	r7, sp, #0
 8018a14:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d003      	beq.n	8018a24 <LoRaMacParserJoinAccept+0x16>
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d101      	bne.n	8018a28 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8018a24:	2302      	movs	r3, #2
 8018a26:	e0b9      	b.n	8018b9c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	681a      	ldr	r2, [r3, #0]
 8018a30:	89fb      	ldrh	r3, [r7, #14]
 8018a32:	1c59      	adds	r1, r3, #1
 8018a34:	81f9      	strh	r1, [r7, #14]
 8018a36:	4413      	add	r3, r2
 8018a38:	781a      	ldrb	r2, [r3, #0]
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	1d98      	adds	r0, r3, #6
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681a      	ldr	r2, [r3, #0]
 8018a46:	89fb      	ldrh	r3, [r7, #14]
 8018a48:	4413      	add	r3, r2
 8018a4a:	2203      	movs	r2, #3
 8018a4c:	4619      	mov	r1, r3
 8018a4e:	f002 fede 	bl	801b80e <memcpy1>
    bufItr = bufItr + 3;
 8018a52:	89fb      	ldrh	r3, [r7, #14]
 8018a54:	3303      	adds	r3, #3
 8018a56:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f103 0009 	add.w	r0, r3, #9
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681a      	ldr	r2, [r3, #0]
 8018a62:	89fb      	ldrh	r3, [r7, #14]
 8018a64:	4413      	add	r3, r2
 8018a66:	2203      	movs	r2, #3
 8018a68:	4619      	mov	r1, r3
 8018a6a:	f002 fed0 	bl	801b80e <memcpy1>
    bufItr = bufItr + 3;
 8018a6e:	89fb      	ldrh	r3, [r7, #14]
 8018a70:	3303      	adds	r3, #3
 8018a72:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681a      	ldr	r2, [r3, #0]
 8018a78:	89fb      	ldrh	r3, [r7, #14]
 8018a7a:	1c59      	adds	r1, r3, #1
 8018a7c:	81f9      	strh	r1, [r7, #14]
 8018a7e:	4413      	add	r3, r2
 8018a80:	781b      	ldrb	r3, [r3, #0]
 8018a82:	461a      	mov	r2, r3
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681a      	ldr	r2, [r3, #0]
 8018a8c:	89fb      	ldrh	r3, [r7, #14]
 8018a8e:	1c59      	adds	r1, r3, #1
 8018a90:	81f9      	strh	r1, [r7, #14]
 8018a92:	4413      	add	r3, r2
 8018a94:	781b      	ldrb	r3, [r3, #0]
 8018a96:	021a      	lsls	r2, r3, #8
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	68db      	ldr	r3, [r3, #12]
 8018a9c:	431a      	orrs	r2, r3
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681a      	ldr	r2, [r3, #0]
 8018aa6:	89fb      	ldrh	r3, [r7, #14]
 8018aa8:	1c59      	adds	r1, r3, #1
 8018aaa:	81f9      	strh	r1, [r7, #14]
 8018aac:	4413      	add	r3, r2
 8018aae:	781b      	ldrb	r3, [r3, #0]
 8018ab0:	041a      	lsls	r2, r3, #16
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	68db      	ldr	r3, [r3, #12]
 8018ab6:	431a      	orrs	r2, r3
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	89fb      	ldrh	r3, [r7, #14]
 8018ac2:	1c59      	adds	r1, r3, #1
 8018ac4:	81f9      	strh	r1, [r7, #14]
 8018ac6:	4413      	add	r3, r2
 8018ac8:	781b      	ldrb	r3, [r3, #0]
 8018aca:	061a      	lsls	r2, r3, #24
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	68db      	ldr	r3, [r3, #12]
 8018ad0:	431a      	orrs	r2, r3
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681a      	ldr	r2, [r3, #0]
 8018ada:	89fb      	ldrh	r3, [r7, #14]
 8018adc:	1c59      	adds	r1, r3, #1
 8018ade:	81f9      	strh	r1, [r7, #14]
 8018ae0:	4413      	add	r3, r2
 8018ae2:	781a      	ldrb	r2, [r3, #0]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	681a      	ldr	r2, [r3, #0]
 8018aec:	89fb      	ldrh	r3, [r7, #14]
 8018aee:	1c59      	adds	r1, r3, #1
 8018af0:	81f9      	strh	r1, [r7, #14]
 8018af2:	4413      	add	r3, r2
 8018af4:	781a      	ldrb	r2, [r3, #0]
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	791b      	ldrb	r3, [r3, #4]
 8018afe:	1f1a      	subs	r2, r3, #4
 8018b00:	89fb      	ldrh	r3, [r7, #14]
 8018b02:	1ad3      	subs	r3, r2, r3
 8018b04:	2b10      	cmp	r3, #16
 8018b06:	d10e      	bne.n	8018b26 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	f103 0012 	add.w	r0, r3, #18
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681a      	ldr	r2, [r3, #0]
 8018b12:	89fb      	ldrh	r3, [r7, #14]
 8018b14:	4413      	add	r3, r2
 8018b16:	2210      	movs	r2, #16
 8018b18:	4619      	mov	r1, r3
 8018b1a:	f002 fe78 	bl	801b80e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8018b1e:	89fb      	ldrh	r3, [r7, #14]
 8018b20:	3310      	adds	r3, #16
 8018b22:	81fb      	strh	r3, [r7, #14]
 8018b24:	e008      	b.n	8018b38 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	791b      	ldrb	r3, [r3, #4]
 8018b2a:	1f1a      	subs	r2, r3, #4
 8018b2c:	89fb      	ldrh	r3, [r7, #14]
 8018b2e:	1ad3      	subs	r3, r2, r3
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	dd01      	ble.n	8018b38 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8018b34:	2301      	movs	r3, #1
 8018b36:	e031      	b.n	8018b9c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681a      	ldr	r2, [r3, #0]
 8018b3c:	89fb      	ldrh	r3, [r7, #14]
 8018b3e:	1c59      	adds	r1, r3, #1
 8018b40:	81f9      	strh	r1, [r7, #14]
 8018b42:	4413      	add	r3, r2
 8018b44:	781b      	ldrb	r3, [r3, #0]
 8018b46:	461a      	mov	r2, r3
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681a      	ldr	r2, [r3, #0]
 8018b50:	89fb      	ldrh	r3, [r7, #14]
 8018b52:	1c59      	adds	r1, r3, #1
 8018b54:	81f9      	strh	r1, [r7, #14]
 8018b56:	4413      	add	r3, r2
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	021a      	lsls	r2, r3, #8
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b60:	431a      	orrs	r2, r3
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681a      	ldr	r2, [r3, #0]
 8018b6a:	89fb      	ldrh	r3, [r7, #14]
 8018b6c:	1c59      	adds	r1, r3, #1
 8018b6e:	81f9      	strh	r1, [r7, #14]
 8018b70:	4413      	add	r3, r2
 8018b72:	781b      	ldrb	r3, [r3, #0]
 8018b74:	041a      	lsls	r2, r3, #16
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b7a:	431a      	orrs	r2, r3
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	681a      	ldr	r2, [r3, #0]
 8018b84:	89fb      	ldrh	r3, [r7, #14]
 8018b86:	1c59      	adds	r1, r3, #1
 8018b88:	81f9      	strh	r1, [r7, #14]
 8018b8a:	4413      	add	r3, r2
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	061a      	lsls	r2, r3, #24
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b94:	431a      	orrs	r2, r3
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8018b9a:	2300      	movs	r3, #0
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3710      	adds	r7, #16
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}

08018ba4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b084      	sub	sp, #16
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d003      	beq.n	8018bba <LoRaMacParserData+0x16>
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d101      	bne.n	8018bbe <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8018bba:	2302      	movs	r3, #2
 8018bbc:	e0e2      	b.n	8018d84 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681a      	ldr	r2, [r3, #0]
 8018bc6:	89fb      	ldrh	r3, [r7, #14]
 8018bc8:	1c59      	adds	r1, r3, #1
 8018bca:	81f9      	strh	r1, [r7, #14]
 8018bcc:	4413      	add	r3, r2
 8018bce:	781a      	ldrb	r2, [r3, #0]
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	681a      	ldr	r2, [r3, #0]
 8018bd8:	89fb      	ldrh	r3, [r7, #14]
 8018bda:	1c59      	adds	r1, r3, #1
 8018bdc:	81f9      	strh	r1, [r7, #14]
 8018bde:	4413      	add	r3, r2
 8018be0:	781b      	ldrb	r3, [r3, #0]
 8018be2:	461a      	mov	r2, r3
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681a      	ldr	r2, [r3, #0]
 8018bec:	89fb      	ldrh	r3, [r7, #14]
 8018bee:	1c59      	adds	r1, r3, #1
 8018bf0:	81f9      	strh	r1, [r7, #14]
 8018bf2:	4413      	add	r3, r2
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	021a      	lsls	r2, r3, #8
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	689b      	ldr	r3, [r3, #8]
 8018bfc:	431a      	orrs	r2, r3
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681a      	ldr	r2, [r3, #0]
 8018c06:	89fb      	ldrh	r3, [r7, #14]
 8018c08:	1c59      	adds	r1, r3, #1
 8018c0a:	81f9      	strh	r1, [r7, #14]
 8018c0c:	4413      	add	r3, r2
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	041a      	lsls	r2, r3, #16
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	689b      	ldr	r3, [r3, #8]
 8018c16:	431a      	orrs	r2, r3
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681a      	ldr	r2, [r3, #0]
 8018c20:	89fb      	ldrh	r3, [r7, #14]
 8018c22:	1c59      	adds	r1, r3, #1
 8018c24:	81f9      	strh	r1, [r7, #14]
 8018c26:	4413      	add	r3, r2
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	061a      	lsls	r2, r3, #24
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	689b      	ldr	r3, [r3, #8]
 8018c30:	431a      	orrs	r2, r3
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	89fb      	ldrh	r3, [r7, #14]
 8018c3c:	1c59      	adds	r1, r3, #1
 8018c3e:	81f9      	strh	r1, [r7, #14]
 8018c40:	4413      	add	r3, r2
 8018c42:	781a      	ldrb	r2, [r3, #0]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681a      	ldr	r2, [r3, #0]
 8018c4c:	89fb      	ldrh	r3, [r7, #14]
 8018c4e:	1c59      	adds	r1, r3, #1
 8018c50:	81f9      	strh	r1, [r7, #14]
 8018c52:	4413      	add	r3, r2
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	b29a      	uxth	r2, r3
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	681a      	ldr	r2, [r3, #0]
 8018c60:	89fb      	ldrh	r3, [r7, #14]
 8018c62:	1c59      	adds	r1, r3, #1
 8018c64:	81f9      	strh	r1, [r7, #14]
 8018c66:	4413      	add	r3, r2
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	0219      	lsls	r1, r3, #8
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	89db      	ldrh	r3, [r3, #14]
 8018c70:	b21a      	sxth	r2, r3
 8018c72:	b20b      	sxth	r3, r1
 8018c74:	4313      	orrs	r3, r2
 8018c76:	b21b      	sxth	r3, r3
 8018c78:	b29a      	uxth	r2, r3
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	f103 0010 	add.w	r0, r3, #16
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681a      	ldr	r2, [r3, #0]
 8018c88:	89fb      	ldrh	r3, [r7, #14]
 8018c8a:	18d1      	adds	r1, r2, r3
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	7b1b      	ldrb	r3, [r3, #12]
 8018c90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018c94:	b2db      	uxtb	r3, r3
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	461a      	mov	r2, r3
 8018c9a:	f002 fdb8 	bl	801b80e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	7b1b      	ldrb	r3, [r3, #12]
 8018ca2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018ca6:	b2db      	uxtb	r3, r3
 8018ca8:	b29a      	uxth	r2, r3
 8018caa:	89fb      	ldrh	r3, [r7, #14]
 8018cac:	4413      	add	r3, r2
 8018cae:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2200      	movs	r2, #0
 8018cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	791b      	ldrb	r3, [r3, #4]
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	89fb      	ldrh	r3, [r7, #14]
 8018cc8:	1ad3      	subs	r3, r2, r3
 8018cca:	2b04      	cmp	r3, #4
 8018ccc:	dd28      	ble.n	8018d20 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681a      	ldr	r2, [r3, #0]
 8018cd2:	89fb      	ldrh	r3, [r7, #14]
 8018cd4:	1c59      	adds	r1, r3, #1
 8018cd6:	81f9      	strh	r1, [r7, #14]
 8018cd8:	4413      	add	r3, r2
 8018cda:	781a      	ldrb	r2, [r3, #0]
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	791a      	ldrb	r2, [r3, #4]
 8018ce6:	89fb      	ldrh	r3, [r7, #14]
 8018ce8:	b2db      	uxtb	r3, r3
 8018cea:	1ad3      	subs	r3, r2, r3
 8018cec:	b2db      	uxtb	r3, r3
 8018cee:	3b04      	subs	r3, #4
 8018cf0:	b2da      	uxtb	r2, r3
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681a      	ldr	r2, [r3, #0]
 8018d00:	89fb      	ldrh	r3, [r7, #14]
 8018d02:	18d1      	adds	r1, r2, r3
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d0a:	b29b      	uxth	r3, r3
 8018d0c:	461a      	mov	r2, r3
 8018d0e:	f002 fd7e 	bl	801b80e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d18:	b29a      	uxth	r2, r3
 8018d1a:	89fb      	ldrh	r3, [r7, #14]
 8018d1c:	4413      	add	r3, r2
 8018d1e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681a      	ldr	r2, [r3, #0]
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	791b      	ldrb	r3, [r3, #4]
 8018d28:	3b04      	subs	r3, #4
 8018d2a:	4413      	add	r3, r2
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	461a      	mov	r2, r3
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	6819      	ldr	r1, [r3, #0]
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	791b      	ldrb	r3, [r3, #4]
 8018d40:	3b03      	subs	r3, #3
 8018d42:	440b      	add	r3, r1
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	021b      	lsls	r3, r3, #8
 8018d48:	431a      	orrs	r2, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6819      	ldr	r1, [r3, #0]
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	791b      	ldrb	r3, [r3, #4]
 8018d5a:	3b02      	subs	r3, #2
 8018d5c:	440b      	add	r3, r1
 8018d5e:	781b      	ldrb	r3, [r3, #0]
 8018d60:	041b      	lsls	r3, r3, #16
 8018d62:	431a      	orrs	r2, r3
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	6819      	ldr	r1, [r3, #0]
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	791b      	ldrb	r3, [r3, #4]
 8018d74:	3b01      	subs	r3, #1
 8018d76:	440b      	add	r3, r1
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	061b      	lsls	r3, r3, #24
 8018d7c:	431a      	orrs	r2, r3
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8018d82:	2300      	movs	r3, #0
}
 8018d84:	4618      	mov	r0, r3
 8018d86:	3710      	adds	r7, #16
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	bd80      	pop	{r7, pc}

08018d8c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b084      	sub	sp, #16
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d003      	beq.n	8018da2 <LoRaMacSerializerJoinRequest+0x16>
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d101      	bne.n	8018da6 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8018da2:	2301      	movs	r3, #1
 8018da4:	e070      	b.n	8018e88 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8018da6:	2300      	movs	r3, #0
 8018da8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	791b      	ldrb	r3, [r3, #4]
 8018dae:	2b16      	cmp	r3, #22
 8018db0:	d801      	bhi.n	8018db6 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8018db2:	2302      	movs	r3, #2
 8018db4:	e068      	b.n	8018e88 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	89fb      	ldrh	r3, [r7, #14]
 8018dbc:	1c59      	adds	r1, r3, #1
 8018dbe:	81f9      	strh	r1, [r7, #14]
 8018dc0:	4413      	add	r3, r2
 8018dc2:	687a      	ldr	r2, [r7, #4]
 8018dc4:	7952      	ldrb	r2, [r2, #5]
 8018dc6:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681a      	ldr	r2, [r3, #0]
 8018dcc:	89fb      	ldrh	r3, [r7, #14]
 8018dce:	18d0      	adds	r0, r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	3306      	adds	r3, #6
 8018dd4:	2208      	movs	r2, #8
 8018dd6:	4619      	mov	r1, r3
 8018dd8:	f002 fd34 	bl	801b844 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8018ddc:	89fb      	ldrh	r3, [r7, #14]
 8018dde:	3308      	adds	r3, #8
 8018de0:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681a      	ldr	r2, [r3, #0]
 8018de6:	89fb      	ldrh	r3, [r7, #14]
 8018de8:	18d0      	adds	r0, r2, r3
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	330e      	adds	r3, #14
 8018dee:	2208      	movs	r2, #8
 8018df0:	4619      	mov	r1, r3
 8018df2:	f002 fd27 	bl	801b844 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8018df6:	89fb      	ldrh	r3, [r7, #14]
 8018df8:	3308      	adds	r3, #8
 8018dfa:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	8ad9      	ldrh	r1, [r3, #22]
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681a      	ldr	r2, [r3, #0]
 8018e04:	89fb      	ldrh	r3, [r7, #14]
 8018e06:	1c58      	adds	r0, r3, #1
 8018e08:	81f8      	strh	r0, [r7, #14]
 8018e0a:	4413      	add	r3, r2
 8018e0c:	b2ca      	uxtb	r2, r1
 8018e0e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	8adb      	ldrh	r3, [r3, #22]
 8018e14:	0a1b      	lsrs	r3, r3, #8
 8018e16:	b299      	uxth	r1, r3
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681a      	ldr	r2, [r3, #0]
 8018e1c:	89fb      	ldrh	r3, [r7, #14]
 8018e1e:	1c58      	adds	r0, r3, #1
 8018e20:	81f8      	strh	r0, [r7, #14]
 8018e22:	4413      	add	r3, r2
 8018e24:	b2ca      	uxtb	r2, r1
 8018e26:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	6999      	ldr	r1, [r3, #24]
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681a      	ldr	r2, [r3, #0]
 8018e30:	89fb      	ldrh	r3, [r7, #14]
 8018e32:	1c58      	adds	r0, r3, #1
 8018e34:	81f8      	strh	r0, [r7, #14]
 8018e36:	4413      	add	r3, r2
 8018e38:	b2ca      	uxtb	r2, r1
 8018e3a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	699b      	ldr	r3, [r3, #24]
 8018e40:	0a19      	lsrs	r1, r3, #8
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	89fb      	ldrh	r3, [r7, #14]
 8018e48:	1c58      	adds	r0, r3, #1
 8018e4a:	81f8      	strh	r0, [r7, #14]
 8018e4c:	4413      	add	r3, r2
 8018e4e:	b2ca      	uxtb	r2, r1
 8018e50:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	699b      	ldr	r3, [r3, #24]
 8018e56:	0c19      	lsrs	r1, r3, #16
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681a      	ldr	r2, [r3, #0]
 8018e5c:	89fb      	ldrh	r3, [r7, #14]
 8018e5e:	1c58      	adds	r0, r3, #1
 8018e60:	81f8      	strh	r0, [r7, #14]
 8018e62:	4413      	add	r3, r2
 8018e64:	b2ca      	uxtb	r2, r1
 8018e66:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	699b      	ldr	r3, [r3, #24]
 8018e6c:	0e19      	lsrs	r1, r3, #24
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681a      	ldr	r2, [r3, #0]
 8018e72:	89fb      	ldrh	r3, [r7, #14]
 8018e74:	1c58      	adds	r0, r3, #1
 8018e76:	81f8      	strh	r0, [r7, #14]
 8018e78:	4413      	add	r3, r2
 8018e7a:	b2ca      	uxtb	r2, r1
 8018e7c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8018e7e:	89fb      	ldrh	r3, [r7, #14]
 8018e80:	b2da      	uxtb	r2, r3
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8018e86:	2300      	movs	r3, #0
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3710      	adds	r7, #16
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}

08018e90 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d003      	beq.n	8018ea6 <LoRaMacSerializerData+0x16>
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d101      	bne.n	8018eaa <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8018ea6:	2301      	movs	r3, #1
 8018ea8:	e0e5      	b.n	8019076 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8018eae:	2308      	movs	r3, #8
 8018eb0:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	7b1b      	ldrb	r3, [r3, #12]
 8018eb6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018eba:	b2db      	uxtb	r3, r3
 8018ebc:	b29a      	uxth	r2, r3
 8018ebe:	89bb      	ldrh	r3, [r7, #12]
 8018ec0:	4413      	add	r3, r2
 8018ec2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d002      	beq.n	8018ed4 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8018ece:	89bb      	ldrh	r3, [r7, #12]
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018eda:	b29a      	uxth	r2, r3
 8018edc:	89bb      	ldrh	r3, [r7, #12]
 8018ede:	4413      	add	r3, r2
 8018ee0:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8018ee2:	89bb      	ldrh	r3, [r7, #12]
 8018ee4:	3304      	adds	r3, #4
 8018ee6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	791b      	ldrb	r3, [r3, #4]
 8018eec:	b29b      	uxth	r3, r3
 8018eee:	89ba      	ldrh	r2, [r7, #12]
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	d901      	bls.n	8018ef8 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8018ef4:	2302      	movs	r3, #2
 8018ef6:	e0be      	b.n	8019076 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681a      	ldr	r2, [r3, #0]
 8018efc:	89fb      	ldrh	r3, [r7, #14]
 8018efe:	1c59      	adds	r1, r3, #1
 8018f00:	81f9      	strh	r1, [r7, #14]
 8018f02:	4413      	add	r3, r2
 8018f04:	687a      	ldr	r2, [r7, #4]
 8018f06:	7952      	ldrb	r2, [r2, #5]
 8018f08:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6899      	ldr	r1, [r3, #8]
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681a      	ldr	r2, [r3, #0]
 8018f12:	89fb      	ldrh	r3, [r7, #14]
 8018f14:	1c58      	adds	r0, r3, #1
 8018f16:	81f8      	strh	r0, [r7, #14]
 8018f18:	4413      	add	r3, r2
 8018f1a:	b2ca      	uxtb	r2, r1
 8018f1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	689b      	ldr	r3, [r3, #8]
 8018f22:	0a19      	lsrs	r1, r3, #8
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	681a      	ldr	r2, [r3, #0]
 8018f28:	89fb      	ldrh	r3, [r7, #14]
 8018f2a:	1c58      	adds	r0, r3, #1
 8018f2c:	81f8      	strh	r0, [r7, #14]
 8018f2e:	4413      	add	r3, r2
 8018f30:	b2ca      	uxtb	r2, r1
 8018f32:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	689b      	ldr	r3, [r3, #8]
 8018f38:	0c19      	lsrs	r1, r3, #16
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	681a      	ldr	r2, [r3, #0]
 8018f3e:	89fb      	ldrh	r3, [r7, #14]
 8018f40:	1c58      	adds	r0, r3, #1
 8018f42:	81f8      	strh	r0, [r7, #14]
 8018f44:	4413      	add	r3, r2
 8018f46:	b2ca      	uxtb	r2, r1
 8018f48:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	689b      	ldr	r3, [r3, #8]
 8018f4e:	0e19      	lsrs	r1, r3, #24
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681a      	ldr	r2, [r3, #0]
 8018f54:	89fb      	ldrh	r3, [r7, #14]
 8018f56:	1c58      	adds	r0, r3, #1
 8018f58:	81f8      	strh	r0, [r7, #14]
 8018f5a:	4413      	add	r3, r2
 8018f5c:	b2ca      	uxtb	r2, r1
 8018f5e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	681a      	ldr	r2, [r3, #0]
 8018f64:	89fb      	ldrh	r3, [r7, #14]
 8018f66:	1c59      	adds	r1, r3, #1
 8018f68:	81f9      	strh	r1, [r7, #14]
 8018f6a:	4413      	add	r3, r2
 8018f6c:	687a      	ldr	r2, [r7, #4]
 8018f6e:	7b12      	ldrb	r2, [r2, #12]
 8018f70:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	89d9      	ldrh	r1, [r3, #14]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681a      	ldr	r2, [r3, #0]
 8018f7a:	89fb      	ldrh	r3, [r7, #14]
 8018f7c:	1c58      	adds	r0, r3, #1
 8018f7e:	81f8      	strh	r0, [r7, #14]
 8018f80:	4413      	add	r3, r2
 8018f82:	b2ca      	uxtb	r2, r1
 8018f84:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	89db      	ldrh	r3, [r3, #14]
 8018f8a:	0a1b      	lsrs	r3, r3, #8
 8018f8c:	b299      	uxth	r1, r3
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	89fb      	ldrh	r3, [r7, #14]
 8018f94:	1c58      	adds	r0, r3, #1
 8018f96:	81f8      	strh	r0, [r7, #14]
 8018f98:	4413      	add	r3, r2
 8018f9a:	b2ca      	uxtb	r2, r1
 8018f9c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	681a      	ldr	r2, [r3, #0]
 8018fa2:	89fb      	ldrh	r3, [r7, #14]
 8018fa4:	18d0      	adds	r0, r2, r3
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	f103 0110 	add.w	r1, r3, #16
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	7b1b      	ldrb	r3, [r3, #12]
 8018fb0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	461a      	mov	r2, r3
 8018fba:	f002 fc28 	bl	801b80e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	7b1b      	ldrb	r3, [r3, #12]
 8018fc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	b29a      	uxth	r2, r3
 8018fca:	89fb      	ldrh	r3, [r7, #14]
 8018fcc:	4413      	add	r3, r2
 8018fce:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d009      	beq.n	8018fee <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	681a      	ldr	r2, [r3, #0]
 8018fde:	89fb      	ldrh	r3, [r7, #14]
 8018fe0:	1c59      	adds	r1, r3, #1
 8018fe2:	81f9      	strh	r1, [r7, #14]
 8018fe4:	4413      	add	r3, r2
 8018fe6:	687a      	ldr	r2, [r7, #4]
 8018fe8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8018fec:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	89fb      	ldrh	r3, [r7, #14]
 8018ff4:	18d0      	adds	r0, r2, r3
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019000:	b29b      	uxth	r3, r3
 8019002:	461a      	mov	r2, r3
 8019004:	f002 fc03 	bl	801b80e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801900e:	b29a      	uxth	r2, r3
 8019010:	89fb      	ldrh	r3, [r7, #14]
 8019012:	4413      	add	r3, r2
 8019014:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681a      	ldr	r2, [r3, #0]
 801901e:	89fb      	ldrh	r3, [r7, #14]
 8019020:	1c58      	adds	r0, r3, #1
 8019022:	81f8      	strh	r0, [r7, #14]
 8019024:	4413      	add	r3, r2
 8019026:	b2ca      	uxtb	r2, r1
 8019028:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801902e:	0a19      	lsrs	r1, r3, #8
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681a      	ldr	r2, [r3, #0]
 8019034:	89fb      	ldrh	r3, [r7, #14]
 8019036:	1c58      	adds	r0, r3, #1
 8019038:	81f8      	strh	r0, [r7, #14]
 801903a:	4413      	add	r3, r2
 801903c:	b2ca      	uxtb	r2, r1
 801903e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019044:	0c19      	lsrs	r1, r3, #16
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	681a      	ldr	r2, [r3, #0]
 801904a:	89fb      	ldrh	r3, [r7, #14]
 801904c:	1c58      	adds	r0, r3, #1
 801904e:	81f8      	strh	r0, [r7, #14]
 8019050:	4413      	add	r3, r2
 8019052:	b2ca      	uxtb	r2, r1
 8019054:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801905a:	0e19      	lsrs	r1, r3, #24
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681a      	ldr	r2, [r3, #0]
 8019060:	89fb      	ldrh	r3, [r7, #14]
 8019062:	1c58      	adds	r0, r3, #1
 8019064:	81f8      	strh	r0, [r7, #14]
 8019066:	4413      	add	r3, r2
 8019068:	b2ca      	uxtb	r2, r1
 801906a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801906c:	89fb      	ldrh	r3, [r7, #14]
 801906e:	b2da      	uxtb	r2, r3
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8019074:	2300      	movs	r3, #0
}
 8019076:	4618      	mov	r0, r3
 8019078:	3710      	adds	r7, #16
 801907a:	46bd      	mov	sp, r7
 801907c:	bd80      	pop	{r7, pc}

0801907e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801907e:	b480      	push	{r7}
 8019080:	b083      	sub	sp, #12
 8019082:	af00      	add	r7, sp, #0
 8019084:	4603      	mov	r3, r0
 8019086:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019088:	79fb      	ldrb	r3, [r7, #7]
 801908a:	2b08      	cmp	r3, #8
 801908c:	d101      	bne.n	8019092 <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 801908e:	2301      	movs	r3, #1
 8019090:	e000      	b.n	8019094 <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8019092:	2300      	movs	r3, #0
        }
    }
}
 8019094:	4618      	mov	r0, r3
 8019096:	370c      	adds	r7, #12
 8019098:	46bd      	mov	sp, r7
 801909a:	bc80      	pop	{r7}
 801909c:	4770      	bx	lr

0801909e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801909e:	b580      	push	{r7, lr}
 80190a0:	b084      	sub	sp, #16
 80190a2:	af00      	add	r7, sp, #0
 80190a4:	4603      	mov	r3, r0
 80190a6:	6039      	str	r1, [r7, #0]
 80190a8:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80190aa:	2300      	movs	r3, #0
 80190ac:	60bb      	str	r3, [r7, #8]
    switch( region )
 80190ae:	79fb      	ldrb	r3, [r7, #7]
 80190b0:	2b08      	cmp	r3, #8
 80190b2:	d105      	bne.n	80190c0 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80190b4:	6838      	ldr	r0, [r7, #0]
 80190b6:	f001 fa11 	bl	801a4dc <RegionUS915GetPhyParam>
 80190ba:	4603      	mov	r3, r0
 80190bc:	60fb      	str	r3, [r7, #12]
 80190be:	e001      	b.n	80190c4 <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	4618      	mov	r0, r3
 80190c8:	3710      	adds	r7, #16
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd80      	pop	{r7, pc}

080190ce <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80190ce:	b580      	push	{r7, lr}
 80190d0:	b082      	sub	sp, #8
 80190d2:	af00      	add	r7, sp, #0
 80190d4:	4603      	mov	r3, r0
 80190d6:	6039      	str	r1, [r7, #0]
 80190d8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80190da:	79fb      	ldrb	r3, [r7, #7]
 80190dc:	2b08      	cmp	r3, #8
 80190de:	d103      	bne.n	80190e8 <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 80190e0:	6838      	ldr	r0, [r7, #0]
 80190e2:	f001 fb57 	bl	801a794 <RegionUS915SetBandTxDone>
 80190e6:	e000      	b.n	80190ea <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80190e8:	bf00      	nop
        }
    }
}
 80190ea:	3708      	adds	r7, #8
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}

080190f0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	4603      	mov	r3, r0
 80190f8:	6039      	str	r1, [r7, #0]
 80190fa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80190fc:	79fb      	ldrb	r3, [r7, #7]
 80190fe:	2b08      	cmp	r3, #8
 8019100:	d103      	bne.n	801910a <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 8019102:	6838      	ldr	r0, [r7, #0]
 8019104:	f001 fb72 	bl	801a7ec <RegionUS915InitDefaults>
 8019108:	e000      	b.n	801910c <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801910a:	bf00      	nop
        }
    }
}
 801910c:	bf00      	nop
 801910e:	3708      	adds	r7, #8
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}

08019114 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
 801911a:	4603      	mov	r3, r0
 801911c:	6039      	str	r1, [r7, #0]
 801911e:	71fb      	strb	r3, [r7, #7]
 8019120:	4613      	mov	r3, r2
 8019122:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8019124:	79fb      	ldrb	r3, [r7, #7]
 8019126:	2b08      	cmp	r3, #8
 8019128:	d106      	bne.n	8019138 <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801912a:	79bb      	ldrb	r3, [r7, #6]
 801912c:	4619      	mov	r1, r3
 801912e:	6838      	ldr	r0, [r7, #0]
 8019130:	f001 fc8e 	bl	801aa50 <RegionUS915Verify>
 8019134:	4603      	mov	r3, r0
 8019136:	e000      	b.n	801913a <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 8019138:	2300      	movs	r3, #0
        }
    }
}
 801913a:	4618      	mov	r0, r3
 801913c:	3708      	adds	r7, #8
 801913e:	46bd      	mov	sp, r7
 8019140:	bd80      	pop	{r7, pc}

08019142 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8019142:	b580      	push	{r7, lr}
 8019144:	b082      	sub	sp, #8
 8019146:	af00      	add	r7, sp, #0
 8019148:	4603      	mov	r3, r0
 801914a:	6039      	str	r1, [r7, #0]
 801914c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801914e:	79fb      	ldrb	r3, [r7, #7]
 8019150:	2b08      	cmp	r3, #8
 8019152:	d103      	bne.n	801915c <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 8019154:	6838      	ldr	r0, [r7, #0]
 8019156:	f001 fcf1 	bl	801ab3c <RegionUS915ApplyCFList>
 801915a:	e000      	b.n	801915e <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801915c:	bf00      	nop
        }
    }
}
 801915e:	bf00      	nop
 8019160:	3708      	adds	r7, #8
 8019162:	46bd      	mov	sp, r7
 8019164:	bd80      	pop	{r7, pc}

08019166 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8019166:	b580      	push	{r7, lr}
 8019168:	b082      	sub	sp, #8
 801916a:	af00      	add	r7, sp, #0
 801916c:	4603      	mov	r3, r0
 801916e:	6039      	str	r1, [r7, #0]
 8019170:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019172:	79fb      	ldrb	r3, [r7, #7]
 8019174:	2b08      	cmp	r3, #8
 8019176:	d104      	bne.n	8019182 <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8019178:	6838      	ldr	r0, [r7, #0]
 801917a:	f001 fd53 	bl	801ac24 <RegionUS915ChanMaskSet>
 801917e:	4603      	mov	r3, r0
 8019180:	e000      	b.n	8019184 <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8019182:	2300      	movs	r3, #0
        }
    }
}
 8019184:	4618      	mov	r0, r3
 8019186:	3708      	adds	r7, #8
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}

0801918c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b082      	sub	sp, #8
 8019190:	af00      	add	r7, sp, #0
 8019192:	603b      	str	r3, [r7, #0]
 8019194:	4603      	mov	r3, r0
 8019196:	71fb      	strb	r3, [r7, #7]
 8019198:	460b      	mov	r3, r1
 801919a:	71bb      	strb	r3, [r7, #6]
 801919c:	4613      	mov	r3, r2
 801919e:	717b      	strb	r3, [r7, #5]
    switch( region )
 80191a0:	79fb      	ldrb	r3, [r7, #7]
 80191a2:	2b08      	cmp	r3, #8
 80191a4:	d107      	bne.n	80191b6 <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80191a6:	7979      	ldrb	r1, [r7, #5]
 80191a8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80191ac:	693b      	ldr	r3, [r7, #16]
 80191ae:	683a      	ldr	r2, [r7, #0]
 80191b0:	f001 fda0 	bl	801acf4 <RegionUS915ComputeRxWindowParameters>
 80191b4:	e000      	b.n	80191b8 <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80191b6:	bf00      	nop
        }
    }
}
 80191b8:	bf00      	nop
 80191ba:	3708      	adds	r7, #8
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}

080191c0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b084      	sub	sp, #16
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	4603      	mov	r3, r0
 80191c8:	60b9      	str	r1, [r7, #8]
 80191ca:	607a      	str	r2, [r7, #4]
 80191cc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80191ce:	7bfb      	ldrb	r3, [r7, #15]
 80191d0:	2b08      	cmp	r3, #8
 80191d2:	d105      	bne.n	80191e0 <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80191d4:	6879      	ldr	r1, [r7, #4]
 80191d6:	68b8      	ldr	r0, [r7, #8]
 80191d8:	f001 fdd6 	bl	801ad88 <RegionUS915RxConfig>
 80191dc:	4603      	mov	r3, r0
 80191de:	e000      	b.n	80191e2 <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80191e0:	2300      	movs	r3, #0
        }
    }
}
 80191e2:	4618      	mov	r0, r3
 80191e4:	3710      	adds	r7, #16
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}

080191ea <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80191ea:	b580      	push	{r7, lr}
 80191ec:	b084      	sub	sp, #16
 80191ee:	af00      	add	r7, sp, #0
 80191f0:	60b9      	str	r1, [r7, #8]
 80191f2:	607a      	str	r2, [r7, #4]
 80191f4:	603b      	str	r3, [r7, #0]
 80191f6:	4603      	mov	r3, r0
 80191f8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80191fa:	7bfb      	ldrb	r3, [r7, #15]
 80191fc:	2b08      	cmp	r3, #8
 80191fe:	d106      	bne.n	801920e <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8019200:	683a      	ldr	r2, [r7, #0]
 8019202:	6879      	ldr	r1, [r7, #4]
 8019204:	68b8      	ldr	r0, [r7, #8]
 8019206:	f001 fe43 	bl	801ae90 <RegionUS915TxConfig>
 801920a:	4603      	mov	r3, r0
 801920c:	e000      	b.n	8019210 <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801920e:	2300      	movs	r3, #0
        }
    }
}
 8019210:	4618      	mov	r0, r3
 8019212:	3710      	adds	r7, #16
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}

08019218 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b086      	sub	sp, #24
 801921c:	af02      	add	r7, sp, #8
 801921e:	60b9      	str	r1, [r7, #8]
 8019220:	607a      	str	r2, [r7, #4]
 8019222:	603b      	str	r3, [r7, #0]
 8019224:	4603      	mov	r3, r0
 8019226:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019228:	7bfb      	ldrb	r3, [r7, #15]
 801922a:	2b08      	cmp	r3, #8
 801922c:	d109      	bne.n	8019242 <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801922e:	69fb      	ldr	r3, [r7, #28]
 8019230:	9300      	str	r3, [sp, #0]
 8019232:	69bb      	ldr	r3, [r7, #24]
 8019234:	683a      	ldr	r2, [r7, #0]
 8019236:	6879      	ldr	r1, [r7, #4]
 8019238:	68b8      	ldr	r0, [r7, #8]
 801923a:	f001 fed3 	bl	801afe4 <RegionUS915LinkAdrReq>
 801923e:	4603      	mov	r3, r0
 8019240:	e000      	b.n	8019244 <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8019242:	2300      	movs	r3, #0
        }
    }
}
 8019244:	4618      	mov	r0, r3
 8019246:	3710      	adds	r7, #16
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}

0801924c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b082      	sub	sp, #8
 8019250:	af00      	add	r7, sp, #0
 8019252:	4603      	mov	r3, r0
 8019254:	6039      	str	r1, [r7, #0]
 8019256:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019258:	79fb      	ldrb	r3, [r7, #7]
 801925a:	2b08      	cmp	r3, #8
 801925c:	d104      	bne.n	8019268 <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801925e:	6838      	ldr	r0, [r7, #0]
 8019260:	f002 f8da 	bl	801b418 <RegionUS915RxParamSetupReq>
 8019264:	4603      	mov	r3, r0
 8019266:	e000      	b.n	801926a <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8019268:	2300      	movs	r3, #0
        }
    }
}
 801926a:	4618      	mov	r0, r3
 801926c:	3708      	adds	r7, #8
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}

08019272 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8019272:	b580      	push	{r7, lr}
 8019274:	b082      	sub	sp, #8
 8019276:	af00      	add	r7, sp, #0
 8019278:	4603      	mov	r3, r0
 801927a:	6039      	str	r1, [r7, #0]
 801927c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801927e:	79fb      	ldrb	r3, [r7, #7]
 8019280:	2b08      	cmp	r3, #8
 8019282:	d104      	bne.n	801928e <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8019284:	6838      	ldr	r0, [r7, #0]
 8019286:	f002 f913 	bl	801b4b0 <RegionUS915NewChannelReq>
 801928a:	4603      	mov	r3, r0
 801928c:	e000      	b.n	8019290 <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801928e:	2300      	movs	r3, #0
        }
    }
}
 8019290:	4618      	mov	r0, r3
 8019292:	3708      	adds	r7, #8
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}

08019298 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b082      	sub	sp, #8
 801929c:	af00      	add	r7, sp, #0
 801929e:	4603      	mov	r3, r0
 80192a0:	6039      	str	r1, [r7, #0]
 80192a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80192a4:	79fb      	ldrb	r3, [r7, #7]
 80192a6:	2b08      	cmp	r3, #8
 80192a8:	d104      	bne.n	80192b4 <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80192aa:	6838      	ldr	r0, [r7, #0]
 80192ac:	f002 f90b 	bl	801b4c6 <RegionUS915TxParamSetupReq>
 80192b0:	4603      	mov	r3, r0
 80192b2:	e000      	b.n	80192b6 <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80192b4:	2300      	movs	r3, #0
        }
    }
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	3708      	adds	r7, #8
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}

080192be <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80192be:	b580      	push	{r7, lr}
 80192c0:	b082      	sub	sp, #8
 80192c2:	af00      	add	r7, sp, #0
 80192c4:	4603      	mov	r3, r0
 80192c6:	6039      	str	r1, [r7, #0]
 80192c8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80192ca:	79fb      	ldrb	r3, [r7, #7]
 80192cc:	2b08      	cmp	r3, #8
 80192ce:	d104      	bne.n	80192da <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80192d0:	6838      	ldr	r0, [r7, #0]
 80192d2:	f002 f903 	bl	801b4dc <RegionUS915DlChannelReq>
 80192d6:	4603      	mov	r3, r0
 80192d8:	e000      	b.n	80192dc <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80192da:	2300      	movs	r3, #0
        }
    }
}
 80192dc:	4618      	mov	r0, r3
 80192de:	3708      	adds	r7, #8
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}

080192e4 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b082      	sub	sp, #8
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	4603      	mov	r3, r0
 80192ec:	71fb      	strb	r3, [r7, #7]
 80192ee:	460b      	mov	r3, r1
 80192f0:	71bb      	strb	r3, [r7, #6]
 80192f2:	4613      	mov	r3, r2
 80192f4:	717b      	strb	r3, [r7, #5]
    switch( region )
 80192f6:	79fb      	ldrb	r3, [r7, #7]
 80192f8:	2b08      	cmp	r3, #8
 80192fa:	d108      	bne.n	801930e <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 80192fc:	797a      	ldrb	r2, [r7, #5]
 80192fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019302:	4611      	mov	r1, r2
 8019304:	4618      	mov	r0, r3
 8019306:	f002 f8f5 	bl	801b4f4 <RegionUS915AlternateDr>
 801930a:	4603      	mov	r3, r0
 801930c:	e000      	b.n	8019310 <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801930e:	2300      	movs	r3, #0
        }
    }
}
 8019310:	4618      	mov	r0, r3
 8019312:	3708      	adds	r7, #8
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}

08019318 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b084      	sub	sp, #16
 801931c:	af00      	add	r7, sp, #0
 801931e:	60b9      	str	r1, [r7, #8]
 8019320:	607a      	str	r2, [r7, #4]
 8019322:	603b      	str	r3, [r7, #0]
 8019324:	4603      	mov	r3, r0
 8019326:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019328:	7bfb      	ldrb	r3, [r7, #15]
 801932a:	2b08      	cmp	r3, #8
 801932c:	d107      	bne.n	801933e <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801932e:	69bb      	ldr	r3, [r7, #24]
 8019330:	683a      	ldr	r2, [r7, #0]
 8019332:	6879      	ldr	r1, [r7, #4]
 8019334:	68b8      	ldr	r0, [r7, #8]
 8019336:	f002 f913 	bl	801b560 <RegionUS915NextChannel>
 801933a:	4603      	mov	r3, r0
 801933c:	e000      	b.n	8019340 <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801933e:	2309      	movs	r3, #9
        }
    }
}
 8019340:	4618      	mov	r0, r3
 8019342:	3710      	adds	r7, #16
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019348:	b590      	push	{r4, r7, lr}
 801934a:	b083      	sub	sp, #12
 801934c:	af00      	add	r7, sp, #0
 801934e:	4604      	mov	r4, r0
 8019350:	4608      	mov	r0, r1
 8019352:	4611      	mov	r1, r2
 8019354:	461a      	mov	r2, r3
 8019356:	4623      	mov	r3, r4
 8019358:	71fb      	strb	r3, [r7, #7]
 801935a:	4603      	mov	r3, r0
 801935c:	71bb      	strb	r3, [r7, #6]
 801935e:	460b      	mov	r3, r1
 8019360:	717b      	strb	r3, [r7, #5]
 8019362:	4613      	mov	r3, r2
 8019364:	713b      	strb	r3, [r7, #4]
    switch( region )
 8019366:	79fb      	ldrb	r3, [r7, #7]
 8019368:	2b08      	cmp	r3, #8
 801936a:	d109      	bne.n	8019380 <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 801936c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8019370:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8019374:	79bb      	ldrb	r3, [r7, #6]
 8019376:	4618      	mov	r0, r3
 8019378:	f002 f9e0 	bl	801b73c <RegionUS915ApplyDrOffset>
 801937c:	4603      	mov	r3, r0
 801937e:	e000      	b.n	8019382 <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8019380:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8019382:	4618      	mov	r0, r3
 8019384:	370c      	adds	r7, #12
 8019386:	46bd      	mov	sp, r7
 8019388:	bd90      	pop	{r4, r7, pc}
	...

0801938c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801938c:	b480      	push	{r7}
 801938e:	b083      	sub	sp, #12
 8019390:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8019392:	4b04      	ldr	r3, [pc, #16]	; (80193a4 <RegionGetVersion+0x18>)
 8019394:	607b      	str	r3, [r7, #4]

    return version;
 8019396:	687b      	ldr	r3, [r7, #4]
}
 8019398:	4618      	mov	r0, r3
 801939a:	370c      	adds	r7, #12
 801939c:	46bd      	mov	sp, r7
 801939e:	bc80      	pop	{r7}
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	02010001 	.word	0x02010001

080193a8 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80193a8:	b480      	push	{r7}
 80193aa:	b087      	sub	sp, #28
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	4603      	mov	r3, r0
 80193b0:	60b9      	str	r1, [r7, #8]
 80193b2:	607a      	str	r2, [r7, #4]
 80193b4:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d002      	beq.n	80193c2 <FindAvailable125kHzChannels+0x1a>
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d101      	bne.n	80193c6 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80193c2:	2303      	movs	r3, #3
 80193c4:	e021      	b.n	801940a <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	2200      	movs	r2, #0
 80193ca:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80193cc:	2300      	movs	r3, #0
 80193ce:	75fb      	strb	r3, [r7, #23]
 80193d0:	e017      	b.n	8019402 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80193d2:	89fa      	ldrh	r2, [r7, #14]
 80193d4:	7dfb      	ldrb	r3, [r7, #23]
 80193d6:	fa42 f303 	asr.w	r3, r2, r3
 80193da:	f003 0301 	and.w	r3, r3, #1
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d00c      	beq.n	80193fc <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	781b      	ldrb	r3, [r3, #0]
 80193e6:	461a      	mov	r2, r3
 80193e8:	68bb      	ldr	r3, [r7, #8]
 80193ea:	4413      	add	r3, r2
 80193ec:	7dfa      	ldrb	r2, [r7, #23]
 80193ee:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	3301      	adds	r3, #1
 80193f6:	b2da      	uxtb	r2, r3
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80193fc:	7dfb      	ldrb	r3, [r7, #23]
 80193fe:	3301      	adds	r3, #1
 8019400:	75fb      	strb	r3, [r7, #23]
 8019402:	7dfb      	ldrb	r3, [r7, #23]
 8019404:	2b07      	cmp	r3, #7
 8019406:	d9e4      	bls.n	80193d2 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8019408:	2300      	movs	r3, #0
}
 801940a:	4618      	mov	r0, r3
 801940c:	371c      	adds	r7, #28
 801940e:	46bd      	mov	sp, r7
 8019410:	bc80      	pop	{r7}
 8019412:	4770      	bx	lr

08019414 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8019414:	b590      	push	{r4, r7, lr}
 8019416:	b089      	sub	sp, #36	; 0x24
 8019418:	af00      	add	r7, sp, #0
 801941a:	60f8      	str	r0, [r7, #12]
 801941c:	60b9      	str	r1, [r7, #8]
 801941e:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8019420:	2300      	movs	r3, #0
 8019422:	617b      	str	r3, [r7, #20]
 8019424:	2300      	movs	r3, #0
 8019426:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8019428:	2300      	movs	r3, #0
 801942a:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d005      	beq.n	801943e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8019432:	68bb      	ldr	r3, [r7, #8]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d002      	beq.n	801943e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d101      	bne.n	8019442 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801943e:	2303      	movs	r3, #3
 8019440:	e055      	b.n	80194ee <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8019442:	68bb      	ldr	r3, [r7, #8]
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8019448:	7f7b      	ldrb	r3, [r7, #29]
 801944a:	085b      	lsrs	r3, r3, #1
 801944c:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801944e:	7f7b      	ldrb	r3, [r7, #29]
 8019450:	f003 0301 	and.w	r3, r3, #1
 8019454:	b2db      	uxtb	r3, r3
 8019456:	2b00      	cmp	r3, #0
 8019458:	d107      	bne.n	801946a <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801945a:	7f3b      	ldrb	r3, [r7, #28]
 801945c:	005b      	lsls	r3, r3, #1
 801945e:	68fa      	ldr	r2, [r7, #12]
 8019460:	4413      	add	r3, r2
 8019462:	881b      	ldrh	r3, [r3, #0]
 8019464:	b2db      	uxtb	r3, r3
 8019466:	83fb      	strh	r3, [r7, #30]
 8019468:	e006      	b.n	8019478 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801946a:	7f3b      	ldrb	r3, [r7, #28]
 801946c:	005b      	lsls	r3, r3, #1
 801946e:	68fa      	ldr	r2, [r7, #12]
 8019470:	4413      	add	r3, r2
 8019472:	881b      	ldrh	r3, [r3, #0]
 8019474:	0a1b      	lsrs	r3, r3, #8
 8019476:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8019478:	f107 0213 	add.w	r2, r7, #19
 801947c:	f107 0114 	add.w	r1, r7, #20
 8019480:	8bfb      	ldrh	r3, [r7, #30]
 8019482:	4618      	mov	r0, r3
 8019484:	f7ff ff90 	bl	80193a8 <FindAvailable125kHzChannels>
 8019488:	4603      	mov	r3, r0
 801948a:	2b03      	cmp	r3, #3
 801948c:	d101      	bne.n	8019492 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801948e:	2303      	movs	r3, #3
 8019490:	e02d      	b.n	80194ee <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8019492:	7cfb      	ldrb	r3, [r7, #19]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d011      	beq.n	80194bc <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8019498:	7f7b      	ldrb	r3, [r7, #29]
 801949a:	00db      	lsls	r3, r3, #3
 801949c:	b2dc      	uxtb	r4, r3
 801949e:	7cfb      	ldrb	r3, [r7, #19]
 80194a0:	3b01      	subs	r3, #1
 80194a2:	4619      	mov	r1, r3
 80194a4:	2000      	movs	r0, #0
 80194a6:	f002 f99b 	bl	801b7e0 <randr>
 80194aa:	4603      	mov	r3, r0
 80194ac:	3320      	adds	r3, #32
 80194ae:	443b      	add	r3, r7
 80194b0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80194b4:	4423      	add	r3, r4
 80194b6:	b2da      	uxtb	r2, r3
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80194bc:	7f7b      	ldrb	r3, [r7, #29]
 80194be:	3301      	adds	r3, #1
 80194c0:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80194c2:	7f7b      	ldrb	r3, [r7, #29]
 80194c4:	2b07      	cmp	r3, #7
 80194c6:	d901      	bls.n	80194cc <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80194c8:	2300      	movs	r3, #0
 80194ca:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80194cc:	7cfb      	ldrb	r3, [r7, #19]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d104      	bne.n	80194dc <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80194d2:	68bb      	ldr	r3, [r7, #8]
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	7f7a      	ldrb	r2, [r7, #29]
 80194d8:	429a      	cmp	r2, r3
 80194da:	d1b5      	bne.n	8019448 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80194dc:	7cfb      	ldrb	r3, [r7, #19]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d004      	beq.n	80194ec <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80194e2:	68bb      	ldr	r3, [r7, #8]
 80194e4:	7f7a      	ldrb	r2, [r7, #29]
 80194e6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80194e8:	2300      	movs	r3, #0
 80194ea:	e000      	b.n	80194ee <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80194ec:	2303      	movs	r3, #3
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	3724      	adds	r7, #36	; 0x24
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd90      	pop	{r4, r7, pc}

080194f6 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80194f6:	b480      	push	{r7}
 80194f8:	b085      	sub	sp, #20
 80194fa:	af00      	add	r7, sp, #0
 80194fc:	4603      	mov	r3, r0
 80194fe:	60b9      	str	r1, [r7, #8]
 8019500:	607a      	str	r2, [r7, #4]
 8019502:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8019504:	7bfb      	ldrb	r3, [r7, #15]
 8019506:	687a      	ldr	r2, [r7, #4]
 8019508:	fb03 f202 	mul.w	r2, r3, r2
 801950c:	68bb      	ldr	r3, [r7, #8]
 801950e:	4413      	add	r3, r2
}
 8019510:	4618      	mov	r0, r3
 8019512:	3714      	adds	r7, #20
 8019514:	46bd      	mov	sp, r7
 8019516:	bc80      	pop	{r7}
 8019518:	4770      	bx	lr

0801951a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801951a:	b480      	push	{r7}
 801951c:	b087      	sub	sp, #28
 801951e:	af00      	add	r7, sp, #0
 8019520:	60f8      	str	r0, [r7, #12]
 8019522:	4608      	mov	r0, r1
 8019524:	4639      	mov	r1, r7
 8019526:	e881 000c 	stmia.w	r1, {r2, r3}
 801952a:	4603      	mov	r3, r0
 801952c:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	881b      	ldrh	r3, [r3, #0]
 8019532:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8019534:	7afb      	ldrb	r3, [r7, #11]
 8019536:	f083 0301 	eor.w	r3, r3, #1
 801953a:	b2db      	uxtb	r3, r3
 801953c:	2b00      	cmp	r3, #0
 801953e:	d01b      	beq.n	8019578 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019540:	f242 7310 	movw	r3, #10000	; 0x2710
 8019544:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801954c:	d202      	bcs.n	8019554 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801954e:	2364      	movs	r3, #100	; 0x64
 8019550:	82bb      	strh	r3, [r7, #20]
 8019552:	e00b      	b.n	801956c <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801955a:	4293      	cmp	r3, r2
 801955c:	d803      	bhi.n	8019566 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801955e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019562:	82bb      	strh	r3, [r7, #20]
 8019564:	e002      	b.n	801956c <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019566:	f242 7310 	movw	r3, #10000	; 0x2710
 801956a:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801956c:	8aba      	ldrh	r2, [r7, #20]
 801956e:	8afb      	ldrh	r3, [r7, #22]
 8019570:	4293      	cmp	r3, r2
 8019572:	bf38      	it	cc
 8019574:	4613      	movcc	r3, r2
 8019576:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8019578:	8afb      	ldrh	r3, [r7, #22]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d101      	bne.n	8019582 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801957e:	2301      	movs	r3, #1
 8019580:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8019582:	8afb      	ldrh	r3, [r7, #22]
}
 8019584:	4618      	mov	r0, r3
 8019586:	371c      	adds	r7, #28
 8019588:	46bd      	mov	sp, r7
 801958a:	bc80      	pop	{r7}
 801958c:	4770      	bx	lr
	...

08019590 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b08e      	sub	sp, #56	; 0x38
 8019594:	af02      	add	r7, sp, #8
 8019596:	60f8      	str	r0, [r7, #12]
 8019598:	4608      	mov	r0, r1
 801959a:	4639      	mov	r1, r7
 801959c:	e881 000c 	stmia.w	r1, {r2, r3}
 80195a0:	4603      	mov	r3, r0
 80195a2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	881b      	ldrh	r3, [r3, #0]
 80195a8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80195aa:	4b4b      	ldr	r3, [pc, #300]	; (80196d8 <SetMaxTimeCredits+0x148>)
 80195ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80195ae:	463b      	mov	r3, r7
 80195b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80195b4:	f005 fdb6 	bl	801f124 <SysTimeToMs>
 80195b8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80195ba:	f107 0314 	add.w	r3, r7, #20
 80195be:	2200      	movs	r2, #0
 80195c0:	601a      	str	r2, [r3, #0]
 80195c2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80195c4:	7af9      	ldrb	r1, [r7, #11]
 80195c6:	463b      	mov	r3, r7
 80195c8:	cb0c      	ldmia	r3, {r2, r3}
 80195ca:	68f8      	ldr	r0, [r7, #12]
 80195cc:	f7ff ffa5 	bl	801951a <GetDutyCycle>
 80195d0:	4603      	mov	r3, r0
 80195d2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80195d4:	7afb      	ldrb	r3, [r7, #11]
 80195d6:	f083 0301 	eor.w	r3, r3, #1
 80195da:	b2db      	uxtb	r3, r3
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d062      	beq.n	80196a6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80195e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80195e2:	2b64      	cmp	r3, #100	; 0x64
 80195e4:	d105      	bne.n	80195f2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80195e6:	4b3c      	ldr	r3, [pc, #240]	; (80196d8 <SetMaxTimeCredits+0x148>)
 80195e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195ee:	609a      	str	r2, [r3, #8]
 80195f0:	e00b      	b.n	801960a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80195f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80195f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80195f8:	d105      	bne.n	8019606 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80195fa:	4b38      	ldr	r3, [pc, #224]	; (80196dc <SetMaxTimeCredits+0x14c>)
 80195fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019602:	609a      	str	r2, [r3, #8]
 8019604:	e001      	b.n	801960a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8019606:	4b36      	ldr	r3, [pc, #216]	; (80196e0 <SetMaxTimeCredits+0x150>)
 8019608:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	689a      	ldr	r2, [r3, #8]
 801960e:	f107 031c 	add.w	r3, r7, #28
 8019612:	4611      	mov	r1, r2
 8019614:	4618      	mov	r0, r3
 8019616:	f005 fdad 	bl	801f174 <SysTimeFromMs>
 801961a:	f107 0014 	add.w	r0, r7, #20
 801961e:	6a3b      	ldr	r3, [r7, #32]
 8019620:	9300      	str	r3, [sp, #0]
 8019622:	69fb      	ldr	r3, [r7, #28]
 8019624:	463a      	mov	r2, r7
 8019626:	ca06      	ldmia	r2, {r1, r2}
 8019628:	f005 fcbd 	bl	801efa6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801962c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8019630:	f083 0301 	eor.w	r3, r3, #1
 8019634:	b2db      	uxtb	r3, r3
 8019636:	2b00      	cmp	r3, #0
 8019638:	d006      	beq.n	8019648 <SetMaxTimeCredits+0xb8>
 801963a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801963e:	f083 0301 	eor.w	r3, r3, #1
 8019642:	b2db      	uxtb	r3, r3
 8019644:	2b00      	cmp	r3, #0
 8019646:	d108      	bne.n	801965a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801964c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801964e:	429a      	cmp	r2, r3
 8019650:	d103      	bne.n	801965a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8019652:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8019654:	4a23      	ldr	r2, [pc, #140]	; (80196e4 <SetMaxTimeCredits+0x154>)
 8019656:	4293      	cmp	r3, r2
 8019658:	d92f      	bls.n	80196ba <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801965e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019660:	683b      	ldr	r3, [r7, #0]
 8019662:	4a21      	ldr	r2, [pc, #132]	; (80196e8 <SetMaxTimeCredits+0x158>)
 8019664:	4293      	cmp	r3, r2
 8019666:	d928      	bls.n	80196ba <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8019668:	683b      	ldr	r3, [r7, #0]
 801966a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801966e:	3b30      	subs	r3, #48	; 0x30
 8019670:	4a1e      	ldr	r2, [pc, #120]	; (80196ec <SetMaxTimeCredits+0x15c>)
 8019672:	fba2 2303 	umull	r2, r3, r2, r3
 8019676:	0c1b      	lsrs	r3, r3, #16
 8019678:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	4a1c      	ldr	r2, [pc, #112]	; (80196f0 <SetMaxTimeCredits+0x160>)
 801967e:	fb02 f303 	mul.w	r3, r2, r3
 8019682:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8019684:	697b      	ldr	r3, [r7, #20]
 8019686:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801968a:	3330      	adds	r3, #48	; 0x30
 801968c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801968e:	2300      	movs	r3, #0
 8019690:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8019692:	f107 0314 	add.w	r3, r7, #20
 8019696:	e893 0003 	ldmia.w	r3, {r0, r1}
 801969a:	f005 fd43 	bl	801f124 <SysTimeToMs>
 801969e:	4602      	mov	r2, r0
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	609a      	str	r2, [r3, #8]
 80196a4:	e009      	b.n	80196ba <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80196a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80196aa:	f083 0301 	eor.w	r3, r3, #1
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d002      	beq.n	80196ba <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196b8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	685b      	ldr	r3, [r3, #4]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d102      	bne.n	80196c8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196c6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196cc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80196ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80196d0:	4618      	mov	r0, r3
 80196d2:	3730      	adds	r7, #48	; 0x30
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}
 80196d8:	001b7740 	.word	0x001b7740
 80196dc:	0112a880 	.word	0x0112a880
 80196e0:	02932e00 	.word	0x02932e00
 80196e4:	0001517f 	.word	0x0001517f
 80196e8:	0001ec2f 	.word	0x0001ec2f
 80196ec:	c22e4507 	.word	0xc22e4507
 80196f0:	00015180 	.word	0x00015180

080196f4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b086      	sub	sp, #24
 80196f8:	af02      	add	r7, sp, #8
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	4608      	mov	r0, r1
 80196fe:	4611      	mov	r1, r2
 8019700:	461a      	mov	r2, r3
 8019702:	4603      	mov	r3, r0
 8019704:	70fb      	strb	r3, [r7, #3]
 8019706:	460b      	mov	r3, r1
 8019708:	70bb      	strb	r3, [r7, #2]
 801970a:	4613      	mov	r3, r2
 801970c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801970e:	78f9      	ldrb	r1, [r7, #3]
 8019710:	787b      	ldrb	r3, [r7, #1]
 8019712:	9301      	str	r3, [sp, #4]
 8019714:	78bb      	ldrb	r3, [r7, #2]
 8019716:	9300      	str	r3, [sp, #0]
 8019718:	f107 0318 	add.w	r3, r7, #24
 801971c:	cb0c      	ldmia	r3, {r2, r3}
 801971e:	6878      	ldr	r0, [r7, #4]
 8019720:	f7ff ff36 	bl	8019590 <SetMaxTimeCredits>
 8019724:	4603      	mov	r3, r0
 8019726:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8019728:	78fb      	ldrb	r3, [r7, #3]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d00a      	beq.n	8019744 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	4618      	mov	r0, r3
 8019734:	f006 fb52 	bl	801fddc <UTIL_TIMER_GetElapsedTime>
 8019738:	4602      	mov	r2, r0
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	441a      	add	r2, r3
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	68da      	ldr	r2, [r3, #12]
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	691b      	ldr	r3, [r3, #16]
 801974c:	429a      	cmp	r2, r3
 801974e:	d903      	bls.n	8019758 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	691a      	ldr	r2, [r3, #16]
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6a3a      	ldr	r2, [r7, #32]
 801975c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801975e:	89fb      	ldrh	r3, [r7, #14]
}
 8019760:	4618      	mov	r0, r3
 8019762:	3710      	adds	r7, #16
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}

08019768 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8019768:	b480      	push	{r7}
 801976a:	b085      	sub	sp, #20
 801976c:	af00      	add	r7, sp, #0
 801976e:	4603      	mov	r3, r0
 8019770:	460a      	mov	r2, r1
 8019772:	80fb      	strh	r3, [r7, #6]
 8019774:	4613      	mov	r3, r2
 8019776:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8019778:	2300      	movs	r3, #0
 801977a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801977c:	2300      	movs	r3, #0
 801977e:	73bb      	strb	r3, [r7, #14]
 8019780:	e011      	b.n	80197a6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8019782:	88fa      	ldrh	r2, [r7, #6]
 8019784:	7bbb      	ldrb	r3, [r7, #14]
 8019786:	2101      	movs	r1, #1
 8019788:	fa01 f303 	lsl.w	r3, r1, r3
 801978c:	401a      	ands	r2, r3
 801978e:	7bbb      	ldrb	r3, [r7, #14]
 8019790:	2101      	movs	r1, #1
 8019792:	fa01 f303 	lsl.w	r3, r1, r3
 8019796:	429a      	cmp	r2, r3
 8019798:	d102      	bne.n	80197a0 <CountChannels+0x38>
        {
            nbActiveBits++;
 801979a:	7bfb      	ldrb	r3, [r7, #15]
 801979c:	3301      	adds	r3, #1
 801979e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80197a0:	7bbb      	ldrb	r3, [r7, #14]
 80197a2:	3301      	adds	r3, #1
 80197a4:	73bb      	strb	r3, [r7, #14]
 80197a6:	7bba      	ldrb	r2, [r7, #14]
 80197a8:	797b      	ldrb	r3, [r7, #5]
 80197aa:	429a      	cmp	r2, r3
 80197ac:	d3e9      	bcc.n	8019782 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80197ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	3714      	adds	r7, #20
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bc80      	pop	{r7}
 80197b8:	4770      	bx	lr

080197ba <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80197ba:	b580      	push	{r7, lr}
 80197bc:	b084      	sub	sp, #16
 80197be:	af00      	add	r7, sp, #0
 80197c0:	6039      	str	r1, [r7, #0]
 80197c2:	4611      	mov	r1, r2
 80197c4:	461a      	mov	r2, r3
 80197c6:	4603      	mov	r3, r0
 80197c8:	71fb      	strb	r3, [r7, #7]
 80197ca:	460b      	mov	r3, r1
 80197cc:	71bb      	strb	r3, [r7, #6]
 80197ce:	4613      	mov	r3, r2
 80197d0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80197d2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80197d6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80197da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80197de:	4618      	mov	r0, r3
 80197e0:	f000 f85d 	bl	801989e <RegionCommonValueInRange>
 80197e4:	4603      	mov	r3, r0
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d101      	bne.n	80197ee <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80197ea:	2300      	movs	r3, #0
 80197ec:	e053      	b.n	8019896 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80197ee:	2300      	movs	r3, #0
 80197f0:	73fb      	strb	r3, [r7, #15]
 80197f2:	2300      	movs	r3, #0
 80197f4:	73bb      	strb	r3, [r7, #14]
 80197f6:	e049      	b.n	801988c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80197f8:	2300      	movs	r3, #0
 80197fa:	737b      	strb	r3, [r7, #13]
 80197fc:	e03d      	b.n	801987a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80197fe:	7bbb      	ldrb	r3, [r7, #14]
 8019800:	005b      	lsls	r3, r3, #1
 8019802:	683a      	ldr	r2, [r7, #0]
 8019804:	4413      	add	r3, r2
 8019806:	881b      	ldrh	r3, [r3, #0]
 8019808:	461a      	mov	r2, r3
 801980a:	7b7b      	ldrb	r3, [r7, #13]
 801980c:	fa42 f303 	asr.w	r3, r2, r3
 8019810:	f003 0301 	and.w	r3, r3, #1
 8019814:	2b00      	cmp	r3, #0
 8019816:	d02d      	beq.n	8019874 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8019818:	7bfa      	ldrb	r2, [r7, #15]
 801981a:	7b7b      	ldrb	r3, [r7, #13]
 801981c:	4413      	add	r3, r2
 801981e:	461a      	mov	r2, r3
 8019820:	4613      	mov	r3, r2
 8019822:	005b      	lsls	r3, r3, #1
 8019824:	4413      	add	r3, r2
 8019826:	009b      	lsls	r3, r3, #2
 8019828:	461a      	mov	r2, r3
 801982a:	69fb      	ldr	r3, [r7, #28]
 801982c:	4413      	add	r3, r2
 801982e:	7a1b      	ldrb	r3, [r3, #8]
 8019830:	f343 0303 	sbfx	r3, r3, #0, #4
 8019834:	b25b      	sxtb	r3, r3
 8019836:	f003 030f 	and.w	r3, r3, #15
 801983a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801983c:	7bfa      	ldrb	r2, [r7, #15]
 801983e:	7b7b      	ldrb	r3, [r7, #13]
 8019840:	4413      	add	r3, r2
 8019842:	461a      	mov	r2, r3
 8019844:	4613      	mov	r3, r2
 8019846:	005b      	lsls	r3, r3, #1
 8019848:	4413      	add	r3, r2
 801984a:	009b      	lsls	r3, r3, #2
 801984c:	461a      	mov	r2, r3
 801984e:	69fb      	ldr	r3, [r7, #28]
 8019850:	4413      	add	r3, r2
 8019852:	7a1b      	ldrb	r3, [r3, #8]
 8019854:	f343 1303 	sbfx	r3, r3, #4, #4
 8019858:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801985a:	f003 030f 	and.w	r3, r3, #15
 801985e:	b25a      	sxtb	r2, r3
 8019860:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019864:	4618      	mov	r0, r3
 8019866:	f000 f81a 	bl	801989e <RegionCommonValueInRange>
 801986a:	4603      	mov	r3, r0
 801986c:	2b01      	cmp	r3, #1
 801986e:	d101      	bne.n	8019874 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8019870:	2301      	movs	r3, #1
 8019872:	e010      	b.n	8019896 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8019874:	7b7b      	ldrb	r3, [r7, #13]
 8019876:	3301      	adds	r3, #1
 8019878:	737b      	strb	r3, [r7, #13]
 801987a:	7b7b      	ldrb	r3, [r7, #13]
 801987c:	2b0f      	cmp	r3, #15
 801987e:	d9be      	bls.n	80197fe <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8019880:	7bfb      	ldrb	r3, [r7, #15]
 8019882:	3310      	adds	r3, #16
 8019884:	73fb      	strb	r3, [r7, #15]
 8019886:	7bbb      	ldrb	r3, [r7, #14]
 8019888:	3301      	adds	r3, #1
 801988a:	73bb      	strb	r3, [r7, #14]
 801988c:	7bfa      	ldrb	r2, [r7, #15]
 801988e:	79fb      	ldrb	r3, [r7, #7]
 8019890:	429a      	cmp	r2, r3
 8019892:	d3b1      	bcc.n	80197f8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8019894:	2300      	movs	r3, #0
}
 8019896:	4618      	mov	r0, r3
 8019898:	3710      	adds	r7, #16
 801989a:	46bd      	mov	sp, r7
 801989c:	bd80      	pop	{r7, pc}

0801989e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801989e:	b480      	push	{r7}
 80198a0:	b083      	sub	sp, #12
 80198a2:	af00      	add	r7, sp, #0
 80198a4:	4603      	mov	r3, r0
 80198a6:	71fb      	strb	r3, [r7, #7]
 80198a8:	460b      	mov	r3, r1
 80198aa:	71bb      	strb	r3, [r7, #6]
 80198ac:	4613      	mov	r3, r2
 80198ae:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80198b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80198b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80198b8:	429a      	cmp	r2, r3
 80198ba:	db07      	blt.n	80198cc <RegionCommonValueInRange+0x2e>
 80198bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80198c0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80198c4:	429a      	cmp	r2, r3
 80198c6:	dc01      	bgt.n	80198cc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80198c8:	2301      	movs	r3, #1
 80198ca:	e000      	b.n	80198ce <RegionCommonValueInRange+0x30>
    }
    return 0;
 80198cc:	2300      	movs	r3, #0
}
 80198ce:	4618      	mov	r0, r3
 80198d0:	370c      	adds	r7, #12
 80198d2:	46bd      	mov	sp, r7
 80198d4:	bc80      	pop	{r7}
 80198d6:	4770      	bx	lr

080198d8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80198d8:	b480      	push	{r7}
 80198da:	b085      	sub	sp, #20
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
 80198e0:	460b      	mov	r3, r1
 80198e2:	70fb      	strb	r3, [r7, #3]
 80198e4:	4613      	mov	r3, r2
 80198e6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80198e8:	78fb      	ldrb	r3, [r7, #3]
 80198ea:	091b      	lsrs	r3, r3, #4
 80198ec:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80198ee:	78bb      	ldrb	r3, [r7, #2]
 80198f0:	091b      	lsrs	r3, r3, #4
 80198f2:	b2db      	uxtb	r3, r3
 80198f4:	7bfa      	ldrb	r2, [r7, #15]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d803      	bhi.n	8019902 <RegionCommonChanDisable+0x2a>
 80198fa:	78fa      	ldrb	r2, [r7, #3]
 80198fc:	78bb      	ldrb	r3, [r7, #2]
 80198fe:	429a      	cmp	r2, r3
 8019900:	d301      	bcc.n	8019906 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8019902:	2300      	movs	r3, #0
 8019904:	e017      	b.n	8019936 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8019906:	7bfb      	ldrb	r3, [r7, #15]
 8019908:	005b      	lsls	r3, r3, #1
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	4413      	add	r3, r2
 801990e:	881b      	ldrh	r3, [r3, #0]
 8019910:	b21a      	sxth	r2, r3
 8019912:	78fb      	ldrb	r3, [r7, #3]
 8019914:	f003 030f 	and.w	r3, r3, #15
 8019918:	2101      	movs	r1, #1
 801991a:	fa01 f303 	lsl.w	r3, r1, r3
 801991e:	b21b      	sxth	r3, r3
 8019920:	43db      	mvns	r3, r3
 8019922:	b21b      	sxth	r3, r3
 8019924:	4013      	ands	r3, r2
 8019926:	b219      	sxth	r1, r3
 8019928:	7bfb      	ldrb	r3, [r7, #15]
 801992a:	005b      	lsls	r3, r3, #1
 801992c:	687a      	ldr	r2, [r7, #4]
 801992e:	4413      	add	r3, r2
 8019930:	b28a      	uxth	r2, r1
 8019932:	801a      	strh	r2, [r3, #0]

    return true;
 8019934:	2301      	movs	r3, #1
}
 8019936:	4618      	mov	r0, r3
 8019938:	3714      	adds	r7, #20
 801993a:	46bd      	mov	sp, r7
 801993c:	bc80      	pop	{r7}
 801993e:	4770      	bx	lr

08019940 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b084      	sub	sp, #16
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
 8019948:	460b      	mov	r3, r1
 801994a:	70fb      	strb	r3, [r7, #3]
 801994c:	4613      	mov	r3, r2
 801994e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8019950:	2300      	movs	r3, #0
 8019952:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d101      	bne.n	801995e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801995a:	2300      	movs	r3, #0
 801995c:	e018      	b.n	8019990 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801995e:	78fb      	ldrb	r3, [r7, #3]
 8019960:	73bb      	strb	r3, [r7, #14]
 8019962:	e010      	b.n	8019986 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8019964:	7bbb      	ldrb	r3, [r7, #14]
 8019966:	005b      	lsls	r3, r3, #1
 8019968:	687a      	ldr	r2, [r7, #4]
 801996a:	4413      	add	r3, r2
 801996c:	881b      	ldrh	r3, [r3, #0]
 801996e:	2110      	movs	r1, #16
 8019970:	4618      	mov	r0, r3
 8019972:	f7ff fef9 	bl	8019768 <CountChannels>
 8019976:	4603      	mov	r3, r0
 8019978:	461a      	mov	r2, r3
 801997a:	7bfb      	ldrb	r3, [r7, #15]
 801997c:	4413      	add	r3, r2
 801997e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8019980:	7bbb      	ldrb	r3, [r7, #14]
 8019982:	3301      	adds	r3, #1
 8019984:	73bb      	strb	r3, [r7, #14]
 8019986:	7bba      	ldrb	r2, [r7, #14]
 8019988:	78bb      	ldrb	r3, [r7, #2]
 801998a:	429a      	cmp	r2, r3
 801998c:	d3ea      	bcc.n	8019964 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019990:	4618      	mov	r0, r3
 8019992:	3710      	adds	r7, #16
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}

08019998 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8019998:	b480      	push	{r7}
 801999a:	b087      	sub	sp, #28
 801999c:	af00      	add	r7, sp, #0
 801999e:	60f8      	str	r0, [r7, #12]
 80199a0:	60b9      	str	r1, [r7, #8]
 80199a2:	4613      	mov	r3, r2
 80199a4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d016      	beq.n	80199da <RegionCommonChanMaskCopy+0x42>
 80199ac:	68bb      	ldr	r3, [r7, #8]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d013      	beq.n	80199da <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80199b2:	2300      	movs	r3, #0
 80199b4:	75fb      	strb	r3, [r7, #23]
 80199b6:	e00c      	b.n	80199d2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80199b8:	7dfb      	ldrb	r3, [r7, #23]
 80199ba:	005b      	lsls	r3, r3, #1
 80199bc:	68ba      	ldr	r2, [r7, #8]
 80199be:	441a      	add	r2, r3
 80199c0:	7dfb      	ldrb	r3, [r7, #23]
 80199c2:	005b      	lsls	r3, r3, #1
 80199c4:	68f9      	ldr	r1, [r7, #12]
 80199c6:	440b      	add	r3, r1
 80199c8:	8812      	ldrh	r2, [r2, #0]
 80199ca:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80199cc:	7dfb      	ldrb	r3, [r7, #23]
 80199ce:	3301      	adds	r3, #1
 80199d0:	75fb      	strb	r3, [r7, #23]
 80199d2:	7dfa      	ldrb	r2, [r7, #23]
 80199d4:	79fb      	ldrb	r3, [r7, #7]
 80199d6:	429a      	cmp	r2, r3
 80199d8:	d3ee      	bcc.n	80199b8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80199da:	bf00      	nop
 80199dc:	371c      	adds	r7, #28
 80199de:	46bd      	mov	sp, r7
 80199e0:	bc80      	pop	{r7}
 80199e2:	4770      	bx	lr

080199e4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80199e4:	b082      	sub	sp, #8
 80199e6:	b580      	push	{r7, lr}
 80199e8:	b086      	sub	sp, #24
 80199ea:	af00      	add	r7, sp, #0
 80199ec:	60f8      	str	r0, [r7, #12]
 80199ee:	60b9      	str	r1, [r7, #8]
 80199f0:	627b      	str	r3, [r7, #36]	; 0x24
 80199f2:	4613      	mov	r3, r2
 80199f4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80199f6:	79f9      	ldrb	r1, [r7, #7]
 80199f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80199fc:	cb0c      	ldmia	r3, {r2, r3}
 80199fe:	68f8      	ldr	r0, [r7, #12]
 8019a00:	f7ff fd8b 	bl	801951a <GetDutyCycle>
 8019a04:	4603      	mov	r3, r0
 8019a06:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	68da      	ldr	r2, [r3, #12]
 8019a0c:	8afb      	ldrh	r3, [r7, #22]
 8019a0e:	68b9      	ldr	r1, [r7, #8]
 8019a10:	fb01 f303 	mul.w	r3, r1, r3
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d909      	bls.n	8019a2c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	68da      	ldr	r2, [r3, #12]
 8019a1c:	8afb      	ldrh	r3, [r7, #22]
 8019a1e:	68b9      	ldr	r1, [r7, #8]
 8019a20:	fb01 f303 	mul.w	r3, r1, r3
 8019a24:	1ad2      	subs	r2, r2, r3
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8019a2a:	e002      	b.n	8019a32 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	2200      	movs	r2, #0
 8019a30:	60da      	str	r2, [r3, #12]
}
 8019a32:	bf00      	nop
 8019a34:	3718      	adds	r7, #24
 8019a36:	46bd      	mov	sp, r7
 8019a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019a3c:	b002      	add	sp, #8
 8019a3e:	4770      	bx	lr

08019a40 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8019a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a42:	b08f      	sub	sp, #60	; 0x3c
 8019a44:	af04      	add	r7, sp, #16
 8019a46:	6039      	str	r1, [r7, #0]
 8019a48:	4611      	mov	r1, r2
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	71fb      	strb	r3, [r7, #7]
 8019a50:	460b      	mov	r3, r1
 8019a52:	71bb      	strb	r3, [r7, #6]
 8019a54:	4613      	mov	r3, r2
 8019a56:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8019a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a5c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8019a5e:	f006 f9ab 	bl	801fdb8 <UTIL_TIMER_GetCurrentTime>
 8019a62:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8019a64:	2300      	movs	r3, #0
 8019a66:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8019a68:	2301      	movs	r3, #1
 8019a6a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8019a72:	2300      	movs	r3, #0
 8019a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019a78:	e0ba      	b.n	8019bf0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8019a7a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019a7e:	4613      	mov	r3, r2
 8019a80:	005b      	lsls	r3, r3, #1
 8019a82:	4413      	add	r3, r2
 8019a84:	00db      	lsls	r3, r3, #3
 8019a86:	461a      	mov	r2, r3
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	189c      	adds	r4, r3, r2
 8019a8c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8019a90:	797a      	ldrb	r2, [r7, #5]
 8019a92:	79fd      	ldrb	r5, [r7, #7]
 8019a94:	69fb      	ldr	r3, [r7, #28]
 8019a96:	9302      	str	r3, [sp, #8]
 8019a98:	46ec      	mov	ip, sp
 8019a9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019aa2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019aa6:	4633      	mov	r3, r6
 8019aa8:	4629      	mov	r1, r5
 8019aaa:	4620      	mov	r0, r4
 8019aac:	f7ff fe22 	bl	80196f4 <UpdateTimeCredits>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8019ab4:	8afa      	ldrh	r2, [r7, #22]
 8019ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ab8:	fb02 f303 	mul.w	r3, r2, r3
 8019abc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8019abe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019ac2:	4613      	mov	r3, r2
 8019ac4:	005b      	lsls	r3, r3, #1
 8019ac6:	4413      	add	r3, r2
 8019ac8:	00db      	lsls	r3, r3, #3
 8019aca:	461a      	mov	r2, r3
 8019acc:	683b      	ldr	r3, [r7, #0]
 8019ace:	4413      	add	r3, r2
 8019ad0:	68db      	ldr	r3, [r3, #12]
 8019ad2:	69ba      	ldr	r2, [r7, #24]
 8019ad4:	429a      	cmp	r2, r3
 8019ad6:	d908      	bls.n	8019aea <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8019ad8:	797b      	ldrb	r3, [r7, #5]
 8019ada:	f083 0301 	eor.w	r3, r3, #1
 8019ade:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d013      	beq.n	8019b0c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8019ae4:	79fb      	ldrb	r3, [r7, #7]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d010      	beq.n	8019b0c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8019aea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019aee:	4613      	mov	r3, r2
 8019af0:	005b      	lsls	r3, r3, #1
 8019af2:	4413      	add	r3, r2
 8019af4:	00db      	lsls	r3, r3, #3
 8019af6:	461a      	mov	r2, r3
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	4413      	add	r3, r2
 8019afc:	2201      	movs	r2, #1
 8019afe:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8019b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b04:	3301      	adds	r3, #1
 8019b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8019b0a:	e06c      	b.n	8019be6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8019b0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019b10:	4613      	mov	r3, r2
 8019b12:	005b      	lsls	r3, r3, #1
 8019b14:	4413      	add	r3, r2
 8019b16:	00db      	lsls	r3, r3, #3
 8019b18:	461a      	mov	r2, r3
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	4413      	add	r3, r2
 8019b1e:	2200      	movs	r2, #0
 8019b20:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8019b22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019b26:	4613      	mov	r3, r2
 8019b28:	005b      	lsls	r3, r3, #1
 8019b2a:	4413      	add	r3, r2
 8019b2c:	00db      	lsls	r3, r3, #3
 8019b2e:	461a      	mov	r2, r3
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	4413      	add	r3, r2
 8019b34:	691b      	ldr	r3, [r3, #16]
 8019b36:	69ba      	ldr	r2, [r7, #24]
 8019b38:	429a      	cmp	r2, r3
 8019b3a:	d815      	bhi.n	8019b68 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8019b3c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019b40:	4613      	mov	r3, r2
 8019b42:	005b      	lsls	r3, r3, #1
 8019b44:	4413      	add	r3, r2
 8019b46:	00db      	lsls	r3, r3, #3
 8019b48:	461a      	mov	r2, r3
 8019b4a:	683b      	ldr	r3, [r7, #0]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	68db      	ldr	r3, [r3, #12]
 8019b50:	69ba      	ldr	r2, [r7, #24]
 8019b52:	1ad3      	subs	r3, r2, r3
 8019b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b56:	4293      	cmp	r3, r2
 8019b58:	bf28      	it	cs
 8019b5a:	4613      	movcs	r3, r2
 8019b5c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8019b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b62:	3301      	adds	r3, #1
 8019b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8019b68:	79fb      	ldrb	r3, [r7, #7]
 8019b6a:	f083 0301 	eor.w	r3, r3, #1
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d038      	beq.n	8019be6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8019b74:	2300      	movs	r3, #0
 8019b76:	60fb      	str	r3, [r7, #12]
 8019b78:	2300      	movs	r3, #0
 8019b7a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8019b7c:	8afb      	ldrh	r3, [r7, #22]
 8019b7e:	2b64      	cmp	r3, #100	; 0x64
 8019b80:	d103      	bne.n	8019b8a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8019b82:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8019b86:	60fb      	str	r3, [r7, #12]
 8019b88:	e009      	b.n	8019b9e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8019b8a:	8afb      	ldrh	r3, [r7, #22]
 8019b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019b90:	d103      	bne.n	8019b9a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8019b92:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8019b96:	60fb      	str	r3, [r7, #12]
 8019b98:	e001      	b.n	8019b9e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8019b9a:	4b1e      	ldr	r3, [pc, #120]	; (8019c14 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8019b9c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ba0:	4a1c      	ldr	r2, [pc, #112]	; (8019c14 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8019ba2:	4293      	cmp	r3, r2
 8019ba4:	d90e      	bls.n	8019bc4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8019ba6:	68fa      	ldr	r2, [r7, #12]
 8019ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019baa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8019bae:	3b30      	subs	r3, #48	; 0x30
 8019bb0:	4919      	ldr	r1, [pc, #100]	; (8019c18 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8019bb2:	fba1 1303 	umull	r1, r3, r1, r3
 8019bb6:	0c1b      	lsrs	r3, r3, #16
 8019bb8:	3301      	adds	r3, #1
 8019bba:	4918      	ldr	r1, [pc, #96]	; (8019c1c <RegionCommonUpdateBandTimeOff+0x1dc>)
 8019bbc:	fb01 f303 	mul.w	r3, r1, r3
 8019bc0:	4413      	add	r3, r2
 8019bc2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8019bc4:	f107 000c 	add.w	r0, r7, #12
 8019bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bca:	9300      	str	r3, [sp, #0]
 8019bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bce:	f107 020c 	add.w	r2, r7, #12
 8019bd2:	ca06      	ldmia	r2, {r1, r2}
 8019bd4:	f005 f9e7 	bl	801efa6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8019bd8:	f107 030c 	add.w	r3, r7, #12
 8019bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019be0:	f005 faa0 	bl	801f124 <SysTimeToMs>
 8019be4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8019be6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019bea:	3301      	adds	r3, #1
 8019bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019bf0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019bf4:	79bb      	ldrb	r3, [r7, #6]
 8019bf6:	429a      	cmp	r2, r3
 8019bf8:	f4ff af3f 	bcc.w	8019a7a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8019bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d102      	bne.n	8019c0a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8019c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c08:	e000      	b.n	8019c0c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8019c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	372c      	adds	r7, #44	; 0x2c
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c14:	0001ec30 	.word	0x0001ec30
 8019c18:	c22e4507 	.word	0xc22e4507
 8019c1c:	00015180 	.word	0x00015180

08019c20 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8019c20:	b480      	push	{r7}
 8019c22:	b085      	sub	sp, #20
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
 8019c28:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	781b      	ldrb	r3, [r3, #0]
 8019c32:	2b03      	cmp	r3, #3
 8019c34:	d13f      	bne.n	8019cb6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	3301      	adds	r3, #1
 8019c3a:	781b      	ldrb	r3, [r3, #0]
 8019c3c:	b25a      	sxtb	r2, r3
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8019c42:	683b      	ldr	r3, [r7, #0]
 8019c44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019c48:	f003 030f 	and.w	r3, r3, #15
 8019c4c:	b25a      	sxtb	r2, r3
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8019c52:	683b      	ldr	r3, [r7, #0]
 8019c54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019c58:	b2db      	uxtb	r3, r3
 8019c5a:	091b      	lsrs	r3, r3, #4
 8019c5c:	b2db      	uxtb	r3, r3
 8019c5e:	b25a      	sxtb	r2, r3
 8019c60:	683b      	ldr	r3, [r7, #0]
 8019c62:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	3302      	adds	r3, #2
 8019c68:	781b      	ldrb	r3, [r3, #0]
 8019c6a:	b29a      	uxth	r2, r3
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8019c70:	683b      	ldr	r3, [r7, #0]
 8019c72:	889b      	ldrh	r3, [r3, #4]
 8019c74:	b21a      	sxth	r2, r3
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	3303      	adds	r3, #3
 8019c7a:	781b      	ldrb	r3, [r3, #0]
 8019c7c:	021b      	lsls	r3, r3, #8
 8019c7e:	b21b      	sxth	r3, r3
 8019c80:	4313      	orrs	r3, r2
 8019c82:	b21b      	sxth	r3, r3
 8019c84:	b29a      	uxth	r2, r3
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	791a      	ldrb	r2, [r3, #4]
 8019c8e:	683b      	ldr	r3, [r7, #0]
 8019c90:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8019c92:	683b      	ldr	r3, [r7, #0]
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	091b      	lsrs	r3, r3, #4
 8019c98:	b2db      	uxtb	r3, r3
 8019c9a:	f003 0307 	and.w	r3, r3, #7
 8019c9e:	b2da      	uxtb	r2, r3
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	781b      	ldrb	r3, [r3, #0]
 8019ca8:	f003 030f 	and.w	r3, r3, #15
 8019cac:	b2da      	uxtb	r2, r3
 8019cae:	683b      	ldr	r3, [r7, #0]
 8019cb0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8019cb2:	2305      	movs	r3, #5
 8019cb4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8019cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cb8:	4618      	mov	r0, r3
 8019cba:	3714      	adds	r7, #20
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	bc80      	pop	{r7}
 8019cc0:	4770      	bx	lr

08019cc2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8019cc2:	b5b0      	push	{r4, r5, r7, lr}
 8019cc4:	b088      	sub	sp, #32
 8019cc6:	af02      	add	r7, sp, #8
 8019cc8:	60f8      	str	r0, [r7, #12]
 8019cca:	60b9      	str	r1, [r7, #8]
 8019ccc:	607a      	str	r2, [r7, #4]
 8019cce:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	791b      	ldrb	r3, [r3, #4]
 8019cd4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	799b      	ldrb	r3, [r3, #6]
 8019cda:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	79db      	ldrb	r3, [r3, #7]
 8019ce0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	7a1b      	ldrb	r3, [r3, #8]
 8019ce6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	795b      	ldrb	r3, [r3, #5]
 8019cec:	f083 0301 	eor.w	r3, r3, #1
 8019cf0:	b2db      	uxtb	r3, r3
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d008      	beq.n	8019d08 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	7adb      	ldrb	r3, [r3, #11]
 8019cfa:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	7a5b      	ldrb	r3, [r3, #9]
 8019d00:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	7a9b      	ldrb	r3, [r3, #10]
 8019d06:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8019d08:	7dfb      	ldrb	r3, [r7, #23]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d04a      	beq.n	8019da4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8019d0e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8019d12:	2b0f      	cmp	r3, #15
 8019d14:	d103      	bne.n	8019d1e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	7a5b      	ldrb	r3, [r3, #9]
 8019d1a:	75bb      	strb	r3, [r7, #22]
 8019d1c:	e01d      	b.n	8019d5a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	7b18      	ldrb	r0, [r3, #12]
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	6919      	ldr	r1, [r3, #16]
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8019d32:	68fa      	ldr	r2, [r7, #12]
 8019d34:	6992      	ldr	r2, [r2, #24]
 8019d36:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8019d3a:	9201      	str	r2, [sp, #4]
 8019d3c:	9300      	str	r3, [sp, #0]
 8019d3e:	462b      	mov	r3, r5
 8019d40:	4622      	mov	r2, r4
 8019d42:	f7ff fd3a 	bl	80197ba <RegionCommonChanVerifyDr>
 8019d46:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8019d48:	f083 0301 	eor.w	r3, r3, #1
 8019d4c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d003      	beq.n	8019d5a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8019d52:	7dfb      	ldrb	r3, [r7, #23]
 8019d54:	f023 0302 	bic.w	r3, r3, #2
 8019d58:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8019d5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8019d5e:	2b0f      	cmp	r3, #15
 8019d60:	d103      	bne.n	8019d6a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	7a9b      	ldrb	r3, [r3, #10]
 8019d66:	757b      	strb	r3, [r7, #21]
 8019d68:	e01c      	b.n	8019da4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8019d76:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7ff fd8f 	bl	801989e <RegionCommonValueInRange>
 8019d80:	4603      	mov	r3, r0
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d10e      	bne.n	8019da4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8019d8c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8019d90:	429a      	cmp	r2, r3
 8019d92:	da03      	bge.n	8019d9c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	7f5b      	ldrb	r3, [r3, #29]
 8019d98:	757b      	strb	r3, [r7, #21]
 8019d9a:	e003      	b.n	8019da4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8019d9c:	7dfb      	ldrb	r3, [r7, #23]
 8019d9e:	f023 0304 	bic.w	r3, r3, #4
 8019da2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8019da4:	7dfb      	ldrb	r3, [r7, #23]
 8019da6:	2b07      	cmp	r3, #7
 8019da8:	d105      	bne.n	8019db6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8019daa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d101      	bne.n	8019db6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8019db2:	2301      	movs	r3, #1
 8019db4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	7dba      	ldrb	r2, [r7, #22]
 8019dba:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	7d7a      	ldrb	r2, [r7, #21]
 8019dc0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8019dc2:	7d3a      	ldrb	r2, [r7, #20]
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	701a      	strb	r2, [r3, #0]

    return status;
 8019dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	3718      	adds	r7, #24
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019dd4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8019dd4:	b480      	push	{r7}
 8019dd6:	b083      	sub	sp, #12
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	4603      	mov	r3, r0
 8019ddc:	6039      	str	r1, [r7, #0]
 8019dde:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8019de0:	79fb      	ldrb	r3, [r7, #7]
 8019de2:	4a06      	ldr	r2, [pc, #24]	; (8019dfc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8019de4:	fa02 f303 	lsl.w	r3, r2, r3
 8019de8:	461a      	mov	r2, r3
 8019dea:	683b      	ldr	r3, [r7, #0]
 8019dec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	370c      	adds	r7, #12
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bc80      	pop	{r7}
 8019df8:	4770      	bx	lr
 8019dfa:	bf00      	nop
 8019dfc:	000f4240 	.word	0x000f4240

08019e00 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8019e00:	b480      	push	{r7}
 8019e02:	b085      	sub	sp, #20
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	60f8      	str	r0, [r7, #12]
 8019e08:	607a      	str	r2, [r7, #4]
 8019e0a:	603b      	str	r3, [r7, #0]
 8019e0c:	460b      	mov	r3, r1
 8019e0e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8019e10:	7afa      	ldrb	r2, [r7, #11]
 8019e12:	7afb      	ldrb	r3, [r7, #11]
 8019e14:	3b04      	subs	r3, #4
 8019e16:	4619      	mov	r1, r3
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	fb03 f101 	mul.w	r1, r3, r1
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e24:	fb00 f303 	mul.w	r3, r0, r3
 8019e28:	440b      	add	r3, r1
 8019e2a:	005b      	lsls	r3, r3, #1
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d013      	beq.n	8019e58 <RegionCommonComputeRxWindowParameters+0x58>
 8019e30:	7afb      	ldrb	r3, [r7, #11]
 8019e32:	3b04      	subs	r3, #4
 8019e34:	4619      	mov	r1, r3
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	fb03 f101 	mul.w	r1, r3, r1
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e42:	fb00 f303 	mul.w	r3, r0, r3
 8019e46:	440b      	add	r3, r1
 8019e48:	0059      	lsls	r1, r3, #1
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	440b      	add	r3, r1
 8019e4e:	1e59      	subs	r1, r3, #1
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8019e56:	e00f      	b.n	8019e78 <RegionCommonComputeRxWindowParameters+0x78>
 8019e58:	7afb      	ldrb	r3, [r7, #11]
 8019e5a:	3b04      	subs	r3, #4
 8019e5c:	4619      	mov	r1, r3
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	fb03 f101 	mul.w	r1, r3, r1
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e6a:	fb00 f303 	mul.w	r3, r0, r3
 8019e6e:	440b      	add	r3, r1
 8019e70:	0059      	lsls	r1, r3, #1
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	bf38      	it	cc
 8019e7c:	461a      	movcc	r2, r3
 8019e7e:	69bb      	ldr	r3, [r7, #24]
 8019e80:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	009b      	lsls	r3, r3, #2
 8019e86:	4619      	mov	r1, r3
 8019e88:	69bb      	ldr	r3, [r7, #24]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	68fa      	ldr	r2, [r7, #12]
 8019e8e:	fb02 f303 	mul.w	r3, r2, r3
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d007      	beq.n	8019ea6 <RegionCommonComputeRxWindowParameters+0xa6>
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	68fa      	ldr	r2, [r7, #12]
 8019e9c:	fb02 f303 	mul.w	r3, r2, r3
 8019ea0:	3301      	adds	r3, #1
 8019ea2:	085b      	lsrs	r3, r3, #1
 8019ea4:	e005      	b.n	8019eb2 <RegionCommonComputeRxWindowParameters+0xb2>
 8019ea6:	69bb      	ldr	r3, [r7, #24]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	68fa      	ldr	r2, [r7, #12]
 8019eac:	fb02 f303 	mul.w	r3, r2, r3
 8019eb0:	085b      	lsrs	r3, r3, #1
 8019eb2:	1acb      	subs	r3, r1, r3
 8019eb4:	683a      	ldr	r2, [r7, #0]
 8019eb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019eba:	fb01 f202 	mul.w	r2, r1, r2
 8019ebe:	1a9b      	subs	r3, r3, r2
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	dd27      	ble.n	8019f14 <RegionCommonComputeRxWindowParameters+0x114>
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	009b      	lsls	r3, r3, #2
 8019ec8:	4619      	mov	r1, r3
 8019eca:	69bb      	ldr	r3, [r7, #24]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	68fa      	ldr	r2, [r7, #12]
 8019ed0:	fb02 f303 	mul.w	r3, r2, r3
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d007      	beq.n	8019ee8 <RegionCommonComputeRxWindowParameters+0xe8>
 8019ed8:	69bb      	ldr	r3, [r7, #24]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	68fa      	ldr	r2, [r7, #12]
 8019ede:	fb02 f303 	mul.w	r3, r2, r3
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	085b      	lsrs	r3, r3, #1
 8019ee6:	e005      	b.n	8019ef4 <RegionCommonComputeRxWindowParameters+0xf4>
 8019ee8:	69bb      	ldr	r3, [r7, #24]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	68fa      	ldr	r2, [r7, #12]
 8019eee:	fb02 f303 	mul.w	r3, r2, r3
 8019ef2:	085b      	lsrs	r3, r3, #1
 8019ef4:	1acb      	subs	r3, r1, r3
 8019ef6:	683a      	ldr	r2, [r7, #0]
 8019ef8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019efc:	fb01 f202 	mul.w	r2, r1, r2
 8019f00:	1a9b      	subs	r3, r3, r2
 8019f02:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8019f06:	4a19      	ldr	r2, [pc, #100]	; (8019f6c <RegionCommonComputeRxWindowParameters+0x16c>)
 8019f08:	fb82 1203 	smull	r1, r2, r2, r3
 8019f0c:	1192      	asrs	r2, r2, #6
 8019f0e:	17db      	asrs	r3, r3, #31
 8019f10:	1ad3      	subs	r3, r2, r3
 8019f12:	e024      	b.n	8019f5e <RegionCommonComputeRxWindowParameters+0x15e>
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	009b      	lsls	r3, r3, #2
 8019f18:	4619      	mov	r1, r3
 8019f1a:	69bb      	ldr	r3, [r7, #24]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	68fa      	ldr	r2, [r7, #12]
 8019f20:	fb02 f303 	mul.w	r3, r2, r3
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d007      	beq.n	8019f38 <RegionCommonComputeRxWindowParameters+0x138>
 8019f28:	69bb      	ldr	r3, [r7, #24]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	68fa      	ldr	r2, [r7, #12]
 8019f2e:	fb02 f303 	mul.w	r3, r2, r3
 8019f32:	3301      	adds	r3, #1
 8019f34:	085b      	lsrs	r3, r3, #1
 8019f36:	e005      	b.n	8019f44 <RegionCommonComputeRxWindowParameters+0x144>
 8019f38:	69bb      	ldr	r3, [r7, #24]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	68fa      	ldr	r2, [r7, #12]
 8019f3e:	fb02 f303 	mul.w	r3, r2, r3
 8019f42:	085b      	lsrs	r3, r3, #1
 8019f44:	1acb      	subs	r3, r1, r3
 8019f46:	683a      	ldr	r2, [r7, #0]
 8019f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019f4c:	fb01 f202 	mul.w	r2, r1, r2
 8019f50:	1a9b      	subs	r3, r3, r2
 8019f52:	4a06      	ldr	r2, [pc, #24]	; (8019f6c <RegionCommonComputeRxWindowParameters+0x16c>)
 8019f54:	fb82 1203 	smull	r1, r2, r2, r3
 8019f58:	1192      	asrs	r2, r2, #6
 8019f5a:	17db      	asrs	r3, r3, #31
 8019f5c:	1ad3      	subs	r3, r2, r3
 8019f5e:	69fa      	ldr	r2, [r7, #28]
 8019f60:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8019f62:	bf00      	nop
 8019f64:	3714      	adds	r7, #20
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bc80      	pop	{r7}
 8019f6a:	4770      	bx	lr
 8019f6c:	10624dd3 	.word	0x10624dd3

08019f70 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b086      	sub	sp, #24
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	4603      	mov	r3, r0
 8019f78:	60b9      	str	r1, [r7, #8]
 8019f7a:	607a      	str	r2, [r7, #4]
 8019f7c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8019f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f86:	005b      	lsls	r3, r3, #1
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f7e6 fed5 	bl	8000d38 <__aeabi_ui2f>
 8019f8e:	4603      	mov	r3, r0
 8019f90:	4619      	mov	r1, r3
 8019f92:	68b8      	ldr	r0, [r7, #8]
 8019f94:	f7e6 fe1e 	bl	8000bd4 <__aeabi_fsub>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	6879      	ldr	r1, [r7, #4]
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7e6 fe19 	bl	8000bd4 <__aeabi_fsub>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7e6 faa7 	bl	80004f8 <__aeabi_f2d>
 8019faa:	4602      	mov	r2, r0
 8019fac:	460b      	mov	r3, r1
 8019fae:	4610      	mov	r0, r2
 8019fb0:	4619      	mov	r1, r3
 8019fb2:	f006 fa69 	bl	8020488 <floor>
 8019fb6:	4602      	mov	r2, r0
 8019fb8:	460b      	mov	r3, r1
 8019fba:	4610      	mov	r0, r2
 8019fbc:	4619      	mov	r1, r3
 8019fbe:	f7e6 fd8d 	bl	8000adc <__aeabi_d2iz>
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8019fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019fca:	4618      	mov	r0, r3
 8019fcc:	3718      	adds	r7, #24
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bd80      	pop	{r7, pc}

08019fd2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8019fd2:	b590      	push	{r4, r7, lr}
 8019fd4:	b087      	sub	sp, #28
 8019fd6:	af00      	add	r7, sp, #0
 8019fd8:	60f8      	str	r0, [r7, #12]
 8019fda:	60b9      	str	r1, [r7, #8]
 8019fdc:	607a      	str	r2, [r7, #4]
 8019fde:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8019fe8:	2300      	movs	r3, #0
 8019fea:	757b      	strb	r3, [r7, #21]
 8019fec:	2300      	movs	r3, #0
 8019fee:	753b      	strb	r3, [r7, #20]
 8019ff0:	e09c      	b.n	801a12c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	74fb      	strb	r3, [r7, #19]
 8019ff6:	e08f      	b.n	801a118 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	685a      	ldr	r2, [r3, #4]
 8019ffc:	7d3b      	ldrb	r3, [r7, #20]
 8019ffe:	005b      	lsls	r3, r3, #1
 801a000:	4413      	add	r3, r2
 801a002:	881b      	ldrh	r3, [r3, #0]
 801a004:	461a      	mov	r2, r3
 801a006:	7cfb      	ldrb	r3, [r7, #19]
 801a008:	fa42 f303 	asr.w	r3, r2, r3
 801a00c:	f003 0301 	and.w	r3, r3, #1
 801a010:	2b00      	cmp	r3, #0
 801a012:	d07e      	beq.n	801a112 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	689a      	ldr	r2, [r3, #8]
 801a018:	7d79      	ldrb	r1, [r7, #21]
 801a01a:	7cfb      	ldrb	r3, [r7, #19]
 801a01c:	440b      	add	r3, r1
 801a01e:	4619      	mov	r1, r3
 801a020:	460b      	mov	r3, r1
 801a022:	005b      	lsls	r3, r3, #1
 801a024:	440b      	add	r3, r1
 801a026:	009b      	lsls	r3, r3, #2
 801a028:	4413      	add	r3, r2
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d06b      	beq.n	801a108 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	781b      	ldrb	r3, [r3, #0]
 801a034:	f083 0301 	eor.w	r3, r3, #1
 801a038:	b2db      	uxtb	r3, r3
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d011      	beq.n	801a062 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a042:	2b00      	cmp	r3, #0
 801a044:	d00d      	beq.n	801a062 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	695a      	ldr	r2, [r3, #20]
 801a04a:	7d3b      	ldrb	r3, [r7, #20]
 801a04c:	005b      	lsls	r3, r3, #1
 801a04e:	4413      	add	r3, r2
 801a050:	881b      	ldrh	r3, [r3, #0]
 801a052:	461a      	mov	r2, r3
 801a054:	7cfb      	ldrb	r3, [r7, #19]
 801a056:	fa42 f303 	asr.w	r3, r2, r3
 801a05a:	f003 0301 	and.w	r3, r3, #1
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d054      	beq.n	801a10c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	785b      	ldrb	r3, [r3, #1]
 801a066:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	689a      	ldr	r2, [r3, #8]
 801a06c:	7d79      	ldrb	r1, [r7, #21]
 801a06e:	7cfb      	ldrb	r3, [r7, #19]
 801a070:	440b      	add	r3, r1
 801a072:	4619      	mov	r1, r3
 801a074:	460b      	mov	r3, r1
 801a076:	005b      	lsls	r3, r3, #1
 801a078:	440b      	add	r3, r1
 801a07a:	009b      	lsls	r3, r3, #2
 801a07c:	4413      	add	r3, r2
 801a07e:	7a1b      	ldrb	r3, [r3, #8]
 801a080:	f343 0303 	sbfx	r3, r3, #0, #4
 801a084:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a086:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	689a      	ldr	r2, [r3, #8]
 801a08c:	7d79      	ldrb	r1, [r7, #21]
 801a08e:	7cfb      	ldrb	r3, [r7, #19]
 801a090:	440b      	add	r3, r1
 801a092:	4619      	mov	r1, r3
 801a094:	460b      	mov	r3, r1
 801a096:	005b      	lsls	r3, r3, #1
 801a098:	440b      	add	r3, r1
 801a09a:	009b      	lsls	r3, r3, #2
 801a09c:	4413      	add	r3, r2
 801a09e:	7a1b      	ldrb	r3, [r3, #8]
 801a0a0:	f343 1303 	sbfx	r3, r3, #4, #4
 801a0a4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	4621      	mov	r1, r4
 801a0aa:	f7ff fbf8 	bl	801989e <RegionCommonValueInRange>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d02d      	beq.n	801a110 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	68da      	ldr	r2, [r3, #12]
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	6899      	ldr	r1, [r3, #8]
 801a0bc:	7d78      	ldrb	r0, [r7, #21]
 801a0be:	7cfb      	ldrb	r3, [r7, #19]
 801a0c0:	4403      	add	r3, r0
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	005b      	lsls	r3, r3, #1
 801a0c8:	4403      	add	r3, r0
 801a0ca:	009b      	lsls	r3, r3, #2
 801a0cc:	440b      	add	r3, r1
 801a0ce:	7a5b      	ldrb	r3, [r3, #9]
 801a0d0:	4619      	mov	r1, r3
 801a0d2:	460b      	mov	r3, r1
 801a0d4:	005b      	lsls	r3, r3, #1
 801a0d6:	440b      	add	r3, r1
 801a0d8:	00db      	lsls	r3, r3, #3
 801a0da:	4413      	add	r3, r2
 801a0dc:	7d1b      	ldrb	r3, [r3, #20]
 801a0de:	f083 0301 	eor.w	r3, r3, #1
 801a0e2:	b2db      	uxtb	r3, r3
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d003      	beq.n	801a0f0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801a0e8:	7dbb      	ldrb	r3, [r7, #22]
 801a0ea:	3301      	adds	r3, #1
 801a0ec:	75bb      	strb	r3, [r7, #22]
                    continue;
 801a0ee:	e010      	b.n	801a112 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801a0f0:	7dfb      	ldrb	r3, [r7, #23]
 801a0f2:	1c5a      	adds	r2, r3, #1
 801a0f4:	75fa      	strb	r2, [r7, #23]
 801a0f6:	461a      	mov	r2, r3
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	4413      	add	r3, r2
 801a0fc:	7d79      	ldrb	r1, [r7, #21]
 801a0fe:	7cfa      	ldrb	r2, [r7, #19]
 801a100:	440a      	add	r2, r1
 801a102:	b2d2      	uxtb	r2, r2
 801a104:	701a      	strb	r2, [r3, #0]
 801a106:	e004      	b.n	801a112 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801a108:	bf00      	nop
 801a10a:	e002      	b.n	801a112 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801a10c:	bf00      	nop
 801a10e:	e000      	b.n	801a112 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801a110:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801a112:	7cfb      	ldrb	r3, [r7, #19]
 801a114:	3301      	adds	r3, #1
 801a116:	74fb      	strb	r3, [r7, #19]
 801a118:	7cfb      	ldrb	r3, [r7, #19]
 801a11a:	2b0f      	cmp	r3, #15
 801a11c:	f67f af6c 	bls.w	8019ff8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801a120:	7d7b      	ldrb	r3, [r7, #21]
 801a122:	3310      	adds	r3, #16
 801a124:	757b      	strb	r3, [r7, #21]
 801a126:	7d3b      	ldrb	r3, [r7, #20]
 801a128:	3301      	adds	r3, #1
 801a12a:	753b      	strb	r3, [r7, #20]
 801a12c:	7d7b      	ldrb	r3, [r7, #21]
 801a12e:	b29a      	uxth	r2, r3
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	8a1b      	ldrh	r3, [r3, #16]
 801a134:	429a      	cmp	r2, r3
 801a136:	f4ff af5c 	bcc.w	8019ff2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	7dfa      	ldrb	r2, [r7, #23]
 801a13e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801a140:	683b      	ldr	r3, [r7, #0]
 801a142:	7dba      	ldrb	r2, [r7, #22]
 801a144:	701a      	strb	r2, [r3, #0]
}
 801a146:	bf00      	nop
 801a148:	371c      	adds	r7, #28
 801a14a:	46bd      	mov	sp, r7
 801a14c:	bd90      	pop	{r4, r7, pc}

0801a14e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801a14e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a150:	b08b      	sub	sp, #44	; 0x2c
 801a152:	af04      	add	r7, sp, #16
 801a154:	60f8      	str	r0, [r7, #12]
 801a156:	60b9      	str	r1, [r7, #8]
 801a158:	607a      	str	r2, [r7, #4]
 801a15a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	685b      	ldr	r3, [r3, #4]
 801a160:	4618      	mov	r0, r3
 801a162:	f005 fe3b 	bl	801fddc <UTIL_TIMER_GetElapsedTime>
 801a166:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	681a      	ldr	r2, [r3, #0]
 801a16c:	697b      	ldr	r3, [r7, #20]
 801a16e:	1ad2      	subs	r2, r2, r3
 801a170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a172:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a176:	2201      	movs	r2, #1
 801a178:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	2200      	movs	r2, #0
 801a17e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	685b      	ldr	r3, [r3, #4]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d004      	beq.n	801a192 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801a18c:	697a      	ldr	r2, [r7, #20]
 801a18e:	429a      	cmp	r2, r3
 801a190:	d32b      	bcc.n	801a1ea <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801a192:	68bb      	ldr	r3, [r7, #8]
 801a194:	2200      	movs	r2, #0
 801a196:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	69db      	ldr	r3, [r3, #28]
 801a19c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801a1a2:	68dd      	ldr	r5, [r3, #12]
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	7a5e      	ldrb	r6, [r3, #9]
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	f893 c008 	ldrb.w	ip, [r3, #8]
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	7d1b      	ldrb	r3, [r3, #20]
 801a1b2:	68fa      	ldr	r2, [r7, #12]
 801a1b4:	6992      	ldr	r2, [r2, #24]
 801a1b6:	9203      	str	r2, [sp, #12]
 801a1b8:	68fa      	ldr	r2, [r7, #12]
 801a1ba:	f10d 0e04 	add.w	lr, sp, #4
 801a1be:	320c      	adds	r2, #12
 801a1c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a1c4:	e88e 0003 	stmia.w	lr, {r0, r1}
 801a1c8:	9300      	str	r3, [sp, #0]
 801a1ca:	4663      	mov	r3, ip
 801a1cc:	4632      	mov	r2, r6
 801a1ce:	4629      	mov	r1, r5
 801a1d0:	4620      	mov	r0, r4
 801a1d2:	f7ff fc35 	bl	8019a40 <RegionCommonUpdateBandTimeOff>
 801a1d6:	4602      	mov	r2, r0
 801a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1da:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	69d8      	ldr	r0, [r3, #28]
 801a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e2:	683a      	ldr	r2, [r7, #0]
 801a1e4:	6879      	ldr	r1, [r7, #4]
 801a1e6:	f7ff fef4 	bl	8019fd2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d004      	beq.n	801a1fc <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	e006      	b.n	801a20a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1fe:	781b      	ldrb	r3, [r3, #0]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d001      	beq.n	801a208 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801a204:	230b      	movs	r3, #11
 801a206:	e000      	b.n	801a20a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801a208:	230c      	movs	r3, #12
    }
}
 801a20a:	4618      	mov	r0, r3
 801a20c:	371c      	adds	r7, #28
 801a20e:	46bd      	mov	sp, r7
 801a210:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a212 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801a212:	b5b0      	push	{r4, r5, r7, lr}
 801a214:	b086      	sub	sp, #24
 801a216:	af02      	add	r7, sp, #8
 801a218:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	781b      	ldrb	r3, [r3, #0]
 801a21e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	f993 2000 	ldrsb.w	r2, [r3]
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a22c:	429a      	cmp	r2, r3
 801a22e:	d103      	bne.n	801a238 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a236:	e026      	b.n	801a286 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801a238:	7bfb      	ldrb	r3, [r7, #15]
 801a23a:	3b01      	subs	r3, #1
 801a23c:	b2db      	uxtb	r3, r3
 801a23e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a246:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a24a:	429a      	cmp	r2, r3
 801a24c:	d019      	beq.n	801a282 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	78d8      	ldrb	r0, [r3, #3]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	6859      	ldr	r1, [r3, #4]
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a262:	687a      	ldr	r2, [r7, #4]
 801a264:	6892      	ldr	r2, [r2, #8]
 801a266:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801a26a:	9201      	str	r2, [sp, #4]
 801a26c:	9300      	str	r3, [sp, #0]
 801a26e:	462b      	mov	r3, r5
 801a270:	4622      	mov	r2, r4
 801a272:	f7ff faa2 	bl	80197ba <RegionCommonChanVerifyDr>
 801a276:	4603      	mov	r3, r0
 801a278:	f083 0301 	eor.w	r3, r3, #1
 801a27c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d1da      	bne.n	801a238 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801a282:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801a286:	4618      	mov	r0, r3
 801a288:	3710      	adds	r7, #16
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bdb0      	pop	{r4, r5, r7, pc}

0801a28e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801a28e:	b480      	push	{r7}
 801a290:	b083      	sub	sp, #12
 801a292:	af00      	add	r7, sp, #0
 801a294:	4603      	mov	r3, r0
 801a296:	460a      	mov	r2, r1
 801a298:	71fb      	strb	r3, [r7, #7]
 801a29a:	4613      	mov	r3, r2
 801a29c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801a29e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a2a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a2a6:	4293      	cmp	r3, r2
 801a2a8:	bfb8      	it	lt
 801a2aa:	4613      	movlt	r3, r2
 801a2ac:	b25b      	sxtb	r3, r3
}
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	370c      	adds	r7, #12
 801a2b2:	46bd      	mov	sp, r7
 801a2b4:	bc80      	pop	{r7}
 801a2b6:	4770      	bx	lr

0801a2b8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801a2b8:	b480      	push	{r7}
 801a2ba:	b083      	sub	sp, #12
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	6078      	str	r0, [r7, #4]
 801a2c0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	009b      	lsls	r3, r3, #2
 801a2c6:	683a      	ldr	r2, [r7, #0]
 801a2c8:	4413      	add	r3, r2
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	4a07      	ldr	r2, [pc, #28]	; (801a2ec <RegionCommonGetBandwidth+0x34>)
 801a2ce:	4293      	cmp	r3, r2
 801a2d0:	d004      	beq.n	801a2dc <RegionCommonGetBandwidth+0x24>
 801a2d2:	4a07      	ldr	r2, [pc, #28]	; (801a2f0 <RegionCommonGetBandwidth+0x38>)
 801a2d4:	4293      	cmp	r3, r2
 801a2d6:	d003      	beq.n	801a2e0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	e002      	b.n	801a2e2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801a2dc:	2301      	movs	r3, #1
 801a2de:	e000      	b.n	801a2e2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801a2e0:	2302      	movs	r3, #2
    }
}
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	370c      	adds	r7, #12
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bc80      	pop	{r7}
 801a2ea:	4770      	bx	lr
 801a2ec:	0003d090 	.word	0x0003d090
 801a2f0:	0007a120 	.word	0x0007a120

0801a2f4 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b086      	sub	sp, #24
 801a2f8:	af04      	add	r7, sp, #16
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	6039      	str	r1, [r7, #0]
 801a2fe:	71fb      	strb	r3, [r7, #7]
 801a300:	4613      	mov	r3, r2
 801a302:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801a304:	79fb      	ldrb	r3, [r7, #7]
 801a306:	2b05      	cmp	r3, #5
 801a308:	d810      	bhi.n	801a32c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801a30a:	79fb      	ldrb	r3, [r7, #7]
 801a30c:	4a0f      	ldr	r2, [pc, #60]	; (801a34c <RegionCommonRxConfigPrint+0x58>)
 801a30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a312:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a316:	9202      	str	r2, [sp, #8]
 801a318:	683a      	ldr	r2, [r7, #0]
 801a31a:	9201      	str	r2, [sp, #4]
 801a31c:	9300      	str	r3, [sp, #0]
 801a31e:	4b0c      	ldr	r3, [pc, #48]	; (801a350 <RegionCommonRxConfigPrint+0x5c>)
 801a320:	2201      	movs	r2, #1
 801a322:	2100      	movs	r1, #0
 801a324:	2002      	movs	r0, #2
 801a326:	f005 fe37 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801a32a:	e00a      	b.n	801a342 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801a32c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a330:	9301      	str	r3, [sp, #4]
 801a332:	683b      	ldr	r3, [r7, #0]
 801a334:	9300      	str	r3, [sp, #0]
 801a336:	4b07      	ldr	r3, [pc, #28]	; (801a354 <RegionCommonRxConfigPrint+0x60>)
 801a338:	2201      	movs	r2, #1
 801a33a:	2100      	movs	r1, #0
 801a33c:	2002      	movs	r0, #2
 801a33e:	f005 fe2b 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 801a342:	bf00      	nop
 801a344:	3708      	adds	r7, #8
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
 801a34a:	bf00      	nop
 801a34c:	20000118 	.word	0x20000118
 801a350:	0802176c 	.word	0x0802176c
 801a354:	0802178c 	.word	0x0802178c

0801a358 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b084      	sub	sp, #16
 801a35c:	af02      	add	r7, sp, #8
 801a35e:	6078      	str	r0, [r7, #4]
 801a360:	460b      	mov	r3, r1
 801a362:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801a364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a368:	9301      	str	r3, [sp, #4]
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	9300      	str	r3, [sp, #0]
 801a36e:	4b05      	ldr	r3, [pc, #20]	; (801a384 <RegionCommonTxConfigPrint+0x2c>)
 801a370:	2201      	movs	r2, #1
 801a372:	2100      	movs	r1, #0
 801a374:	2002      	movs	r0, #2
 801a376:	f005 fe0f 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
}
 801a37a:	bf00      	nop
 801a37c:	3708      	adds	r7, #8
 801a37e:	46bd      	mov	sp, r7
 801a380:	bd80      	pop	{r7, pc}
 801a382:	bf00      	nop
 801a384:	080217a8 	.word	0x080217a8

0801a388 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b084      	sub	sp, #16
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	603b      	str	r3, [r7, #0]
 801a390:	4603      	mov	r3, r0
 801a392:	71fb      	strb	r3, [r7, #7]
 801a394:	460b      	mov	r3, r1
 801a396:	71bb      	strb	r3, [r7, #6]
 801a398:	4613      	mov	r3, r2
 801a39a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801a39c:	79fb      	ldrb	r3, [r7, #7]
 801a39e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801a3a0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a3a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3a8:	4611      	mov	r1, r2
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	f7ff ff6f 	bl	801a28e <RegionCommonLimitTxPower>
 801a3b0:	4603      	mov	r3, r0
 801a3b2:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a3b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a3b8:	2b04      	cmp	r3, #4
 801a3ba:	d106      	bne.n	801a3ca <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a3bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3c0:	2b02      	cmp	r3, #2
 801a3c2:	bfb8      	it	lt
 801a3c4:	2302      	movlt	r3, #2
 801a3c6:	73fb      	strb	r3, [r7, #15]
 801a3c8:	e00d      	b.n	801a3e6 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a3ca:	2204      	movs	r2, #4
 801a3cc:	2100      	movs	r1, #0
 801a3ce:	6838      	ldr	r0, [r7, #0]
 801a3d0:	f7ff fab6 	bl	8019940 <RegionCommonCountChannels>
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	2b31      	cmp	r3, #49	; 0x31
 801a3d8:	d805      	bhi.n	801a3e6 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a3da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3de:	2b05      	cmp	r3, #5
 801a3e0:	bfb8      	it	lt
 801a3e2:	2305      	movlt	r3, #5
 801a3e4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	3710      	adds	r7, #16
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bd80      	pop	{r7, pc}
	...

0801a3f4 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a3f4:	b580      	push	{r7, lr}
 801a3f6:	b082      	sub	sp, #8
 801a3f8:	af00      	add	r7, sp, #0
 801a3fa:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a3fc:	4b18      	ldr	r3, [pc, #96]	; (801a460 <VerifyRfFreq+0x6c>)
 801a3fe:	6a1b      	ldr	r3, [r3, #32]
 801a400:	6878      	ldr	r0, [r7, #4]
 801a402:	4798      	blx	r3
 801a404:	4603      	mov	r3, r0
 801a406:	f083 0301 	eor.w	r3, r3, #1
 801a40a:	b2db      	uxtb	r3, r3
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d001      	beq.n	801a414 <VerifyRfFreq+0x20>
    {
        return false;
 801a410:	2300      	movs	r3, #0
 801a412:	e021      	b.n	801a458 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	4a13      	ldr	r2, [pc, #76]	; (801a464 <VerifyRfFreq+0x70>)
 801a418:	4293      	cmp	r3, r2
 801a41a:	d910      	bls.n	801a43e <VerifyRfFreq+0x4a>
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	4a12      	ldr	r2, [pc, #72]	; (801a468 <VerifyRfFreq+0x74>)
 801a420:	4293      	cmp	r3, r2
 801a422:	d80c      	bhi.n	801a43e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a424:	687a      	ldr	r2, [r7, #4]
 801a426:	4b11      	ldr	r3, [pc, #68]	; (801a46c <VerifyRfFreq+0x78>)
 801a428:	4413      	add	r3, r2
 801a42a:	4a11      	ldr	r2, [pc, #68]	; (801a470 <VerifyRfFreq+0x7c>)
 801a42c:	fba2 1203 	umull	r1, r2, r2, r3
 801a430:	0c92      	lsrs	r2, r2, #18
 801a432:	4910      	ldr	r1, [pc, #64]	; (801a474 <VerifyRfFreq+0x80>)
 801a434:	fb01 f202 	mul.w	r2, r1, r2
 801a438:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a43a:	2a00      	cmp	r2, #0
 801a43c:	d001      	beq.n	801a442 <VerifyRfFreq+0x4e>
    {
        return false;
 801a43e:	2300      	movs	r3, #0
 801a440:	e00a      	b.n	801a458 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	4a0c      	ldr	r2, [pc, #48]	; (801a478 <VerifyRfFreq+0x84>)
 801a446:	4293      	cmp	r3, r2
 801a448:	d903      	bls.n	801a452 <VerifyRfFreq+0x5e>
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	4a06      	ldr	r2, [pc, #24]	; (801a468 <VerifyRfFreq+0x74>)
 801a44e:	4293      	cmp	r3, r2
 801a450:	d901      	bls.n	801a456 <VerifyRfFreq+0x62>
    {
        return false;
 801a452:	2300      	movs	r3, #0
 801a454:	e000      	b.n	801a458 <VerifyRfFreq+0x64>
    }
    return true;
 801a456:	2301      	movs	r3, #1
}
 801a458:	4618      	mov	r0, r3
 801a45a:	3708      	adds	r7, #8
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}
 801a460:	08021df4 	.word	0x08021df4
 801a464:	3708709f 	.word	0x3708709f
 801a468:	374886e0 	.word	0x374886e0
 801a46c:	c8f78f60 	.word	0xc8f78f60
 801a470:	6fd91d85 	.word	0x6fd91d85
 801a474:	000927c0 	.word	0x000927c0
 801a478:	35c8015f 	.word	0x35c8015f

0801a47c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a47c:	b590      	push	{r4, r7, lr}
 801a47e:	b089      	sub	sp, #36	; 0x24
 801a480:	af04      	add	r7, sp, #16
 801a482:	4603      	mov	r3, r0
 801a484:	460a      	mov	r2, r1
 801a486:	71fb      	strb	r3, [r7, #7]
 801a488:	4613      	mov	r3, r2
 801a48a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a48c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a490:	4a0f      	ldr	r2, [pc, #60]	; (801a4d0 <GetTimeOnAir+0x54>)
 801a492:	5cd3      	ldrb	r3, [r2, r3]
 801a494:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a49a:	490e      	ldr	r1, [pc, #56]	; (801a4d4 <GetTimeOnAir+0x58>)
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7ff ff0b 	bl	801a2b8 <RegionCommonGetBandwidth>
 801a4a2:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a4a4:	4b0c      	ldr	r3, [pc, #48]	; (801a4d8 <GetTimeOnAir+0x5c>)
 801a4a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a4a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a4ac:	88bb      	ldrh	r3, [r7, #4]
 801a4ae:	b2db      	uxtb	r3, r3
 801a4b0:	2101      	movs	r1, #1
 801a4b2:	9103      	str	r1, [sp, #12]
 801a4b4:	9302      	str	r3, [sp, #8]
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	9301      	str	r3, [sp, #4]
 801a4ba:	2308      	movs	r3, #8
 801a4bc:	9300      	str	r3, [sp, #0]
 801a4be:	2301      	movs	r3, #1
 801a4c0:	68b9      	ldr	r1, [r7, #8]
 801a4c2:	2001      	movs	r0, #1
 801a4c4:	47a0      	blx	r4
 801a4c6:	4603      	mov	r3, r0
}
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	3714      	adds	r7, #20
 801a4cc:	46bd      	mov	sp, r7
 801a4ce:	bd90      	pop	{r4, r7, pc}
 801a4d0:	08021d70 	.word	0x08021d70
 801a4d4:	08021d80 	.word	0x08021d80
 801a4d8:	08021df4 	.word	0x08021df4

0801a4dc <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	b088      	sub	sp, #32
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	3b01      	subs	r3, #1
 801a4ee:	2b37      	cmp	r3, #55	; 0x37
 801a4f0:	f200 8136 	bhi.w	801a760 <RegionUS915GetPhyParam+0x284>
 801a4f4:	a201      	add	r2, pc, #4	; (adr r2, 801a4fc <RegionUS915GetPhyParam+0x20>)
 801a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4fa:	bf00      	nop
 801a4fc:	0801a5dd 	.word	0x0801a5dd
 801a500:	0801a5e3 	.word	0x0801a5e3
 801a504:	0801a761 	.word	0x0801a761
 801a508:	0801a761 	.word	0x0801a761
 801a50c:	0801a761 	.word	0x0801a761
 801a510:	0801a5e9 	.word	0x0801a5e9
 801a514:	0801a761 	.word	0x0801a761
 801a518:	0801a623 	.word	0x0801a623
 801a51c:	0801a761 	.word	0x0801a761
 801a520:	0801a629 	.word	0x0801a629
 801a524:	0801a62f 	.word	0x0801a62f
 801a528:	0801a635 	.word	0x0801a635
 801a52c:	0801a63b 	.word	0x0801a63b
 801a530:	0801a64b 	.word	0x0801a64b
 801a534:	0801a65b 	.word	0x0801a65b
 801a538:	0801a661 	.word	0x0801a661
 801a53c:	0801a669 	.word	0x0801a669
 801a540:	0801a671 	.word	0x0801a671
 801a544:	0801a679 	.word	0x0801a679
 801a548:	0801a681 	.word	0x0801a681
 801a54c:	0801a689 	.word	0x0801a689
 801a550:	0801a69d 	.word	0x0801a69d
 801a554:	0801a6a3 	.word	0x0801a6a3
 801a558:	0801a6a9 	.word	0x0801a6a9
 801a55c:	0801a6af 	.word	0x0801a6af
 801a560:	0801a6bb 	.word	0x0801a6bb
 801a564:	0801a6c7 	.word	0x0801a6c7
 801a568:	0801a6cd 	.word	0x0801a6cd
 801a56c:	0801a6d5 	.word	0x0801a6d5
 801a570:	0801a6db 	.word	0x0801a6db
 801a574:	0801a6e1 	.word	0x0801a6e1
 801a578:	0801a6e7 	.word	0x0801a6e7
 801a57c:	0801a5ef 	.word	0x0801a5ef
 801a580:	0801a761 	.word	0x0801a761
 801a584:	0801a761 	.word	0x0801a761
 801a588:	0801a761 	.word	0x0801a761
 801a58c:	0801a761 	.word	0x0801a761
 801a590:	0801a761 	.word	0x0801a761
 801a594:	0801a761 	.word	0x0801a761
 801a598:	0801a761 	.word	0x0801a761
 801a59c:	0801a761 	.word	0x0801a761
 801a5a0:	0801a761 	.word	0x0801a761
 801a5a4:	0801a761 	.word	0x0801a761
 801a5a8:	0801a761 	.word	0x0801a761
 801a5ac:	0801a761 	.word	0x0801a761
 801a5b0:	0801a761 	.word	0x0801a761
 801a5b4:	0801a6ef 	.word	0x0801a6ef
 801a5b8:	0801a703 	.word	0x0801a703
 801a5bc:	0801a711 	.word	0x0801a711
 801a5c0:	0801a717 	.word	0x0801a717
 801a5c4:	0801a761 	.word	0x0801a761
 801a5c8:	0801a71d 	.word	0x0801a71d
 801a5cc:	0801a731 	.word	0x0801a731
 801a5d0:	0801a737 	.word	0x0801a737
 801a5d4:	0801a73d 	.word	0x0801a73d
 801a5d8:	0801a74d 	.word	0x0801a74d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a5dc:	2308      	movs	r3, #8
 801a5de:	61bb      	str	r3, [r7, #24]
            break;
 801a5e0:	e0bf      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	61bb      	str	r3, [r7, #24]
            break;
 801a5e6:	e0bc      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	61bb      	str	r3, [r7, #24]
            break;
 801a5ec:	e0b9      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a5f4:	733b      	strb	r3, [r7, #12]
 801a5f6:	2304      	movs	r3, #4
 801a5f8:	737b      	strb	r3, [r7, #13]
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	73bb      	strb	r3, [r7, #14]
 801a5fe:	2348      	movs	r3, #72	; 0x48
 801a600:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a602:	4b5b      	ldr	r3, [pc, #364]	; (801a770 <RegionUS915GetPhyParam+0x294>)
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a60a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a60c:	4b58      	ldr	r3, [pc, #352]	; (801a770 <RegionUS915GetPhyParam+0x294>)
 801a60e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a610:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a612:	f107 030c 	add.w	r3, r7, #12
 801a616:	4618      	mov	r0, r3
 801a618:	f7ff fdfb 	bl	801a212 <RegionCommonGetNextLowerTxDr>
 801a61c:	4603      	mov	r3, r0
 801a61e:	61bb      	str	r3, [r7, #24]
            break;
 801a620:	e09f      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a622:	2300      	movs	r3, #0
 801a624:	61bb      	str	r3, [r7, #24]
            break;
 801a626:	e09c      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a628:	2300      	movs	r3, #0
 801a62a:	61bb      	str	r3, [r7, #24]
            break;
 801a62c:	e099      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a62e:	2340      	movs	r3, #64	; 0x40
 801a630:	61bb      	str	r3, [r7, #24]
            break;
 801a632:	e096      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a634:	2320      	movs	r3, #32
 801a636:	61bb      	str	r3, [r7, #24]
            break;
 801a638:	e093      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a640:	461a      	mov	r2, r3
 801a642:	4b4c      	ldr	r3, [pc, #304]	; (801a774 <RegionUS915GetPhyParam+0x298>)
 801a644:	5c9b      	ldrb	r3, [r3, r2]
 801a646:	61bb      	str	r3, [r7, #24]
            break;
 801a648:	e08b      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a650:	461a      	mov	r2, r3
 801a652:	4b49      	ldr	r3, [pc, #292]	; (801a778 <RegionUS915GetPhyParam+0x29c>)
 801a654:	5c9b      	ldrb	r3, [r3, r2]
 801a656:	61bb      	str	r3, [r7, #24]
            break;
 801a658:	e083      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a65a:	2300      	movs	r3, #0
 801a65c:	61bb      	str	r3, [r7, #24]
            break;
 801a65e:	e080      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a660:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a664:	61bb      	str	r3, [r7, #24]
            break;
 801a666:	e07c      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a66c:	61bb      	str	r3, [r7, #24]
            break;
 801a66e:	e078      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a670:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a674:	61bb      	str	r3, [r7, #24]
            break;
 801a676:	e074      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a678:	f241 3388 	movw	r3, #5000	; 0x1388
 801a67c:	61bb      	str	r3, [r7, #24]
            break;
 801a67e:	e070      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a680:	f241 7370 	movw	r3, #6000	; 0x1770
 801a684:	61bb      	str	r3, [r7, #24]
            break;
 801a686:	e06c      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801a688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a68c:	483b      	ldr	r0, [pc, #236]	; (801a77c <RegionUS915GetPhyParam+0x2a0>)
 801a68e:	f001 f8a7 	bl	801b7e0 <randr>
 801a692:	4603      	mov	r3, r0
 801a694:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a698:	61bb      	str	r3, [r7, #24]
            break;
 801a69a:	e062      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a69c:	2300      	movs	r3, #0
 801a69e:	61bb      	str	r3, [r7, #24]
            break;
 801a6a0:	e05f      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a6a2:	4b37      	ldr	r3, [pc, #220]	; (801a780 <RegionUS915GetPhyParam+0x2a4>)
 801a6a4:	61bb      	str	r3, [r7, #24]
            break;
 801a6a6:	e05c      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a6a8:	2308      	movs	r3, #8
 801a6aa:	61bb      	str	r3, [r7, #24]
            break;
 801a6ac:	e059      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a6ae:	4b30      	ldr	r3, [pc, #192]	; (801a770 <RegionUS915GetPhyParam+0x294>)
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a6b6:	61bb      	str	r3, [r7, #24]
            break;
 801a6b8:	e053      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a6ba:	4b2d      	ldr	r3, [pc, #180]	; (801a770 <RegionUS915GetPhyParam+0x294>)
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a6c2:	61bb      	str	r3, [r7, #24]
            break;
 801a6c4:	e04d      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a6c6:	2348      	movs	r3, #72	; 0x48
 801a6c8:	61bb      	str	r3, [r7, #24]
            break;
 801a6ca:	e04a      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a6cc:	4b28      	ldr	r3, [pc, #160]	; (801a770 <RegionUS915GetPhyParam+0x294>)
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	61bb      	str	r3, [r7, #24]
            break;
 801a6d2:	e046      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	61bb      	str	r3, [r7, #24]
            break;
 801a6d8:	e043      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a6da:	2300      	movs	r3, #0
 801a6dc:	61bb      	str	r3, [r7, #24]
            break;
 801a6de:	e040      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a6e0:	4b28      	ldr	r3, [pc, #160]	; (801a784 <RegionUS915GetPhyParam+0x2a8>)
 801a6e2:	61bb      	str	r3, [r7, #24]
            break;
 801a6e4:	e03d      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a6e6:	f04f 0300 	mov.w	r3, #0
 801a6ea:	61bb      	str	r3, [r7, #24]
            break;
 801a6ec:	e039      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	791b      	ldrb	r3, [r3, #4]
 801a6f2:	4a25      	ldr	r2, [pc, #148]	; (801a788 <RegionUS915GetPhyParam+0x2ac>)
 801a6f4:	4922      	ldr	r1, [pc, #136]	; (801a780 <RegionUS915GetPhyParam+0x2a4>)
 801a6f6:	4618      	mov	r0, r3
 801a6f8:	f7fe fefd 	bl	80194f6 <RegionBaseUSCalcDownlinkFrequency>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a700:	e02f      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a702:	2317      	movs	r3, #23
 801a704:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a706:	2304      	movs	r3, #4
 801a708:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a70a:	2303      	movs	r3, #3
 801a70c:	76bb      	strb	r3, [r7, #26]
            break;
 801a70e:	e028      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a710:	2308      	movs	r3, #8
 801a712:	61bb      	str	r3, [r7, #24]
            break;
 801a714:	e025      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a716:	2308      	movs	r3, #8
 801a718:	61bb      	str	r3, [r7, #24]
            break;
 801a71a:	e022      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	791b      	ldrb	r3, [r3, #4]
 801a720:	4a19      	ldr	r2, [pc, #100]	; (801a788 <RegionUS915GetPhyParam+0x2ac>)
 801a722:	4917      	ldr	r1, [pc, #92]	; (801a780 <RegionUS915GetPhyParam+0x2a4>)
 801a724:	4618      	mov	r0, r3
 801a726:	f7fe fee6 	bl	80194f6 <RegionBaseUSCalcDownlinkFrequency>
 801a72a:	4603      	mov	r3, r0
 801a72c:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a72e:	e018      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a730:	2308      	movs	r3, #8
 801a732:	61bb      	str	r3, [r7, #24]
            break;
 801a734:	e015      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a736:	2308      	movs	r3, #8
 801a738:	61bb      	str	r3, [r7, #24]
            break;
 801a73a:	e012      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a742:	461a      	mov	r2, r3
 801a744:	4b11      	ldr	r3, [pc, #68]	; (801a78c <RegionUS915GetPhyParam+0x2b0>)
 801a746:	5c9b      	ldrb	r3, [r3, r2]
 801a748:	61bb      	str	r3, [r7, #24]
            break;
 801a74a:	e00a      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a752:	490f      	ldr	r1, [pc, #60]	; (801a790 <RegionUS915GetPhyParam+0x2b4>)
 801a754:	4618      	mov	r0, r3
 801a756:	f7ff fdaf 	bl	801a2b8 <RegionCommonGetBandwidth>
 801a75a:	4603      	mov	r3, r0
 801a75c:	61bb      	str	r3, [r7, #24]
            break;
 801a75e:	e000      	b.n	801a762 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801a760:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a762:	69bb      	ldr	r3, [r7, #24]
 801a764:	61fb      	str	r3, [r7, #28]
 801a766:	69fb      	ldr	r3, [r7, #28]
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3720      	adds	r7, #32
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	20001c90 	.word	0x20001c90
 801a774:	08021dd4 	.word	0x08021dd4
 801a778:	08021de4 	.word	0x08021de4
 801a77c:	fffffc18 	.word	0xfffffc18
 801a780:	370870a0 	.word	0x370870a0
 801a784:	4200999a 	.word	0x4200999a
 801a788:	000927c0 	.word	0x000927c0
 801a78c:	08021d70 	.word	0x08021d70
 801a790:	08021d80 	.word	0x08021d80

0801a794 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a794:	b590      	push	{r4, r7, lr}
 801a796:	b085      	sub	sp, #20
 801a798:	af02      	add	r7, sp, #8
 801a79a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a79c:	4b11      	ldr	r3, [pc, #68]	; (801a7e4 <RegionUS915SetBandTxDone+0x50>)
 801a79e:	681a      	ldr	r2, [r3, #0]
 801a7a0:	4b11      	ldr	r3, [pc, #68]	; (801a7e8 <RegionUS915SetBandTxDone+0x54>)
 801a7a2:	6819      	ldr	r1, [r3, #0]
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	781b      	ldrb	r3, [r3, #0]
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	005b      	lsls	r3, r3, #1
 801a7ae:	4403      	add	r3, r0
 801a7b0:	009b      	lsls	r3, r3, #2
 801a7b2:	440b      	add	r3, r1
 801a7b4:	3309      	adds	r3, #9
 801a7b6:	781b      	ldrb	r3, [r3, #0]
 801a7b8:	4619      	mov	r1, r3
 801a7ba:	460b      	mov	r3, r1
 801a7bc:	005b      	lsls	r3, r3, #1
 801a7be:	440b      	add	r3, r1
 801a7c0:	00db      	lsls	r3, r3, #3
 801a7c2:	18d0      	adds	r0, r2, r3
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	6899      	ldr	r1, [r3, #8]
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	785c      	ldrb	r4, [r3, #1]
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	691a      	ldr	r2, [r3, #16]
 801a7d0:	9200      	str	r2, [sp, #0]
 801a7d2:	68db      	ldr	r3, [r3, #12]
 801a7d4:	4622      	mov	r2, r4
 801a7d6:	f7ff f905 	bl	80199e4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801a7da:	bf00      	nop
 801a7dc:	370c      	adds	r7, #12
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	bd90      	pop	{r4, r7, pc}
 801a7e2:	bf00      	nop
 801a7e4:	20001c94 	.word	0x20001c94
 801a7e8:	20001c90 	.word	0x20001c90

0801a7ec <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b08a      	sub	sp, #40	; 0x28
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a7f4:	2301      	movs	r3, #1
 801a7f6:	81bb      	strh	r3, [r7, #12]
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	73bb      	strb	r3, [r7, #14]
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	613b      	str	r3, [r7, #16]
 801a800:	2300      	movs	r3, #0
 801a802:	617b      	str	r3, [r7, #20]
 801a804:	2300      	movs	r3, #0
 801a806:	61bb      	str	r3, [r7, #24]
 801a808:	2300      	movs	r3, #0
 801a80a:	61fb      	str	r3, [r7, #28]
 801a80c:	2300      	movs	r3, #0
 801a80e:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	7b1b      	ldrb	r3, [r3, #12]
 801a816:	2b00      	cmp	r3, #0
 801a818:	d007      	beq.n	801a82a <RegionUS915InitDefaults+0x3e>
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	f2c0 8104 	blt.w	801aa28 <RegionUS915InitDefaults+0x23c>
 801a820:	3b01      	subs	r3, #1
 801a822:	2b01      	cmp	r3, #1
 801a824:	f200 8100 	bhi.w	801aa28 <RegionUS915InitDefaults+0x23c>
 801a828:	e0ce      	b.n	801a9c8 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	f000 80fc 	beq.w	801aa2c <RegionUS915InitDefaults+0x240>
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	685b      	ldr	r3, [r3, #4]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	f000 80f7 	beq.w	801aa2c <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	4a7c      	ldr	r2, [pc, #496]	; (801aa34 <RegionUS915InitDefaults+0x248>)
 801a844:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	685b      	ldr	r3, [r3, #4]
 801a84a:	4a7b      	ldr	r2, [pc, #492]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a84c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	689b      	ldr	r3, [r3, #8]
 801a852:	4a7a      	ldr	r2, [pc, #488]	; (801aa3c <RegionUS915InitDefaults+0x250>)
 801a854:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a856:	4b77      	ldr	r3, [pc, #476]	; (801aa34 <RegionUS915InitDefaults+0x248>)
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	2200      	movs	r2, #0
 801a85c:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a85e:	4b75      	ldr	r3, [pc, #468]	; (801aa34 <RegionUS915InitDefaults+0x248>)
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	2200      	movs	r2, #0
 801a864:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a866:	4b75      	ldr	r3, [pc, #468]	; (801aa3c <RegionUS915InitDefaults+0x250>)
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	f107 010c 	add.w	r1, r7, #12
 801a86e:	2218      	movs	r2, #24
 801a870:	4618      	mov	r0, r3
 801a872:	f000 ffcc 	bl	801b80e <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a876:	2300      	movs	r3, #0
 801a878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a87c:	e02e      	b.n	801a8dc <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a882:	4a6f      	ldr	r2, [pc, #444]	; (801aa40 <RegionUS915InitDefaults+0x254>)
 801a884:	fb03 f202 	mul.w	r2, r3, r2
 801a888:	4b6e      	ldr	r3, [pc, #440]	; (801aa44 <RegionUS915InitDefaults+0x258>)
 801a88a:	4413      	add	r3, r2
 801a88c:	4a6a      	ldr	r2, [pc, #424]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a88e:	6811      	ldr	r1, [r2, #0]
 801a890:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a894:	4618      	mov	r0, r3
 801a896:	4613      	mov	r3, r2
 801a898:	005b      	lsls	r3, r3, #1
 801a89a:	4413      	add	r3, r2
 801a89c:	009b      	lsls	r3, r3, #2
 801a89e:	440b      	add	r3, r1
 801a8a0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a8a2:	4b65      	ldr	r3, [pc, #404]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a8a4:	6819      	ldr	r1, [r3, #0]
 801a8a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a8aa:	4613      	mov	r3, r2
 801a8ac:	005b      	lsls	r3, r3, #1
 801a8ae:	4413      	add	r3, r2
 801a8b0:	009b      	lsls	r3, r3, #2
 801a8b2:	440b      	add	r3, r1
 801a8b4:	3308      	adds	r3, #8
 801a8b6:	2230      	movs	r2, #48	; 0x30
 801a8b8:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a8ba:	4b5f      	ldr	r3, [pc, #380]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a8bc:	6819      	ldr	r1, [r3, #0]
 801a8be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a8c2:	4613      	mov	r3, r2
 801a8c4:	005b      	lsls	r3, r3, #1
 801a8c6:	4413      	add	r3, r2
 801a8c8:	009b      	lsls	r3, r3, #2
 801a8ca:	440b      	add	r3, r1
 801a8cc:	3309      	adds	r3, #9
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8d6:	3301      	adds	r3, #1
 801a8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8e0:	2b3f      	cmp	r3, #63	; 0x3f
 801a8e2:	d9cc      	bls.n	801a87e <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a8e4:	2340      	movs	r3, #64	; 0x40
 801a8e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a8ea:	e02f      	b.n	801a94c <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a8ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8f0:	3b40      	subs	r3, #64	; 0x40
 801a8f2:	4a55      	ldr	r2, [pc, #340]	; (801aa48 <RegionUS915InitDefaults+0x25c>)
 801a8f4:	fb03 f202 	mul.w	r2, r3, r2
 801a8f8:	4b54      	ldr	r3, [pc, #336]	; (801aa4c <RegionUS915InitDefaults+0x260>)
 801a8fa:	4413      	add	r3, r2
 801a8fc:	4a4e      	ldr	r2, [pc, #312]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a8fe:	6811      	ldr	r1, [r2, #0]
 801a900:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a904:	4618      	mov	r0, r3
 801a906:	4613      	mov	r3, r2
 801a908:	005b      	lsls	r3, r3, #1
 801a90a:	4413      	add	r3, r2
 801a90c:	009b      	lsls	r3, r3, #2
 801a90e:	440b      	add	r3, r1
 801a910:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a912:	4b49      	ldr	r3, [pc, #292]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a914:	6819      	ldr	r1, [r3, #0]
 801a916:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a91a:	4613      	mov	r3, r2
 801a91c:	005b      	lsls	r3, r3, #1
 801a91e:	4413      	add	r3, r2
 801a920:	009b      	lsls	r3, r3, #2
 801a922:	440b      	add	r3, r1
 801a924:	3308      	adds	r3, #8
 801a926:	2244      	movs	r2, #68	; 0x44
 801a928:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a92a:	4b43      	ldr	r3, [pc, #268]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a92c:	6819      	ldr	r1, [r3, #0]
 801a92e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a932:	4613      	mov	r3, r2
 801a934:	005b      	lsls	r3, r3, #1
 801a936:	4413      	add	r3, r2
 801a938:	009b      	lsls	r3, r3, #2
 801a93a:	440b      	add	r3, r1
 801a93c:	3309      	adds	r3, #9
 801a93e:	2200      	movs	r2, #0
 801a940:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a942:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a946:	3301      	adds	r3, #1
 801a948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a94c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a950:	2b47      	cmp	r3, #71	; 0x47
 801a952:	d9cb      	bls.n	801a8ec <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a954:	4b38      	ldr	r3, [pc, #224]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a95c:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a960:	4b35      	ldr	r3, [pc, #212]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a968:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a96c:	4b32      	ldr	r3, [pc, #200]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a974:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a978:	4b2f      	ldr	r3, [pc, #188]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a980:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a984:	4b2c      	ldr	r3, [pc, #176]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	22ff      	movs	r2, #255	; 0xff
 801a98a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a98e:	4b2a      	ldr	r3, [pc, #168]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	2200      	movs	r2, #0
 801a994:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a998:	4b27      	ldr	r3, [pc, #156]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a9a0:	4b25      	ldr	r3, [pc, #148]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a9a8:	2206      	movs	r2, #6
 801a9aa:	4619      	mov	r1, r3
 801a9ac:	f7fe fff4 	bl	8019998 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a9b0:	4b20      	ldr	r3, [pc, #128]	; (801aa34 <RegionUS915InitDefaults+0x248>)
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	4b20      	ldr	r3, [pc, #128]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a9be:	2206      	movs	r2, #6
 801a9c0:	4619      	mov	r1, r3
 801a9c2:	f7fe ffe9 	bl	8019998 <RegionCommonChanMaskCopy>
            break;
 801a9c6:	e032      	b.n	801aa2e <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a9c8:	4b1b      	ldr	r3, [pc, #108]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a9d0:	4b19      	ldr	r3, [pc, #100]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a9d8:	2206      	movs	r2, #6
 801a9da:	4619      	mov	r1, r3
 801a9dc:	f7fe ffdc 	bl	8019998 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a9e6:	e01a      	b.n	801aa1e <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a9e8:	4b12      	ldr	r3, [pc, #72]	; (801aa34 <RegionUS915InitDefaults+0x248>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a9f0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a9f4:	4b10      	ldr	r3, [pc, #64]	; (801aa38 <RegionUS915InitDefaults+0x24c>)
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a9fc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801aa00:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801aa04:	4b0b      	ldr	r3, [pc, #44]	; (801aa34 <RegionUS915InitDefaults+0x248>)
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801aa0c:	4001      	ands	r1, r0
 801aa0e:	b289      	uxth	r1, r1
 801aa10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801aa14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa18:	3301      	adds	r3, #1
 801aa1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801aa1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa22:	2b05      	cmp	r3, #5
 801aa24:	d9e0      	bls.n	801a9e8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801aa26:	e002      	b.n	801aa2e <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801aa28:	bf00      	nop
 801aa2a:	e000      	b.n	801aa2e <RegionUS915InitDefaults+0x242>
                return;
 801aa2c:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801aa2e:	3728      	adds	r7, #40	; 0x28
 801aa30:	46bd      	mov	sp, r7
 801aa32:	bd80      	pop	{r7, pc}
 801aa34:	20001c8c 	.word	0x20001c8c
 801aa38:	20001c90 	.word	0x20001c90
 801aa3c:	20001c94 	.word	0x20001c94
 801aa40:	00030d40 	.word	0x00030d40
 801aa44:	35c80160 	.word	0x35c80160
 801aa48:	00186a00 	.word	0x00186a00
 801aa4c:	35d2afc0 	.word	0x35d2afc0

0801aa50 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b082      	sub	sp, #8
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	6078      	str	r0, [r7, #4]
 801aa58:	460b      	mov	r3, r1
 801aa5a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801aa5c:	78fb      	ldrb	r3, [r7, #3]
 801aa5e:	2b0f      	cmp	r3, #15
 801aa60:	d867      	bhi.n	801ab32 <RegionUS915Verify+0xe2>
 801aa62:	a201      	add	r2, pc, #4	; (adr r2, 801aa68 <RegionUS915Verify+0x18>)
 801aa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa68:	0801aaa9 	.word	0x0801aaa9
 801aa6c:	0801ab33 	.word	0x0801ab33
 801aa70:	0801ab33 	.word	0x0801ab33
 801aa74:	0801ab33 	.word	0x0801ab33
 801aa78:	0801ab33 	.word	0x0801ab33
 801aa7c:	0801aab7 	.word	0x0801aab7
 801aa80:	0801aad5 	.word	0x0801aad5
 801aa84:	0801aaf3 	.word	0x0801aaf3
 801aa88:	0801ab33 	.word	0x0801ab33
 801aa8c:	0801ab11 	.word	0x0801ab11
 801aa90:	0801ab11 	.word	0x0801ab11
 801aa94:	0801ab33 	.word	0x0801ab33
 801aa98:	0801ab33 	.word	0x0801ab33
 801aa9c:	0801ab33 	.word	0x0801ab33
 801aaa0:	0801ab33 	.word	0x0801ab33
 801aaa4:	0801ab2f 	.word	0x0801ab2f
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	4618      	mov	r0, r3
 801aaae:	f7ff fca1 	bl	801a3f4 <VerifyRfFreq>
 801aab2:	4603      	mov	r3, r0
 801aab4:	e03e      	b.n	801ab34 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	f993 3000 	ldrsb.w	r3, [r3]
 801aabc:	2204      	movs	r2, #4
 801aabe:	2100      	movs	r1, #0
 801aac0:	4618      	mov	r0, r3
 801aac2:	f7fe feec 	bl	801989e <RegionCommonValueInRange>
 801aac6:	4603      	mov	r3, r0
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	bf14      	ite	ne
 801aacc:	2301      	movne	r3, #1
 801aace:	2300      	moveq	r3, #0
 801aad0:	b2db      	uxtb	r3, r3
 801aad2:	e02f      	b.n	801ab34 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	f993 3000 	ldrsb.w	r3, [r3]
 801aada:	2205      	movs	r2, #5
 801aadc:	2100      	movs	r1, #0
 801aade:	4618      	mov	r0, r3
 801aae0:	f7fe fedd 	bl	801989e <RegionCommonValueInRange>
 801aae4:	4603      	mov	r3, r0
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	bf14      	ite	ne
 801aaea:	2301      	movne	r3, #1
 801aaec:	2300      	moveq	r3, #0
 801aaee:	b2db      	uxtb	r3, r3
 801aaf0:	e020      	b.n	801ab34 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	f993 3000 	ldrsb.w	r3, [r3]
 801aaf8:	220d      	movs	r2, #13
 801aafa:	2108      	movs	r1, #8
 801aafc:	4618      	mov	r0, r3
 801aafe:	f7fe fece 	bl	801989e <RegionCommonValueInRange>
 801ab02:	4603      	mov	r3, r0
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	bf14      	ite	ne
 801ab08:	2301      	movne	r3, #1
 801ab0a:	2300      	moveq	r3, #0
 801ab0c:	b2db      	uxtb	r3, r3
 801ab0e:	e011      	b.n	801ab34 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	f993 3000 	ldrsb.w	r3, [r3]
 801ab16:	220e      	movs	r2, #14
 801ab18:	2100      	movs	r1, #0
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	f7fe febf 	bl	801989e <RegionCommonValueInRange>
 801ab20:	4603      	mov	r3, r0
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	bf14      	ite	ne
 801ab26:	2301      	movne	r3, #1
 801ab28:	2300      	moveq	r3, #0
 801ab2a:	b2db      	uxtb	r3, r3
 801ab2c:	e002      	b.n	801ab34 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801ab2e:	2300      	movs	r3, #0
 801ab30:	e000      	b.n	801ab34 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801ab32:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801ab34:	4618      	mov	r0, r3
 801ab36:	3708      	adds	r7, #8
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	bd80      	pop	{r7, pc}

0801ab3c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801ab3c:	b480      	push	{r7}
 801ab3e:	b085      	sub	sp, #20
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	7a1b      	ldrb	r3, [r3, #8]
 801ab48:	2b10      	cmp	r3, #16
 801ab4a:	d160      	bne.n	801ac0e <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	685b      	ldr	r3, [r3, #4]
 801ab50:	330f      	adds	r3, #15
 801ab52:	781b      	ldrb	r3, [r3, #0]
 801ab54:	2b01      	cmp	r3, #1
 801ab56:	d15c      	bne.n	801ac12 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ab58:	2300      	movs	r3, #0
 801ab5a:	73fb      	strb	r3, [r7, #15]
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	73bb      	strb	r3, [r7, #14]
 801ab60:	e051      	b.n	801ac06 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	685a      	ldr	r2, [r3, #4]
 801ab66:	7bbb      	ldrb	r3, [r7, #14]
 801ab68:	4413      	add	r3, r2
 801ab6a:	7819      	ldrb	r1, [r3, #0]
 801ab6c:	4b2b      	ldr	r3, [pc, #172]	; (801ac1c <RegionUS915ApplyCFList+0xe0>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	7bfa      	ldrb	r2, [r7, #15]
 801ab72:	b289      	uxth	r1, r1
 801ab74:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab78:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801ab7c:	4b27      	ldr	r3, [pc, #156]	; (801ac1c <RegionUS915ApplyCFList+0xe0>)
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	7bfa      	ldrb	r2, [r7, #15]
 801ab82:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab86:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	685a      	ldr	r2, [r3, #4]
 801ab8e:	7bbb      	ldrb	r3, [r7, #14]
 801ab90:	3301      	adds	r3, #1
 801ab92:	4413      	add	r3, r2
 801ab94:	781b      	ldrb	r3, [r3, #0]
 801ab96:	b29b      	uxth	r3, r3
 801ab98:	021b      	lsls	r3, r3, #8
 801ab9a:	b299      	uxth	r1, r3
 801ab9c:	4b1f      	ldr	r3, [pc, #124]	; (801ac1c <RegionUS915ApplyCFList+0xe0>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	7bfa      	ldrb	r2, [r7, #15]
 801aba2:	4301      	orrs	r1, r0
 801aba4:	b289      	uxth	r1, r1
 801aba6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801abae:	7bfb      	ldrb	r3, [r7, #15]
 801abb0:	2b04      	cmp	r3, #4
 801abb2:	d10f      	bne.n	801abd4 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801abb4:	4b19      	ldr	r3, [pc, #100]	; (801ac1c <RegionUS915ApplyCFList+0xe0>)
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	7bfa      	ldrb	r2, [r7, #15]
 801abba:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abbe:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801abc2:	4b16      	ldr	r3, [pc, #88]	; (801ac1c <RegionUS915ApplyCFList+0xe0>)
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	7bfa      	ldrb	r2, [r7, #15]
 801abc8:	b2c9      	uxtb	r1, r1
 801abca:	b289      	uxth	r1, r1
 801abcc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abd0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801abd4:	4b12      	ldr	r3, [pc, #72]	; (801ac20 <RegionUS915ApplyCFList+0xe4>)
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	7bfa      	ldrb	r2, [r7, #15]
 801abda:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801abde:	4b0f      	ldr	r3, [pc, #60]	; (801ac1c <RegionUS915ApplyCFList+0xe0>)
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	7bfa      	ldrb	r2, [r7, #15]
 801abe4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abe8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801abec:	4b0c      	ldr	r3, [pc, #48]	; (801ac20 <RegionUS915ApplyCFList+0xe4>)
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	7bfa      	ldrb	r2, [r7, #15]
 801abf2:	4001      	ands	r1, r0
 801abf4:	b289      	uxth	r1, r1
 801abf6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801abfa:	7bfb      	ldrb	r3, [r7, #15]
 801abfc:	3301      	adds	r3, #1
 801abfe:	73fb      	strb	r3, [r7, #15]
 801ac00:	7bbb      	ldrb	r3, [r7, #14]
 801ac02:	3302      	adds	r3, #2
 801ac04:	73bb      	strb	r3, [r7, #14]
 801ac06:	7bfb      	ldrb	r3, [r7, #15]
 801ac08:	2b04      	cmp	r3, #4
 801ac0a:	d9aa      	bls.n	801ab62 <RegionUS915ApplyCFList+0x26>
 801ac0c:	e002      	b.n	801ac14 <RegionUS915ApplyCFList+0xd8>
        return;
 801ac0e:	bf00      	nop
 801ac10:	e000      	b.n	801ac14 <RegionUS915ApplyCFList+0xd8>
        return;
 801ac12:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801ac14:	3714      	adds	r7, #20
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bc80      	pop	{r7}
 801ac1a:	4770      	bx	lr
 801ac1c:	20001c90 	.word	0x20001c90
 801ac20:	20001c8c 	.word	0x20001c8c

0801ac24 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b084      	sub	sp, #16
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	2204      	movs	r2, #4
 801ac32:	2100      	movs	r1, #0
 801ac34:	4618      	mov	r0, r3
 801ac36:	f7fe fe83 	bl	8019940 <RegionCommonCountChannels>
 801ac3a:	4603      	mov	r3, r0
 801ac3c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801ac3e:	7bbb      	ldrb	r3, [r7, #14]
 801ac40:	2b01      	cmp	r3, #1
 801ac42:	d804      	bhi.n	801ac4e <RegionUS915ChanMaskSet+0x2a>
 801ac44:	7bbb      	ldrb	r3, [r7, #14]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d001      	beq.n	801ac4e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	e04a      	b.n	801ace4 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	791b      	ldrb	r3, [r3, #4]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d002      	beq.n	801ac5c <RegionUS915ChanMaskSet+0x38>
 801ac56:	2b01      	cmp	r3, #1
 801ac58:	d036      	beq.n	801acc8 <RegionUS915ChanMaskSet+0xa4>
 801ac5a:	e040      	b.n	801acde <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ac5c:	4b23      	ldr	r3, [pc, #140]	; (801acec <RegionUS915ChanMaskSet+0xc8>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	2206      	movs	r2, #6
 801ac6a:	4619      	mov	r1, r3
 801ac6c:	f7fe fe94 	bl	8019998 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801ac70:	4b1e      	ldr	r3, [pc, #120]	; (801acec <RegionUS915ChanMaskSet+0xc8>)
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801ac78:	4b1c      	ldr	r3, [pc, #112]	; (801acec <RegionUS915ChanMaskSet+0xc8>)
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	b2d2      	uxtb	r2, r2
 801ac7e:	b292      	uxth	r2, r2
 801ac80:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801ac84:	4b19      	ldr	r3, [pc, #100]	; (801acec <RegionUS915ChanMaskSet+0xc8>)
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	2200      	movs	r2, #0
 801ac8a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ac8e:	2300      	movs	r3, #0
 801ac90:	73fb      	strb	r3, [r7, #15]
 801ac92:	e015      	b.n	801acc0 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801ac94:	4b16      	ldr	r3, [pc, #88]	; (801acf0 <RegionUS915ChanMaskSet+0xcc>)
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	7bfa      	ldrb	r2, [r7, #15]
 801ac9a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ac9e:	4b13      	ldr	r3, [pc, #76]	; (801acec <RegionUS915ChanMaskSet+0xc8>)
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	7bfa      	ldrb	r2, [r7, #15]
 801aca4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801aca8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801acac:	4b10      	ldr	r3, [pc, #64]	; (801acf0 <RegionUS915ChanMaskSet+0xcc>)
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	7bfa      	ldrb	r2, [r7, #15]
 801acb2:	4001      	ands	r1, r0
 801acb4:	b289      	uxth	r1, r1
 801acb6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801acba:	7bfb      	ldrb	r3, [r7, #15]
 801acbc:	3301      	adds	r3, #1
 801acbe:	73fb      	strb	r3, [r7, #15]
 801acc0:	7bfb      	ldrb	r3, [r7, #15]
 801acc2:	2b05      	cmp	r3, #5
 801acc4:	d9e6      	bls.n	801ac94 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801acc6:	e00c      	b.n	801ace2 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801acc8:	4b08      	ldr	r3, [pc, #32]	; (801acec <RegionUS915ChanMaskSet+0xc8>)
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	2206      	movs	r2, #6
 801acd6:	4619      	mov	r1, r3
 801acd8:	f7fe fe5e 	bl	8019998 <RegionCommonChanMaskCopy>
            break;
 801acdc:	e001      	b.n	801ace2 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801acde:	2300      	movs	r3, #0
 801ace0:	e000      	b.n	801ace4 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801ace2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ace4:	4618      	mov	r0, r3
 801ace6:	3710      	adds	r7, #16
 801ace8:	46bd      	mov	sp, r7
 801acea:	bd80      	pop	{r7, pc}
 801acec:	20001c90 	.word	0x20001c90
 801acf0:	20001c8c 	.word	0x20001c8c

0801acf4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b088      	sub	sp, #32
 801acf8:	af02      	add	r7, sp, #8
 801acfa:	60ba      	str	r2, [r7, #8]
 801acfc:	607b      	str	r3, [r7, #4]
 801acfe:	4603      	mov	r3, r0
 801ad00:	73fb      	strb	r3, [r7, #15]
 801ad02:	460b      	mov	r3, r1
 801ad04:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801ad06:	2300      	movs	r3, #0
 801ad08:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801ad0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad0e:	2b0d      	cmp	r3, #13
 801ad10:	bfa8      	it	ge
 801ad12:	230d      	movge	r3, #13
 801ad14:	b25a      	sxtb	r2, r3
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ad20:	4916      	ldr	r1, [pc, #88]	; (801ad7c <RegionUS915ComputeRxWindowParameters+0x88>)
 801ad22:	4618      	mov	r0, r3
 801ad24:	f7ff fac8 	bl	801a2b8 <RegionCommonGetBandwidth>
 801ad28:	4603      	mov	r3, r0
 801ad2a:	b2da      	uxtb	r2, r3
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ad36:	461a      	mov	r2, r3
 801ad38:	4b11      	ldr	r3, [pc, #68]	; (801ad80 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801ad3a:	5c9a      	ldrb	r2, [r3, r2]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ad42:	4619      	mov	r1, r3
 801ad44:	4b0d      	ldr	r3, [pc, #52]	; (801ad7c <RegionUS915ComputeRxWindowParameters+0x88>)
 801ad46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ad4a:	4619      	mov	r1, r3
 801ad4c:	4610      	mov	r0, r2
 801ad4e:	f7ff f841 	bl	8019dd4 <RegionCommonComputeSymbolTimeLoRa>
 801ad52:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801ad54:	4b0b      	ldr	r3, [pc, #44]	; (801ad84 <RegionUS915ComputeRxWindowParameters+0x90>)
 801ad56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad58:	4798      	blx	r3
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	3308      	adds	r3, #8
 801ad5e:	687a      	ldr	r2, [r7, #4]
 801ad60:	320c      	adds	r2, #12
 801ad62:	7bb9      	ldrb	r1, [r7, #14]
 801ad64:	9201      	str	r2, [sp, #4]
 801ad66:	9300      	str	r3, [sp, #0]
 801ad68:	4603      	mov	r3, r0
 801ad6a:	68ba      	ldr	r2, [r7, #8]
 801ad6c:	6978      	ldr	r0, [r7, #20]
 801ad6e:	f7ff f847 	bl	8019e00 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801ad72:	bf00      	nop
 801ad74:	3718      	adds	r7, #24
 801ad76:	46bd      	mov	sp, r7
 801ad78:	bd80      	pop	{r7, pc}
 801ad7a:	bf00      	nop
 801ad7c:	08021d80 	.word	0x08021d80
 801ad80:	08021d70 	.word	0x08021d70
 801ad84:	08021df4 	.word	0x08021df4

0801ad88 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801ad88:	b590      	push	{r4, r7, lr}
 801ad8a:	b091      	sub	sp, #68	; 0x44
 801ad8c:	af0a      	add	r7, sp, #40	; 0x28
 801ad8e:	6078      	str	r0, [r7, #4]
 801ad90:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	785b      	ldrb	r3, [r3, #1]
 801ad96:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801ad98:	2300      	movs	r3, #0
 801ad9a:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	685b      	ldr	r3, [r3, #4]
 801ada4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801ada6:	4b34      	ldr	r3, [pc, #208]	; (801ae78 <RegionUS915RxConfig+0xf0>)
 801ada8:	685b      	ldr	r3, [r3, #4]
 801adaa:	4798      	blx	r3
 801adac:	4603      	mov	r3, r0
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d001      	beq.n	801adb6 <RegionUS915RxConfig+0x2e>
    {
        return false;
 801adb2:	2300      	movs	r3, #0
 801adb4:	e05c      	b.n	801ae70 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	7cdb      	ldrb	r3, [r3, #19]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d109      	bne.n	801add2 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	781b      	ldrb	r3, [r3, #0]
 801adc2:	f003 0307 	and.w	r3, r3, #7
 801adc6:	4a2d      	ldr	r2, [pc, #180]	; (801ae7c <RegionUS915RxConfig+0xf4>)
 801adc8:	fb03 f202 	mul.w	r2, r3, r2
 801adcc:	4b2c      	ldr	r3, [pc, #176]	; (801ae80 <RegionUS915RxConfig+0xf8>)
 801adce:	4413      	add	r3, r2
 801add0:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801add2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801add6:	4a2b      	ldr	r2, [pc, #172]	; (801ae84 <RegionUS915RxConfig+0xfc>)
 801add8:	5cd3      	ldrb	r3, [r2, r3]
 801adda:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801addc:	4b26      	ldr	r3, [pc, #152]	; (801ae78 <RegionUS915RxConfig+0xf0>)
 801adde:	68db      	ldr	r3, [r3, #12]
 801ade0:	6938      	ldr	r0, [r7, #16]
 801ade2:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801ade4:	4b24      	ldr	r3, [pc, #144]	; (801ae78 <RegionUS915RxConfig+0xf0>)
 801ade6:	699c      	ldr	r4, [r3, #24]
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	789b      	ldrb	r3, [r3, #2]
 801adec:	4618      	mov	r0, r3
 801adee:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	689b      	ldr	r3, [r3, #8]
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	687a      	ldr	r2, [r7, #4]
 801adfa:	7c92      	ldrb	r2, [r2, #18]
 801adfc:	9209      	str	r2, [sp, #36]	; 0x24
 801adfe:	2201      	movs	r2, #1
 801ae00:	9208      	str	r2, [sp, #32]
 801ae02:	2200      	movs	r2, #0
 801ae04:	9207      	str	r2, [sp, #28]
 801ae06:	2200      	movs	r2, #0
 801ae08:	9206      	str	r2, [sp, #24]
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	9205      	str	r2, [sp, #20]
 801ae0e:	2200      	movs	r2, #0
 801ae10:	9204      	str	r2, [sp, #16]
 801ae12:	2200      	movs	r2, #0
 801ae14:	9203      	str	r2, [sp, #12]
 801ae16:	9302      	str	r3, [sp, #8]
 801ae18:	2308      	movs	r3, #8
 801ae1a:	9301      	str	r3, [sp, #4]
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	9300      	str	r3, [sp, #0]
 801ae20:	2301      	movs	r3, #1
 801ae22:	460a      	mov	r2, r1
 801ae24:	4601      	mov	r1, r0
 801ae26:	2001      	movs	r0, #1
 801ae28:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	7c5b      	ldrb	r3, [r3, #17]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d005      	beq.n	801ae3e <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801ae32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae36:	4a14      	ldr	r2, [pc, #80]	; (801ae88 <RegionUS915RxConfig+0x100>)
 801ae38:	5cd3      	ldrb	r3, [r2, r3]
 801ae3a:	75fb      	strb	r3, [r7, #23]
 801ae3c:	e004      	b.n	801ae48 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801ae3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae42:	4a12      	ldr	r2, [pc, #72]	; (801ae8c <RegionUS915RxConfig+0x104>)
 801ae44:	5cd3      	ldrb	r3, [r2, r3]
 801ae46:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801ae48:	4b0b      	ldr	r3, [pc, #44]	; (801ae78 <RegionUS915RxConfig+0xf0>)
 801ae4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ae4c:	7dfa      	ldrb	r2, [r7, #23]
 801ae4e:	320d      	adds	r2, #13
 801ae50:	b2d2      	uxtb	r2, r2
 801ae52:	4611      	mov	r1, r2
 801ae54:	2001      	movs	r0, #1
 801ae56:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	7cdb      	ldrb	r3, [r3, #19]
 801ae5c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801ae60:	6939      	ldr	r1, [r7, #16]
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7ff fa46 	bl	801a2f4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801ae68:	683b      	ldr	r3, [r7, #0]
 801ae6a:	7bfa      	ldrb	r2, [r7, #15]
 801ae6c:	701a      	strb	r2, [r3, #0]
    return true;
 801ae6e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ae70:	4618      	mov	r0, r3
 801ae72:	371c      	adds	r7, #28
 801ae74:	46bd      	mov	sp, r7
 801ae76:	bd90      	pop	{r4, r7, pc}
 801ae78:	08021df4 	.word	0x08021df4
 801ae7c:	000927c0 	.word	0x000927c0
 801ae80:	370870a0 	.word	0x370870a0
 801ae84:	08021d70 	.word	0x08021d70
 801ae88:	08021de4 	.word	0x08021de4
 801ae8c:	08021dd4 	.word	0x08021dd4

0801ae90 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ae90:	b590      	push	{r4, r7, lr}
 801ae92:	b093      	sub	sp, #76	; 0x4c
 801ae94:	af0a      	add	r7, sp, #40	; 0x28
 801ae96:	60f8      	str	r0, [r7, #12]
 801ae98:	60b9      	str	r1, [r7, #8]
 801ae9a:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aea2:	461a      	mov	r2, r3
 801aea4:	4b49      	ldr	r3, [pc, #292]	; (801afcc <RegionUS915TxConfig+0x13c>)
 801aea6:	5c9b      	ldrb	r3, [r3, r2]
 801aea8:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801aeb0:	4b47      	ldr	r3, [pc, #284]	; (801afd0 <RegionUS915TxConfig+0x140>)
 801aeb2:	681a      	ldr	r2, [r3, #0]
 801aeb4:	4b47      	ldr	r3, [pc, #284]	; (801afd4 <RegionUS915TxConfig+0x144>)
 801aeb6:	6819      	ldr	r1, [r3, #0]
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	781b      	ldrb	r3, [r3, #0]
 801aebc:	461c      	mov	r4, r3
 801aebe:	4623      	mov	r3, r4
 801aec0:	005b      	lsls	r3, r3, #1
 801aec2:	4423      	add	r3, r4
 801aec4:	009b      	lsls	r3, r3, #2
 801aec6:	440b      	add	r3, r1
 801aec8:	3309      	adds	r3, #9
 801aeca:	781b      	ldrb	r3, [r3, #0]
 801aecc:	4619      	mov	r1, r3
 801aece:	460b      	mov	r3, r1
 801aed0:	005b      	lsls	r3, r3, #1
 801aed2:	440b      	add	r3, r1
 801aed4:	00db      	lsls	r3, r3, #3
 801aed6:	4413      	add	r3, r2
 801aed8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801aee2:	4b3c      	ldr	r3, [pc, #240]	; (801afd4 <RegionUS915TxConfig+0x144>)
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801aeea:	f7ff fa4d 	bl	801a388 <LimitTxPower>
 801aeee:	4603      	mov	r3, r0
 801aef0:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aef8:	4937      	ldr	r1, [pc, #220]	; (801afd8 <RegionUS915TxConfig+0x148>)
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7ff f9dc 	bl	801a2b8 <RegionCommonGetBandwidth>
 801af00:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801af02:	2300      	movs	r3, #0
 801af04:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801af06:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801af0a:	f04f 0200 	mov.w	r2, #0
 801af0e:	4933      	ldr	r1, [pc, #204]	; (801afdc <RegionUS915TxConfig+0x14c>)
 801af10:	4618      	mov	r0, r3
 801af12:	f7ff f82d 	bl	8019f70 <RegionCommonComputeTxPower>
 801af16:	4603      	mov	r3, r0
 801af18:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801af1a:	4b31      	ldr	r3, [pc, #196]	; (801afe0 <RegionUS915TxConfig+0x150>)
 801af1c:	68da      	ldr	r2, [r3, #12]
 801af1e:	4b2d      	ldr	r3, [pc, #180]	; (801afd4 <RegionUS915TxConfig+0x144>)
 801af20:	6819      	ldr	r1, [r3, #0]
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	781b      	ldrb	r3, [r3, #0]
 801af26:	4618      	mov	r0, r3
 801af28:	4603      	mov	r3, r0
 801af2a:	005b      	lsls	r3, r3, #1
 801af2c:	4403      	add	r3, r0
 801af2e:	009b      	lsls	r3, r3, #2
 801af30:	440b      	add	r3, r1
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	4618      	mov	r0, r3
 801af36:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801af38:	4b29      	ldr	r3, [pc, #164]	; (801afe0 <RegionUS915TxConfig+0x150>)
 801af3a:	69dc      	ldr	r4, [r3, #28]
 801af3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801af40:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801af44:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801af48:	9208      	str	r2, [sp, #32]
 801af4a:	2200      	movs	r2, #0
 801af4c:	9207      	str	r2, [sp, #28]
 801af4e:	2200      	movs	r2, #0
 801af50:	9206      	str	r2, [sp, #24]
 801af52:	2200      	movs	r2, #0
 801af54:	9205      	str	r2, [sp, #20]
 801af56:	2201      	movs	r2, #1
 801af58:	9204      	str	r2, [sp, #16]
 801af5a:	2200      	movs	r2, #0
 801af5c:	9203      	str	r2, [sp, #12]
 801af5e:	2208      	movs	r2, #8
 801af60:	9202      	str	r2, [sp, #8]
 801af62:	2201      	movs	r2, #1
 801af64:	9201      	str	r2, [sp, #4]
 801af66:	9300      	str	r3, [sp, #0]
 801af68:	69bb      	ldr	r3, [r7, #24]
 801af6a:	2200      	movs	r2, #0
 801af6c:	2001      	movs	r0, #1
 801af6e:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801af70:	4b18      	ldr	r3, [pc, #96]	; (801afd4 <RegionUS915TxConfig+0x144>)
 801af72:	681a      	ldr	r2, [r3, #0]
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	781b      	ldrb	r3, [r3, #0]
 801af78:	4619      	mov	r1, r3
 801af7a:	460b      	mov	r3, r1
 801af7c:	005b      	lsls	r3, r3, #1
 801af7e:	440b      	add	r3, r1
 801af80:	009b      	lsls	r3, r3, #2
 801af82:	4413      	add	r3, r2
 801af84:	681a      	ldr	r2, [r3, #0]
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801af8c:	4619      	mov	r1, r3
 801af8e:	4610      	mov	r0, r2
 801af90:	f7ff f9e2 	bl	801a358 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801af94:	4b12      	ldr	r3, [pc, #72]	; (801afe0 <RegionUS915TxConfig+0x150>)
 801af96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801af98:	68fa      	ldr	r2, [r7, #12]
 801af9a:	8992      	ldrh	r2, [r2, #12]
 801af9c:	b2d2      	uxtb	r2, r2
 801af9e:	4611      	mov	r1, r2
 801afa0:	2001      	movs	r0, #1
 801afa2:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	899b      	ldrh	r3, [r3, #12]
 801afae:	4619      	mov	r1, r3
 801afb0:	4610      	mov	r0, r2
 801afb2:	f7ff fa63 	bl	801a47c <GetTimeOnAir>
 801afb6:	4602      	mov	r2, r0
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801afbc:	68bb      	ldr	r3, [r7, #8]
 801afbe:	7fba      	ldrb	r2, [r7, #30]
 801afc0:	701a      	strb	r2, [r3, #0]
    return true;
 801afc2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801afc4:	4618      	mov	r0, r3
 801afc6:	3724      	adds	r7, #36	; 0x24
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd90      	pop	{r4, r7, pc}
 801afcc:	08021d70 	.word	0x08021d70
 801afd0:	20001c94 	.word	0x20001c94
 801afd4:	20001c90 	.word	0x20001c90
 801afd8:	08021d80 	.word	0x08021d80
 801afdc:	41f00000 	.word	0x41f00000
 801afe0:	08021df4 	.word	0x08021df4

0801afe4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801afe4:	b590      	push	{r4, r7, lr}
 801afe6:	b097      	sub	sp, #92	; 0x5c
 801afe8:	af00      	add	r7, sp, #0
 801afea:	60f8      	str	r0, [r7, #12]
 801afec:	60b9      	str	r1, [r7, #8]
 801afee:	607a      	str	r2, [r7, #4]
 801aff0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801aff2:	2307      	movs	r3, #7
 801aff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801aff8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801affc:	2200      	movs	r2, #0
 801affe:	601a      	str	r2, [r3, #0]
 801b000:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801b002:	2300      	movs	r3, #0
 801b004:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801b008:	2300      	movs	r3, #0
 801b00a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801b00e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b012:	2200      	movs	r2, #0
 801b014:	601a      	str	r2, [r3, #0]
 801b016:	605a      	str	r2, [r3, #4]
 801b018:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801b01a:	4b97      	ldr	r3, [pc, #604]	; (801b278 <RegionUS915LinkAdrReq+0x294>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801b022:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b026:	2206      	movs	r2, #6
 801b028:	4618      	mov	r0, r3
 801b02a:	f7fe fcb5 	bl	8019998 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b02e:	e11b      	b.n	801b268 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	685a      	ldr	r2, [r3, #4]
 801b034:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801b038:	4413      	add	r3, r2
 801b03a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b03e:	4611      	mov	r1, r2
 801b040:	4618      	mov	r0, r3
 801b042:	f7fe fded 	bl	8019c20 <RegionCommonParseLinkAdrReq>
 801b046:	4603      	mov	r3, r0
 801b048:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801b04c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801b050:	2b00      	cmp	r3, #0
 801b052:	f000 8113 	beq.w	801b27c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801b056:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b05a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801b05e:	4413      	add	r3, r2
 801b060:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801b064:	2307      	movs	r3, #7
 801b066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801b06a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b06e:	2b06      	cmp	r3, #6
 801b070:	d116      	bne.n	801b0a0 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801b072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b076:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801b07a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b07e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801b082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b086:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801b08a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b08e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b092:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b096:	b2db      	uxtb	r3, r3
 801b098:	b29b      	uxth	r3, r3
 801b09a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b09e:	e0e3      	b.n	801b268 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801b0a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b0a4:	2b07      	cmp	r3, #7
 801b0a6:	d112      	bne.n	801b0ce <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b0c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b0c4:	b2db      	uxtb	r3, r3
 801b0c6:	b29b      	uxth	r3, r3
 801b0c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b0cc:	e0cc      	b.n	801b268 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801b0ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b0d2:	2b05      	cmp	r3, #5
 801b0d4:	f040 80bf 	bne.w	801b256 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801b0d8:	2301      	movs	r3, #1
 801b0da:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b0ea:	e0ae      	b.n	801b24a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801b0ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b0f0:	b2da      	uxtb	r2, r3
 801b0f2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b0f6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b0fa:	fa01 f303 	lsl.w	r3, r1, r3
 801b0fe:	4013      	ands	r3, r2
 801b100:	2b00      	cmp	r3, #0
 801b102:	d04d      	beq.n	801b1a0 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801b104:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b108:	f003 0301 	and.w	r3, r3, #1
 801b10c:	b2db      	uxtb	r3, r3
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d120      	bne.n	801b154 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801b112:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b116:	005b      	lsls	r3, r3, #1
 801b118:	3358      	adds	r3, #88	; 0x58
 801b11a:	443b      	add	r3, r7
 801b11c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b120:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b124:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801b128:	b292      	uxth	r2, r2
 801b12a:	005b      	lsls	r3, r3, #1
 801b12c:	3358      	adds	r3, #88	; 0x58
 801b12e:	443b      	add	r3, r7
 801b130:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b134:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b138:	b21a      	sxth	r2, r3
 801b13a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b13e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b142:	fa01 f303 	lsl.w	r3, r1, r3
 801b146:	b21b      	sxth	r3, r3
 801b148:	4313      	orrs	r3, r2
 801b14a:	b21b      	sxth	r3, r3
 801b14c:	b29b      	uxth	r3, r3
 801b14e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b152:	e075      	b.n	801b240 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801b154:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b158:	005b      	lsls	r3, r3, #1
 801b15a:	3358      	adds	r3, #88	; 0x58
 801b15c:	443b      	add	r3, r7
 801b15e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b162:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b166:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801b16a:	b292      	uxth	r2, r2
 801b16c:	005b      	lsls	r3, r3, #1
 801b16e:	3358      	adds	r3, #88	; 0x58
 801b170:	443b      	add	r3, r7
 801b172:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b176:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b17a:	b21a      	sxth	r2, r3
 801b17c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b180:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b184:	fa01 f303 	lsl.w	r3, r1, r3
 801b188:	b21b      	sxth	r3, r3
 801b18a:	4313      	orrs	r3, r2
 801b18c:	b21b      	sxth	r3, r3
 801b18e:	b29b      	uxth	r3, r3
 801b190:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b194:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b198:	3301      	adds	r3, #1
 801b19a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801b19e:	e04f      	b.n	801b240 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801b1a0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1a4:	f003 0301 	and.w	r3, r3, #1
 801b1a8:	b2db      	uxtb	r3, r3
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d122      	bne.n	801b1f4 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801b1ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1b2:	005b      	lsls	r3, r3, #1
 801b1b4:	3358      	adds	r3, #88	; 0x58
 801b1b6:	443b      	add	r3, r7
 801b1b8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b1bc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801b1c4:	b292      	uxth	r2, r2
 801b1c6:	005b      	lsls	r3, r3, #1
 801b1c8:	3358      	adds	r3, #88	; 0x58
 801b1ca:	443b      	add	r3, r7
 801b1cc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b1d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b1d4:	b21a      	sxth	r2, r3
 801b1d6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b1da:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1de:	fa01 f303 	lsl.w	r3, r1, r3
 801b1e2:	b21b      	sxth	r3, r3
 801b1e4:	43db      	mvns	r3, r3
 801b1e6:	b21b      	sxth	r3, r3
 801b1e8:	4013      	ands	r3, r2
 801b1ea:	b21b      	sxth	r3, r3
 801b1ec:	b29b      	uxth	r3, r3
 801b1ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b1f2:	e025      	b.n	801b240 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801b1f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1f8:	005b      	lsls	r3, r3, #1
 801b1fa:	3358      	adds	r3, #88	; 0x58
 801b1fc:	443b      	add	r3, r7
 801b1fe:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b202:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b206:	b2d2      	uxtb	r2, r2
 801b208:	b292      	uxth	r2, r2
 801b20a:	005b      	lsls	r3, r3, #1
 801b20c:	3358      	adds	r3, #88	; 0x58
 801b20e:	443b      	add	r3, r7
 801b210:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b214:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b218:	b21a      	sxth	r2, r3
 801b21a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b21e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b222:	fa01 f303 	lsl.w	r3, r1, r3
 801b226:	b21b      	sxth	r3, r3
 801b228:	43db      	mvns	r3, r3
 801b22a:	b21b      	sxth	r3, r3
 801b22c:	4013      	ands	r3, r2
 801b22e:	b21b      	sxth	r3, r3
 801b230:	b29b      	uxth	r3, r3
 801b232:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b236:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b23a:	3301      	adds	r3, #1
 801b23c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801b240:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b244:	3301      	adds	r3, #1
 801b246:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b24a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b24e:	2b07      	cmp	r3, #7
 801b250:	f67f af4c 	bls.w	801b0ec <RegionUS915LinkAdrReq+0x108>
 801b254:	e008      	b.n	801b268 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801b256:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b25a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801b25e:	005b      	lsls	r3, r3, #1
 801b260:	3358      	adds	r3, #88	; 0x58
 801b262:	443b      	add	r3, r7
 801b264:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	7a1b      	ldrb	r3, [r3, #8]
 801b26c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b270:	429a      	cmp	r2, r3
 801b272:	f4ff aedd 	bcc.w	801b030 <RegionUS915LinkAdrReq+0x4c>
 801b276:	e002      	b.n	801b27e <RegionUS915LinkAdrReq+0x29a>
 801b278:	20001c90 	.word	0x20001c90
            break; // break loop, since no more request has been found
 801b27c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801b27e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b282:	2b03      	cmp	r3, #3
 801b284:	dc0f      	bgt.n	801b2a6 <RegionUS915LinkAdrReq+0x2c2>
 801b286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b28a:	2204      	movs	r2, #4
 801b28c:	2100      	movs	r1, #0
 801b28e:	4618      	mov	r0, r3
 801b290:	f7fe fb56 	bl	8019940 <RegionCommonCountChannels>
 801b294:	4603      	mov	r3, r0
 801b296:	2b01      	cmp	r3, #1
 801b298:	d805      	bhi.n	801b2a6 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801b29a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b29e:	f023 0301 	bic.w	r3, r3, #1
 801b2a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801b2a6:	2302      	movs	r3, #2
 801b2a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	7a5b      	ldrb	r3, [r3, #9]
 801b2b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801b2b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7ff f90f 	bl	801a4dc <RegionUS915GetPhyParam>
 801b2be:	4603      	mov	r3, r0
 801b2c0:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801b2c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b2c6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	7a9b      	ldrb	r3, [r3, #10]
 801b2cc:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801b2ce:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b2d2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801b2d4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801b2d8:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801b2da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801b2de:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801b2e6:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801b2ee:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	7b5b      	ldrb	r3, [r3, #13]
 801b2f4:	b25b      	sxtb	r3, r3
 801b2f6:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801b2f8:	2348      	movs	r3, #72	; 0x48
 801b2fa:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801b2fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b302:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801b304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b306:	b25b      	sxtb	r3, r3
 801b308:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801b30c:	2304      	movs	r3, #4
 801b30e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801b312:	4b3f      	ldr	r3, [pc, #252]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801b318:	230e      	movs	r3, #14
 801b31a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801b31e:	2300      	movs	r3, #0
 801b320:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801b32a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801b32e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b332:	1c9a      	adds	r2, r3, #2
 801b334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b338:	1c59      	adds	r1, r3, #1
 801b33a:	f107 0014 	add.w	r0, r7, #20
 801b33e:	4623      	mov	r3, r4
 801b340:	f7fe fcbf 	bl	8019cc2 <RegionCommonLinkAdrReqVerifyParams>
 801b344:	4603      	mov	r3, r0
 801b346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801b34a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b34e:	2b07      	cmp	r3, #7
 801b350:	d147      	bne.n	801b3e2 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801b352:	4b2f      	ldr	r3, [pc, #188]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b35a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b35e:	2206      	movs	r2, #6
 801b360:	4618      	mov	r0, r3
 801b362:	f7fe fb19 	bl	8019998 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801b366:	4b2b      	ldr	r3, [pc, #172]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	8819      	ldrh	r1, [r3, #0]
 801b36c:	4b28      	ldr	r3, [pc, #160]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801b374:	4b27      	ldr	r3, [pc, #156]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	400a      	ands	r2, r1
 801b37a:	b292      	uxth	r2, r2
 801b37c:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801b37e:	4b25      	ldr	r3, [pc, #148]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	8859      	ldrh	r1, [r3, #2]
 801b384:	4b22      	ldr	r3, [pc, #136]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801b38c:	4b21      	ldr	r3, [pc, #132]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	400a      	ands	r2, r1
 801b392:	b292      	uxth	r2, r2
 801b394:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801b396:	4b1f      	ldr	r3, [pc, #124]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	8899      	ldrh	r1, [r3, #4]
 801b39c:	4b1c      	ldr	r3, [pc, #112]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801b3a4:	4b1b      	ldr	r3, [pc, #108]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	400a      	ands	r2, r1
 801b3aa:	b292      	uxth	r2, r2
 801b3ac:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b3ae:	4b19      	ldr	r3, [pc, #100]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	88d9      	ldrh	r1, [r3, #6]
 801b3b4:	4b16      	ldr	r3, [pc, #88]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b3bc:	4b15      	ldr	r3, [pc, #84]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	400a      	ands	r2, r1
 801b3c2:	b292      	uxth	r2, r2
 801b3c4:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b3c6:	4b12      	ldr	r3, [pc, #72]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b3c8:	681a      	ldr	r2, [r3, #0]
 801b3ca:	4b12      	ldr	r3, [pc, #72]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b3d2:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b3d4:	4b0e      	ldr	r3, [pc, #56]	; (801b410 <RegionUS915LinkAdrReq+0x42c>)
 801b3d6:	681a      	ldr	r2, [r3, #0]
 801b3d8:	4b0e      	ldr	r3, [pc, #56]	; (801b414 <RegionUS915LinkAdrReq+0x430>)
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b3e0:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b3e2:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b3ea:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b3f2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b3fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b3fc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b400:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b402:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b406:	4618      	mov	r0, r3
 801b408:	375c      	adds	r7, #92	; 0x5c
 801b40a:	46bd      	mov	sp, r7
 801b40c:	bd90      	pop	{r4, r7, pc}
 801b40e:	bf00      	nop
 801b410:	20001c90 	.word	0x20001c90
 801b414:	20001c8c 	.word	0x20001c8c

0801b418 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b084      	sub	sp, #16
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b420:	2307      	movs	r3, #7
 801b422:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	685b      	ldr	r3, [r3, #4]
 801b428:	4618      	mov	r0, r3
 801b42a:	f7fe ffe3 	bl	801a3f4 <VerifyRfFreq>
 801b42e:	4603      	mov	r3, r0
 801b430:	f083 0301 	eor.w	r3, r3, #1
 801b434:	b2db      	uxtb	r3, r3
 801b436:	2b00      	cmp	r3, #0
 801b438:	d003      	beq.n	801b442 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b43a:	7bfb      	ldrb	r3, [r7, #15]
 801b43c:	f023 0301 	bic.w	r3, r3, #1
 801b440:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f993 3000 	ldrsb.w	r3, [r3]
 801b448:	220d      	movs	r2, #13
 801b44a:	2108      	movs	r1, #8
 801b44c:	4618      	mov	r0, r3
 801b44e:	f7fe fa26 	bl	801989e <RegionCommonValueInRange>
 801b452:	4603      	mov	r3, r0
 801b454:	2b00      	cmp	r3, #0
 801b456:	d103      	bne.n	801b460 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b458:	7bfb      	ldrb	r3, [r7, #15]
 801b45a:	f023 0302 	bic.w	r3, r3, #2
 801b45e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	f993 3000 	ldrsb.w	r3, [r3]
 801b466:	2207      	movs	r2, #7
 801b468:	2105      	movs	r1, #5
 801b46a:	4618      	mov	r0, r3
 801b46c:	f7fe fa17 	bl	801989e <RegionCommonValueInRange>
 801b470:	4603      	mov	r3, r0
 801b472:	2b01      	cmp	r3, #1
 801b474:	d004      	beq.n	801b480 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b47c:	2b0d      	cmp	r3, #13
 801b47e:	dd03      	ble.n	801b488 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b480:	7bfb      	ldrb	r3, [r7, #15]
 801b482:	f023 0302 	bic.w	r3, r3, #2
 801b486:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b48e:	2203      	movs	r2, #3
 801b490:	2100      	movs	r1, #0
 801b492:	4618      	mov	r0, r3
 801b494:	f7fe fa03 	bl	801989e <RegionCommonValueInRange>
 801b498:	4603      	mov	r3, r0
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d103      	bne.n	801b4a6 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b49e:	7bfb      	ldrb	r3, [r7, #15]
 801b4a0:	f023 0304 	bic.w	r3, r3, #4
 801b4a4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	3710      	adds	r7, #16
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bd80      	pop	{r7, pc}

0801b4b0 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b4b0:	b480      	push	{r7}
 801b4b2:	b083      	sub	sp, #12
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b4bc:	4618      	mov	r0, r3
 801b4be:	370c      	adds	r7, #12
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	bc80      	pop	{r7}
 801b4c4:	4770      	bx	lr

0801b4c6 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b4c6:	b480      	push	{r7}
 801b4c8:	b083      	sub	sp, #12
 801b4ca:	af00      	add	r7, sp, #0
 801b4cc:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b4d2:	4618      	mov	r0, r3
 801b4d4:	370c      	adds	r7, #12
 801b4d6:	46bd      	mov	sp, r7
 801b4d8:	bc80      	pop	{r7}
 801b4da:	4770      	bx	lr

0801b4dc <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b4dc:	b480      	push	{r7}
 801b4de:	b083      	sub	sp, #12
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b4e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	370c      	adds	r7, #12
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	bc80      	pop	{r7}
 801b4f0:	4770      	bx	lr
	...

0801b4f4 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b4f4:	b480      	push	{r7}
 801b4f6:	b083      	sub	sp, #12
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	460a      	mov	r2, r1
 801b4fe:	71fb      	strb	r3, [r7, #7]
 801b500:	4613      	mov	r3, r2
 801b502:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b504:	79bb      	ldrb	r3, [r7, #6]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d106      	bne.n	801b518 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b50a:	4b13      	ldr	r3, [pc, #76]	; (801b558 <RegionUS915AlternateDr+0x64>)
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	7b5a      	ldrb	r2, [r3, #13]
 801b510:	3201      	adds	r2, #1
 801b512:	b2d2      	uxtb	r2, r2
 801b514:	735a      	strb	r2, [r3, #13]
 801b516:	e005      	b.n	801b524 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b518:	4b0f      	ldr	r3, [pc, #60]	; (801b558 <RegionUS915AlternateDr+0x64>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	7b5a      	ldrb	r2, [r3, #13]
 801b51e:	3a01      	subs	r2, #1
 801b520:	b2d2      	uxtb	r2, r2
 801b522:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b524:	4b0c      	ldr	r3, [pc, #48]	; (801b558 <RegionUS915AlternateDr+0x64>)
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	7b5a      	ldrb	r2, [r3, #13]
 801b52a:	4b0c      	ldr	r3, [pc, #48]	; (801b55c <RegionUS915AlternateDr+0x68>)
 801b52c:	fba3 1302 	umull	r1, r3, r3, r2
 801b530:	0859      	lsrs	r1, r3, #1
 801b532:	460b      	mov	r3, r1
 801b534:	00db      	lsls	r3, r3, #3
 801b536:	440b      	add	r3, r1
 801b538:	1ad3      	subs	r3, r2, r3
 801b53a:	b2db      	uxtb	r3, r3
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d102      	bne.n	801b546 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b540:	2304      	movs	r3, #4
 801b542:	71fb      	strb	r3, [r7, #7]
 801b544:	e001      	b.n	801b54a <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801b546:	2300      	movs	r3, #0
 801b548:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b54e:	4618      	mov	r0, r3
 801b550:	370c      	adds	r7, #12
 801b552:	46bd      	mov	sp, r7
 801b554:	bc80      	pop	{r7}
 801b556:	4770      	bx	lr
 801b558:	20001c8c 	.word	0x20001c8c
 801b55c:	38e38e39 	.word	0x38e38e39

0801b560 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b560:	b580      	push	{r7, lr}
 801b562:	b0a8      	sub	sp, #160	; 0xa0
 801b564:	af02      	add	r7, sp, #8
 801b566:	60f8      	str	r0, [r7, #12]
 801b568:	60b9      	str	r1, [r7, #8]
 801b56a:	607a      	str	r2, [r7, #4]
 801b56c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b56e:	2300      	movs	r3, #0
 801b570:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b574:	2300      	movs	r3, #0
 801b576:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b57a:	2300      	movs	r3, #0
 801b57c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b57e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b582:	2244      	movs	r2, #68	; 0x44
 801b584:	2100      	movs	r1, #0
 801b586:	4618      	mov	r0, r3
 801b588:	f005 f81e 	bl	80205c8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b58c:	230c      	movs	r3, #12
 801b58e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b592:	4b67      	ldr	r3, [pc, #412]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	2204      	movs	r2, #4
 801b598:	2100      	movs	r1, #0
 801b59a:	4618      	mov	r0, r3
 801b59c:	f7fe f9d0 	bl	8019940 <RegionCommonCountChannels>
 801b5a0:	4603      	mov	r3, r0
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d10e      	bne.n	801b5c4 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b5a6:	4b62      	ldr	r3, [pc, #392]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	4b61      	ldr	r3, [pc, #388]	; (801b734 <RegionUS915NextChannel+0x1d4>)
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b5b4:	2204      	movs	r2, #4
 801b5b6:	4619      	mov	r1, r3
 801b5b8:	f7fe f9ee 	bl	8019998 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b5bc:	4b5c      	ldr	r3, [pc, #368]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	2200      	movs	r2, #0
 801b5c2:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b5ca:	2b03      	cmp	r3, #3
 801b5cc:	dd0c      	ble.n	801b5e8 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b5ce:	4b58      	ldr	r3, [pc, #352]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	891b      	ldrh	r3, [r3, #8]
 801b5d4:	b2db      	uxtb	r3, r3
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d106      	bne.n	801b5e8 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b5da:	4b56      	ldr	r3, [pc, #344]	; (801b734 <RegionUS915NextChannel+0x1d4>)
 801b5dc:	681a      	ldr	r2, [r3, #0]
 801b5de:	4b54      	ldr	r3, [pc, #336]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b5e6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	7a5b      	ldrb	r3, [r3, #9]
 801b5ec:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b5f4:	b2db      	uxtb	r3, r3
 801b5f6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b5f8:	4b4d      	ldr	r3, [pc, #308]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b5fe:	4b4d      	ldr	r3, [pc, #308]	; (801b734 <RegionUS915NextChannel+0x1d4>)
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801b604:	4b4c      	ldr	r3, [pc, #304]	; (801b738 <RegionUS915NextChannel+0x1d8>)
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b60a:	2348      	movs	r3, #72	; 0x48
 801b60c:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b60e:	2300      	movs	r3, #0
 801b610:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	685b      	ldr	r3, [r3, #4]
 801b61c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	7a9b      	ldrb	r3, [r3, #10]
 801b622:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b626:	2301      	movs	r3, #1
 801b628:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b62c:	f107 0314 	add.w	r3, r7, #20
 801b630:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b632:	68fa      	ldr	r2, [r7, #12]
 801b634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b638:	320c      	adds	r2, #12
 801b63a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b63e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	7d1b      	ldrb	r3, [r3, #20]
 801b646:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	8adb      	ldrh	r3, [r3, #22]
 801b654:	4619      	mov	r1, r3
 801b656:	4610      	mov	r0, r2
 801b658:	f7fe ff10 	bl	801a47c <GetTimeOnAir>
 801b65c:	4603      	mov	r3, r0
 801b65e:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b660:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b664:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b668:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	9301      	str	r3, [sp, #4]
 801b670:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b674:	9300      	str	r3, [sp, #0]
 801b676:	460b      	mov	r3, r1
 801b678:	6839      	ldr	r1, [r7, #0]
 801b67a:	f7fe fd68 	bl	801a14e <RegionCommonIdentifyChannels>
 801b67e:	4603      	mov	r3, r0
 801b680:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b684:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d14a      	bne.n	801b722 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	7a5b      	ldrb	r3, [r3, #9]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d00e      	beq.n	801b6b2 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b694:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b698:	3b01      	subs	r3, #1
 801b69a:	4619      	mov	r1, r3
 801b69c:	2000      	movs	r0, #0
 801b69e:	f000 f89f 	bl	801b7e0 <randr>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	3398      	adds	r3, #152	; 0x98
 801b6a6:	443b      	add	r3, r7
 801b6a8:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	701a      	strb	r2, [r3, #0]
 801b6b0:	e02e      	b.n	801b710 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d10e      	bne.n	801b6da <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b6bc:	4b1c      	ldr	r3, [pc, #112]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b6c2:	4b1b      	ldr	r3, [pc, #108]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b6c4:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b6c6:	330c      	adds	r3, #12
 801b6c8:	68ba      	ldr	r2, [r7, #8]
 801b6ca:	4619      	mov	r1, r3
 801b6cc:	f7fd fea2 	bl	8019414 <RegionBaseUSComputeNext125kHzJoinChannel>
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	2b03      	cmp	r3, #3
 801b6d4:	d11c      	bne.n	801b710 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b6d6:	2303      	movs	r3, #3
 801b6d8:	e025      	b.n	801b726 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b6da:	2300      	movs	r3, #0
 801b6dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b6e0:	e004      	b.n	801b6ec <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801b6e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b6e6:	3301      	adds	r3, #1
 801b6e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b6ec:	4b10      	ldr	r3, [pc, #64]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	891b      	ldrh	r3, [r3, #8]
 801b6f2:	b2da      	uxtb	r2, r3
 801b6f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b6f8:	fa42 f303 	asr.w	r3, r2, r3
 801b6fc:	f003 0301 	and.w	r3, r3, #1
 801b700:	2b00      	cmp	r3, #0
 801b702:	d0ee      	beq.n	801b6e2 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801b704:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b708:	3340      	adds	r3, #64	; 0x40
 801b70a:	b2da      	uxtb	r2, r3
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b710:	4b07      	ldr	r3, [pc, #28]	; (801b730 <RegionUS915NextChannel+0x1d0>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	4618      	mov	r0, r3
 801b716:	68bb      	ldr	r3, [r7, #8]
 801b718:	781b      	ldrb	r3, [r3, #0]
 801b71a:	2248      	movs	r2, #72	; 0x48
 801b71c:	4619      	mov	r1, r3
 801b71e:	f7fe f8db 	bl	80198d8 <RegionCommonChanDisable>
    }
    return status;
 801b722:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b726:	4618      	mov	r0, r3
 801b728:	3798      	adds	r7, #152	; 0x98
 801b72a:	46bd      	mov	sp, r7
 801b72c:	bd80      	pop	{r7, pc}
 801b72e:	bf00      	nop
 801b730:	20001c8c 	.word	0x20001c8c
 801b734:	20001c90 	.word	0x20001c90
 801b738:	20001c94 	.word	0x20001c94

0801b73c <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b73c:	b480      	push	{r7}
 801b73e:	b085      	sub	sp, #20
 801b740:	af00      	add	r7, sp, #0
 801b742:	4603      	mov	r3, r0
 801b744:	71fb      	strb	r3, [r7, #7]
 801b746:	460b      	mov	r3, r1
 801b748:	71bb      	strb	r3, [r7, #6]
 801b74a:	4613      	mov	r3, r2
 801b74c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b74e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b752:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b756:	4909      	ldr	r1, [pc, #36]	; (801b77c <RegionUS915ApplyDrOffset+0x40>)
 801b758:	0092      	lsls	r2, r2, #2
 801b75a:	440a      	add	r2, r1
 801b75c:	4413      	add	r3, r2
 801b75e:	781b      	ldrb	r3, [r3, #0]
 801b760:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b766:	2b00      	cmp	r3, #0
 801b768:	da01      	bge.n	801b76e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b76a:	2300      	movs	r3, #0
 801b76c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b76e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b770:	4618      	mov	r0, r3
 801b772:	3714      	adds	r7, #20
 801b774:	46bd      	mov	sp, r7
 801b776:	bc80      	pop	{r7}
 801b778:	4770      	bx	lr
 801b77a:	bf00      	nop
 801b77c:	08021dc0 	.word	0x08021dc0

0801b780 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b780:	b480      	push	{r7}
 801b782:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b784:	4b0d      	ldr	r3, [pc, #52]	; (801b7bc <rand1+0x3c>)
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	4a0d      	ldr	r2, [pc, #52]	; (801b7c0 <rand1+0x40>)
 801b78a:	fb02 f303 	mul.w	r3, r2, r3
 801b78e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b792:	3339      	adds	r3, #57	; 0x39
 801b794:	4a09      	ldr	r2, [pc, #36]	; (801b7bc <rand1+0x3c>)
 801b796:	6013      	str	r3, [r2, #0]
 801b798:	4b08      	ldr	r3, [pc, #32]	; (801b7bc <rand1+0x3c>)
 801b79a:	681a      	ldr	r2, [r3, #0]
 801b79c:	2303      	movs	r3, #3
 801b79e:	fba3 1302 	umull	r1, r3, r3, r2
 801b7a2:	1ad1      	subs	r1, r2, r3
 801b7a4:	0849      	lsrs	r1, r1, #1
 801b7a6:	440b      	add	r3, r1
 801b7a8:	0f99      	lsrs	r1, r3, #30
 801b7aa:	460b      	mov	r3, r1
 801b7ac:	07db      	lsls	r3, r3, #31
 801b7ae:	1a5b      	subs	r3, r3, r1
 801b7b0:	1ad1      	subs	r1, r2, r3
 801b7b2:	460b      	mov	r3, r1
}
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	bc80      	pop	{r7}
 801b7ba:	4770      	bx	lr
 801b7bc:	20000130 	.word	0x20000130
 801b7c0:	41c64e6d 	.word	0x41c64e6d

0801b7c4 <srand1>:

void srand1( uint32_t seed )
{
 801b7c4:	b480      	push	{r7}
 801b7c6:	b083      	sub	sp, #12
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
    next = seed;
 801b7cc:	4a03      	ldr	r2, [pc, #12]	; (801b7dc <srand1+0x18>)
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	6013      	str	r3, [r2, #0]
}
 801b7d2:	bf00      	nop
 801b7d4:	370c      	adds	r7, #12
 801b7d6:	46bd      	mov	sp, r7
 801b7d8:	bc80      	pop	{r7}
 801b7da:	4770      	bx	lr
 801b7dc:	20000130 	.word	0x20000130

0801b7e0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	b082      	sub	sp, #8
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
 801b7e8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b7ea:	f7ff ffc9 	bl	801b780 <rand1>
 801b7ee:	4602      	mov	r2, r0
 801b7f0:	6839      	ldr	r1, [r7, #0]
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	1acb      	subs	r3, r1, r3
 801b7f6:	3301      	adds	r3, #1
 801b7f8:	fb92 f1f3 	sdiv	r1, r2, r3
 801b7fc:	fb01 f303 	mul.w	r3, r1, r3
 801b800:	1ad2      	subs	r2, r2, r3
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	4413      	add	r3, r2
}
 801b806:	4618      	mov	r0, r3
 801b808:	3708      	adds	r7, #8
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bd80      	pop	{r7, pc}

0801b80e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b80e:	b480      	push	{r7}
 801b810:	b085      	sub	sp, #20
 801b812:	af00      	add	r7, sp, #0
 801b814:	60f8      	str	r0, [r7, #12]
 801b816:	60b9      	str	r1, [r7, #8]
 801b818:	4613      	mov	r3, r2
 801b81a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b81c:	e007      	b.n	801b82e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b81e:	68ba      	ldr	r2, [r7, #8]
 801b820:	1c53      	adds	r3, r2, #1
 801b822:	60bb      	str	r3, [r7, #8]
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	1c59      	adds	r1, r3, #1
 801b828:	60f9      	str	r1, [r7, #12]
 801b82a:	7812      	ldrb	r2, [r2, #0]
 801b82c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b82e:	88fb      	ldrh	r3, [r7, #6]
 801b830:	1e5a      	subs	r2, r3, #1
 801b832:	80fa      	strh	r2, [r7, #6]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d1f2      	bne.n	801b81e <memcpy1+0x10>
    }
}
 801b838:	bf00      	nop
 801b83a:	bf00      	nop
 801b83c:	3714      	adds	r7, #20
 801b83e:	46bd      	mov	sp, r7
 801b840:	bc80      	pop	{r7}
 801b842:	4770      	bx	lr

0801b844 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b844:	b480      	push	{r7}
 801b846:	b085      	sub	sp, #20
 801b848:	af00      	add	r7, sp, #0
 801b84a:	60f8      	str	r0, [r7, #12]
 801b84c:	60b9      	str	r1, [r7, #8]
 801b84e:	4613      	mov	r3, r2
 801b850:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b852:	88fb      	ldrh	r3, [r7, #6]
 801b854:	3b01      	subs	r3, #1
 801b856:	68fa      	ldr	r2, [r7, #12]
 801b858:	4413      	add	r3, r2
 801b85a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b85c:	e007      	b.n	801b86e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b85e:	68ba      	ldr	r2, [r7, #8]
 801b860:	1c53      	adds	r3, r2, #1
 801b862:	60bb      	str	r3, [r7, #8]
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	1e59      	subs	r1, r3, #1
 801b868:	60f9      	str	r1, [r7, #12]
 801b86a:	7812      	ldrb	r2, [r2, #0]
 801b86c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b86e:	88fb      	ldrh	r3, [r7, #6]
 801b870:	1e5a      	subs	r2, r3, #1
 801b872:	80fa      	strh	r2, [r7, #6]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d1f2      	bne.n	801b85e <memcpyr+0x1a>
    }
}
 801b878:	bf00      	nop
 801b87a:	bf00      	nop
 801b87c:	3714      	adds	r7, #20
 801b87e:	46bd      	mov	sp, r7
 801b880:	bc80      	pop	{r7}
 801b882:	4770      	bx	lr

0801b884 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b884:	b480      	push	{r7}
 801b886:	b083      	sub	sp, #12
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
 801b88c:	460b      	mov	r3, r1
 801b88e:	70fb      	strb	r3, [r7, #3]
 801b890:	4613      	mov	r3, r2
 801b892:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b894:	e004      	b.n	801b8a0 <memset1+0x1c>
    {
        *dst++ = value;
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	1c5a      	adds	r2, r3, #1
 801b89a:	607a      	str	r2, [r7, #4]
 801b89c:	78fa      	ldrb	r2, [r7, #3]
 801b89e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b8a0:	883b      	ldrh	r3, [r7, #0]
 801b8a2:	1e5a      	subs	r2, r3, #1
 801b8a4:	803a      	strh	r2, [r7, #0]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d1f5      	bne.n	801b896 <memset1+0x12>
    }
}
 801b8aa:	bf00      	nop
 801b8ac:	bf00      	nop
 801b8ae:	370c      	adds	r7, #12
 801b8b0:	46bd      	mov	sp, r7
 801b8b2:	bc80      	pop	{r7}
 801b8b4:	4770      	bx	lr
	...

0801b8b8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b8b8:	b480      	push	{r7}
 801b8ba:	b085      	sub	sp, #20
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	6078      	str	r0, [r7, #4]
 801b8c0:	460b      	mov	r3, r1
 801b8c2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b8c8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d101      	bne.n	801b8d4 <Crc32+0x1c>
    {
        return 0;
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	e026      	b.n	801b922 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	817b      	strh	r3, [r7, #10]
 801b8d8:	e01d      	b.n	801b916 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801b8da:	897b      	ldrh	r3, [r7, #10]
 801b8dc:	687a      	ldr	r2, [r7, #4]
 801b8de:	4413      	add	r3, r2
 801b8e0:	781b      	ldrb	r3, [r3, #0]
 801b8e2:	461a      	mov	r2, r3
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	4053      	eors	r3, r2
 801b8e8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	813b      	strh	r3, [r7, #8]
 801b8ee:	e00c      	b.n	801b90a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	085a      	lsrs	r2, r3, #1
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	f003 0301 	and.w	r3, r3, #1
 801b8fa:	425b      	negs	r3, r3
 801b8fc:	490b      	ldr	r1, [pc, #44]	; (801b92c <Crc32+0x74>)
 801b8fe:	400b      	ands	r3, r1
 801b900:	4053      	eors	r3, r2
 801b902:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b904:	893b      	ldrh	r3, [r7, #8]
 801b906:	3301      	adds	r3, #1
 801b908:	813b      	strh	r3, [r7, #8]
 801b90a:	893b      	ldrh	r3, [r7, #8]
 801b90c:	2b07      	cmp	r3, #7
 801b90e:	d9ef      	bls.n	801b8f0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801b910:	897b      	ldrh	r3, [r7, #10]
 801b912:	3301      	adds	r3, #1
 801b914:	817b      	strh	r3, [r7, #10]
 801b916:	897a      	ldrh	r2, [r7, #10]
 801b918:	887b      	ldrh	r3, [r7, #2]
 801b91a:	429a      	cmp	r2, r3
 801b91c:	d3dd      	bcc.n	801b8da <Crc32+0x22>
        }
    }

    return ~crc;
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	43db      	mvns	r3, r3
}
 801b922:	4618      	mov	r0, r3
 801b924:	3714      	adds	r7, #20
 801b926:	46bd      	mov	sp, r7
 801b928:	bc80      	pop	{r7}
 801b92a:	4770      	bx	lr
 801b92c:	edb88320 	.word	0xedb88320

0801b930 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b930:	b580      	push	{r7, lr}
 801b932:	b084      	sub	sp, #16
 801b934:	af02      	add	r7, sp, #8
 801b936:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b938:	4a24      	ldr	r2, [pc, #144]	; (801b9cc <RadioInit+0x9c>)
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b93e:	4b24      	ldr	r3, [pc, #144]	; (801b9d0 <RadioInit+0xa0>)
 801b940:	2200      	movs	r2, #0
 801b942:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b944:	4b22      	ldr	r3, [pc, #136]	; (801b9d0 <RadioInit+0xa0>)
 801b946:	2200      	movs	r2, #0
 801b948:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b94a:	4b21      	ldr	r3, [pc, #132]	; (801b9d0 <RadioInit+0xa0>)
 801b94c:	2200      	movs	r2, #0
 801b94e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b950:	4b1f      	ldr	r3, [pc, #124]	; (801b9d0 <RadioInit+0xa0>)
 801b952:	2200      	movs	r2, #0
 801b954:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801b956:	481f      	ldr	r0, [pc, #124]	; (801b9d4 <RadioInit+0xa4>)
 801b958:	f001 ffc2 	bl	801d8e0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801b95c:	4b1c      	ldr	r3, [pc, #112]	; (801b9d0 <RadioInit+0xa0>)
 801b95e:	2200      	movs	r2, #0
 801b960:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801b962:	4b1b      	ldr	r3, [pc, #108]	; (801b9d0 <RadioInit+0xa0>)
 801b964:	2200      	movs	r2, #0
 801b966:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801b968:	f002 fa56 	bl	801de18 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b96c:	2100      	movs	r1, #0
 801b96e:	2000      	movs	r0, #0
 801b970:	f002 fe22 	bl	801e5b8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801b974:	2204      	movs	r2, #4
 801b976:	2100      	movs	r1, #0
 801b978:	2001      	movs	r0, #1
 801b97a:	f002 fbdf 	bl	801e13c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b97e:	2300      	movs	r3, #0
 801b980:	2200      	movs	r2, #0
 801b982:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b986:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b98a:	f002 fb0f 	bl	801dfac <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801b98e:	f000 fe99 	bl	801c6c4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b992:	2300      	movs	r3, #0
 801b994:	9300      	str	r3, [sp, #0]
 801b996:	4b10      	ldr	r3, [pc, #64]	; (801b9d8 <RadioInit+0xa8>)
 801b998:	2200      	movs	r2, #0
 801b99a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b99e:	480f      	ldr	r0, [pc, #60]	; (801b9dc <RadioInit+0xac>)
 801b9a0:	f004 f84c 	bl	801fa3c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	9300      	str	r3, [sp, #0]
 801b9a8:	4b0d      	ldr	r3, [pc, #52]	; (801b9e0 <RadioInit+0xb0>)
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b9b0:	480c      	ldr	r0, [pc, #48]	; (801b9e4 <RadioInit+0xb4>)
 801b9b2:	f004 f843 	bl	801fa3c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b9b6:	4809      	ldr	r0, [pc, #36]	; (801b9dc <RadioInit+0xac>)
 801b9b8:	f004 f8e4 	bl	801fb84 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b9bc:	4809      	ldr	r0, [pc, #36]	; (801b9e4 <RadioInit+0xb4>)
 801b9be:	f004 f8e1 	bl	801fb84 <UTIL_TIMER_Stop>
}
 801b9c2:	bf00      	nop
 801b9c4:	3708      	adds	r7, #8
 801b9c6:	46bd      	mov	sp, r7
 801b9c8:	bd80      	pop	{r7, pc}
 801b9ca:	bf00      	nop
 801b9cc:	20001d98 	.word	0x20001d98
 801b9d0:	20001d9c 	.word	0x20001d9c
 801b9d4:	0801cabd 	.word	0x0801cabd
 801b9d8:	0801ca45 	.word	0x0801ca45
 801b9dc:	20001df8 	.word	0x20001df8
 801b9e0:	0801ca59 	.word	0x0801ca59
 801b9e4:	20001e10 	.word	0x20001e10

0801b9e8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b9ec:	f001 ffc0 	bl	801d970 <SUBGRF_GetOperatingMode>
 801b9f0:	4603      	mov	r3, r0
 801b9f2:	2b07      	cmp	r3, #7
 801b9f4:	d00a      	beq.n	801ba0c <RadioGetStatus+0x24>
 801b9f6:	2b07      	cmp	r3, #7
 801b9f8:	dc0a      	bgt.n	801ba10 <RadioGetStatus+0x28>
 801b9fa:	2b04      	cmp	r3, #4
 801b9fc:	d002      	beq.n	801ba04 <RadioGetStatus+0x1c>
 801b9fe:	2b05      	cmp	r3, #5
 801ba00:	d002      	beq.n	801ba08 <RadioGetStatus+0x20>
 801ba02:	e005      	b.n	801ba10 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801ba04:	2302      	movs	r3, #2
 801ba06:	e004      	b.n	801ba12 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801ba08:	2301      	movs	r3, #1
 801ba0a:	e002      	b.n	801ba12 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801ba0c:	2303      	movs	r3, #3
 801ba0e:	e000      	b.n	801ba12 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801ba10:	2300      	movs	r3, #0
    }
}
 801ba12:	4618      	mov	r0, r3
 801ba14:	bd80      	pop	{r7, pc}
	...

0801ba18 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b082      	sub	sp, #8
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	4603      	mov	r3, r0
 801ba20:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801ba22:	4a2a      	ldr	r2, [pc, #168]	; (801bacc <RadioSetModem+0xb4>)
 801ba24:	79fb      	ldrb	r3, [r7, #7]
 801ba26:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801ba28:	79fb      	ldrb	r3, [r7, #7]
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	f003 f997 	bl	801ed5e <RFW_SetRadioModem>
    switch( modem )
 801ba30:	79fb      	ldrb	r3, [r7, #7]
 801ba32:	2b05      	cmp	r3, #5
 801ba34:	d80e      	bhi.n	801ba54 <RadioSetModem+0x3c>
 801ba36:	a201      	add	r2, pc, #4	; (adr r2, 801ba3c <RadioSetModem+0x24>)
 801ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba3c:	0801ba63 	.word	0x0801ba63
 801ba40:	0801ba71 	.word	0x0801ba71
 801ba44:	0801ba55 	.word	0x0801ba55
 801ba48:	0801ba97 	.word	0x0801ba97
 801ba4c:	0801baa5 	.word	0x0801baa5
 801ba50:	0801bab3 	.word	0x0801bab3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801ba54:	2003      	movs	r0, #3
 801ba56:	f002 fb4b 	bl	801e0f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba5a:	4b1c      	ldr	r3, [pc, #112]	; (801bacc <RadioSetModem+0xb4>)
 801ba5c:	2200      	movs	r2, #0
 801ba5e:	735a      	strb	r2, [r3, #13]
        break;
 801ba60:	e02f      	b.n	801bac2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801ba62:	2000      	movs	r0, #0
 801ba64:	f002 fb44 	bl	801e0f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba68:	4b18      	ldr	r3, [pc, #96]	; (801bacc <RadioSetModem+0xb4>)
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	735a      	strb	r2, [r3, #13]
        break;
 801ba6e:	e028      	b.n	801bac2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801ba70:	2001      	movs	r0, #1
 801ba72:	f002 fb3d 	bl	801e0f0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801ba76:	4b15      	ldr	r3, [pc, #84]	; (801bacc <RadioSetModem+0xb4>)
 801ba78:	7b5a      	ldrb	r2, [r3, #13]
 801ba7a:	4b14      	ldr	r3, [pc, #80]	; (801bacc <RadioSetModem+0xb4>)
 801ba7c:	7b1b      	ldrb	r3, [r3, #12]
 801ba7e:	429a      	cmp	r2, r3
 801ba80:	d01e      	beq.n	801bac0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801ba82:	4b12      	ldr	r3, [pc, #72]	; (801bacc <RadioSetModem+0xb4>)
 801ba84:	7b1a      	ldrb	r2, [r3, #12]
 801ba86:	4b11      	ldr	r3, [pc, #68]	; (801bacc <RadioSetModem+0xb4>)
 801ba88:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801ba8a:	4b10      	ldr	r3, [pc, #64]	; (801bacc <RadioSetModem+0xb4>)
 801ba8c:	7b5b      	ldrb	r3, [r3, #13]
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f000 ffa2 	bl	801c9d8 <RadioSetPublicNetwork>
        }
        break;
 801ba94:	e014      	b.n	801bac0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801ba96:	2002      	movs	r0, #2
 801ba98:	f002 fb2a 	bl	801e0f0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba9c:	4b0b      	ldr	r3, [pc, #44]	; (801bacc <RadioSetModem+0xb4>)
 801ba9e:	2200      	movs	r2, #0
 801baa0:	735a      	strb	r2, [r3, #13]
        break;
 801baa2:	e00e      	b.n	801bac2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801baa4:	2002      	movs	r0, #2
 801baa6:	f002 fb23 	bl	801e0f0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801baaa:	4b08      	ldr	r3, [pc, #32]	; (801bacc <RadioSetModem+0xb4>)
 801baac:	2200      	movs	r2, #0
 801baae:	735a      	strb	r2, [r3, #13]
        break;
 801bab0:	e007      	b.n	801bac2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801bab2:	2000      	movs	r0, #0
 801bab4:	f002 fb1c 	bl	801e0f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bab8:	4b04      	ldr	r3, [pc, #16]	; (801bacc <RadioSetModem+0xb4>)
 801baba:	2200      	movs	r2, #0
 801babc:	735a      	strb	r2, [r3, #13]
        break;
 801babe:	e000      	b.n	801bac2 <RadioSetModem+0xaa>
        break;
 801bac0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801bac2:	bf00      	nop
 801bac4:	3708      	adds	r7, #8
 801bac6:	46bd      	mov	sp, r7
 801bac8:	bd80      	pop	{r7, pc}
 801baca:	bf00      	nop
 801bacc:	20001d9c 	.word	0x20001d9c

0801bad0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b082      	sub	sp, #8
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801bad8:	6878      	ldr	r0, [r7, #4]
 801bada:	f002 fac3 	bl	801e064 <SUBGRF_SetRfFrequency>
}
 801bade:	bf00      	nop
 801bae0:	3708      	adds	r7, #8
 801bae2:	46bd      	mov	sp, r7
 801bae4:	bd80      	pop	{r7, pc}

0801bae6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801bae6:	b580      	push	{r7, lr}
 801bae8:	b090      	sub	sp, #64	; 0x40
 801baea:	af0a      	add	r7, sp, #40	; 0x28
 801baec:	60f8      	str	r0, [r7, #12]
 801baee:	60b9      	str	r1, [r7, #8]
 801baf0:	603b      	str	r3, [r7, #0]
 801baf2:	4613      	mov	r3, r2
 801baf4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801baf6:	2301      	movs	r3, #1
 801baf8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801bafa:	2300      	movs	r3, #0
 801bafc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801bafe:	2300      	movs	r3, #0
 801bb00:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801bb02:	f000 fdf2 	bl	801c6ea <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801bb06:	2000      	movs	r0, #0
 801bb08:	f7ff ff86 	bl	801ba18 <RadioSetModem>

    RadioSetChannel( freq );
 801bb0c:	68f8      	ldr	r0, [r7, #12]
 801bb0e:	f7ff ffdf 	bl	801bad0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801bb12:	2301      	movs	r3, #1
 801bb14:	9309      	str	r3, [sp, #36]	; 0x24
 801bb16:	2300      	movs	r3, #0
 801bb18:	9308      	str	r3, [sp, #32]
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	9307      	str	r3, [sp, #28]
 801bb1e:	2300      	movs	r3, #0
 801bb20:	9306      	str	r3, [sp, #24]
 801bb22:	2300      	movs	r3, #0
 801bb24:	9305      	str	r3, [sp, #20]
 801bb26:	2300      	movs	r3, #0
 801bb28:	9304      	str	r3, [sp, #16]
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	9303      	str	r3, [sp, #12]
 801bb2e:	2300      	movs	r3, #0
 801bb30:	9302      	str	r3, [sp, #8]
 801bb32:	2303      	movs	r3, #3
 801bb34:	9301      	str	r3, [sp, #4]
 801bb36:	68bb      	ldr	r3, [r7, #8]
 801bb38:	9300      	str	r3, [sp, #0]
 801bb3a:	2300      	movs	r3, #0
 801bb3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 801bb40:	68b9      	ldr	r1, [r7, #8]
 801bb42:	2000      	movs	r0, #0
 801bb44:	f000 f83c 	bl	801bbc0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801bb48:	2000      	movs	r0, #0
 801bb4a:	f000 fdd5 	bl	801c6f8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801bb4e:	f000 ff71 	bl	801ca34 <RadioGetWakeupTime>
 801bb52:	4603      	mov	r3, r0
 801bb54:	4618      	mov	r0, r3
 801bb56:	f7e6 fe9f 	bl	8002898 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801bb5a:	f004 f92d 	bl	801fdb8 <UTIL_TIMER_GetCurrentTime>
 801bb5e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bb60:	e00d      	b.n	801bb7e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801bb62:	2000      	movs	r0, #0
 801bb64:	f000 feb6 	bl	801c8d4 <RadioRssi>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801bb6c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bb70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bb74:	429a      	cmp	r2, r3
 801bb76:	dd02      	ble.n	801bb7e <RadioIsChannelFree+0x98>
        {
            status = false;
 801bb78:	2300      	movs	r3, #0
 801bb7a:	75fb      	strb	r3, [r7, #23]
            break;
 801bb7c:	e006      	b.n	801bb8c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bb7e:	6938      	ldr	r0, [r7, #16]
 801bb80:	f004 f92c 	bl	801fddc <UTIL_TIMER_GetElapsedTime>
 801bb84:	4602      	mov	r2, r0
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	4293      	cmp	r3, r2
 801bb8a:	d8ea      	bhi.n	801bb62 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801bb8c:	f000 fdad 	bl	801c6ea <RadioStandby>

    return status;
 801bb90:	7dfb      	ldrb	r3, [r7, #23]
}
 801bb92:	4618      	mov	r0, r3
 801bb94:	3718      	adds	r7, #24
 801bb96:	46bd      	mov	sp, r7
 801bb98:	bd80      	pop	{r7, pc}

0801bb9a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801bb9a:	b580      	push	{r7, lr}
 801bb9c:	b082      	sub	sp, #8
 801bb9e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801bba0:	2300      	movs	r3, #0
 801bba2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801bba4:	2300      	movs	r3, #0
 801bba6:	2200      	movs	r2, #0
 801bba8:	2100      	movs	r1, #0
 801bbaa:	2000      	movs	r0, #0
 801bbac:	f002 f9fe 	bl	801dfac <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801bbb0:	f001 ffaf 	bl	801db12 <SUBGRF_GetRandom>
 801bbb4:	6078      	str	r0, [r7, #4]

    return rnd;
 801bbb6:	687b      	ldr	r3, [r7, #4]
}
 801bbb8:	4618      	mov	r0, r3
 801bbba:	3708      	adds	r7, #8
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	bd80      	pop	{r7, pc}

0801bbc0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b08a      	sub	sp, #40	; 0x28
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	60b9      	str	r1, [r7, #8]
 801bbc8:	607a      	str	r2, [r7, #4]
 801bbca:	461a      	mov	r2, r3
 801bbcc:	4603      	mov	r3, r0
 801bbce:	73fb      	strb	r3, [r7, #15]
 801bbd0:	4613      	mov	r3, r2
 801bbd2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801bbd4:	4ab9      	ldr	r2, [pc, #740]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bbd6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bbda:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801bbdc:	f003 f87d 	bl	801ecda <RFW_DeInit>
    if( rxContinuous == true )
 801bbe0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d001      	beq.n	801bbec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801bbe8:	2300      	movs	r3, #0
 801bbea:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801bbec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d004      	beq.n	801bbfe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801bbf4:	4ab2      	ldr	r2, [pc, #712]	; (801bec0 <RadioSetRxConfig+0x300>)
 801bbf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801bbfa:	7013      	strb	r3, [r2, #0]
 801bbfc:	e002      	b.n	801bc04 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801bbfe:	4bb0      	ldr	r3, [pc, #704]	; (801bec0 <RadioSetRxConfig+0x300>)
 801bc00:	22ff      	movs	r2, #255	; 0xff
 801bc02:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801bc04:	7bfb      	ldrb	r3, [r7, #15]
 801bc06:	2b05      	cmp	r3, #5
 801bc08:	d009      	beq.n	801bc1e <RadioSetRxConfig+0x5e>
 801bc0a:	2b05      	cmp	r3, #5
 801bc0c:	f300 81d7 	bgt.w	801bfbe <RadioSetRxConfig+0x3fe>
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	f000 80bf 	beq.w	801bd94 <RadioSetRxConfig+0x1d4>
 801bc16:	2b01      	cmp	r3, #1
 801bc18:	f000 8124 	beq.w	801be64 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801bc1c:	e1cf      	b.n	801bfbe <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801bc1e:	2001      	movs	r0, #1
 801bc20:	f002 f8bc 	bl	801dd9c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc24:	4ba5      	ldr	r3, [pc, #660]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc26:	2200      	movs	r2, #0
 801bc28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bc2c:	4aa3      	ldr	r2, [pc, #652]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801bc32:	4ba2      	ldr	r3, [pc, #648]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc34:	2209      	movs	r2, #9
 801bc36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801bc3a:	4ba0      	ldr	r3, [pc, #640]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bc40:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bc42:	68b8      	ldr	r0, [r7, #8]
 801bc44:	f002 ff7c 	bl	801eb40 <SUBGRF_GetFskBandwidthRegValue>
 801bc48:	4603      	mov	r3, r0
 801bc4a:	461a      	mov	r2, r3
 801bc4c:	4b9b      	ldr	r3, [pc, #620]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc52:	4b9a      	ldr	r3, [pc, #616]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc54:	2200      	movs	r2, #0
 801bc56:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bc58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bc5a:	00db      	lsls	r3, r3, #3
 801bc5c:	b29a      	uxth	r2, r3
 801bc5e:	4b97      	ldr	r3, [pc, #604]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc60:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801bc62:	4b96      	ldr	r3, [pc, #600]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc64:	2200      	movs	r2, #0
 801bc66:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801bc68:	4b94      	ldr	r3, [pc, #592]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc6a:	2210      	movs	r2, #16
 801bc6c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bc6e:	4b93      	ldr	r3, [pc, #588]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc70:	2200      	movs	r2, #0
 801bc72:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801bc74:	4b91      	ldr	r3, [pc, #580]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc76:	2200      	movs	r2, #0
 801bc78:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bc7a:	4b91      	ldr	r3, [pc, #580]	; (801bec0 <RadioSetRxConfig+0x300>)
 801bc7c:	781a      	ldrb	r2, [r3, #0]
 801bc7e:	4b8f      	ldr	r3, [pc, #572]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc80:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bc82:	4b8e      	ldr	r3, [pc, #568]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc84:	2201      	movs	r2, #1
 801bc86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801bc88:	4b8c      	ldr	r3, [pc, #560]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bc8a:	2200      	movs	r2, #0
 801bc8c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801bc8e:	2005      	movs	r0, #5
 801bc90:	f7ff fec2 	bl	801ba18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc94:	488b      	ldr	r0, [pc, #556]	; (801bec4 <RadioSetRxConfig+0x304>)
 801bc96:	f002 fb1f 	bl	801e2d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc9a:	488b      	ldr	r0, [pc, #556]	; (801bec8 <RadioSetRxConfig+0x308>)
 801bc9c:	f002 fbee 	bl	801e47c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bca0:	4a8a      	ldr	r2, [pc, #552]	; (801becc <RadioSetRxConfig+0x30c>)
 801bca2:	f107 031c 	add.w	r3, r7, #28
 801bca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bcaa:	e883 0003 	stmia.w	r3, {r0, r1}
 801bcae:	f107 031c 	add.w	r3, r7, #28
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	f001 feab 	bl	801da0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bcb8:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bcbc:	f001 fef6 	bl	801daac <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801bcc0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bcc4:	f000 fe25 	bl	801c912 <RadioRead>
 801bcc8:	4603      	mov	r3, r0
 801bcca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801bcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcd2:	f023 0310 	bic.w	r3, r3, #16
 801bcd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801bcda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcde:	4619      	mov	r1, r3
 801bce0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bce4:	f000 fe03 	bl	801c8ee <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801bce8:	2104      	movs	r1, #4
 801bcea:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801bcee:	f000 fdfe 	bl	801c8ee <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801bcf2:	f640 009b 	movw	r0, #2203	; 0x89b
 801bcf6:	f000 fe0c 	bl	801c912 <RadioRead>
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bd00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd04:	f023 031c 	bic.w	r3, r3, #28
 801bd08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801bd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd10:	f043 0308 	orr.w	r3, r3, #8
 801bd14:	b2db      	uxtb	r3, r3
 801bd16:	4619      	mov	r1, r3
 801bd18:	f640 009b 	movw	r0, #2203	; 0x89b
 801bd1c:	f000 fde7 	bl	801c8ee <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801bd20:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bd24:	f000 fdf5 	bl	801c912 <RadioRead>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bd2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd32:	f023 0318 	bic.w	r3, r3, #24
 801bd36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801bd3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd3e:	f043 0318 	orr.w	r3, r3, #24
 801bd42:	b2db      	uxtb	r3, r3
 801bd44:	4619      	mov	r1, r3
 801bd46:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bd4a:	f000 fdd0 	bl	801c8ee <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801bd4e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bd52:	f000 fdde 	bl	801c912 <RadioRead>
 801bd56:	4603      	mov	r3, r0
 801bd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801bd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801bd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd6c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801bd70:	b2db      	uxtb	r3, r3
 801bd72:	4619      	mov	r1, r3
 801bd74:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bd78:	f000 fdb9 	bl	801c8ee <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bd7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bd7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bd82:	fb02 f303 	mul.w	r3, r2, r3
 801bd86:	461a      	mov	r2, r3
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd8e:	4a4b      	ldr	r2, [pc, #300]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bd90:	6093      	str	r3, [r2, #8]
            break;
 801bd92:	e115      	b.n	801bfc0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bd94:	2000      	movs	r0, #0
 801bd96:	f002 f801 	bl	801dd9c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd9a:	4b48      	ldr	r3, [pc, #288]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bda2:	4a46      	ldr	r2, [pc, #280]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bda8:	4b44      	ldr	r3, [pc, #272]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdaa:	220b      	movs	r2, #11
 801bdac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bdb0:	68b8      	ldr	r0, [r7, #8]
 801bdb2:	f002 fec5 	bl	801eb40 <SUBGRF_GetFskBandwidthRegValue>
 801bdb6:	4603      	mov	r3, r0
 801bdb8:	461a      	mov	r2, r3
 801bdba:	4b40      	ldr	r3, [pc, #256]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bdc0:	4b3e      	ldr	r3, [pc, #248]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bdc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bdc8:	00db      	lsls	r3, r3, #3
 801bdca:	b29a      	uxth	r2, r3
 801bdcc:	4b3b      	ldr	r3, [pc, #236]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bdd0:	4b3a      	ldr	r3, [pc, #232]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdd2:	2204      	movs	r2, #4
 801bdd4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801bdd6:	4b39      	ldr	r3, [pc, #228]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdd8:	2218      	movs	r2, #24
 801bdda:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bddc:	4b37      	ldr	r3, [pc, #220]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdde:	2200      	movs	r2, #0
 801bde0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bde2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bde6:	f083 0301 	eor.w	r3, r3, #1
 801bdea:	b2db      	uxtb	r3, r3
 801bdec:	461a      	mov	r2, r3
 801bdee:	4b33      	ldr	r3, [pc, #204]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdf0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bdf2:	4b33      	ldr	r3, [pc, #204]	; (801bec0 <RadioSetRxConfig+0x300>)
 801bdf4:	781a      	ldrb	r2, [r3, #0]
 801bdf6:	4b31      	ldr	r3, [pc, #196]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801bdf8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801bdfa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d003      	beq.n	801be0a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801be02:	4b2e      	ldr	r3, [pc, #184]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be04:	22f2      	movs	r2, #242	; 0xf2
 801be06:	75da      	strb	r2, [r3, #23]
 801be08:	e002      	b.n	801be10 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801be0a:	4b2c      	ldr	r3, [pc, #176]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be0c:	2201      	movs	r2, #1
 801be0e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801be10:	4b2a      	ldr	r3, [pc, #168]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be12:	2201      	movs	r2, #1
 801be14:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801be16:	f000 fc68 	bl	801c6ea <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801be1a:	2000      	movs	r0, #0
 801be1c:	f7ff fdfc 	bl	801ba18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be20:	4828      	ldr	r0, [pc, #160]	; (801bec4 <RadioSetRxConfig+0x304>)
 801be22:	f002 fa59 	bl	801e2d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be26:	4828      	ldr	r0, [pc, #160]	; (801bec8 <RadioSetRxConfig+0x308>)
 801be28:	f002 fb28 	bl	801e47c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801be2c:	4a28      	ldr	r2, [pc, #160]	; (801bed0 <RadioSetRxConfig+0x310>)
 801be2e:	f107 0314 	add.w	r3, r7, #20
 801be32:	e892 0003 	ldmia.w	r2, {r0, r1}
 801be36:	e883 0003 	stmia.w	r3, {r0, r1}
 801be3a:	f107 0314 	add.w	r3, r7, #20
 801be3e:	4618      	mov	r0, r3
 801be40:	f001 fde5 	bl	801da0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801be44:	f240 10ff 	movw	r0, #511	; 0x1ff
 801be48:	f001 fe30 	bl	801daac <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801be4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801be4e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801be52:	fb02 f303 	mul.w	r3, r2, r3
 801be56:	461a      	mov	r2, r3
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	fbb2 f3f3 	udiv	r3, r2, r3
 801be5e:	4a17      	ldr	r2, [pc, #92]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be60:	6093      	str	r3, [r2, #8]
            break;
 801be62:	e0ad      	b.n	801bfc0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801be64:	2000      	movs	r0, #0
 801be66:	f001 ff99 	bl	801dd9c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801be6a:	4b14      	ldr	r3, [pc, #80]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be6c:	2201      	movs	r2, #1
 801be6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	b2da      	uxtb	r2, r3
 801be76:	4b11      	ldr	r3, [pc, #68]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801be7c:	4a15      	ldr	r2, [pc, #84]	; (801bed4 <RadioSetRxConfig+0x314>)
 801be7e:	68bb      	ldr	r3, [r7, #8]
 801be80:	4413      	add	r3, r2
 801be82:	781a      	ldrb	r2, [r3, #0]
 801be84:	4b0d      	ldr	r3, [pc, #52]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801be8a:	4a0c      	ldr	r2, [pc, #48]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801be8c:	7bbb      	ldrb	r3, [r7, #14]
 801be8e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801be92:	68bb      	ldr	r3, [r7, #8]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d105      	bne.n	801bea4 <RadioSetRxConfig+0x2e4>
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	2b0b      	cmp	r3, #11
 801be9c:	d008      	beq.n	801beb0 <RadioSetRxConfig+0x2f0>
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	2b0c      	cmp	r3, #12
 801bea2:	d005      	beq.n	801beb0 <RadioSetRxConfig+0x2f0>
 801bea4:	68bb      	ldr	r3, [r7, #8]
 801bea6:	2b01      	cmp	r3, #1
 801bea8:	d116      	bne.n	801bed8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	2b0c      	cmp	r3, #12
 801beae:	d113      	bne.n	801bed8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801beb0:	4b02      	ldr	r3, [pc, #8]	; (801bebc <RadioSetRxConfig+0x2fc>)
 801beb2:	2201      	movs	r2, #1
 801beb4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801beb8:	e012      	b.n	801bee0 <RadioSetRxConfig+0x320>
 801beba:	bf00      	nop
 801bebc:	20001d9c 	.word	0x20001d9c
 801bec0:	20000134 	.word	0x20000134
 801bec4:	20001dd4 	.word	0x20001dd4
 801bec8:	20001daa 	.word	0x20001daa
 801becc:	080217c4 	.word	0x080217c4
 801bed0:	080217cc 	.word	0x080217cc
 801bed4:	08021e80 	.word	0x08021e80
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bed8:	4b3b      	ldr	r3, [pc, #236]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801beda:	2200      	movs	r2, #0
 801bedc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bee0:	4b39      	ldr	r3, [pc, #228]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bee2:	2201      	movs	r2, #1
 801bee4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bee6:	4b38      	ldr	r3, [pc, #224]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bee8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801beec:	2b05      	cmp	r3, #5
 801beee:	d004      	beq.n	801befa <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bef0:	4b35      	ldr	r3, [pc, #212]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bef6:	2b06      	cmp	r3, #6
 801bef8:	d10a      	bne.n	801bf10 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801befa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801befc:	2b0b      	cmp	r3, #11
 801befe:	d803      	bhi.n	801bf08 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bf00:	4b31      	ldr	r3, [pc, #196]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf02:	220c      	movs	r2, #12
 801bf04:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bf06:	e006      	b.n	801bf16 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bf08:	4a2f      	ldr	r2, [pc, #188]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bf0c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bf0e:	e002      	b.n	801bf16 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bf10:	4a2d      	ldr	r2, [pc, #180]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bf14:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bf16:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bf1a:	4b2b      	ldr	r3, [pc, #172]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf1c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bf1e:	4b2b      	ldr	r3, [pc, #172]	; (801bfcc <RadioSetRxConfig+0x40c>)
 801bf20:	781a      	ldrb	r2, [r3, #0]
 801bf22:	4b29      	ldr	r3, [pc, #164]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf24:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bf26:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801bf2a:	4b27      	ldr	r3, [pc, #156]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf2c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bf30:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bf34:	4b24      	ldr	r3, [pc, #144]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bf3a:	f000 fbd6 	bl	801c6ea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801bf3e:	2001      	movs	r0, #1
 801bf40:	f7ff fd6a 	bl	801ba18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf44:	4822      	ldr	r0, [pc, #136]	; (801bfd0 <RadioSetRxConfig+0x410>)
 801bf46:	f002 f9c7 	bl	801e2d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bf4a:	4822      	ldr	r0, [pc, #136]	; (801bfd4 <RadioSetRxConfig+0x414>)
 801bf4c:	f002 fa96 	bl	801e47c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bf50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bf52:	b2db      	uxtb	r3, r3
 801bf54:	4618      	mov	r0, r3
 801bf56:	f001 ff30 	bl	801ddba <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801bf5a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bf5e:	f002 fbe9 	bl	801e734 <SUBGRF_ReadRegister>
 801bf62:	4603      	mov	r3, r0
 801bf64:	f003 0301 	and.w	r3, r3, #1
 801bf68:	b2db      	uxtb	r3, r3
 801bf6a:	4619      	mov	r1, r3
 801bf6c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bf70:	f002 fbcc 	bl	801e70c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bf74:	4b14      	ldr	r3, [pc, #80]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bf76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bf7a:	2b01      	cmp	r3, #1
 801bf7c:	d10d      	bne.n	801bf9a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bf7e:	f240 7036 	movw	r0, #1846	; 0x736
 801bf82:	f002 fbd7 	bl	801e734 <SUBGRF_ReadRegister>
 801bf86:	4603      	mov	r3, r0
 801bf88:	f023 0304 	bic.w	r3, r3, #4
 801bf8c:	b2db      	uxtb	r3, r3
 801bf8e:	4619      	mov	r1, r3
 801bf90:	f240 7036 	movw	r0, #1846	; 0x736
 801bf94:	f002 fbba 	bl	801e70c <SUBGRF_WriteRegister>
 801bf98:	e00c      	b.n	801bfb4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bf9a:	f240 7036 	movw	r0, #1846	; 0x736
 801bf9e:	f002 fbc9 	bl	801e734 <SUBGRF_ReadRegister>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	f043 0304 	orr.w	r3, r3, #4
 801bfa8:	b2db      	uxtb	r3, r3
 801bfaa:	4619      	mov	r1, r3
 801bfac:	f240 7036 	movw	r0, #1846	; 0x736
 801bfb0:	f002 fbac 	bl	801e70c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bfb4:	4b04      	ldr	r3, [pc, #16]	; (801bfc8 <RadioSetRxConfig+0x408>)
 801bfb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bfba:	609a      	str	r2, [r3, #8]
            break;
 801bfbc:	e000      	b.n	801bfc0 <RadioSetRxConfig+0x400>
            break;
 801bfbe:	bf00      	nop
    }
}
 801bfc0:	bf00      	nop
 801bfc2:	3728      	adds	r7, #40	; 0x28
 801bfc4:	46bd      	mov	sp, r7
 801bfc6:	bd80      	pop	{r7, pc}
 801bfc8:	20001d9c 	.word	0x20001d9c
 801bfcc:	20000134 	.word	0x20000134
 801bfd0:	20001dd4 	.word	0x20001dd4
 801bfd4:	20001daa 	.word	0x20001daa

0801bfd8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b086      	sub	sp, #24
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	60ba      	str	r2, [r7, #8]
 801bfe0:	607b      	str	r3, [r7, #4]
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	73fb      	strb	r3, [r7, #15]
 801bfe6:	460b      	mov	r3, r1
 801bfe8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801bfea:	f002 fe76 	bl	801ecda <RFW_DeInit>
    switch( modem )
 801bfee:	7bfb      	ldrb	r3, [r7, #15]
 801bff0:	2b04      	cmp	r3, #4
 801bff2:	f000 80c7 	beq.w	801c184 <RadioSetTxConfig+0x1ac>
 801bff6:	2b04      	cmp	r3, #4
 801bff8:	f300 80d6 	bgt.w	801c1a8 <RadioSetTxConfig+0x1d0>
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d002      	beq.n	801c006 <RadioSetTxConfig+0x2e>
 801c000:	2b01      	cmp	r3, #1
 801c002:	d059      	beq.n	801c0b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c004:	e0d0      	b.n	801c1a8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c006:	4b77      	ldr	r3, [pc, #476]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c008:	2200      	movs	r2, #0
 801c00a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c00e:	4a75      	ldr	r2, [pc, #468]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c010:	6a3b      	ldr	r3, [r7, #32]
 801c012:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801c014:	4b73      	ldr	r3, [pc, #460]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c016:	220b      	movs	r2, #11
 801c018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	f002 fd8f 	bl	801eb40 <SUBGRF_GetFskBandwidthRegValue>
 801c022:	4603      	mov	r3, r0
 801c024:	461a      	mov	r2, r3
 801c026:	4b6f      	ldr	r3, [pc, #444]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801c02c:	4a6d      	ldr	r2, [pc, #436]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c032:	4b6c      	ldr	r3, [pc, #432]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c034:	2200      	movs	r2, #0
 801c036:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c03a:	00db      	lsls	r3, r3, #3
 801c03c:	b29a      	uxth	r2, r3
 801c03e:	4b69      	ldr	r3, [pc, #420]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c040:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801c042:	4b68      	ldr	r3, [pc, #416]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c044:	2204      	movs	r2, #4
 801c046:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801c048:	4b66      	ldr	r3, [pc, #408]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c04a:	2218      	movs	r2, #24
 801c04c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c04e:	4b65      	ldr	r3, [pc, #404]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c050:	2200      	movs	r2, #0
 801c052:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801c054:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c058:	f083 0301 	eor.w	r3, r3, #1
 801c05c:	b2db      	uxtb	r3, r3
 801c05e:	461a      	mov	r2, r3
 801c060:	4b60      	ldr	r3, [pc, #384]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c062:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801c064:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d003      	beq.n	801c074 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801c06c:	4b5d      	ldr	r3, [pc, #372]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c06e:	22f2      	movs	r2, #242	; 0xf2
 801c070:	75da      	strb	r2, [r3, #23]
 801c072:	e002      	b.n	801c07a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c074:	4b5b      	ldr	r3, [pc, #364]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c076:	2201      	movs	r2, #1
 801c078:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801c07a:	4b5a      	ldr	r3, [pc, #360]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c07c:	2201      	movs	r2, #1
 801c07e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801c080:	f000 fb33 	bl	801c6ea <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801c084:	2000      	movs	r0, #0
 801c086:	f7ff fcc7 	bl	801ba18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c08a:	4857      	ldr	r0, [pc, #348]	; (801c1e8 <RadioSetTxConfig+0x210>)
 801c08c:	f002 f924 	bl	801e2d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c090:	4856      	ldr	r0, [pc, #344]	; (801c1ec <RadioSetTxConfig+0x214>)
 801c092:	f002 f9f3 	bl	801e47c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c096:	4a56      	ldr	r2, [pc, #344]	; (801c1f0 <RadioSetTxConfig+0x218>)
 801c098:	f107 0310 	add.w	r3, r7, #16
 801c09c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c0a0:	e883 0003 	stmia.w	r3, {r0, r1}
 801c0a4:	f107 0310 	add.w	r3, r7, #16
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	f001 fcb0 	bl	801da0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c0ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c0b2:	f001 fcfb 	bl	801daac <SUBGRF_SetWhiteningSeed>
            break;
 801c0b6:	e078      	b.n	801c1aa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c0b8:	4b4a      	ldr	r3, [pc, #296]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c0ba:	2201      	movs	r2, #1
 801c0bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801c0c0:	6a3b      	ldr	r3, [r7, #32]
 801c0c2:	b2da      	uxtb	r2, r3
 801c0c4:	4b47      	ldr	r3, [pc, #284]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801c0ca:	4a4a      	ldr	r2, [pc, #296]	; (801c1f4 <RadioSetTxConfig+0x21c>)
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	4413      	add	r3, r2
 801c0d0:	781a      	ldrb	r2, [r3, #0]
 801c0d2:	4b44      	ldr	r3, [pc, #272]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c0d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801c0d8:	4a42      	ldr	r2, [pc, #264]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c0da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c0de:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d105      	bne.n	801c0f4 <RadioSetTxConfig+0x11c>
 801c0e8:	6a3b      	ldr	r3, [r7, #32]
 801c0ea:	2b0b      	cmp	r3, #11
 801c0ec:	d008      	beq.n	801c100 <RadioSetTxConfig+0x128>
 801c0ee:	6a3b      	ldr	r3, [r7, #32]
 801c0f0:	2b0c      	cmp	r3, #12
 801c0f2:	d005      	beq.n	801c100 <RadioSetTxConfig+0x128>
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	2b01      	cmp	r3, #1
 801c0f8:	d107      	bne.n	801c10a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c0fa:	6a3b      	ldr	r3, [r7, #32]
 801c0fc:	2b0c      	cmp	r3, #12
 801c0fe:	d104      	bne.n	801c10a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801c100:	4b38      	ldr	r3, [pc, #224]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c102:	2201      	movs	r2, #1
 801c104:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801c108:	e003      	b.n	801c112 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801c10a:	4b36      	ldr	r3, [pc, #216]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c10c:	2200      	movs	r2, #0
 801c10e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c112:	4b34      	ldr	r3, [pc, #208]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c114:	2201      	movs	r2, #1
 801c116:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c118:	4b32      	ldr	r3, [pc, #200]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c11a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c11e:	2b05      	cmp	r3, #5
 801c120:	d004      	beq.n	801c12c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c122:	4b30      	ldr	r3, [pc, #192]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c128:	2b06      	cmp	r3, #6
 801c12a:	d10a      	bne.n	801c142 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801c12c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c12e:	2b0b      	cmp	r3, #11
 801c130:	d803      	bhi.n	801c13a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c132:	4b2c      	ldr	r3, [pc, #176]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c134:	220c      	movs	r2, #12
 801c136:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c138:	e006      	b.n	801c148 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c13a:	4a2a      	ldr	r2, [pc, #168]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c13c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c13e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c140:	e002      	b.n	801c148 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c142:	4a28      	ldr	r2, [pc, #160]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c146:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c148:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c14c:	4b25      	ldr	r3, [pc, #148]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c14e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c150:	4b29      	ldr	r3, [pc, #164]	; (801c1f8 <RadioSetTxConfig+0x220>)
 801c152:	781a      	ldrb	r2, [r3, #0]
 801c154:	4b23      	ldr	r3, [pc, #140]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c156:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c158:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c15c:	4b21      	ldr	r3, [pc, #132]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c15e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c162:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c166:	4b1f      	ldr	r3, [pc, #124]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c16c:	f000 fabd 	bl	801c6ea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c170:	2001      	movs	r0, #1
 801c172:	f7ff fc51 	bl	801ba18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c176:	481c      	ldr	r0, [pc, #112]	; (801c1e8 <RadioSetTxConfig+0x210>)
 801c178:	f002 f8ae 	bl	801e2d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c17c:	481b      	ldr	r0, [pc, #108]	; (801c1ec <RadioSetTxConfig+0x214>)
 801c17e:	f002 f97d 	bl	801e47c <SUBGRF_SetPacketParams>
            break;
 801c182:	e012      	b.n	801c1aa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801c184:	2004      	movs	r0, #4
 801c186:	f7ff fc47 	bl	801ba18 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c18a:	4b16      	ldr	r3, [pc, #88]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c18c:	2202      	movs	r2, #2
 801c18e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801c192:	4a14      	ldr	r2, [pc, #80]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c194:	6a3b      	ldr	r3, [r7, #32]
 801c196:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c198:	4b12      	ldr	r3, [pc, #72]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c19a:	2216      	movs	r2, #22
 801c19c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c1a0:	4811      	ldr	r0, [pc, #68]	; (801c1e8 <RadioSetTxConfig+0x210>)
 801c1a2:	f002 f899 	bl	801e2d8 <SUBGRF_SetModulationParams>
            break;
 801c1a6:	e000      	b.n	801c1aa <RadioSetTxConfig+0x1d2>
            break;
 801c1a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c1aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	f002 fbc8 	bl	801e944 <SUBGRF_SetRfTxPower>
 801c1b4:	4603      	mov	r3, r0
 801c1b6:	461a      	mov	r2, r3
 801c1b8:	4b0a      	ldr	r3, [pc, #40]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c1ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c1be:	210e      	movs	r1, #14
 801c1c0:	f640 101f 	movw	r0, #2335	; 0x91f
 801c1c4:	f002 faa2 	bl	801e70c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c1c8:	4b06      	ldr	r3, [pc, #24]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c1ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	f002 fd97 	bl	801ed02 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c1d4:	4a03      	ldr	r2, [pc, #12]	; (801c1e4 <RadioSetTxConfig+0x20c>)
 801c1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1d8:	6053      	str	r3, [r2, #4]
}
 801c1da:	bf00      	nop
 801c1dc:	3718      	adds	r7, #24
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd80      	pop	{r7, pc}
 801c1e2:	bf00      	nop
 801c1e4:	20001d9c 	.word	0x20001d9c
 801c1e8:	20001dd4 	.word	0x20001dd4
 801c1ec:	20001daa 	.word	0x20001daa
 801c1f0:	080217cc 	.word	0x080217cc
 801c1f4:	08021e80 	.word	0x08021e80
 801c1f8:	20000134 	.word	0x20000134

0801c1fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801c1fc:	b480      	push	{r7}
 801c1fe:	b083      	sub	sp, #12
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
    return true;
 801c204:	2301      	movs	r3, #1
}
 801c206:	4618      	mov	r0, r3
 801c208:	370c      	adds	r7, #12
 801c20a:	46bd      	mov	sp, r7
 801c20c:	bc80      	pop	{r7}
 801c20e:	4770      	bx	lr

0801c210 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801c210:	b480      	push	{r7}
 801c212:	b085      	sub	sp, #20
 801c214:	af00      	add	r7, sp, #0
 801c216:	4603      	mov	r3, r0
 801c218:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801c21a:	2300      	movs	r3, #0
 801c21c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801c21e:	79fb      	ldrb	r3, [r7, #7]
 801c220:	2b0a      	cmp	r3, #10
 801c222:	d83e      	bhi.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
 801c224:	a201      	add	r2, pc, #4	; (adr r2, 801c22c <RadioGetLoRaBandwidthInHz+0x1c>)
 801c226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c22a:	bf00      	nop
 801c22c:	0801c259 	.word	0x0801c259
 801c230:	0801c269 	.word	0x0801c269
 801c234:	0801c279 	.word	0x0801c279
 801c238:	0801c289 	.word	0x0801c289
 801c23c:	0801c291 	.word	0x0801c291
 801c240:	0801c297 	.word	0x0801c297
 801c244:	0801c29d 	.word	0x0801c29d
 801c248:	0801c2a3 	.word	0x0801c2a3
 801c24c:	0801c261 	.word	0x0801c261
 801c250:	0801c271 	.word	0x0801c271
 801c254:	0801c281 	.word	0x0801c281
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801c258:	f641 6384 	movw	r3, #7812	; 0x1e84
 801c25c:	60fb      	str	r3, [r7, #12]
        break;
 801c25e:	e020      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801c260:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801c264:	60fb      	str	r3, [r7, #12]
        break;
 801c266:	e01c      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801c268:	f643 5309 	movw	r3, #15625	; 0x3d09
 801c26c:	60fb      	str	r3, [r7, #12]
        break;
 801c26e:	e018      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801c270:	f245 1361 	movw	r3, #20833	; 0x5161
 801c274:	60fb      	str	r3, [r7, #12]
        break;
 801c276:	e014      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801c278:	f647 2312 	movw	r3, #31250	; 0x7a12
 801c27c:	60fb      	str	r3, [r7, #12]
        break;
 801c27e:	e010      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801c280:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801c284:	60fb      	str	r3, [r7, #12]
        break;
 801c286:	e00c      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801c288:	f24f 4324 	movw	r3, #62500	; 0xf424
 801c28c:	60fb      	str	r3, [r7, #12]
        break;
 801c28e:	e008      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801c290:	4b07      	ldr	r3, [pc, #28]	; (801c2b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 801c292:	60fb      	str	r3, [r7, #12]
        break;
 801c294:	e005      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801c296:	4b07      	ldr	r3, [pc, #28]	; (801c2b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 801c298:	60fb      	str	r3, [r7, #12]
        break;
 801c29a:	e002      	b.n	801c2a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801c29c:	4b06      	ldr	r3, [pc, #24]	; (801c2b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 801c29e:	60fb      	str	r3, [r7, #12]
        break;
 801c2a0:	bf00      	nop
    }

    return bandwidthInHz;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	3714      	adds	r7, #20
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bc80      	pop	{r7}
 801c2ac:	4770      	bx	lr
 801c2ae:	bf00      	nop
 801c2b0:	0001e848 	.word	0x0001e848
 801c2b4:	0003d090 	.word	0x0003d090
 801c2b8:	0007a120 	.word	0x0007a120

0801c2bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c2bc:	b480      	push	{r7}
 801c2be:	b083      	sub	sp, #12
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	6078      	str	r0, [r7, #4]
 801c2c4:	4608      	mov	r0, r1
 801c2c6:	4611      	mov	r1, r2
 801c2c8:	461a      	mov	r2, r3
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	70fb      	strb	r3, [r7, #3]
 801c2ce:	460b      	mov	r3, r1
 801c2d0:	803b      	strh	r3, [r7, #0]
 801c2d2:	4613      	mov	r3, r2
 801c2d4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801c2d6:	883b      	ldrh	r3, [r7, #0]
 801c2d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c2da:	78ba      	ldrb	r2, [r7, #2]
 801c2dc:	f082 0201 	eor.w	r2, r2, #1
 801c2e0:	b2d2      	uxtb	r2, r2
 801c2e2:	2a00      	cmp	r2, #0
 801c2e4:	d001      	beq.n	801c2ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 801c2e6:	2208      	movs	r2, #8
 801c2e8:	e000      	b.n	801c2ec <RadioGetGfskTimeOnAirNumerator+0x30>
 801c2ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801c2ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c2ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801c2f2:	7c3b      	ldrb	r3, [r7, #16]
 801c2f4:	7d39      	ldrb	r1, [r7, #20]
 801c2f6:	2900      	cmp	r1, #0
 801c2f8:	d001      	beq.n	801c2fe <RadioGetGfskTimeOnAirNumerator+0x42>
 801c2fa:	2102      	movs	r1, #2
 801c2fc:	e000      	b.n	801c300 <RadioGetGfskTimeOnAirNumerator+0x44>
 801c2fe:	2100      	movs	r1, #0
 801c300:	440b      	add	r3, r1
 801c302:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c304:	4413      	add	r3, r2
}
 801c306:	4618      	mov	r0, r3
 801c308:	370c      	adds	r7, #12
 801c30a:	46bd      	mov	sp, r7
 801c30c:	bc80      	pop	{r7}
 801c30e:	4770      	bx	lr

0801c310 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c310:	b480      	push	{r7}
 801c312:	b08b      	sub	sp, #44	; 0x2c
 801c314:	af00      	add	r7, sp, #0
 801c316:	60f8      	str	r0, [r7, #12]
 801c318:	60b9      	str	r1, [r7, #8]
 801c31a:	4611      	mov	r1, r2
 801c31c:	461a      	mov	r2, r3
 801c31e:	460b      	mov	r3, r1
 801c320:	71fb      	strb	r3, [r7, #7]
 801c322:	4613      	mov	r3, r2
 801c324:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801c326:	79fb      	ldrb	r3, [r7, #7]
 801c328:	3304      	adds	r3, #4
 801c32a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801c32c:	2300      	movs	r3, #0
 801c32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801c332:	68bb      	ldr	r3, [r7, #8]
 801c334:	2b05      	cmp	r3, #5
 801c336:	d002      	beq.n	801c33e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801c338:	68bb      	ldr	r3, [r7, #8]
 801c33a:	2b06      	cmp	r3, #6
 801c33c:	d104      	bne.n	801c348 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801c33e:	88bb      	ldrh	r3, [r7, #4]
 801c340:	2b0b      	cmp	r3, #11
 801c342:	d801      	bhi.n	801c348 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801c344:	230c      	movs	r3, #12
 801c346:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d105      	bne.n	801c35a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801c34e:	68bb      	ldr	r3, [r7, #8]
 801c350:	2b0b      	cmp	r3, #11
 801c352:	d008      	beq.n	801c366 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	2b0c      	cmp	r3, #12
 801c358:	d005      	beq.n	801c366 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	2b01      	cmp	r3, #1
 801c35e:	d105      	bne.n	801c36c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c360:	68bb      	ldr	r3, [r7, #8]
 801c362:	2b0c      	cmp	r3, #12
 801c364:	d102      	bne.n	801c36c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801c366:	2301      	movs	r3, #1
 801c368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c36c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801c370:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801c372:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c376:	2a00      	cmp	r2, #0
 801c378:	d001      	beq.n	801c37e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801c37a:	2210      	movs	r2, #16
 801c37c:	e000      	b.n	801c380 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801c37e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c380:	4413      	add	r3, r2
 801c382:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801c388:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801c38a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c38e:	2a00      	cmp	r2, #0
 801c390:	d001      	beq.n	801c396 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801c392:	2200      	movs	r2, #0
 801c394:	e000      	b.n	801c398 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801c396:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801c398:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c39a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	2b06      	cmp	r3, #6
 801c3a0:	d803      	bhi.n	801c3aa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801c3a2:	68bb      	ldr	r3, [r7, #8]
 801c3a4:	009b      	lsls	r3, r3, #2
 801c3a6:	623b      	str	r3, [r7, #32]
 801c3a8:	e00e      	b.n	801c3c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c3aa:	69fb      	ldr	r3, [r7, #28]
 801c3ac:	3308      	adds	r3, #8
 801c3ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d004      	beq.n	801c3c2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c3b8:	68bb      	ldr	r3, [r7, #8]
 801c3ba:	3b02      	subs	r3, #2
 801c3bc:	009b      	lsls	r3, r3, #2
 801c3be:	623b      	str	r3, [r7, #32]
 801c3c0:	e002      	b.n	801c3c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c3c2:	68bb      	ldr	r3, [r7, #8]
 801c3c4:	009b      	lsls	r3, r3, #2
 801c3c6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c3c8:	69fb      	ldr	r3, [r7, #28]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	da01      	bge.n	801c3d2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c3d2:	69fa      	ldr	r2, [r7, #28]
 801c3d4:	6a3b      	ldr	r3, [r7, #32]
 801c3d6:	4413      	add	r3, r2
 801c3d8:	1e5a      	subs	r2, r3, #1
 801c3da:	6a3b      	ldr	r3, [r7, #32]
 801c3dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3e0:	697a      	ldr	r2, [r7, #20]
 801c3e2:	fb03 f202 	mul.w	r2, r3, r2
 801c3e6:	88bb      	ldrh	r3, [r7, #4]
 801c3e8:	4413      	add	r3, r2
    int32_t intermediate =
 801c3ea:	330c      	adds	r3, #12
 801c3ec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c3ee:	68bb      	ldr	r3, [r7, #8]
 801c3f0:	2b06      	cmp	r3, #6
 801c3f2:	d802      	bhi.n	801c3fa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c3f4:	69bb      	ldr	r3, [r7, #24]
 801c3f6:	3302      	adds	r3, #2
 801c3f8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c3fa:	69bb      	ldr	r3, [r7, #24]
 801c3fc:	009b      	lsls	r3, r3, #2
 801c3fe:	1c5a      	adds	r2, r3, #1
 801c400:	68bb      	ldr	r3, [r7, #8]
 801c402:	3b02      	subs	r3, #2
 801c404:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c408:	4618      	mov	r0, r3
 801c40a:	372c      	adds	r7, #44	; 0x2c
 801c40c:	46bd      	mov	sp, r7
 801c40e:	bc80      	pop	{r7}
 801c410:	4770      	bx	lr
	...

0801c414 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b08a      	sub	sp, #40	; 0x28
 801c418:	af04      	add	r7, sp, #16
 801c41a:	60b9      	str	r1, [r7, #8]
 801c41c:	607a      	str	r2, [r7, #4]
 801c41e:	461a      	mov	r2, r3
 801c420:	4603      	mov	r3, r0
 801c422:	73fb      	strb	r3, [r7, #15]
 801c424:	4613      	mov	r3, r2
 801c426:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c428:	2300      	movs	r3, #0
 801c42a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c42c:	2301      	movs	r3, #1
 801c42e:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c430:	7bfb      	ldrb	r3, [r7, #15]
 801c432:	2b00      	cmp	r3, #0
 801c434:	d002      	beq.n	801c43c <RadioTimeOnAir+0x28>
 801c436:	2b01      	cmp	r3, #1
 801c438:	d017      	beq.n	801c46a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c43a:	e035      	b.n	801c4a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c43c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c440:	8c3a      	ldrh	r2, [r7, #32]
 801c442:	7bb9      	ldrb	r1, [r7, #14]
 801c444:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c448:	9301      	str	r3, [sp, #4]
 801c44a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c44e:	9300      	str	r3, [sp, #0]
 801c450:	4603      	mov	r3, r0
 801c452:	6878      	ldr	r0, [r7, #4]
 801c454:	f7ff ff32 	bl	801c2bc <RadioGetGfskTimeOnAirNumerator>
 801c458:	4603      	mov	r3, r0
 801c45a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c45e:	fb02 f303 	mul.w	r3, r2, r3
 801c462:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	613b      	str	r3, [r7, #16]
        break;
 801c468:	e01e      	b.n	801c4a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c46a:	8c39      	ldrh	r1, [r7, #32]
 801c46c:	7bba      	ldrb	r2, [r7, #14]
 801c46e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c472:	9302      	str	r3, [sp, #8]
 801c474:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c478:	9301      	str	r3, [sp, #4]
 801c47a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c47e:	9300      	str	r3, [sp, #0]
 801c480:	460b      	mov	r3, r1
 801c482:	6879      	ldr	r1, [r7, #4]
 801c484:	68b8      	ldr	r0, [r7, #8]
 801c486:	f7ff ff43 	bl	801c310 <RadioGetLoRaTimeOnAirNumerator>
 801c48a:	4603      	mov	r3, r0
 801c48c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c490:	fb02 f303 	mul.w	r3, r2, r3
 801c494:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c496:	4a0a      	ldr	r2, [pc, #40]	; (801c4c0 <RadioTimeOnAir+0xac>)
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	4413      	add	r3, r2
 801c49c:	781b      	ldrb	r3, [r3, #0]
 801c49e:	4618      	mov	r0, r3
 801c4a0:	f7ff feb6 	bl	801c210 <RadioGetLoRaBandwidthInHz>
 801c4a4:	6138      	str	r0, [r7, #16]
        break;
 801c4a6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801c4a8:	697a      	ldr	r2, [r7, #20]
 801c4aa:	693b      	ldr	r3, [r7, #16]
 801c4ac:	4413      	add	r3, r2
 801c4ae:	1e5a      	subs	r2, r3, #1
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	3718      	adds	r7, #24
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bd80      	pop	{r7, pc}
 801c4be:	bf00      	nop
 801c4c0:	08021e80 	.word	0x08021e80

0801c4c4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b084      	sub	sp, #16
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
 801c4cc:	460b      	mov	r3, r1
 801c4ce:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	f240 2101 	movw	r1, #513	; 0x201
 801c4d8:	f240 2001 	movw	r0, #513	; 0x201
 801c4dc:	f001 fd66 	bl	801dfac <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801c4e0:	4b73      	ldr	r3, [pc, #460]	; (801c6b0 <RadioSend+0x1ec>)
 801c4e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c4e6:	2101      	movs	r1, #1
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f002 fa03 	bl	801e8f4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801c4ee:	4b70      	ldr	r3, [pc, #448]	; (801c6b0 <RadioSend+0x1ec>)
 801c4f0:	781b      	ldrb	r3, [r3, #0]
 801c4f2:	2b01      	cmp	r3, #1
 801c4f4:	d112      	bne.n	801c51c <RadioSend+0x58>
 801c4f6:	4b6e      	ldr	r3, [pc, #440]	; (801c6b0 <RadioSend+0x1ec>)
 801c4f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c4fc:	2b06      	cmp	r3, #6
 801c4fe:	d10d      	bne.n	801c51c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c500:	f640 0089 	movw	r0, #2185	; 0x889
 801c504:	f002 f916 	bl	801e734 <SUBGRF_ReadRegister>
 801c508:	4603      	mov	r3, r0
 801c50a:	f023 0304 	bic.w	r3, r3, #4
 801c50e:	b2db      	uxtb	r3, r3
 801c510:	4619      	mov	r1, r3
 801c512:	f640 0089 	movw	r0, #2185	; 0x889
 801c516:	f002 f8f9 	bl	801e70c <SUBGRF_WriteRegister>
 801c51a:	e00c      	b.n	801c536 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c51c:	f640 0089 	movw	r0, #2185	; 0x889
 801c520:	f002 f908 	bl	801e734 <SUBGRF_ReadRegister>
 801c524:	4603      	mov	r3, r0
 801c526:	f043 0304 	orr.w	r3, r3, #4
 801c52a:	b2db      	uxtb	r3, r3
 801c52c:	4619      	mov	r1, r3
 801c52e:	f640 0089 	movw	r0, #2185	; 0x889
 801c532:	f002 f8eb 	bl	801e70c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801c536:	4b5e      	ldr	r3, [pc, #376]	; (801c6b0 <RadioSend+0x1ec>)
 801c538:	781b      	ldrb	r3, [r3, #0]
 801c53a:	2b04      	cmp	r3, #4
 801c53c:	f200 80a8 	bhi.w	801c690 <RadioSend+0x1cc>
 801c540:	a201      	add	r2, pc, #4	; (adr r2, 801c548 <RadioSend+0x84>)
 801c542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c546:	bf00      	nop
 801c548:	0801c577 	.word	0x0801c577
 801c54c:	0801c55d 	.word	0x0801c55d
 801c550:	0801c577 	.word	0x0801c577
 801c554:	0801c5d9 	.word	0x0801c5d9
 801c558:	0801c5f9 	.word	0x0801c5f9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c55c:	4a54      	ldr	r2, [pc, #336]	; (801c6b0 <RadioSend+0x1ec>)
 801c55e:	78fb      	ldrb	r3, [r7, #3]
 801c560:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c562:	4854      	ldr	r0, [pc, #336]	; (801c6b4 <RadioSend+0x1f0>)
 801c564:	f001 ff8a 	bl	801e47c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c568:	78fb      	ldrb	r3, [r7, #3]
 801c56a:	2200      	movs	r2, #0
 801c56c:	4619      	mov	r1, r3
 801c56e:	6878      	ldr	r0, [r7, #4]
 801c570:	f001 fa3a 	bl	801d9e8 <SUBGRF_SendPayload>
            break;
 801c574:	e08d      	b.n	801c692 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c576:	f002 fbb6 	bl	801ece6 <RFW_Is_Init>
 801c57a:	4603      	mov	r3, r0
 801c57c:	2b01      	cmp	r3, #1
 801c57e:	d11e      	bne.n	801c5be <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c580:	f107 020d 	add.w	r2, r7, #13
 801c584:	78fb      	ldrb	r3, [r7, #3]
 801c586:	4619      	mov	r1, r3
 801c588:	6878      	ldr	r0, [r7, #4]
 801c58a:	f002 fbc4 	bl	801ed16 <RFW_TransmitInit>
 801c58e:	4603      	mov	r3, r0
 801c590:	2b00      	cmp	r3, #0
 801c592:	d10c      	bne.n	801c5ae <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c594:	7b7a      	ldrb	r2, [r7, #13]
 801c596:	4b46      	ldr	r3, [pc, #280]	; (801c6b0 <RadioSend+0x1ec>)
 801c598:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c59a:	4846      	ldr	r0, [pc, #280]	; (801c6b4 <RadioSend+0x1f0>)
 801c59c:	f001 ff6e 	bl	801e47c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801c5a0:	7b7b      	ldrb	r3, [r7, #13]
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	4619      	mov	r1, r3
 801c5a6:	6878      	ldr	r0, [r7, #4]
 801c5a8:	f001 fa1e 	bl	801d9e8 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c5ac:	e071      	b.n	801c692 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801c5ae:	4b42      	ldr	r3, [pc, #264]	; (801c6b8 <RadioSend+0x1f4>)
 801c5b0:	2201      	movs	r2, #1
 801c5b2:	2100      	movs	r1, #0
 801c5b4:	2002      	movs	r0, #2
 801c5b6:	f003 fcef 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801c5ba:	2303      	movs	r3, #3
 801c5bc:	e073      	b.n	801c6a6 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c5be:	4a3c      	ldr	r2, [pc, #240]	; (801c6b0 <RadioSend+0x1ec>)
 801c5c0:	78fb      	ldrb	r3, [r7, #3]
 801c5c2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5c4:	483b      	ldr	r0, [pc, #236]	; (801c6b4 <RadioSend+0x1f0>)
 801c5c6:	f001 ff59 	bl	801e47c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801c5ca:	78fb      	ldrb	r3, [r7, #3]
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	4619      	mov	r1, r3
 801c5d0:	6878      	ldr	r0, [r7, #4]
 801c5d2:	f001 fa09 	bl	801d9e8 <SUBGRF_SendPayload>
            break;
 801c5d6:	e05c      	b.n	801c692 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c5d8:	4b35      	ldr	r3, [pc, #212]	; (801c6b0 <RadioSend+0x1ec>)
 801c5da:	2202      	movs	r2, #2
 801c5dc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c5de:	4a34      	ldr	r2, [pc, #208]	; (801c6b0 <RadioSend+0x1ec>)
 801c5e0:	78fb      	ldrb	r3, [r7, #3]
 801c5e2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5e4:	4833      	ldr	r0, [pc, #204]	; (801c6b4 <RadioSend+0x1f0>)
 801c5e6:	f001 ff49 	bl	801e47c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c5ea:	78fb      	ldrb	r3, [r7, #3]
 801c5ec:	2200      	movs	r2, #0
 801c5ee:	4619      	mov	r1, r3
 801c5f0:	6878      	ldr	r0, [r7, #4]
 801c5f2:	f001 f9f9 	bl	801d9e8 <SUBGRF_SendPayload>
            break;
 801c5f6:	e04c      	b.n	801c692 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c5f8:	78fb      	ldrb	r3, [r7, #3]
 801c5fa:	461a      	mov	r2, r3
 801c5fc:	6879      	ldr	r1, [r7, #4]
 801c5fe:	482f      	ldr	r0, [pc, #188]	; (801c6bc <RadioSend+0x1f8>)
 801c600:	f000 fccc 	bl	801cf9c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c604:	4b2a      	ldr	r3, [pc, #168]	; (801c6b0 <RadioSend+0x1ec>)
 801c606:	2202      	movs	r2, #2
 801c608:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c60a:	78fb      	ldrb	r3, [r7, #3]
 801c60c:	3301      	adds	r3, #1
 801c60e:	b2da      	uxtb	r2, r3
 801c610:	4b27      	ldr	r3, [pc, #156]	; (801c6b0 <RadioSend+0x1ec>)
 801c612:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c614:	4827      	ldr	r0, [pc, #156]	; (801c6b4 <RadioSend+0x1f0>)
 801c616:	f001 ff31 	bl	801e47c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801c61a:	2100      	movs	r1, #0
 801c61c:	20f1      	movs	r0, #241	; 0xf1
 801c61e:	f000 f966 	bl	801c8ee <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801c622:	2100      	movs	r1, #0
 801c624:	20f0      	movs	r0, #240	; 0xf0
 801c626:	f000 f962 	bl	801c8ee <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c62a:	4b21      	ldr	r3, [pc, #132]	; (801c6b0 <RadioSend+0x1ec>)
 801c62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c62e:	2b64      	cmp	r3, #100	; 0x64
 801c630:	d108      	bne.n	801c644 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801c632:	2170      	movs	r1, #112	; 0x70
 801c634:	20f3      	movs	r0, #243	; 0xf3
 801c636:	f000 f95a 	bl	801c8ee <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801c63a:	211d      	movs	r1, #29
 801c63c:	20f2      	movs	r0, #242	; 0xf2
 801c63e:	f000 f956 	bl	801c8ee <RadioWrite>
 801c642:	e007      	b.n	801c654 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801c644:	21e1      	movs	r1, #225	; 0xe1
 801c646:	20f3      	movs	r0, #243	; 0xf3
 801c648:	f000 f951 	bl	801c8ee <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801c64c:	2104      	movs	r1, #4
 801c64e:	20f2      	movs	r0, #242	; 0xf2
 801c650:	f000 f94d 	bl	801c8ee <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c654:	78fb      	ldrb	r3, [r7, #3]
 801c656:	b29b      	uxth	r3, r3
 801c658:	00db      	lsls	r3, r3, #3
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	3302      	adds	r3, #2
 801c65e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c660:	89fb      	ldrh	r3, [r7, #14]
 801c662:	0a1b      	lsrs	r3, r3, #8
 801c664:	b29b      	uxth	r3, r3
 801c666:	b2db      	uxtb	r3, r3
 801c668:	4619      	mov	r1, r3
 801c66a:	20f4      	movs	r0, #244	; 0xf4
 801c66c:	f000 f93f 	bl	801c8ee <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801c670:	89fb      	ldrh	r3, [r7, #14]
 801c672:	b2db      	uxtb	r3, r3
 801c674:	4619      	mov	r1, r3
 801c676:	20f5      	movs	r0, #245	; 0xf5
 801c678:	f000 f939 	bl	801c8ee <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801c67c:	78fb      	ldrb	r3, [r7, #3]
 801c67e:	3301      	adds	r3, #1
 801c680:	b2db      	uxtb	r3, r3
 801c682:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c686:	4619      	mov	r1, r3
 801c688:	480c      	ldr	r0, [pc, #48]	; (801c6bc <RadioSend+0x1f8>)
 801c68a:	f001 f9ad 	bl	801d9e8 <SUBGRF_SendPayload>
            break;
 801c68e:	e000      	b.n	801c692 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c690:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c692:	4b07      	ldr	r3, [pc, #28]	; (801c6b0 <RadioSend+0x1ec>)
 801c694:	685b      	ldr	r3, [r3, #4]
 801c696:	4619      	mov	r1, r3
 801c698:	4809      	ldr	r0, [pc, #36]	; (801c6c0 <RadioSend+0x1fc>)
 801c69a:	f003 fae3 	bl	801fc64 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801c69e:	4808      	ldr	r0, [pc, #32]	; (801c6c0 <RadioSend+0x1fc>)
 801c6a0:	f003 fa02 	bl	801faa8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801c6a4:	2300      	movs	r3, #0
}
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	3710      	adds	r7, #16
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	bd80      	pop	{r7, pc}
 801c6ae:	bf00      	nop
 801c6b0:	20001d9c 	.word	0x20001d9c
 801c6b4:	20001daa 	.word	0x20001daa
 801c6b8:	080217d4 	.word	0x080217d4
 801c6bc:	20001c98 	.word	0x20001c98
 801c6c0:	20001df8 	.word	0x20001df8

0801c6c4 <RadioSleep>:

static void RadioSleep( void )
{
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	b082      	sub	sp, #8
 801c6c8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c6ce:	793b      	ldrb	r3, [r7, #4]
 801c6d0:	f043 0304 	orr.w	r3, r3, #4
 801c6d4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c6d6:	7938      	ldrb	r0, [r7, #4]
 801c6d8:	f001 fa62 	bl	801dba0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c6dc:	2002      	movs	r0, #2
 801c6de:	f7e6 f8db 	bl	8002898 <HAL_Delay>
}
 801c6e2:	bf00      	nop
 801c6e4:	3708      	adds	r7, #8
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	bd80      	pop	{r7, pc}

0801c6ea <RadioStandby>:

static void RadioStandby( void )
{
 801c6ea:	b580      	push	{r7, lr}
 801c6ec:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c6ee:	2000      	movs	r0, #0
 801c6f0:	f001 fa88 	bl	801dc04 <SUBGRF_SetStandby>
}
 801c6f4:	bf00      	nop
 801c6f6:	bd80      	pop	{r7, pc}

0801c6f8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b082      	sub	sp, #8
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801c700:	f002 faf1 	bl	801ece6 <RFW_Is_Init>
 801c704:	4603      	mov	r3, r0
 801c706:	2b01      	cmp	r3, #1
 801c708:	d102      	bne.n	801c710 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801c70a:	f002 fb14 	bl	801ed36 <RFW_ReceiveInit>
 801c70e:	e007      	b.n	801c720 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c710:	2300      	movs	r3, #0
 801c712:	2200      	movs	r2, #0
 801c714:	f240 2162 	movw	r1, #610	; 0x262
 801c718:	f240 2062 	movw	r0, #610	; 0x262
 801c71c:	f001 fc46 	bl	801dfac <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d006      	beq.n	801c734 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c726:	6879      	ldr	r1, [r7, #4]
 801c728:	4811      	ldr	r0, [pc, #68]	; (801c770 <RadioRx+0x78>)
 801c72a:	f003 fa9b 	bl	801fc64 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c72e:	4810      	ldr	r0, [pc, #64]	; (801c770 <RadioRx+0x78>)
 801c730:	f003 f9ba 	bl	801faa8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c734:	4b0f      	ldr	r3, [pc, #60]	; (801c774 <RadioRx+0x7c>)
 801c736:	2200      	movs	r2, #0
 801c738:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c73a:	4b0e      	ldr	r3, [pc, #56]	; (801c774 <RadioRx+0x7c>)
 801c73c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c740:	2100      	movs	r1, #0
 801c742:	4618      	mov	r0, r3
 801c744:	f002 f8d6 	bl	801e8f4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c748:	4b0a      	ldr	r3, [pc, #40]	; (801c774 <RadioRx+0x7c>)
 801c74a:	785b      	ldrb	r3, [r3, #1]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d004      	beq.n	801c75a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c750:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c754:	f001 fa92 	bl	801dc7c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c758:	e005      	b.n	801c766 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c75a:	4b06      	ldr	r3, [pc, #24]	; (801c774 <RadioRx+0x7c>)
 801c75c:	689b      	ldr	r3, [r3, #8]
 801c75e:	019b      	lsls	r3, r3, #6
 801c760:	4618      	mov	r0, r3
 801c762:	f001 fa8b 	bl	801dc7c <SUBGRF_SetRx>
}
 801c766:	bf00      	nop
 801c768:	3708      	adds	r7, #8
 801c76a:	46bd      	mov	sp, r7
 801c76c:	bd80      	pop	{r7, pc}
 801c76e:	bf00      	nop
 801c770:	20001e10 	.word	0x20001e10
 801c774:	20001d9c 	.word	0x20001d9c

0801c778 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b082      	sub	sp, #8
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801c780:	f002 fab1 	bl	801ece6 <RFW_Is_Init>
 801c784:	4603      	mov	r3, r0
 801c786:	2b01      	cmp	r3, #1
 801c788:	d102      	bne.n	801c790 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801c78a:	f002 fad4 	bl	801ed36 <RFW_ReceiveInit>
 801c78e:	e007      	b.n	801c7a0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c790:	2300      	movs	r3, #0
 801c792:	2200      	movs	r2, #0
 801c794:	f240 2162 	movw	r1, #610	; 0x262
 801c798:	f240 2062 	movw	r0, #610	; 0x262
 801c79c:	f001 fc06 	bl	801dfac <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d006      	beq.n	801c7b4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c7a6:	6879      	ldr	r1, [r7, #4]
 801c7a8:	4811      	ldr	r0, [pc, #68]	; (801c7f0 <RadioRxBoosted+0x78>)
 801c7aa:	f003 fa5b 	bl	801fc64 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c7ae:	4810      	ldr	r0, [pc, #64]	; (801c7f0 <RadioRxBoosted+0x78>)
 801c7b0:	f003 f97a 	bl	801faa8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c7b4:	4b0f      	ldr	r3, [pc, #60]	; (801c7f4 <RadioRxBoosted+0x7c>)
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c7ba:	4b0e      	ldr	r3, [pc, #56]	; (801c7f4 <RadioRxBoosted+0x7c>)
 801c7bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c7c0:	2100      	movs	r1, #0
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	f002 f896 	bl	801e8f4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c7c8:	4b0a      	ldr	r3, [pc, #40]	; (801c7f4 <RadioRxBoosted+0x7c>)
 801c7ca:	785b      	ldrb	r3, [r3, #1]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d004      	beq.n	801c7da <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c7d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c7d4:	f001 fa72 	bl	801dcbc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c7d8:	e005      	b.n	801c7e6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c7da:	4b06      	ldr	r3, [pc, #24]	; (801c7f4 <RadioRxBoosted+0x7c>)
 801c7dc:	689b      	ldr	r3, [r3, #8]
 801c7de:	019b      	lsls	r3, r3, #6
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f001 fa6b 	bl	801dcbc <SUBGRF_SetRxBoosted>
}
 801c7e6:	bf00      	nop
 801c7e8:	3708      	adds	r7, #8
 801c7ea:	46bd      	mov	sp, r7
 801c7ec:	bd80      	pop	{r7, pc}
 801c7ee:	bf00      	nop
 801c7f0:	20001e10 	.word	0x20001e10
 801c7f4:	20001d9c 	.word	0x20001d9c

0801c7f8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b082      	sub	sp, #8
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
 801c800:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	005a      	lsls	r2, r3, #1
 801c806:	683b      	ldr	r3, [r7, #0]
 801c808:	4413      	add	r3, r2
 801c80a:	4a0c      	ldr	r2, [pc, #48]	; (801c83c <RadioSetRxDutyCycle+0x44>)
 801c80c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c80e:	2300      	movs	r3, #0
 801c810:	2200      	movs	r2, #0
 801c812:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c81a:	f001 fbc7 	bl	801dfac <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c81e:	4b07      	ldr	r3, [pc, #28]	; (801c83c <RadioSetRxDutyCycle+0x44>)
 801c820:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c824:	2100      	movs	r1, #0
 801c826:	4618      	mov	r0, r3
 801c828:	f002 f864 	bl	801e8f4 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c82c:	6839      	ldr	r1, [r7, #0]
 801c82e:	6878      	ldr	r0, [r7, #4]
 801c830:	f001 fa68 	bl	801dd04 <SUBGRF_SetRxDutyCycle>
}
 801c834:	bf00      	nop
 801c836:	3708      	adds	r7, #8
 801c838:	46bd      	mov	sp, r7
 801c83a:	bd80      	pop	{r7, pc}
 801c83c:	20001d9c 	.word	0x20001d9c

0801c840 <RadioStartCad>:

static void RadioStartCad( void )
{
 801c840:	b580      	push	{r7, lr}
 801c842:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c844:	4b09      	ldr	r3, [pc, #36]	; (801c86c <RadioStartCad+0x2c>)
 801c846:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c84a:	2100      	movs	r1, #0
 801c84c:	4618      	mov	r0, r3
 801c84e:	f002 f851 	bl	801e8f4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c852:	2300      	movs	r3, #0
 801c854:	2200      	movs	r2, #0
 801c856:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c85a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c85e:	f001 fba5 	bl	801dfac <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c862:	f001 fa7b 	bl	801dd5c <SUBGRF_SetCad>
}
 801c866:	bf00      	nop
 801c868:	bd80      	pop	{r7, pc}
 801c86a:	bf00      	nop
 801c86c:	20001d9c 	.word	0x20001d9c

0801c870 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c870:	b580      	push	{r7, lr}
 801c872:	b084      	sub	sp, #16
 801c874:	af00      	add	r7, sp, #0
 801c876:	6078      	str	r0, [r7, #4]
 801c878:	460b      	mov	r3, r1
 801c87a:	70fb      	strb	r3, [r7, #3]
 801c87c:	4613      	mov	r3, r2
 801c87e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801c880:	883b      	ldrh	r3, [r7, #0]
 801c882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c886:	fb02 f303 	mul.w	r3, r2, r3
 801c88a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c88c:	6878      	ldr	r0, [r7, #4]
 801c88e:	f001 fbe9 	bl	801e064 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c896:	4618      	mov	r0, r3
 801c898:	f002 f854 	bl	801e944 <SUBGRF_SetRfTxPower>
 801c89c:	4603      	mov	r3, r0
 801c89e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c8a0:	210e      	movs	r1, #14
 801c8a2:	f640 101f 	movw	r0, #2335	; 0x91f
 801c8a6:	f001 ff31 	bl	801e70c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801c8aa:	7afb      	ldrb	r3, [r7, #11]
 801c8ac:	2101      	movs	r1, #1
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f002 f820 	bl	801e8f4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c8b4:	f001 fa60 	bl	801dd78 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c8b8:	68f9      	ldr	r1, [r7, #12]
 801c8ba:	4805      	ldr	r0, [pc, #20]	; (801c8d0 <RadioSetTxContinuousWave+0x60>)
 801c8bc:	f003 f9d2 	bl	801fc64 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c8c0:	4803      	ldr	r0, [pc, #12]	; (801c8d0 <RadioSetTxContinuousWave+0x60>)
 801c8c2:	f003 f8f1 	bl	801faa8 <UTIL_TIMER_Start>
}
 801c8c6:	bf00      	nop
 801c8c8:	3710      	adds	r7, #16
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	bd80      	pop	{r7, pc}
 801c8ce:	bf00      	nop
 801c8d0:	20001df8 	.word	0x20001df8

0801c8d4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b082      	sub	sp, #8
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	4603      	mov	r3, r0
 801c8dc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c8de:	f001 fe82 	bl	801e5e6 <SUBGRF_GetRssiInst>
 801c8e2:	4603      	mov	r3, r0
 801c8e4:	b21b      	sxth	r3, r3
}
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	3708      	adds	r7, #8
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	bd80      	pop	{r7, pc}

0801c8ee <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c8ee:	b580      	push	{r7, lr}
 801c8f0:	b082      	sub	sp, #8
 801c8f2:	af00      	add	r7, sp, #0
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	460a      	mov	r2, r1
 801c8f8:	80fb      	strh	r3, [r7, #6]
 801c8fa:	4613      	mov	r3, r2
 801c8fc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801c8fe:	797a      	ldrb	r2, [r7, #5]
 801c900:	88fb      	ldrh	r3, [r7, #6]
 801c902:	4611      	mov	r1, r2
 801c904:	4618      	mov	r0, r3
 801c906:	f001 ff01 	bl	801e70c <SUBGRF_WriteRegister>
}
 801c90a:	bf00      	nop
 801c90c:	3708      	adds	r7, #8
 801c90e:	46bd      	mov	sp, r7
 801c910:	bd80      	pop	{r7, pc}

0801c912 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c912:	b580      	push	{r7, lr}
 801c914:	b082      	sub	sp, #8
 801c916:	af00      	add	r7, sp, #0
 801c918:	4603      	mov	r3, r0
 801c91a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801c91c:	88fb      	ldrh	r3, [r7, #6]
 801c91e:	4618      	mov	r0, r3
 801c920:	f001 ff08 	bl	801e734 <SUBGRF_ReadRegister>
 801c924:	4603      	mov	r3, r0
}
 801c926:	4618      	mov	r0, r3
 801c928:	3708      	adds	r7, #8
 801c92a:	46bd      	mov	sp, r7
 801c92c:	bd80      	pop	{r7, pc}

0801c92e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c92e:	b580      	push	{r7, lr}
 801c930:	b082      	sub	sp, #8
 801c932:	af00      	add	r7, sp, #0
 801c934:	4603      	mov	r3, r0
 801c936:	6039      	str	r1, [r7, #0]
 801c938:	80fb      	strh	r3, [r7, #6]
 801c93a:	4613      	mov	r3, r2
 801c93c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c93e:	797b      	ldrb	r3, [r7, #5]
 801c940:	b29a      	uxth	r2, r3
 801c942:	88fb      	ldrh	r3, [r7, #6]
 801c944:	6839      	ldr	r1, [r7, #0]
 801c946:	4618      	mov	r0, r3
 801c948:	f001 ff08 	bl	801e75c <SUBGRF_WriteRegisters>
}
 801c94c:	bf00      	nop
 801c94e:	3708      	adds	r7, #8
 801c950:	46bd      	mov	sp, r7
 801c952:	bd80      	pop	{r7, pc}

0801c954 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c954:	b580      	push	{r7, lr}
 801c956:	b082      	sub	sp, #8
 801c958:	af00      	add	r7, sp, #0
 801c95a:	4603      	mov	r3, r0
 801c95c:	6039      	str	r1, [r7, #0]
 801c95e:	80fb      	strh	r3, [r7, #6]
 801c960:	4613      	mov	r3, r2
 801c962:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c964:	797b      	ldrb	r3, [r7, #5]
 801c966:	b29a      	uxth	r2, r3
 801c968:	88fb      	ldrh	r3, [r7, #6]
 801c96a:	6839      	ldr	r1, [r7, #0]
 801c96c:	4618      	mov	r0, r3
 801c96e:	f001 ff17 	bl	801e7a0 <SUBGRF_ReadRegisters>
}
 801c972:	bf00      	nop
 801c974:	3708      	adds	r7, #8
 801c976:	46bd      	mov	sp, r7
 801c978:	bd80      	pop	{r7, pc}
	...

0801c97c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b082      	sub	sp, #8
 801c980:	af00      	add	r7, sp, #0
 801c982:	4603      	mov	r3, r0
 801c984:	460a      	mov	r2, r1
 801c986:	71fb      	strb	r3, [r7, #7]
 801c988:	4613      	mov	r3, r2
 801c98a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c98c:	79fb      	ldrb	r3, [r7, #7]
 801c98e:	2b01      	cmp	r3, #1
 801c990:	d10a      	bne.n	801c9a8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c992:	4a0e      	ldr	r2, [pc, #56]	; (801c9cc <RadioSetMaxPayloadLength+0x50>)
 801c994:	79bb      	ldrb	r3, [r7, #6]
 801c996:	7013      	strb	r3, [r2, #0]
 801c998:	4b0c      	ldr	r3, [pc, #48]	; (801c9cc <RadioSetMaxPayloadLength+0x50>)
 801c99a:	781a      	ldrb	r2, [r3, #0]
 801c99c:	4b0c      	ldr	r3, [pc, #48]	; (801c9d0 <RadioSetMaxPayloadLength+0x54>)
 801c99e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c9a0:	480c      	ldr	r0, [pc, #48]	; (801c9d4 <RadioSetMaxPayloadLength+0x58>)
 801c9a2:	f001 fd6b 	bl	801e47c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c9a6:	e00d      	b.n	801c9c4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c9a8:	4b09      	ldr	r3, [pc, #36]	; (801c9d0 <RadioSetMaxPayloadLength+0x54>)
 801c9aa:	7d5b      	ldrb	r3, [r3, #21]
 801c9ac:	2b01      	cmp	r3, #1
 801c9ae:	d109      	bne.n	801c9c4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c9b0:	4a06      	ldr	r2, [pc, #24]	; (801c9cc <RadioSetMaxPayloadLength+0x50>)
 801c9b2:	79bb      	ldrb	r3, [r7, #6]
 801c9b4:	7013      	strb	r3, [r2, #0]
 801c9b6:	4b05      	ldr	r3, [pc, #20]	; (801c9cc <RadioSetMaxPayloadLength+0x50>)
 801c9b8:	781a      	ldrb	r2, [r3, #0]
 801c9ba:	4b05      	ldr	r3, [pc, #20]	; (801c9d0 <RadioSetMaxPayloadLength+0x54>)
 801c9bc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c9be:	4805      	ldr	r0, [pc, #20]	; (801c9d4 <RadioSetMaxPayloadLength+0x58>)
 801c9c0:	f001 fd5c 	bl	801e47c <SUBGRF_SetPacketParams>
}
 801c9c4:	bf00      	nop
 801c9c6:	3708      	adds	r7, #8
 801c9c8:	46bd      	mov	sp, r7
 801c9ca:	bd80      	pop	{r7, pc}
 801c9cc:	20000134 	.word	0x20000134
 801c9d0:	20001d9c 	.word	0x20001d9c
 801c9d4:	20001daa 	.word	0x20001daa

0801c9d8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c9d8:	b580      	push	{r7, lr}
 801c9da:	b082      	sub	sp, #8
 801c9dc:	af00      	add	r7, sp, #0
 801c9de:	4603      	mov	r3, r0
 801c9e0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c9e2:	4a13      	ldr	r2, [pc, #76]	; (801ca30 <RadioSetPublicNetwork+0x58>)
 801c9e4:	79fb      	ldrb	r3, [r7, #7]
 801c9e6:	7313      	strb	r3, [r2, #12]
 801c9e8:	4b11      	ldr	r3, [pc, #68]	; (801ca30 <RadioSetPublicNetwork+0x58>)
 801c9ea:	7b1a      	ldrb	r2, [r3, #12]
 801c9ec:	4b10      	ldr	r3, [pc, #64]	; (801ca30 <RadioSetPublicNetwork+0x58>)
 801c9ee:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c9f0:	2001      	movs	r0, #1
 801c9f2:	f7ff f811 	bl	801ba18 <RadioSetModem>
    if( enable == true )
 801c9f6:	79fb      	ldrb	r3, [r7, #7]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d00a      	beq.n	801ca12 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801c9fc:	2134      	movs	r1, #52	; 0x34
 801c9fe:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801ca02:	f001 fe83 	bl	801e70c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801ca06:	2144      	movs	r1, #68	; 0x44
 801ca08:	f240 7041 	movw	r0, #1857	; 0x741
 801ca0c:	f001 fe7e 	bl	801e70c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801ca10:	e009      	b.n	801ca26 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801ca12:	2114      	movs	r1, #20
 801ca14:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801ca18:	f001 fe78 	bl	801e70c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801ca1c:	2124      	movs	r1, #36	; 0x24
 801ca1e:	f240 7041 	movw	r0, #1857	; 0x741
 801ca22:	f001 fe73 	bl	801e70c <SUBGRF_WriteRegister>
}
 801ca26:	bf00      	nop
 801ca28:	3708      	adds	r7, #8
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}
 801ca2e:	bf00      	nop
 801ca30:	20001d9c 	.word	0x20001d9c

0801ca34 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801ca38:	f001 ffb8 	bl	801e9ac <SUBGRF_GetRadioWakeUpTime>
 801ca3c:	4603      	mov	r3, r0
 801ca3e:	3303      	adds	r3, #3
}
 801ca40:	4618      	mov	r0, r3
 801ca42:	bd80      	pop	{r7, pc}

0801ca44 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b082      	sub	sp, #8
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801ca4c:	f000 f80e 	bl	801ca6c <RadioOnTxTimeoutProcess>
}
 801ca50:	bf00      	nop
 801ca52:	3708      	adds	r7, #8
 801ca54:	46bd      	mov	sp, r7
 801ca56:	bd80      	pop	{r7, pc}

0801ca58 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b082      	sub	sp, #8
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801ca60:	f000 f818 	bl	801ca94 <RadioOnRxTimeoutProcess>
}
 801ca64:	bf00      	nop
 801ca66:	3708      	adds	r7, #8
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bd80      	pop	{r7, pc}

0801ca6c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ca70:	4b07      	ldr	r3, [pc, #28]	; (801ca90 <RadioOnTxTimeoutProcess+0x24>)
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d008      	beq.n	801ca8a <RadioOnTxTimeoutProcess+0x1e>
 801ca78:	4b05      	ldr	r3, [pc, #20]	; (801ca90 <RadioOnTxTimeoutProcess+0x24>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	685b      	ldr	r3, [r3, #4]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d003      	beq.n	801ca8a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801ca82:	4b03      	ldr	r3, [pc, #12]	; (801ca90 <RadioOnTxTimeoutProcess+0x24>)
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	685b      	ldr	r3, [r3, #4]
 801ca88:	4798      	blx	r3
    }
}
 801ca8a:	bf00      	nop
 801ca8c:	bd80      	pop	{r7, pc}
 801ca8e:	bf00      	nop
 801ca90:	20001d98 	.word	0x20001d98

0801ca94 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ca98:	4b07      	ldr	r3, [pc, #28]	; (801cab8 <RadioOnRxTimeoutProcess+0x24>)
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d008      	beq.n	801cab2 <RadioOnRxTimeoutProcess+0x1e>
 801caa0:	4b05      	ldr	r3, [pc, #20]	; (801cab8 <RadioOnRxTimeoutProcess+0x24>)
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	68db      	ldr	r3, [r3, #12]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d003      	beq.n	801cab2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801caaa:	4b03      	ldr	r3, [pc, #12]	; (801cab8 <RadioOnRxTimeoutProcess+0x24>)
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	68db      	ldr	r3, [r3, #12]
 801cab0:	4798      	blx	r3
    }
}
 801cab2:	bf00      	nop
 801cab4:	bd80      	pop	{r7, pc}
 801cab6:	bf00      	nop
 801cab8:	20001d98 	.word	0x20001d98

0801cabc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801cabc:	b580      	push	{r7, lr}
 801cabe:	b082      	sub	sp, #8
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	4603      	mov	r3, r0
 801cac4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801cac6:	4a05      	ldr	r2, [pc, #20]	; (801cadc <RadioOnDioIrq+0x20>)
 801cac8:	88fb      	ldrh	r3, [r7, #6]
 801caca:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801cace:	f000 f807 	bl	801cae0 <RadioIrqProcess>
}
 801cad2:	bf00      	nop
 801cad4:	3708      	adds	r7, #8
 801cad6:	46bd      	mov	sp, r7
 801cad8:	bd80      	pop	{r7, pc}
 801cada:	bf00      	nop
 801cadc:	20001d9c 	.word	0x20001d9c

0801cae0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801cae0:	b5b0      	push	{r4, r5, r7, lr}
 801cae2:	b082      	sub	sp, #8
 801cae4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801cae6:	2300      	movs	r3, #0
 801cae8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801caea:	2300      	movs	r3, #0
 801caec:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801caee:	4ba8      	ldr	r3, [pc, #672]	; (801cd90 <RadioIrqProcess+0x2b0>)
 801caf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801caf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801caf8:	f000 810d 	beq.w	801cd16 <RadioIrqProcess+0x236>
 801cafc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb00:	f300 81e8 	bgt.w	801ced4 <RadioIrqProcess+0x3f4>
 801cb04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb08:	f000 80f1 	beq.w	801ccee <RadioIrqProcess+0x20e>
 801cb0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb10:	f300 81e0 	bgt.w	801ced4 <RadioIrqProcess+0x3f4>
 801cb14:	2b80      	cmp	r3, #128	; 0x80
 801cb16:	f000 80d6 	beq.w	801ccc6 <RadioIrqProcess+0x1e6>
 801cb1a:	2b80      	cmp	r3, #128	; 0x80
 801cb1c:	f300 81da 	bgt.w	801ced4 <RadioIrqProcess+0x3f4>
 801cb20:	2b20      	cmp	r3, #32
 801cb22:	dc49      	bgt.n	801cbb8 <RadioIrqProcess+0xd8>
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	f340 81d5 	ble.w	801ced4 <RadioIrqProcess+0x3f4>
 801cb2a:	3b01      	subs	r3, #1
 801cb2c:	2b1f      	cmp	r3, #31
 801cb2e:	f200 81d1 	bhi.w	801ced4 <RadioIrqProcess+0x3f4>
 801cb32:	a201      	add	r2, pc, #4	; (adr r2, 801cb38 <RadioIrqProcess+0x58>)
 801cb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb38:	0801cbc1 	.word	0x0801cbc1
 801cb3c:	0801cbfb 	.word	0x0801cbfb
 801cb40:	0801ced5 	.word	0x0801ced5
 801cb44:	0801cdb1 	.word	0x0801cdb1
 801cb48:	0801ced5 	.word	0x0801ced5
 801cb4c:	0801ced5 	.word	0x0801ced5
 801cb50:	0801ced5 	.word	0x0801ced5
 801cb54:	0801ce2d 	.word	0x0801ce2d
 801cb58:	0801ced5 	.word	0x0801ced5
 801cb5c:	0801ced5 	.word	0x0801ced5
 801cb60:	0801ced5 	.word	0x0801ced5
 801cb64:	0801ced5 	.word	0x0801ced5
 801cb68:	0801ced5 	.word	0x0801ced5
 801cb6c:	0801ced5 	.word	0x0801ced5
 801cb70:	0801ced5 	.word	0x0801ced5
 801cb74:	0801ce49 	.word	0x0801ce49
 801cb78:	0801ced5 	.word	0x0801ced5
 801cb7c:	0801ced5 	.word	0x0801ced5
 801cb80:	0801ced5 	.word	0x0801ced5
 801cb84:	0801ced5 	.word	0x0801ced5
 801cb88:	0801ced5 	.word	0x0801ced5
 801cb8c:	0801ced5 	.word	0x0801ced5
 801cb90:	0801ced5 	.word	0x0801ced5
 801cb94:	0801ced5 	.word	0x0801ced5
 801cb98:	0801ced5 	.word	0x0801ced5
 801cb9c:	0801ced5 	.word	0x0801ced5
 801cba0:	0801ced5 	.word	0x0801ced5
 801cba4:	0801ced5 	.word	0x0801ced5
 801cba8:	0801ced5 	.word	0x0801ced5
 801cbac:	0801ced5 	.word	0x0801ced5
 801cbb0:	0801ced5 	.word	0x0801ced5
 801cbb4:	0801ce57 	.word	0x0801ce57
 801cbb8:	2b40      	cmp	r3, #64	; 0x40
 801cbba:	f000 816d 	beq.w	801ce98 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801cbbe:	e189      	b.n	801ced4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801cbc0:	4874      	ldr	r0, [pc, #464]	; (801cd94 <RadioIrqProcess+0x2b4>)
 801cbc2:	f002 ffdf 	bl	801fb84 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801cbc6:	2000      	movs	r0, #0
 801cbc8:	f001 f81c 	bl	801dc04 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801cbcc:	f002 f892 	bl	801ecf4 <RFW_Is_LongPacketModeEnabled>
 801cbd0:	4603      	mov	r3, r0
 801cbd2:	2b01      	cmp	r3, #1
 801cbd4:	d101      	bne.n	801cbda <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801cbd6:	f002 f8b6 	bl	801ed46 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801cbda:	4b6f      	ldr	r3, [pc, #444]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	f000 817a 	beq.w	801ced8 <RadioIrqProcess+0x3f8>
 801cbe4:	4b6c      	ldr	r3, [pc, #432]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	f000 8174 	beq.w	801ced8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801cbf0:	4b69      	ldr	r3, [pc, #420]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	4798      	blx	r3
        break;
 801cbf8:	e16e      	b.n	801ced8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801cbfa:	4868      	ldr	r0, [pc, #416]	; (801cd9c <RadioIrqProcess+0x2bc>)
 801cbfc:	f002 ffc2 	bl	801fb84 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cc00:	4b63      	ldr	r3, [pc, #396]	; (801cd90 <RadioIrqProcess+0x2b0>)
 801cc02:	785b      	ldrb	r3, [r3, #1]
 801cc04:	f083 0301 	eor.w	r3, r3, #1
 801cc08:	b2db      	uxtb	r3, r3
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d014      	beq.n	801cc38 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801cc0e:	2000      	movs	r0, #0
 801cc10:	f000 fff8 	bl	801dc04 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801cc14:	2100      	movs	r1, #0
 801cc16:	f640 1002 	movw	r0, #2306	; 0x902
 801cc1a:	f001 fd77 	bl	801e70c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801cc1e:	f640 1044 	movw	r0, #2372	; 0x944
 801cc22:	f001 fd87 	bl	801e734 <SUBGRF_ReadRegister>
 801cc26:	4603      	mov	r3, r0
 801cc28:	f043 0302 	orr.w	r3, r3, #2
 801cc2c:	b2db      	uxtb	r3, r3
 801cc2e:	4619      	mov	r1, r3
 801cc30:	f640 1044 	movw	r0, #2372	; 0x944
 801cc34:	f001 fd6a 	bl	801e70c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801cc38:	1dfb      	adds	r3, r7, #7
 801cc3a:	22ff      	movs	r2, #255	; 0xff
 801cc3c:	4619      	mov	r1, r3
 801cc3e:	4858      	ldr	r0, [pc, #352]	; (801cda0 <RadioIrqProcess+0x2c0>)
 801cc40:	f000 feb0 	bl	801d9a4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801cc44:	4857      	ldr	r0, [pc, #348]	; (801cda4 <RadioIrqProcess+0x2c4>)
 801cc46:	f001 fd0f 	bl	801e668 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801cc4a:	4b53      	ldr	r3, [pc, #332]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	f000 8144 	beq.w	801cedc <RadioIrqProcess+0x3fc>
 801cc54:	4b50      	ldr	r3, [pc, #320]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	689b      	ldr	r3, [r3, #8]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	f000 813e 	beq.w	801cedc <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801cc60:	4b4b      	ldr	r3, [pc, #300]	; (801cd90 <RadioIrqProcess+0x2b0>)
 801cc62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cc66:	2b01      	cmp	r3, #1
 801cc68:	d10e      	bne.n	801cc88 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801cc6a:	4b4b      	ldr	r3, [pc, #300]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	689c      	ldr	r4, [r3, #8]
 801cc70:	79fb      	ldrb	r3, [r7, #7]
 801cc72:	b299      	uxth	r1, r3
 801cc74:	4b46      	ldr	r3, [pc, #280]	; (801cd90 <RadioIrqProcess+0x2b0>)
 801cc76:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801cc7a:	b21a      	sxth	r2, r3
 801cc7c:	4b44      	ldr	r3, [pc, #272]	; (801cd90 <RadioIrqProcess+0x2b0>)
 801cc7e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801cc82:	4847      	ldr	r0, [pc, #284]	; (801cda0 <RadioIrqProcess+0x2c0>)
 801cc84:	47a0      	blx	r4
                break;
 801cc86:	e01d      	b.n	801ccc4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801cc88:	4b41      	ldr	r3, [pc, #260]	; (801cd90 <RadioIrqProcess+0x2b0>)
 801cc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc8c:	463a      	mov	r2, r7
 801cc8e:	4611      	mov	r1, r2
 801cc90:	4618      	mov	r0, r3
 801cc92:	f001 ff7d 	bl	801eb90 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801cc96:	4b40      	ldr	r3, [pc, #256]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	689c      	ldr	r4, [r3, #8]
 801cc9c:	79fb      	ldrb	r3, [r7, #7]
 801cc9e:	b299      	uxth	r1, r3
 801cca0:	4b3b      	ldr	r3, [pc, #236]	; (801cd90 <RadioIrqProcess+0x2b0>)
 801cca2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801cca6:	b218      	sxth	r0, r3
 801cca8:	683b      	ldr	r3, [r7, #0]
 801ccaa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801ccae:	4a3e      	ldr	r2, [pc, #248]	; (801cda8 <RadioIrqProcess+0x2c8>)
 801ccb0:	fb82 5203 	smull	r5, r2, r2, r3
 801ccb4:	1192      	asrs	r2, r2, #6
 801ccb6:	17db      	asrs	r3, r3, #31
 801ccb8:	1ad3      	subs	r3, r2, r3
 801ccba:	b25b      	sxtb	r3, r3
 801ccbc:	4602      	mov	r2, r0
 801ccbe:	4838      	ldr	r0, [pc, #224]	; (801cda0 <RadioIrqProcess+0x2c0>)
 801ccc0:	47a0      	blx	r4
                break;
 801ccc2:	bf00      	nop
        break;
 801ccc4:	e10a      	b.n	801cedc <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801ccc6:	2000      	movs	r0, #0
 801ccc8:	f000 ff9c 	bl	801dc04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801cccc:	4b32      	ldr	r3, [pc, #200]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	f000 8105 	beq.w	801cee0 <RadioIrqProcess+0x400>
 801ccd6:	4b30      	ldr	r3, [pc, #192]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	699b      	ldr	r3, [r3, #24]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	f000 80ff 	beq.w	801cee0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801cce2:	4b2d      	ldr	r3, [pc, #180]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	699b      	ldr	r3, [r3, #24]
 801cce8:	2000      	movs	r0, #0
 801ccea:	4798      	blx	r3
        break;
 801ccec:	e0f8      	b.n	801cee0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801ccee:	2000      	movs	r0, #0
 801ccf0:	f000 ff88 	bl	801dc04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ccf4:	4b28      	ldr	r3, [pc, #160]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	f000 80f3 	beq.w	801cee4 <RadioIrqProcess+0x404>
 801ccfe:	4b26      	ldr	r3, [pc, #152]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	699b      	ldr	r3, [r3, #24]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	f000 80ed 	beq.w	801cee4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801cd0a:	4b23      	ldr	r3, [pc, #140]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	699b      	ldr	r3, [r3, #24]
 801cd10:	2001      	movs	r0, #1
 801cd12:	4798      	blx	r3
        break;
 801cd14:	e0e6      	b.n	801cee4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801cd16:	4b25      	ldr	r3, [pc, #148]	; (801cdac <RadioIrqProcess+0x2cc>)
 801cd18:	2201      	movs	r2, #1
 801cd1a:	2100      	movs	r1, #0
 801cd1c:	2002      	movs	r0, #2
 801cd1e:	f003 f93b 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801cd22:	f000 fe25 	bl	801d970 <SUBGRF_GetOperatingMode>
 801cd26:	4603      	mov	r3, r0
 801cd28:	2b04      	cmp	r3, #4
 801cd2a:	d115      	bne.n	801cd58 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801cd2c:	4819      	ldr	r0, [pc, #100]	; (801cd94 <RadioIrqProcess+0x2b4>)
 801cd2e:	f002 ff29 	bl	801fb84 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801cd32:	2000      	movs	r0, #0
 801cd34:	f000 ff66 	bl	801dc04 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801cd38:	4b17      	ldr	r3, [pc, #92]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	f000 80d3 	beq.w	801cee8 <RadioIrqProcess+0x408>
 801cd42:	4b15      	ldr	r3, [pc, #84]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	685b      	ldr	r3, [r3, #4]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	f000 80cd 	beq.w	801cee8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801cd4e:	4b12      	ldr	r3, [pc, #72]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	685b      	ldr	r3, [r3, #4]
 801cd54:	4798      	blx	r3
        break;
 801cd56:	e0c7      	b.n	801cee8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801cd58:	f000 fe0a 	bl	801d970 <SUBGRF_GetOperatingMode>
 801cd5c:	4603      	mov	r3, r0
 801cd5e:	2b05      	cmp	r3, #5
 801cd60:	f040 80c2 	bne.w	801cee8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801cd64:	480d      	ldr	r0, [pc, #52]	; (801cd9c <RadioIrqProcess+0x2bc>)
 801cd66:	f002 ff0d 	bl	801fb84 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801cd6a:	2000      	movs	r0, #0
 801cd6c:	f000 ff4a 	bl	801dc04 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cd70:	4b09      	ldr	r3, [pc, #36]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	f000 80b7 	beq.w	801cee8 <RadioIrqProcess+0x408>
 801cd7a:	4b07      	ldr	r3, [pc, #28]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	68db      	ldr	r3, [r3, #12]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	f000 80b1 	beq.w	801cee8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801cd86:	4b04      	ldr	r3, [pc, #16]	; (801cd98 <RadioIrqProcess+0x2b8>)
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	68db      	ldr	r3, [r3, #12]
 801cd8c:	4798      	blx	r3
        break;
 801cd8e:	e0ab      	b.n	801cee8 <RadioIrqProcess+0x408>
 801cd90:	20001d9c 	.word	0x20001d9c
 801cd94:	20001df8 	.word	0x20001df8
 801cd98:	20001d98 	.word	0x20001d98
 801cd9c:	20001e10 	.word	0x20001e10
 801cda0:	20001c98 	.word	0x20001c98
 801cda4:	20001dc0 	.word	0x20001dc0
 801cda8:	10624dd3 	.word	0x10624dd3
 801cdac:	080217ec 	.word	0x080217ec
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801cdb0:	4b54      	ldr	r3, [pc, #336]	; (801cf04 <RadioIrqProcess+0x424>)
 801cdb2:	2201      	movs	r2, #1
 801cdb4:	2100      	movs	r1, #0
 801cdb6:	2002      	movs	r0, #2
 801cdb8:	f003 f8ee 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801cdbc:	4b52      	ldr	r3, [pc, #328]	; (801cf08 <RadioIrqProcess+0x428>)
 801cdbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	f000 8093 	beq.w	801ceec <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801cdc6:	4a51      	ldr	r2, [pc, #324]	; (801cf0c <RadioIrqProcess+0x42c>)
 801cdc8:	4b4f      	ldr	r3, [pc, #316]	; (801cf08 <RadioIrqProcess+0x428>)
 801cdca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdcc:	0c1b      	lsrs	r3, r3, #16
 801cdce:	b2db      	uxtb	r3, r3
 801cdd0:	4619      	mov	r1, r3
 801cdd2:	f640 1003 	movw	r0, #2307	; 0x903
 801cdd6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801cdd8:	4a4c      	ldr	r2, [pc, #304]	; (801cf0c <RadioIrqProcess+0x42c>)
 801cdda:	4b4b      	ldr	r3, [pc, #300]	; (801cf08 <RadioIrqProcess+0x428>)
 801cddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdde:	0a1b      	lsrs	r3, r3, #8
 801cde0:	b2db      	uxtb	r3, r3
 801cde2:	4619      	mov	r1, r3
 801cde4:	f640 1004 	movw	r0, #2308	; 0x904
 801cde8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801cdea:	4a48      	ldr	r2, [pc, #288]	; (801cf0c <RadioIrqProcess+0x42c>)
 801cdec:	4b46      	ldr	r3, [pc, #280]	; (801cf08 <RadioIrqProcess+0x428>)
 801cdee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdf0:	b2db      	uxtb	r3, r3
 801cdf2:	4619      	mov	r1, r3
 801cdf4:	f640 1005 	movw	r0, #2309	; 0x905
 801cdf8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801cdfa:	4c44      	ldr	r4, [pc, #272]	; (801cf0c <RadioIrqProcess+0x42c>)
 801cdfc:	4b44      	ldr	r3, [pc, #272]	; (801cf10 <RadioIrqProcess+0x430>)
 801cdfe:	f640 1002 	movw	r0, #2306	; 0x902
 801ce02:	4798      	blx	r3
 801ce04:	4603      	mov	r3, r0
 801ce06:	f043 0301 	orr.w	r3, r3, #1
 801ce0a:	b2db      	uxtb	r3, r3
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	f640 1002 	movw	r0, #2306	; 0x902
 801ce12:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801ce14:	4b3c      	ldr	r3, [pc, #240]	; (801cf08 <RadioIrqProcess+0x428>)
 801ce16:	2200      	movs	r2, #0
 801ce18:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	2200      	movs	r2, #0
 801ce1e:	f240 2162 	movw	r1, #610	; 0x262
 801ce22:	f240 2062 	movw	r0, #610	; 0x262
 801ce26:	f001 f8c1 	bl	801dfac <SUBGRF_SetDioIrqParams>
        break;
 801ce2a:	e05f      	b.n	801ceec <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ce2c:	4b39      	ldr	r3, [pc, #228]	; (801cf14 <RadioIrqProcess+0x434>)
 801ce2e:	2201      	movs	r2, #1
 801ce30:	2100      	movs	r1, #0
 801ce32:	2002      	movs	r0, #2
 801ce34:	f003 f8b0 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801ce38:	f001 ff55 	bl	801ece6 <RFW_Is_Init>
 801ce3c:	4603      	mov	r3, r0
 801ce3e:	2b01      	cmp	r3, #1
 801ce40:	d156      	bne.n	801cef0 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801ce42:	f001 ff86 	bl	801ed52 <RFW_ReceivePayload>
        break;
 801ce46:	e053      	b.n	801cef0 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801ce48:	4b33      	ldr	r3, [pc, #204]	; (801cf18 <RadioIrqProcess+0x438>)
 801ce4a:	2201      	movs	r2, #1
 801ce4c:	2100      	movs	r1, #0
 801ce4e:	2002      	movs	r0, #2
 801ce50:	f003 f8a2 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ce54:	e051      	b.n	801cefa <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801ce56:	4831      	ldr	r0, [pc, #196]	; (801cf1c <RadioIrqProcess+0x43c>)
 801ce58:	f002 fe94 	bl	801fb84 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ce5c:	4b2a      	ldr	r3, [pc, #168]	; (801cf08 <RadioIrqProcess+0x428>)
 801ce5e:	785b      	ldrb	r3, [r3, #1]
 801ce60:	f083 0301 	eor.w	r3, r3, #1
 801ce64:	b2db      	uxtb	r3, r3
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d002      	beq.n	801ce70 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801ce6a:	2000      	movs	r0, #0
 801ce6c:	f000 feca 	bl	801dc04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ce70:	4b2b      	ldr	r3, [pc, #172]	; (801cf20 <RadioIrqProcess+0x440>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d03d      	beq.n	801cef4 <RadioIrqProcess+0x414>
 801ce78:	4b29      	ldr	r3, [pc, #164]	; (801cf20 <RadioIrqProcess+0x440>)
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	68db      	ldr	r3, [r3, #12]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d038      	beq.n	801cef4 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801ce82:	4b27      	ldr	r3, [pc, #156]	; (801cf20 <RadioIrqProcess+0x440>)
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	68db      	ldr	r3, [r3, #12]
 801ce88:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801ce8a:	4b26      	ldr	r3, [pc, #152]	; (801cf24 <RadioIrqProcess+0x444>)
 801ce8c:	2201      	movs	r2, #1
 801ce8e:	2100      	movs	r1, #0
 801ce90:	2002      	movs	r0, #2
 801ce92:	f003 f881 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ce96:	e02d      	b.n	801cef4 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801ce98:	4b23      	ldr	r3, [pc, #140]	; (801cf28 <RadioIrqProcess+0x448>)
 801ce9a:	2201      	movs	r2, #1
 801ce9c:	2100      	movs	r1, #0
 801ce9e:	2002      	movs	r0, #2
 801cea0:	f003 f87a 	bl	801ff98 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801cea4:	4b18      	ldr	r3, [pc, #96]	; (801cf08 <RadioIrqProcess+0x428>)
 801cea6:	785b      	ldrb	r3, [r3, #1]
 801cea8:	f083 0301 	eor.w	r3, r3, #1
 801ceac:	b2db      	uxtb	r3, r3
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d002      	beq.n	801ceb8 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801ceb2:	2000      	movs	r0, #0
 801ceb4:	f000 fea6 	bl	801dc04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801ceb8:	4b19      	ldr	r3, [pc, #100]	; (801cf20 <RadioIrqProcess+0x440>)
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d01b      	beq.n	801cef8 <RadioIrqProcess+0x418>
 801cec0:	4b17      	ldr	r3, [pc, #92]	; (801cf20 <RadioIrqProcess+0x440>)
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	691b      	ldr	r3, [r3, #16]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d016      	beq.n	801cef8 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801ceca:	4b15      	ldr	r3, [pc, #84]	; (801cf20 <RadioIrqProcess+0x440>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	691b      	ldr	r3, [r3, #16]
 801ced0:	4798      	blx	r3
        break;
 801ced2:	e011      	b.n	801cef8 <RadioIrqProcess+0x418>
        break;
 801ced4:	bf00      	nop
 801ced6:	e010      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801ced8:	bf00      	nop
 801ceda:	e00e      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801cedc:	bf00      	nop
 801cede:	e00c      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801cee0:	bf00      	nop
 801cee2:	e00a      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801cee4:	bf00      	nop
 801cee6:	e008      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801cee8:	bf00      	nop
 801ceea:	e006      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801ceec:	bf00      	nop
 801ceee:	e004      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801cef0:	bf00      	nop
 801cef2:	e002      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801cef4:	bf00      	nop
 801cef6:	e000      	b.n	801cefa <RadioIrqProcess+0x41a>
        break;
 801cef8:	bf00      	nop
    }
}
 801cefa:	bf00      	nop
 801cefc:	3708      	adds	r7, #8
 801cefe:	46bd      	mov	sp, r7
 801cf00:	bdb0      	pop	{r4, r5, r7, pc}
 801cf02:	bf00      	nop
 801cf04:	08021800 	.word	0x08021800
 801cf08:	20001d9c 	.word	0x20001d9c
 801cf0c:	0801c8ef 	.word	0x0801c8ef
 801cf10:	0801c913 	.word	0x0801c913
 801cf14:	0802180c 	.word	0x0802180c
 801cf18:	08021818 	.word	0x08021818
 801cf1c:	20001e10 	.word	0x20001e10
 801cf20:	20001d98 	.word	0x20001d98
 801cf24:	08021824 	.word	0x08021824
 801cf28:	08021830 	.word	0x08021830

0801cf2c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cf30:	4b09      	ldr	r3, [pc, #36]	; (801cf58 <RadioTxPrbs+0x2c>)
 801cf32:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cf36:	2101      	movs	r1, #1
 801cf38:	4618      	mov	r0, r3
 801cf3a:	f001 fcdb 	bl	801e8f4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801cf3e:	4b07      	ldr	r3, [pc, #28]	; (801cf5c <RadioTxPrbs+0x30>)
 801cf40:	212d      	movs	r1, #45	; 0x2d
 801cf42:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801cf46:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801cf48:	f000 ff1f 	bl	801dd8a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cf4c:	4804      	ldr	r0, [pc, #16]	; (801cf60 <RadioTxPrbs+0x34>)
 801cf4e:	f000 fe75 	bl	801dc3c <SUBGRF_SetTx>
}
 801cf52:	bf00      	nop
 801cf54:	bd80      	pop	{r7, pc}
 801cf56:	bf00      	nop
 801cf58:	20001d9c 	.word	0x20001d9c
 801cf5c:	0801c8ef 	.word	0x0801c8ef
 801cf60:	000fffff 	.word	0x000fffff

0801cf64 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801cf64:	b580      	push	{r7, lr}
 801cf66:	b084      	sub	sp, #16
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cf6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf72:	4618      	mov	r0, r3
 801cf74:	f001 fce6 	bl	801e944 <SUBGRF_SetRfTxPower>
 801cf78:	4603      	mov	r3, r0
 801cf7a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801cf7c:	210e      	movs	r1, #14
 801cf7e:	f640 101f 	movw	r0, #2335	; 0x91f
 801cf82:	f001 fbc3 	bl	801e70c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cf86:	7bfb      	ldrb	r3, [r7, #15]
 801cf88:	2101      	movs	r1, #1
 801cf8a:	4618      	mov	r0, r3
 801cf8c:	f001 fcb2 	bl	801e8f4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cf90:	f000 fef2 	bl	801dd78 <SUBGRF_SetTxContinuousWave>
}
 801cf94:	bf00      	nop
 801cf96:	3710      	adds	r7, #16
 801cf98:	46bd      	mov	sp, r7
 801cf9a:	bd80      	pop	{r7, pc}

0801cf9c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cf9c:	b480      	push	{r7}
 801cf9e:	b089      	sub	sp, #36	; 0x24
 801cfa0:	af00      	add	r7, sp, #0
 801cfa2:	60f8      	str	r0, [r7, #12]
 801cfa4:	60b9      	str	r1, [r7, #8]
 801cfa6:	4613      	mov	r3, r2
 801cfa8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cfaa:	2300      	movs	r3, #0
 801cfac:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801cfae:	2300      	movs	r3, #0
 801cfb0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	61bb      	str	r3, [r7, #24]
 801cfb6:	e011      	b.n	801cfdc <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cfb8:	69bb      	ldr	r3, [r7, #24]
 801cfba:	68ba      	ldr	r2, [r7, #8]
 801cfbc:	4413      	add	r3, r2
 801cfbe:	781a      	ldrb	r2, [r3, #0]
 801cfc0:	69bb      	ldr	r3, [r7, #24]
 801cfc2:	68b9      	ldr	r1, [r7, #8]
 801cfc4:	440b      	add	r3, r1
 801cfc6:	43d2      	mvns	r2, r2
 801cfc8:	b2d2      	uxtb	r2, r2
 801cfca:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cfcc:	69bb      	ldr	r3, [r7, #24]
 801cfce:	68fa      	ldr	r2, [r7, #12]
 801cfd0:	4413      	add	r3, r2
 801cfd2:	2200      	movs	r2, #0
 801cfd4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801cfd6:	69bb      	ldr	r3, [r7, #24]
 801cfd8:	3301      	adds	r3, #1
 801cfda:	61bb      	str	r3, [r7, #24]
 801cfdc:	79fb      	ldrb	r3, [r7, #7]
 801cfde:	69ba      	ldr	r2, [r7, #24]
 801cfe0:	429a      	cmp	r2, r3
 801cfe2:	dbe9      	blt.n	801cfb8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801cfe4:	2300      	movs	r3, #0
 801cfe6:	61bb      	str	r3, [r7, #24]
 801cfe8:	e049      	b.n	801d07e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801cfea:	69bb      	ldr	r3, [r7, #24]
 801cfec:	425a      	negs	r2, r3
 801cfee:	f003 0307 	and.w	r3, r3, #7
 801cff2:	f002 0207 	and.w	r2, r2, #7
 801cff6:	bf58      	it	pl
 801cff8:	4253      	negpl	r3, r2
 801cffa:	b2db      	uxtb	r3, r3
 801cffc:	f1c3 0307 	rsb	r3, r3, #7
 801d000:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801d002:	69bb      	ldr	r3, [r7, #24]
 801d004:	2b00      	cmp	r3, #0
 801d006:	da00      	bge.n	801d00a <payload_integration+0x6e>
 801d008:	3307      	adds	r3, #7
 801d00a:	10db      	asrs	r3, r3, #3
 801d00c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801d00e:	69bb      	ldr	r3, [r7, #24]
 801d010:	3301      	adds	r3, #1
 801d012:	425a      	negs	r2, r3
 801d014:	f003 0307 	and.w	r3, r3, #7
 801d018:	f002 0207 	and.w	r2, r2, #7
 801d01c:	bf58      	it	pl
 801d01e:	4253      	negpl	r3, r2
 801d020:	b2db      	uxtb	r3, r3
 801d022:	f1c3 0307 	rsb	r3, r3, #7
 801d026:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801d028:	69bb      	ldr	r3, [r7, #24]
 801d02a:	3301      	adds	r3, #1
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	da00      	bge.n	801d032 <payload_integration+0x96>
 801d030:	3307      	adds	r3, #7
 801d032:	10db      	asrs	r3, r3, #3
 801d034:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801d036:	7dbb      	ldrb	r3, [r7, #22]
 801d038:	68ba      	ldr	r2, [r7, #8]
 801d03a:	4413      	add	r3, r2
 801d03c:	781b      	ldrb	r3, [r3, #0]
 801d03e:	461a      	mov	r2, r3
 801d040:	7dfb      	ldrb	r3, [r7, #23]
 801d042:	fa42 f303 	asr.w	r3, r2, r3
 801d046:	b2db      	uxtb	r3, r3
 801d048:	f003 0301 	and.w	r3, r3, #1
 801d04c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801d04e:	7ffa      	ldrb	r2, [r7, #31]
 801d050:	7cfb      	ldrb	r3, [r7, #19]
 801d052:	4053      	eors	r3, r2
 801d054:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801d056:	7d3b      	ldrb	r3, [r7, #20]
 801d058:	68fa      	ldr	r2, [r7, #12]
 801d05a:	4413      	add	r3, r2
 801d05c:	781b      	ldrb	r3, [r3, #0]
 801d05e:	b25a      	sxtb	r2, r3
 801d060:	7ff9      	ldrb	r1, [r7, #31]
 801d062:	7d7b      	ldrb	r3, [r7, #21]
 801d064:	fa01 f303 	lsl.w	r3, r1, r3
 801d068:	b25b      	sxtb	r3, r3
 801d06a:	4313      	orrs	r3, r2
 801d06c:	b259      	sxtb	r1, r3
 801d06e:	7d3b      	ldrb	r3, [r7, #20]
 801d070:	68fa      	ldr	r2, [r7, #12]
 801d072:	4413      	add	r3, r2
 801d074:	b2ca      	uxtb	r2, r1
 801d076:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801d078:	69bb      	ldr	r3, [r7, #24]
 801d07a:	3301      	adds	r3, #1
 801d07c:	61bb      	str	r3, [r7, #24]
 801d07e:	79fb      	ldrb	r3, [r7, #7]
 801d080:	00db      	lsls	r3, r3, #3
 801d082:	69ba      	ldr	r2, [r7, #24]
 801d084:	429a      	cmp	r2, r3
 801d086:	dbb0      	blt.n	801cfea <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801d088:	7ffb      	ldrb	r3, [r7, #31]
 801d08a:	01db      	lsls	r3, r3, #7
 801d08c:	b25a      	sxtb	r2, r3
 801d08e:	7ffb      	ldrb	r3, [r7, #31]
 801d090:	019b      	lsls	r3, r3, #6
 801d092:	b25b      	sxtb	r3, r3
 801d094:	4313      	orrs	r3, r2
 801d096:	b25b      	sxtb	r3, r3
 801d098:	7ffa      	ldrb	r2, [r7, #31]
 801d09a:	2a00      	cmp	r2, #0
 801d09c:	d101      	bne.n	801d0a2 <payload_integration+0x106>
 801d09e:	2220      	movs	r2, #32
 801d0a0:	e000      	b.n	801d0a4 <payload_integration+0x108>
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	4313      	orrs	r3, r2
 801d0a6:	b259      	sxtb	r1, r3
 801d0a8:	79fb      	ldrb	r3, [r7, #7]
 801d0aa:	68fa      	ldr	r2, [r7, #12]
 801d0ac:	4413      	add	r3, r2
 801d0ae:	b2ca      	uxtb	r2, r1
 801d0b0:	701a      	strb	r2, [r3, #0]
}
 801d0b2:	bf00      	nop
 801d0b4:	3724      	adds	r7, #36	; 0x24
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bc80      	pop	{r7}
 801d0ba:	4770      	bx	lr

0801d0bc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b08c      	sub	sp, #48	; 0x30
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	60b9      	str	r1, [r7, #8]
 801d0c4:	607a      	str	r2, [r7, #4]
 801d0c6:	603b      	str	r3, [r7, #0]
 801d0c8:	4603      	mov	r3, r0
 801d0ca:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	623b      	str	r3, [r7, #32]
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d0d8:	f001 fdff 	bl	801ecda <RFW_DeInit>

    if( rxContinuous != 0 )
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d001      	beq.n	801d0e6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801d0e2:	2300      	movs	r3, #0
 801d0e4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	bf14      	ite	ne
 801d0ec:	2301      	movne	r3, #1
 801d0ee:	2300      	moveq	r3, #0
 801d0f0:	b2da      	uxtb	r2, r3
 801d0f2:	4ba3      	ldr	r3, [pc, #652]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d0f4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801d0f6:	7bfb      	ldrb	r3, [r7, #15]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d003      	beq.n	801d104 <RadioSetRxGenericConfig+0x48>
 801d0fc:	2b01      	cmp	r3, #1
 801d0fe:	f000 80dc 	beq.w	801d2ba <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801d102:	e194      	b.n	801d42e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801d104:	68bb      	ldr	r3, [r7, #8]
 801d106:	689b      	ldr	r3, [r3, #8]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d003      	beq.n	801d114 <RadioSetRxGenericConfig+0x58>
 801d10c:	68bb      	ldr	r3, [r7, #8]
 801d10e:	68db      	ldr	r3, [r3, #12]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d102      	bne.n	801d11a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801d114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d118:	e18a      	b.n	801d430 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801d11a:	68bb      	ldr	r3, [r7, #8]
 801d11c:	7f9b      	ldrb	r3, [r3, #30]
 801d11e:	2b08      	cmp	r3, #8
 801d120:	d902      	bls.n	801d128 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801d122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d126:	e183      	b.n	801d430 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d128:	68bb      	ldr	r3, [r7, #8]
 801d12a:	6919      	ldr	r1, [r3, #16]
 801d12c:	68bb      	ldr	r3, [r7, #8]
 801d12e:	7f9b      	ldrb	r3, [r3, #30]
 801d130:	b29a      	uxth	r2, r3
 801d132:	f107 0320 	add.w	r3, r7, #32
 801d136:	4618      	mov	r0, r3
 801d138:	f001 fec2 	bl	801eec0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d13c:	68bb      	ldr	r3, [r7, #8]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	2b00      	cmp	r3, #0
 801d142:	bf14      	ite	ne
 801d144:	2301      	movne	r3, #1
 801d146:	2300      	moveq	r3, #0
 801d148:	b2db      	uxtb	r3, r3
 801d14a:	4618      	mov	r0, r3
 801d14c:	f000 fe26 	bl	801dd9c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d150:	4b8b      	ldr	r3, [pc, #556]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d152:	2200      	movs	r2, #0
 801d154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d158:	68bb      	ldr	r3, [r7, #8]
 801d15a:	689b      	ldr	r3, [r3, #8]
 801d15c:	4a88      	ldr	r2, [pc, #544]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d15e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d160:	68bb      	ldr	r3, [r7, #8]
 801d162:	f893 2020 	ldrb.w	r2, [r3, #32]
 801d166:	4b86      	ldr	r3, [pc, #536]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801d16c:	68bb      	ldr	r3, [r7, #8]
 801d16e:	685b      	ldr	r3, [r3, #4]
 801d170:	4618      	mov	r0, r3
 801d172:	f001 fce5 	bl	801eb40 <SUBGRF_GetFskBandwidthRegValue>
 801d176:	4603      	mov	r3, r0
 801d178:	461a      	mov	r2, r3
 801d17a:	4b81      	ldr	r3, [pc, #516]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d180:	4b7f      	ldr	r3, [pc, #508]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d182:	2200      	movs	r2, #0
 801d184:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801d186:	68bb      	ldr	r3, [r7, #8]
 801d188:	68db      	ldr	r3, [r3, #12]
 801d18a:	b29b      	uxth	r3, r3
 801d18c:	00db      	lsls	r3, r3, #3
 801d18e:	b29a      	uxth	r2, r3
 801d190:	4b7b      	ldr	r3, [pc, #492]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d192:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801d194:	68bb      	ldr	r3, [r7, #8]
 801d196:	7fda      	ldrb	r2, [r3, #31]
 801d198:	4b79      	ldr	r3, [pc, #484]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d19a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d19c:	68bb      	ldr	r3, [r7, #8]
 801d19e:	7f9b      	ldrb	r3, [r3, #30]
 801d1a0:	00db      	lsls	r3, r3, #3
 801d1a2:	b2da      	uxtb	r2, r3
 801d1a4:	4b76      	ldr	r3, [pc, #472]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d1a6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801d1a8:	68bb      	ldr	r3, [r7, #8]
 801d1aa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801d1ae:	4b74      	ldr	r3, [pc, #464]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d1b0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801d1b2:	68bb      	ldr	r3, [r7, #8]
 801d1b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d105      	bne.n	801d1c8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801d1bc:	68bb      	ldr	r3, [r7, #8]
 801d1be:	695b      	ldr	r3, [r3, #20]
 801d1c0:	b2da      	uxtb	r2, r3
 801d1c2:	4b6f      	ldr	r3, [pc, #444]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d1c4:	759a      	strb	r2, [r3, #22]
 801d1c6:	e00b      	b.n	801d1e0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801d1c8:	68bb      	ldr	r3, [r7, #8]
 801d1ca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d1ce:	2b02      	cmp	r3, #2
 801d1d0:	d103      	bne.n	801d1da <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d1d2:	4b6b      	ldr	r3, [pc, #428]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d1d4:	22ff      	movs	r2, #255	; 0xff
 801d1d6:	759a      	strb	r2, [r3, #22]
 801d1d8:	e002      	b.n	801d1e0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d1da:	4b69      	ldr	r3, [pc, #420]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d1dc:	22ff      	movs	r2, #255	; 0xff
 801d1de:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d1e0:	68bb      	ldr	r3, [r7, #8]
 801d1e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d1e6:	2b02      	cmp	r3, #2
 801d1e8:	d004      	beq.n	801d1f4 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d1ea:	68bb      	ldr	r3, [r7, #8]
 801d1ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d1f0:	2b02      	cmp	r3, #2
 801d1f2:	d12d      	bne.n	801d250 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d1f4:	68bb      	ldr	r3, [r7, #8]
 801d1f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d1fa:	2bf1      	cmp	r3, #241	; 0xf1
 801d1fc:	d00c      	beq.n	801d218 <RadioSetRxGenericConfig+0x15c>
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d204:	2bf2      	cmp	r3, #242	; 0xf2
 801d206:	d007      	beq.n	801d218 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d208:	68bb      	ldr	r3, [r7, #8]
 801d20a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d20e:	2b01      	cmp	r3, #1
 801d210:	d002      	beq.n	801d218 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801d212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d216:	e10b      	b.n	801d430 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801d218:	2300      	movs	r3, #0
 801d21a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801d21c:	68bb      	ldr	r3, [r7, #8]
 801d21e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801d220:	4b58      	ldr	r3, [pc, #352]	; (801d384 <RadioSetRxGenericConfig+0x2c8>)
 801d222:	6819      	ldr	r1, [r3, #0]
 801d224:	f107 0314 	add.w	r3, r7, #20
 801d228:	4a57      	ldr	r2, [pc, #348]	; (801d388 <RadioSetRxGenericConfig+0x2cc>)
 801d22a:	4618      	mov	r0, r3
 801d22c:	f001 fd48 	bl	801ecc0 <RFW_Init>
 801d230:	4603      	mov	r3, r0
 801d232:	2b00      	cmp	r3, #0
 801d234:	d002      	beq.n	801d23c <RadioSetRxGenericConfig+0x180>
                return -1;
 801d236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d23a:	e0f9      	b.n	801d430 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d23c:	4b50      	ldr	r3, [pc, #320]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d23e:	2200      	movs	r2, #0
 801d240:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d242:	4b4f      	ldr	r3, [pc, #316]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d244:	2201      	movs	r2, #1
 801d246:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d248:	4b4d      	ldr	r3, [pc, #308]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d24a:	2200      	movs	r2, #0
 801d24c:	755a      	strb	r2, [r3, #21]
        {
 801d24e:	e00e      	b.n	801d26e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d250:	68bb      	ldr	r3, [r7, #8]
 801d252:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801d256:	4b4a      	ldr	r3, [pc, #296]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d258:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d25a:	68bb      	ldr	r3, [r7, #8]
 801d25c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801d260:	4b47      	ldr	r3, [pc, #284]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d262:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801d264:	68bb      	ldr	r3, [r7, #8]
 801d266:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801d26a:	4b45      	ldr	r3, [pc, #276]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d26c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801d26e:	f7ff fa3c 	bl	801c6ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d272:	2000      	movs	r0, #0
 801d274:	f7fe fbd0 	bl	801ba18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d278:	4844      	ldr	r0, [pc, #272]	; (801d38c <RadioSetRxGenericConfig+0x2d0>)
 801d27a:	f001 f82d 	bl	801e2d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d27e:	4844      	ldr	r0, [pc, #272]	; (801d390 <RadioSetRxGenericConfig+0x2d4>)
 801d280:	f001 f8fc 	bl	801e47c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d284:	f107 0320 	add.w	r3, r7, #32
 801d288:	4618      	mov	r0, r3
 801d28a:	f000 fbc0 	bl	801da0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d28e:	68bb      	ldr	r3, [r7, #8]
 801d290:	8b9b      	ldrh	r3, [r3, #28]
 801d292:	4618      	mov	r0, r3
 801d294:	f000 fc0a 	bl	801daac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d298:	68bb      	ldr	r3, [r7, #8]
 801d29a:	8b1b      	ldrh	r3, [r3, #24]
 801d29c:	4618      	mov	r0, r3
 801d29e:	f000 fbe5 	bl	801da6c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801d2a2:	683b      	ldr	r3, [r7, #0]
 801d2a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801d2a8:	fb03 f202 	mul.w	r2, r3, r2
 801d2ac:	68bb      	ldr	r3, [r7, #8]
 801d2ae:	689b      	ldr	r3, [r3, #8]
 801d2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 801d2b4:	4a32      	ldr	r2, [pc, #200]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d2b6:	6093      	str	r3, [r2, #8]
        break;
 801d2b8:	e0b9      	b.n	801d42e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801d2ba:	68bb      	ldr	r3, [r7, #8]
 801d2bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d102      	bne.n	801d2c8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801d2c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d2c6:	e0b3      	b.n	801d430 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801d2c8:	68bb      	ldr	r3, [r7, #8]
 801d2ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d2ce:	2b01      	cmp	r3, #1
 801d2d0:	d104      	bne.n	801d2dc <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801d2d2:	68bb      	ldr	r3, [r7, #8]
 801d2d4:	695b      	ldr	r3, [r3, #20]
 801d2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d2da:	e002      	b.n	801d2e2 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801d2dc:	23ff      	movs	r3, #255	; 0xff
 801d2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d2e2:	68bb      	ldr	r3, [r7, #8]
 801d2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	bf14      	ite	ne
 801d2ea:	2301      	movne	r3, #1
 801d2ec:	2300      	moveq	r3, #0
 801d2ee:	b2db      	uxtb	r3, r3
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	f000 fd53 	bl	801dd9c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801d2f6:	683b      	ldr	r3, [r7, #0]
 801d2f8:	b2db      	uxtb	r3, r3
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f000 fd5d 	bl	801ddba <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d300:	4b1f      	ldr	r3, [pc, #124]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d302:	2201      	movs	r2, #1
 801d304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d308:	68bb      	ldr	r3, [r7, #8]
 801d30a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801d30e:	4b1c      	ldr	r3, [pc, #112]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d314:	68bb      	ldr	r3, [r7, #8]
 801d316:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801d31a:	4b19      	ldr	r3, [pc, #100]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d31c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d320:	68bb      	ldr	r3, [r7, #8]
 801d322:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801d326:	4b16      	ldr	r3, [pc, #88]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d328:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d32c:	68bb      	ldr	r3, [r7, #8]
 801d32e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d332:	2b02      	cmp	r3, #2
 801d334:	d010      	beq.n	801d358 <RadioSetRxGenericConfig+0x29c>
 801d336:	2b02      	cmp	r3, #2
 801d338:	dc2c      	bgt.n	801d394 <RadioSetRxGenericConfig+0x2d8>
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d002      	beq.n	801d344 <RadioSetRxGenericConfig+0x288>
 801d33e:	2b01      	cmp	r3, #1
 801d340:	d005      	beq.n	801d34e <RadioSetRxGenericConfig+0x292>
            break;
 801d342:	e027      	b.n	801d394 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d344:	4b0e      	ldr	r3, [pc, #56]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d346:	2200      	movs	r2, #0
 801d348:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d34c:	e023      	b.n	801d396 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d34e:	4b0c      	ldr	r3, [pc, #48]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d350:	2201      	movs	r2, #1
 801d352:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d356:	e01e      	b.n	801d396 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d358:	68bb      	ldr	r3, [r7, #8]
 801d35a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d35e:	2b0b      	cmp	r3, #11
 801d360:	d004      	beq.n	801d36c <RadioSetRxGenericConfig+0x2b0>
 801d362:	68bb      	ldr	r3, [r7, #8]
 801d364:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d368:	2b0c      	cmp	r3, #12
 801d36a:	d104      	bne.n	801d376 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d36c:	4b04      	ldr	r3, [pc, #16]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d36e:	2201      	movs	r2, #1
 801d370:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d374:	e00f      	b.n	801d396 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d376:	4b02      	ldr	r3, [pc, #8]	; (801d380 <RadioSetRxGenericConfig+0x2c4>)
 801d378:	2200      	movs	r2, #0
 801d37a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d37e:	e00a      	b.n	801d396 <RadioSetRxGenericConfig+0x2da>
 801d380:	20001d9c 	.word	0x20001d9c
 801d384:	20001d98 	.word	0x20001d98
 801d388:	20001e10 	.word	0x20001e10
 801d38c:	20001dd4 	.word	0x20001dd4
 801d390:	20001daa 	.word	0x20001daa
            break;
 801d394:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d396:	4b28      	ldr	r3, [pc, #160]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d398:	2201      	movs	r2, #1
 801d39a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d39c:	68bb      	ldr	r3, [r7, #8]
 801d39e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801d3a0:	4b25      	ldr	r3, [pc, #148]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d3a2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d3a4:	68bb      	ldr	r3, [r7, #8]
 801d3a6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801d3aa:	4b23      	ldr	r3, [pc, #140]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d3ac:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d3ae:	4a22      	ldr	r2, [pc, #136]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d3b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d3b4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d3b6:	68bb      	ldr	r3, [r7, #8]
 801d3b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801d3bc:	4b1e      	ldr	r3, [pc, #120]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d3be:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d3c2:	68bb      	ldr	r3, [r7, #8]
 801d3c4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801d3c8:	4b1b      	ldr	r3, [pc, #108]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d3ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d3ce:	f7ff f98c 	bl	801c6ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d3d2:	2001      	movs	r0, #1
 801d3d4:	f7fe fb20 	bl	801ba18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d3d8:	4818      	ldr	r0, [pc, #96]	; (801d43c <RadioSetRxGenericConfig+0x380>)
 801d3da:	f000 ff7d 	bl	801e2d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d3de:	4818      	ldr	r0, [pc, #96]	; (801d440 <RadioSetRxGenericConfig+0x384>)
 801d3e0:	f001 f84c 	bl	801e47c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d3e4:	4b14      	ldr	r3, [pc, #80]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d3e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d3ea:	2b01      	cmp	r3, #1
 801d3ec:	d10d      	bne.n	801d40a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801d3ee:	f240 7036 	movw	r0, #1846	; 0x736
 801d3f2:	f001 f99f 	bl	801e734 <SUBGRF_ReadRegister>
 801d3f6:	4603      	mov	r3, r0
 801d3f8:	f023 0304 	bic.w	r3, r3, #4
 801d3fc:	b2db      	uxtb	r3, r3
 801d3fe:	4619      	mov	r1, r3
 801d400:	f240 7036 	movw	r0, #1846	; 0x736
 801d404:	f001 f982 	bl	801e70c <SUBGRF_WriteRegister>
 801d408:	e00c      	b.n	801d424 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801d40a:	f240 7036 	movw	r0, #1846	; 0x736
 801d40e:	f001 f991 	bl	801e734 <SUBGRF_ReadRegister>
 801d412:	4603      	mov	r3, r0
 801d414:	f043 0304 	orr.w	r3, r3, #4
 801d418:	b2db      	uxtb	r3, r3
 801d41a:	4619      	mov	r1, r3
 801d41c:	f240 7036 	movw	r0, #1846	; 0x736
 801d420:	f001 f974 	bl	801e70c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d424:	4b04      	ldr	r3, [pc, #16]	; (801d438 <RadioSetRxGenericConfig+0x37c>)
 801d426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d42a:	609a      	str	r2, [r3, #8]
        break;
 801d42c:	bf00      	nop
    }
    return status;
 801d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d430:	4618      	mov	r0, r3
 801d432:	3730      	adds	r7, #48	; 0x30
 801d434:	46bd      	mov	sp, r7
 801d436:	bd80      	pop	{r7, pc}
 801d438:	20001d9c 	.word	0x20001d9c
 801d43c:	20001dd4 	.word	0x20001dd4
 801d440:	20001daa 	.word	0x20001daa

0801d444 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801d444:	b580      	push	{r7, lr}
 801d446:	b08e      	sub	sp, #56	; 0x38
 801d448:	af00      	add	r7, sp, #0
 801d44a:	60b9      	str	r1, [r7, #8]
 801d44c:	607b      	str	r3, [r7, #4]
 801d44e:	4603      	mov	r3, r0
 801d450:	73fb      	strb	r3, [r7, #15]
 801d452:	4613      	mov	r3, r2
 801d454:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801d456:	2300      	movs	r3, #0
 801d458:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d45a:	2300      	movs	r3, #0
 801d45c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d45e:	f001 fc3c 	bl	801ecda <RFW_DeInit>
    switch( modem )
 801d462:	7bfb      	ldrb	r3, [r7, #15]
 801d464:	2b03      	cmp	r3, #3
 801d466:	f200 8204 	bhi.w	801d872 <RadioSetTxGenericConfig+0x42e>
 801d46a:	a201      	add	r2, pc, #4	; (adr r2, 801d470 <RadioSetTxGenericConfig+0x2c>)
 801d46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d470:	0801d5f5 	.word	0x0801d5f5
 801d474:	0801d73d 	.word	0x0801d73d
 801d478:	0801d835 	.word	0x0801d835
 801d47c:	0801d481 	.word	0x0801d481
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801d480:	68bb      	ldr	r3, [r7, #8]
 801d482:	7c9b      	ldrb	r3, [r3, #18]
 801d484:	2b08      	cmp	r3, #8
 801d486:	d902      	bls.n	801d48e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801d488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d48c:	e206      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801d48e:	68bb      	ldr	r3, [r7, #8]
 801d490:	6899      	ldr	r1, [r3, #8]
 801d492:	68bb      	ldr	r3, [r7, #8]
 801d494:	7c9b      	ldrb	r3, [r3, #18]
 801d496:	b29a      	uxth	r2, r3
 801d498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d49c:	4618      	mov	r0, r3
 801d49e:	f001 fd0f 	bl	801eec0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801d4a2:	68bb      	ldr	r3, [r7, #8]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d102      	bne.n	801d4b0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801d4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4ae:	e1f5      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801d4b0:	68bb      	ldr	r3, [r7, #8]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	f242 7210 	movw	r2, #10000	; 0x2710
 801d4b8:	4293      	cmp	r3, r2
 801d4ba:	d813      	bhi.n	801d4e4 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801d4bc:	2302      	movs	r3, #2
 801d4be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801d4c2:	4b99      	ldr	r3, [pc, #612]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d4c4:	2203      	movs	r2, #3
 801d4c6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801d4c8:	4b97      	ldr	r3, [pc, #604]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d4ca:	2203      	movs	r2, #3
 801d4cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d4d0:	68bb      	ldr	r3, [r7, #8]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	4a94      	ldr	r2, [pc, #592]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d4d6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d4d8:	68bb      	ldr	r3, [r7, #8]
 801d4da:	7cda      	ldrb	r2, [r3, #19]
 801d4dc:	4b92      	ldr	r3, [pc, #584]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d4e2:	e017      	b.n	801d514 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d4ea:	4b8f      	ldr	r3, [pc, #572]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d4ec:	2200      	movs	r2, #0
 801d4ee:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d4f0:	4b8d      	ldr	r3, [pc, #564]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d4f2:	2200      	movs	r2, #0
 801d4f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d4f8:	68bb      	ldr	r3, [r7, #8]
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	4a8a      	ldr	r2, [pc, #552]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d4fe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d500:	68bb      	ldr	r3, [r7, #8]
 801d502:	7cda      	ldrb	r2, [r3, #19]
 801d504:	4b88      	ldr	r3, [pc, #544]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	089b      	lsrs	r3, r3, #2
 801d510:	4a85      	ldr	r2, [pc, #532]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d512:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801d514:	68bb      	ldr	r3, [r7, #8]
 801d516:	685b      	ldr	r3, [r3, #4]
 801d518:	b29b      	uxth	r3, r3
 801d51a:	00db      	lsls	r3, r3, #3
 801d51c:	b29a      	uxth	r2, r3
 801d51e:	4b82      	ldr	r3, [pc, #520]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d520:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d522:	4b81      	ldr	r3, [pc, #516]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d524:	2204      	movs	r2, #4
 801d526:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801d528:	68bb      	ldr	r3, [r7, #8]
 801d52a:	7c9b      	ldrb	r3, [r3, #18]
 801d52c:	00db      	lsls	r3, r3, #3
 801d52e:	b2da      	uxtb	r2, r3
 801d530:	4b7d      	ldr	r3, [pc, #500]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d532:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d534:	4b7c      	ldr	r3, [pc, #496]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d536:	2200      	movs	r2, #0
 801d538:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d53a:	68bb      	ldr	r3, [r7, #8]
 801d53c:	7d9b      	ldrb	r3, [r3, #22]
 801d53e:	2b02      	cmp	r3, #2
 801d540:	d003      	beq.n	801d54a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d542:	68bb      	ldr	r3, [r7, #8]
 801d544:	7d1b      	ldrb	r3, [r3, #20]
 801d546:	2b02      	cmp	r3, #2
 801d548:	d12b      	bne.n	801d5a2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d54a:	68bb      	ldr	r3, [r7, #8]
 801d54c:	7d5b      	ldrb	r3, [r3, #21]
 801d54e:	2bf1      	cmp	r3, #241	; 0xf1
 801d550:	d00a      	beq.n	801d568 <RadioSetTxGenericConfig+0x124>
 801d552:	68bb      	ldr	r3, [r7, #8]
 801d554:	7d5b      	ldrb	r3, [r3, #21]
 801d556:	2bf2      	cmp	r3, #242	; 0xf2
 801d558:	d006      	beq.n	801d568 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d55a:	68bb      	ldr	r3, [r7, #8]
 801d55c:	7d5b      	ldrb	r3, [r3, #21]
 801d55e:	2b01      	cmp	r3, #1
 801d560:	d002      	beq.n	801d568 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801d562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d566:	e199      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801d568:	68bb      	ldr	r3, [r7, #8]
 801d56a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801d56c:	2301      	movs	r3, #1
 801d56e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d572:	4b6e      	ldr	r3, [pc, #440]	; (801d72c <RadioSetTxGenericConfig+0x2e8>)
 801d574:	6819      	ldr	r1, [r3, #0]
 801d576:	f107 0320 	add.w	r3, r7, #32
 801d57a:	4a6d      	ldr	r2, [pc, #436]	; (801d730 <RadioSetTxGenericConfig+0x2ec>)
 801d57c:	4618      	mov	r0, r3
 801d57e:	f001 fb9f 	bl	801ecc0 <RFW_Init>
 801d582:	4603      	mov	r3, r0
 801d584:	2b00      	cmp	r3, #0
 801d586:	d002      	beq.n	801d58e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801d588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d58c:	e186      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d58e:	4b66      	ldr	r3, [pc, #408]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d590:	2200      	movs	r2, #0
 801d592:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d594:	4b64      	ldr	r3, [pc, #400]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d596:	2201      	movs	r2, #1
 801d598:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d59a:	4b63      	ldr	r3, [pc, #396]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d59c:	2200      	movs	r2, #0
 801d59e:	755a      	strb	r2, [r3, #21]
        {
 801d5a0:	e00b      	b.n	801d5ba <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801d5a2:	68bb      	ldr	r3, [r7, #8]
 801d5a4:	7d5a      	ldrb	r2, [r3, #21]
 801d5a6:	4b60      	ldr	r3, [pc, #384]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d5a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801d5aa:	68bb      	ldr	r3, [r7, #8]
 801d5ac:	7d9a      	ldrb	r2, [r3, #22]
 801d5ae:	4b5e      	ldr	r3, [pc, #376]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d5b0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801d5b2:	68bb      	ldr	r3, [r7, #8]
 801d5b4:	7d1a      	ldrb	r2, [r3, #20]
 801d5b6:	4b5c      	ldr	r3, [pc, #368]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d5b8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d5ba:	f7ff f896 	bl	801c6ea <RadioStandby>
        RadioSetModem( radio_modem );
 801d5be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f7fe fa28 	bl	801ba18 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d5c8:	485a      	ldr	r0, [pc, #360]	; (801d734 <RadioSetTxGenericConfig+0x2f0>)
 801d5ca:	f000 fe85 	bl	801e2d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d5ce:	485a      	ldr	r0, [pc, #360]	; (801d738 <RadioSetTxGenericConfig+0x2f4>)
 801d5d0:	f000 ff54 	bl	801e47c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d5d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f000 fa18 	bl	801da0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801d5de:	68bb      	ldr	r3, [r7, #8]
 801d5e0:	8a1b      	ldrh	r3, [r3, #16]
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	f000 fa62 	bl	801daac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801d5e8:	68bb      	ldr	r3, [r7, #8]
 801d5ea:	899b      	ldrh	r3, [r3, #12]
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f000 fa3d 	bl	801da6c <SUBGRF_SetCrcPolynomial>
        break;
 801d5f2:	e13f      	b.n	801d874 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801d5f4:	68bb      	ldr	r3, [r7, #8]
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d102      	bne.n	801d602 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801d5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d600:	e14c      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801d602:	68bb      	ldr	r3, [r7, #8]
 801d604:	7c9b      	ldrb	r3, [r3, #18]
 801d606:	2b08      	cmp	r3, #8
 801d608:	d902      	bls.n	801d610 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801d60a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d60e:	e145      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d610:	68bb      	ldr	r3, [r7, #8]
 801d612:	6899      	ldr	r1, [r3, #8]
 801d614:	68bb      	ldr	r3, [r7, #8]
 801d616:	7c9b      	ldrb	r3, [r3, #18]
 801d618:	b29a      	uxth	r2, r3
 801d61a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d61e:	4618      	mov	r0, r3
 801d620:	f001 fc4e 	bl	801eec0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d624:	4b40      	ldr	r3, [pc, #256]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d626:	2200      	movs	r2, #0
 801d628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d62c:	68bb      	ldr	r3, [r7, #8]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	4a3d      	ldr	r2, [pc, #244]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d632:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d634:	68bb      	ldr	r3, [r7, #8]
 801d636:	7cda      	ldrb	r2, [r3, #19]
 801d638:	4b3b      	ldr	r3, [pc, #236]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d63e:	68bb      	ldr	r3, [r7, #8]
 801d640:	699b      	ldr	r3, [r3, #24]
 801d642:	4a39      	ldr	r2, [pc, #228]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d644:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d646:	4b38      	ldr	r3, [pc, #224]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d648:	2200      	movs	r2, #0
 801d64a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d64c:	68bb      	ldr	r3, [r7, #8]
 801d64e:	685b      	ldr	r3, [r3, #4]
 801d650:	b29b      	uxth	r3, r3
 801d652:	00db      	lsls	r3, r3, #3
 801d654:	b29a      	uxth	r2, r3
 801d656:	4b34      	ldr	r3, [pc, #208]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d658:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d65a:	4b33      	ldr	r3, [pc, #204]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d65c:	2204      	movs	r2, #4
 801d65e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d660:	68bb      	ldr	r3, [r7, #8]
 801d662:	7c9b      	ldrb	r3, [r3, #18]
 801d664:	00db      	lsls	r3, r3, #3
 801d666:	b2da      	uxtb	r2, r3
 801d668:	4b2f      	ldr	r3, [pc, #188]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d66a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d66c:	4b2e      	ldr	r3, [pc, #184]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d66e:	2200      	movs	r2, #0
 801d670:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	7d9b      	ldrb	r3, [r3, #22]
 801d676:	2b02      	cmp	r3, #2
 801d678:	d003      	beq.n	801d682 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d67a:	68bb      	ldr	r3, [r7, #8]
 801d67c:	7d1b      	ldrb	r3, [r3, #20]
 801d67e:	2b02      	cmp	r3, #2
 801d680:	d12a      	bne.n	801d6d8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d682:	68bb      	ldr	r3, [r7, #8]
 801d684:	7d5b      	ldrb	r3, [r3, #21]
 801d686:	2bf1      	cmp	r3, #241	; 0xf1
 801d688:	d00a      	beq.n	801d6a0 <RadioSetTxGenericConfig+0x25c>
 801d68a:	68bb      	ldr	r3, [r7, #8]
 801d68c:	7d5b      	ldrb	r3, [r3, #21]
 801d68e:	2bf2      	cmp	r3, #242	; 0xf2
 801d690:	d006      	beq.n	801d6a0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d692:	68bb      	ldr	r3, [r7, #8]
 801d694:	7d5b      	ldrb	r3, [r3, #21]
 801d696:	2b01      	cmp	r3, #1
 801d698:	d002      	beq.n	801d6a0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801d69a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d69e:	e0fd      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801d6a0:	2301      	movs	r3, #1
 801d6a2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801d6a4:	68bb      	ldr	r3, [r7, #8]
 801d6a6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d6a8:	4b20      	ldr	r3, [pc, #128]	; (801d72c <RadioSetTxGenericConfig+0x2e8>)
 801d6aa:	6819      	ldr	r1, [r3, #0]
 801d6ac:	f107 0314 	add.w	r3, r7, #20
 801d6b0:	4a1f      	ldr	r2, [pc, #124]	; (801d730 <RadioSetTxGenericConfig+0x2ec>)
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f001 fb04 	bl	801ecc0 <RFW_Init>
 801d6b8:	4603      	mov	r3, r0
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d002      	beq.n	801d6c4 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801d6be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d6c2:	e0eb      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d6c4:	4b18      	ldr	r3, [pc, #96]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d6c6:	2200      	movs	r2, #0
 801d6c8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d6ca:	4b17      	ldr	r3, [pc, #92]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d6cc:	2201      	movs	r2, #1
 801d6ce:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d6d0:	4b15      	ldr	r3, [pc, #84]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d6d2:	2200      	movs	r2, #0
 801d6d4:	755a      	strb	r2, [r3, #21]
        {
 801d6d6:	e00b      	b.n	801d6f0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d6d8:	68bb      	ldr	r3, [r7, #8]
 801d6da:	7d5a      	ldrb	r2, [r3, #21]
 801d6dc:	4b12      	ldr	r3, [pc, #72]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d6de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d6e0:	68bb      	ldr	r3, [r7, #8]
 801d6e2:	7d9a      	ldrb	r2, [r3, #22]
 801d6e4:	4b10      	ldr	r3, [pc, #64]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d6e6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d6e8:	68bb      	ldr	r3, [r7, #8]
 801d6ea:	7d1a      	ldrb	r2, [r3, #20]
 801d6ec:	4b0e      	ldr	r3, [pc, #56]	; (801d728 <RadioSetTxGenericConfig+0x2e4>)
 801d6ee:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d6f0:	f7fe fffb 	bl	801c6ea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d6f4:	2000      	movs	r0, #0
 801d6f6:	f7fe f98f 	bl	801ba18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d6fa:	480e      	ldr	r0, [pc, #56]	; (801d734 <RadioSetTxGenericConfig+0x2f0>)
 801d6fc:	f000 fdec 	bl	801e2d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d700:	480d      	ldr	r0, [pc, #52]	; (801d738 <RadioSetTxGenericConfig+0x2f4>)
 801d702:	f000 febb 	bl	801e47c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d70a:	4618      	mov	r0, r3
 801d70c:	f000 f97f 	bl	801da0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d710:	68bb      	ldr	r3, [r7, #8]
 801d712:	8a1b      	ldrh	r3, [r3, #16]
 801d714:	4618      	mov	r0, r3
 801d716:	f000 f9c9 	bl	801daac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d71a:	68bb      	ldr	r3, [r7, #8]
 801d71c:	899b      	ldrh	r3, [r3, #12]
 801d71e:	4618      	mov	r0, r3
 801d720:	f000 f9a4 	bl	801da6c <SUBGRF_SetCrcPolynomial>
        break;
 801d724:	e0a6      	b.n	801d874 <RadioSetTxGenericConfig+0x430>
 801d726:	bf00      	nop
 801d728:	20001d9c 	.word	0x20001d9c
 801d72c:	20001d98 	.word	0x20001d98
 801d730:	20001df8 	.word	0x20001df8
 801d734:	20001dd4 	.word	0x20001dd4
 801d738:	20001daa 	.word	0x20001daa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d73c:	4b59      	ldr	r3, [pc, #356]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d73e:	2201      	movs	r2, #1
 801d740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d744:	68bb      	ldr	r3, [r7, #8]
 801d746:	781a      	ldrb	r2, [r3, #0]
 801d748:	4b56      	ldr	r3, [pc, #344]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d74a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d74e:	68bb      	ldr	r3, [r7, #8]
 801d750:	785a      	ldrb	r2, [r3, #1]
 801d752:	4b54      	ldr	r3, [pc, #336]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d758:	68bb      	ldr	r3, [r7, #8]
 801d75a:	789a      	ldrb	r2, [r3, #2]
 801d75c:	4b51      	ldr	r3, [pc, #324]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d75e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d762:	68bb      	ldr	r3, [r7, #8]
 801d764:	78db      	ldrb	r3, [r3, #3]
 801d766:	2b02      	cmp	r3, #2
 801d768:	d010      	beq.n	801d78c <RadioSetTxGenericConfig+0x348>
 801d76a:	2b02      	cmp	r3, #2
 801d76c:	dc20      	bgt.n	801d7b0 <RadioSetTxGenericConfig+0x36c>
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d002      	beq.n	801d778 <RadioSetTxGenericConfig+0x334>
 801d772:	2b01      	cmp	r3, #1
 801d774:	d005      	beq.n	801d782 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801d776:	e01b      	b.n	801d7b0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d778:	4b4a      	ldr	r3, [pc, #296]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d77a:	2200      	movs	r2, #0
 801d77c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d780:	e017      	b.n	801d7b2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d782:	4b48      	ldr	r3, [pc, #288]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d784:	2201      	movs	r2, #1
 801d786:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d78a:	e012      	b.n	801d7b2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d78c:	68bb      	ldr	r3, [r7, #8]
 801d78e:	781b      	ldrb	r3, [r3, #0]
 801d790:	2b0b      	cmp	r3, #11
 801d792:	d003      	beq.n	801d79c <RadioSetTxGenericConfig+0x358>
 801d794:	68bb      	ldr	r3, [r7, #8]
 801d796:	781b      	ldrb	r3, [r3, #0]
 801d798:	2b0c      	cmp	r3, #12
 801d79a:	d104      	bne.n	801d7a6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d79c:	4b41      	ldr	r3, [pc, #260]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d79e:	2201      	movs	r2, #1
 801d7a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d7a4:	e005      	b.n	801d7b2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d7a6:	4b3f      	ldr	r3, [pc, #252]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d7a8:	2200      	movs	r2, #0
 801d7aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d7ae:	e000      	b.n	801d7b2 <RadioSetTxGenericConfig+0x36e>
            break;
 801d7b0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d7b2:	4b3c      	ldr	r3, [pc, #240]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d7b4:	2201      	movs	r2, #1
 801d7b6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d7b8:	68bb      	ldr	r3, [r7, #8]
 801d7ba:	889a      	ldrh	r2, [r3, #4]
 801d7bc:	4b39      	ldr	r3, [pc, #228]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d7be:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d7c0:	68bb      	ldr	r3, [r7, #8]
 801d7c2:	799a      	ldrb	r2, [r3, #6]
 801d7c4:	4b37      	ldr	r3, [pc, #220]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d7c6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d7c8:	68bb      	ldr	r3, [r7, #8]
 801d7ca:	79da      	ldrb	r2, [r3, #7]
 801d7cc:	4b35      	ldr	r3, [pc, #212]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d7ce:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d7d2:	68bb      	ldr	r3, [r7, #8]
 801d7d4:	7a1a      	ldrb	r2, [r3, #8]
 801d7d6:	4b33      	ldr	r3, [pc, #204]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d7d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801d7dc:	f7fe ff85 	bl	801c6ea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d7e0:	2001      	movs	r0, #1
 801d7e2:	f7fe f919 	bl	801ba18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d7e6:	4830      	ldr	r0, [pc, #192]	; (801d8a8 <RadioSetTxGenericConfig+0x464>)
 801d7e8:	f000 fd76 	bl	801e2d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d7ec:	482f      	ldr	r0, [pc, #188]	; (801d8ac <RadioSetTxGenericConfig+0x468>)
 801d7ee:	f000 fe45 	bl	801e47c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d7f2:	4b2c      	ldr	r3, [pc, #176]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d7f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d7f8:	2b06      	cmp	r3, #6
 801d7fa:	d10d      	bne.n	801d818 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801d7fc:	f640 0089 	movw	r0, #2185	; 0x889
 801d800:	f000 ff98 	bl	801e734 <SUBGRF_ReadRegister>
 801d804:	4603      	mov	r3, r0
 801d806:	f023 0304 	bic.w	r3, r3, #4
 801d80a:	b2db      	uxtb	r3, r3
 801d80c:	4619      	mov	r1, r3
 801d80e:	f640 0089 	movw	r0, #2185	; 0x889
 801d812:	f000 ff7b 	bl	801e70c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801d816:	e02d      	b.n	801d874 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801d818:	f640 0089 	movw	r0, #2185	; 0x889
 801d81c:	f000 ff8a 	bl	801e734 <SUBGRF_ReadRegister>
 801d820:	4603      	mov	r3, r0
 801d822:	f043 0304 	orr.w	r3, r3, #4
 801d826:	b2db      	uxtb	r3, r3
 801d828:	4619      	mov	r1, r3
 801d82a:	f640 0089 	movw	r0, #2185	; 0x889
 801d82e:	f000 ff6d 	bl	801e70c <SUBGRF_WriteRegister>
        break;
 801d832:	e01f      	b.n	801d874 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d834:	68bb      	ldr	r3, [r7, #8]
 801d836:	681b      	ldr	r3, [r3, #0]
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d004      	beq.n	801d846 <RadioSetTxGenericConfig+0x402>
 801d83c:	68bb      	ldr	r3, [r7, #8]
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d844:	d902      	bls.n	801d84c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801d846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d84a:	e027      	b.n	801d89c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801d84c:	2003      	movs	r0, #3
 801d84e:	f7fe f8e3 	bl	801ba18 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d852:	4b14      	ldr	r3, [pc, #80]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d854:	2202      	movs	r2, #2
 801d856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d85a:	68bb      	ldr	r3, [r7, #8]
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	4a11      	ldr	r2, [pc, #68]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d860:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d862:	4b10      	ldr	r3, [pc, #64]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d864:	2216      	movs	r2, #22
 801d866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d86a:	480f      	ldr	r0, [pc, #60]	; (801d8a8 <RadioSetTxGenericConfig+0x464>)
 801d86c:	f000 fd34 	bl	801e2d8 <SUBGRF_SetModulationParams>
        break;
 801d870:	e000      	b.n	801d874 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801d872:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d878:	4618      	mov	r0, r3
 801d87a:	f001 f863 	bl	801e944 <SUBGRF_SetRfTxPower>
 801d87e:	4603      	mov	r3, r0
 801d880:	461a      	mov	r2, r3
 801d882:	4b08      	ldr	r3, [pc, #32]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d884:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d888:	4b06      	ldr	r3, [pc, #24]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d88a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d88e:	4618      	mov	r0, r3
 801d890:	f001 fa37 	bl	801ed02 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d894:	4a03      	ldr	r2, [pc, #12]	; (801d8a4 <RadioSetTxGenericConfig+0x460>)
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	6053      	str	r3, [r2, #4]
    return 0;
 801d89a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d89c:	4618      	mov	r0, r3
 801d89e:	3738      	adds	r7, #56	; 0x38
 801d8a0:	46bd      	mov	sp, r7
 801d8a2:	bd80      	pop	{r7, pc}
 801d8a4:	20001d9c 	.word	0x20001d9c
 801d8a8:	20001dd4 	.word	0x20001dd4
 801d8ac:	20001daa 	.word	0x20001daa

0801d8b0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801d8b0:	b480      	push	{r7}
 801d8b2:	b085      	sub	sp, #20
 801d8b4:	af00      	add	r7, sp, #0
 801d8b6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d8b8:	2301      	movs	r3, #1
 801d8ba:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801d8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8be:	4618      	mov	r0, r3
 801d8c0:	3714      	adds	r7, #20
 801d8c2:	46bd      	mov	sp, r7
 801d8c4:	bc80      	pop	{r7}
 801d8c6:	4770      	bx	lr

0801d8c8 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801d8c8:	b480      	push	{r7}
 801d8ca:	b083      	sub	sp, #12
 801d8cc:	af00      	add	r7, sp, #0
 801d8ce:	6078      	str	r0, [r7, #4]
 801d8d0:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d8d2:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801d8d4:	4618      	mov	r0, r3
 801d8d6:	370c      	adds	r7, #12
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	bc80      	pop	{r7}
 801d8dc:	4770      	bx	lr
	...

0801d8e0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b084      	sub	sp, #16
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d002      	beq.n	801d8f4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d8ee:	4a1d      	ldr	r2, [pc, #116]	; (801d964 <SUBGRF_Init+0x84>)
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d8f4:	f7e4 fe02 	bl	80024fc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d8f8:	2002      	movs	r0, #2
 801d8fa:	f001 f8ff 	bl	801eafc <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d8fe:	4b1a      	ldr	r3, [pc, #104]	; (801d968 <SUBGRF_Init+0x88>)
 801d900:	2200      	movs	r2, #0
 801d902:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d904:	2000      	movs	r0, #0
 801d906:	f000 f97d 	bl	801dc04 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d90a:	f7f1 f9c1 	bl	800ec90 <RBI_IsTCXO>
 801d90e:	4603      	mov	r3, r0
 801d910:	2b01      	cmp	r3, #1
 801d912:	d10e      	bne.n	801d932 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d914:	2140      	movs	r1, #64	; 0x40
 801d916:	2001      	movs	r0, #1
 801d918:	f000 fb82 	bl	801e020 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d91c:	2100      	movs	r1, #0
 801d91e:	f640 1011 	movw	r0, #2321	; 0x911
 801d922:	f000 fef3 	bl	801e70c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d926:	237f      	movs	r3, #127	; 0x7f
 801d928:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d92a:	7b38      	ldrb	r0, [r7, #12]
 801d92c:	f000 fa8b 	bl	801de46 <SUBGRF_Calibrate>
 801d930:	e009      	b.n	801d946 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d932:	2120      	movs	r1, #32
 801d934:	f640 1011 	movw	r0, #2321	; 0x911
 801d938:	f000 fee8 	bl	801e70c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d93c:	2120      	movs	r1, #32
 801d93e:	f640 1012 	movw	r0, #2322	; 0x912
 801d942:	f000 fee3 	bl	801e70c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801d946:	210e      	movs	r1, #14
 801d948:	f640 101f 	movw	r0, #2335	; 0x91f
 801d94c:	f000 fede 	bl	801e70c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801d950:	f7f1 f982 	bl	800ec58 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d954:	4b05      	ldr	r3, [pc, #20]	; (801d96c <SUBGRF_Init+0x8c>)
 801d956:	2201      	movs	r2, #1
 801d958:	701a      	strb	r2, [r3, #0]
}
 801d95a:	bf00      	nop
 801d95c:	3710      	adds	r7, #16
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd80      	pop	{r7, pc}
 801d962:	bf00      	nop
 801d964:	20001e34 	.word	0x20001e34
 801d968:	20001e30 	.word	0x20001e30
 801d96c:	20001e28 	.word	0x20001e28

0801d970 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d970:	b480      	push	{r7}
 801d972:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d974:	4b02      	ldr	r3, [pc, #8]	; (801d980 <SUBGRF_GetOperatingMode+0x10>)
 801d976:	781b      	ldrb	r3, [r3, #0]
}
 801d978:	4618      	mov	r0, r3
 801d97a:	46bd      	mov	sp, r7
 801d97c:	bc80      	pop	{r7}
 801d97e:	4770      	bx	lr
 801d980:	20001e28 	.word	0x20001e28

0801d984 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b082      	sub	sp, #8
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
 801d98c:	460b      	mov	r3, r1
 801d98e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d990:	78fb      	ldrb	r3, [r7, #3]
 801d992:	461a      	mov	r2, r3
 801d994:	6879      	ldr	r1, [r7, #4]
 801d996:	2000      	movs	r0, #0
 801d998:	f000 ff24 	bl	801e7e4 <SUBGRF_WriteBuffer>
}
 801d99c:	bf00      	nop
 801d99e:	3708      	adds	r7, #8
 801d9a0:	46bd      	mov	sp, r7
 801d9a2:	bd80      	pop	{r7, pc}

0801d9a4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d9a4:	b580      	push	{r7, lr}
 801d9a6:	b086      	sub	sp, #24
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	60f8      	str	r0, [r7, #12]
 801d9ac:	60b9      	str	r1, [r7, #8]
 801d9ae:	4613      	mov	r3, r2
 801d9b0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d9b6:	f107 0317 	add.w	r3, r7, #23
 801d9ba:	4619      	mov	r1, r3
 801d9bc:	68b8      	ldr	r0, [r7, #8]
 801d9be:	f000 fe27 	bl	801e610 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d9c2:	68bb      	ldr	r3, [r7, #8]
 801d9c4:	781b      	ldrb	r3, [r3, #0]
 801d9c6:	79fa      	ldrb	r2, [r7, #7]
 801d9c8:	429a      	cmp	r2, r3
 801d9ca:	d201      	bcs.n	801d9d0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d9cc:	2301      	movs	r3, #1
 801d9ce:	e007      	b.n	801d9e0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d9d0:	7df8      	ldrb	r0, [r7, #23]
 801d9d2:	68bb      	ldr	r3, [r7, #8]
 801d9d4:	781b      	ldrb	r3, [r3, #0]
 801d9d6:	461a      	mov	r2, r3
 801d9d8:	68f9      	ldr	r1, [r7, #12]
 801d9da:	f000 ff25 	bl	801e828 <SUBGRF_ReadBuffer>

    return 0;
 801d9de:	2300      	movs	r3, #0
}
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	3718      	adds	r7, #24
 801d9e4:	46bd      	mov	sp, r7
 801d9e6:	bd80      	pop	{r7, pc}

0801d9e8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d9e8:	b580      	push	{r7, lr}
 801d9ea:	b084      	sub	sp, #16
 801d9ec:	af00      	add	r7, sp, #0
 801d9ee:	60f8      	str	r0, [r7, #12]
 801d9f0:	460b      	mov	r3, r1
 801d9f2:	607a      	str	r2, [r7, #4]
 801d9f4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d9f6:	7afb      	ldrb	r3, [r7, #11]
 801d9f8:	4619      	mov	r1, r3
 801d9fa:	68f8      	ldr	r0, [r7, #12]
 801d9fc:	f7ff ffc2 	bl	801d984 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801da00:	6878      	ldr	r0, [r7, #4]
 801da02:	f000 f91b 	bl	801dc3c <SUBGRF_SetTx>
}
 801da06:	bf00      	nop
 801da08:	3710      	adds	r7, #16
 801da0a:	46bd      	mov	sp, r7
 801da0c:	bd80      	pop	{r7, pc}

0801da0e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801da0e:	b580      	push	{r7, lr}
 801da10:	b082      	sub	sp, #8
 801da12:	af00      	add	r7, sp, #0
 801da14:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801da16:	2208      	movs	r2, #8
 801da18:	6879      	ldr	r1, [r7, #4]
 801da1a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801da1e:	f000 fe9d 	bl	801e75c <SUBGRF_WriteRegisters>
    return 0;
 801da22:	2300      	movs	r3, #0
}
 801da24:	4618      	mov	r0, r3
 801da26:	3708      	adds	r7, #8
 801da28:	46bd      	mov	sp, r7
 801da2a:	bd80      	pop	{r7, pc}

0801da2c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b084      	sub	sp, #16
 801da30:	af00      	add	r7, sp, #0
 801da32:	4603      	mov	r3, r0
 801da34:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801da36:	88fb      	ldrh	r3, [r7, #6]
 801da38:	0a1b      	lsrs	r3, r3, #8
 801da3a:	b29b      	uxth	r3, r3
 801da3c:	b2db      	uxtb	r3, r3
 801da3e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801da40:	88fb      	ldrh	r3, [r7, #6]
 801da42:	b2db      	uxtb	r3, r3
 801da44:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801da46:	f000 fb6f 	bl	801e128 <SUBGRF_GetPacketType>
 801da4a:	4603      	mov	r3, r0
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d108      	bne.n	801da62 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801da50:	f107 030c 	add.w	r3, r7, #12
 801da54:	2202      	movs	r2, #2
 801da56:	4619      	mov	r1, r3
 801da58:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801da5c:	f000 fe7e 	bl	801e75c <SUBGRF_WriteRegisters>
            break;
 801da60:	e000      	b.n	801da64 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801da62:	bf00      	nop
    }
}
 801da64:	bf00      	nop
 801da66:	3710      	adds	r7, #16
 801da68:	46bd      	mov	sp, r7
 801da6a:	bd80      	pop	{r7, pc}

0801da6c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801da6c:	b580      	push	{r7, lr}
 801da6e:	b084      	sub	sp, #16
 801da70:	af00      	add	r7, sp, #0
 801da72:	4603      	mov	r3, r0
 801da74:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801da76:	88fb      	ldrh	r3, [r7, #6]
 801da78:	0a1b      	lsrs	r3, r3, #8
 801da7a:	b29b      	uxth	r3, r3
 801da7c:	b2db      	uxtb	r3, r3
 801da7e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801da80:	88fb      	ldrh	r3, [r7, #6]
 801da82:	b2db      	uxtb	r3, r3
 801da84:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801da86:	f000 fb4f 	bl	801e128 <SUBGRF_GetPacketType>
 801da8a:	4603      	mov	r3, r0
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d108      	bne.n	801daa2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801da90:	f107 030c 	add.w	r3, r7, #12
 801da94:	2202      	movs	r2, #2
 801da96:	4619      	mov	r1, r3
 801da98:	f240 60be 	movw	r0, #1726	; 0x6be
 801da9c:	f000 fe5e 	bl	801e75c <SUBGRF_WriteRegisters>
            break;
 801daa0:	e000      	b.n	801daa4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801daa2:	bf00      	nop
    }
}
 801daa4:	bf00      	nop
 801daa6:	3710      	adds	r7, #16
 801daa8:	46bd      	mov	sp, r7
 801daaa:	bd80      	pop	{r7, pc}

0801daac <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801daac:	b580      	push	{r7, lr}
 801daae:	b084      	sub	sp, #16
 801dab0:	af00      	add	r7, sp, #0
 801dab2:	4603      	mov	r3, r0
 801dab4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801dab6:	2300      	movs	r3, #0
 801dab8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801daba:	f000 fb35 	bl	801e128 <SUBGRF_GetPacketType>
 801dabe:	4603      	mov	r3, r0
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	d121      	bne.n	801db08 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801dac4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801dac8:	f000 fe34 	bl	801e734 <SUBGRF_ReadRegister>
 801dacc:	4603      	mov	r3, r0
 801dace:	f023 0301 	bic.w	r3, r3, #1
 801dad2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801dad4:	88fb      	ldrh	r3, [r7, #6]
 801dad6:	0a1b      	lsrs	r3, r3, #8
 801dad8:	b29b      	uxth	r3, r3
 801dada:	b25b      	sxtb	r3, r3
 801dadc:	f003 0301 	and.w	r3, r3, #1
 801dae0:	b25a      	sxtb	r2, r3
 801dae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dae6:	4313      	orrs	r3, r2
 801dae8:	b25b      	sxtb	r3, r3
 801daea:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801daec:	7bfb      	ldrb	r3, [r7, #15]
 801daee:	4619      	mov	r1, r3
 801daf0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801daf4:	f000 fe0a 	bl	801e70c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801daf8:	88fb      	ldrh	r3, [r7, #6]
 801dafa:	b2db      	uxtb	r3, r3
 801dafc:	4619      	mov	r1, r3
 801dafe:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801db02:	f000 fe03 	bl	801e70c <SUBGRF_WriteRegister>
            break;
 801db06:	e000      	b.n	801db0a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801db08:	bf00      	nop
    }
}
 801db0a:	bf00      	nop
 801db0c:	3710      	adds	r7, #16
 801db0e:	46bd      	mov	sp, r7
 801db10:	bd80      	pop	{r7, pc}

0801db12 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801db12:	b580      	push	{r7, lr}
 801db14:	b082      	sub	sp, #8
 801db16:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801db18:	2300      	movs	r3, #0
 801db1a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801db1c:	2300      	movs	r3, #0
 801db1e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801db20:	2300      	movs	r3, #0
 801db22:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801db24:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801db28:	f000 fe04 	bl	801e734 <SUBGRF_ReadRegister>
 801db2c:	4603      	mov	r3, r0
 801db2e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801db30:	79fb      	ldrb	r3, [r7, #7]
 801db32:	f023 0301 	bic.w	r3, r3, #1
 801db36:	b2db      	uxtb	r3, r3
 801db38:	4619      	mov	r1, r3
 801db3a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801db3e:	f000 fde5 	bl	801e70c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801db42:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db46:	f000 fdf5 	bl	801e734 <SUBGRF_ReadRegister>
 801db4a:	4603      	mov	r3, r0
 801db4c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801db4e:	79bb      	ldrb	r3, [r7, #6]
 801db50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db54:	b2db      	uxtb	r3, r3
 801db56:	4619      	mov	r1, r3
 801db58:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db5c:	f000 fdd6 	bl	801e70c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801db60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801db64:	f000 f88a 	bl	801dc7c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801db68:	463b      	mov	r3, r7
 801db6a:	2204      	movs	r2, #4
 801db6c:	4619      	mov	r1, r3
 801db6e:	f640 0019 	movw	r0, #2073	; 0x819
 801db72:	f000 fe15 	bl	801e7a0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801db76:	2000      	movs	r0, #0
 801db78:	f000 f844 	bl	801dc04 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801db7c:	79fb      	ldrb	r3, [r7, #7]
 801db7e:	4619      	mov	r1, r3
 801db80:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801db84:	f000 fdc2 	bl	801e70c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801db88:	79bb      	ldrb	r3, [r7, #6]
 801db8a:	4619      	mov	r1, r3
 801db8c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db90:	f000 fdbc 	bl	801e70c <SUBGRF_WriteRegister>

    return number;
 801db94:	683b      	ldr	r3, [r7, #0]
}
 801db96:	4618      	mov	r0, r3
 801db98:	3708      	adds	r7, #8
 801db9a:	46bd      	mov	sp, r7
 801db9c:	bd80      	pop	{r7, pc}
	...

0801dba0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801dba0:	b580      	push	{r7, lr}
 801dba2:	b084      	sub	sp, #16
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801dba8:	2000      	movs	r0, #0
 801dbaa:	f7f1 f85c 	bl	800ec66 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801dbae:	2002      	movs	r0, #2
 801dbb0:	f000 ffa4 	bl	801eafc <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dbb4:	793b      	ldrb	r3, [r7, #4]
 801dbb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dbba:	b2db      	uxtb	r3, r3
 801dbbc:	009b      	lsls	r3, r3, #2
 801dbbe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801dbc0:	793b      	ldrb	r3, [r7, #4]
 801dbc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dbc6:	b2db      	uxtb	r3, r3
 801dbc8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dbca:	b25b      	sxtb	r3, r3
 801dbcc:	4313      	orrs	r3, r2
 801dbce:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801dbd0:	793b      	ldrb	r3, [r7, #4]
 801dbd2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dbd6:	b2db      	uxtb	r3, r3
 801dbd8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801dbda:	4313      	orrs	r3, r2
 801dbdc:	b25b      	sxtb	r3, r3
 801dbde:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dbe0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801dbe2:	f107 030f 	add.w	r3, r7, #15
 801dbe6:	2201      	movs	r2, #1
 801dbe8:	4619      	mov	r1, r3
 801dbea:	2084      	movs	r0, #132	; 0x84
 801dbec:	f000 fe3e 	bl	801e86c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801dbf0:	4b03      	ldr	r3, [pc, #12]	; (801dc00 <SUBGRF_SetSleep+0x60>)
 801dbf2:	2200      	movs	r2, #0
 801dbf4:	701a      	strb	r2, [r3, #0]
}
 801dbf6:	bf00      	nop
 801dbf8:	3710      	adds	r7, #16
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	bd80      	pop	{r7, pc}
 801dbfe:	bf00      	nop
 801dc00:	20001e28 	.word	0x20001e28

0801dc04 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b082      	sub	sp, #8
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	4603      	mov	r3, r0
 801dc0c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801dc0e:	1dfb      	adds	r3, r7, #7
 801dc10:	2201      	movs	r2, #1
 801dc12:	4619      	mov	r1, r3
 801dc14:	2080      	movs	r0, #128	; 0x80
 801dc16:	f000 fe29 	bl	801e86c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801dc1a:	79fb      	ldrb	r3, [r7, #7]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d103      	bne.n	801dc28 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801dc20:	4b05      	ldr	r3, [pc, #20]	; (801dc38 <SUBGRF_SetStandby+0x34>)
 801dc22:	2201      	movs	r2, #1
 801dc24:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801dc26:	e002      	b.n	801dc2e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801dc28:	4b03      	ldr	r3, [pc, #12]	; (801dc38 <SUBGRF_SetStandby+0x34>)
 801dc2a:	2202      	movs	r2, #2
 801dc2c:	701a      	strb	r2, [r3, #0]
}
 801dc2e:	bf00      	nop
 801dc30:	3708      	adds	r7, #8
 801dc32:	46bd      	mov	sp, r7
 801dc34:	bd80      	pop	{r7, pc}
 801dc36:	bf00      	nop
 801dc38:	20001e28 	.word	0x20001e28

0801dc3c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801dc3c:	b580      	push	{r7, lr}
 801dc3e:	b084      	sub	sp, #16
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801dc44:	4b0c      	ldr	r3, [pc, #48]	; (801dc78 <SUBGRF_SetTx+0x3c>)
 801dc46:	2204      	movs	r2, #4
 801dc48:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	0c1b      	lsrs	r3, r3, #16
 801dc4e:	b2db      	uxtb	r3, r3
 801dc50:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	0a1b      	lsrs	r3, r3, #8
 801dc56:	b2db      	uxtb	r3, r3
 801dc58:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	b2db      	uxtb	r3, r3
 801dc5e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801dc60:	f107 030c 	add.w	r3, r7, #12
 801dc64:	2203      	movs	r2, #3
 801dc66:	4619      	mov	r1, r3
 801dc68:	2083      	movs	r0, #131	; 0x83
 801dc6a:	f000 fdff 	bl	801e86c <SUBGRF_WriteCommand>
}
 801dc6e:	bf00      	nop
 801dc70:	3710      	adds	r7, #16
 801dc72:	46bd      	mov	sp, r7
 801dc74:	bd80      	pop	{r7, pc}
 801dc76:	bf00      	nop
 801dc78:	20001e28 	.word	0x20001e28

0801dc7c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801dc7c:	b580      	push	{r7, lr}
 801dc7e:	b084      	sub	sp, #16
 801dc80:	af00      	add	r7, sp, #0
 801dc82:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dc84:	4b0c      	ldr	r3, [pc, #48]	; (801dcb8 <SUBGRF_SetRx+0x3c>)
 801dc86:	2205      	movs	r2, #5
 801dc88:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	0c1b      	lsrs	r3, r3, #16
 801dc8e:	b2db      	uxtb	r3, r3
 801dc90:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	0a1b      	lsrs	r3, r3, #8
 801dc96:	b2db      	uxtb	r3, r3
 801dc98:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	b2db      	uxtb	r3, r3
 801dc9e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dca0:	f107 030c 	add.w	r3, r7, #12
 801dca4:	2203      	movs	r2, #3
 801dca6:	4619      	mov	r1, r3
 801dca8:	2082      	movs	r0, #130	; 0x82
 801dcaa:	f000 fddf 	bl	801e86c <SUBGRF_WriteCommand>
}
 801dcae:	bf00      	nop
 801dcb0:	3710      	adds	r7, #16
 801dcb2:	46bd      	mov	sp, r7
 801dcb4:	bd80      	pop	{r7, pc}
 801dcb6:	bf00      	nop
 801dcb8:	20001e28 	.word	0x20001e28

0801dcbc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801dcbc:	b580      	push	{r7, lr}
 801dcbe:	b084      	sub	sp, #16
 801dcc0:	af00      	add	r7, sp, #0
 801dcc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dcc4:	4b0e      	ldr	r3, [pc, #56]	; (801dd00 <SUBGRF_SetRxBoosted+0x44>)
 801dcc6:	2205      	movs	r2, #5
 801dcc8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801dcca:	2197      	movs	r1, #151	; 0x97
 801dccc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801dcd0:	f000 fd1c 	bl	801e70c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	0c1b      	lsrs	r3, r3, #16
 801dcd8:	b2db      	uxtb	r3, r3
 801dcda:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	0a1b      	lsrs	r3, r3, #8
 801dce0:	b2db      	uxtb	r3, r3
 801dce2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	b2db      	uxtb	r3, r3
 801dce8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dcea:	f107 030c 	add.w	r3, r7, #12
 801dcee:	2203      	movs	r2, #3
 801dcf0:	4619      	mov	r1, r3
 801dcf2:	2082      	movs	r0, #130	; 0x82
 801dcf4:	f000 fdba 	bl	801e86c <SUBGRF_WriteCommand>
}
 801dcf8:	bf00      	nop
 801dcfa:	3710      	adds	r7, #16
 801dcfc:	46bd      	mov	sp, r7
 801dcfe:	bd80      	pop	{r7, pc}
 801dd00:	20001e28 	.word	0x20001e28

0801dd04 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801dd04:	b580      	push	{r7, lr}
 801dd06:	b084      	sub	sp, #16
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	6078      	str	r0, [r7, #4]
 801dd0c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	0c1b      	lsrs	r3, r3, #16
 801dd12:	b2db      	uxtb	r3, r3
 801dd14:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	0a1b      	lsrs	r3, r3, #8
 801dd1a:	b2db      	uxtb	r3, r3
 801dd1c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	b2db      	uxtb	r3, r3
 801dd22:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801dd24:	683b      	ldr	r3, [r7, #0]
 801dd26:	0c1b      	lsrs	r3, r3, #16
 801dd28:	b2db      	uxtb	r3, r3
 801dd2a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	0a1b      	lsrs	r3, r3, #8
 801dd30:	b2db      	uxtb	r3, r3
 801dd32:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801dd34:	683b      	ldr	r3, [r7, #0]
 801dd36:	b2db      	uxtb	r3, r3
 801dd38:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801dd3a:	f107 0308 	add.w	r3, r7, #8
 801dd3e:	2206      	movs	r2, #6
 801dd40:	4619      	mov	r1, r3
 801dd42:	2094      	movs	r0, #148	; 0x94
 801dd44:	f000 fd92 	bl	801e86c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801dd48:	4b03      	ldr	r3, [pc, #12]	; (801dd58 <SUBGRF_SetRxDutyCycle+0x54>)
 801dd4a:	2206      	movs	r2, #6
 801dd4c:	701a      	strb	r2, [r3, #0]
}
 801dd4e:	bf00      	nop
 801dd50:	3710      	adds	r7, #16
 801dd52:	46bd      	mov	sp, r7
 801dd54:	bd80      	pop	{r7, pc}
 801dd56:	bf00      	nop
 801dd58:	20001e28 	.word	0x20001e28

0801dd5c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801dd60:	2200      	movs	r2, #0
 801dd62:	2100      	movs	r1, #0
 801dd64:	20c5      	movs	r0, #197	; 0xc5
 801dd66:	f000 fd81 	bl	801e86c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801dd6a:	4b02      	ldr	r3, [pc, #8]	; (801dd74 <SUBGRF_SetCad+0x18>)
 801dd6c:	2207      	movs	r2, #7
 801dd6e:	701a      	strb	r2, [r3, #0]
}
 801dd70:	bf00      	nop
 801dd72:	bd80      	pop	{r7, pc}
 801dd74:	20001e28 	.word	0x20001e28

0801dd78 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	2100      	movs	r1, #0
 801dd80:	20d1      	movs	r0, #209	; 0xd1
 801dd82:	f000 fd73 	bl	801e86c <SUBGRF_WriteCommand>
}
 801dd86:	bf00      	nop
 801dd88:	bd80      	pop	{r7, pc}

0801dd8a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801dd8a:	b580      	push	{r7, lr}
 801dd8c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801dd8e:	2200      	movs	r2, #0
 801dd90:	2100      	movs	r1, #0
 801dd92:	20d2      	movs	r0, #210	; 0xd2
 801dd94:	f000 fd6a 	bl	801e86c <SUBGRF_WriteCommand>
}
 801dd98:	bf00      	nop
 801dd9a:	bd80      	pop	{r7, pc}

0801dd9c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b082      	sub	sp, #8
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	4603      	mov	r3, r0
 801dda4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801dda6:	1dfb      	adds	r3, r7, #7
 801dda8:	2201      	movs	r2, #1
 801ddaa:	4619      	mov	r1, r3
 801ddac:	209f      	movs	r0, #159	; 0x9f
 801ddae:	f000 fd5d 	bl	801e86c <SUBGRF_WriteCommand>
}
 801ddb2:	bf00      	nop
 801ddb4:	3708      	adds	r7, #8
 801ddb6:	46bd      	mov	sp, r7
 801ddb8:	bd80      	pop	{r7, pc}

0801ddba <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801ddba:	b580      	push	{r7, lr}
 801ddbc:	b084      	sub	sp, #16
 801ddbe:	af00      	add	r7, sp, #0
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801ddc4:	1dfb      	adds	r3, r7, #7
 801ddc6:	2201      	movs	r2, #1
 801ddc8:	4619      	mov	r1, r3
 801ddca:	20a0      	movs	r0, #160	; 0xa0
 801ddcc:	f000 fd4e 	bl	801e86c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801ddd0:	79fb      	ldrb	r3, [r7, #7]
 801ddd2:	2b3f      	cmp	r3, #63	; 0x3f
 801ddd4:	d91c      	bls.n	801de10 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801ddd6:	79fb      	ldrb	r3, [r7, #7]
 801ddd8:	085b      	lsrs	r3, r3, #1
 801ddda:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801dddc:	2300      	movs	r3, #0
 801ddde:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801dde0:	2300      	movs	r3, #0
 801dde2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801dde4:	e005      	b.n	801ddf2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801dde6:	7bfb      	ldrb	r3, [r7, #15]
 801dde8:	089b      	lsrs	r3, r3, #2
 801ddea:	73fb      	strb	r3, [r7, #15]
            exp++;
 801ddec:	7bbb      	ldrb	r3, [r7, #14]
 801ddee:	3301      	adds	r3, #1
 801ddf0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801ddf2:	7bfb      	ldrb	r3, [r7, #15]
 801ddf4:	2b1f      	cmp	r3, #31
 801ddf6:	d8f6      	bhi.n	801dde6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801ddf8:	7bfb      	ldrb	r3, [r7, #15]
 801ddfa:	00db      	lsls	r3, r3, #3
 801ddfc:	b2da      	uxtb	r2, r3
 801ddfe:	7bbb      	ldrb	r3, [r7, #14]
 801de00:	4413      	add	r3, r2
 801de02:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801de04:	7b7b      	ldrb	r3, [r7, #13]
 801de06:	4619      	mov	r1, r3
 801de08:	f240 7006 	movw	r0, #1798	; 0x706
 801de0c:	f000 fc7e 	bl	801e70c <SUBGRF_WriteRegister>
    }
}
 801de10:	bf00      	nop
 801de12:	3710      	adds	r7, #16
 801de14:	46bd      	mov	sp, r7
 801de16:	bd80      	pop	{r7, pc}

0801de18 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801de18:	b580      	push	{r7, lr}
 801de1a:	b082      	sub	sp, #8
 801de1c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801de1e:	f7f0 ff3e 	bl	800ec9e <RBI_IsDCDC>
 801de22:	4603      	mov	r3, r0
 801de24:	2b01      	cmp	r3, #1
 801de26:	d102      	bne.n	801de2e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801de28:	2301      	movs	r3, #1
 801de2a:	71fb      	strb	r3, [r7, #7]
 801de2c:	e001      	b.n	801de32 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801de2e:	2300      	movs	r3, #0
 801de30:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801de32:	1dfb      	adds	r3, r7, #7
 801de34:	2201      	movs	r2, #1
 801de36:	4619      	mov	r1, r3
 801de38:	2096      	movs	r0, #150	; 0x96
 801de3a:	f000 fd17 	bl	801e86c <SUBGRF_WriteCommand>
}
 801de3e:	bf00      	nop
 801de40:	3708      	adds	r7, #8
 801de42:	46bd      	mov	sp, r7
 801de44:	bd80      	pop	{r7, pc}

0801de46 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801de46:	b580      	push	{r7, lr}
 801de48:	b084      	sub	sp, #16
 801de4a:	af00      	add	r7, sp, #0
 801de4c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801de4e:	793b      	ldrb	r3, [r7, #4]
 801de50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801de54:	b2db      	uxtb	r3, r3
 801de56:	019b      	lsls	r3, r3, #6
 801de58:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801de5a:	793b      	ldrb	r3, [r7, #4]
 801de5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801de60:	b2db      	uxtb	r3, r3
 801de62:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801de64:	b25b      	sxtb	r3, r3
 801de66:	4313      	orrs	r3, r2
 801de68:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801de6a:	793b      	ldrb	r3, [r7, #4]
 801de6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801de70:	b2db      	uxtb	r3, r3
 801de72:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801de74:	b25b      	sxtb	r3, r3
 801de76:	4313      	orrs	r3, r2
 801de78:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801de7a:	793b      	ldrb	r3, [r7, #4]
 801de7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801de80:	b2db      	uxtb	r3, r3
 801de82:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801de84:	b25b      	sxtb	r3, r3
 801de86:	4313      	orrs	r3, r2
 801de88:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801de8a:	793b      	ldrb	r3, [r7, #4]
 801de8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801de90:	b2db      	uxtb	r3, r3
 801de92:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801de94:	b25b      	sxtb	r3, r3
 801de96:	4313      	orrs	r3, r2
 801de98:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801de9a:	793b      	ldrb	r3, [r7, #4]
 801de9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dea0:	b2db      	uxtb	r3, r3
 801dea2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801dea4:	b25b      	sxtb	r3, r3
 801dea6:	4313      	orrs	r3, r2
 801dea8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801deaa:	793b      	ldrb	r3, [r7, #4]
 801deac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801deb0:	b2db      	uxtb	r3, r3
 801deb2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801deb4:	4313      	orrs	r3, r2
 801deb6:	b25b      	sxtb	r3, r3
 801deb8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801deba:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801debc:	f107 030f 	add.w	r3, r7, #15
 801dec0:	2201      	movs	r2, #1
 801dec2:	4619      	mov	r1, r3
 801dec4:	2089      	movs	r0, #137	; 0x89
 801dec6:	f000 fcd1 	bl	801e86c <SUBGRF_WriteCommand>
}
 801deca:	bf00      	nop
 801decc:	3710      	adds	r7, #16
 801dece:	46bd      	mov	sp, r7
 801ded0:	bd80      	pop	{r7, pc}
	...

0801ded4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801ded4:	b580      	push	{r7, lr}
 801ded6:	b084      	sub	sp, #16
 801ded8:	af00      	add	r7, sp, #0
 801deda:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	4a1d      	ldr	r2, [pc, #116]	; (801df54 <SUBGRF_CalibrateImage+0x80>)
 801dee0:	4293      	cmp	r3, r2
 801dee2:	d904      	bls.n	801deee <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801dee4:	23e1      	movs	r3, #225	; 0xe1
 801dee6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801dee8:	23e9      	movs	r3, #233	; 0xe9
 801deea:	737b      	strb	r3, [r7, #13]
 801deec:	e027      	b.n	801df3e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	4a19      	ldr	r2, [pc, #100]	; (801df58 <SUBGRF_CalibrateImage+0x84>)
 801def2:	4293      	cmp	r3, r2
 801def4:	d904      	bls.n	801df00 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801def6:	23d7      	movs	r3, #215	; 0xd7
 801def8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801defa:	23db      	movs	r3, #219	; 0xdb
 801defc:	737b      	strb	r3, [r7, #13]
 801defe:	e01e      	b.n	801df3e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	4a16      	ldr	r2, [pc, #88]	; (801df5c <SUBGRF_CalibrateImage+0x88>)
 801df04:	4293      	cmp	r3, r2
 801df06:	d904      	bls.n	801df12 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801df08:	23c1      	movs	r3, #193	; 0xc1
 801df0a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801df0c:	23c5      	movs	r3, #197	; 0xc5
 801df0e:	737b      	strb	r3, [r7, #13]
 801df10:	e015      	b.n	801df3e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	4a12      	ldr	r2, [pc, #72]	; (801df60 <SUBGRF_CalibrateImage+0x8c>)
 801df16:	4293      	cmp	r3, r2
 801df18:	d904      	bls.n	801df24 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801df1a:	2375      	movs	r3, #117	; 0x75
 801df1c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801df1e:	2381      	movs	r3, #129	; 0x81
 801df20:	737b      	strb	r3, [r7, #13]
 801df22:	e00c      	b.n	801df3e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	4a0f      	ldr	r2, [pc, #60]	; (801df64 <SUBGRF_CalibrateImage+0x90>)
 801df28:	4293      	cmp	r3, r2
 801df2a:	d904      	bls.n	801df36 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801df2c:	236b      	movs	r3, #107	; 0x6b
 801df2e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801df30:	236f      	movs	r3, #111	; 0x6f
 801df32:	737b      	strb	r3, [r7, #13]
 801df34:	e003      	b.n	801df3e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801df36:	2329      	movs	r3, #41	; 0x29
 801df38:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801df3a:	232b      	movs	r3, #43	; 0x2b
 801df3c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801df3e:	f107 030c 	add.w	r3, r7, #12
 801df42:	2202      	movs	r2, #2
 801df44:	4619      	mov	r1, r3
 801df46:	2098      	movs	r0, #152	; 0x98
 801df48:	f000 fc90 	bl	801e86c <SUBGRF_WriteCommand>
}
 801df4c:	bf00      	nop
 801df4e:	3710      	adds	r7, #16
 801df50:	46bd      	mov	sp, r7
 801df52:	bd80      	pop	{r7, pc}
 801df54:	35a4e900 	.word	0x35a4e900
 801df58:	32a9f880 	.word	0x32a9f880
 801df5c:	2de54480 	.word	0x2de54480
 801df60:	1b6b0b00 	.word	0x1b6b0b00
 801df64:	1954fc40 	.word	0x1954fc40

0801df68 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801df68:	b590      	push	{r4, r7, lr}
 801df6a:	b085      	sub	sp, #20
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	4604      	mov	r4, r0
 801df70:	4608      	mov	r0, r1
 801df72:	4611      	mov	r1, r2
 801df74:	461a      	mov	r2, r3
 801df76:	4623      	mov	r3, r4
 801df78:	71fb      	strb	r3, [r7, #7]
 801df7a:	4603      	mov	r3, r0
 801df7c:	71bb      	strb	r3, [r7, #6]
 801df7e:	460b      	mov	r3, r1
 801df80:	717b      	strb	r3, [r7, #5]
 801df82:	4613      	mov	r3, r2
 801df84:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801df86:	79fb      	ldrb	r3, [r7, #7]
 801df88:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801df8a:	79bb      	ldrb	r3, [r7, #6]
 801df8c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801df8e:	797b      	ldrb	r3, [r7, #5]
 801df90:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801df92:	793b      	ldrb	r3, [r7, #4]
 801df94:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801df96:	f107 030c 	add.w	r3, r7, #12
 801df9a:	2204      	movs	r2, #4
 801df9c:	4619      	mov	r1, r3
 801df9e:	2095      	movs	r0, #149	; 0x95
 801dfa0:	f000 fc64 	bl	801e86c <SUBGRF_WriteCommand>
}
 801dfa4:	bf00      	nop
 801dfa6:	3714      	adds	r7, #20
 801dfa8:	46bd      	mov	sp, r7
 801dfaa:	bd90      	pop	{r4, r7, pc}

0801dfac <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801dfac:	b590      	push	{r4, r7, lr}
 801dfae:	b085      	sub	sp, #20
 801dfb0:	af00      	add	r7, sp, #0
 801dfb2:	4604      	mov	r4, r0
 801dfb4:	4608      	mov	r0, r1
 801dfb6:	4611      	mov	r1, r2
 801dfb8:	461a      	mov	r2, r3
 801dfba:	4623      	mov	r3, r4
 801dfbc:	80fb      	strh	r3, [r7, #6]
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	80bb      	strh	r3, [r7, #4]
 801dfc2:	460b      	mov	r3, r1
 801dfc4:	807b      	strh	r3, [r7, #2]
 801dfc6:	4613      	mov	r3, r2
 801dfc8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801dfca:	88fb      	ldrh	r3, [r7, #6]
 801dfcc:	0a1b      	lsrs	r3, r3, #8
 801dfce:	b29b      	uxth	r3, r3
 801dfd0:	b2db      	uxtb	r3, r3
 801dfd2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801dfd4:	88fb      	ldrh	r3, [r7, #6]
 801dfd6:	b2db      	uxtb	r3, r3
 801dfd8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801dfda:	88bb      	ldrh	r3, [r7, #4]
 801dfdc:	0a1b      	lsrs	r3, r3, #8
 801dfde:	b29b      	uxth	r3, r3
 801dfe0:	b2db      	uxtb	r3, r3
 801dfe2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801dfe4:	88bb      	ldrh	r3, [r7, #4]
 801dfe6:	b2db      	uxtb	r3, r3
 801dfe8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801dfea:	887b      	ldrh	r3, [r7, #2]
 801dfec:	0a1b      	lsrs	r3, r3, #8
 801dfee:	b29b      	uxth	r3, r3
 801dff0:	b2db      	uxtb	r3, r3
 801dff2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801dff4:	887b      	ldrh	r3, [r7, #2]
 801dff6:	b2db      	uxtb	r3, r3
 801dff8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801dffa:	883b      	ldrh	r3, [r7, #0]
 801dffc:	0a1b      	lsrs	r3, r3, #8
 801dffe:	b29b      	uxth	r3, r3
 801e000:	b2db      	uxtb	r3, r3
 801e002:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801e004:	883b      	ldrh	r3, [r7, #0]
 801e006:	b2db      	uxtb	r3, r3
 801e008:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801e00a:	f107 0308 	add.w	r3, r7, #8
 801e00e:	2208      	movs	r2, #8
 801e010:	4619      	mov	r1, r3
 801e012:	2008      	movs	r0, #8
 801e014:	f000 fc2a 	bl	801e86c <SUBGRF_WriteCommand>
}
 801e018:	bf00      	nop
 801e01a:	3714      	adds	r7, #20
 801e01c:	46bd      	mov	sp, r7
 801e01e:	bd90      	pop	{r4, r7, pc}

0801e020 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801e020:	b580      	push	{r7, lr}
 801e022:	b084      	sub	sp, #16
 801e024:	af00      	add	r7, sp, #0
 801e026:	4603      	mov	r3, r0
 801e028:	6039      	str	r1, [r7, #0]
 801e02a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801e02c:	79fb      	ldrb	r3, [r7, #7]
 801e02e:	f003 0307 	and.w	r3, r3, #7
 801e032:	b2db      	uxtb	r3, r3
 801e034:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e036:	683b      	ldr	r3, [r7, #0]
 801e038:	0c1b      	lsrs	r3, r3, #16
 801e03a:	b2db      	uxtb	r3, r3
 801e03c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e03e:	683b      	ldr	r3, [r7, #0]
 801e040:	0a1b      	lsrs	r3, r3, #8
 801e042:	b2db      	uxtb	r3, r3
 801e044:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801e046:	683b      	ldr	r3, [r7, #0]
 801e048:	b2db      	uxtb	r3, r3
 801e04a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801e04c:	f107 030c 	add.w	r3, r7, #12
 801e050:	2204      	movs	r2, #4
 801e052:	4619      	mov	r1, r3
 801e054:	2097      	movs	r0, #151	; 0x97
 801e056:	f000 fc09 	bl	801e86c <SUBGRF_WriteCommand>
}
 801e05a:	bf00      	nop
 801e05c:	3710      	adds	r7, #16
 801e05e:	46bd      	mov	sp, r7
 801e060:	bd80      	pop	{r7, pc}
	...

0801e064 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801e064:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e068:	b084      	sub	sp, #16
 801e06a:	af00      	add	r7, sp, #0
 801e06c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801e06e:	2300      	movs	r3, #0
 801e070:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801e072:	4b1d      	ldr	r3, [pc, #116]	; (801e0e8 <SUBGRF_SetRfFrequency+0x84>)
 801e074:	781b      	ldrb	r3, [r3, #0]
 801e076:	f083 0301 	eor.w	r3, r3, #1
 801e07a:	b2db      	uxtb	r3, r3
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d005      	beq.n	801e08c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801e080:	6878      	ldr	r0, [r7, #4]
 801e082:	f7ff ff27 	bl	801ded4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801e086:	4b18      	ldr	r3, [pc, #96]	; (801e0e8 <SUBGRF_SetRfFrequency+0x84>)
 801e088:	2201      	movs	r2, #1
 801e08a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	2200      	movs	r2, #0
 801e090:	461c      	mov	r4, r3
 801e092:	4615      	mov	r5, r2
 801e094:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e098:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e09c:	4a13      	ldr	r2, [pc, #76]	; (801e0ec <SUBGRF_SetRfFrequency+0x88>)
 801e09e:	f04f 0300 	mov.w	r3, #0
 801e0a2:	4640      	mov	r0, r8
 801e0a4:	4649      	mov	r1, r9
 801e0a6:	f7e3 f835 	bl	8001114 <__aeabi_uldivmod>
 801e0aa:	4602      	mov	r2, r0
 801e0ac:	460b      	mov	r3, r1
 801e0ae:	4613      	mov	r3, r2
 801e0b0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	0e1b      	lsrs	r3, r3, #24
 801e0b6:	b2db      	uxtb	r3, r3
 801e0b8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	0c1b      	lsrs	r3, r3, #16
 801e0be:	b2db      	uxtb	r3, r3
 801e0c0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801e0c2:	68fb      	ldr	r3, [r7, #12]
 801e0c4:	0a1b      	lsrs	r3, r3, #8
 801e0c6:	b2db      	uxtb	r3, r3
 801e0c8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	b2db      	uxtb	r3, r3
 801e0ce:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801e0d0:	f107 0308 	add.w	r3, r7, #8
 801e0d4:	2204      	movs	r2, #4
 801e0d6:	4619      	mov	r1, r3
 801e0d8:	2086      	movs	r0, #134	; 0x86
 801e0da:	f000 fbc7 	bl	801e86c <SUBGRF_WriteCommand>
}
 801e0de:	bf00      	nop
 801e0e0:	3710      	adds	r7, #16
 801e0e2:	46bd      	mov	sp, r7
 801e0e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e0e8:	20001e30 	.word	0x20001e30
 801e0ec:	01e84800 	.word	0x01e84800

0801e0f0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801e0f0:	b580      	push	{r7, lr}
 801e0f2:	b082      	sub	sp, #8
 801e0f4:	af00      	add	r7, sp, #0
 801e0f6:	4603      	mov	r3, r0
 801e0f8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801e0fa:	79fa      	ldrb	r2, [r7, #7]
 801e0fc:	4b09      	ldr	r3, [pc, #36]	; (801e124 <SUBGRF_SetPacketType+0x34>)
 801e0fe:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801e100:	79fb      	ldrb	r3, [r7, #7]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d104      	bne.n	801e110 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801e106:	2100      	movs	r1, #0
 801e108:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801e10c:	f000 fafe 	bl	801e70c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801e110:	1dfb      	adds	r3, r7, #7
 801e112:	2201      	movs	r2, #1
 801e114:	4619      	mov	r1, r3
 801e116:	208a      	movs	r0, #138	; 0x8a
 801e118:	f000 fba8 	bl	801e86c <SUBGRF_WriteCommand>
}
 801e11c:	bf00      	nop
 801e11e:	3708      	adds	r7, #8
 801e120:	46bd      	mov	sp, r7
 801e122:	bd80      	pop	{r7, pc}
 801e124:	20001e29 	.word	0x20001e29

0801e128 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801e128:	b480      	push	{r7}
 801e12a:	af00      	add	r7, sp, #0
    return PacketType;
 801e12c:	4b02      	ldr	r3, [pc, #8]	; (801e138 <SUBGRF_GetPacketType+0x10>)
 801e12e:	781b      	ldrb	r3, [r3, #0]
}
 801e130:	4618      	mov	r0, r3
 801e132:	46bd      	mov	sp, r7
 801e134:	bc80      	pop	{r7}
 801e136:	4770      	bx	lr
 801e138:	20001e29 	.word	0x20001e29

0801e13c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801e13c:	b580      	push	{r7, lr}
 801e13e:	b084      	sub	sp, #16
 801e140:	af00      	add	r7, sp, #0
 801e142:	4603      	mov	r3, r0
 801e144:	71fb      	strb	r3, [r7, #7]
 801e146:	460b      	mov	r3, r1
 801e148:	71bb      	strb	r3, [r7, #6]
 801e14a:	4613      	mov	r3, r2
 801e14c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801e14e:	79fb      	ldrb	r3, [r7, #7]
 801e150:	2b01      	cmp	r3, #1
 801e152:	d149      	bne.n	801e1e8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801e154:	2000      	movs	r0, #0
 801e156:	f7f0 fda9 	bl	800ecac <RBI_GetRFOMaxPowerConfig>
 801e15a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801e15c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e160:	68fa      	ldr	r2, [r7, #12]
 801e162:	429a      	cmp	r2, r3
 801e164:	da01      	bge.n	801e16a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801e166:	68fb      	ldr	r3, [r7, #12]
 801e168:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	2b0e      	cmp	r3, #14
 801e16e:	d10e      	bne.n	801e18e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801e170:	2301      	movs	r3, #1
 801e172:	2201      	movs	r2, #1
 801e174:	2100      	movs	r1, #0
 801e176:	2004      	movs	r0, #4
 801e178:	f7ff fef6 	bl	801df68 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e17c:	79ba      	ldrb	r2, [r7, #6]
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	b2db      	uxtb	r3, r3
 801e182:	1ad3      	subs	r3, r2, r3
 801e184:	b2db      	uxtb	r3, r3
 801e186:	330e      	adds	r3, #14
 801e188:	b2db      	uxtb	r3, r3
 801e18a:	71bb      	strb	r3, [r7, #6]
 801e18c:	e01f      	b.n	801e1ce <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801e18e:	68fb      	ldr	r3, [r7, #12]
 801e190:	2b0a      	cmp	r3, #10
 801e192:	d10e      	bne.n	801e1b2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801e194:	2301      	movs	r3, #1
 801e196:	2201      	movs	r2, #1
 801e198:	2100      	movs	r1, #0
 801e19a:	2001      	movs	r0, #1
 801e19c:	f7ff fee4 	bl	801df68 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801e1a0:	79ba      	ldrb	r2, [r7, #6]
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	b2db      	uxtb	r3, r3
 801e1a6:	1ad3      	subs	r3, r2, r3
 801e1a8:	b2db      	uxtb	r3, r3
 801e1aa:	330d      	adds	r3, #13
 801e1ac:	b2db      	uxtb	r3, r3
 801e1ae:	71bb      	strb	r3, [r7, #6]
 801e1b0:	e00d      	b.n	801e1ce <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801e1b2:	2301      	movs	r3, #1
 801e1b4:	2201      	movs	r2, #1
 801e1b6:	2100      	movs	r1, #0
 801e1b8:	2007      	movs	r0, #7
 801e1ba:	f7ff fed5 	bl	801df68 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e1be:	79ba      	ldrb	r2, [r7, #6]
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	b2db      	uxtb	r3, r3
 801e1c4:	1ad3      	subs	r3, r2, r3
 801e1c6:	b2db      	uxtb	r3, r3
 801e1c8:	330e      	adds	r3, #14
 801e1ca:	b2db      	uxtb	r3, r3
 801e1cc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801e1ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e1d2:	f113 0f11 	cmn.w	r3, #17
 801e1d6:	da01      	bge.n	801e1dc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801e1d8:	23ef      	movs	r3, #239	; 0xef
 801e1da:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801e1dc:	2118      	movs	r1, #24
 801e1de:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e1e2:	f000 fa93 	bl	801e70c <SUBGRF_WriteRegister>
 801e1e6:	e067      	b.n	801e2b8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801e1e8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e1ec:	f000 faa2 	bl	801e734 <SUBGRF_ReadRegister>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	f043 031e 	orr.w	r3, r3, #30
 801e1f6:	b2db      	uxtb	r3, r3
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e1fe:	f000 fa85 	bl	801e70c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801e202:	2001      	movs	r0, #1
 801e204:	f7f0 fd52 	bl	800ecac <RBI_GetRFOMaxPowerConfig>
 801e208:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801e20a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e20e:	68fa      	ldr	r2, [r7, #12]
 801e210:	429a      	cmp	r2, r3
 801e212:	da01      	bge.n	801e218 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	2b14      	cmp	r3, #20
 801e21c:	d10e      	bne.n	801e23c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801e21e:	2301      	movs	r3, #1
 801e220:	2200      	movs	r2, #0
 801e222:	2105      	movs	r1, #5
 801e224:	2003      	movs	r0, #3
 801e226:	f7ff fe9f 	bl	801df68 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e22a:	79ba      	ldrb	r2, [r7, #6]
 801e22c:	68fb      	ldr	r3, [r7, #12]
 801e22e:	b2db      	uxtb	r3, r3
 801e230:	1ad3      	subs	r3, r2, r3
 801e232:	b2db      	uxtb	r3, r3
 801e234:	3316      	adds	r3, #22
 801e236:	b2db      	uxtb	r3, r3
 801e238:	71bb      	strb	r3, [r7, #6]
 801e23a:	e031      	b.n	801e2a0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	2b11      	cmp	r3, #17
 801e240:	d10e      	bne.n	801e260 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801e242:	2301      	movs	r3, #1
 801e244:	2200      	movs	r2, #0
 801e246:	2103      	movs	r1, #3
 801e248:	2002      	movs	r0, #2
 801e24a:	f7ff fe8d 	bl	801df68 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e24e:	79ba      	ldrb	r2, [r7, #6]
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	b2db      	uxtb	r3, r3
 801e254:	1ad3      	subs	r3, r2, r3
 801e256:	b2db      	uxtb	r3, r3
 801e258:	3316      	adds	r3, #22
 801e25a:	b2db      	uxtb	r3, r3
 801e25c:	71bb      	strb	r3, [r7, #6]
 801e25e:	e01f      	b.n	801e2a0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	2b0e      	cmp	r3, #14
 801e264:	d10e      	bne.n	801e284 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801e266:	2301      	movs	r3, #1
 801e268:	2200      	movs	r2, #0
 801e26a:	2102      	movs	r1, #2
 801e26c:	2002      	movs	r0, #2
 801e26e:	f7ff fe7b 	bl	801df68 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e272:	79ba      	ldrb	r2, [r7, #6]
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	b2db      	uxtb	r3, r3
 801e278:	1ad3      	subs	r3, r2, r3
 801e27a:	b2db      	uxtb	r3, r3
 801e27c:	330e      	adds	r3, #14
 801e27e:	b2db      	uxtb	r3, r3
 801e280:	71bb      	strb	r3, [r7, #6]
 801e282:	e00d      	b.n	801e2a0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801e284:	2301      	movs	r3, #1
 801e286:	2200      	movs	r2, #0
 801e288:	2107      	movs	r1, #7
 801e28a:	2004      	movs	r0, #4
 801e28c:	f7ff fe6c 	bl	801df68 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e290:	79ba      	ldrb	r2, [r7, #6]
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	b2db      	uxtb	r3, r3
 801e296:	1ad3      	subs	r3, r2, r3
 801e298:	b2db      	uxtb	r3, r3
 801e29a:	3316      	adds	r3, #22
 801e29c:	b2db      	uxtb	r3, r3
 801e29e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801e2a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e2a4:	f113 0f09 	cmn.w	r3, #9
 801e2a8:	da01      	bge.n	801e2ae <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801e2aa:	23f7      	movs	r3, #247	; 0xf7
 801e2ac:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801e2ae:	2138      	movs	r1, #56	; 0x38
 801e2b0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e2b4:	f000 fa2a 	bl	801e70c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801e2b8:	79bb      	ldrb	r3, [r7, #6]
 801e2ba:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801e2bc:	797b      	ldrb	r3, [r7, #5]
 801e2be:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801e2c0:	f107 0308 	add.w	r3, r7, #8
 801e2c4:	2202      	movs	r2, #2
 801e2c6:	4619      	mov	r1, r3
 801e2c8:	208e      	movs	r0, #142	; 0x8e
 801e2ca:	f000 facf 	bl	801e86c <SUBGRF_WriteCommand>
}
 801e2ce:	bf00      	nop
 801e2d0:	3710      	adds	r7, #16
 801e2d2:	46bd      	mov	sp, r7
 801e2d4:	bd80      	pop	{r7, pc}
	...

0801e2d8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801e2d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e2dc:	b086      	sub	sp, #24
 801e2de:	af00      	add	r7, sp, #0
 801e2e0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801e2e2:	2300      	movs	r3, #0
 801e2e4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e2e6:	4a61      	ldr	r2, [pc, #388]	; (801e46c <SUBGRF_SetModulationParams+0x194>)
 801e2e8:	f107 0308 	add.w	r3, r7, #8
 801e2ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e2f0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	781a      	ldrb	r2, [r3, #0]
 801e2f8:	4b5d      	ldr	r3, [pc, #372]	; (801e470 <SUBGRF_SetModulationParams+0x198>)
 801e2fa:	781b      	ldrb	r3, [r3, #0]
 801e2fc:	429a      	cmp	r2, r3
 801e2fe:	d004      	beq.n	801e30a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	781b      	ldrb	r3, [r3, #0]
 801e304:	4618      	mov	r0, r3
 801e306:	f7ff fef3 	bl	801e0f0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	781b      	ldrb	r3, [r3, #0]
 801e30e:	2b03      	cmp	r3, #3
 801e310:	f200 80a5 	bhi.w	801e45e <SUBGRF_SetModulationParams+0x186>
 801e314:	a201      	add	r2, pc, #4	; (adr r2, 801e31c <SUBGRF_SetModulationParams+0x44>)
 801e316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e31a:	bf00      	nop
 801e31c:	0801e32d 	.word	0x0801e32d
 801e320:	0801e3ed 	.word	0x0801e3ed
 801e324:	0801e3af 	.word	0x0801e3af
 801e328:	0801e41b 	.word	0x0801e41b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801e32c:	2308      	movs	r3, #8
 801e32e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	685b      	ldr	r3, [r3, #4]
 801e334:	4a4f      	ldr	r2, [pc, #316]	; (801e474 <SUBGRF_SetModulationParams+0x19c>)
 801e336:	fbb2 f3f3 	udiv	r3, r2, r3
 801e33a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e33c:	697b      	ldr	r3, [r7, #20]
 801e33e:	0c1b      	lsrs	r3, r3, #16
 801e340:	b2db      	uxtb	r3, r3
 801e342:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e344:	697b      	ldr	r3, [r7, #20]
 801e346:	0a1b      	lsrs	r3, r3, #8
 801e348:	b2db      	uxtb	r3, r3
 801e34a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e34c:	697b      	ldr	r3, [r7, #20]
 801e34e:	b2db      	uxtb	r3, r3
 801e350:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	7b1b      	ldrb	r3, [r3, #12]
 801e356:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	7b5b      	ldrb	r3, [r3, #13]
 801e35c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	689b      	ldr	r3, [r3, #8]
 801e362:	2200      	movs	r2, #0
 801e364:	461c      	mov	r4, r3
 801e366:	4615      	mov	r5, r2
 801e368:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e36c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e370:	4a41      	ldr	r2, [pc, #260]	; (801e478 <SUBGRF_SetModulationParams+0x1a0>)
 801e372:	f04f 0300 	mov.w	r3, #0
 801e376:	4640      	mov	r0, r8
 801e378:	4649      	mov	r1, r9
 801e37a:	f7e2 fecb 	bl	8001114 <__aeabi_uldivmod>
 801e37e:	4602      	mov	r2, r0
 801e380:	460b      	mov	r3, r1
 801e382:	4613      	mov	r3, r2
 801e384:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801e386:	697b      	ldr	r3, [r7, #20]
 801e388:	0c1b      	lsrs	r3, r3, #16
 801e38a:	b2db      	uxtb	r3, r3
 801e38c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801e38e:	697b      	ldr	r3, [r7, #20]
 801e390:	0a1b      	lsrs	r3, r3, #8
 801e392:	b2db      	uxtb	r3, r3
 801e394:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801e396:	697b      	ldr	r3, [r7, #20]
 801e398:	b2db      	uxtb	r3, r3
 801e39a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e39c:	7cfb      	ldrb	r3, [r7, #19]
 801e39e:	b29a      	uxth	r2, r3
 801e3a0:	f107 0308 	add.w	r3, r7, #8
 801e3a4:	4619      	mov	r1, r3
 801e3a6:	208b      	movs	r0, #139	; 0x8b
 801e3a8:	f000 fa60 	bl	801e86c <SUBGRF_WriteCommand>
        break;
 801e3ac:	e058      	b.n	801e460 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801e3ae:	2304      	movs	r3, #4
 801e3b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	691b      	ldr	r3, [r3, #16]
 801e3b6:	4a2f      	ldr	r2, [pc, #188]	; (801e474 <SUBGRF_SetModulationParams+0x19c>)
 801e3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801e3bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e3be:	697b      	ldr	r3, [r7, #20]
 801e3c0:	0c1b      	lsrs	r3, r3, #16
 801e3c2:	b2db      	uxtb	r3, r3
 801e3c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e3c6:	697b      	ldr	r3, [r7, #20]
 801e3c8:	0a1b      	lsrs	r3, r3, #8
 801e3ca:	b2db      	uxtb	r3, r3
 801e3cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e3ce:	697b      	ldr	r3, [r7, #20]
 801e3d0:	b2db      	uxtb	r3, r3
 801e3d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	7d1b      	ldrb	r3, [r3, #20]
 801e3d8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e3da:	7cfb      	ldrb	r3, [r7, #19]
 801e3dc:	b29a      	uxth	r2, r3
 801e3de:	f107 0308 	add.w	r3, r7, #8
 801e3e2:	4619      	mov	r1, r3
 801e3e4:	208b      	movs	r0, #139	; 0x8b
 801e3e6:	f000 fa41 	bl	801e86c <SUBGRF_WriteCommand>
        break;
 801e3ea:	e039      	b.n	801e460 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801e3ec:	2304      	movs	r3, #4
 801e3ee:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	7e1b      	ldrb	r3, [r3, #24]
 801e3f4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	7e5b      	ldrb	r3, [r3, #25]
 801e3fa:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	7e9b      	ldrb	r3, [r3, #26]
 801e400:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	7edb      	ldrb	r3, [r3, #27]
 801e406:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e408:	7cfb      	ldrb	r3, [r7, #19]
 801e40a:	b29a      	uxth	r2, r3
 801e40c:	f107 0308 	add.w	r3, r7, #8
 801e410:	4619      	mov	r1, r3
 801e412:	208b      	movs	r0, #139	; 0x8b
 801e414:	f000 fa2a 	bl	801e86c <SUBGRF_WriteCommand>

        break;
 801e418:	e022      	b.n	801e460 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801e41a:	2305      	movs	r3, #5
 801e41c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	685b      	ldr	r3, [r3, #4]
 801e422:	4a14      	ldr	r2, [pc, #80]	; (801e474 <SUBGRF_SetModulationParams+0x19c>)
 801e424:	fbb2 f3f3 	udiv	r3, r2, r3
 801e428:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e42a:	697b      	ldr	r3, [r7, #20]
 801e42c:	0c1b      	lsrs	r3, r3, #16
 801e42e:	b2db      	uxtb	r3, r3
 801e430:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e432:	697b      	ldr	r3, [r7, #20]
 801e434:	0a1b      	lsrs	r3, r3, #8
 801e436:	b2db      	uxtb	r3, r3
 801e438:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e43a:	697b      	ldr	r3, [r7, #20]
 801e43c:	b2db      	uxtb	r3, r3
 801e43e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	7b1b      	ldrb	r3, [r3, #12]
 801e444:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	7b5b      	ldrb	r3, [r3, #13]
 801e44a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e44c:	7cfb      	ldrb	r3, [r7, #19]
 801e44e:	b29a      	uxth	r2, r3
 801e450:	f107 0308 	add.w	r3, r7, #8
 801e454:	4619      	mov	r1, r3
 801e456:	208b      	movs	r0, #139	; 0x8b
 801e458:	f000 fa08 	bl	801e86c <SUBGRF_WriteCommand>
        break;
 801e45c:	e000      	b.n	801e460 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801e45e:	bf00      	nop
    }
}
 801e460:	bf00      	nop
 801e462:	3718      	adds	r7, #24
 801e464:	46bd      	mov	sp, r7
 801e466:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e46a:	bf00      	nop
 801e46c:	08021840 	.word	0x08021840
 801e470:	20001e29 	.word	0x20001e29
 801e474:	3d090000 	.word	0x3d090000
 801e478:	01e84800 	.word	0x01e84800

0801e47c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b086      	sub	sp, #24
 801e480:	af00      	add	r7, sp, #0
 801e482:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801e484:	2300      	movs	r3, #0
 801e486:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e488:	4a48      	ldr	r2, [pc, #288]	; (801e5ac <SUBGRF_SetPacketParams+0x130>)
 801e48a:	f107 030c 	add.w	r3, r7, #12
 801e48e:	ca07      	ldmia	r2, {r0, r1, r2}
 801e490:	c303      	stmia	r3!, {r0, r1}
 801e492:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	781a      	ldrb	r2, [r3, #0]
 801e498:	4b45      	ldr	r3, [pc, #276]	; (801e5b0 <SUBGRF_SetPacketParams+0x134>)
 801e49a:	781b      	ldrb	r3, [r3, #0]
 801e49c:	429a      	cmp	r2, r3
 801e49e:	d004      	beq.n	801e4aa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	781b      	ldrb	r3, [r3, #0]
 801e4a4:	4618      	mov	r0, r3
 801e4a6:	f7ff fe23 	bl	801e0f0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	781b      	ldrb	r3, [r3, #0]
 801e4ae:	2b03      	cmp	r3, #3
 801e4b0:	d878      	bhi.n	801e5a4 <SUBGRF_SetPacketParams+0x128>
 801e4b2:	a201      	add	r2, pc, #4	; (adr r2, 801e4b8 <SUBGRF_SetPacketParams+0x3c>)
 801e4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4b8:	0801e4c9 	.word	0x0801e4c9
 801e4bc:	0801e559 	.word	0x0801e559
 801e4c0:	0801e54d 	.word	0x0801e54d
 801e4c4:	0801e4c9 	.word	0x0801e4c9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	7a5b      	ldrb	r3, [r3, #9]
 801e4cc:	2bf1      	cmp	r3, #241	; 0xf1
 801e4ce:	d10a      	bne.n	801e4e6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801e4d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e4d4:	f7ff faaa 	bl	801da2c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801e4d8:	f248 0005 	movw	r0, #32773	; 0x8005
 801e4dc:	f7ff fac6 	bl	801da6c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801e4e0:	2302      	movs	r3, #2
 801e4e2:	75bb      	strb	r3, [r7, #22]
 801e4e4:	e011      	b.n	801e50a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	7a5b      	ldrb	r3, [r3, #9]
 801e4ea:	2bf2      	cmp	r3, #242	; 0xf2
 801e4ec:	d10a      	bne.n	801e504 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801e4ee:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801e4f2:	f7ff fa9b 	bl	801da2c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801e4f6:	f241 0021 	movw	r0, #4129	; 0x1021
 801e4fa:	f7ff fab7 	bl	801da6c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801e4fe:	2306      	movs	r3, #6
 801e500:	75bb      	strb	r3, [r7, #22]
 801e502:	e002      	b.n	801e50a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	7a5b      	ldrb	r3, [r3, #9]
 801e508:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801e50a:	2309      	movs	r3, #9
 801e50c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	885b      	ldrh	r3, [r3, #2]
 801e512:	0a1b      	lsrs	r3, r3, #8
 801e514:	b29b      	uxth	r3, r3
 801e516:	b2db      	uxtb	r3, r3
 801e518:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	885b      	ldrh	r3, [r3, #2]
 801e51e:	b2db      	uxtb	r3, r3
 801e520:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	791b      	ldrb	r3, [r3, #4]
 801e526:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	795b      	ldrb	r3, [r3, #5]
 801e52c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	799b      	ldrb	r3, [r3, #6]
 801e532:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	79db      	ldrb	r3, [r3, #7]
 801e538:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	7a1b      	ldrb	r3, [r3, #8]
 801e53e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801e540:	7dbb      	ldrb	r3, [r7, #22]
 801e542:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	7a9b      	ldrb	r3, [r3, #10]
 801e548:	753b      	strb	r3, [r7, #20]
        break;
 801e54a:	e022      	b.n	801e592 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801e54c:	2301      	movs	r3, #1
 801e54e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	7b1b      	ldrb	r3, [r3, #12]
 801e554:	733b      	strb	r3, [r7, #12]
        break;
 801e556:	e01c      	b.n	801e592 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801e558:	2306      	movs	r3, #6
 801e55a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	89db      	ldrh	r3, [r3, #14]
 801e560:	0a1b      	lsrs	r3, r3, #8
 801e562:	b29b      	uxth	r3, r3
 801e564:	b2db      	uxtb	r3, r3
 801e566:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	89db      	ldrh	r3, [r3, #14]
 801e56c:	b2db      	uxtb	r3, r3
 801e56e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	7c1a      	ldrb	r2, [r3, #16]
 801e574:	4b0f      	ldr	r3, [pc, #60]	; (801e5b4 <SUBGRF_SetPacketParams+0x138>)
 801e576:	4611      	mov	r1, r2
 801e578:	7019      	strb	r1, [r3, #0]
 801e57a:	4613      	mov	r3, r2
 801e57c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	7c5b      	ldrb	r3, [r3, #17]
 801e582:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	7c9b      	ldrb	r3, [r3, #18]
 801e588:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	7cdb      	ldrb	r3, [r3, #19]
 801e58e:	747b      	strb	r3, [r7, #17]
        break;
 801e590:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e592:	7dfb      	ldrb	r3, [r7, #23]
 801e594:	b29a      	uxth	r2, r3
 801e596:	f107 030c 	add.w	r3, r7, #12
 801e59a:	4619      	mov	r1, r3
 801e59c:	208c      	movs	r0, #140	; 0x8c
 801e59e:	f000 f965 	bl	801e86c <SUBGRF_WriteCommand>
 801e5a2:	e000      	b.n	801e5a6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801e5a4:	bf00      	nop
}
 801e5a6:	3718      	adds	r7, #24
 801e5a8:	46bd      	mov	sp, r7
 801e5aa:	bd80      	pop	{r7, pc}
 801e5ac:	08021848 	.word	0x08021848
 801e5b0:	20001e29 	.word	0x20001e29
 801e5b4:	20001e2a 	.word	0x20001e2a

0801e5b8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e5b8:	b580      	push	{r7, lr}
 801e5ba:	b084      	sub	sp, #16
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	4603      	mov	r3, r0
 801e5c0:	460a      	mov	r2, r1
 801e5c2:	71fb      	strb	r3, [r7, #7]
 801e5c4:	4613      	mov	r3, r2
 801e5c6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e5c8:	79fb      	ldrb	r3, [r7, #7]
 801e5ca:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e5cc:	79bb      	ldrb	r3, [r7, #6]
 801e5ce:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e5d0:	f107 030c 	add.w	r3, r7, #12
 801e5d4:	2202      	movs	r2, #2
 801e5d6:	4619      	mov	r1, r3
 801e5d8:	208f      	movs	r0, #143	; 0x8f
 801e5da:	f000 f947 	bl	801e86c <SUBGRF_WriteCommand>
}
 801e5de:	bf00      	nop
 801e5e0:	3710      	adds	r7, #16
 801e5e2:	46bd      	mov	sp, r7
 801e5e4:	bd80      	pop	{r7, pc}

0801e5e6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e5e6:	b580      	push	{r7, lr}
 801e5e8:	b082      	sub	sp, #8
 801e5ea:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e5ec:	2300      	movs	r3, #0
 801e5ee:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e5f0:	1d3b      	adds	r3, r7, #4
 801e5f2:	2201      	movs	r2, #1
 801e5f4:	4619      	mov	r1, r3
 801e5f6:	2015      	movs	r0, #21
 801e5f8:	f000 f95a 	bl	801e8b0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e5fc:	793b      	ldrb	r3, [r7, #4]
 801e5fe:	425b      	negs	r3, r3
 801e600:	105b      	asrs	r3, r3, #1
 801e602:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e604:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e608:	4618      	mov	r0, r3
 801e60a:	3708      	adds	r7, #8
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}

0801e610 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e610:	b580      	push	{r7, lr}
 801e612:	b084      	sub	sp, #16
 801e614:	af00      	add	r7, sp, #0
 801e616:	6078      	str	r0, [r7, #4]
 801e618:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e61a:	f107 030c 	add.w	r3, r7, #12
 801e61e:	2202      	movs	r2, #2
 801e620:	4619      	mov	r1, r3
 801e622:	2013      	movs	r0, #19
 801e624:	f000 f944 	bl	801e8b0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e628:	f7ff fd7e 	bl	801e128 <SUBGRF_GetPacketType>
 801e62c:	4603      	mov	r3, r0
 801e62e:	2b01      	cmp	r3, #1
 801e630:	d10d      	bne.n	801e64e <SUBGRF_GetRxBufferStatus+0x3e>
 801e632:	4b0c      	ldr	r3, [pc, #48]	; (801e664 <SUBGRF_GetRxBufferStatus+0x54>)
 801e634:	781b      	ldrb	r3, [r3, #0]
 801e636:	b2db      	uxtb	r3, r3
 801e638:	2b01      	cmp	r3, #1
 801e63a:	d108      	bne.n	801e64e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e63c:	f240 7002 	movw	r0, #1794	; 0x702
 801e640:	f000 f878 	bl	801e734 <SUBGRF_ReadRegister>
 801e644:	4603      	mov	r3, r0
 801e646:	461a      	mov	r2, r3
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	701a      	strb	r2, [r3, #0]
 801e64c:	e002      	b.n	801e654 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e64e:	7b3a      	ldrb	r2, [r7, #12]
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e654:	7b7a      	ldrb	r2, [r7, #13]
 801e656:	683b      	ldr	r3, [r7, #0]
 801e658:	701a      	strb	r2, [r3, #0]
}
 801e65a:	bf00      	nop
 801e65c:	3710      	adds	r7, #16
 801e65e:	46bd      	mov	sp, r7
 801e660:	bd80      	pop	{r7, pc}
 801e662:	bf00      	nop
 801e664:	20001e2a 	.word	0x20001e2a

0801e668 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e668:	b580      	push	{r7, lr}
 801e66a:	b084      	sub	sp, #16
 801e66c:	af00      	add	r7, sp, #0
 801e66e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e670:	f107 030c 	add.w	r3, r7, #12
 801e674:	2203      	movs	r2, #3
 801e676:	4619      	mov	r1, r3
 801e678:	2014      	movs	r0, #20
 801e67a:	f000 f919 	bl	801e8b0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e67e:	f7ff fd53 	bl	801e128 <SUBGRF_GetPacketType>
 801e682:	4603      	mov	r3, r0
 801e684:	461a      	mov	r2, r3
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	781b      	ldrb	r3, [r3, #0]
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d002      	beq.n	801e698 <SUBGRF_GetPacketStatus+0x30>
 801e692:	2b01      	cmp	r3, #1
 801e694:	d013      	beq.n	801e6be <SUBGRF_GetPacketStatus+0x56>
 801e696:	e02a      	b.n	801e6ee <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e698:	7b3a      	ldrb	r2, [r7, #12]
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e69e:	7b7b      	ldrb	r3, [r7, #13]
 801e6a0:	425b      	negs	r3, r3
 801e6a2:	105b      	asrs	r3, r3, #1
 801e6a4:	b25a      	sxtb	r2, r3
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e6aa:	7bbb      	ldrb	r3, [r7, #14]
 801e6ac:	425b      	negs	r3, r3
 801e6ae:	105b      	asrs	r3, r3, #1
 801e6b0:	b25a      	sxtb	r2, r3
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	2200      	movs	r2, #0
 801e6ba:	609a      	str	r2, [r3, #8]
            break;
 801e6bc:	e020      	b.n	801e700 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e6be:	7b3b      	ldrb	r3, [r7, #12]
 801e6c0:	425b      	negs	r3, r3
 801e6c2:	105b      	asrs	r3, r3, #1
 801e6c4:	b25a      	sxtb	r2, r3
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e6ca:	7b7b      	ldrb	r3, [r7, #13]
 801e6cc:	b25b      	sxtb	r3, r3
 801e6ce:	3302      	adds	r3, #2
 801e6d0:	109b      	asrs	r3, r3, #2
 801e6d2:	b25a      	sxtb	r2, r3
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e6d8:	7bbb      	ldrb	r3, [r7, #14]
 801e6da:	425b      	negs	r3, r3
 801e6dc:	105b      	asrs	r3, r3, #1
 801e6de:	b25a      	sxtb	r2, r3
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e6e4:	4b08      	ldr	r3, [pc, #32]	; (801e708 <SUBGRF_GetPacketStatus+0xa0>)
 801e6e6:	681a      	ldr	r2, [r3, #0]
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	611a      	str	r2, [r3, #16]
            break;
 801e6ec:	e008      	b.n	801e700 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e6ee:	2214      	movs	r2, #20
 801e6f0:	2100      	movs	r1, #0
 801e6f2:	6878      	ldr	r0, [r7, #4]
 801e6f4:	f000 fc03 	bl	801eefe <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	220f      	movs	r2, #15
 801e6fc:	701a      	strb	r2, [r3, #0]
            break;
 801e6fe:	bf00      	nop
    }
}
 801e700:	bf00      	nop
 801e702:	3710      	adds	r7, #16
 801e704:	46bd      	mov	sp, r7
 801e706:	bd80      	pop	{r7, pc}
 801e708:	20001e2c 	.word	0x20001e2c

0801e70c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b082      	sub	sp, #8
 801e710:	af00      	add	r7, sp, #0
 801e712:	4603      	mov	r3, r0
 801e714:	460a      	mov	r2, r1
 801e716:	80fb      	strh	r3, [r7, #6]
 801e718:	4613      	mov	r3, r2
 801e71a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e71c:	1d7a      	adds	r2, r7, #5
 801e71e:	88f9      	ldrh	r1, [r7, #6]
 801e720:	2301      	movs	r3, #1
 801e722:	4803      	ldr	r0, [pc, #12]	; (801e730 <SUBGRF_WriteRegister+0x24>)
 801e724:	f7ec fcc8 	bl	800b0b8 <HAL_SUBGHZ_WriteRegisters>
}
 801e728:	bf00      	nop
 801e72a:	3708      	adds	r7, #8
 801e72c:	46bd      	mov	sp, r7
 801e72e:	bd80      	pop	{r7, pc}
 801e730:	20000468 	.word	0x20000468

0801e734 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e734:	b580      	push	{r7, lr}
 801e736:	b084      	sub	sp, #16
 801e738:	af00      	add	r7, sp, #0
 801e73a:	4603      	mov	r3, r0
 801e73c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e73e:	f107 020f 	add.w	r2, r7, #15
 801e742:	88f9      	ldrh	r1, [r7, #6]
 801e744:	2301      	movs	r3, #1
 801e746:	4804      	ldr	r0, [pc, #16]	; (801e758 <SUBGRF_ReadRegister+0x24>)
 801e748:	f7ec fd15 	bl	800b176 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e74c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e74e:	4618      	mov	r0, r3
 801e750:	3710      	adds	r7, #16
 801e752:	46bd      	mov	sp, r7
 801e754:	bd80      	pop	{r7, pc}
 801e756:	bf00      	nop
 801e758:	20000468 	.word	0x20000468

0801e75c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e75c:	b580      	push	{r7, lr}
 801e75e:	b086      	sub	sp, #24
 801e760:	af00      	add	r7, sp, #0
 801e762:	4603      	mov	r3, r0
 801e764:	6039      	str	r1, [r7, #0]
 801e766:	80fb      	strh	r3, [r7, #6]
 801e768:	4613      	mov	r3, r2
 801e76a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e76c:	f3ef 8310 	mrs	r3, PRIMASK
 801e770:	60fb      	str	r3, [r7, #12]
  return(result);
 801e772:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e776:	b672      	cpsid	i
}
 801e778:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e77a:	88bb      	ldrh	r3, [r7, #4]
 801e77c:	88f9      	ldrh	r1, [r7, #6]
 801e77e:	683a      	ldr	r2, [r7, #0]
 801e780:	4806      	ldr	r0, [pc, #24]	; (801e79c <SUBGRF_WriteRegisters+0x40>)
 801e782:	f7ec fc99 	bl	800b0b8 <HAL_SUBGHZ_WriteRegisters>
 801e786:	697b      	ldr	r3, [r7, #20]
 801e788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e78a:	693b      	ldr	r3, [r7, #16]
 801e78c:	f383 8810 	msr	PRIMASK, r3
}
 801e790:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e792:	bf00      	nop
 801e794:	3718      	adds	r7, #24
 801e796:	46bd      	mov	sp, r7
 801e798:	bd80      	pop	{r7, pc}
 801e79a:	bf00      	nop
 801e79c:	20000468 	.word	0x20000468

0801e7a0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e7a0:	b580      	push	{r7, lr}
 801e7a2:	b086      	sub	sp, #24
 801e7a4:	af00      	add	r7, sp, #0
 801e7a6:	4603      	mov	r3, r0
 801e7a8:	6039      	str	r1, [r7, #0]
 801e7aa:	80fb      	strh	r3, [r7, #6]
 801e7ac:	4613      	mov	r3, r2
 801e7ae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7b0:	f3ef 8310 	mrs	r3, PRIMASK
 801e7b4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e7b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7ba:	b672      	cpsid	i
}
 801e7bc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e7be:	88bb      	ldrh	r3, [r7, #4]
 801e7c0:	88f9      	ldrh	r1, [r7, #6]
 801e7c2:	683a      	ldr	r2, [r7, #0]
 801e7c4:	4806      	ldr	r0, [pc, #24]	; (801e7e0 <SUBGRF_ReadRegisters+0x40>)
 801e7c6:	f7ec fcd6 	bl	800b176 <HAL_SUBGHZ_ReadRegisters>
 801e7ca:	697b      	ldr	r3, [r7, #20]
 801e7cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7ce:	693b      	ldr	r3, [r7, #16]
 801e7d0:	f383 8810 	msr	PRIMASK, r3
}
 801e7d4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e7d6:	bf00      	nop
 801e7d8:	3718      	adds	r7, #24
 801e7da:	46bd      	mov	sp, r7
 801e7dc:	bd80      	pop	{r7, pc}
 801e7de:	bf00      	nop
 801e7e0:	20000468 	.word	0x20000468

0801e7e4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e7e4:	b580      	push	{r7, lr}
 801e7e6:	b086      	sub	sp, #24
 801e7e8:	af00      	add	r7, sp, #0
 801e7ea:	4603      	mov	r3, r0
 801e7ec:	6039      	str	r1, [r7, #0]
 801e7ee:	71fb      	strb	r3, [r7, #7]
 801e7f0:	4613      	mov	r3, r2
 801e7f2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7f4:	f3ef 8310 	mrs	r3, PRIMASK
 801e7f8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e7fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7fe:	b672      	cpsid	i
}
 801e800:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e802:	79bb      	ldrb	r3, [r7, #6]
 801e804:	b29b      	uxth	r3, r3
 801e806:	79f9      	ldrb	r1, [r7, #7]
 801e808:	683a      	ldr	r2, [r7, #0]
 801e80a:	4806      	ldr	r0, [pc, #24]	; (801e824 <SUBGRF_WriteBuffer+0x40>)
 801e80c:	f7ec fdc7 	bl	800b39e <HAL_SUBGHZ_WriteBuffer>
 801e810:	697b      	ldr	r3, [r7, #20]
 801e812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e814:	693b      	ldr	r3, [r7, #16]
 801e816:	f383 8810 	msr	PRIMASK, r3
}
 801e81a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e81c:	bf00      	nop
 801e81e:	3718      	adds	r7, #24
 801e820:	46bd      	mov	sp, r7
 801e822:	bd80      	pop	{r7, pc}
 801e824:	20000468 	.word	0x20000468

0801e828 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e828:	b580      	push	{r7, lr}
 801e82a:	b086      	sub	sp, #24
 801e82c:	af00      	add	r7, sp, #0
 801e82e:	4603      	mov	r3, r0
 801e830:	6039      	str	r1, [r7, #0]
 801e832:	71fb      	strb	r3, [r7, #7]
 801e834:	4613      	mov	r3, r2
 801e836:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e838:	f3ef 8310 	mrs	r3, PRIMASK
 801e83c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e83e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e842:	b672      	cpsid	i
}
 801e844:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e846:	79bb      	ldrb	r3, [r7, #6]
 801e848:	b29b      	uxth	r3, r3
 801e84a:	79f9      	ldrb	r1, [r7, #7]
 801e84c:	683a      	ldr	r2, [r7, #0]
 801e84e:	4806      	ldr	r0, [pc, #24]	; (801e868 <SUBGRF_ReadBuffer+0x40>)
 801e850:	f7ec fdf8 	bl	800b444 <HAL_SUBGHZ_ReadBuffer>
 801e854:	697b      	ldr	r3, [r7, #20]
 801e856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e858:	693b      	ldr	r3, [r7, #16]
 801e85a:	f383 8810 	msr	PRIMASK, r3
}
 801e85e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e860:	bf00      	nop
 801e862:	3718      	adds	r7, #24
 801e864:	46bd      	mov	sp, r7
 801e866:	bd80      	pop	{r7, pc}
 801e868:	20000468 	.word	0x20000468

0801e86c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e86c:	b580      	push	{r7, lr}
 801e86e:	b086      	sub	sp, #24
 801e870:	af00      	add	r7, sp, #0
 801e872:	4603      	mov	r3, r0
 801e874:	6039      	str	r1, [r7, #0]
 801e876:	71fb      	strb	r3, [r7, #7]
 801e878:	4613      	mov	r3, r2
 801e87a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e87c:	f3ef 8310 	mrs	r3, PRIMASK
 801e880:	60fb      	str	r3, [r7, #12]
  return(result);
 801e882:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e886:	b672      	cpsid	i
}
 801e888:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e88a:	88bb      	ldrh	r3, [r7, #4]
 801e88c:	79f9      	ldrb	r1, [r7, #7]
 801e88e:	683a      	ldr	r2, [r7, #0]
 801e890:	4806      	ldr	r0, [pc, #24]	; (801e8ac <SUBGRF_WriteCommand+0x40>)
 801e892:	f7ec fcd1 	bl	800b238 <HAL_SUBGHZ_ExecSetCmd>
 801e896:	697b      	ldr	r3, [r7, #20]
 801e898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e89a:	693b      	ldr	r3, [r7, #16]
 801e89c:	f383 8810 	msr	PRIMASK, r3
}
 801e8a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e8a2:	bf00      	nop
 801e8a4:	3718      	adds	r7, #24
 801e8a6:	46bd      	mov	sp, r7
 801e8a8:	bd80      	pop	{r7, pc}
 801e8aa:	bf00      	nop
 801e8ac:	20000468 	.word	0x20000468

0801e8b0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e8b0:	b580      	push	{r7, lr}
 801e8b2:	b086      	sub	sp, #24
 801e8b4:	af00      	add	r7, sp, #0
 801e8b6:	4603      	mov	r3, r0
 801e8b8:	6039      	str	r1, [r7, #0]
 801e8ba:	71fb      	strb	r3, [r7, #7]
 801e8bc:	4613      	mov	r3, r2
 801e8be:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8c0:	f3ef 8310 	mrs	r3, PRIMASK
 801e8c4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e8c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e8ca:	b672      	cpsid	i
}
 801e8cc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e8ce:	88bb      	ldrh	r3, [r7, #4]
 801e8d0:	79f9      	ldrb	r1, [r7, #7]
 801e8d2:	683a      	ldr	r2, [r7, #0]
 801e8d4:	4806      	ldr	r0, [pc, #24]	; (801e8f0 <SUBGRF_ReadCommand+0x40>)
 801e8d6:	f7ec fd0e 	bl	800b2f6 <HAL_SUBGHZ_ExecGetCmd>
 801e8da:	697b      	ldr	r3, [r7, #20]
 801e8dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8de:	693b      	ldr	r3, [r7, #16]
 801e8e0:	f383 8810 	msr	PRIMASK, r3
}
 801e8e4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e8e6:	bf00      	nop
 801e8e8:	3718      	adds	r7, #24
 801e8ea:	46bd      	mov	sp, r7
 801e8ec:	bd80      	pop	{r7, pc}
 801e8ee:	bf00      	nop
 801e8f0:	20000468 	.word	0x20000468

0801e8f4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e8f4:	b580      	push	{r7, lr}
 801e8f6:	b084      	sub	sp, #16
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	4603      	mov	r3, r0
 801e8fc:	460a      	mov	r2, r1
 801e8fe:	71fb      	strb	r3, [r7, #7]
 801e900:	4613      	mov	r3, r2
 801e902:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e904:	2301      	movs	r3, #1
 801e906:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e908:	79bb      	ldrb	r3, [r7, #6]
 801e90a:	2b01      	cmp	r3, #1
 801e90c:	d10d      	bne.n	801e92a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e90e:	79fb      	ldrb	r3, [r7, #7]
 801e910:	2b01      	cmp	r3, #1
 801e912:	d104      	bne.n	801e91e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e914:	2302      	movs	r3, #2
 801e916:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e918:	2004      	movs	r0, #4
 801e91a:	f000 f8ef 	bl	801eafc <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e91e:	79fb      	ldrb	r3, [r7, #7]
 801e920:	2b02      	cmp	r3, #2
 801e922:	d107      	bne.n	801e934 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e924:	2303      	movs	r3, #3
 801e926:	73fb      	strb	r3, [r7, #15]
 801e928:	e004      	b.n	801e934 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e92a:	79bb      	ldrb	r3, [r7, #6]
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d101      	bne.n	801e934 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e930:	2301      	movs	r3, #1
 801e932:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e934:	7bfb      	ldrb	r3, [r7, #15]
 801e936:	4618      	mov	r0, r3
 801e938:	f7f0 f995 	bl	800ec66 <RBI_ConfigRFSwitch>
}
 801e93c:	bf00      	nop
 801e93e:	3710      	adds	r7, #16
 801e940:	46bd      	mov	sp, r7
 801e942:	bd80      	pop	{r7, pc}

0801e944 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801e944:	b580      	push	{r7, lr}
 801e946:	b084      	sub	sp, #16
 801e948:	af00      	add	r7, sp, #0
 801e94a:	4603      	mov	r3, r0
 801e94c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e94e:	2301      	movs	r3, #1
 801e950:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e952:	f7f0 f996 	bl	800ec82 <RBI_GetTxConfig>
 801e956:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e958:	68bb      	ldr	r3, [r7, #8]
 801e95a:	2b02      	cmp	r3, #2
 801e95c:	d016      	beq.n	801e98c <SUBGRF_SetRfTxPower+0x48>
 801e95e:	68bb      	ldr	r3, [r7, #8]
 801e960:	2b02      	cmp	r3, #2
 801e962:	dc16      	bgt.n	801e992 <SUBGRF_SetRfTxPower+0x4e>
 801e964:	68bb      	ldr	r3, [r7, #8]
 801e966:	2b00      	cmp	r3, #0
 801e968:	d003      	beq.n	801e972 <SUBGRF_SetRfTxPower+0x2e>
 801e96a:	68bb      	ldr	r3, [r7, #8]
 801e96c:	2b01      	cmp	r3, #1
 801e96e:	d00a      	beq.n	801e986 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e970:	e00f      	b.n	801e992 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e976:	2b0f      	cmp	r3, #15
 801e978:	dd02      	ble.n	801e980 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e97a:	2302      	movs	r3, #2
 801e97c:	73fb      	strb	r3, [r7, #15]
            break;
 801e97e:	e009      	b.n	801e994 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e980:	2301      	movs	r3, #1
 801e982:	73fb      	strb	r3, [r7, #15]
            break;
 801e984:	e006      	b.n	801e994 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e986:	2301      	movs	r3, #1
 801e988:	73fb      	strb	r3, [r7, #15]
            break;
 801e98a:	e003      	b.n	801e994 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e98c:	2302      	movs	r3, #2
 801e98e:	73fb      	strb	r3, [r7, #15]
            break;
 801e990:	e000      	b.n	801e994 <SUBGRF_SetRfTxPower+0x50>
            break;
 801e992:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e994:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e998:	7bfb      	ldrb	r3, [r7, #15]
 801e99a:	2202      	movs	r2, #2
 801e99c:	4618      	mov	r0, r3
 801e99e:	f7ff fbcd 	bl	801e13c <SUBGRF_SetTxParams>

    return paSelect;
 801e9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	3710      	adds	r7, #16
 801e9a8:	46bd      	mov	sp, r7
 801e9aa:	bd80      	pop	{r7, pc}

0801e9ac <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e9ac:	b480      	push	{r7}
 801e9ae:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e9b0:	2301      	movs	r3, #1
}
 801e9b2:	4618      	mov	r0, r3
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	bc80      	pop	{r7}
 801e9b8:	4770      	bx	lr
	...

0801e9bc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b082      	sub	sp, #8
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e9c4:	4b03      	ldr	r3, [pc, #12]	; (801e9d4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	2001      	movs	r0, #1
 801e9ca:	4798      	blx	r3
}
 801e9cc:	bf00      	nop
 801e9ce:	3708      	adds	r7, #8
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	bd80      	pop	{r7, pc}
 801e9d4:	20001e34 	.word	0x20001e34

0801e9d8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9d8:	b580      	push	{r7, lr}
 801e9da:	b082      	sub	sp, #8
 801e9dc:	af00      	add	r7, sp, #0
 801e9de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e9e0:	4b03      	ldr	r3, [pc, #12]	; (801e9f0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	2002      	movs	r0, #2
 801e9e6:	4798      	blx	r3
}
 801e9e8:	bf00      	nop
 801e9ea:	3708      	adds	r7, #8
 801e9ec:	46bd      	mov	sp, r7
 801e9ee:	bd80      	pop	{r7, pc}
 801e9f0:	20001e34 	.word	0x20001e34

0801e9f4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b082      	sub	sp, #8
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801e9fc:	4b03      	ldr	r3, [pc, #12]	; (801ea0c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	2040      	movs	r0, #64	; 0x40
 801ea02:	4798      	blx	r3
}
 801ea04:	bf00      	nop
 801ea06:	3708      	adds	r7, #8
 801ea08:	46bd      	mov	sp, r7
 801ea0a:	bd80      	pop	{r7, pc}
 801ea0c:	20001e34 	.word	0x20001e34

0801ea10 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801ea10:	b580      	push	{r7, lr}
 801ea12:	b082      	sub	sp, #8
 801ea14:	af00      	add	r7, sp, #0
 801ea16:	6078      	str	r0, [r7, #4]
 801ea18:	460b      	mov	r3, r1
 801ea1a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ea1c:	78fb      	ldrb	r3, [r7, #3]
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d002      	beq.n	801ea28 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ea22:	2b01      	cmp	r3, #1
 801ea24:	d005      	beq.n	801ea32 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ea26:	e00a      	b.n	801ea3e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801ea28:	4b07      	ldr	r3, [pc, #28]	; (801ea48 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	2080      	movs	r0, #128	; 0x80
 801ea2e:	4798      	blx	r3
            break;
 801ea30:	e005      	b.n	801ea3e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801ea32:	4b05      	ldr	r3, [pc, #20]	; (801ea48 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	f44f 7080 	mov.w	r0, #256	; 0x100
 801ea3a:	4798      	blx	r3
            break;
 801ea3c:	bf00      	nop
    }
}
 801ea3e:	bf00      	nop
 801ea40:	3708      	adds	r7, #8
 801ea42:	46bd      	mov	sp, r7
 801ea44:	bd80      	pop	{r7, pc}
 801ea46:	bf00      	nop
 801ea48:	20001e34 	.word	0x20001e34

0801ea4c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea4c:	b580      	push	{r7, lr}
 801ea4e:	b082      	sub	sp, #8
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801ea54:	4b04      	ldr	r3, [pc, #16]	; (801ea68 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ea5c:	4798      	blx	r3
}
 801ea5e:	bf00      	nop
 801ea60:	3708      	adds	r7, #8
 801ea62:	46bd      	mov	sp, r7
 801ea64:	bd80      	pop	{r7, pc}
 801ea66:	bf00      	nop
 801ea68:	20001e34 	.word	0x20001e34

0801ea6c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b082      	sub	sp, #8
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ea74:	4b03      	ldr	r3, [pc, #12]	; (801ea84 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801ea76:	681b      	ldr	r3, [r3, #0]
 801ea78:	2020      	movs	r0, #32
 801ea7a:	4798      	blx	r3
}
 801ea7c:	bf00      	nop
 801ea7e:	3708      	adds	r7, #8
 801ea80:	46bd      	mov	sp, r7
 801ea82:	bd80      	pop	{r7, pc}
 801ea84:	20001e34 	.word	0x20001e34

0801ea88 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea88:	b580      	push	{r7, lr}
 801ea8a:	b082      	sub	sp, #8
 801ea8c:	af00      	add	r7, sp, #0
 801ea8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ea90:	4b03      	ldr	r3, [pc, #12]	; (801eaa0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	2004      	movs	r0, #4
 801ea96:	4798      	blx	r3
}
 801ea98:	bf00      	nop
 801ea9a:	3708      	adds	r7, #8
 801ea9c:	46bd      	mov	sp, r7
 801ea9e:	bd80      	pop	{r7, pc}
 801eaa0:	20001e34 	.word	0x20001e34

0801eaa4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eaa4:	b580      	push	{r7, lr}
 801eaa6:	b082      	sub	sp, #8
 801eaa8:	af00      	add	r7, sp, #0
 801eaaa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801eaac:	4b03      	ldr	r3, [pc, #12]	; (801eabc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	2008      	movs	r0, #8
 801eab2:	4798      	blx	r3
}
 801eab4:	bf00      	nop
 801eab6:	3708      	adds	r7, #8
 801eab8:	46bd      	mov	sp, r7
 801eaba:	bd80      	pop	{r7, pc}
 801eabc:	20001e34 	.word	0x20001e34

0801eac0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eac0:	b580      	push	{r7, lr}
 801eac2:	b082      	sub	sp, #8
 801eac4:	af00      	add	r7, sp, #0
 801eac6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801eac8:	4b03      	ldr	r3, [pc, #12]	; (801ead8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	2010      	movs	r0, #16
 801eace:	4798      	blx	r3
}
 801ead0:	bf00      	nop
 801ead2:	3708      	adds	r7, #8
 801ead4:	46bd      	mov	sp, r7
 801ead6:	bd80      	pop	{r7, pc}
 801ead8:	20001e34 	.word	0x20001e34

0801eadc <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eadc:	b580      	push	{r7, lr}
 801eade:	b082      	sub	sp, #8
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801eae4:	4b04      	ldr	r3, [pc, #16]	; (801eaf8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801eaec:	4798      	blx	r3
}
 801eaee:	bf00      	nop
 801eaf0:	3708      	adds	r7, #8
 801eaf2:	46bd      	mov	sp, r7
 801eaf4:	bd80      	pop	{r7, pc}
 801eaf6:	bf00      	nop
 801eaf8:	20001e34 	.word	0x20001e34

0801eafc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801eafc:	b580      	push	{r7, lr}
 801eafe:	b084      	sub	sp, #16
 801eb00:	af00      	add	r7, sp, #0
 801eb02:	4603      	mov	r3, r0
 801eb04:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801eb06:	f7f0 f8ca 	bl	800ec9e <RBI_IsDCDC>
 801eb0a:	4603      	mov	r3, r0
 801eb0c:	2b01      	cmp	r3, #1
 801eb0e:	d112      	bne.n	801eb36 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801eb10:	f640 1023 	movw	r0, #2339	; 0x923
 801eb14:	f7ff fe0e 	bl	801e734 <SUBGRF_ReadRegister>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801eb1c:	7bfb      	ldrb	r3, [r7, #15]
 801eb1e:	f023 0306 	bic.w	r3, r3, #6
 801eb22:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801eb24:	7bfa      	ldrb	r2, [r7, #15]
 801eb26:	79fb      	ldrb	r3, [r7, #7]
 801eb28:	4313      	orrs	r3, r2
 801eb2a:	b2db      	uxtb	r3, r3
 801eb2c:	4619      	mov	r1, r3
 801eb2e:	f640 1023 	movw	r0, #2339	; 0x923
 801eb32:	f7ff fdeb 	bl	801e70c <SUBGRF_WriteRegister>
  }
}
 801eb36:	bf00      	nop
 801eb38:	3710      	adds	r7, #16
 801eb3a:	46bd      	mov	sp, r7
 801eb3c:	bd80      	pop	{r7, pc}
	...

0801eb40 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801eb40:	b480      	push	{r7}
 801eb42:	b085      	sub	sp, #20
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d101      	bne.n	801eb52 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801eb4e:	231f      	movs	r3, #31
 801eb50:	e016      	b.n	801eb80 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eb52:	2300      	movs	r3, #0
 801eb54:	73fb      	strb	r3, [r7, #15]
 801eb56:	e00f      	b.n	801eb78 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801eb58:	7bfb      	ldrb	r3, [r7, #15]
 801eb5a:	4a0c      	ldr	r2, [pc, #48]	; (801eb8c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eb5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801eb60:	687a      	ldr	r2, [r7, #4]
 801eb62:	429a      	cmp	r2, r3
 801eb64:	d205      	bcs.n	801eb72 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801eb66:	7bfb      	ldrb	r3, [r7, #15]
 801eb68:	4a08      	ldr	r2, [pc, #32]	; (801eb8c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eb6a:	00db      	lsls	r3, r3, #3
 801eb6c:	4413      	add	r3, r2
 801eb6e:	791b      	ldrb	r3, [r3, #4]
 801eb70:	e006      	b.n	801eb80 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eb72:	7bfb      	ldrb	r3, [r7, #15]
 801eb74:	3301      	adds	r3, #1
 801eb76:	73fb      	strb	r3, [r7, #15]
 801eb78:	7bfb      	ldrb	r3, [r7, #15]
 801eb7a:	2b15      	cmp	r3, #21
 801eb7c:	d9ec      	bls.n	801eb58 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801eb7e:	e7fe      	b.n	801eb7e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801eb80:	4618      	mov	r0, r3
 801eb82:	3714      	adds	r7, #20
 801eb84:	46bd      	mov	sp, r7
 801eb86:	bc80      	pop	{r7}
 801eb88:	4770      	bx	lr
 801eb8a:	bf00      	nop
 801eb8c:	08021e84 	.word	0x08021e84

0801eb90 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801eb90:	b580      	push	{r7, lr}
 801eb92:	b08a      	sub	sp, #40	; 0x28
 801eb94:	af00      	add	r7, sp, #0
 801eb96:	6078      	str	r0, [r7, #4]
 801eb98:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801eb9a:	4b35      	ldr	r3, [pc, #212]	; (801ec70 <SUBGRF_GetCFO+0xe0>)
 801eb9c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801eb9e:	f640 0007 	movw	r0, #2055	; 0x807
 801eba2:	f7ff fdc7 	bl	801e734 <SUBGRF_ReadRegister>
 801eba6:	4603      	mov	r3, r0
 801eba8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801ebaa:	7ffb      	ldrb	r3, [r7, #31]
 801ebac:	08db      	lsrs	r3, r3, #3
 801ebae:	b2db      	uxtb	r3, r3
 801ebb0:	f003 0303 	and.w	r3, r3, #3
 801ebb4:	3328      	adds	r3, #40	; 0x28
 801ebb6:	443b      	add	r3, r7
 801ebb8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801ebbc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801ebbe:	7ffb      	ldrb	r3, [r7, #31]
 801ebc0:	f003 0307 	and.w	r3, r3, #7
 801ebc4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801ebc6:	7fba      	ldrb	r2, [r7, #30]
 801ebc8:	7f7b      	ldrb	r3, [r7, #29]
 801ebca:	3301      	adds	r3, #1
 801ebcc:	fa02 f303 	lsl.w	r3, r2, r3
 801ebd0:	461a      	mov	r2, r3
 801ebd2:	4b28      	ldr	r3, [pc, #160]	; (801ec74 <SUBGRF_GetCFO+0xe4>)
 801ebd4:	fbb3 f3f2 	udiv	r3, r3, r2
 801ebd8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801ebda:	69ba      	ldr	r2, [r7, #24]
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	fbb2 f3f3 	udiv	r3, r2, r3
 801ebe2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801ebe4:	2301      	movs	r3, #1
 801ebe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801ebea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ebee:	697a      	ldr	r2, [r7, #20]
 801ebf0:	fb02 f303 	mul.w	r3, r2, r3
 801ebf4:	2b07      	cmp	r3, #7
 801ebf6:	d802      	bhi.n	801ebfe <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801ebf8:	2302      	movs	r3, #2
 801ebfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801ebfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ec02:	697a      	ldr	r2, [r7, #20]
 801ec04:	fb02 f303 	mul.w	r3, r2, r3
 801ec08:	2b03      	cmp	r3, #3
 801ec0a:	d802      	bhi.n	801ec12 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ec0c:	2304      	movs	r3, #4
 801ec0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ec12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ec16:	69bb      	ldr	r3, [r7, #24]
 801ec18:	fb02 f303 	mul.w	r3, r2, r3
 801ec1c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ec1e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801ec22:	f7ff fd87 	bl	801e734 <SUBGRF_ReadRegister>
 801ec26:	4603      	mov	r3, r0
 801ec28:	021b      	lsls	r3, r3, #8
 801ec2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801ec2e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801ec30:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801ec34:	f7ff fd7e 	bl	801e734 <SUBGRF_ReadRegister>
 801ec38:	4603      	mov	r3, r0
 801ec3a:	461a      	mov	r2, r3
 801ec3c:	6a3b      	ldr	r3, [r7, #32]
 801ec3e:	4313      	orrs	r3, r2
 801ec40:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ec42:	6a3b      	ldr	r3, [r7, #32]
 801ec44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d005      	beq.n	801ec58 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ec4c:	6a3b      	ldr	r3, [r7, #32]
 801ec4e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ec52:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ec56:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ec58:	693b      	ldr	r3, [r7, #16]
 801ec5a:	095b      	lsrs	r3, r3, #5
 801ec5c:	6a3a      	ldr	r2, [r7, #32]
 801ec5e:	fb02 f303 	mul.w	r3, r2, r3
 801ec62:	11da      	asrs	r2, r3, #7
 801ec64:	683b      	ldr	r3, [r7, #0]
 801ec66:	601a      	str	r2, [r3, #0]
}
 801ec68:	bf00      	nop
 801ec6a:	3728      	adds	r7, #40	; 0x28
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bd80      	pop	{r7, pc}
 801ec70:	0c0a0804 	.word	0x0c0a0804
 801ec74:	01e84800 	.word	0x01e84800

0801ec78 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ec78:	b480      	push	{r7}
 801ec7a:	b087      	sub	sp, #28
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	4603      	mov	r3, r0
 801ec80:	60b9      	str	r1, [r7, #8]
 801ec82:	607a      	str	r2, [r7, #4]
 801ec84:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ec86:	2300      	movs	r3, #0
 801ec88:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ec8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ec8e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ec90:	697b      	ldr	r3, [r7, #20]
}
 801ec92:	4618      	mov	r0, r3
 801ec94:	371c      	adds	r7, #28
 801ec96:	46bd      	mov	sp, r7
 801ec98:	bc80      	pop	{r7}
 801ec9a:	4770      	bx	lr

0801ec9c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801ec9c:	b480      	push	{r7}
 801ec9e:	b087      	sub	sp, #28
 801eca0:	af00      	add	r7, sp, #0
 801eca2:	4603      	mov	r3, r0
 801eca4:	60b9      	str	r1, [r7, #8]
 801eca6:	607a      	str	r2, [r7, #4]
 801eca8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801ecaa:	2300      	movs	r3, #0
 801ecac:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801ecae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ecb2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ecb4:	697b      	ldr	r3, [r7, #20]
}
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	371c      	adds	r7, #28
 801ecba:	46bd      	mov	sp, r7
 801ecbc:	bc80      	pop	{r7}
 801ecbe:	4770      	bx	lr

0801ecc0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ecc0:	b480      	push	{r7}
 801ecc2:	b085      	sub	sp, #20
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	60f8      	str	r0, [r7, #12]
 801ecc8:	60b9      	str	r1, [r7, #8]
 801ecca:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801eccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801ecd0:	4618      	mov	r0, r3
 801ecd2:	3714      	adds	r7, #20
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	bc80      	pop	{r7}
 801ecd8:	4770      	bx	lr

0801ecda <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ecda:	b480      	push	{r7}
 801ecdc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ecde:	bf00      	nop
 801ece0:	46bd      	mov	sp, r7
 801ece2:	bc80      	pop	{r7}
 801ece4:	4770      	bx	lr

0801ece6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ece6:	b480      	push	{r7}
 801ece8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ecea:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ecec:	4618      	mov	r0, r3
 801ecee:	46bd      	mov	sp, r7
 801ecf0:	bc80      	pop	{r7}
 801ecf2:	4770      	bx	lr

0801ecf4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ecf4:	b480      	push	{r7}
 801ecf6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ecf8:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ecfa:	4618      	mov	r0, r3
 801ecfc:	46bd      	mov	sp, r7
 801ecfe:	bc80      	pop	{r7}
 801ed00:	4770      	bx	lr

0801ed02 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ed02:	b480      	push	{r7}
 801ed04:	b083      	sub	sp, #12
 801ed06:	af00      	add	r7, sp, #0
 801ed08:	4603      	mov	r3, r0
 801ed0a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ed0c:	bf00      	nop
 801ed0e:	370c      	adds	r7, #12
 801ed10:	46bd      	mov	sp, r7
 801ed12:	bc80      	pop	{r7}
 801ed14:	4770      	bx	lr

0801ed16 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ed16:	b480      	push	{r7}
 801ed18:	b087      	sub	sp, #28
 801ed1a:	af00      	add	r7, sp, #0
 801ed1c:	60f8      	str	r0, [r7, #12]
 801ed1e:	460b      	mov	r3, r1
 801ed20:	607a      	str	r2, [r7, #4]
 801ed22:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ed24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ed28:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ed2a:	697b      	ldr	r3, [r7, #20]
}
 801ed2c:	4618      	mov	r0, r3
 801ed2e:	371c      	adds	r7, #28
 801ed30:	46bd      	mov	sp, r7
 801ed32:	bc80      	pop	{r7}
 801ed34:	4770      	bx	lr

0801ed36 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ed36:	b480      	push	{r7}
 801ed38:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ed3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801ed3e:	4618      	mov	r0, r3
 801ed40:	46bd      	mov	sp, r7
 801ed42:	bc80      	pop	{r7}
 801ed44:	4770      	bx	lr

0801ed46 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ed46:	b480      	push	{r7}
 801ed48:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ed4a:	bf00      	nop
 801ed4c:	46bd      	mov	sp, r7
 801ed4e:	bc80      	pop	{r7}
 801ed50:	4770      	bx	lr

0801ed52 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ed52:	b480      	push	{r7}
 801ed54:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ed56:	bf00      	nop
 801ed58:	46bd      	mov	sp, r7
 801ed5a:	bc80      	pop	{r7}
 801ed5c:	4770      	bx	lr

0801ed5e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ed5e:	b480      	push	{r7}
 801ed60:	b083      	sub	sp, #12
 801ed62:	af00      	add	r7, sp, #0
 801ed64:	4603      	mov	r3, r0
 801ed66:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ed68:	bf00      	nop
 801ed6a:	370c      	adds	r7, #12
 801ed6c:	46bd      	mov	sp, r7
 801ed6e:	bc80      	pop	{r7}
 801ed70:	4770      	bx	lr
	...

0801ed74 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ed74:	b480      	push	{r7}
 801ed76:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed78:	4b04      	ldr	r3, [pc, #16]	; (801ed8c <UTIL_LPM_Init+0x18>)
 801ed7a:	2200      	movs	r2, #0
 801ed7c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed7e:	4b04      	ldr	r3, [pc, #16]	; (801ed90 <UTIL_LPM_Init+0x1c>)
 801ed80:	2200      	movs	r2, #0
 801ed82:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ed84:	bf00      	nop
 801ed86:	46bd      	mov	sp, r7
 801ed88:	bc80      	pop	{r7}
 801ed8a:	4770      	bx	lr
 801ed8c:	20001e38 	.word	0x20001e38
 801ed90:	20001e3c 	.word	0x20001e3c

0801ed94 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed94:	b480      	push	{r7}
 801ed96:	b087      	sub	sp, #28
 801ed98:	af00      	add	r7, sp, #0
 801ed9a:	6078      	str	r0, [r7, #4]
 801ed9c:	460b      	mov	r3, r1
 801ed9e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eda0:	f3ef 8310 	mrs	r3, PRIMASK
 801eda4:	613b      	str	r3, [r7, #16]
  return(result);
 801eda6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801eda8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801edaa:	b672      	cpsid	i
}
 801edac:	bf00      	nop
  
  switch( state )
 801edae:	78fb      	ldrb	r3, [r7, #3]
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d008      	beq.n	801edc6 <UTIL_LPM_SetStopMode+0x32>
 801edb4:	2b01      	cmp	r3, #1
 801edb6:	d10e      	bne.n	801edd6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801edb8:	4b0d      	ldr	r3, [pc, #52]	; (801edf0 <UTIL_LPM_SetStopMode+0x5c>)
 801edba:	681a      	ldr	r2, [r3, #0]
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	4313      	orrs	r3, r2
 801edc0:	4a0b      	ldr	r2, [pc, #44]	; (801edf0 <UTIL_LPM_SetStopMode+0x5c>)
 801edc2:	6013      	str	r3, [r2, #0]
      break;
 801edc4:	e008      	b.n	801edd8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	43da      	mvns	r2, r3
 801edca:	4b09      	ldr	r3, [pc, #36]	; (801edf0 <UTIL_LPM_SetStopMode+0x5c>)
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	4013      	ands	r3, r2
 801edd0:	4a07      	ldr	r2, [pc, #28]	; (801edf0 <UTIL_LPM_SetStopMode+0x5c>)
 801edd2:	6013      	str	r3, [r2, #0]
      break;
 801edd4:	e000      	b.n	801edd8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801edd6:	bf00      	nop
 801edd8:	697b      	ldr	r3, [r7, #20]
 801edda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	f383 8810 	msr	PRIMASK, r3
}
 801ede2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ede4:	bf00      	nop
 801ede6:	371c      	adds	r7, #28
 801ede8:	46bd      	mov	sp, r7
 801edea:	bc80      	pop	{r7}
 801edec:	4770      	bx	lr
 801edee:	bf00      	nop
 801edf0:	20001e38 	.word	0x20001e38

0801edf4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801edf4:	b480      	push	{r7}
 801edf6:	b087      	sub	sp, #28
 801edf8:	af00      	add	r7, sp, #0
 801edfa:	6078      	str	r0, [r7, #4]
 801edfc:	460b      	mov	r3, r1
 801edfe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee00:	f3ef 8310 	mrs	r3, PRIMASK
 801ee04:	613b      	str	r3, [r7, #16]
  return(result);
 801ee06:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ee08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ee0a:	b672      	cpsid	i
}
 801ee0c:	bf00      	nop
  
  switch(state)
 801ee0e:	78fb      	ldrb	r3, [r7, #3]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d008      	beq.n	801ee26 <UTIL_LPM_SetOffMode+0x32>
 801ee14:	2b01      	cmp	r3, #1
 801ee16:	d10e      	bne.n	801ee36 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ee18:	4b0d      	ldr	r3, [pc, #52]	; (801ee50 <UTIL_LPM_SetOffMode+0x5c>)
 801ee1a:	681a      	ldr	r2, [r3, #0]
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	4313      	orrs	r3, r2
 801ee20:	4a0b      	ldr	r2, [pc, #44]	; (801ee50 <UTIL_LPM_SetOffMode+0x5c>)
 801ee22:	6013      	str	r3, [r2, #0]
      break;
 801ee24:	e008      	b.n	801ee38 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	43da      	mvns	r2, r3
 801ee2a:	4b09      	ldr	r3, [pc, #36]	; (801ee50 <UTIL_LPM_SetOffMode+0x5c>)
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	4013      	ands	r3, r2
 801ee30:	4a07      	ldr	r2, [pc, #28]	; (801ee50 <UTIL_LPM_SetOffMode+0x5c>)
 801ee32:	6013      	str	r3, [r2, #0]
      break;
 801ee34:	e000      	b.n	801ee38 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ee36:	bf00      	nop
 801ee38:	697b      	ldr	r3, [r7, #20]
 801ee3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	f383 8810 	msr	PRIMASK, r3
}
 801ee42:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ee44:	bf00      	nop
 801ee46:	371c      	adds	r7, #28
 801ee48:	46bd      	mov	sp, r7
 801ee4a:	bc80      	pop	{r7}
 801ee4c:	4770      	bx	lr
 801ee4e:	bf00      	nop
 801ee50:	20001e3c 	.word	0x20001e3c

0801ee54 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801ee54:	b580      	push	{r7, lr}
 801ee56:	b084      	sub	sp, #16
 801ee58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee5a:	f3ef 8310 	mrs	r3, PRIMASK
 801ee5e:	60bb      	str	r3, [r7, #8]
  return(result);
 801ee60:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ee62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ee64:	b672      	cpsid	i
}
 801ee66:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ee68:	4b12      	ldr	r3, [pc, #72]	; (801eeb4 <UTIL_LPM_EnterLowPower+0x60>)
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d006      	beq.n	801ee7e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ee70:	4b11      	ldr	r3, [pc, #68]	; (801eeb8 <UTIL_LPM_EnterLowPower+0x64>)
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ee76:	4b10      	ldr	r3, [pc, #64]	; (801eeb8 <UTIL_LPM_EnterLowPower+0x64>)
 801ee78:	685b      	ldr	r3, [r3, #4]
 801ee7a:	4798      	blx	r3
 801ee7c:	e010      	b.n	801eea0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ee7e:	4b0f      	ldr	r3, [pc, #60]	; (801eebc <UTIL_LPM_EnterLowPower+0x68>)
 801ee80:	681b      	ldr	r3, [r3, #0]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d006      	beq.n	801ee94 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801ee86:	4b0c      	ldr	r3, [pc, #48]	; (801eeb8 <UTIL_LPM_EnterLowPower+0x64>)
 801ee88:	689b      	ldr	r3, [r3, #8]
 801ee8a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801ee8c:	4b0a      	ldr	r3, [pc, #40]	; (801eeb8 <UTIL_LPM_EnterLowPower+0x64>)
 801ee8e:	68db      	ldr	r3, [r3, #12]
 801ee90:	4798      	blx	r3
 801ee92:	e005      	b.n	801eea0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801ee94:	4b08      	ldr	r3, [pc, #32]	; (801eeb8 <UTIL_LPM_EnterLowPower+0x64>)
 801ee96:	691b      	ldr	r3, [r3, #16]
 801ee98:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801ee9a:	4b07      	ldr	r3, [pc, #28]	; (801eeb8 <UTIL_LPM_EnterLowPower+0x64>)
 801ee9c:	695b      	ldr	r3, [r3, #20]
 801ee9e:	4798      	blx	r3
 801eea0:	68fb      	ldr	r3, [r7, #12]
 801eea2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	f383 8810 	msr	PRIMASK, r3
}
 801eeaa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801eeac:	bf00      	nop
 801eeae:	3710      	adds	r7, #16
 801eeb0:	46bd      	mov	sp, r7
 801eeb2:	bd80      	pop	{r7, pc}
 801eeb4:	20001e38 	.word	0x20001e38
 801eeb8:	080218ac 	.word	0x080218ac
 801eebc:	20001e3c 	.word	0x20001e3c

0801eec0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801eec0:	b480      	push	{r7}
 801eec2:	b087      	sub	sp, #28
 801eec4:	af00      	add	r7, sp, #0
 801eec6:	60f8      	str	r0, [r7, #12]
 801eec8:	60b9      	str	r1, [r7, #8]
 801eeca:	4613      	mov	r3, r2
 801eecc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801eece:	68fb      	ldr	r3, [r7, #12]
 801eed0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801eed2:	68bb      	ldr	r3, [r7, #8]
 801eed4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801eed6:	e007      	b.n	801eee8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801eed8:	693a      	ldr	r2, [r7, #16]
 801eeda:	1c53      	adds	r3, r2, #1
 801eedc:	613b      	str	r3, [r7, #16]
 801eede:	697b      	ldr	r3, [r7, #20]
 801eee0:	1c59      	adds	r1, r3, #1
 801eee2:	6179      	str	r1, [r7, #20]
 801eee4:	7812      	ldrb	r2, [r2, #0]
 801eee6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801eee8:	88fb      	ldrh	r3, [r7, #6]
 801eeea:	1e5a      	subs	r2, r3, #1
 801eeec:	80fa      	strh	r2, [r7, #6]
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d1f2      	bne.n	801eed8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801eef2:	bf00      	nop
 801eef4:	bf00      	nop
 801eef6:	371c      	adds	r7, #28
 801eef8:	46bd      	mov	sp, r7
 801eefa:	bc80      	pop	{r7}
 801eefc:	4770      	bx	lr

0801eefe <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801eefe:	b480      	push	{r7}
 801ef00:	b085      	sub	sp, #20
 801ef02:	af00      	add	r7, sp, #0
 801ef04:	6078      	str	r0, [r7, #4]
 801ef06:	460b      	mov	r3, r1
 801ef08:	70fb      	strb	r3, [r7, #3]
 801ef0a:	4613      	mov	r3, r2
 801ef0c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ef12:	e004      	b.n	801ef1e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ef14:	68fb      	ldr	r3, [r7, #12]
 801ef16:	1c5a      	adds	r2, r3, #1
 801ef18:	60fa      	str	r2, [r7, #12]
 801ef1a:	78fa      	ldrb	r2, [r7, #3]
 801ef1c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ef1e:	883b      	ldrh	r3, [r7, #0]
 801ef20:	1e5a      	subs	r2, r3, #1
 801ef22:	803a      	strh	r2, [r7, #0]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d1f5      	bne.n	801ef14 <UTIL_MEM_set_8+0x16>
  }
}
 801ef28:	bf00      	nop
 801ef2a:	bf00      	nop
 801ef2c:	3714      	adds	r7, #20
 801ef2e:	46bd      	mov	sp, r7
 801ef30:	bc80      	pop	{r7}
 801ef32:	4770      	bx	lr

0801ef34 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ef34:	b082      	sub	sp, #8
 801ef36:	b480      	push	{r7}
 801ef38:	b087      	sub	sp, #28
 801ef3a:	af00      	add	r7, sp, #0
 801ef3c:	60f8      	str	r0, [r7, #12]
 801ef3e:	1d38      	adds	r0, r7, #4
 801ef40:	e880 0006 	stmia.w	r0, {r1, r2}
 801ef44:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ef46:	2300      	movs	r3, #0
 801ef48:	613b      	str	r3, [r7, #16]
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ef4e:	687a      	ldr	r2, [r7, #4]
 801ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef52:	4413      	add	r3, r2
 801ef54:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ef56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ef5a:	b29a      	uxth	r2, r3
 801ef5c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ef60:	b29b      	uxth	r3, r3
 801ef62:	4413      	add	r3, r2
 801ef64:	b29b      	uxth	r3, r3
 801ef66:	b21b      	sxth	r3, r3
 801ef68:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801ef6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ef6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ef72:	db0a      	blt.n	801ef8a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801ef74:	693b      	ldr	r3, [r7, #16]
 801ef76:	3301      	adds	r3, #1
 801ef78:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ef7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ef7e:	b29b      	uxth	r3, r3
 801ef80:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801ef84:	b29b      	uxth	r3, r3
 801ef86:	b21b      	sxth	r3, r3
 801ef88:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ef8a:	68fb      	ldr	r3, [r7, #12]
 801ef8c:	461a      	mov	r2, r3
 801ef8e:	f107 0310 	add.w	r3, r7, #16
 801ef92:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ef96:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ef9a:	68f8      	ldr	r0, [r7, #12]
 801ef9c:	371c      	adds	r7, #28
 801ef9e:	46bd      	mov	sp, r7
 801efa0:	bc80      	pop	{r7}
 801efa2:	b002      	add	sp, #8
 801efa4:	4770      	bx	lr

0801efa6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801efa6:	b082      	sub	sp, #8
 801efa8:	b480      	push	{r7}
 801efaa:	b087      	sub	sp, #28
 801efac:	af00      	add	r7, sp, #0
 801efae:	60f8      	str	r0, [r7, #12]
 801efb0:	1d38      	adds	r0, r7, #4
 801efb2:	e880 0006 	stmia.w	r0, {r1, r2}
 801efb6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801efb8:	2300      	movs	r3, #0
 801efba:	613b      	str	r3, [r7, #16]
 801efbc:	2300      	movs	r3, #0
 801efbe:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801efc0:	687a      	ldr	r2, [r7, #4]
 801efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efc4:	1ad3      	subs	r3, r2, r3
 801efc6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801efc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801efcc:	b29a      	uxth	r2, r3
 801efce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801efd2:	b29b      	uxth	r3, r3
 801efd4:	1ad3      	subs	r3, r2, r3
 801efd6:	b29b      	uxth	r3, r3
 801efd8:	b21b      	sxth	r3, r3
 801efda:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801efdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	da0a      	bge.n	801effa <SysTimeSub+0x54>
  {
    c.Seconds--;
 801efe4:	693b      	ldr	r3, [r7, #16]
 801efe6:	3b01      	subs	r3, #1
 801efe8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801efea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801efee:	b29b      	uxth	r3, r3
 801eff0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801eff4:	b29b      	uxth	r3, r3
 801eff6:	b21b      	sxth	r3, r3
 801eff8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	461a      	mov	r2, r3
 801effe:	f107 0310 	add.w	r3, r7, #16
 801f002:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f006:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f00a:	68f8      	ldr	r0, [r7, #12]
 801f00c:	371c      	adds	r7, #28
 801f00e:	46bd      	mov	sp, r7
 801f010:	bc80      	pop	{r7}
 801f012:	b002      	add	sp, #8
 801f014:	4770      	bx	lr
	...

0801f018 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801f018:	b580      	push	{r7, lr}
 801f01a:	b088      	sub	sp, #32
 801f01c:	af02      	add	r7, sp, #8
 801f01e:	463b      	mov	r3, r7
 801f020:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f024:	2300      	movs	r3, #0
 801f026:	60bb      	str	r3, [r7, #8]
 801f028:	2300      	movs	r3, #0
 801f02a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f02c:	4b10      	ldr	r3, [pc, #64]	; (801f070 <SysTimeSet+0x58>)
 801f02e:	691b      	ldr	r3, [r3, #16]
 801f030:	f107 0208 	add.w	r2, r7, #8
 801f034:	3204      	adds	r2, #4
 801f036:	4610      	mov	r0, r2
 801f038:	4798      	blx	r3
 801f03a:	4603      	mov	r3, r0
 801f03c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801f03e:	f107 0010 	add.w	r0, r7, #16
 801f042:	68fb      	ldr	r3, [r7, #12]
 801f044:	9300      	str	r3, [sp, #0]
 801f046:	68bb      	ldr	r3, [r7, #8]
 801f048:	463a      	mov	r2, r7
 801f04a:	ca06      	ldmia	r2, {r1, r2}
 801f04c:	f7ff ffab 	bl	801efa6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801f050:	4b07      	ldr	r3, [pc, #28]	; (801f070 <SysTimeSet+0x58>)
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	693a      	ldr	r2, [r7, #16]
 801f056:	4610      	mov	r0, r2
 801f058:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801f05a:	4b05      	ldr	r3, [pc, #20]	; (801f070 <SysTimeSet+0x58>)
 801f05c:	689b      	ldr	r3, [r3, #8]
 801f05e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f062:	4610      	mov	r0, r2
 801f064:	4798      	blx	r3
}
 801f066:	bf00      	nop
 801f068:	3718      	adds	r7, #24
 801f06a:	46bd      	mov	sp, r7
 801f06c:	bd80      	pop	{r7, pc}
 801f06e:	bf00      	nop
 801f070:	08021990 	.word	0x08021990

0801f074 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801f074:	b580      	push	{r7, lr}
 801f076:	b08a      	sub	sp, #40	; 0x28
 801f078:	af02      	add	r7, sp, #8
 801f07a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f07c:	2300      	movs	r3, #0
 801f07e:	61bb      	str	r3, [r7, #24]
 801f080:	2300      	movs	r3, #0
 801f082:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801f084:	2300      	movs	r3, #0
 801f086:	613b      	str	r3, [r7, #16]
 801f088:	2300      	movs	r3, #0
 801f08a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f08c:	4b14      	ldr	r3, [pc, #80]	; (801f0e0 <SysTimeGet+0x6c>)
 801f08e:	691b      	ldr	r3, [r3, #16]
 801f090:	f107 0218 	add.w	r2, r7, #24
 801f094:	3204      	adds	r2, #4
 801f096:	4610      	mov	r0, r2
 801f098:	4798      	blx	r3
 801f09a:	4603      	mov	r3, r0
 801f09c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f09e:	4b10      	ldr	r3, [pc, #64]	; (801f0e0 <SysTimeGet+0x6c>)
 801f0a0:	68db      	ldr	r3, [r3, #12]
 801f0a2:	4798      	blx	r3
 801f0a4:	4603      	mov	r3, r0
 801f0a6:	b21b      	sxth	r3, r3
 801f0a8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f0aa:	4b0d      	ldr	r3, [pc, #52]	; (801f0e0 <SysTimeGet+0x6c>)
 801f0ac:	685b      	ldr	r3, [r3, #4]
 801f0ae:	4798      	blx	r3
 801f0b0:	4603      	mov	r3, r0
 801f0b2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801f0b4:	f107 0010 	add.w	r0, r7, #16
 801f0b8:	69fb      	ldr	r3, [r7, #28]
 801f0ba:	9300      	str	r3, [sp, #0]
 801f0bc:	69bb      	ldr	r3, [r7, #24]
 801f0be:	f107 0208 	add.w	r2, r7, #8
 801f0c2:	ca06      	ldmia	r2, {r1, r2}
 801f0c4:	f7ff ff36 	bl	801ef34 <SysTimeAdd>

  return sysTime;
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	461a      	mov	r2, r3
 801f0cc:	f107 0310 	add.w	r3, r7, #16
 801f0d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f0d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f0d8:	6878      	ldr	r0, [r7, #4]
 801f0da:	3720      	adds	r7, #32
 801f0dc:	46bd      	mov	sp, r7
 801f0de:	bd80      	pop	{r7, pc}
 801f0e0:	08021990 	.word	0x08021990

0801f0e4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801f0e4:	b580      	push	{r7, lr}
 801f0e6:	b084      	sub	sp, #16
 801f0e8:	af00      	add	r7, sp, #0
 801f0ea:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f0ec:	2300      	movs	r3, #0
 801f0ee:	60bb      	str	r3, [r7, #8]
 801f0f0:	2300      	movs	r3, #0
 801f0f2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f0f4:	4b0a      	ldr	r3, [pc, #40]	; (801f120 <SysTimeGetMcuTime+0x3c>)
 801f0f6:	691b      	ldr	r3, [r3, #16]
 801f0f8:	f107 0208 	add.w	r2, r7, #8
 801f0fc:	3204      	adds	r2, #4
 801f0fe:	4610      	mov	r0, r2
 801f100:	4798      	blx	r3
 801f102:	4603      	mov	r3, r0
 801f104:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	461a      	mov	r2, r3
 801f10a:	f107 0308 	add.w	r3, r7, #8
 801f10e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f112:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f116:	6878      	ldr	r0, [r7, #4]
 801f118:	3710      	adds	r7, #16
 801f11a:	46bd      	mov	sp, r7
 801f11c:	bd80      	pop	{r7, pc}
 801f11e:	bf00      	nop
 801f120:	08021990 	.word	0x08021990

0801f124 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801f124:	b580      	push	{r7, lr}
 801f126:	b088      	sub	sp, #32
 801f128:	af02      	add	r7, sp, #8
 801f12a:	463b      	mov	r3, r7
 801f12c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f130:	4b0f      	ldr	r3, [pc, #60]	; (801f170 <SysTimeToMs+0x4c>)
 801f132:	68db      	ldr	r3, [r3, #12]
 801f134:	4798      	blx	r3
 801f136:	4603      	mov	r3, r0
 801f138:	b21b      	sxth	r3, r3
 801f13a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f13c:	4b0c      	ldr	r3, [pc, #48]	; (801f170 <SysTimeToMs+0x4c>)
 801f13e:	685b      	ldr	r3, [r3, #4]
 801f140:	4798      	blx	r3
 801f142:	4603      	mov	r3, r0
 801f144:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801f146:	f107 0008 	add.w	r0, r7, #8
 801f14a:	697b      	ldr	r3, [r7, #20]
 801f14c:	9300      	str	r3, [sp, #0]
 801f14e:	693b      	ldr	r3, [r7, #16]
 801f150:	463a      	mov	r2, r7
 801f152:	ca06      	ldmia	r2, {r1, r2}
 801f154:	f7ff ff27 	bl	801efa6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801f158:	68bb      	ldr	r3, [r7, #8]
 801f15a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f15e:	fb02 f303 	mul.w	r3, r2, r3
 801f162:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801f166:	4413      	add	r3, r2
}
 801f168:	4618      	mov	r0, r3
 801f16a:	3718      	adds	r7, #24
 801f16c:	46bd      	mov	sp, r7
 801f16e:	bd80      	pop	{r7, pc}
 801f170:	08021990 	.word	0x08021990

0801f174 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801f174:	b580      	push	{r7, lr}
 801f176:	b08a      	sub	sp, #40	; 0x28
 801f178:	af02      	add	r7, sp, #8
 801f17a:	6078      	str	r0, [r7, #4]
 801f17c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801f17e:	683b      	ldr	r3, [r7, #0]
 801f180:	4a19      	ldr	r2, [pc, #100]	; (801f1e8 <SysTimeFromMs+0x74>)
 801f182:	fba2 2303 	umull	r2, r3, r2, r3
 801f186:	099b      	lsrs	r3, r3, #6
 801f188:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801f18a:	69fb      	ldr	r3, [r7, #28]
 801f18c:	617b      	str	r3, [r7, #20]
 801f18e:	683b      	ldr	r3, [r7, #0]
 801f190:	b29a      	uxth	r2, r3
 801f192:	69fb      	ldr	r3, [r7, #28]
 801f194:	b29b      	uxth	r3, r3
 801f196:	4619      	mov	r1, r3
 801f198:	0149      	lsls	r1, r1, #5
 801f19a:	1ac9      	subs	r1, r1, r3
 801f19c:	0089      	lsls	r1, r1, #2
 801f19e:	440b      	add	r3, r1
 801f1a0:	00db      	lsls	r3, r3, #3
 801f1a2:	b29b      	uxth	r3, r3
 801f1a4:	1ad3      	subs	r3, r2, r3
 801f1a6:	b29b      	uxth	r3, r3
 801f1a8:	b21b      	sxth	r3, r3
 801f1aa:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801f1ac:	f107 030c 	add.w	r3, r7, #12
 801f1b0:	2200      	movs	r2, #0
 801f1b2:	601a      	str	r2, [r3, #0]
 801f1b4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f1b6:	4b0d      	ldr	r3, [pc, #52]	; (801f1ec <SysTimeFromMs+0x78>)
 801f1b8:	68db      	ldr	r3, [r3, #12]
 801f1ba:	4798      	blx	r3
 801f1bc:	4603      	mov	r3, r0
 801f1be:	b21b      	sxth	r3, r3
 801f1c0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f1c2:	4b0a      	ldr	r3, [pc, #40]	; (801f1ec <SysTimeFromMs+0x78>)
 801f1c4:	685b      	ldr	r3, [r3, #4]
 801f1c6:	4798      	blx	r3
 801f1c8:	4603      	mov	r3, r0
 801f1ca:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801f1cc:	6878      	ldr	r0, [r7, #4]
 801f1ce:	693b      	ldr	r3, [r7, #16]
 801f1d0:	9300      	str	r3, [sp, #0]
 801f1d2:	68fb      	ldr	r3, [r7, #12]
 801f1d4:	f107 0214 	add.w	r2, r7, #20
 801f1d8:	ca06      	ldmia	r2, {r1, r2}
 801f1da:	f7ff feab 	bl	801ef34 <SysTimeAdd>
}
 801f1de:	6878      	ldr	r0, [r7, #4]
 801f1e0:	3720      	adds	r7, #32
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}
 801f1e6:	bf00      	nop
 801f1e8:	10624dd3 	.word	0x10624dd3
 801f1ec:	08021990 	.word	0x08021990

0801f1f0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801f1f0:	b480      	push	{r7}
 801f1f2:	b085      	sub	sp, #20
 801f1f4:	af00      	add	r7, sp, #0
 801f1f6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801f1f8:	2300      	movs	r3, #0
 801f1fa:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801f1fc:	e00e      	b.n	801f21c <ee_skip_atoi+0x2c>
 801f1fe:	68fa      	ldr	r2, [r7, #12]
 801f200:	4613      	mov	r3, r2
 801f202:	009b      	lsls	r3, r3, #2
 801f204:	4413      	add	r3, r2
 801f206:	005b      	lsls	r3, r3, #1
 801f208:	4618      	mov	r0, r3
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	1c59      	adds	r1, r3, #1
 801f210:	687a      	ldr	r2, [r7, #4]
 801f212:	6011      	str	r1, [r2, #0]
 801f214:	781b      	ldrb	r3, [r3, #0]
 801f216:	4403      	add	r3, r0
 801f218:	3b30      	subs	r3, #48	; 0x30
 801f21a:	60fb      	str	r3, [r7, #12]
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	781b      	ldrb	r3, [r3, #0]
 801f222:	2b2f      	cmp	r3, #47	; 0x2f
 801f224:	d904      	bls.n	801f230 <ee_skip_atoi+0x40>
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	781b      	ldrb	r3, [r3, #0]
 801f22c:	2b39      	cmp	r3, #57	; 0x39
 801f22e:	d9e6      	bls.n	801f1fe <ee_skip_atoi+0xe>
  return i;
 801f230:	68fb      	ldr	r3, [r7, #12]
}
 801f232:	4618      	mov	r0, r3
 801f234:	3714      	adds	r7, #20
 801f236:	46bd      	mov	sp, r7
 801f238:	bc80      	pop	{r7}
 801f23a:	4770      	bx	lr

0801f23c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801f23c:	b480      	push	{r7}
 801f23e:	b099      	sub	sp, #100	; 0x64
 801f240:	af00      	add	r7, sp, #0
 801f242:	60f8      	str	r0, [r7, #12]
 801f244:	60b9      	str	r1, [r7, #8]
 801f246:	607a      	str	r2, [r7, #4]
 801f248:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801f24a:	4b71      	ldr	r3, [pc, #452]	; (801f410 <ee_number+0x1d4>)
 801f24c:	681b      	ldr	r3, [r3, #0]
 801f24e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801f250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f256:	2b00      	cmp	r3, #0
 801f258:	d002      	beq.n	801f260 <ee_number+0x24>
 801f25a:	4b6e      	ldr	r3, [pc, #440]	; (801f414 <ee_number+0x1d8>)
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801f260:	683b      	ldr	r3, [r7, #0]
 801f262:	2b01      	cmp	r3, #1
 801f264:	dd02      	ble.n	801f26c <ee_number+0x30>
 801f266:	683b      	ldr	r3, [r7, #0]
 801f268:	2b24      	cmp	r3, #36	; 0x24
 801f26a:	dd01      	ble.n	801f270 <ee_number+0x34>
 801f26c:	2300      	movs	r3, #0
 801f26e:	e0ca      	b.n	801f406 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801f270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f272:	f003 0301 	and.w	r3, r3, #1
 801f276:	2b00      	cmp	r3, #0
 801f278:	d001      	beq.n	801f27e <ee_number+0x42>
 801f27a:	2330      	movs	r3, #48	; 0x30
 801f27c:	e000      	b.n	801f280 <ee_number+0x44>
 801f27e:	2320      	movs	r3, #32
 801f280:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801f284:	2300      	movs	r3, #0
 801f286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801f28a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f28c:	f003 0302 	and.w	r3, r3, #2
 801f290:	2b00      	cmp	r3, #0
 801f292:	d00b      	beq.n	801f2ac <ee_number+0x70>
  {
    if (num < 0)
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	2b00      	cmp	r3, #0
 801f298:	da08      	bge.n	801f2ac <ee_number+0x70>
    {
      sign = '-';
 801f29a:	232d      	movs	r3, #45	; 0x2d
 801f29c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	425b      	negs	r3, r3
 801f2a4:	607b      	str	r3, [r7, #4]
      size--;
 801f2a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f2a8:	3b01      	subs	r3, #1
 801f2aa:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801f2ac:	2300      	movs	r3, #0
 801f2ae:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d11e      	bne.n	801f2f4 <ee_number+0xb8>
    tmp[i++] = '0';
 801f2b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2b8:	1c5a      	adds	r2, r3, #1
 801f2ba:	657a      	str	r2, [r7, #84]	; 0x54
 801f2bc:	3360      	adds	r3, #96	; 0x60
 801f2be:	443b      	add	r3, r7
 801f2c0:	2230      	movs	r2, #48	; 0x30
 801f2c2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801f2c6:	e018      	b.n	801f2fa <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	683a      	ldr	r2, [r7, #0]
 801f2cc:	fbb3 f1f2 	udiv	r1, r3, r2
 801f2d0:	fb01 f202 	mul.w	r2, r1, r2
 801f2d4:	1a9b      	subs	r3, r3, r2
 801f2d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f2d8:	441a      	add	r2, r3
 801f2da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2dc:	1c59      	adds	r1, r3, #1
 801f2de:	6579      	str	r1, [r7, #84]	; 0x54
 801f2e0:	7812      	ldrb	r2, [r2, #0]
 801f2e2:	3360      	adds	r3, #96	; 0x60
 801f2e4:	443b      	add	r3, r7
 801f2e6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801f2ea:	687a      	ldr	r2, [r7, #4]
 801f2ec:	683b      	ldr	r3, [r7, #0]
 801f2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 801f2f2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d1e6      	bne.n	801f2c8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801f2fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f2fe:	429a      	cmp	r2, r3
 801f300:	dd01      	ble.n	801f306 <ee_number+0xca>
 801f302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f304:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801f306:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f30a:	1ad3      	subs	r3, r2, r3
 801f30c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801f30e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f310:	f003 0301 	and.w	r3, r3, #1
 801f314:	2b00      	cmp	r3, #0
 801f316:	d112      	bne.n	801f33e <ee_number+0x102>
 801f318:	e00c      	b.n	801f334 <ee_number+0xf8>
 801f31a:	68fb      	ldr	r3, [r7, #12]
 801f31c:	1c5a      	adds	r2, r3, #1
 801f31e:	60fa      	str	r2, [r7, #12]
 801f320:	2220      	movs	r2, #32
 801f322:	701a      	strb	r2, [r3, #0]
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	3b01      	subs	r3, #1
 801f328:	60bb      	str	r3, [r7, #8]
 801f32a:	68bb      	ldr	r3, [r7, #8]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d101      	bne.n	801f334 <ee_number+0xf8>
 801f330:	68fb      	ldr	r3, [r7, #12]
 801f332:	e068      	b.n	801f406 <ee_number+0x1ca>
 801f334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f336:	1e5a      	subs	r2, r3, #1
 801f338:	66ba      	str	r2, [r7, #104]	; 0x68
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	dced      	bgt.n	801f31a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801f33e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f342:	2b00      	cmp	r3, #0
 801f344:	d01b      	beq.n	801f37e <ee_number+0x142>
 801f346:	68fb      	ldr	r3, [r7, #12]
 801f348:	1c5a      	adds	r2, r3, #1
 801f34a:	60fa      	str	r2, [r7, #12]
 801f34c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801f350:	701a      	strb	r2, [r3, #0]
 801f352:	68bb      	ldr	r3, [r7, #8]
 801f354:	3b01      	subs	r3, #1
 801f356:	60bb      	str	r3, [r7, #8]
 801f358:	68bb      	ldr	r3, [r7, #8]
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d10f      	bne.n	801f37e <ee_number+0x142>
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	e051      	b.n	801f406 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801f362:	68fb      	ldr	r3, [r7, #12]
 801f364:	1c5a      	adds	r2, r3, #1
 801f366:	60fa      	str	r2, [r7, #12]
 801f368:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801f36c:	701a      	strb	r2, [r3, #0]
 801f36e:	68bb      	ldr	r3, [r7, #8]
 801f370:	3b01      	subs	r3, #1
 801f372:	60bb      	str	r3, [r7, #8]
 801f374:	68bb      	ldr	r3, [r7, #8]
 801f376:	2b00      	cmp	r3, #0
 801f378:	d101      	bne.n	801f37e <ee_number+0x142>
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	e043      	b.n	801f406 <ee_number+0x1ca>
 801f37e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f380:	1e5a      	subs	r2, r3, #1
 801f382:	66ba      	str	r2, [r7, #104]	; 0x68
 801f384:	2b00      	cmp	r3, #0
 801f386:	dcec      	bgt.n	801f362 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801f388:	e00c      	b.n	801f3a4 <ee_number+0x168>
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	1c5a      	adds	r2, r3, #1
 801f38e:	60fa      	str	r2, [r7, #12]
 801f390:	2230      	movs	r2, #48	; 0x30
 801f392:	701a      	strb	r2, [r3, #0]
 801f394:	68bb      	ldr	r3, [r7, #8]
 801f396:	3b01      	subs	r3, #1
 801f398:	60bb      	str	r3, [r7, #8]
 801f39a:	68bb      	ldr	r3, [r7, #8]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d101      	bne.n	801f3a4 <ee_number+0x168>
 801f3a0:	68fb      	ldr	r3, [r7, #12]
 801f3a2:	e030      	b.n	801f406 <ee_number+0x1ca>
 801f3a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f3a6:	1e5a      	subs	r2, r3, #1
 801f3a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f3aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f3ac:	429a      	cmp	r2, r3
 801f3ae:	dbec      	blt.n	801f38a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801f3b0:	e010      	b.n	801f3d4 <ee_number+0x198>
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	1c5a      	adds	r2, r3, #1
 801f3b6:	60fa      	str	r2, [r7, #12]
 801f3b8:	f107 0110 	add.w	r1, r7, #16
 801f3bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f3be:	440a      	add	r2, r1
 801f3c0:	7812      	ldrb	r2, [r2, #0]
 801f3c2:	701a      	strb	r2, [r3, #0]
 801f3c4:	68bb      	ldr	r3, [r7, #8]
 801f3c6:	3b01      	subs	r3, #1
 801f3c8:	60bb      	str	r3, [r7, #8]
 801f3ca:	68bb      	ldr	r3, [r7, #8]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d101      	bne.n	801f3d4 <ee_number+0x198>
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	e018      	b.n	801f406 <ee_number+0x1ca>
 801f3d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f3d6:	1e5a      	subs	r2, r3, #1
 801f3d8:	657a      	str	r2, [r7, #84]	; 0x54
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	dce9      	bgt.n	801f3b2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801f3de:	e00c      	b.n	801f3fa <ee_number+0x1be>
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	1c5a      	adds	r2, r3, #1
 801f3e4:	60fa      	str	r2, [r7, #12]
 801f3e6:	2220      	movs	r2, #32
 801f3e8:	701a      	strb	r2, [r3, #0]
 801f3ea:	68bb      	ldr	r3, [r7, #8]
 801f3ec:	3b01      	subs	r3, #1
 801f3ee:	60bb      	str	r3, [r7, #8]
 801f3f0:	68bb      	ldr	r3, [r7, #8]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d101      	bne.n	801f3fa <ee_number+0x1be>
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	e005      	b.n	801f406 <ee_number+0x1ca>
 801f3fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f3fc:	1e5a      	subs	r2, r3, #1
 801f3fe:	66ba      	str	r2, [r7, #104]	; 0x68
 801f400:	2b00      	cmp	r3, #0
 801f402:	dced      	bgt.n	801f3e0 <ee_number+0x1a4>

  return str;
 801f404:	68fb      	ldr	r3, [r7, #12]
}
 801f406:	4618      	mov	r0, r3
 801f408:	3764      	adds	r7, #100	; 0x64
 801f40a:	46bd      	mov	sp, r7
 801f40c:	bc80      	pop	{r7}
 801f40e:	4770      	bx	lr
 801f410:	20000138 	.word	0x20000138
 801f414:	2000013c 	.word	0x2000013c

0801f418 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801f418:	b580      	push	{r7, lr}
 801f41a:	b092      	sub	sp, #72	; 0x48
 801f41c:	af04      	add	r7, sp, #16
 801f41e:	60f8      	str	r0, [r7, #12]
 801f420:	60b9      	str	r1, [r7, #8]
 801f422:	607a      	str	r2, [r7, #4]
 801f424:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801f426:	68bb      	ldr	r3, [r7, #8]
 801f428:	2b00      	cmp	r3, #0
 801f42a:	dc01      	bgt.n	801f430 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801f42c:	2300      	movs	r3, #0
 801f42e:	e13e      	b.n	801f6ae <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f434:	e128      	b.n	801f688 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801f436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	1ad2      	subs	r2, r2, r3
 801f43c:	68bb      	ldr	r3, [r7, #8]
 801f43e:	3b01      	subs	r3, #1
 801f440:	429a      	cmp	r2, r3
 801f442:	f280 812e 	bge.w	801f6a2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	781b      	ldrb	r3, [r3, #0]
 801f44a:	2b25      	cmp	r3, #37	; 0x25
 801f44c:	d006      	beq.n	801f45c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801f44e:	687a      	ldr	r2, [r7, #4]
 801f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f452:	1c59      	adds	r1, r3, #1
 801f454:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f456:	7812      	ldrb	r2, [r2, #0]
 801f458:	701a      	strb	r2, [r3, #0]
      continue;
 801f45a:	e112      	b.n	801f682 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801f45c:	2300      	movs	r3, #0
 801f45e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	3301      	adds	r3, #1
 801f464:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801f466:	687b      	ldr	r3, [r7, #4]
 801f468:	781b      	ldrb	r3, [r3, #0]
 801f46a:	2b30      	cmp	r3, #48	; 0x30
 801f46c:	d103      	bne.n	801f476 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801f46e:	6a3b      	ldr	r3, [r7, #32]
 801f470:	f043 0301 	orr.w	r3, r3, #1
 801f474:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801f476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f47a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	781b      	ldrb	r3, [r3, #0]
 801f480:	2b2f      	cmp	r3, #47	; 0x2f
 801f482:	d908      	bls.n	801f496 <tiny_vsnprintf_like+0x7e>
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	781b      	ldrb	r3, [r3, #0]
 801f488:	2b39      	cmp	r3, #57	; 0x39
 801f48a:	d804      	bhi.n	801f496 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801f48c:	1d3b      	adds	r3, r7, #4
 801f48e:	4618      	mov	r0, r3
 801f490:	f7ff feae 	bl	801f1f0 <ee_skip_atoi>
 801f494:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801f496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f49a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801f49c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f4a0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801f4a2:	230a      	movs	r3, #10
 801f4a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	781b      	ldrb	r3, [r3, #0]
 801f4aa:	3b58      	subs	r3, #88	; 0x58
 801f4ac:	2b20      	cmp	r3, #32
 801f4ae:	f200 8094 	bhi.w	801f5da <tiny_vsnprintf_like+0x1c2>
 801f4b2:	a201      	add	r2, pc, #4	; (adr r2, 801f4b8 <tiny_vsnprintf_like+0xa0>)
 801f4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f4b8:	0801f5c3 	.word	0x0801f5c3
 801f4bc:	0801f5db 	.word	0x0801f5db
 801f4c0:	0801f5db 	.word	0x0801f5db
 801f4c4:	0801f5db 	.word	0x0801f5db
 801f4c8:	0801f5db 	.word	0x0801f5db
 801f4cc:	0801f5db 	.word	0x0801f5db
 801f4d0:	0801f5db 	.word	0x0801f5db
 801f4d4:	0801f5db 	.word	0x0801f5db
 801f4d8:	0801f5db 	.word	0x0801f5db
 801f4dc:	0801f5db 	.word	0x0801f5db
 801f4e0:	0801f5db 	.word	0x0801f5db
 801f4e4:	0801f547 	.word	0x0801f547
 801f4e8:	0801f5d1 	.word	0x0801f5d1
 801f4ec:	0801f5db 	.word	0x0801f5db
 801f4f0:	0801f5db 	.word	0x0801f5db
 801f4f4:	0801f5db 	.word	0x0801f5db
 801f4f8:	0801f5db 	.word	0x0801f5db
 801f4fc:	0801f5d1 	.word	0x0801f5d1
 801f500:	0801f5db 	.word	0x0801f5db
 801f504:	0801f5db 	.word	0x0801f5db
 801f508:	0801f5db 	.word	0x0801f5db
 801f50c:	0801f5db 	.word	0x0801f5db
 801f510:	0801f5db 	.word	0x0801f5db
 801f514:	0801f5db 	.word	0x0801f5db
 801f518:	0801f5db 	.word	0x0801f5db
 801f51c:	0801f5db 	.word	0x0801f5db
 801f520:	0801f5db 	.word	0x0801f5db
 801f524:	0801f567 	.word	0x0801f567
 801f528:	0801f5db 	.word	0x0801f5db
 801f52c:	0801f627 	.word	0x0801f627
 801f530:	0801f5db 	.word	0x0801f5db
 801f534:	0801f5db 	.word	0x0801f5db
 801f538:	0801f5cb 	.word	0x0801f5cb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801f53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f53e:	1c5a      	adds	r2, r3, #1
 801f540:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f542:	2220      	movs	r2, #32
 801f544:	701a      	strb	r2, [r3, #0]
 801f546:	69fb      	ldr	r3, [r7, #28]
 801f548:	3b01      	subs	r3, #1
 801f54a:	61fb      	str	r3, [r7, #28]
 801f54c:	69fb      	ldr	r3, [r7, #28]
 801f54e:	2b00      	cmp	r3, #0
 801f550:	dcf4      	bgt.n	801f53c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801f552:	683b      	ldr	r3, [r7, #0]
 801f554:	1d1a      	adds	r2, r3, #4
 801f556:	603a      	str	r2, [r7, #0]
 801f558:	6819      	ldr	r1, [r3, #0]
 801f55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f55c:	1c5a      	adds	r2, r3, #1
 801f55e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f560:	b2ca      	uxtb	r2, r1
 801f562:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801f564:	e08d      	b.n	801f682 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801f566:	683b      	ldr	r3, [r7, #0]
 801f568:	1d1a      	adds	r2, r3, #4
 801f56a:	603a      	str	r2, [r7, #0]
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f572:	2b00      	cmp	r3, #0
 801f574:	d101      	bne.n	801f57a <tiny_vsnprintf_like+0x162>
 801f576:	4b50      	ldr	r3, [pc, #320]	; (801f6b8 <tiny_vsnprintf_like+0x2a0>)
 801f578:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801f57a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f57c:	f7e0 fe00 	bl	8000180 <strlen>
 801f580:	4603      	mov	r3, r0
 801f582:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801f584:	e004      	b.n	801f590 <tiny_vsnprintf_like+0x178>
 801f586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f588:	1c5a      	adds	r2, r3, #1
 801f58a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f58c:	2220      	movs	r2, #32
 801f58e:	701a      	strb	r2, [r3, #0]
 801f590:	69fb      	ldr	r3, [r7, #28]
 801f592:	1e5a      	subs	r2, r3, #1
 801f594:	61fa      	str	r2, [r7, #28]
 801f596:	693a      	ldr	r2, [r7, #16]
 801f598:	429a      	cmp	r2, r3
 801f59a:	dbf4      	blt.n	801f586 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801f59c:	2300      	movs	r3, #0
 801f59e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f5a0:	e00a      	b.n	801f5b8 <tiny_vsnprintf_like+0x1a0>
 801f5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f5a4:	1c53      	adds	r3, r2, #1
 801f5a6:	627b      	str	r3, [r7, #36]	; 0x24
 801f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5aa:	1c59      	adds	r1, r3, #1
 801f5ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f5ae:	7812      	ldrb	r2, [r2, #0]
 801f5b0:	701a      	strb	r2, [r3, #0]
 801f5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5b4:	3301      	adds	r3, #1
 801f5b6:	62bb      	str	r3, [r7, #40]	; 0x28
 801f5b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f5ba:	693b      	ldr	r3, [r7, #16]
 801f5bc:	429a      	cmp	r2, r3
 801f5be:	dbf0      	blt.n	801f5a2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801f5c0:	e05f      	b.n	801f682 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801f5c2:	6a3b      	ldr	r3, [r7, #32]
 801f5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5c8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801f5ca:	2310      	movs	r3, #16
 801f5cc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801f5ce:	e02b      	b.n	801f628 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801f5d0:	6a3b      	ldr	r3, [r7, #32]
 801f5d2:	f043 0302 	orr.w	r3, r3, #2
 801f5d6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801f5d8:	e025      	b.n	801f626 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	781b      	ldrb	r3, [r3, #0]
 801f5de:	2b25      	cmp	r3, #37	; 0x25
 801f5e0:	d004      	beq.n	801f5ec <tiny_vsnprintf_like+0x1d4>
 801f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5e4:	1c5a      	adds	r2, r3, #1
 801f5e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f5e8:	2225      	movs	r2, #37	; 0x25
 801f5ea:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801f5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5ee:	68fb      	ldr	r3, [r7, #12]
 801f5f0:	1ad2      	subs	r2, r2, r3
 801f5f2:	68bb      	ldr	r3, [r7, #8]
 801f5f4:	3b01      	subs	r3, #1
 801f5f6:	429a      	cmp	r2, r3
 801f5f8:	da16      	bge.n	801f628 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	781b      	ldrb	r3, [r3, #0]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d006      	beq.n	801f610 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801f602:	687a      	ldr	r2, [r7, #4]
 801f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f606:	1c59      	adds	r1, r3, #1
 801f608:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f60a:	7812      	ldrb	r2, [r2, #0]
 801f60c:	701a      	strb	r2, [r3, #0]
 801f60e:	e002      	b.n	801f616 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	3b01      	subs	r3, #1
 801f614:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801f616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f618:	68fb      	ldr	r3, [r7, #12]
 801f61a:	1ad2      	subs	r2, r2, r3
 801f61c:	68bb      	ldr	r3, [r7, #8]
 801f61e:	3b01      	subs	r3, #1
 801f620:	429a      	cmp	r2, r3
 801f622:	db2d      	blt.n	801f680 <tiny_vsnprintf_like+0x268>
 801f624:	e000      	b.n	801f628 <tiny_vsnprintf_like+0x210>
        break;
 801f626:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801f628:	697b      	ldr	r3, [r7, #20]
 801f62a:	2b6c      	cmp	r3, #108	; 0x6c
 801f62c:	d105      	bne.n	801f63a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801f62e:	683b      	ldr	r3, [r7, #0]
 801f630:	1d1a      	adds	r2, r3, #4
 801f632:	603a      	str	r2, [r7, #0]
 801f634:	681b      	ldr	r3, [r3, #0]
 801f636:	637b      	str	r3, [r7, #52]	; 0x34
 801f638:	e00f      	b.n	801f65a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801f63a:	6a3b      	ldr	r3, [r7, #32]
 801f63c:	f003 0302 	and.w	r3, r3, #2
 801f640:	2b00      	cmp	r3, #0
 801f642:	d005      	beq.n	801f650 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801f644:	683b      	ldr	r3, [r7, #0]
 801f646:	1d1a      	adds	r2, r3, #4
 801f648:	603a      	str	r2, [r7, #0]
 801f64a:	681b      	ldr	r3, [r3, #0]
 801f64c:	637b      	str	r3, [r7, #52]	; 0x34
 801f64e:	e004      	b.n	801f65a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801f650:	683b      	ldr	r3, [r7, #0]
 801f652:	1d1a      	adds	r2, r3, #4
 801f654:	603a      	str	r2, [r7, #0]
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801f65a:	68bb      	ldr	r3, [r7, #8]
 801f65c:	1e5a      	subs	r2, r3, #1
 801f65e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f660:	68fb      	ldr	r3, [r7, #12]
 801f662:	1acb      	subs	r3, r1, r3
 801f664:	1ad1      	subs	r1, r2, r3
 801f666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f668:	6a3b      	ldr	r3, [r7, #32]
 801f66a:	9302      	str	r3, [sp, #8]
 801f66c:	69bb      	ldr	r3, [r7, #24]
 801f66e:	9301      	str	r3, [sp, #4]
 801f670:	69fb      	ldr	r3, [r7, #28]
 801f672:	9300      	str	r3, [sp, #0]
 801f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f678:	f7ff fde0 	bl	801f23c <ee_number>
 801f67c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f67e:	e000      	b.n	801f682 <tiny_vsnprintf_like+0x26a>
        continue;
 801f680:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	3301      	adds	r3, #1
 801f686:	607b      	str	r3, [r7, #4]
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	781b      	ldrb	r3, [r3, #0]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	f47f aed2 	bne.w	801f436 <tiny_vsnprintf_like+0x1e>
 801f692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	1ad2      	subs	r2, r2, r3
 801f698:	68bb      	ldr	r3, [r7, #8]
 801f69a:	3b01      	subs	r3, #1
 801f69c:	429a      	cmp	r2, r3
 801f69e:	f6bf aeca 	bge.w	801f436 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801f6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6a4:	2200      	movs	r2, #0
 801f6a6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801f6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f6aa:	68fb      	ldr	r3, [r7, #12]
 801f6ac:	1ad3      	subs	r3, r2, r3
}
 801f6ae:	4618      	mov	r0, r3
 801f6b0:	3738      	adds	r7, #56	; 0x38
 801f6b2:	46bd      	mov	sp, r7
 801f6b4:	bd80      	pop	{r7, pc}
 801f6b6:	bf00      	nop
 801f6b8:	080218a4 	.word	0x080218a4

0801f6bc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801f6bc:	b580      	push	{r7, lr}
 801f6be:	b090      	sub	sp, #64	; 0x40
 801f6c0:	af00      	add	r7, sp, #0
 801f6c2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801f6c4:	4b73      	ldr	r3, [pc, #460]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801f6ca:	4b72      	ldr	r3, [pc, #456]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f6cc:	681a      	ldr	r2, [r3, #0]
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	4013      	ands	r3, r2
 801f6d2:	4a70      	ldr	r2, [pc, #448]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f6d4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801f6d6:	4b70      	ldr	r3, [pc, #448]	; (801f898 <UTIL_SEQ_Run+0x1dc>)
 801f6d8:	681b      	ldr	r3, [r3, #0]
 801f6da:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801f6dc:	4b6f      	ldr	r3, [pc, #444]	; (801f89c <UTIL_SEQ_Run+0x1e0>)
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801f6e2:	4b6f      	ldr	r3, [pc, #444]	; (801f8a0 <UTIL_SEQ_Run+0x1e4>)
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801f6e8:	4b6e      	ldr	r3, [pc, #440]	; (801f8a4 <UTIL_SEQ_Run+0x1e8>)
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801f6ee:	e08d      	b.n	801f80c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801f6f4:	e002      	b.n	801f6fc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801f6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6f8:	3301      	adds	r3, #1
 801f6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801f6fc:	4a6a      	ldr	r2, [pc, #424]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f700:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f706:	401a      	ands	r2, r3
 801f708:	4b62      	ldr	r3, [pc, #392]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	4013      	ands	r3, r2
 801f70e:	2b00      	cmp	r3, #0
 801f710:	d0f1      	beq.n	801f6f6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801f712:	4a65      	ldr	r2, [pc, #404]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f716:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f71c:	401a      	ands	r2, r3
 801f71e:	4b5d      	ldr	r3, [pc, #372]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	4013      	ands	r3, r2
 801f724:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801f726:	4a60      	ldr	r2, [pc, #384]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f72a:	00db      	lsls	r3, r3, #3
 801f72c:	4413      	add	r3, r2
 801f72e:	685a      	ldr	r2, [r3, #4]
 801f730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f732:	4013      	ands	r3, r2
 801f734:	2b00      	cmp	r3, #0
 801f736:	d106      	bne.n	801f746 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801f738:	4a5b      	ldr	r2, [pc, #364]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f73c:	00db      	lsls	r3, r3, #3
 801f73e:	4413      	add	r3, r2
 801f740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f744:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801f746:	4a58      	ldr	r2, [pc, #352]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f74a:	00db      	lsls	r3, r3, #3
 801f74c:	4413      	add	r3, r2
 801f74e:	685a      	ldr	r2, [r3, #4]
 801f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f752:	4013      	ands	r3, r2
 801f754:	4618      	mov	r0, r3
 801f756:	f000 f927 	bl	801f9a8 <SEQ_BitPosition>
 801f75a:	4603      	mov	r3, r0
 801f75c:	461a      	mov	r2, r3
 801f75e:	4b53      	ldr	r3, [pc, #332]	; (801f8ac <UTIL_SEQ_Run+0x1f0>)
 801f760:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801f762:	4a51      	ldr	r2, [pc, #324]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f766:	00db      	lsls	r3, r3, #3
 801f768:	4413      	add	r3, r2
 801f76a:	685a      	ldr	r2, [r3, #4]
 801f76c:	4b4f      	ldr	r3, [pc, #316]	; (801f8ac <UTIL_SEQ_Run+0x1f0>)
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	2101      	movs	r1, #1
 801f772:	fa01 f303 	lsl.w	r3, r1, r3
 801f776:	43db      	mvns	r3, r3
 801f778:	401a      	ands	r2, r3
 801f77a:	494b      	ldr	r1, [pc, #300]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f77e:	00db      	lsls	r3, r3, #3
 801f780:	440b      	add	r3, r1
 801f782:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f784:	f3ef 8310 	mrs	r3, PRIMASK
 801f788:	61bb      	str	r3, [r7, #24]
  return(result);
 801f78a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f78c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801f78e:	b672      	cpsid	i
}
 801f790:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801f792:	4b46      	ldr	r3, [pc, #280]	; (801f8ac <UTIL_SEQ_Run+0x1f0>)
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	2201      	movs	r2, #1
 801f798:	fa02 f303 	lsl.w	r3, r2, r3
 801f79c:	43da      	mvns	r2, r3
 801f79e:	4b3e      	ldr	r3, [pc, #248]	; (801f898 <UTIL_SEQ_Run+0x1dc>)
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	4013      	ands	r3, r2
 801f7a4:	4a3c      	ldr	r2, [pc, #240]	; (801f898 <UTIL_SEQ_Run+0x1dc>)
 801f7a6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801f7a8:	2301      	movs	r3, #1
 801f7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f7ac:	e013      	b.n	801f7d6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801f7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7b0:	3b01      	subs	r3, #1
 801f7b2:	4a3d      	ldr	r2, [pc, #244]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f7b4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801f7b8:	4b3c      	ldr	r3, [pc, #240]	; (801f8ac <UTIL_SEQ_Run+0x1f0>)
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	2201      	movs	r2, #1
 801f7be:	fa02 f303 	lsl.w	r3, r2, r3
 801f7c2:	43da      	mvns	r2, r3
 801f7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7c6:	3b01      	subs	r3, #1
 801f7c8:	400a      	ands	r2, r1
 801f7ca:	4937      	ldr	r1, [pc, #220]	; (801f8a8 <UTIL_SEQ_Run+0x1ec>)
 801f7cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801f7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7d2:	3b01      	subs	r3, #1
 801f7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	d1e8      	bne.n	801f7ae <UTIL_SEQ_Run+0xf2>
 801f7dc:	6a3b      	ldr	r3, [r7, #32]
 801f7de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f7e0:	697b      	ldr	r3, [r7, #20]
 801f7e2:	f383 8810 	msr	PRIMASK, r3
}
 801f7e6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801f7e8:	4b30      	ldr	r3, [pc, #192]	; (801f8ac <UTIL_SEQ_Run+0x1f0>)
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	4a30      	ldr	r2, [pc, #192]	; (801f8b0 <UTIL_SEQ_Run+0x1f4>)
 801f7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f7f2:	4798      	blx	r3

    local_taskset = TaskSet;
 801f7f4:	4b28      	ldr	r3, [pc, #160]	; (801f898 <UTIL_SEQ_Run+0x1dc>)
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801f7fa:	4b28      	ldr	r3, [pc, #160]	; (801f89c <UTIL_SEQ_Run+0x1e0>)
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801f800:	4b27      	ldr	r3, [pc, #156]	; (801f8a0 <UTIL_SEQ_Run+0x1e4>)
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801f806:	4b27      	ldr	r3, [pc, #156]	; (801f8a4 <UTIL_SEQ_Run+0x1e8>)
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801f80c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f810:	401a      	ands	r2, r3
 801f812:	4b20      	ldr	r3, [pc, #128]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	4013      	ands	r3, r2
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d005      	beq.n	801f828 <UTIL_SEQ_Run+0x16c>
 801f81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f820:	4013      	ands	r3, r2
 801f822:	2b00      	cmp	r3, #0
 801f824:	f43f af64 	beq.w	801f6f0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801f828:	4b20      	ldr	r3, [pc, #128]	; (801f8ac <UTIL_SEQ_Run+0x1f0>)
 801f82a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f82e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801f830:	f000 f8ae 	bl	801f990 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f834:	f3ef 8310 	mrs	r3, PRIMASK
 801f838:	613b      	str	r3, [r7, #16]
  return(result);
 801f83a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801f83c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f83e:	b672      	cpsid	i
}
 801f840:	bf00      	nop
  local_taskset = TaskSet;
 801f842:	4b15      	ldr	r3, [pc, #84]	; (801f898 <UTIL_SEQ_Run+0x1dc>)
 801f844:	681b      	ldr	r3, [r3, #0]
 801f846:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801f848:	4b14      	ldr	r3, [pc, #80]	; (801f89c <UTIL_SEQ_Run+0x1e0>)
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801f84e:	4b14      	ldr	r3, [pc, #80]	; (801f8a0 <UTIL_SEQ_Run+0x1e4>)
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801f854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f858:	401a      	ands	r2, r3
 801f85a:	4b0e      	ldr	r3, [pc, #56]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	4013      	ands	r3, r2
 801f860:	2b00      	cmp	r3, #0
 801f862:	d107      	bne.n	801f874 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801f864:	4b0f      	ldr	r3, [pc, #60]	; (801f8a4 <UTIL_SEQ_Run+0x1e8>)
 801f866:	681a      	ldr	r2, [r3, #0]
 801f868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f86a:	4013      	ands	r3, r2
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	d101      	bne.n	801f874 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801f870:	f7e2 fec8 	bl	8002604 <UTIL_SEQ_Idle>
 801f874:	69fb      	ldr	r3, [r7, #28]
 801f876:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	f383 8810 	msr	PRIMASK, r3
}
 801f87e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801f880:	f000 f88c 	bl	801f99c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801f884:	4a03      	ldr	r2, [pc, #12]	; (801f894 <UTIL_SEQ_Run+0x1d8>)
 801f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f888:	6013      	str	r3, [r2, #0]

  return;
 801f88a:	bf00      	nop
}
 801f88c:	3740      	adds	r7, #64	; 0x40
 801f88e:	46bd      	mov	sp, r7
 801f890:	bd80      	pop	{r7, pc}
 801f892:	bf00      	nop
 801f894:	20000144 	.word	0x20000144
 801f898:	20001e40 	.word	0x20001e40
 801f89c:	20001e44 	.word	0x20001e44
 801f8a0:	20000140 	.word	0x20000140
 801f8a4:	20001e48 	.word	0x20001e48
 801f8a8:	20001e60 	.word	0x20001e60
 801f8ac:	20001e4c 	.word	0x20001e4c
 801f8b0:	20001e50 	.word	0x20001e50

0801f8b4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f8b4:	b580      	push	{r7, lr}
 801f8b6:	b088      	sub	sp, #32
 801f8b8:	af00      	add	r7, sp, #0
 801f8ba:	60f8      	str	r0, [r7, #12]
 801f8bc:	60b9      	str	r1, [r7, #8]
 801f8be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f8c0:	f3ef 8310 	mrs	r3, PRIMASK
 801f8c4:	617b      	str	r3, [r7, #20]
  return(result);
 801f8c6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f8c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f8ca:	b672      	cpsid	i
}
 801f8cc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f8ce:	68f8      	ldr	r0, [r7, #12]
 801f8d0:	f000 f86a 	bl	801f9a8 <SEQ_BitPosition>
 801f8d4:	4603      	mov	r3, r0
 801f8d6:	4619      	mov	r1, r3
 801f8d8:	4a06      	ldr	r2, [pc, #24]	; (801f8f4 <UTIL_SEQ_RegTask+0x40>)
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f8e0:	69fb      	ldr	r3, [r7, #28]
 801f8e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f8e4:	69bb      	ldr	r3, [r7, #24]
 801f8e6:	f383 8810 	msr	PRIMASK, r3
}
 801f8ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f8ec:	bf00      	nop
}
 801f8ee:	3720      	adds	r7, #32
 801f8f0:	46bd      	mov	sp, r7
 801f8f2:	bd80      	pop	{r7, pc}
 801f8f4:	20001e50 	.word	0x20001e50

0801f8f8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f8f8:	b480      	push	{r7}
 801f8fa:	b087      	sub	sp, #28
 801f8fc:	af00      	add	r7, sp, #0
 801f8fe:	6078      	str	r0, [r7, #4]
 801f900:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f902:	f3ef 8310 	mrs	r3, PRIMASK
 801f906:	60fb      	str	r3, [r7, #12]
  return(result);
 801f908:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f90a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f90c:	b672      	cpsid	i
}
 801f90e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f910:	4b0d      	ldr	r3, [pc, #52]	; (801f948 <UTIL_SEQ_SetTask+0x50>)
 801f912:	681a      	ldr	r2, [r3, #0]
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	4313      	orrs	r3, r2
 801f918:	4a0b      	ldr	r2, [pc, #44]	; (801f948 <UTIL_SEQ_SetTask+0x50>)
 801f91a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f91c:	4a0b      	ldr	r2, [pc, #44]	; (801f94c <UTIL_SEQ_SetTask+0x54>)
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	431a      	orrs	r2, r3
 801f928:	4908      	ldr	r1, [pc, #32]	; (801f94c <UTIL_SEQ_SetTask+0x54>)
 801f92a:	683b      	ldr	r3, [r7, #0]
 801f92c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f930:	697b      	ldr	r3, [r7, #20]
 801f932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f934:	693b      	ldr	r3, [r7, #16]
 801f936:	f383 8810 	msr	PRIMASK, r3
}
 801f93a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f93c:	bf00      	nop
}
 801f93e:	371c      	adds	r7, #28
 801f940:	46bd      	mov	sp, r7
 801f942:	bc80      	pop	{r7}
 801f944:	4770      	bx	lr
 801f946:	bf00      	nop
 801f948:	20001e40 	.word	0x20001e40
 801f94c:	20001e60 	.word	0x20001e60

0801f950 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801f950:	b480      	push	{r7}
 801f952:	b087      	sub	sp, #28
 801f954:	af00      	add	r7, sp, #0
 801f956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f958:	f3ef 8310 	mrs	r3, PRIMASK
 801f95c:	60fb      	str	r3, [r7, #12]
  return(result);
 801f95e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f960:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f962:	b672      	cpsid	i
}
 801f964:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	43da      	mvns	r2, r3
 801f96a:	4b08      	ldr	r3, [pc, #32]	; (801f98c <UTIL_SEQ_PauseTask+0x3c>)
 801f96c:	681b      	ldr	r3, [r3, #0]
 801f96e:	4013      	ands	r3, r2
 801f970:	4a06      	ldr	r2, [pc, #24]	; (801f98c <UTIL_SEQ_PauseTask+0x3c>)
 801f972:	6013      	str	r3, [r2, #0]
 801f974:	697b      	ldr	r3, [r7, #20]
 801f976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f978:	693b      	ldr	r3, [r7, #16]
 801f97a:	f383 8810 	msr	PRIMASK, r3
}
 801f97e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f980:	bf00      	nop
}
 801f982:	371c      	adds	r7, #28
 801f984:	46bd      	mov	sp, r7
 801f986:	bc80      	pop	{r7}
 801f988:	4770      	bx	lr
 801f98a:	bf00      	nop
 801f98c:	20000140 	.word	0x20000140

0801f990 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801f990:	b480      	push	{r7}
 801f992:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f994:	bf00      	nop
}
 801f996:	46bd      	mov	sp, r7
 801f998:	bc80      	pop	{r7}
 801f99a:	4770      	bx	lr

0801f99c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801f99c:	b480      	push	{r7}
 801f99e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f9a0:	bf00      	nop
}
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	bc80      	pop	{r7}
 801f9a6:	4770      	bx	lr

0801f9a8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f9a8:	b480      	push	{r7}
 801f9aa:	b085      	sub	sp, #20
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801f9b0:	2300      	movs	r3, #0
 801f9b2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801f9b4:	687b      	ldr	r3, [r7, #4]
 801f9b6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801f9b8:	68bb      	ldr	r3, [r7, #8]
 801f9ba:	0c1b      	lsrs	r3, r3, #16
 801f9bc:	041b      	lsls	r3, r3, #16
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d104      	bne.n	801f9cc <SEQ_BitPosition+0x24>
 801f9c2:	2310      	movs	r3, #16
 801f9c4:	73fb      	strb	r3, [r7, #15]
 801f9c6:	68bb      	ldr	r3, [r7, #8]
 801f9c8:	041b      	lsls	r3, r3, #16
 801f9ca:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801f9cc:	68bb      	ldr	r3, [r7, #8]
 801f9ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	d105      	bne.n	801f9e2 <SEQ_BitPosition+0x3a>
 801f9d6:	7bfb      	ldrb	r3, [r7, #15]
 801f9d8:	3308      	adds	r3, #8
 801f9da:	73fb      	strb	r3, [r7, #15]
 801f9dc:	68bb      	ldr	r3, [r7, #8]
 801f9de:	021b      	lsls	r3, r3, #8
 801f9e0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801f9e2:	68bb      	ldr	r3, [r7, #8]
 801f9e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	d105      	bne.n	801f9f8 <SEQ_BitPosition+0x50>
 801f9ec:	7bfb      	ldrb	r3, [r7, #15]
 801f9ee:	3304      	adds	r3, #4
 801f9f0:	73fb      	strb	r3, [r7, #15]
 801f9f2:	68bb      	ldr	r3, [r7, #8]
 801f9f4:	011b      	lsls	r3, r3, #4
 801f9f6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801f9f8:	68bb      	ldr	r3, [r7, #8]
 801f9fa:	0f1b      	lsrs	r3, r3, #28
 801f9fc:	4a06      	ldr	r2, [pc, #24]	; (801fa18 <SEQ_BitPosition+0x70>)
 801f9fe:	5cd2      	ldrb	r2, [r2, r3]
 801fa00:	7bfb      	ldrb	r3, [r7, #15]
 801fa02:	4413      	add	r3, r2
 801fa04:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801fa06:	7bfb      	ldrb	r3, [r7, #15]
 801fa08:	f1c3 031f 	rsb	r3, r3, #31
 801fa0c:	b2db      	uxtb	r3, r3
}
 801fa0e:	4618      	mov	r0, r3
 801fa10:	3714      	adds	r7, #20
 801fa12:	46bd      	mov	sp, r7
 801fa14:	bc80      	pop	{r7}
 801fa16:	4770      	bx	lr
 801fa18:	08021f34 	.word	0x08021f34

0801fa1c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801fa1c:	b580      	push	{r7, lr}
 801fa1e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801fa20:	4b04      	ldr	r3, [pc, #16]	; (801fa34 <UTIL_TIMER_Init+0x18>)
 801fa22:	2200      	movs	r2, #0
 801fa24:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801fa26:	4b04      	ldr	r3, [pc, #16]	; (801fa38 <UTIL_TIMER_Init+0x1c>)
 801fa28:	681b      	ldr	r3, [r3, #0]
 801fa2a:	4798      	blx	r3
 801fa2c:	4603      	mov	r3, r0
}
 801fa2e:	4618      	mov	r0, r3
 801fa30:	bd80      	pop	{r7, pc}
 801fa32:	bf00      	nop
 801fa34:	20001e68 	.word	0x20001e68
 801fa38:	08021964 	.word	0x08021964

0801fa3c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801fa3c:	b580      	push	{r7, lr}
 801fa3e:	b084      	sub	sp, #16
 801fa40:	af00      	add	r7, sp, #0
 801fa42:	60f8      	str	r0, [r7, #12]
 801fa44:	60b9      	str	r1, [r7, #8]
 801fa46:	603b      	str	r3, [r7, #0]
 801fa48:	4613      	mov	r3, r2
 801fa4a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801fa4c:	68fb      	ldr	r3, [r7, #12]
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d023      	beq.n	801fa9a <UTIL_TIMER_Create+0x5e>
 801fa52:	683b      	ldr	r3, [r7, #0]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d020      	beq.n	801fa9a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801fa58:	68fb      	ldr	r3, [r7, #12]
 801fa5a:	2200      	movs	r2, #0
 801fa5c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801fa5e:	4b11      	ldr	r3, [pc, #68]	; (801faa4 <UTIL_TIMER_Create+0x68>)
 801fa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa62:	68b8      	ldr	r0, [r7, #8]
 801fa64:	4798      	blx	r3
 801fa66:	4602      	mov	r2, r0
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801fa6c:	68fb      	ldr	r3, [r7, #12]
 801fa6e:	2200      	movs	r2, #0
 801fa70:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801fa72:	68fb      	ldr	r3, [r7, #12]
 801fa74:	2200      	movs	r2, #0
 801fa76:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	2200      	movs	r2, #0
 801fa7c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	683a      	ldr	r2, [r7, #0]
 801fa82:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801fa84:	68fb      	ldr	r3, [r7, #12]
 801fa86:	69ba      	ldr	r2, [r7, #24]
 801fa88:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801fa8a:	68fb      	ldr	r3, [r7, #12]
 801fa8c:	79fa      	ldrb	r2, [r7, #7]
 801fa8e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801fa90:	68fb      	ldr	r3, [r7, #12]
 801fa92:	2200      	movs	r2, #0
 801fa94:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801fa96:	2300      	movs	r3, #0
 801fa98:	e000      	b.n	801fa9c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801fa9a:	2301      	movs	r3, #1
  }
}
 801fa9c:	4618      	mov	r0, r3
 801fa9e:	3710      	adds	r7, #16
 801faa0:	46bd      	mov	sp, r7
 801faa2:	bd80      	pop	{r7, pc}
 801faa4:	08021964 	.word	0x08021964

0801faa8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801faa8:	b580      	push	{r7, lr}
 801faaa:	b08a      	sub	sp, #40	; 0x28
 801faac:	af00      	add	r7, sp, #0
 801faae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fab0:	2300      	movs	r3, #0
 801fab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	2b00      	cmp	r3, #0
 801faba:	d056      	beq.n	801fb6a <UTIL_TIMER_Start+0xc2>
 801fabc:	6878      	ldr	r0, [r7, #4]
 801fabe:	f000 f9a9 	bl	801fe14 <TimerExists>
 801fac2:	4603      	mov	r3, r0
 801fac4:	f083 0301 	eor.w	r3, r3, #1
 801fac8:	b2db      	uxtb	r3, r3
 801faca:	2b00      	cmp	r3, #0
 801facc:	d04d      	beq.n	801fb6a <UTIL_TIMER_Start+0xc2>
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	7a5b      	ldrb	r3, [r3, #9]
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d149      	bne.n	801fb6a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fad6:	f3ef 8310 	mrs	r3, PRIMASK
 801fada:	613b      	str	r3, [r7, #16]
  return(result);
 801fadc:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801fae0:	b672      	cpsid	i
}
 801fae2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	685b      	ldr	r3, [r3, #4]
 801fae8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801faea:	4b24      	ldr	r3, [pc, #144]	; (801fb7c <UTIL_TIMER_Start+0xd4>)
 801faec:	6a1b      	ldr	r3, [r3, #32]
 801faee:	4798      	blx	r3
 801faf0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801faf2:	6a3a      	ldr	r2, [r7, #32]
 801faf4:	69bb      	ldr	r3, [r7, #24]
 801faf6:	429a      	cmp	r2, r3
 801faf8:	d201      	bcs.n	801fafe <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801fafa:	69bb      	ldr	r3, [r7, #24]
 801fafc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	6a3a      	ldr	r2, [r7, #32]
 801fb02:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	2200      	movs	r2, #0
 801fb08:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	2201      	movs	r2, #1
 801fb0e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801fb10:	687b      	ldr	r3, [r7, #4]
 801fb12:	2200      	movs	r2, #0
 801fb14:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801fb16:	4b1a      	ldr	r3, [pc, #104]	; (801fb80 <UTIL_TIMER_Start+0xd8>)
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d106      	bne.n	801fb2c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801fb1e:	4b17      	ldr	r3, [pc, #92]	; (801fb7c <UTIL_TIMER_Start+0xd4>)
 801fb20:	691b      	ldr	r3, [r3, #16]
 801fb22:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801fb24:	6878      	ldr	r0, [r7, #4]
 801fb26:	f000 f9eb 	bl	801ff00 <TimerInsertNewHeadTimer>
 801fb2a:	e017      	b.n	801fb5c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801fb2c:	4b13      	ldr	r3, [pc, #76]	; (801fb7c <UTIL_TIMER_Start+0xd4>)
 801fb2e:	699b      	ldr	r3, [r3, #24]
 801fb30:	4798      	blx	r3
 801fb32:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	681a      	ldr	r2, [r3, #0]
 801fb38:	697b      	ldr	r3, [r7, #20]
 801fb3a:	441a      	add	r2, r3
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	681a      	ldr	r2, [r3, #0]
 801fb44:	4b0e      	ldr	r3, [pc, #56]	; (801fb80 <UTIL_TIMER_Start+0xd8>)
 801fb46:	681b      	ldr	r3, [r3, #0]
 801fb48:	681b      	ldr	r3, [r3, #0]
 801fb4a:	429a      	cmp	r2, r3
 801fb4c:	d203      	bcs.n	801fb56 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801fb4e:	6878      	ldr	r0, [r7, #4]
 801fb50:	f000 f9d6 	bl	801ff00 <TimerInsertNewHeadTimer>
 801fb54:	e002      	b.n	801fb5c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801fb56:	6878      	ldr	r0, [r7, #4]
 801fb58:	f000 f9a2 	bl	801fea0 <TimerInsertTimer>
 801fb5c:	69fb      	ldr	r3, [r7, #28]
 801fb5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	f383 8810 	msr	PRIMASK, r3
}
 801fb66:	bf00      	nop
  {
 801fb68:	e002      	b.n	801fb70 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801fb6a:	2301      	movs	r3, #1
 801fb6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801fb70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801fb74:	4618      	mov	r0, r3
 801fb76:	3728      	adds	r7, #40	; 0x28
 801fb78:	46bd      	mov	sp, r7
 801fb7a:	bd80      	pop	{r7, pc}
 801fb7c:	08021964 	.word	0x08021964
 801fb80:	20001e68 	.word	0x20001e68

0801fb84 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801fb84:	b580      	push	{r7, lr}
 801fb86:	b088      	sub	sp, #32
 801fb88:	af00      	add	r7, sp, #0
 801fb8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fb8c:	2300      	movs	r3, #0
 801fb8e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d05b      	beq.n	801fc4e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fb96:	f3ef 8310 	mrs	r3, PRIMASK
 801fb9a:	60fb      	str	r3, [r7, #12]
  return(result);
 801fb9c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fb9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801fba0:	b672      	cpsid	i
}
 801fba2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801fba4:	4b2d      	ldr	r3, [pc, #180]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801fbaa:	4b2c      	ldr	r3, [pc, #176]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	2201      	movs	r2, #1
 801fbb4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801fbb6:	4b29      	ldr	r3, [pc, #164]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbb8:	681b      	ldr	r3, [r3, #0]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d041      	beq.n	801fc42 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	2200      	movs	r2, #0
 801fbc2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801fbc4:	4b25      	ldr	r3, [pc, #148]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbc6:	681b      	ldr	r3, [r3, #0]
 801fbc8:	687a      	ldr	r2, [r7, #4]
 801fbca:	429a      	cmp	r2, r3
 801fbcc:	d134      	bne.n	801fc38 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801fbce:	4b23      	ldr	r3, [pc, #140]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbd0:	681b      	ldr	r3, [r3, #0]
 801fbd2:	2200      	movs	r2, #0
 801fbd4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801fbd6:	4b21      	ldr	r3, [pc, #132]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbd8:	681b      	ldr	r3, [r3, #0]
 801fbda:	695b      	ldr	r3, [r3, #20]
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	d00a      	beq.n	801fbf6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801fbe0:	4b1e      	ldr	r3, [pc, #120]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	695b      	ldr	r3, [r3, #20]
 801fbe6:	4a1d      	ldr	r2, [pc, #116]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbe8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801fbea:	4b1c      	ldr	r3, [pc, #112]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbec:	681b      	ldr	r3, [r3, #0]
 801fbee:	4618      	mov	r0, r3
 801fbf0:	f000 f92c 	bl	801fe4c <TimerSetTimeout>
 801fbf4:	e023      	b.n	801fc3e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801fbf6:	4b1a      	ldr	r3, [pc, #104]	; (801fc60 <UTIL_TIMER_Stop+0xdc>)
 801fbf8:	68db      	ldr	r3, [r3, #12]
 801fbfa:	4798      	blx	r3
            TimerListHead = NULL;
 801fbfc:	4b17      	ldr	r3, [pc, #92]	; (801fc5c <UTIL_TIMER_Stop+0xd8>)
 801fbfe:	2200      	movs	r2, #0
 801fc00:	601a      	str	r2, [r3, #0]
 801fc02:	e01c      	b.n	801fc3e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801fc04:	697a      	ldr	r2, [r7, #20]
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	429a      	cmp	r2, r3
 801fc0a:	d110      	bne.n	801fc2e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801fc0c:	697b      	ldr	r3, [r7, #20]
 801fc0e:	695b      	ldr	r3, [r3, #20]
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	d006      	beq.n	801fc22 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801fc14:	697b      	ldr	r3, [r7, #20]
 801fc16:	695b      	ldr	r3, [r3, #20]
 801fc18:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fc1a:	69bb      	ldr	r3, [r7, #24]
 801fc1c:	697a      	ldr	r2, [r7, #20]
 801fc1e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801fc20:	e00d      	b.n	801fc3e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801fc22:	2300      	movs	r3, #0
 801fc24:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fc26:	69bb      	ldr	r3, [r7, #24]
 801fc28:	697a      	ldr	r2, [r7, #20]
 801fc2a:	615a      	str	r2, [r3, #20]
            break;
 801fc2c:	e007      	b.n	801fc3e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801fc2e:	697b      	ldr	r3, [r7, #20]
 801fc30:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801fc32:	697b      	ldr	r3, [r7, #20]
 801fc34:	695b      	ldr	r3, [r3, #20]
 801fc36:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801fc38:	697b      	ldr	r3, [r7, #20]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d1e2      	bne.n	801fc04 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801fc3e:	2300      	movs	r3, #0
 801fc40:	77fb      	strb	r3, [r7, #31]
 801fc42:	693b      	ldr	r3, [r7, #16]
 801fc44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc46:	68bb      	ldr	r3, [r7, #8]
 801fc48:	f383 8810 	msr	PRIMASK, r3
}
 801fc4c:	e001      	b.n	801fc52 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801fc4e:	2301      	movs	r3, #1
 801fc50:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801fc52:	7ffb      	ldrb	r3, [r7, #31]
}
 801fc54:	4618      	mov	r0, r3
 801fc56:	3720      	adds	r7, #32
 801fc58:	46bd      	mov	sp, r7
 801fc5a:	bd80      	pop	{r7, pc}
 801fc5c:	20001e68 	.word	0x20001e68
 801fc60:	08021964 	.word	0x08021964

0801fc64 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801fc64:	b580      	push	{r7, lr}
 801fc66:	b084      	sub	sp, #16
 801fc68:	af00      	add	r7, sp, #0
 801fc6a:	6078      	str	r0, [r7, #4]
 801fc6c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fc6e:	2300      	movs	r3, #0
 801fc70:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d102      	bne.n	801fc7e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801fc78:	2301      	movs	r3, #1
 801fc7a:	73fb      	strb	r3, [r7, #15]
 801fc7c:	e014      	b.n	801fca8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801fc7e:	4b0d      	ldr	r3, [pc, #52]	; (801fcb4 <UTIL_TIMER_SetPeriod+0x50>)
 801fc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc82:	6838      	ldr	r0, [r7, #0]
 801fc84:	4798      	blx	r3
 801fc86:	4602      	mov	r2, r0
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801fc8c:	6878      	ldr	r0, [r7, #4]
 801fc8e:	f000 f8c1 	bl	801fe14 <TimerExists>
 801fc92:	4603      	mov	r3, r0
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d007      	beq.n	801fca8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801fc98:	6878      	ldr	r0, [r7, #4]
 801fc9a:	f7ff ff73 	bl	801fb84 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801fc9e:	6878      	ldr	r0, [r7, #4]
 801fca0:	f7ff ff02 	bl	801faa8 <UTIL_TIMER_Start>
 801fca4:	4603      	mov	r3, r0
 801fca6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801fca8:	7bfb      	ldrb	r3, [r7, #15]
}
 801fcaa:	4618      	mov	r0, r3
 801fcac:	3710      	adds	r7, #16
 801fcae:	46bd      	mov	sp, r7
 801fcb0:	bd80      	pop	{r7, pc}
 801fcb2:	bf00      	nop
 801fcb4:	08021964 	.word	0x08021964

0801fcb8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801fcb8:	b590      	push	{r4, r7, lr}
 801fcba:	b089      	sub	sp, #36	; 0x24
 801fcbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fcbe:	f3ef 8310 	mrs	r3, PRIMASK
 801fcc2:	60bb      	str	r3, [r7, #8]
  return(result);
 801fcc4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fcc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fcc8:	b672      	cpsid	i
}
 801fcca:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801fccc:	4b38      	ldr	r3, [pc, #224]	; (801fdb0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fcce:	695b      	ldr	r3, [r3, #20]
 801fcd0:	4798      	blx	r3
 801fcd2:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801fcd4:	4b36      	ldr	r3, [pc, #216]	; (801fdb0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fcd6:	691b      	ldr	r3, [r3, #16]
 801fcd8:	4798      	blx	r3
 801fcda:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801fcdc:	693a      	ldr	r2, [r7, #16]
 801fcde:	697b      	ldr	r3, [r7, #20]
 801fce0:	1ad3      	subs	r3, r2, r3
 801fce2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801fce4:	4b33      	ldr	r3, [pc, #204]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d037      	beq.n	801fd5c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801fcec:	4b31      	ldr	r3, [pc, #196]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fcee:	681b      	ldr	r3, [r3, #0]
 801fcf0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801fcf2:	69fb      	ldr	r3, [r7, #28]
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	68fa      	ldr	r2, [r7, #12]
 801fcf8:	429a      	cmp	r2, r3
 801fcfa:	d206      	bcs.n	801fd0a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801fcfc:	69fb      	ldr	r3, [r7, #28]
 801fcfe:	681a      	ldr	r2, [r3, #0]
 801fd00:	68fb      	ldr	r3, [r7, #12]
 801fd02:	1ad2      	subs	r2, r2, r3
 801fd04:	69fb      	ldr	r3, [r7, #28]
 801fd06:	601a      	str	r2, [r3, #0]
 801fd08:	e002      	b.n	801fd10 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801fd0a:	69fb      	ldr	r3, [r7, #28]
 801fd0c:	2200      	movs	r2, #0
 801fd0e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801fd10:	69fb      	ldr	r3, [r7, #28]
 801fd12:	695b      	ldr	r3, [r3, #20]
 801fd14:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801fd16:	69fb      	ldr	r3, [r7, #28]
 801fd18:	2b00      	cmp	r3, #0
 801fd1a:	d1ea      	bne.n	801fcf2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fd1c:	e01e      	b.n	801fd5c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801fd1e:	4b25      	ldr	r3, [pc, #148]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801fd24:	4b23      	ldr	r3, [pc, #140]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	695b      	ldr	r3, [r3, #20]
 801fd2a:	4a22      	ldr	r2, [pc, #136]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd2c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801fd2e:	69fb      	ldr	r3, [r7, #28]
 801fd30:	2200      	movs	r2, #0
 801fd32:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801fd34:	69fb      	ldr	r3, [r7, #28]
 801fd36:	2200      	movs	r2, #0
 801fd38:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801fd3a:	69fb      	ldr	r3, [r7, #28]
 801fd3c:	68db      	ldr	r3, [r3, #12]
 801fd3e:	69fa      	ldr	r2, [r7, #28]
 801fd40:	6912      	ldr	r2, [r2, #16]
 801fd42:	4610      	mov	r0, r2
 801fd44:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801fd46:	69fb      	ldr	r3, [r7, #28]
 801fd48:	7adb      	ldrb	r3, [r3, #11]
 801fd4a:	2b01      	cmp	r3, #1
 801fd4c:	d106      	bne.n	801fd5c <UTIL_TIMER_IRQ_Handler+0xa4>
 801fd4e:	69fb      	ldr	r3, [r7, #28]
 801fd50:	7a9b      	ldrb	r3, [r3, #10]
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	d102      	bne.n	801fd5c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801fd56:	69f8      	ldr	r0, [r7, #28]
 801fd58:	f7ff fea6 	bl	801faa8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fd5c:	4b15      	ldr	r3, [pc, #84]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d00d      	beq.n	801fd80 <UTIL_TIMER_IRQ_Handler+0xc8>
 801fd64:	4b13      	ldr	r3, [pc, #76]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	681b      	ldr	r3, [r3, #0]
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	d0d7      	beq.n	801fd1e <UTIL_TIMER_IRQ_Handler+0x66>
 801fd6e:	4b11      	ldr	r3, [pc, #68]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	681c      	ldr	r4, [r3, #0]
 801fd74:	4b0e      	ldr	r3, [pc, #56]	; (801fdb0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fd76:	699b      	ldr	r3, [r3, #24]
 801fd78:	4798      	blx	r3
 801fd7a:	4603      	mov	r3, r0
 801fd7c:	429c      	cmp	r4, r3
 801fd7e:	d3ce      	bcc.n	801fd1e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801fd80:	4b0c      	ldr	r3, [pc, #48]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d009      	beq.n	801fd9c <UTIL_TIMER_IRQ_Handler+0xe4>
 801fd88:	4b0a      	ldr	r3, [pc, #40]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	7a1b      	ldrb	r3, [r3, #8]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d104      	bne.n	801fd9c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801fd92:	4b08      	ldr	r3, [pc, #32]	; (801fdb4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	4618      	mov	r0, r3
 801fd98:	f000 f858 	bl	801fe4c <TimerSetTimeout>
 801fd9c:	69bb      	ldr	r3, [r7, #24]
 801fd9e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	f383 8810 	msr	PRIMASK, r3
}
 801fda6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801fda8:	bf00      	nop
 801fdaa:	3724      	adds	r7, #36	; 0x24
 801fdac:	46bd      	mov	sp, r7
 801fdae:	bd90      	pop	{r4, r7, pc}
 801fdb0:	08021964 	.word	0x08021964
 801fdb4:	20001e68 	.word	0x20001e68

0801fdb8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801fdb8:	b580      	push	{r7, lr}
 801fdba:	b082      	sub	sp, #8
 801fdbc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801fdbe:	4b06      	ldr	r3, [pc, #24]	; (801fdd8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fdc0:	69db      	ldr	r3, [r3, #28]
 801fdc2:	4798      	blx	r3
 801fdc4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801fdc6:	4b04      	ldr	r3, [pc, #16]	; (801fdd8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdca:	6878      	ldr	r0, [r7, #4]
 801fdcc:	4798      	blx	r3
 801fdce:	4603      	mov	r3, r0
}
 801fdd0:	4618      	mov	r0, r3
 801fdd2:	3708      	adds	r7, #8
 801fdd4:	46bd      	mov	sp, r7
 801fdd6:	bd80      	pop	{r7, pc}
 801fdd8:	08021964 	.word	0x08021964

0801fddc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801fddc:	b580      	push	{r7, lr}
 801fdde:	b084      	sub	sp, #16
 801fde0:	af00      	add	r7, sp, #0
 801fde2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801fde4:	4b0a      	ldr	r3, [pc, #40]	; (801fe10 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fde6:	69db      	ldr	r3, [r3, #28]
 801fde8:	4798      	blx	r3
 801fdea:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801fdec:	4b08      	ldr	r3, [pc, #32]	; (801fe10 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdf0:	6878      	ldr	r0, [r7, #4]
 801fdf2:	4798      	blx	r3
 801fdf4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801fdf6:	4b06      	ldr	r3, [pc, #24]	; (801fe10 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdfa:	68f9      	ldr	r1, [r7, #12]
 801fdfc:	68ba      	ldr	r2, [r7, #8]
 801fdfe:	1a8a      	subs	r2, r1, r2
 801fe00:	4610      	mov	r0, r2
 801fe02:	4798      	blx	r3
 801fe04:	4603      	mov	r3, r0
}
 801fe06:	4618      	mov	r0, r3
 801fe08:	3710      	adds	r7, #16
 801fe0a:	46bd      	mov	sp, r7
 801fe0c:	bd80      	pop	{r7, pc}
 801fe0e:	bf00      	nop
 801fe10:	08021964 	.word	0x08021964

0801fe14 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801fe14:	b480      	push	{r7}
 801fe16:	b085      	sub	sp, #20
 801fe18:	af00      	add	r7, sp, #0
 801fe1a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fe1c:	4b0a      	ldr	r3, [pc, #40]	; (801fe48 <TimerExists+0x34>)
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801fe22:	e008      	b.n	801fe36 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801fe24:	68fa      	ldr	r2, [r7, #12]
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	429a      	cmp	r2, r3
 801fe2a:	d101      	bne.n	801fe30 <TimerExists+0x1c>
    {
      return true;
 801fe2c:	2301      	movs	r3, #1
 801fe2e:	e006      	b.n	801fe3e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	695b      	ldr	r3, [r3, #20]
 801fe34:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801fe36:	68fb      	ldr	r3, [r7, #12]
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	d1f3      	bne.n	801fe24 <TimerExists+0x10>
  }
  return false;
 801fe3c:	2300      	movs	r3, #0
}
 801fe3e:	4618      	mov	r0, r3
 801fe40:	3714      	adds	r7, #20
 801fe42:	46bd      	mov	sp, r7
 801fe44:	bc80      	pop	{r7}
 801fe46:	4770      	bx	lr
 801fe48:	20001e68 	.word	0x20001e68

0801fe4c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801fe4c:	b590      	push	{r4, r7, lr}
 801fe4e:	b085      	sub	sp, #20
 801fe50:	af00      	add	r7, sp, #0
 801fe52:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801fe54:	4b11      	ldr	r3, [pc, #68]	; (801fe9c <TimerSetTimeout+0x50>)
 801fe56:	6a1b      	ldr	r3, [r3, #32]
 801fe58:	4798      	blx	r3
 801fe5a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	2201      	movs	r2, #1
 801fe60:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	681c      	ldr	r4, [r3, #0]
 801fe66:	4b0d      	ldr	r3, [pc, #52]	; (801fe9c <TimerSetTimeout+0x50>)
 801fe68:	699b      	ldr	r3, [r3, #24]
 801fe6a:	4798      	blx	r3
 801fe6c:	4602      	mov	r2, r0
 801fe6e:	68fb      	ldr	r3, [r7, #12]
 801fe70:	4413      	add	r3, r2
 801fe72:	429c      	cmp	r4, r3
 801fe74:	d207      	bcs.n	801fe86 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801fe76:	4b09      	ldr	r3, [pc, #36]	; (801fe9c <TimerSetTimeout+0x50>)
 801fe78:	699b      	ldr	r3, [r3, #24]
 801fe7a:	4798      	blx	r3
 801fe7c:	4602      	mov	r2, r0
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	441a      	add	r2, r3
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801fe86:	4b05      	ldr	r3, [pc, #20]	; (801fe9c <TimerSetTimeout+0x50>)
 801fe88:	689b      	ldr	r3, [r3, #8]
 801fe8a:	687a      	ldr	r2, [r7, #4]
 801fe8c:	6812      	ldr	r2, [r2, #0]
 801fe8e:	4610      	mov	r0, r2
 801fe90:	4798      	blx	r3
}
 801fe92:	bf00      	nop
 801fe94:	3714      	adds	r7, #20
 801fe96:	46bd      	mov	sp, r7
 801fe98:	bd90      	pop	{r4, r7, pc}
 801fe9a:	bf00      	nop
 801fe9c:	08021964 	.word	0x08021964

0801fea0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801fea0:	b480      	push	{r7}
 801fea2:	b085      	sub	sp, #20
 801fea4:	af00      	add	r7, sp, #0
 801fea6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fea8:	4b14      	ldr	r3, [pc, #80]	; (801fefc <TimerInsertTimer+0x5c>)
 801feaa:	681b      	ldr	r3, [r3, #0]
 801feac:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801feae:	4b13      	ldr	r3, [pc, #76]	; (801fefc <TimerInsertTimer+0x5c>)
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	695b      	ldr	r3, [r3, #20]
 801feb4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801feb6:	e012      	b.n	801fede <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	681a      	ldr	r2, [r3, #0]
 801febc:	68bb      	ldr	r3, [r7, #8]
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	429a      	cmp	r2, r3
 801fec2:	d905      	bls.n	801fed0 <TimerInsertTimer+0x30>
    {
        cur = next;
 801fec4:	68bb      	ldr	r3, [r7, #8]
 801fec6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801fec8:	68bb      	ldr	r3, [r7, #8]
 801feca:	695b      	ldr	r3, [r3, #20]
 801fecc:	60bb      	str	r3, [r7, #8]
 801fece:	e006      	b.n	801fede <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801fed0:	68fb      	ldr	r3, [r7, #12]
 801fed2:	687a      	ldr	r2, [r7, #4]
 801fed4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	68ba      	ldr	r2, [r7, #8]
 801feda:	615a      	str	r2, [r3, #20]
        return;
 801fedc:	e009      	b.n	801fef2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801fede:	68fb      	ldr	r3, [r7, #12]
 801fee0:	695b      	ldr	r3, [r3, #20]
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	d1e8      	bne.n	801feb8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801fee6:	68fb      	ldr	r3, [r7, #12]
 801fee8:	687a      	ldr	r2, [r7, #4]
 801feea:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	2200      	movs	r2, #0
 801fef0:	615a      	str	r2, [r3, #20]
}
 801fef2:	3714      	adds	r7, #20
 801fef4:	46bd      	mov	sp, r7
 801fef6:	bc80      	pop	{r7}
 801fef8:	4770      	bx	lr
 801fefa:	bf00      	nop
 801fefc:	20001e68 	.word	0x20001e68

0801ff00 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ff00:	b580      	push	{r7, lr}
 801ff02:	b084      	sub	sp, #16
 801ff04:	af00      	add	r7, sp, #0
 801ff06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ff08:	4b0b      	ldr	r3, [pc, #44]	; (801ff38 <TimerInsertNewHeadTimer+0x38>)
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ff0e:	68fb      	ldr	r3, [r7, #12]
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d002      	beq.n	801ff1a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ff14:	68fb      	ldr	r3, [r7, #12]
 801ff16:	2200      	movs	r2, #0
 801ff18:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ff1a:	687b      	ldr	r3, [r7, #4]
 801ff1c:	68fa      	ldr	r2, [r7, #12]
 801ff1e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ff20:	4a05      	ldr	r2, [pc, #20]	; (801ff38 <TimerInsertNewHeadTimer+0x38>)
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ff26:	4b04      	ldr	r3, [pc, #16]	; (801ff38 <TimerInsertNewHeadTimer+0x38>)
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	4618      	mov	r0, r3
 801ff2c:	f7ff ff8e 	bl	801fe4c <TimerSetTimeout>
}
 801ff30:	bf00      	nop
 801ff32:	3710      	adds	r7, #16
 801ff34:	46bd      	mov	sp, r7
 801ff36:	bd80      	pop	{r7, pc}
 801ff38:	20001e68 	.word	0x20001e68

0801ff3c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ff3c:	b580      	push	{r7, lr}
 801ff3e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ff40:	2218      	movs	r2, #24
 801ff42:	2100      	movs	r1, #0
 801ff44:	4807      	ldr	r0, [pc, #28]	; (801ff64 <UTIL_ADV_TRACE_Init+0x28>)
 801ff46:	f7fe ffda 	bl	801eefe <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ff4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ff4e:	2100      	movs	r1, #0
 801ff50:	4805      	ldr	r0, [pc, #20]	; (801ff68 <UTIL_ADV_TRACE_Init+0x2c>)
 801ff52:	f7fe ffd4 	bl	801eefe <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ff56:	4b05      	ldr	r3, [pc, #20]	; (801ff6c <UTIL_ADV_TRACE_Init+0x30>)
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	4805      	ldr	r0, [pc, #20]	; (801ff70 <UTIL_ADV_TRACE_Init+0x34>)
 801ff5c:	4798      	blx	r3
 801ff5e:	4603      	mov	r3, r0
}
 801ff60:	4618      	mov	r0, r3
 801ff62:	bd80      	pop	{r7, pc}
 801ff64:	20001e6c 	.word	0x20001e6c
 801ff68:	20001e84 	.word	0x20001e84
 801ff6c:	080219a4 	.word	0x080219a4
 801ff70:	080201dd 	.word	0x080201dd

0801ff74 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ff74:	b480      	push	{r7}
 801ff76:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ff78:	4b06      	ldr	r3, [pc, #24]	; (801ff94 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ff7a:	8a5a      	ldrh	r2, [r3, #18]
 801ff7c:	4b05      	ldr	r3, [pc, #20]	; (801ff94 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ff7e:	8a1b      	ldrh	r3, [r3, #16]
 801ff80:	429a      	cmp	r2, r3
 801ff82:	d101      	bne.n	801ff88 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ff84:	2301      	movs	r3, #1
 801ff86:	e000      	b.n	801ff8a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ff88:	2300      	movs	r3, #0
}
 801ff8a:	4618      	mov	r0, r3
 801ff8c:	46bd      	mov	sp, r7
 801ff8e:	bc80      	pop	{r7}
 801ff90:	4770      	bx	lr
 801ff92:	bf00      	nop
 801ff94:	20001e6c 	.word	0x20001e6c

0801ff98 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801ff98:	b408      	push	{r3}
 801ff9a:	b580      	push	{r7, lr}
 801ff9c:	b08d      	sub	sp, #52	; 0x34
 801ff9e:	af00      	add	r7, sp, #0
 801ffa0:	60f8      	str	r0, [r7, #12]
 801ffa2:	60b9      	str	r1, [r7, #8]
 801ffa4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801ffa6:	2300      	movs	r3, #0
 801ffa8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801ffaa:	2300      	movs	r3, #0
 801ffac:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801ffae:	4b37      	ldr	r3, [pc, #220]	; (802008c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffb0:	7a1b      	ldrb	r3, [r3, #8]
 801ffb2:	461a      	mov	r2, r3
 801ffb4:	68fb      	ldr	r3, [r7, #12]
 801ffb6:	4293      	cmp	r3, r2
 801ffb8:	d902      	bls.n	801ffc0 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801ffba:	f06f 0304 	mvn.w	r3, #4
 801ffbe:	e05e      	b.n	802007e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801ffc0:	4b32      	ldr	r3, [pc, #200]	; (802008c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffc2:	68da      	ldr	r2, [r3, #12]
 801ffc4:	68bb      	ldr	r3, [r7, #8]
 801ffc6:	4013      	ands	r3, r2
 801ffc8:	68ba      	ldr	r2, [r7, #8]
 801ffca:	429a      	cmp	r2, r3
 801ffcc:	d002      	beq.n	801ffd4 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801ffce:	f06f 0305 	mvn.w	r3, #5
 801ffd2:	e054      	b.n	802007e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801ffd4:	4b2d      	ldr	r3, [pc, #180]	; (802008c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffd6:	685b      	ldr	r3, [r3, #4]
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	d00a      	beq.n	801fff2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801ffdc:	687b      	ldr	r3, [r7, #4]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d007      	beq.n	801fff2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801ffe2:	4b2a      	ldr	r3, [pc, #168]	; (802008c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffe4:	685b      	ldr	r3, [r3, #4]
 801ffe6:	f107 0116 	add.w	r1, r7, #22
 801ffea:	f107 0218 	add.w	r2, r7, #24
 801ffee:	4610      	mov	r0, r2
 801fff0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801fff2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fff6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801fff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fffc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020000:	4823      	ldr	r0, [pc, #140]	; (8020090 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8020002:	f7ff fa09 	bl	801f418 <tiny_vsnprintf_like>
 8020006:	4603      	mov	r3, r0
 8020008:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 802000a:	f000 f9f1 	bl	80203f0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 802000e:	8afa      	ldrh	r2, [r7, #22]
 8020010:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8020012:	4413      	add	r3, r2
 8020014:	b29b      	uxth	r3, r3
 8020016:	f107 0214 	add.w	r2, r7, #20
 802001a:	4611      	mov	r1, r2
 802001c:	4618      	mov	r0, r3
 802001e:	f000 f969 	bl	80202f4 <TRACE_AllocateBufer>
 8020022:	4603      	mov	r3, r0
 8020024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020028:	d025      	beq.n	8020076 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 802002a:	2300      	movs	r3, #0
 802002c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 802002e:	e00e      	b.n	802004e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8020030:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8020032:	8aba      	ldrh	r2, [r7, #20]
 8020034:	3330      	adds	r3, #48	; 0x30
 8020036:	443b      	add	r3, r7
 8020038:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 802003c:	4b15      	ldr	r3, [pc, #84]	; (8020094 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 802003e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 8020040:	8abb      	ldrh	r3, [r7, #20]
 8020042:	3301      	adds	r3, #1
 8020044:	b29b      	uxth	r3, r3
 8020046:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8020048:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802004a:	3301      	adds	r3, #1
 802004c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 802004e:	8afb      	ldrh	r3, [r7, #22]
 8020050:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8020052:	429a      	cmp	r2, r3
 8020054:	d3ec      	bcc.n	8020030 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8020056:	8abb      	ldrh	r3, [r7, #20]
 8020058:	461a      	mov	r2, r3
 802005a:	4b0e      	ldr	r3, [pc, #56]	; (8020094 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 802005c:	18d0      	adds	r0, r2, r3
 802005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020066:	f7ff f9d7 	bl	801f418 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 802006a:	f000 f9df 	bl	802042c <TRACE_UnLock>

    return TRACE_Send();
 802006e:	f000 f831 	bl	80200d4 <TRACE_Send>
 8020072:	4603      	mov	r3, r0
 8020074:	e003      	b.n	802007e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 8020076:	f000 f9d9 	bl	802042c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 802007a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 802007e:	4618      	mov	r0, r3
 8020080:	3734      	adds	r7, #52	; 0x34
 8020082:	46bd      	mov	sp, r7
 8020084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020088:	b001      	add	sp, #4
 802008a:	4770      	bx	lr
 802008c:	20001e6c 	.word	0x20001e6c
 8020090:	20002284 	.word	0x20002284
 8020094:	20001e84 	.word	0x20001e84

08020098 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 8020098:	b480      	push	{r7}
 802009a:	b083      	sub	sp, #12
 802009c:	af00      	add	r7, sp, #0
 802009e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80200a0:	4a03      	ldr	r2, [pc, #12]	; (80200b0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	6053      	str	r3, [r2, #4]
}
 80200a6:	bf00      	nop
 80200a8:	370c      	adds	r7, #12
 80200aa:	46bd      	mov	sp, r7
 80200ac:	bc80      	pop	{r7}
 80200ae:	4770      	bx	lr
 80200b0:	20001e6c 	.word	0x20001e6c

080200b4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 80200b4:	b480      	push	{r7}
 80200b6:	b083      	sub	sp, #12
 80200b8:	af00      	add	r7, sp, #0
 80200ba:	4603      	mov	r3, r0
 80200bc:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80200be:	4a04      	ldr	r2, [pc, #16]	; (80200d0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 80200c0:	79fb      	ldrb	r3, [r7, #7]
 80200c2:	7213      	strb	r3, [r2, #8]
}
 80200c4:	bf00      	nop
 80200c6:	370c      	adds	r7, #12
 80200c8:	46bd      	mov	sp, r7
 80200ca:	bc80      	pop	{r7}
 80200cc:	4770      	bx	lr
 80200ce:	bf00      	nop
 80200d0:	20001e6c 	.word	0x20001e6c

080200d4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 80200d4:	b580      	push	{r7, lr}
 80200d6:	b088      	sub	sp, #32
 80200d8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80200da:	2300      	movs	r3, #0
 80200dc:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 80200de:	2300      	movs	r3, #0
 80200e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80200e2:	f3ef 8310 	mrs	r3, PRIMASK
 80200e6:	613b      	str	r3, [r7, #16]
  return(result);
 80200e8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80200ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80200ec:	b672      	cpsid	i
}
 80200ee:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 80200f0:	f000 f9ba 	bl	8020468 <TRACE_IsLocked>
 80200f4:	4603      	mov	r3, r0
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	d15d      	bne.n	80201b6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 80200fa:	f000 f979 	bl	80203f0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80200fe:	4b34      	ldr	r3, [pc, #208]	; (80201d0 <TRACE_Send+0xfc>)
 8020100:	8a1a      	ldrh	r2, [r3, #16]
 8020102:	4b33      	ldr	r3, [pc, #204]	; (80201d0 <TRACE_Send+0xfc>)
 8020104:	8a5b      	ldrh	r3, [r3, #18]
 8020106:	429a      	cmp	r2, r3
 8020108:	d04d      	beq.n	80201a6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 802010a:	4b31      	ldr	r3, [pc, #196]	; (80201d0 <TRACE_Send+0xfc>)
 802010c:	789b      	ldrb	r3, [r3, #2]
 802010e:	2b01      	cmp	r3, #1
 8020110:	d117      	bne.n	8020142 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8020112:	4b2f      	ldr	r3, [pc, #188]	; (80201d0 <TRACE_Send+0xfc>)
 8020114:	881a      	ldrh	r2, [r3, #0]
 8020116:	4b2e      	ldr	r3, [pc, #184]	; (80201d0 <TRACE_Send+0xfc>)
 8020118:	8a1b      	ldrh	r3, [r3, #16]
 802011a:	1ad3      	subs	r3, r2, r3
 802011c:	b29a      	uxth	r2, r3
 802011e:	4b2c      	ldr	r3, [pc, #176]	; (80201d0 <TRACE_Send+0xfc>)
 8020120:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8020122:	4b2b      	ldr	r3, [pc, #172]	; (80201d0 <TRACE_Send+0xfc>)
 8020124:	2202      	movs	r2, #2
 8020126:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8020128:	4b29      	ldr	r3, [pc, #164]	; (80201d0 <TRACE_Send+0xfc>)
 802012a:	2200      	movs	r2, #0
 802012c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 802012e:	4b28      	ldr	r3, [pc, #160]	; (80201d0 <TRACE_Send+0xfc>)
 8020130:	8a9b      	ldrh	r3, [r3, #20]
 8020132:	2b00      	cmp	r3, #0
 8020134:	d105      	bne.n	8020142 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020136:	4b26      	ldr	r3, [pc, #152]	; (80201d0 <TRACE_Send+0xfc>)
 8020138:	2200      	movs	r2, #0
 802013a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 802013c:	4b24      	ldr	r3, [pc, #144]	; (80201d0 <TRACE_Send+0xfc>)
 802013e:	2200      	movs	r2, #0
 8020140:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8020142:	4b23      	ldr	r3, [pc, #140]	; (80201d0 <TRACE_Send+0xfc>)
 8020144:	789b      	ldrb	r3, [r3, #2]
 8020146:	2b00      	cmp	r3, #0
 8020148:	d115      	bne.n	8020176 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 802014a:	4b21      	ldr	r3, [pc, #132]	; (80201d0 <TRACE_Send+0xfc>)
 802014c:	8a5a      	ldrh	r2, [r3, #18]
 802014e:	4b20      	ldr	r3, [pc, #128]	; (80201d0 <TRACE_Send+0xfc>)
 8020150:	8a1b      	ldrh	r3, [r3, #16]
 8020152:	429a      	cmp	r2, r3
 8020154:	d908      	bls.n	8020168 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8020156:	4b1e      	ldr	r3, [pc, #120]	; (80201d0 <TRACE_Send+0xfc>)
 8020158:	8a5a      	ldrh	r2, [r3, #18]
 802015a:	4b1d      	ldr	r3, [pc, #116]	; (80201d0 <TRACE_Send+0xfc>)
 802015c:	8a1b      	ldrh	r3, [r3, #16]
 802015e:	1ad3      	subs	r3, r2, r3
 8020160:	b29a      	uxth	r2, r3
 8020162:	4b1b      	ldr	r3, [pc, #108]	; (80201d0 <TRACE_Send+0xfc>)
 8020164:	829a      	strh	r2, [r3, #20]
 8020166:	e006      	b.n	8020176 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020168:	4b19      	ldr	r3, [pc, #100]	; (80201d0 <TRACE_Send+0xfc>)
 802016a:	8a1b      	ldrh	r3, [r3, #16]
 802016c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020170:	b29a      	uxth	r2, r3
 8020172:	4b17      	ldr	r3, [pc, #92]	; (80201d0 <TRACE_Send+0xfc>)
 8020174:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8020176:	4b16      	ldr	r3, [pc, #88]	; (80201d0 <TRACE_Send+0xfc>)
 8020178:	8a1b      	ldrh	r3, [r3, #16]
 802017a:	461a      	mov	r2, r3
 802017c:	4b15      	ldr	r3, [pc, #84]	; (80201d4 <TRACE_Send+0x100>)
 802017e:	4413      	add	r3, r2
 8020180:	61bb      	str	r3, [r7, #24]
 8020182:	697b      	ldr	r3, [r7, #20]
 8020184:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020186:	68fb      	ldr	r3, [r7, #12]
 8020188:	f383 8810 	msr	PRIMASK, r3
}
 802018c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 802018e:	f7e2 fb3f 	bl	8002810 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8020192:	4b11      	ldr	r3, [pc, #68]	; (80201d8 <TRACE_Send+0x104>)
 8020194:	68db      	ldr	r3, [r3, #12]
 8020196:	4a0e      	ldr	r2, [pc, #56]	; (80201d0 <TRACE_Send+0xfc>)
 8020198:	8a92      	ldrh	r2, [r2, #20]
 802019a:	4611      	mov	r1, r2
 802019c:	69b8      	ldr	r0, [r7, #24]
 802019e:	4798      	blx	r3
 80201a0:	4603      	mov	r3, r0
 80201a2:	77fb      	strb	r3, [r7, #31]
 80201a4:	e00d      	b.n	80201c2 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 80201a6:	f000 f941 	bl	802042c <TRACE_UnLock>
 80201aa:	697b      	ldr	r3, [r7, #20]
 80201ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80201ae:	68bb      	ldr	r3, [r7, #8]
 80201b0:	f383 8810 	msr	PRIMASK, r3
}
 80201b4:	e005      	b.n	80201c2 <TRACE_Send+0xee>
 80201b6:	697b      	ldr	r3, [r7, #20]
 80201b8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80201ba:	687b      	ldr	r3, [r7, #4]
 80201bc:	f383 8810 	msr	PRIMASK, r3
}
 80201c0:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 80201c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80201c6:	4618      	mov	r0, r3
 80201c8:	3720      	adds	r7, #32
 80201ca:	46bd      	mov	sp, r7
 80201cc:	bd80      	pop	{r7, pc}
 80201ce:	bf00      	nop
 80201d0:	20001e6c 	.word	0x20001e6c
 80201d4:	20001e84 	.word	0x20001e84
 80201d8:	080219a4 	.word	0x080219a4

080201dc <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 80201dc:	b580      	push	{r7, lr}
 80201de:	b088      	sub	sp, #32
 80201e0:	af00      	add	r7, sp, #0
 80201e2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 80201e4:	2300      	movs	r3, #0
 80201e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80201e8:	f3ef 8310 	mrs	r3, PRIMASK
 80201ec:	617b      	str	r3, [r7, #20]
  return(result);
 80201ee:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80201f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80201f2:	b672      	cpsid	i
}
 80201f4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80201f6:	4b3c      	ldr	r3, [pc, #240]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 80201f8:	789b      	ldrb	r3, [r3, #2]
 80201fa:	2b02      	cmp	r3, #2
 80201fc:	d106      	bne.n	802020c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80201fe:	4b3a      	ldr	r3, [pc, #232]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020200:	2200      	movs	r2, #0
 8020202:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020204:	4b38      	ldr	r3, [pc, #224]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020206:	2200      	movs	r2, #0
 8020208:	821a      	strh	r2, [r3, #16]
 802020a:	e00a      	b.n	8020222 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 802020c:	4b36      	ldr	r3, [pc, #216]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 802020e:	8a1a      	ldrh	r2, [r3, #16]
 8020210:	4b35      	ldr	r3, [pc, #212]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020212:	8a9b      	ldrh	r3, [r3, #20]
 8020214:	4413      	add	r3, r2
 8020216:	b29b      	uxth	r3, r3
 8020218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802021c:	b29a      	uxth	r2, r3
 802021e:	4b32      	ldr	r3, [pc, #200]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020220:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8020222:	4b31      	ldr	r3, [pc, #196]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020224:	8a1a      	ldrh	r2, [r3, #16]
 8020226:	4b30      	ldr	r3, [pc, #192]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020228:	8a5b      	ldrh	r3, [r3, #18]
 802022a:	429a      	cmp	r2, r3
 802022c:	d04d      	beq.n	80202ca <TRACE_TxCpltCallback+0xee>
 802022e:	4b2e      	ldr	r3, [pc, #184]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020230:	8adb      	ldrh	r3, [r3, #22]
 8020232:	2b01      	cmp	r3, #1
 8020234:	d149      	bne.n	80202ca <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8020236:	4b2c      	ldr	r3, [pc, #176]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020238:	789b      	ldrb	r3, [r3, #2]
 802023a:	2b01      	cmp	r3, #1
 802023c:	d117      	bne.n	802026e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 802023e:	4b2a      	ldr	r3, [pc, #168]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020240:	881a      	ldrh	r2, [r3, #0]
 8020242:	4b29      	ldr	r3, [pc, #164]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020244:	8a1b      	ldrh	r3, [r3, #16]
 8020246:	1ad3      	subs	r3, r2, r3
 8020248:	b29a      	uxth	r2, r3
 802024a:	4b27      	ldr	r3, [pc, #156]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 802024c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 802024e:	4b26      	ldr	r3, [pc, #152]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020250:	2202      	movs	r2, #2
 8020252:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8020254:	4b24      	ldr	r3, [pc, #144]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020256:	2200      	movs	r2, #0
 8020258:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 802025a:	4b23      	ldr	r3, [pc, #140]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 802025c:	8a9b      	ldrh	r3, [r3, #20]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d105      	bne.n	802026e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020262:	4b21      	ldr	r3, [pc, #132]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020264:	2200      	movs	r2, #0
 8020266:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020268:	4b1f      	ldr	r3, [pc, #124]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 802026a:	2200      	movs	r2, #0
 802026c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 802026e:	4b1e      	ldr	r3, [pc, #120]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020270:	789b      	ldrb	r3, [r3, #2]
 8020272:	2b00      	cmp	r3, #0
 8020274:	d115      	bne.n	80202a2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020276:	4b1c      	ldr	r3, [pc, #112]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020278:	8a5a      	ldrh	r2, [r3, #18]
 802027a:	4b1b      	ldr	r3, [pc, #108]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 802027c:	8a1b      	ldrh	r3, [r3, #16]
 802027e:	429a      	cmp	r2, r3
 8020280:	d908      	bls.n	8020294 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8020282:	4b19      	ldr	r3, [pc, #100]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020284:	8a5a      	ldrh	r2, [r3, #18]
 8020286:	4b18      	ldr	r3, [pc, #96]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020288:	8a1b      	ldrh	r3, [r3, #16]
 802028a:	1ad3      	subs	r3, r2, r3
 802028c:	b29a      	uxth	r2, r3
 802028e:	4b16      	ldr	r3, [pc, #88]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020290:	829a      	strh	r2, [r3, #20]
 8020292:	e006      	b.n	80202a2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020294:	4b14      	ldr	r3, [pc, #80]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 8020296:	8a1b      	ldrh	r3, [r3, #16]
 8020298:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 802029c:	b29a      	uxth	r2, r3
 802029e:	4b12      	ldr	r3, [pc, #72]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 80202a0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80202a2:	4b11      	ldr	r3, [pc, #68]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 80202a4:	8a1b      	ldrh	r3, [r3, #16]
 80202a6:	461a      	mov	r2, r3
 80202a8:	4b10      	ldr	r3, [pc, #64]	; (80202ec <TRACE_TxCpltCallback+0x110>)
 80202aa:	4413      	add	r3, r2
 80202ac:	61fb      	str	r3, [r7, #28]
 80202ae:	69bb      	ldr	r3, [r7, #24]
 80202b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202b2:	693b      	ldr	r3, [r7, #16]
 80202b4:	f383 8810 	msr	PRIMASK, r3
}
 80202b8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80202ba:	4b0d      	ldr	r3, [pc, #52]	; (80202f0 <TRACE_TxCpltCallback+0x114>)
 80202bc:	68db      	ldr	r3, [r3, #12]
 80202be:	4a0a      	ldr	r2, [pc, #40]	; (80202e8 <TRACE_TxCpltCallback+0x10c>)
 80202c0:	8a92      	ldrh	r2, [r2, #20]
 80202c2:	4611      	mov	r1, r2
 80202c4:	69f8      	ldr	r0, [r7, #28]
 80202c6:	4798      	blx	r3
 80202c8:	e00a      	b.n	80202e0 <TRACE_TxCpltCallback+0x104>
 80202ca:	69bb      	ldr	r3, [r7, #24]
 80202cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	f383 8810 	msr	PRIMASK, r3
}
 80202d4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 80202d6:	f7e2 faa3 	bl	8002820 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80202da:	f000 f8a7 	bl	802042c <TRACE_UnLock>
  }
}
 80202de:	bf00      	nop
 80202e0:	bf00      	nop
 80202e2:	3720      	adds	r7, #32
 80202e4:	46bd      	mov	sp, r7
 80202e6:	bd80      	pop	{r7, pc}
 80202e8:	20001e6c 	.word	0x20001e6c
 80202ec:	20001e84 	.word	0x20001e84
 80202f0:	080219a4 	.word	0x080219a4

080202f4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80202f4:	b480      	push	{r7}
 80202f6:	b087      	sub	sp, #28
 80202f8:	af00      	add	r7, sp, #0
 80202fa:	4603      	mov	r3, r0
 80202fc:	6039      	str	r1, [r7, #0]
 80202fe:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8020300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020304:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020306:	f3ef 8310 	mrs	r3, PRIMASK
 802030a:	60fb      	str	r3, [r7, #12]
  return(result);
 802030c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 802030e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020310:	b672      	cpsid	i
}
 8020312:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8020314:	4b35      	ldr	r3, [pc, #212]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020316:	8a5a      	ldrh	r2, [r3, #18]
 8020318:	4b34      	ldr	r3, [pc, #208]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 802031a:	8a1b      	ldrh	r3, [r3, #16]
 802031c:	429a      	cmp	r2, r3
 802031e:	d11b      	bne.n	8020358 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020320:	4b32      	ldr	r3, [pc, #200]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020322:	8a5b      	ldrh	r3, [r3, #18]
 8020324:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020328:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 802032a:	88fa      	ldrh	r2, [r7, #6]
 802032c:	8afb      	ldrh	r3, [r7, #22]
 802032e:	429a      	cmp	r2, r3
 8020330:	d33a      	bcc.n	80203a8 <TRACE_AllocateBufer+0xb4>
 8020332:	4b2e      	ldr	r3, [pc, #184]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020334:	8a1b      	ldrh	r3, [r3, #16]
 8020336:	88fa      	ldrh	r2, [r7, #6]
 8020338:	429a      	cmp	r2, r3
 802033a:	d235      	bcs.n	80203a8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 802033c:	4b2b      	ldr	r3, [pc, #172]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 802033e:	2201      	movs	r2, #1
 8020340:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020342:	4b2a      	ldr	r3, [pc, #168]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020344:	8a5a      	ldrh	r2, [r3, #18]
 8020346:	4b29      	ldr	r3, [pc, #164]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020348:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 802034a:	4b28      	ldr	r3, [pc, #160]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 802034c:	8a1b      	ldrh	r3, [r3, #16]
 802034e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020350:	4b26      	ldr	r3, [pc, #152]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020352:	2200      	movs	r2, #0
 8020354:	825a      	strh	r2, [r3, #18]
 8020356:	e027      	b.n	80203a8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020358:	4b24      	ldr	r3, [pc, #144]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 802035a:	8a5a      	ldrh	r2, [r3, #18]
 802035c:	4b23      	ldr	r3, [pc, #140]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 802035e:	8a1b      	ldrh	r3, [r3, #16]
 8020360:	429a      	cmp	r2, r3
 8020362:	d91b      	bls.n	802039c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020364:	4b21      	ldr	r3, [pc, #132]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020366:	8a5b      	ldrh	r3, [r3, #18]
 8020368:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 802036c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 802036e:	88fa      	ldrh	r2, [r7, #6]
 8020370:	8afb      	ldrh	r3, [r7, #22]
 8020372:	429a      	cmp	r2, r3
 8020374:	d318      	bcc.n	80203a8 <TRACE_AllocateBufer+0xb4>
 8020376:	4b1d      	ldr	r3, [pc, #116]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020378:	8a1b      	ldrh	r3, [r3, #16]
 802037a:	88fa      	ldrh	r2, [r7, #6]
 802037c:	429a      	cmp	r2, r3
 802037e:	d213      	bcs.n	80203a8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020380:	4b1a      	ldr	r3, [pc, #104]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020382:	2201      	movs	r2, #1
 8020384:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020386:	4b19      	ldr	r3, [pc, #100]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020388:	8a5a      	ldrh	r2, [r3, #18]
 802038a:	4b18      	ldr	r3, [pc, #96]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 802038c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 802038e:	4b17      	ldr	r3, [pc, #92]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020390:	8a1b      	ldrh	r3, [r3, #16]
 8020392:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020394:	4b15      	ldr	r3, [pc, #84]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 8020396:	2200      	movs	r2, #0
 8020398:	825a      	strh	r2, [r3, #18]
 802039a:	e005      	b.n	80203a8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 802039c:	4b13      	ldr	r3, [pc, #76]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 802039e:	8a1a      	ldrh	r2, [r3, #16]
 80203a0:	4b12      	ldr	r3, [pc, #72]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 80203a2:	8a5b      	ldrh	r3, [r3, #18]
 80203a4:	1ad3      	subs	r3, r2, r3
 80203a6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80203a8:	8afa      	ldrh	r2, [r7, #22]
 80203aa:	88fb      	ldrh	r3, [r7, #6]
 80203ac:	429a      	cmp	r2, r3
 80203ae:	d90f      	bls.n	80203d0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80203b0:	4b0e      	ldr	r3, [pc, #56]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 80203b2:	8a5a      	ldrh	r2, [r3, #18]
 80203b4:	683b      	ldr	r3, [r7, #0]
 80203b6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80203b8:	4b0c      	ldr	r3, [pc, #48]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 80203ba:	8a5a      	ldrh	r2, [r3, #18]
 80203bc:	88fb      	ldrh	r3, [r7, #6]
 80203be:	4413      	add	r3, r2
 80203c0:	b29b      	uxth	r3, r3
 80203c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80203c6:	b29a      	uxth	r2, r3
 80203c8:	4b08      	ldr	r3, [pc, #32]	; (80203ec <TRACE_AllocateBufer+0xf8>)
 80203ca:	825a      	strh	r2, [r3, #18]
    ret = 0;
 80203cc:	2300      	movs	r3, #0
 80203ce:	82bb      	strh	r3, [r7, #20]
 80203d0:	693b      	ldr	r3, [r7, #16]
 80203d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80203d4:	68bb      	ldr	r3, [r7, #8]
 80203d6:	f383 8810 	msr	PRIMASK, r3
}
 80203da:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 80203dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80203e0:	4618      	mov	r0, r3
 80203e2:	371c      	adds	r7, #28
 80203e4:	46bd      	mov	sp, r7
 80203e6:	bc80      	pop	{r7}
 80203e8:	4770      	bx	lr
 80203ea:	bf00      	nop
 80203ec:	20001e6c 	.word	0x20001e6c

080203f0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 80203f0:	b480      	push	{r7}
 80203f2:	b085      	sub	sp, #20
 80203f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80203f6:	f3ef 8310 	mrs	r3, PRIMASK
 80203fa:	607b      	str	r3, [r7, #4]
  return(result);
 80203fc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80203fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020400:	b672      	cpsid	i
}
 8020402:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8020404:	4b08      	ldr	r3, [pc, #32]	; (8020428 <TRACE_Lock+0x38>)
 8020406:	8adb      	ldrh	r3, [r3, #22]
 8020408:	3301      	adds	r3, #1
 802040a:	b29a      	uxth	r2, r3
 802040c:	4b06      	ldr	r3, [pc, #24]	; (8020428 <TRACE_Lock+0x38>)
 802040e:	82da      	strh	r2, [r3, #22]
 8020410:	68fb      	ldr	r3, [r7, #12]
 8020412:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020414:	68bb      	ldr	r3, [r7, #8]
 8020416:	f383 8810 	msr	PRIMASK, r3
}
 802041a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 802041c:	bf00      	nop
 802041e:	3714      	adds	r7, #20
 8020420:	46bd      	mov	sp, r7
 8020422:	bc80      	pop	{r7}
 8020424:	4770      	bx	lr
 8020426:	bf00      	nop
 8020428:	20001e6c 	.word	0x20001e6c

0802042c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 802042c:	b480      	push	{r7}
 802042e:	b085      	sub	sp, #20
 8020430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020432:	f3ef 8310 	mrs	r3, PRIMASK
 8020436:	607b      	str	r3, [r7, #4]
  return(result);
 8020438:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 802043a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 802043c:	b672      	cpsid	i
}
 802043e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8020440:	4b08      	ldr	r3, [pc, #32]	; (8020464 <TRACE_UnLock+0x38>)
 8020442:	8adb      	ldrh	r3, [r3, #22]
 8020444:	3b01      	subs	r3, #1
 8020446:	b29a      	uxth	r2, r3
 8020448:	4b06      	ldr	r3, [pc, #24]	; (8020464 <TRACE_UnLock+0x38>)
 802044a:	82da      	strh	r2, [r3, #22]
 802044c:	68fb      	ldr	r3, [r7, #12]
 802044e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020450:	68bb      	ldr	r3, [r7, #8]
 8020452:	f383 8810 	msr	PRIMASK, r3
}
 8020456:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020458:	bf00      	nop
 802045a:	3714      	adds	r7, #20
 802045c:	46bd      	mov	sp, r7
 802045e:	bc80      	pop	{r7}
 8020460:	4770      	bx	lr
 8020462:	bf00      	nop
 8020464:	20001e6c 	.word	0x20001e6c

08020468 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8020468:	b480      	push	{r7}
 802046a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 802046c:	4b05      	ldr	r3, [pc, #20]	; (8020484 <TRACE_IsLocked+0x1c>)
 802046e:	8adb      	ldrh	r3, [r3, #22]
 8020470:	2b00      	cmp	r3, #0
 8020472:	bf14      	ite	ne
 8020474:	2301      	movne	r3, #1
 8020476:	2300      	moveq	r3, #0
 8020478:	b2db      	uxtb	r3, r3
}
 802047a:	4618      	mov	r0, r3
 802047c:	46bd      	mov	sp, r7
 802047e:	bc80      	pop	{r7}
 8020480:	4770      	bx	lr
 8020482:	bf00      	nop
 8020484:	20001e6c 	.word	0x20001e6c

08020488 <floor>:
 8020488:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802048c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020490:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8020494:	2e13      	cmp	r6, #19
 8020496:	460b      	mov	r3, r1
 8020498:	4607      	mov	r7, r0
 802049a:	460c      	mov	r4, r1
 802049c:	4605      	mov	r5, r0
 802049e:	dc32      	bgt.n	8020506 <floor+0x7e>
 80204a0:	2e00      	cmp	r6, #0
 80204a2:	da14      	bge.n	80204ce <floor+0x46>
 80204a4:	a334      	add	r3, pc, #208	; (adr r3, 8020578 <floor+0xf0>)
 80204a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204aa:	f7df fec7 	bl	800023c <__adddf3>
 80204ae:	2200      	movs	r2, #0
 80204b0:	2300      	movs	r3, #0
 80204b2:	f7e0 fb09 	bl	8000ac8 <__aeabi_dcmpgt>
 80204b6:	b138      	cbz	r0, 80204c8 <floor+0x40>
 80204b8:	2c00      	cmp	r4, #0
 80204ba:	da56      	bge.n	802056a <floor+0xe2>
 80204bc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80204c0:	4325      	orrs	r5, r4
 80204c2:	d055      	beq.n	8020570 <floor+0xe8>
 80204c4:	4c2e      	ldr	r4, [pc, #184]	; (8020580 <floor+0xf8>)
 80204c6:	2500      	movs	r5, #0
 80204c8:	4623      	mov	r3, r4
 80204ca:	462f      	mov	r7, r5
 80204cc:	e025      	b.n	802051a <floor+0x92>
 80204ce:	4a2d      	ldr	r2, [pc, #180]	; (8020584 <floor+0xfc>)
 80204d0:	fa42 f806 	asr.w	r8, r2, r6
 80204d4:	ea01 0208 	and.w	r2, r1, r8
 80204d8:	4302      	orrs	r2, r0
 80204da:	d01e      	beq.n	802051a <floor+0x92>
 80204dc:	a326      	add	r3, pc, #152	; (adr r3, 8020578 <floor+0xf0>)
 80204de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204e2:	f7df feab 	bl	800023c <__adddf3>
 80204e6:	2200      	movs	r2, #0
 80204e8:	2300      	movs	r3, #0
 80204ea:	f7e0 faed 	bl	8000ac8 <__aeabi_dcmpgt>
 80204ee:	2800      	cmp	r0, #0
 80204f0:	d0ea      	beq.n	80204c8 <floor+0x40>
 80204f2:	2c00      	cmp	r4, #0
 80204f4:	bfbe      	ittt	lt
 80204f6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80204fa:	4133      	asrlt	r3, r6
 80204fc:	18e4      	addlt	r4, r4, r3
 80204fe:	ea24 0408 	bic.w	r4, r4, r8
 8020502:	2500      	movs	r5, #0
 8020504:	e7e0      	b.n	80204c8 <floor+0x40>
 8020506:	2e33      	cmp	r6, #51	; 0x33
 8020508:	dd0b      	ble.n	8020522 <floor+0x9a>
 802050a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802050e:	d104      	bne.n	802051a <floor+0x92>
 8020510:	4602      	mov	r2, r0
 8020512:	f7df fe93 	bl	800023c <__adddf3>
 8020516:	4607      	mov	r7, r0
 8020518:	460b      	mov	r3, r1
 802051a:	4638      	mov	r0, r7
 802051c:	4619      	mov	r1, r3
 802051e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020522:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8020526:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802052a:	fa28 f802 	lsr.w	r8, r8, r2
 802052e:	ea10 0f08 	tst.w	r0, r8
 8020532:	d0f2      	beq.n	802051a <floor+0x92>
 8020534:	a310      	add	r3, pc, #64	; (adr r3, 8020578 <floor+0xf0>)
 8020536:	e9d3 2300 	ldrd	r2, r3, [r3]
 802053a:	f7df fe7f 	bl	800023c <__adddf3>
 802053e:	2200      	movs	r2, #0
 8020540:	2300      	movs	r3, #0
 8020542:	f7e0 fac1 	bl	8000ac8 <__aeabi_dcmpgt>
 8020546:	2800      	cmp	r0, #0
 8020548:	d0be      	beq.n	80204c8 <floor+0x40>
 802054a:	2c00      	cmp	r4, #0
 802054c:	da0a      	bge.n	8020564 <floor+0xdc>
 802054e:	2e14      	cmp	r6, #20
 8020550:	d101      	bne.n	8020556 <floor+0xce>
 8020552:	3401      	adds	r4, #1
 8020554:	e006      	b.n	8020564 <floor+0xdc>
 8020556:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802055a:	2301      	movs	r3, #1
 802055c:	40b3      	lsls	r3, r6
 802055e:	441d      	add	r5, r3
 8020560:	42af      	cmp	r7, r5
 8020562:	d8f6      	bhi.n	8020552 <floor+0xca>
 8020564:	ea25 0508 	bic.w	r5, r5, r8
 8020568:	e7ae      	b.n	80204c8 <floor+0x40>
 802056a:	2500      	movs	r5, #0
 802056c:	462c      	mov	r4, r5
 802056e:	e7ab      	b.n	80204c8 <floor+0x40>
 8020570:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8020574:	e7a8      	b.n	80204c8 <floor+0x40>
 8020576:	bf00      	nop
 8020578:	8800759c 	.word	0x8800759c
 802057c:	7e37e43c 	.word	0x7e37e43c
 8020580:	bff00000 	.word	0xbff00000
 8020584:	000fffff 	.word	0x000fffff

08020588 <siprintf>:
 8020588:	b40e      	push	{r1, r2, r3}
 802058a:	b500      	push	{lr}
 802058c:	b09c      	sub	sp, #112	; 0x70
 802058e:	ab1d      	add	r3, sp, #116	; 0x74
 8020590:	9002      	str	r0, [sp, #8]
 8020592:	9006      	str	r0, [sp, #24]
 8020594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020598:	4809      	ldr	r0, [pc, #36]	; (80205c0 <siprintf+0x38>)
 802059a:	9107      	str	r1, [sp, #28]
 802059c:	9104      	str	r1, [sp, #16]
 802059e:	4909      	ldr	r1, [pc, #36]	; (80205c4 <siprintf+0x3c>)
 80205a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80205a4:	9105      	str	r1, [sp, #20]
 80205a6:	6800      	ldr	r0, [r0, #0]
 80205a8:	9301      	str	r3, [sp, #4]
 80205aa:	a902      	add	r1, sp, #8
 80205ac:	f000 f99e 	bl	80208ec <_svfiprintf_r>
 80205b0:	9b02      	ldr	r3, [sp, #8]
 80205b2:	2200      	movs	r2, #0
 80205b4:	701a      	strb	r2, [r3, #0]
 80205b6:	b01c      	add	sp, #112	; 0x70
 80205b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80205bc:	b003      	add	sp, #12
 80205be:	4770      	bx	lr
 80205c0:	20000194 	.word	0x20000194
 80205c4:	ffff0208 	.word	0xffff0208

080205c8 <memset>:
 80205c8:	4402      	add	r2, r0
 80205ca:	4603      	mov	r3, r0
 80205cc:	4293      	cmp	r3, r2
 80205ce:	d100      	bne.n	80205d2 <memset+0xa>
 80205d0:	4770      	bx	lr
 80205d2:	f803 1b01 	strb.w	r1, [r3], #1
 80205d6:	e7f9      	b.n	80205cc <memset+0x4>

080205d8 <__errno>:
 80205d8:	4b01      	ldr	r3, [pc, #4]	; (80205e0 <__errno+0x8>)
 80205da:	6818      	ldr	r0, [r3, #0]
 80205dc:	4770      	bx	lr
 80205de:	bf00      	nop
 80205e0:	20000194 	.word	0x20000194

080205e4 <__libc_init_array>:
 80205e4:	b570      	push	{r4, r5, r6, lr}
 80205e6:	4d0d      	ldr	r5, [pc, #52]	; (802061c <__libc_init_array+0x38>)
 80205e8:	4c0d      	ldr	r4, [pc, #52]	; (8020620 <__libc_init_array+0x3c>)
 80205ea:	1b64      	subs	r4, r4, r5
 80205ec:	10a4      	asrs	r4, r4, #2
 80205ee:	2600      	movs	r6, #0
 80205f0:	42a6      	cmp	r6, r4
 80205f2:	d109      	bne.n	8020608 <__libc_init_array+0x24>
 80205f4:	4d0b      	ldr	r5, [pc, #44]	; (8020624 <__libc_init_array+0x40>)
 80205f6:	4c0c      	ldr	r4, [pc, #48]	; (8020628 <__libc_init_array+0x44>)
 80205f8:	f000 fc68 	bl	8020ecc <_init>
 80205fc:	1b64      	subs	r4, r4, r5
 80205fe:	10a4      	asrs	r4, r4, #2
 8020600:	2600      	movs	r6, #0
 8020602:	42a6      	cmp	r6, r4
 8020604:	d105      	bne.n	8020612 <__libc_init_array+0x2e>
 8020606:	bd70      	pop	{r4, r5, r6, pc}
 8020608:	f855 3b04 	ldr.w	r3, [r5], #4
 802060c:	4798      	blx	r3
 802060e:	3601      	adds	r6, #1
 8020610:	e7ee      	b.n	80205f0 <__libc_init_array+0xc>
 8020612:	f855 3b04 	ldr.w	r3, [r5], #4
 8020616:	4798      	blx	r3
 8020618:	3601      	adds	r6, #1
 802061a:	e7f2      	b.n	8020602 <__libc_init_array+0x1e>
 802061c:	08022058 	.word	0x08022058
 8020620:	08022058 	.word	0x08022058
 8020624:	08022058 	.word	0x08022058
 8020628:	08022060 	.word	0x08022060

0802062c <__retarget_lock_acquire_recursive>:
 802062c:	4770      	bx	lr

0802062e <__retarget_lock_release_recursive>:
 802062e:	4770      	bx	lr

08020630 <memcpy>:
 8020630:	440a      	add	r2, r1
 8020632:	4291      	cmp	r1, r2
 8020634:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020638:	d100      	bne.n	802063c <memcpy+0xc>
 802063a:	4770      	bx	lr
 802063c:	b510      	push	{r4, lr}
 802063e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020646:	4291      	cmp	r1, r2
 8020648:	d1f9      	bne.n	802063e <memcpy+0xe>
 802064a:	bd10      	pop	{r4, pc}

0802064c <_free_r>:
 802064c:	b538      	push	{r3, r4, r5, lr}
 802064e:	4605      	mov	r5, r0
 8020650:	2900      	cmp	r1, #0
 8020652:	d041      	beq.n	80206d8 <_free_r+0x8c>
 8020654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020658:	1f0c      	subs	r4, r1, #4
 802065a:	2b00      	cmp	r3, #0
 802065c:	bfb8      	it	lt
 802065e:	18e4      	addlt	r4, r4, r3
 8020660:	f000 f8de 	bl	8020820 <__malloc_lock>
 8020664:	4a1d      	ldr	r2, [pc, #116]	; (80206dc <_free_r+0x90>)
 8020666:	6813      	ldr	r3, [r2, #0]
 8020668:	b933      	cbnz	r3, 8020678 <_free_r+0x2c>
 802066a:	6063      	str	r3, [r4, #4]
 802066c:	6014      	str	r4, [r2, #0]
 802066e:	4628      	mov	r0, r5
 8020670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020674:	f000 b8da 	b.w	802082c <__malloc_unlock>
 8020678:	42a3      	cmp	r3, r4
 802067a:	d908      	bls.n	802068e <_free_r+0x42>
 802067c:	6820      	ldr	r0, [r4, #0]
 802067e:	1821      	adds	r1, r4, r0
 8020680:	428b      	cmp	r3, r1
 8020682:	bf01      	itttt	eq
 8020684:	6819      	ldreq	r1, [r3, #0]
 8020686:	685b      	ldreq	r3, [r3, #4]
 8020688:	1809      	addeq	r1, r1, r0
 802068a:	6021      	streq	r1, [r4, #0]
 802068c:	e7ed      	b.n	802066a <_free_r+0x1e>
 802068e:	461a      	mov	r2, r3
 8020690:	685b      	ldr	r3, [r3, #4]
 8020692:	b10b      	cbz	r3, 8020698 <_free_r+0x4c>
 8020694:	42a3      	cmp	r3, r4
 8020696:	d9fa      	bls.n	802068e <_free_r+0x42>
 8020698:	6811      	ldr	r1, [r2, #0]
 802069a:	1850      	adds	r0, r2, r1
 802069c:	42a0      	cmp	r0, r4
 802069e:	d10b      	bne.n	80206b8 <_free_r+0x6c>
 80206a0:	6820      	ldr	r0, [r4, #0]
 80206a2:	4401      	add	r1, r0
 80206a4:	1850      	adds	r0, r2, r1
 80206a6:	4283      	cmp	r3, r0
 80206a8:	6011      	str	r1, [r2, #0]
 80206aa:	d1e0      	bne.n	802066e <_free_r+0x22>
 80206ac:	6818      	ldr	r0, [r3, #0]
 80206ae:	685b      	ldr	r3, [r3, #4]
 80206b0:	6053      	str	r3, [r2, #4]
 80206b2:	4408      	add	r0, r1
 80206b4:	6010      	str	r0, [r2, #0]
 80206b6:	e7da      	b.n	802066e <_free_r+0x22>
 80206b8:	d902      	bls.n	80206c0 <_free_r+0x74>
 80206ba:	230c      	movs	r3, #12
 80206bc:	602b      	str	r3, [r5, #0]
 80206be:	e7d6      	b.n	802066e <_free_r+0x22>
 80206c0:	6820      	ldr	r0, [r4, #0]
 80206c2:	1821      	adds	r1, r4, r0
 80206c4:	428b      	cmp	r3, r1
 80206c6:	bf04      	itt	eq
 80206c8:	6819      	ldreq	r1, [r3, #0]
 80206ca:	685b      	ldreq	r3, [r3, #4]
 80206cc:	6063      	str	r3, [r4, #4]
 80206ce:	bf04      	itt	eq
 80206d0:	1809      	addeq	r1, r1, r0
 80206d2:	6021      	streq	r1, [r4, #0]
 80206d4:	6054      	str	r4, [r2, #4]
 80206d6:	e7ca      	b.n	802066e <_free_r+0x22>
 80206d8:	bd38      	pop	{r3, r4, r5, pc}
 80206da:	bf00      	nop
 80206dc:	200025c4 	.word	0x200025c4

080206e0 <sbrk_aligned>:
 80206e0:	b570      	push	{r4, r5, r6, lr}
 80206e2:	4e0e      	ldr	r6, [pc, #56]	; (802071c <sbrk_aligned+0x3c>)
 80206e4:	460c      	mov	r4, r1
 80206e6:	6831      	ldr	r1, [r6, #0]
 80206e8:	4605      	mov	r5, r0
 80206ea:	b911      	cbnz	r1, 80206f2 <sbrk_aligned+0x12>
 80206ec:	f000 fba6 	bl	8020e3c <_sbrk_r>
 80206f0:	6030      	str	r0, [r6, #0]
 80206f2:	4621      	mov	r1, r4
 80206f4:	4628      	mov	r0, r5
 80206f6:	f000 fba1 	bl	8020e3c <_sbrk_r>
 80206fa:	1c43      	adds	r3, r0, #1
 80206fc:	d00a      	beq.n	8020714 <sbrk_aligned+0x34>
 80206fe:	1cc4      	adds	r4, r0, #3
 8020700:	f024 0403 	bic.w	r4, r4, #3
 8020704:	42a0      	cmp	r0, r4
 8020706:	d007      	beq.n	8020718 <sbrk_aligned+0x38>
 8020708:	1a21      	subs	r1, r4, r0
 802070a:	4628      	mov	r0, r5
 802070c:	f000 fb96 	bl	8020e3c <_sbrk_r>
 8020710:	3001      	adds	r0, #1
 8020712:	d101      	bne.n	8020718 <sbrk_aligned+0x38>
 8020714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8020718:	4620      	mov	r0, r4
 802071a:	bd70      	pop	{r4, r5, r6, pc}
 802071c:	200025c8 	.word	0x200025c8

08020720 <_malloc_r>:
 8020720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020724:	1ccd      	adds	r5, r1, #3
 8020726:	f025 0503 	bic.w	r5, r5, #3
 802072a:	3508      	adds	r5, #8
 802072c:	2d0c      	cmp	r5, #12
 802072e:	bf38      	it	cc
 8020730:	250c      	movcc	r5, #12
 8020732:	2d00      	cmp	r5, #0
 8020734:	4607      	mov	r7, r0
 8020736:	db01      	blt.n	802073c <_malloc_r+0x1c>
 8020738:	42a9      	cmp	r1, r5
 802073a:	d905      	bls.n	8020748 <_malloc_r+0x28>
 802073c:	230c      	movs	r3, #12
 802073e:	603b      	str	r3, [r7, #0]
 8020740:	2600      	movs	r6, #0
 8020742:	4630      	mov	r0, r6
 8020744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020748:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802081c <_malloc_r+0xfc>
 802074c:	f000 f868 	bl	8020820 <__malloc_lock>
 8020750:	f8d8 3000 	ldr.w	r3, [r8]
 8020754:	461c      	mov	r4, r3
 8020756:	bb5c      	cbnz	r4, 80207b0 <_malloc_r+0x90>
 8020758:	4629      	mov	r1, r5
 802075a:	4638      	mov	r0, r7
 802075c:	f7ff ffc0 	bl	80206e0 <sbrk_aligned>
 8020760:	1c43      	adds	r3, r0, #1
 8020762:	4604      	mov	r4, r0
 8020764:	d155      	bne.n	8020812 <_malloc_r+0xf2>
 8020766:	f8d8 4000 	ldr.w	r4, [r8]
 802076a:	4626      	mov	r6, r4
 802076c:	2e00      	cmp	r6, #0
 802076e:	d145      	bne.n	80207fc <_malloc_r+0xdc>
 8020770:	2c00      	cmp	r4, #0
 8020772:	d048      	beq.n	8020806 <_malloc_r+0xe6>
 8020774:	6823      	ldr	r3, [r4, #0]
 8020776:	4631      	mov	r1, r6
 8020778:	4638      	mov	r0, r7
 802077a:	eb04 0903 	add.w	r9, r4, r3
 802077e:	f000 fb5d 	bl	8020e3c <_sbrk_r>
 8020782:	4581      	cmp	r9, r0
 8020784:	d13f      	bne.n	8020806 <_malloc_r+0xe6>
 8020786:	6821      	ldr	r1, [r4, #0]
 8020788:	1a6d      	subs	r5, r5, r1
 802078a:	4629      	mov	r1, r5
 802078c:	4638      	mov	r0, r7
 802078e:	f7ff ffa7 	bl	80206e0 <sbrk_aligned>
 8020792:	3001      	adds	r0, #1
 8020794:	d037      	beq.n	8020806 <_malloc_r+0xe6>
 8020796:	6823      	ldr	r3, [r4, #0]
 8020798:	442b      	add	r3, r5
 802079a:	6023      	str	r3, [r4, #0]
 802079c:	f8d8 3000 	ldr.w	r3, [r8]
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d038      	beq.n	8020816 <_malloc_r+0xf6>
 80207a4:	685a      	ldr	r2, [r3, #4]
 80207a6:	42a2      	cmp	r2, r4
 80207a8:	d12b      	bne.n	8020802 <_malloc_r+0xe2>
 80207aa:	2200      	movs	r2, #0
 80207ac:	605a      	str	r2, [r3, #4]
 80207ae:	e00f      	b.n	80207d0 <_malloc_r+0xb0>
 80207b0:	6822      	ldr	r2, [r4, #0]
 80207b2:	1b52      	subs	r2, r2, r5
 80207b4:	d41f      	bmi.n	80207f6 <_malloc_r+0xd6>
 80207b6:	2a0b      	cmp	r2, #11
 80207b8:	d917      	bls.n	80207ea <_malloc_r+0xca>
 80207ba:	1961      	adds	r1, r4, r5
 80207bc:	42a3      	cmp	r3, r4
 80207be:	6025      	str	r5, [r4, #0]
 80207c0:	bf18      	it	ne
 80207c2:	6059      	strne	r1, [r3, #4]
 80207c4:	6863      	ldr	r3, [r4, #4]
 80207c6:	bf08      	it	eq
 80207c8:	f8c8 1000 	streq.w	r1, [r8]
 80207cc:	5162      	str	r2, [r4, r5]
 80207ce:	604b      	str	r3, [r1, #4]
 80207d0:	4638      	mov	r0, r7
 80207d2:	f104 060b 	add.w	r6, r4, #11
 80207d6:	f000 f829 	bl	802082c <__malloc_unlock>
 80207da:	f026 0607 	bic.w	r6, r6, #7
 80207de:	1d23      	adds	r3, r4, #4
 80207e0:	1af2      	subs	r2, r6, r3
 80207e2:	d0ae      	beq.n	8020742 <_malloc_r+0x22>
 80207e4:	1b9b      	subs	r3, r3, r6
 80207e6:	50a3      	str	r3, [r4, r2]
 80207e8:	e7ab      	b.n	8020742 <_malloc_r+0x22>
 80207ea:	42a3      	cmp	r3, r4
 80207ec:	6862      	ldr	r2, [r4, #4]
 80207ee:	d1dd      	bne.n	80207ac <_malloc_r+0x8c>
 80207f0:	f8c8 2000 	str.w	r2, [r8]
 80207f4:	e7ec      	b.n	80207d0 <_malloc_r+0xb0>
 80207f6:	4623      	mov	r3, r4
 80207f8:	6864      	ldr	r4, [r4, #4]
 80207fa:	e7ac      	b.n	8020756 <_malloc_r+0x36>
 80207fc:	4634      	mov	r4, r6
 80207fe:	6876      	ldr	r6, [r6, #4]
 8020800:	e7b4      	b.n	802076c <_malloc_r+0x4c>
 8020802:	4613      	mov	r3, r2
 8020804:	e7cc      	b.n	80207a0 <_malloc_r+0x80>
 8020806:	230c      	movs	r3, #12
 8020808:	603b      	str	r3, [r7, #0]
 802080a:	4638      	mov	r0, r7
 802080c:	f000 f80e 	bl	802082c <__malloc_unlock>
 8020810:	e797      	b.n	8020742 <_malloc_r+0x22>
 8020812:	6025      	str	r5, [r4, #0]
 8020814:	e7dc      	b.n	80207d0 <_malloc_r+0xb0>
 8020816:	605b      	str	r3, [r3, #4]
 8020818:	deff      	udf	#255	; 0xff
 802081a:	bf00      	nop
 802081c:	200025c4 	.word	0x200025c4

08020820 <__malloc_lock>:
 8020820:	4801      	ldr	r0, [pc, #4]	; (8020828 <__malloc_lock+0x8>)
 8020822:	f7ff bf03 	b.w	802062c <__retarget_lock_acquire_recursive>
 8020826:	bf00      	nop
 8020828:	200025c0 	.word	0x200025c0

0802082c <__malloc_unlock>:
 802082c:	4801      	ldr	r0, [pc, #4]	; (8020834 <__malloc_unlock+0x8>)
 802082e:	f7ff befe 	b.w	802062e <__retarget_lock_release_recursive>
 8020832:	bf00      	nop
 8020834:	200025c0 	.word	0x200025c0

08020838 <__ssputs_r>:
 8020838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802083c:	688e      	ldr	r6, [r1, #8]
 802083e:	461f      	mov	r7, r3
 8020840:	42be      	cmp	r6, r7
 8020842:	680b      	ldr	r3, [r1, #0]
 8020844:	4682      	mov	sl, r0
 8020846:	460c      	mov	r4, r1
 8020848:	4690      	mov	r8, r2
 802084a:	d82c      	bhi.n	80208a6 <__ssputs_r+0x6e>
 802084c:	898a      	ldrh	r2, [r1, #12]
 802084e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020852:	d026      	beq.n	80208a2 <__ssputs_r+0x6a>
 8020854:	6965      	ldr	r5, [r4, #20]
 8020856:	6909      	ldr	r1, [r1, #16]
 8020858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802085c:	eba3 0901 	sub.w	r9, r3, r1
 8020860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020864:	1c7b      	adds	r3, r7, #1
 8020866:	444b      	add	r3, r9
 8020868:	106d      	asrs	r5, r5, #1
 802086a:	429d      	cmp	r5, r3
 802086c:	bf38      	it	cc
 802086e:	461d      	movcc	r5, r3
 8020870:	0553      	lsls	r3, r2, #21
 8020872:	d527      	bpl.n	80208c4 <__ssputs_r+0x8c>
 8020874:	4629      	mov	r1, r5
 8020876:	f7ff ff53 	bl	8020720 <_malloc_r>
 802087a:	4606      	mov	r6, r0
 802087c:	b360      	cbz	r0, 80208d8 <__ssputs_r+0xa0>
 802087e:	6921      	ldr	r1, [r4, #16]
 8020880:	464a      	mov	r2, r9
 8020882:	f7ff fed5 	bl	8020630 <memcpy>
 8020886:	89a3      	ldrh	r3, [r4, #12]
 8020888:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020890:	81a3      	strh	r3, [r4, #12]
 8020892:	6126      	str	r6, [r4, #16]
 8020894:	6165      	str	r5, [r4, #20]
 8020896:	444e      	add	r6, r9
 8020898:	eba5 0509 	sub.w	r5, r5, r9
 802089c:	6026      	str	r6, [r4, #0]
 802089e:	60a5      	str	r5, [r4, #8]
 80208a0:	463e      	mov	r6, r7
 80208a2:	42be      	cmp	r6, r7
 80208a4:	d900      	bls.n	80208a8 <__ssputs_r+0x70>
 80208a6:	463e      	mov	r6, r7
 80208a8:	6820      	ldr	r0, [r4, #0]
 80208aa:	4632      	mov	r2, r6
 80208ac:	4641      	mov	r1, r8
 80208ae:	f000 faab 	bl	8020e08 <memmove>
 80208b2:	68a3      	ldr	r3, [r4, #8]
 80208b4:	1b9b      	subs	r3, r3, r6
 80208b6:	60a3      	str	r3, [r4, #8]
 80208b8:	6823      	ldr	r3, [r4, #0]
 80208ba:	4433      	add	r3, r6
 80208bc:	6023      	str	r3, [r4, #0]
 80208be:	2000      	movs	r0, #0
 80208c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80208c4:	462a      	mov	r2, r5
 80208c6:	f000 fac9 	bl	8020e5c <_realloc_r>
 80208ca:	4606      	mov	r6, r0
 80208cc:	2800      	cmp	r0, #0
 80208ce:	d1e0      	bne.n	8020892 <__ssputs_r+0x5a>
 80208d0:	6921      	ldr	r1, [r4, #16]
 80208d2:	4650      	mov	r0, sl
 80208d4:	f7ff feba 	bl	802064c <_free_r>
 80208d8:	230c      	movs	r3, #12
 80208da:	f8ca 3000 	str.w	r3, [sl]
 80208de:	89a3      	ldrh	r3, [r4, #12]
 80208e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80208e4:	81a3      	strh	r3, [r4, #12]
 80208e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80208ea:	e7e9      	b.n	80208c0 <__ssputs_r+0x88>

080208ec <_svfiprintf_r>:
 80208ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f0:	4698      	mov	r8, r3
 80208f2:	898b      	ldrh	r3, [r1, #12]
 80208f4:	061b      	lsls	r3, r3, #24
 80208f6:	b09d      	sub	sp, #116	; 0x74
 80208f8:	4607      	mov	r7, r0
 80208fa:	460d      	mov	r5, r1
 80208fc:	4614      	mov	r4, r2
 80208fe:	d50e      	bpl.n	802091e <_svfiprintf_r+0x32>
 8020900:	690b      	ldr	r3, [r1, #16]
 8020902:	b963      	cbnz	r3, 802091e <_svfiprintf_r+0x32>
 8020904:	2140      	movs	r1, #64	; 0x40
 8020906:	f7ff ff0b 	bl	8020720 <_malloc_r>
 802090a:	6028      	str	r0, [r5, #0]
 802090c:	6128      	str	r0, [r5, #16]
 802090e:	b920      	cbnz	r0, 802091a <_svfiprintf_r+0x2e>
 8020910:	230c      	movs	r3, #12
 8020912:	603b      	str	r3, [r7, #0]
 8020914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020918:	e0d0      	b.n	8020abc <_svfiprintf_r+0x1d0>
 802091a:	2340      	movs	r3, #64	; 0x40
 802091c:	616b      	str	r3, [r5, #20]
 802091e:	2300      	movs	r3, #0
 8020920:	9309      	str	r3, [sp, #36]	; 0x24
 8020922:	2320      	movs	r3, #32
 8020924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020928:	f8cd 800c 	str.w	r8, [sp, #12]
 802092c:	2330      	movs	r3, #48	; 0x30
 802092e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8020ad4 <_svfiprintf_r+0x1e8>
 8020932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020936:	f04f 0901 	mov.w	r9, #1
 802093a:	4623      	mov	r3, r4
 802093c:	469a      	mov	sl, r3
 802093e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020942:	b10a      	cbz	r2, 8020948 <_svfiprintf_r+0x5c>
 8020944:	2a25      	cmp	r2, #37	; 0x25
 8020946:	d1f9      	bne.n	802093c <_svfiprintf_r+0x50>
 8020948:	ebba 0b04 	subs.w	fp, sl, r4
 802094c:	d00b      	beq.n	8020966 <_svfiprintf_r+0x7a>
 802094e:	465b      	mov	r3, fp
 8020950:	4622      	mov	r2, r4
 8020952:	4629      	mov	r1, r5
 8020954:	4638      	mov	r0, r7
 8020956:	f7ff ff6f 	bl	8020838 <__ssputs_r>
 802095a:	3001      	adds	r0, #1
 802095c:	f000 80a9 	beq.w	8020ab2 <_svfiprintf_r+0x1c6>
 8020960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020962:	445a      	add	r2, fp
 8020964:	9209      	str	r2, [sp, #36]	; 0x24
 8020966:	f89a 3000 	ldrb.w	r3, [sl]
 802096a:	2b00      	cmp	r3, #0
 802096c:	f000 80a1 	beq.w	8020ab2 <_svfiprintf_r+0x1c6>
 8020970:	2300      	movs	r3, #0
 8020972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802097a:	f10a 0a01 	add.w	sl, sl, #1
 802097e:	9304      	str	r3, [sp, #16]
 8020980:	9307      	str	r3, [sp, #28]
 8020982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020986:	931a      	str	r3, [sp, #104]	; 0x68
 8020988:	4654      	mov	r4, sl
 802098a:	2205      	movs	r2, #5
 802098c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020990:	4850      	ldr	r0, [pc, #320]	; (8020ad4 <_svfiprintf_r+0x1e8>)
 8020992:	f7df fbfd 	bl	8000190 <memchr>
 8020996:	9a04      	ldr	r2, [sp, #16]
 8020998:	b9d8      	cbnz	r0, 80209d2 <_svfiprintf_r+0xe6>
 802099a:	06d0      	lsls	r0, r2, #27
 802099c:	bf44      	itt	mi
 802099e:	2320      	movmi	r3, #32
 80209a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209a4:	0711      	lsls	r1, r2, #28
 80209a6:	bf44      	itt	mi
 80209a8:	232b      	movmi	r3, #43	; 0x2b
 80209aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209ae:	f89a 3000 	ldrb.w	r3, [sl]
 80209b2:	2b2a      	cmp	r3, #42	; 0x2a
 80209b4:	d015      	beq.n	80209e2 <_svfiprintf_r+0xf6>
 80209b6:	9a07      	ldr	r2, [sp, #28]
 80209b8:	4654      	mov	r4, sl
 80209ba:	2000      	movs	r0, #0
 80209bc:	f04f 0c0a 	mov.w	ip, #10
 80209c0:	4621      	mov	r1, r4
 80209c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80209c6:	3b30      	subs	r3, #48	; 0x30
 80209c8:	2b09      	cmp	r3, #9
 80209ca:	d94d      	bls.n	8020a68 <_svfiprintf_r+0x17c>
 80209cc:	b1b0      	cbz	r0, 80209fc <_svfiprintf_r+0x110>
 80209ce:	9207      	str	r2, [sp, #28]
 80209d0:	e014      	b.n	80209fc <_svfiprintf_r+0x110>
 80209d2:	eba0 0308 	sub.w	r3, r0, r8
 80209d6:	fa09 f303 	lsl.w	r3, r9, r3
 80209da:	4313      	orrs	r3, r2
 80209dc:	9304      	str	r3, [sp, #16]
 80209de:	46a2      	mov	sl, r4
 80209e0:	e7d2      	b.n	8020988 <_svfiprintf_r+0x9c>
 80209e2:	9b03      	ldr	r3, [sp, #12]
 80209e4:	1d19      	adds	r1, r3, #4
 80209e6:	681b      	ldr	r3, [r3, #0]
 80209e8:	9103      	str	r1, [sp, #12]
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	bfbb      	ittet	lt
 80209ee:	425b      	neglt	r3, r3
 80209f0:	f042 0202 	orrlt.w	r2, r2, #2
 80209f4:	9307      	strge	r3, [sp, #28]
 80209f6:	9307      	strlt	r3, [sp, #28]
 80209f8:	bfb8      	it	lt
 80209fa:	9204      	strlt	r2, [sp, #16]
 80209fc:	7823      	ldrb	r3, [r4, #0]
 80209fe:	2b2e      	cmp	r3, #46	; 0x2e
 8020a00:	d10c      	bne.n	8020a1c <_svfiprintf_r+0x130>
 8020a02:	7863      	ldrb	r3, [r4, #1]
 8020a04:	2b2a      	cmp	r3, #42	; 0x2a
 8020a06:	d134      	bne.n	8020a72 <_svfiprintf_r+0x186>
 8020a08:	9b03      	ldr	r3, [sp, #12]
 8020a0a:	1d1a      	adds	r2, r3, #4
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	9203      	str	r2, [sp, #12]
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	bfb8      	it	lt
 8020a14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020a18:	3402      	adds	r4, #2
 8020a1a:	9305      	str	r3, [sp, #20]
 8020a1c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8020ad8 <_svfiprintf_r+0x1ec>
 8020a20:	7821      	ldrb	r1, [r4, #0]
 8020a22:	2203      	movs	r2, #3
 8020a24:	4650      	mov	r0, sl
 8020a26:	f7df fbb3 	bl	8000190 <memchr>
 8020a2a:	b138      	cbz	r0, 8020a3c <_svfiprintf_r+0x150>
 8020a2c:	9b04      	ldr	r3, [sp, #16]
 8020a2e:	eba0 000a 	sub.w	r0, r0, sl
 8020a32:	2240      	movs	r2, #64	; 0x40
 8020a34:	4082      	lsls	r2, r0
 8020a36:	4313      	orrs	r3, r2
 8020a38:	3401      	adds	r4, #1
 8020a3a:	9304      	str	r3, [sp, #16]
 8020a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a40:	4826      	ldr	r0, [pc, #152]	; (8020adc <_svfiprintf_r+0x1f0>)
 8020a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020a46:	2206      	movs	r2, #6
 8020a48:	f7df fba2 	bl	8000190 <memchr>
 8020a4c:	2800      	cmp	r0, #0
 8020a4e:	d038      	beq.n	8020ac2 <_svfiprintf_r+0x1d6>
 8020a50:	4b23      	ldr	r3, [pc, #140]	; (8020ae0 <_svfiprintf_r+0x1f4>)
 8020a52:	bb1b      	cbnz	r3, 8020a9c <_svfiprintf_r+0x1b0>
 8020a54:	9b03      	ldr	r3, [sp, #12]
 8020a56:	3307      	adds	r3, #7
 8020a58:	f023 0307 	bic.w	r3, r3, #7
 8020a5c:	3308      	adds	r3, #8
 8020a5e:	9303      	str	r3, [sp, #12]
 8020a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a62:	4433      	add	r3, r6
 8020a64:	9309      	str	r3, [sp, #36]	; 0x24
 8020a66:	e768      	b.n	802093a <_svfiprintf_r+0x4e>
 8020a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8020a6c:	460c      	mov	r4, r1
 8020a6e:	2001      	movs	r0, #1
 8020a70:	e7a6      	b.n	80209c0 <_svfiprintf_r+0xd4>
 8020a72:	2300      	movs	r3, #0
 8020a74:	3401      	adds	r4, #1
 8020a76:	9305      	str	r3, [sp, #20]
 8020a78:	4619      	mov	r1, r3
 8020a7a:	f04f 0c0a 	mov.w	ip, #10
 8020a7e:	4620      	mov	r0, r4
 8020a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020a84:	3a30      	subs	r2, #48	; 0x30
 8020a86:	2a09      	cmp	r2, #9
 8020a88:	d903      	bls.n	8020a92 <_svfiprintf_r+0x1a6>
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d0c6      	beq.n	8020a1c <_svfiprintf_r+0x130>
 8020a8e:	9105      	str	r1, [sp, #20]
 8020a90:	e7c4      	b.n	8020a1c <_svfiprintf_r+0x130>
 8020a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8020a96:	4604      	mov	r4, r0
 8020a98:	2301      	movs	r3, #1
 8020a9a:	e7f0      	b.n	8020a7e <_svfiprintf_r+0x192>
 8020a9c:	ab03      	add	r3, sp, #12
 8020a9e:	9300      	str	r3, [sp, #0]
 8020aa0:	462a      	mov	r2, r5
 8020aa2:	4b10      	ldr	r3, [pc, #64]	; (8020ae4 <_svfiprintf_r+0x1f8>)
 8020aa4:	a904      	add	r1, sp, #16
 8020aa6:	4638      	mov	r0, r7
 8020aa8:	f3af 8000 	nop.w
 8020aac:	1c42      	adds	r2, r0, #1
 8020aae:	4606      	mov	r6, r0
 8020ab0:	d1d6      	bne.n	8020a60 <_svfiprintf_r+0x174>
 8020ab2:	89ab      	ldrh	r3, [r5, #12]
 8020ab4:	065b      	lsls	r3, r3, #25
 8020ab6:	f53f af2d 	bmi.w	8020914 <_svfiprintf_r+0x28>
 8020aba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020abc:	b01d      	add	sp, #116	; 0x74
 8020abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ac2:	ab03      	add	r3, sp, #12
 8020ac4:	9300      	str	r3, [sp, #0]
 8020ac6:	462a      	mov	r2, r5
 8020ac8:	4b06      	ldr	r3, [pc, #24]	; (8020ae4 <_svfiprintf_r+0x1f8>)
 8020aca:	a904      	add	r1, sp, #16
 8020acc:	4638      	mov	r0, r7
 8020ace:	f000 f879 	bl	8020bc4 <_printf_i>
 8020ad2:	e7eb      	b.n	8020aac <_svfiprintf_r+0x1c0>
 8020ad4:	08021f44 	.word	0x08021f44
 8020ad8:	08021f4a 	.word	0x08021f4a
 8020adc:	08021f4e 	.word	0x08021f4e
 8020ae0:	00000000 	.word	0x00000000
 8020ae4:	08020839 	.word	0x08020839

08020ae8 <_printf_common>:
 8020ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020aec:	4616      	mov	r6, r2
 8020aee:	4699      	mov	r9, r3
 8020af0:	688a      	ldr	r2, [r1, #8]
 8020af2:	690b      	ldr	r3, [r1, #16]
 8020af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020af8:	4293      	cmp	r3, r2
 8020afa:	bfb8      	it	lt
 8020afc:	4613      	movlt	r3, r2
 8020afe:	6033      	str	r3, [r6, #0]
 8020b00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020b04:	4607      	mov	r7, r0
 8020b06:	460c      	mov	r4, r1
 8020b08:	b10a      	cbz	r2, 8020b0e <_printf_common+0x26>
 8020b0a:	3301      	adds	r3, #1
 8020b0c:	6033      	str	r3, [r6, #0]
 8020b0e:	6823      	ldr	r3, [r4, #0]
 8020b10:	0699      	lsls	r1, r3, #26
 8020b12:	bf42      	ittt	mi
 8020b14:	6833      	ldrmi	r3, [r6, #0]
 8020b16:	3302      	addmi	r3, #2
 8020b18:	6033      	strmi	r3, [r6, #0]
 8020b1a:	6825      	ldr	r5, [r4, #0]
 8020b1c:	f015 0506 	ands.w	r5, r5, #6
 8020b20:	d106      	bne.n	8020b30 <_printf_common+0x48>
 8020b22:	f104 0a19 	add.w	sl, r4, #25
 8020b26:	68e3      	ldr	r3, [r4, #12]
 8020b28:	6832      	ldr	r2, [r6, #0]
 8020b2a:	1a9b      	subs	r3, r3, r2
 8020b2c:	42ab      	cmp	r3, r5
 8020b2e:	dc26      	bgt.n	8020b7e <_printf_common+0x96>
 8020b30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020b34:	1e13      	subs	r3, r2, #0
 8020b36:	6822      	ldr	r2, [r4, #0]
 8020b38:	bf18      	it	ne
 8020b3a:	2301      	movne	r3, #1
 8020b3c:	0692      	lsls	r2, r2, #26
 8020b3e:	d42b      	bmi.n	8020b98 <_printf_common+0xb0>
 8020b40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020b44:	4649      	mov	r1, r9
 8020b46:	4638      	mov	r0, r7
 8020b48:	47c0      	blx	r8
 8020b4a:	3001      	adds	r0, #1
 8020b4c:	d01e      	beq.n	8020b8c <_printf_common+0xa4>
 8020b4e:	6823      	ldr	r3, [r4, #0]
 8020b50:	6922      	ldr	r2, [r4, #16]
 8020b52:	f003 0306 	and.w	r3, r3, #6
 8020b56:	2b04      	cmp	r3, #4
 8020b58:	bf02      	ittt	eq
 8020b5a:	68e5      	ldreq	r5, [r4, #12]
 8020b5c:	6833      	ldreq	r3, [r6, #0]
 8020b5e:	1aed      	subeq	r5, r5, r3
 8020b60:	68a3      	ldr	r3, [r4, #8]
 8020b62:	bf0c      	ite	eq
 8020b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020b68:	2500      	movne	r5, #0
 8020b6a:	4293      	cmp	r3, r2
 8020b6c:	bfc4      	itt	gt
 8020b6e:	1a9b      	subgt	r3, r3, r2
 8020b70:	18ed      	addgt	r5, r5, r3
 8020b72:	2600      	movs	r6, #0
 8020b74:	341a      	adds	r4, #26
 8020b76:	42b5      	cmp	r5, r6
 8020b78:	d11a      	bne.n	8020bb0 <_printf_common+0xc8>
 8020b7a:	2000      	movs	r0, #0
 8020b7c:	e008      	b.n	8020b90 <_printf_common+0xa8>
 8020b7e:	2301      	movs	r3, #1
 8020b80:	4652      	mov	r2, sl
 8020b82:	4649      	mov	r1, r9
 8020b84:	4638      	mov	r0, r7
 8020b86:	47c0      	blx	r8
 8020b88:	3001      	adds	r0, #1
 8020b8a:	d103      	bne.n	8020b94 <_printf_common+0xac>
 8020b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b94:	3501      	adds	r5, #1
 8020b96:	e7c6      	b.n	8020b26 <_printf_common+0x3e>
 8020b98:	18e1      	adds	r1, r4, r3
 8020b9a:	1c5a      	adds	r2, r3, #1
 8020b9c:	2030      	movs	r0, #48	; 0x30
 8020b9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020ba2:	4422      	add	r2, r4
 8020ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020ba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020bac:	3302      	adds	r3, #2
 8020bae:	e7c7      	b.n	8020b40 <_printf_common+0x58>
 8020bb0:	2301      	movs	r3, #1
 8020bb2:	4622      	mov	r2, r4
 8020bb4:	4649      	mov	r1, r9
 8020bb6:	4638      	mov	r0, r7
 8020bb8:	47c0      	blx	r8
 8020bba:	3001      	adds	r0, #1
 8020bbc:	d0e6      	beq.n	8020b8c <_printf_common+0xa4>
 8020bbe:	3601      	adds	r6, #1
 8020bc0:	e7d9      	b.n	8020b76 <_printf_common+0x8e>
	...

08020bc4 <_printf_i>:
 8020bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020bc8:	7e0f      	ldrb	r7, [r1, #24]
 8020bca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020bcc:	2f78      	cmp	r7, #120	; 0x78
 8020bce:	4691      	mov	r9, r2
 8020bd0:	4680      	mov	r8, r0
 8020bd2:	460c      	mov	r4, r1
 8020bd4:	469a      	mov	sl, r3
 8020bd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020bda:	d807      	bhi.n	8020bec <_printf_i+0x28>
 8020bdc:	2f62      	cmp	r7, #98	; 0x62
 8020bde:	d80a      	bhi.n	8020bf6 <_printf_i+0x32>
 8020be0:	2f00      	cmp	r7, #0
 8020be2:	f000 80d4 	beq.w	8020d8e <_printf_i+0x1ca>
 8020be6:	2f58      	cmp	r7, #88	; 0x58
 8020be8:	f000 80c0 	beq.w	8020d6c <_printf_i+0x1a8>
 8020bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020bf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020bf4:	e03a      	b.n	8020c6c <_printf_i+0xa8>
 8020bf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020bfa:	2b15      	cmp	r3, #21
 8020bfc:	d8f6      	bhi.n	8020bec <_printf_i+0x28>
 8020bfe:	a101      	add	r1, pc, #4	; (adr r1, 8020c04 <_printf_i+0x40>)
 8020c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020c04:	08020c5d 	.word	0x08020c5d
 8020c08:	08020c71 	.word	0x08020c71
 8020c0c:	08020bed 	.word	0x08020bed
 8020c10:	08020bed 	.word	0x08020bed
 8020c14:	08020bed 	.word	0x08020bed
 8020c18:	08020bed 	.word	0x08020bed
 8020c1c:	08020c71 	.word	0x08020c71
 8020c20:	08020bed 	.word	0x08020bed
 8020c24:	08020bed 	.word	0x08020bed
 8020c28:	08020bed 	.word	0x08020bed
 8020c2c:	08020bed 	.word	0x08020bed
 8020c30:	08020d75 	.word	0x08020d75
 8020c34:	08020c9d 	.word	0x08020c9d
 8020c38:	08020d2f 	.word	0x08020d2f
 8020c3c:	08020bed 	.word	0x08020bed
 8020c40:	08020bed 	.word	0x08020bed
 8020c44:	08020d97 	.word	0x08020d97
 8020c48:	08020bed 	.word	0x08020bed
 8020c4c:	08020c9d 	.word	0x08020c9d
 8020c50:	08020bed 	.word	0x08020bed
 8020c54:	08020bed 	.word	0x08020bed
 8020c58:	08020d37 	.word	0x08020d37
 8020c5c:	682b      	ldr	r3, [r5, #0]
 8020c5e:	1d1a      	adds	r2, r3, #4
 8020c60:	681b      	ldr	r3, [r3, #0]
 8020c62:	602a      	str	r2, [r5, #0]
 8020c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020c6c:	2301      	movs	r3, #1
 8020c6e:	e09f      	b.n	8020db0 <_printf_i+0x1ec>
 8020c70:	6820      	ldr	r0, [r4, #0]
 8020c72:	682b      	ldr	r3, [r5, #0]
 8020c74:	0607      	lsls	r7, r0, #24
 8020c76:	f103 0104 	add.w	r1, r3, #4
 8020c7a:	6029      	str	r1, [r5, #0]
 8020c7c:	d501      	bpl.n	8020c82 <_printf_i+0xbe>
 8020c7e:	681e      	ldr	r6, [r3, #0]
 8020c80:	e003      	b.n	8020c8a <_printf_i+0xc6>
 8020c82:	0646      	lsls	r6, r0, #25
 8020c84:	d5fb      	bpl.n	8020c7e <_printf_i+0xba>
 8020c86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020c8a:	2e00      	cmp	r6, #0
 8020c8c:	da03      	bge.n	8020c96 <_printf_i+0xd2>
 8020c8e:	232d      	movs	r3, #45	; 0x2d
 8020c90:	4276      	negs	r6, r6
 8020c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020c96:	485a      	ldr	r0, [pc, #360]	; (8020e00 <_printf_i+0x23c>)
 8020c98:	230a      	movs	r3, #10
 8020c9a:	e012      	b.n	8020cc2 <_printf_i+0xfe>
 8020c9c:	682b      	ldr	r3, [r5, #0]
 8020c9e:	6820      	ldr	r0, [r4, #0]
 8020ca0:	1d19      	adds	r1, r3, #4
 8020ca2:	6029      	str	r1, [r5, #0]
 8020ca4:	0605      	lsls	r5, r0, #24
 8020ca6:	d501      	bpl.n	8020cac <_printf_i+0xe8>
 8020ca8:	681e      	ldr	r6, [r3, #0]
 8020caa:	e002      	b.n	8020cb2 <_printf_i+0xee>
 8020cac:	0641      	lsls	r1, r0, #25
 8020cae:	d5fb      	bpl.n	8020ca8 <_printf_i+0xe4>
 8020cb0:	881e      	ldrh	r6, [r3, #0]
 8020cb2:	4853      	ldr	r0, [pc, #332]	; (8020e00 <_printf_i+0x23c>)
 8020cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8020cb6:	bf0c      	ite	eq
 8020cb8:	2308      	moveq	r3, #8
 8020cba:	230a      	movne	r3, #10
 8020cbc:	2100      	movs	r1, #0
 8020cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020cc2:	6865      	ldr	r5, [r4, #4]
 8020cc4:	60a5      	str	r5, [r4, #8]
 8020cc6:	2d00      	cmp	r5, #0
 8020cc8:	bfa2      	ittt	ge
 8020cca:	6821      	ldrge	r1, [r4, #0]
 8020ccc:	f021 0104 	bicge.w	r1, r1, #4
 8020cd0:	6021      	strge	r1, [r4, #0]
 8020cd2:	b90e      	cbnz	r6, 8020cd8 <_printf_i+0x114>
 8020cd4:	2d00      	cmp	r5, #0
 8020cd6:	d04b      	beq.n	8020d70 <_printf_i+0x1ac>
 8020cd8:	4615      	mov	r5, r2
 8020cda:	fbb6 f1f3 	udiv	r1, r6, r3
 8020cde:	fb03 6711 	mls	r7, r3, r1, r6
 8020ce2:	5dc7      	ldrb	r7, [r0, r7]
 8020ce4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020ce8:	4637      	mov	r7, r6
 8020cea:	42bb      	cmp	r3, r7
 8020cec:	460e      	mov	r6, r1
 8020cee:	d9f4      	bls.n	8020cda <_printf_i+0x116>
 8020cf0:	2b08      	cmp	r3, #8
 8020cf2:	d10b      	bne.n	8020d0c <_printf_i+0x148>
 8020cf4:	6823      	ldr	r3, [r4, #0]
 8020cf6:	07de      	lsls	r6, r3, #31
 8020cf8:	d508      	bpl.n	8020d0c <_printf_i+0x148>
 8020cfa:	6923      	ldr	r3, [r4, #16]
 8020cfc:	6861      	ldr	r1, [r4, #4]
 8020cfe:	4299      	cmp	r1, r3
 8020d00:	bfde      	ittt	le
 8020d02:	2330      	movle	r3, #48	; 0x30
 8020d04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020d08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020d0c:	1b52      	subs	r2, r2, r5
 8020d0e:	6122      	str	r2, [r4, #16]
 8020d10:	f8cd a000 	str.w	sl, [sp]
 8020d14:	464b      	mov	r3, r9
 8020d16:	aa03      	add	r2, sp, #12
 8020d18:	4621      	mov	r1, r4
 8020d1a:	4640      	mov	r0, r8
 8020d1c:	f7ff fee4 	bl	8020ae8 <_printf_common>
 8020d20:	3001      	adds	r0, #1
 8020d22:	d14a      	bne.n	8020dba <_printf_i+0x1f6>
 8020d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020d28:	b004      	add	sp, #16
 8020d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d2e:	6823      	ldr	r3, [r4, #0]
 8020d30:	f043 0320 	orr.w	r3, r3, #32
 8020d34:	6023      	str	r3, [r4, #0]
 8020d36:	4833      	ldr	r0, [pc, #204]	; (8020e04 <_printf_i+0x240>)
 8020d38:	2778      	movs	r7, #120	; 0x78
 8020d3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020d3e:	6823      	ldr	r3, [r4, #0]
 8020d40:	6829      	ldr	r1, [r5, #0]
 8020d42:	061f      	lsls	r7, r3, #24
 8020d44:	f851 6b04 	ldr.w	r6, [r1], #4
 8020d48:	d402      	bmi.n	8020d50 <_printf_i+0x18c>
 8020d4a:	065f      	lsls	r7, r3, #25
 8020d4c:	bf48      	it	mi
 8020d4e:	b2b6      	uxthmi	r6, r6
 8020d50:	07df      	lsls	r7, r3, #31
 8020d52:	bf48      	it	mi
 8020d54:	f043 0320 	orrmi.w	r3, r3, #32
 8020d58:	6029      	str	r1, [r5, #0]
 8020d5a:	bf48      	it	mi
 8020d5c:	6023      	strmi	r3, [r4, #0]
 8020d5e:	b91e      	cbnz	r6, 8020d68 <_printf_i+0x1a4>
 8020d60:	6823      	ldr	r3, [r4, #0]
 8020d62:	f023 0320 	bic.w	r3, r3, #32
 8020d66:	6023      	str	r3, [r4, #0]
 8020d68:	2310      	movs	r3, #16
 8020d6a:	e7a7      	b.n	8020cbc <_printf_i+0xf8>
 8020d6c:	4824      	ldr	r0, [pc, #144]	; (8020e00 <_printf_i+0x23c>)
 8020d6e:	e7e4      	b.n	8020d3a <_printf_i+0x176>
 8020d70:	4615      	mov	r5, r2
 8020d72:	e7bd      	b.n	8020cf0 <_printf_i+0x12c>
 8020d74:	682b      	ldr	r3, [r5, #0]
 8020d76:	6826      	ldr	r6, [r4, #0]
 8020d78:	6961      	ldr	r1, [r4, #20]
 8020d7a:	1d18      	adds	r0, r3, #4
 8020d7c:	6028      	str	r0, [r5, #0]
 8020d7e:	0635      	lsls	r5, r6, #24
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	d501      	bpl.n	8020d88 <_printf_i+0x1c4>
 8020d84:	6019      	str	r1, [r3, #0]
 8020d86:	e002      	b.n	8020d8e <_printf_i+0x1ca>
 8020d88:	0670      	lsls	r0, r6, #25
 8020d8a:	d5fb      	bpl.n	8020d84 <_printf_i+0x1c0>
 8020d8c:	8019      	strh	r1, [r3, #0]
 8020d8e:	2300      	movs	r3, #0
 8020d90:	6123      	str	r3, [r4, #16]
 8020d92:	4615      	mov	r5, r2
 8020d94:	e7bc      	b.n	8020d10 <_printf_i+0x14c>
 8020d96:	682b      	ldr	r3, [r5, #0]
 8020d98:	1d1a      	adds	r2, r3, #4
 8020d9a:	602a      	str	r2, [r5, #0]
 8020d9c:	681d      	ldr	r5, [r3, #0]
 8020d9e:	6862      	ldr	r2, [r4, #4]
 8020da0:	2100      	movs	r1, #0
 8020da2:	4628      	mov	r0, r5
 8020da4:	f7df f9f4 	bl	8000190 <memchr>
 8020da8:	b108      	cbz	r0, 8020dae <_printf_i+0x1ea>
 8020daa:	1b40      	subs	r0, r0, r5
 8020dac:	6060      	str	r0, [r4, #4]
 8020dae:	6863      	ldr	r3, [r4, #4]
 8020db0:	6123      	str	r3, [r4, #16]
 8020db2:	2300      	movs	r3, #0
 8020db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020db8:	e7aa      	b.n	8020d10 <_printf_i+0x14c>
 8020dba:	6923      	ldr	r3, [r4, #16]
 8020dbc:	462a      	mov	r2, r5
 8020dbe:	4649      	mov	r1, r9
 8020dc0:	4640      	mov	r0, r8
 8020dc2:	47d0      	blx	sl
 8020dc4:	3001      	adds	r0, #1
 8020dc6:	d0ad      	beq.n	8020d24 <_printf_i+0x160>
 8020dc8:	6823      	ldr	r3, [r4, #0]
 8020dca:	079b      	lsls	r3, r3, #30
 8020dcc:	d413      	bmi.n	8020df6 <_printf_i+0x232>
 8020dce:	68e0      	ldr	r0, [r4, #12]
 8020dd0:	9b03      	ldr	r3, [sp, #12]
 8020dd2:	4298      	cmp	r0, r3
 8020dd4:	bfb8      	it	lt
 8020dd6:	4618      	movlt	r0, r3
 8020dd8:	e7a6      	b.n	8020d28 <_printf_i+0x164>
 8020dda:	2301      	movs	r3, #1
 8020ddc:	4632      	mov	r2, r6
 8020dde:	4649      	mov	r1, r9
 8020de0:	4640      	mov	r0, r8
 8020de2:	47d0      	blx	sl
 8020de4:	3001      	adds	r0, #1
 8020de6:	d09d      	beq.n	8020d24 <_printf_i+0x160>
 8020de8:	3501      	adds	r5, #1
 8020dea:	68e3      	ldr	r3, [r4, #12]
 8020dec:	9903      	ldr	r1, [sp, #12]
 8020dee:	1a5b      	subs	r3, r3, r1
 8020df0:	42ab      	cmp	r3, r5
 8020df2:	dcf2      	bgt.n	8020dda <_printf_i+0x216>
 8020df4:	e7eb      	b.n	8020dce <_printf_i+0x20a>
 8020df6:	2500      	movs	r5, #0
 8020df8:	f104 0619 	add.w	r6, r4, #25
 8020dfc:	e7f5      	b.n	8020dea <_printf_i+0x226>
 8020dfe:	bf00      	nop
 8020e00:	08021f55 	.word	0x08021f55
 8020e04:	08021f66 	.word	0x08021f66

08020e08 <memmove>:
 8020e08:	4288      	cmp	r0, r1
 8020e0a:	b510      	push	{r4, lr}
 8020e0c:	eb01 0402 	add.w	r4, r1, r2
 8020e10:	d902      	bls.n	8020e18 <memmove+0x10>
 8020e12:	4284      	cmp	r4, r0
 8020e14:	4623      	mov	r3, r4
 8020e16:	d807      	bhi.n	8020e28 <memmove+0x20>
 8020e18:	1e43      	subs	r3, r0, #1
 8020e1a:	42a1      	cmp	r1, r4
 8020e1c:	d008      	beq.n	8020e30 <memmove+0x28>
 8020e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020e26:	e7f8      	b.n	8020e1a <memmove+0x12>
 8020e28:	4402      	add	r2, r0
 8020e2a:	4601      	mov	r1, r0
 8020e2c:	428a      	cmp	r2, r1
 8020e2e:	d100      	bne.n	8020e32 <memmove+0x2a>
 8020e30:	bd10      	pop	{r4, pc}
 8020e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020e3a:	e7f7      	b.n	8020e2c <memmove+0x24>

08020e3c <_sbrk_r>:
 8020e3c:	b538      	push	{r3, r4, r5, lr}
 8020e3e:	4d06      	ldr	r5, [pc, #24]	; (8020e58 <_sbrk_r+0x1c>)
 8020e40:	2300      	movs	r3, #0
 8020e42:	4604      	mov	r4, r0
 8020e44:	4608      	mov	r0, r1
 8020e46:	602b      	str	r3, [r5, #0]
 8020e48:	f7e1 fd8a 	bl	8002960 <_sbrk>
 8020e4c:	1c43      	adds	r3, r0, #1
 8020e4e:	d102      	bne.n	8020e56 <_sbrk_r+0x1a>
 8020e50:	682b      	ldr	r3, [r5, #0]
 8020e52:	b103      	cbz	r3, 8020e56 <_sbrk_r+0x1a>
 8020e54:	6023      	str	r3, [r4, #0]
 8020e56:	bd38      	pop	{r3, r4, r5, pc}
 8020e58:	200025bc 	.word	0x200025bc

08020e5c <_realloc_r>:
 8020e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e60:	4680      	mov	r8, r0
 8020e62:	4614      	mov	r4, r2
 8020e64:	460e      	mov	r6, r1
 8020e66:	b921      	cbnz	r1, 8020e72 <_realloc_r+0x16>
 8020e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020e6c:	4611      	mov	r1, r2
 8020e6e:	f7ff bc57 	b.w	8020720 <_malloc_r>
 8020e72:	b92a      	cbnz	r2, 8020e80 <_realloc_r+0x24>
 8020e74:	f7ff fbea 	bl	802064c <_free_r>
 8020e78:	4625      	mov	r5, r4
 8020e7a:	4628      	mov	r0, r5
 8020e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e80:	f000 f81b 	bl	8020eba <_malloc_usable_size_r>
 8020e84:	4284      	cmp	r4, r0
 8020e86:	4607      	mov	r7, r0
 8020e88:	d802      	bhi.n	8020e90 <_realloc_r+0x34>
 8020e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020e8e:	d812      	bhi.n	8020eb6 <_realloc_r+0x5a>
 8020e90:	4621      	mov	r1, r4
 8020e92:	4640      	mov	r0, r8
 8020e94:	f7ff fc44 	bl	8020720 <_malloc_r>
 8020e98:	4605      	mov	r5, r0
 8020e9a:	2800      	cmp	r0, #0
 8020e9c:	d0ed      	beq.n	8020e7a <_realloc_r+0x1e>
 8020e9e:	42bc      	cmp	r4, r7
 8020ea0:	4622      	mov	r2, r4
 8020ea2:	4631      	mov	r1, r6
 8020ea4:	bf28      	it	cs
 8020ea6:	463a      	movcs	r2, r7
 8020ea8:	f7ff fbc2 	bl	8020630 <memcpy>
 8020eac:	4631      	mov	r1, r6
 8020eae:	4640      	mov	r0, r8
 8020eb0:	f7ff fbcc 	bl	802064c <_free_r>
 8020eb4:	e7e1      	b.n	8020e7a <_realloc_r+0x1e>
 8020eb6:	4635      	mov	r5, r6
 8020eb8:	e7df      	b.n	8020e7a <_realloc_r+0x1e>

08020eba <_malloc_usable_size_r>:
 8020eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020ebe:	1f18      	subs	r0, r3, #4
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	bfbc      	itt	lt
 8020ec4:	580b      	ldrlt	r3, [r1, r0]
 8020ec6:	18c0      	addlt	r0, r0, r3
 8020ec8:	4770      	bx	lr
	...

08020ecc <_init>:
 8020ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ece:	bf00      	nop
 8020ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ed2:	bc08      	pop	{r3}
 8020ed4:	469e      	mov	lr, r3
 8020ed6:	4770      	bx	lr

08020ed8 <_fini>:
 8020ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eda:	bf00      	nop
 8020edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ede:	bc08      	pop	{r3}
 8020ee0:	469e      	mov	lr, r3
 8020ee2:	4770      	bx	lr
