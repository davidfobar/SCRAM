
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020ec4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001094  08021004  08021004  00031004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08022098  08022098  00032098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08022170  08022170  000401ac  2**0
                  CONTENTS
  5 .ARM          00000008  08022170  08022170  00032170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08022178  08022178  000401ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08022178  08022178  00032178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08022180  08022180  00032180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001ac  20000000  08022184  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002314  200001b0  08022330  000401b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200024c4  08022330  000424c4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000401ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005625b  00000000  00000000  000401d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c22e  00000000  00000000  00096431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003c90  00000000  00000000  000a2660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003858  00000000  00000000  000a62f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f3a2  00000000  00000000  000a9b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004bcec  00000000  00000000  000d8eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d735e  00000000  00000000  00124bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001fbf34  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fecc  00000000  00000000  001fbf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b0 	.word	0x200001b0
 800015c:	00000000 	.word	0x00000000
 8000160:	08020fec 	.word	0x08020fec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b4 	.word	0x200001b4
 800017c:	08020fec 	.word	0x08020fec

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_frsub>:
 8000bcc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd0:	e002      	b.n	8000bd8 <__addsf3>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_fsub>:
 8000bd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd8 <__addsf3>:
 8000bd8:	0042      	lsls	r2, r0, #1
 8000bda:	bf1f      	itttt	ne
 8000bdc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be0:	ea92 0f03 	teqne	r2, r3
 8000be4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bec:	d06a      	beq.n	8000cc4 <__addsf3+0xec>
 8000bee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf6:	bfc1      	itttt	gt
 8000bf8:	18d2      	addgt	r2, r2, r3
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	4048      	eorgt	r0, r1
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	bfb8      	it	lt
 8000c02:	425b      	neglt	r3, r3
 8000c04:	2b19      	cmp	r3, #25
 8000c06:	bf88      	it	hi
 8000c08:	4770      	bxhi	lr
 8000c0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c26:	bf18      	it	ne
 8000c28:	4249      	negne	r1, r1
 8000c2a:	ea92 0f03 	teq	r2, r3
 8000c2e:	d03f      	beq.n	8000cb0 <__addsf3+0xd8>
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	fa41 fc03 	asr.w	ip, r1, r3
 8000c38:	eb10 000c 	adds.w	r0, r0, ip
 8000c3c:	f1c3 0320 	rsb	r3, r3, #32
 8000c40:	fa01 f103 	lsl.w	r1, r1, r3
 8000c44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__addsf3+0x78>
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c54:	d313      	bcc.n	8000c7e <__addsf3+0xa6>
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d306      	bcc.n	8000c6a <__addsf3+0x92>
 8000c5c:	0840      	lsrs	r0, r0, #1
 8000c5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c62:	f102 0201 	add.w	r2, r2, #1
 8000c66:	2afe      	cmp	r2, #254	; 0xfe
 8000c68:	d251      	bcs.n	8000d0e <__addsf3+0x136>
 8000c6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c72:	bf08      	it	eq
 8000c74:	f020 0001 	biceq.w	r0, r0, #1
 8000c78:	ea40 0003 	orr.w	r0, r0, r3
 8000c7c:	4770      	bx	lr
 8000c7e:	0049      	lsls	r1, r1, #1
 8000c80:	eb40 0000 	adc.w	r0, r0, r0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	bf28      	it	cs
 8000c88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c8c:	d2ed      	bcs.n	8000c6a <__addsf3+0x92>
 8000c8e:	fab0 fc80 	clz	ip, r0
 8000c92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c96:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9e:	bfaa      	itet	ge
 8000ca0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca4:	4252      	neglt	r2, r2
 8000ca6:	4318      	orrge	r0, r3
 8000ca8:	bfbc      	itt	lt
 8000caa:	40d0      	lsrlt	r0, r2
 8000cac:	4318      	orrlt	r0, r3
 8000cae:	4770      	bx	lr
 8000cb0:	f092 0f00 	teq	r2, #0
 8000cb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb8:	bf06      	itte	eq
 8000cba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cbe:	3201      	addeq	r2, #1
 8000cc0:	3b01      	subne	r3, #1
 8000cc2:	e7b5      	b.n	8000c30 <__addsf3+0x58>
 8000cc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	bf18      	it	ne
 8000cce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd2:	d021      	beq.n	8000d18 <__addsf3+0x140>
 8000cd4:	ea92 0f03 	teq	r2, r3
 8000cd8:	d004      	beq.n	8000ce4 <__addsf3+0x10c>
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	bf08      	it	eq
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	4770      	bx	lr
 8000ce4:	ea90 0f01 	teq	r0, r1
 8000ce8:	bf1c      	itt	ne
 8000cea:	2000      	movne	r0, #0
 8000cec:	4770      	bxne	lr
 8000cee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf2:	d104      	bne.n	8000cfe <__addsf3+0x126>
 8000cf4:	0040      	lsls	r0, r0, #1
 8000cf6:	bf28      	it	cs
 8000cf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	4770      	bx	lr
 8000cfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d02:	bf3c      	itt	cc
 8000d04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d08:	4770      	bxcc	lr
 8000d0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	4770      	bx	lr
 8000d18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d1c:	bf16      	itet	ne
 8000d1e:	4608      	movne	r0, r1
 8000d20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d24:	4601      	movne	r1, r0
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	bf06      	itte	eq
 8000d2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2e:	ea90 0f01 	teqeq	r0, r1
 8000d32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_ui2f>:
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e004      	b.n	8000d48 <__aeabi_i2f+0x8>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_i2f>:
 8000d40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	bf48      	it	mi
 8000d46:	4240      	negmi	r0, r0
 8000d48:	ea5f 0c00 	movs.w	ip, r0
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d54:	4601      	mov	r1, r0
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	e01c      	b.n	8000d96 <__aeabi_l2f+0x2a>

08000d5c <__aeabi_ul2f>:
 8000d5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e00a      	b.n	8000d80 <__aeabi_l2f+0x14>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_l2f>:
 8000d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d78:	d502      	bpl.n	8000d80 <__aeabi_l2f+0x14>
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d80:	ea5f 0c01 	movs.w	ip, r1
 8000d84:	bf02      	ittt	eq
 8000d86:	4684      	moveq	ip, r0
 8000d88:	4601      	moveq	r1, r0
 8000d8a:	2000      	moveq	r0, #0
 8000d8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d90:	bf08      	it	eq
 8000d92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9a:	fabc f28c 	clz	r2, ip
 8000d9e:	3a08      	subs	r2, #8
 8000da0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da4:	db10      	blt.n	8000dc8 <__aeabi_l2f+0x5c>
 8000da6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f102 0220 	add.w	r2, r2, #32
 8000dcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd0:	f1c2 0220 	rsb	r2, r2, #32
 8000dd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ddc:	eb43 0002 	adc.w	r0, r3, r2
 8000de0:	bf08      	it	eq
 8000de2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fmul>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d06f      	beq.n	8000ee0 <__aeabi_fmul+0xf8>
 8000e00:	441a      	add	r2, r3
 8000e02:	ea80 0c01 	eor.w	ip, r0, r1
 8000e06:	0240      	lsls	r0, r0, #9
 8000e08:	bf18      	it	ne
 8000e0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e0e:	d01e      	beq.n	8000e4e <__aeabi_fmul+0x66>
 8000e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e28:	bf3e      	ittt	cc
 8000e2a:	0049      	lslcc	r1, r1, #1
 8000e2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e30:	005b      	lslcc	r3, r3, #1
 8000e32:	ea40 0001 	orr.w	r0, r0, r1
 8000e36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e3a:	2afd      	cmp	r2, #253	; 0xfd
 8000e3c:	d81d      	bhi.n	8000e7a <__aeabi_fmul+0x92>
 8000e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e46:	bf08      	it	eq
 8000e48:	f020 0001 	biceq.w	r0, r0, #1
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e56:	bf08      	it	eq
 8000e58:	0249      	lsleq	r1, r1, #9
 8000e5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e62:	3a7f      	subs	r2, #127	; 0x7f
 8000e64:	bfc2      	ittt	gt
 8000e66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6e:	4770      	bxgt	lr
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	dc5d      	bgt.n	8000f38 <__aeabi_fmul+0x150>
 8000e7c:	f112 0f19 	cmn.w	r2, #25
 8000e80:	bfdc      	itt	le
 8000e82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	4770      	bxle	lr
 8000e88:	f1c2 0200 	rsb	r2, r2, #0
 8000e8c:	0041      	lsls	r1, r0, #1
 8000e8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e92:	f1c2 0220 	rsb	r2, r2, #32
 8000e96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e9e:	f140 0000 	adc.w	r0, r0, #0
 8000ea2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ea6:	bf08      	it	eq
 8000ea8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eac:	4770      	bx	lr
 8000eae:	f092 0f00 	teq	r2, #0
 8000eb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0040      	lsleq	r0, r0, #1
 8000eba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ebe:	3a01      	subeq	r2, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xce>
 8000ec2:	ea40 000c 	orr.w	r0, r0, ip
 8000ec6:	f093 0f00 	teq	r3, #0
 8000eca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0049      	lsleq	r1, r1, #1
 8000ed2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed6:	3b01      	subeq	r3, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fmul+0xe6>
 8000eda:	ea41 010c 	orr.w	r1, r1, ip
 8000ede:	e78f      	b.n	8000e00 <__aeabi_fmul+0x18>
 8000ee0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee4:	ea92 0f0c 	teq	r2, ip
 8000ee8:	bf18      	it	ne
 8000eea:	ea93 0f0c 	teqne	r3, ip
 8000eee:	d00a      	beq.n	8000f06 <__aeabi_fmul+0x11e>
 8000ef0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef4:	bf18      	it	ne
 8000ef6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	d1d8      	bne.n	8000eae <__aeabi_fmul+0xc6>
 8000efc:	ea80 0001 	eor.w	r0, r0, r1
 8000f00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f04:	4770      	bx	lr
 8000f06:	f090 0f00 	teq	r0, #0
 8000f0a:	bf17      	itett	ne
 8000f0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f10:	4608      	moveq	r0, r1
 8000f12:	f091 0f00 	teqne	r1, #0
 8000f16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f1a:	d014      	beq.n	8000f46 <__aeabi_fmul+0x15e>
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d101      	bne.n	8000f26 <__aeabi_fmul+0x13e>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d10f      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f26:	ea93 0f0c 	teq	r3, ip
 8000f2a:	d103      	bne.n	8000f34 <__aeabi_fmul+0x14c>
 8000f2c:	024b      	lsls	r3, r1, #9
 8000f2e:	bf18      	it	ne
 8000f30:	4608      	movne	r0, r1
 8000f32:	d108      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f44:	4770      	bx	lr
 8000f46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_fdiv>:
 8000f50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f58:	bf1e      	ittt	ne
 8000f5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f5e:	ea92 0f0c 	teqne	r2, ip
 8000f62:	ea93 0f0c 	teqne	r3, ip
 8000f66:	d069      	beq.n	800103c <__aeabi_fdiv+0xec>
 8000f68:	eba2 0203 	sub.w	r2, r2, r3
 8000f6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f70:	0249      	lsls	r1, r1, #9
 8000f72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f76:	d037      	beq.n	8000fe8 <__aeabi_fdiv+0x98>
 8000f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf38      	it	cc
 8000f8c:	005b      	lslcc	r3, r3, #1
 8000f8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f96:	428b      	cmp	r3, r1
 8000f98:	bf24      	itt	cs
 8000f9a:	1a5b      	subcs	r3, r3, r1
 8000f9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000faa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fb2:	bf24      	itt	cs
 8000fb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	bf18      	it	ne
 8000fce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fd2:	d1e0      	bne.n	8000f96 <__aeabi_fdiv+0x46>
 8000fd4:	2afd      	cmp	r2, #253	; 0xfd
 8000fd6:	f63f af50 	bhi.w	8000e7a <__aeabi_fmul+0x92>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe0:	bf08      	it	eq
 8000fe2:	f020 0001 	biceq.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff0:	327f      	adds	r2, #127	; 0x7f
 8000ff2:	bfc2      	ittt	gt
 8000ff4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ffc:	4770      	bxgt	lr
 8000ffe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	3a01      	subs	r2, #1
 8001008:	e737      	b.n	8000e7a <__aeabi_fmul+0x92>
 800100a:	f092 0f00 	teq	r2, #0
 800100e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0040      	lsleq	r0, r0, #1
 8001016:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800101a:	3a01      	subeq	r2, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xc2>
 800101e:	ea40 000c 	orr.w	r0, r0, ip
 8001022:	f093 0f00 	teq	r3, #0
 8001026:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800102a:	bf02      	ittt	eq
 800102c:	0049      	lsleq	r1, r1, #1
 800102e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001032:	3b01      	subeq	r3, #1
 8001034:	d0f9      	beq.n	800102a <__aeabi_fdiv+0xda>
 8001036:	ea41 010c 	orr.w	r1, r1, ip
 800103a:	e795      	b.n	8000f68 <__aeabi_fdiv+0x18>
 800103c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001040:	ea92 0f0c 	teq	r2, ip
 8001044:	d108      	bne.n	8001058 <__aeabi_fdiv+0x108>
 8001046:	0242      	lsls	r2, r0, #9
 8001048:	f47f af7d 	bne.w	8000f46 <__aeabi_fmul+0x15e>
 800104c:	ea93 0f0c 	teq	r3, ip
 8001050:	f47f af70 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 8001054:	4608      	mov	r0, r1
 8001056:	e776      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001058:	ea93 0f0c 	teq	r3, ip
 800105c:	d104      	bne.n	8001068 <__aeabi_fdiv+0x118>
 800105e:	024b      	lsls	r3, r1, #9
 8001060:	f43f af4c 	beq.w	8000efc <__aeabi_fmul+0x114>
 8001064:	4608      	mov	r0, r1
 8001066:	e76e      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001068:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800106c:	bf18      	it	ne
 800106e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001072:	d1ca      	bne.n	800100a <__aeabi_fdiv+0xba>
 8001074:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001078:	f47f af5c 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 800107c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001080:	f47f af3c 	bne.w	8000efc <__aeabi_fmul+0x114>
 8001084:	e75f      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001086:	bf00      	nop

08001088 <__aeabi_f2iz>:
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001090:	d30f      	bcc.n	80010b2 <__aeabi_f2iz+0x2a>
 8001092:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001096:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800109a:	d90d      	bls.n	80010b8 <__aeabi_f2iz+0x30>
 800109c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ac:	bf18      	it	ne
 80010ae:	4240      	negne	r0, r0
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010bc:	d101      	bne.n	80010c2 <__aeabi_f2iz+0x3a>
 80010be:	0242      	lsls	r2, r0, #9
 80010c0:	d105      	bne.n	80010ce <__aeabi_f2iz+0x46>
 80010c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010c6:	bf08      	it	eq
 80010c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr

080010d4 <__aeabi_f2uiz>:
 80010d4:	0042      	lsls	r2, r0, #1
 80010d6:	d20e      	bcs.n	80010f6 <__aeabi_f2uiz+0x22>
 80010d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010dc:	d30b      	bcc.n	80010f6 <__aeabi_f2uiz+0x22>
 80010de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e6:	d409      	bmi.n	80010fc <__aeabi_f2uiz+0x28>
 80010e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2uiz+0x32>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d102      	bne.n	800110c <__aeabi_f2uiz+0x38>
 8001106:	f04f 30ff 	mov.w	r0, #4294967295
 800110a:	4770      	bx	lr
 800110c:	f04f 0000 	mov.w	r0, #0
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <__aeabi_uldivmod>:
 8001114:	b953      	cbnz	r3, 800112c <__aeabi_uldivmod+0x18>
 8001116:	b94a      	cbnz	r2, 800112c <__aeabi_uldivmod+0x18>
 8001118:	2900      	cmp	r1, #0
 800111a:	bf08      	it	eq
 800111c:	2800      	cmpeq	r0, #0
 800111e:	bf1c      	itt	ne
 8001120:	f04f 31ff 	movne.w	r1, #4294967295
 8001124:	f04f 30ff 	movne.w	r0, #4294967295
 8001128:	f000 b974 	b.w	8001414 <__aeabi_idiv0>
 800112c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001134:	f000 f806 	bl	8001144 <__udivmoddi4>
 8001138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr

08001144 <__udivmoddi4>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	9e08      	ldr	r6, [sp, #32]
 800114a:	460d      	mov	r5, r1
 800114c:	4604      	mov	r4, r0
 800114e:	4688      	mov	r8, r1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14d      	bne.n	80011f0 <__udivmoddi4+0xac>
 8001154:	428a      	cmp	r2, r1
 8001156:	4694      	mov	ip, r2
 8001158:	d968      	bls.n	800122c <__udivmoddi4+0xe8>
 800115a:	fab2 f282 	clz	r2, r2
 800115e:	b152      	cbz	r2, 8001176 <__udivmoddi4+0x32>
 8001160:	fa01 f302 	lsl.w	r3, r1, r2
 8001164:	f1c2 0120 	rsb	r1, r2, #32
 8001168:	fa20 f101 	lsr.w	r1, r0, r1
 800116c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001170:	ea41 0803 	orr.w	r8, r1, r3
 8001174:	4094      	lsls	r4, r2
 8001176:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800117a:	0c21      	lsrs	r1, r4, #16
 800117c:	fbb8 fef5 	udiv	lr, r8, r5
 8001180:	fa1f f78c 	uxth.w	r7, ip
 8001184:	fb05 831e 	mls	r3, r5, lr, r8
 8001188:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800118c:	fb0e f107 	mul.w	r1, lr, r7
 8001190:	4299      	cmp	r1, r3
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x68>
 8001194:	eb1c 0303 	adds.w	r3, ip, r3
 8001198:	f10e 30ff 	add.w	r0, lr, #4294967295
 800119c:	f080 811e 	bcs.w	80013dc <__udivmoddi4+0x298>
 80011a0:	4299      	cmp	r1, r3
 80011a2:	f240 811b 	bls.w	80013dc <__udivmoddi4+0x298>
 80011a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80011aa:	4463      	add	r3, ip
 80011ac:	1a5b      	subs	r3, r3, r1
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	fbb3 f0f5 	udiv	r0, r3, r5
 80011b4:	fb05 3310 	mls	r3, r5, r0, r3
 80011b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011bc:	fb00 f707 	mul.w	r7, r0, r7
 80011c0:	42a7      	cmp	r7, r4
 80011c2:	d90a      	bls.n	80011da <__udivmoddi4+0x96>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80011cc:	f080 8108 	bcs.w	80013e0 <__udivmoddi4+0x29c>
 80011d0:	42a7      	cmp	r7, r4
 80011d2:	f240 8105 	bls.w	80013e0 <__udivmoddi4+0x29c>
 80011d6:	4464      	add	r4, ip
 80011d8:	3802      	subs	r0, #2
 80011da:	1be4      	subs	r4, r4, r7
 80011dc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80011e0:	2100      	movs	r1, #0
 80011e2:	b11e      	cbz	r6, 80011ec <__udivmoddi4+0xa8>
 80011e4:	40d4      	lsrs	r4, r2
 80011e6:	2300      	movs	r3, #0
 80011e8:	e9c6 4300 	strd	r4, r3, [r6]
 80011ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d908      	bls.n	8001206 <__udivmoddi4+0xc2>
 80011f4:	2e00      	cmp	r6, #0
 80011f6:	f000 80ee 	beq.w	80013d6 <__udivmoddi4+0x292>
 80011fa:	2100      	movs	r1, #0
 80011fc:	e9c6 0500 	strd	r0, r5, [r6]
 8001200:	4608      	mov	r0, r1
 8001202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001206:	fab3 f183 	clz	r1, r3
 800120a:	2900      	cmp	r1, #0
 800120c:	d14a      	bne.n	80012a4 <__udivmoddi4+0x160>
 800120e:	42ab      	cmp	r3, r5
 8001210:	d302      	bcc.n	8001218 <__udivmoddi4+0xd4>
 8001212:	4282      	cmp	r2, r0
 8001214:	f200 80f9 	bhi.w	800140a <__udivmoddi4+0x2c6>
 8001218:	1a84      	subs	r4, r0, r2
 800121a:	eb65 0303 	sbc.w	r3, r5, r3
 800121e:	2001      	movs	r0, #1
 8001220:	4698      	mov	r8, r3
 8001222:	2e00      	cmp	r6, #0
 8001224:	d0e2      	beq.n	80011ec <__udivmoddi4+0xa8>
 8001226:	e9c6 4800 	strd	r4, r8, [r6]
 800122a:	e7df      	b.n	80011ec <__udivmoddi4+0xa8>
 800122c:	b902      	cbnz	r2, 8001230 <__udivmoddi4+0xec>
 800122e:	deff      	udf	#255	; 0xff
 8001230:	fab2 f282 	clz	r2, r2
 8001234:	2a00      	cmp	r2, #0
 8001236:	f040 8091 	bne.w	800135c <__udivmoddi4+0x218>
 800123a:	eba1 050c 	sub.w	r5, r1, ip
 800123e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001242:	fa1f fe8c 	uxth.w	lr, ip
 8001246:	2101      	movs	r1, #1
 8001248:	fbb5 f3f7 	udiv	r3, r5, r7
 800124c:	fb07 5013 	mls	r0, r7, r3, r5
 8001250:	0c25      	lsrs	r5, r4, #16
 8001252:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001256:	fb0e f003 	mul.w	r0, lr, r3
 800125a:	42a8      	cmp	r0, r5
 800125c:	d908      	bls.n	8001270 <__udivmoddi4+0x12c>
 800125e:	eb1c 0505 	adds.w	r5, ip, r5
 8001262:	f103 38ff 	add.w	r8, r3, #4294967295
 8001266:	d202      	bcs.n	800126e <__udivmoddi4+0x12a>
 8001268:	42a8      	cmp	r0, r5
 800126a:	f200 80cb 	bhi.w	8001404 <__udivmoddi4+0x2c0>
 800126e:	4643      	mov	r3, r8
 8001270:	1a2d      	subs	r5, r5, r0
 8001272:	b2a4      	uxth	r4, r4
 8001274:	fbb5 f0f7 	udiv	r0, r5, r7
 8001278:	fb07 5510 	mls	r5, r7, r0, r5
 800127c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001280:	fb0e fe00 	mul.w	lr, lr, r0
 8001284:	45a6      	cmp	lr, r4
 8001286:	d908      	bls.n	800129a <__udivmoddi4+0x156>
 8001288:	eb1c 0404 	adds.w	r4, ip, r4
 800128c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001290:	d202      	bcs.n	8001298 <__udivmoddi4+0x154>
 8001292:	45a6      	cmp	lr, r4
 8001294:	f200 80bb 	bhi.w	800140e <__udivmoddi4+0x2ca>
 8001298:	4628      	mov	r0, r5
 800129a:	eba4 040e 	sub.w	r4, r4, lr
 800129e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012a2:	e79e      	b.n	80011e2 <__udivmoddi4+0x9e>
 80012a4:	f1c1 0720 	rsb	r7, r1, #32
 80012a8:	408b      	lsls	r3, r1
 80012aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80012ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80012b2:	fa20 f407 	lsr.w	r4, r0, r7
 80012b6:	fa05 f301 	lsl.w	r3, r5, r1
 80012ba:	431c      	orrs	r4, r3
 80012bc:	40fd      	lsrs	r5, r7
 80012be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012c2:	fa00 f301 	lsl.w	r3, r0, r1
 80012c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80012ca:	0c20      	lsrs	r0, r4, #16
 80012cc:	fa1f fe8c 	uxth.w	lr, ip
 80012d0:	fb09 5518 	mls	r5, r9, r8, r5
 80012d4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80012d8:	fb08 f00e 	mul.w	r0, r8, lr
 80012dc:	42a8      	cmp	r0, r5
 80012de:	fa02 f201 	lsl.w	r2, r2, r1
 80012e2:	d90b      	bls.n	80012fc <__udivmoddi4+0x1b8>
 80012e4:	eb1c 0505 	adds.w	r5, ip, r5
 80012e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80012ec:	f080 8088 	bcs.w	8001400 <__udivmoddi4+0x2bc>
 80012f0:	42a8      	cmp	r0, r5
 80012f2:	f240 8085 	bls.w	8001400 <__udivmoddi4+0x2bc>
 80012f6:	f1a8 0802 	sub.w	r8, r8, #2
 80012fa:	4465      	add	r5, ip
 80012fc:	1a2d      	subs	r5, r5, r0
 80012fe:	b2a4      	uxth	r4, r4
 8001300:	fbb5 f0f9 	udiv	r0, r5, r9
 8001304:	fb09 5510 	mls	r5, r9, r0, r5
 8001308:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800130c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001310:	45ae      	cmp	lr, r5
 8001312:	d908      	bls.n	8001326 <__udivmoddi4+0x1e2>
 8001314:	eb1c 0505 	adds.w	r5, ip, r5
 8001318:	f100 34ff 	add.w	r4, r0, #4294967295
 800131c:	d26c      	bcs.n	80013f8 <__udivmoddi4+0x2b4>
 800131e:	45ae      	cmp	lr, r5
 8001320:	d96a      	bls.n	80013f8 <__udivmoddi4+0x2b4>
 8001322:	3802      	subs	r0, #2
 8001324:	4465      	add	r5, ip
 8001326:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800132a:	fba0 9402 	umull	r9, r4, r0, r2
 800132e:	eba5 050e 	sub.w	r5, r5, lr
 8001332:	42a5      	cmp	r5, r4
 8001334:	46c8      	mov	r8, r9
 8001336:	46a6      	mov	lr, r4
 8001338:	d356      	bcc.n	80013e8 <__udivmoddi4+0x2a4>
 800133a:	d053      	beq.n	80013e4 <__udivmoddi4+0x2a0>
 800133c:	b15e      	cbz	r6, 8001356 <__udivmoddi4+0x212>
 800133e:	ebb3 0208 	subs.w	r2, r3, r8
 8001342:	eb65 050e 	sbc.w	r5, r5, lr
 8001346:	fa05 f707 	lsl.w	r7, r5, r7
 800134a:	fa22 f301 	lsr.w	r3, r2, r1
 800134e:	40cd      	lsrs	r5, r1
 8001350:	431f      	orrs	r7, r3
 8001352:	e9c6 7500 	strd	r7, r5, [r6]
 8001356:	2100      	movs	r1, #0
 8001358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135c:	f1c2 0320 	rsb	r3, r2, #32
 8001360:	fa20 f103 	lsr.w	r1, r0, r3
 8001364:	fa0c fc02 	lsl.w	ip, ip, r2
 8001368:	fa25 f303 	lsr.w	r3, r5, r3
 800136c:	4095      	lsls	r5, r2
 800136e:	430d      	orrs	r5, r1
 8001370:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001374:	fa1f fe8c 	uxth.w	lr, ip
 8001378:	fbb3 f1f7 	udiv	r1, r3, r7
 800137c:	fb07 3011 	mls	r0, r7, r1, r3
 8001380:	0c2b      	lsrs	r3, r5, #16
 8001382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001386:	fb01 f00e 	mul.w	r0, r1, lr
 800138a:	4298      	cmp	r0, r3
 800138c:	fa04 f402 	lsl.w	r4, r4, r2
 8001390:	d908      	bls.n	80013a4 <__udivmoddi4+0x260>
 8001392:	eb1c 0303 	adds.w	r3, ip, r3
 8001396:	f101 38ff 	add.w	r8, r1, #4294967295
 800139a:	d22f      	bcs.n	80013fc <__udivmoddi4+0x2b8>
 800139c:	4298      	cmp	r0, r3
 800139e:	d92d      	bls.n	80013fc <__udivmoddi4+0x2b8>
 80013a0:	3902      	subs	r1, #2
 80013a2:	4463      	add	r3, ip
 80013a4:	1a1b      	subs	r3, r3, r0
 80013a6:	b2ad      	uxth	r5, r5
 80013a8:	fbb3 f0f7 	udiv	r0, r3, r7
 80013ac:	fb07 3310 	mls	r3, r7, r0, r3
 80013b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013b4:	fb00 f30e 	mul.w	r3, r0, lr
 80013b8:	42ab      	cmp	r3, r5
 80013ba:	d908      	bls.n	80013ce <__udivmoddi4+0x28a>
 80013bc:	eb1c 0505 	adds.w	r5, ip, r5
 80013c0:	f100 38ff 	add.w	r8, r0, #4294967295
 80013c4:	d216      	bcs.n	80013f4 <__udivmoddi4+0x2b0>
 80013c6:	42ab      	cmp	r3, r5
 80013c8:	d914      	bls.n	80013f4 <__udivmoddi4+0x2b0>
 80013ca:	3802      	subs	r0, #2
 80013cc:	4465      	add	r5, ip
 80013ce:	1aed      	subs	r5, r5, r3
 80013d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80013d4:	e738      	b.n	8001248 <__udivmoddi4+0x104>
 80013d6:	4631      	mov	r1, r6
 80013d8:	4630      	mov	r0, r6
 80013da:	e707      	b.n	80011ec <__udivmoddi4+0xa8>
 80013dc:	4686      	mov	lr, r0
 80013de:	e6e5      	b.n	80011ac <__udivmoddi4+0x68>
 80013e0:	4618      	mov	r0, r3
 80013e2:	e6fa      	b.n	80011da <__udivmoddi4+0x96>
 80013e4:	454b      	cmp	r3, r9
 80013e6:	d2a9      	bcs.n	800133c <__udivmoddi4+0x1f8>
 80013e8:	ebb9 0802 	subs.w	r8, r9, r2
 80013ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80013f0:	3801      	subs	r0, #1
 80013f2:	e7a3      	b.n	800133c <__udivmoddi4+0x1f8>
 80013f4:	4640      	mov	r0, r8
 80013f6:	e7ea      	b.n	80013ce <__udivmoddi4+0x28a>
 80013f8:	4620      	mov	r0, r4
 80013fa:	e794      	b.n	8001326 <__udivmoddi4+0x1e2>
 80013fc:	4641      	mov	r1, r8
 80013fe:	e7d1      	b.n	80013a4 <__udivmoddi4+0x260>
 8001400:	46d0      	mov	r8, sl
 8001402:	e77b      	b.n	80012fc <__udivmoddi4+0x1b8>
 8001404:	3b02      	subs	r3, #2
 8001406:	4465      	add	r5, ip
 8001408:	e732      	b.n	8001270 <__udivmoddi4+0x12c>
 800140a:	4608      	mov	r0, r1
 800140c:	e709      	b.n	8001222 <__udivmoddi4+0xde>
 800140e:	4464      	add	r4, ip
 8001410:	3802      	subs	r0, #2
 8001412:	e742      	b.n	800129a <__udivmoddi4+0x156>

08001414 <__aeabi_idiv0>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	43db      	mvns	r3, r3
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148e:	4013      	ands	r3, r2
 8001490:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_ADC_Init+0x94>)
 80014a2:	4a24      	ldr	r2, [pc, #144]	; (8001534 <MX_ADC_Init+0x98>)
 80014a4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_ADC_Init+0x94>)
 80014a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014ac:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_ADC_Init+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_ADC_Init+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_ADC_Init+0x94>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_ADC_Init+0x94>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_ADC_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_ADC_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_ADC_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_ADC_Init+0x94>)
 80014da:	2201      	movs	r2, #1
 80014dc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_ADC_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_ADC_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_ADC_Init+0x94>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_ADC_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_ADC_Init+0x94>)
 80014fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_ADC_Init+0x94>)
 8001504:	2207      	movs	r2, #7
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_ADC_Init+0x94>)
 800150a:	2207      	movs	r2, #7
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_ADC_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_ADC_Init+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_ADC_Init+0x94>)
 800151e:	f004 fc29 	bl	8005d74 <HAL_ADC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001528:	f000 fd72 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200001cc 	.word	0x200001cc
 8001534:	40012400 	.word	0x40012400

08001538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_ADC_MspInit+0x54>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d113      	bne.n	8001582 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800155a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800155e:	f7ff ff73 	bl	8001448 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2002      	movs	r0, #2
 8001564:	f7ff ff58 	bl	8001418 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin;
 8001568:	f242 0318 	movw	r3, #8216	; 0x2018
 800156c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <HAL_ADC_MspInit+0x58>)
 800157e:	f006 f9f9 	bl	8007974 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40012400 	.word	0x40012400
 8001590:	48000400 	.word	0x48000400

08001594 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_ADC_MspDeInit+0x2c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d108      	bne.n	80015b8 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80015a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015aa:	f7ff ff65 	bl	8001478 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin);
 80015ae:	f242 0118 	movw	r1, #8216	; 0x2018
 80015b2:	4804      	ldr	r0, [pc, #16]	; (80015c4 <HAL_ADC_MspDeInit+0x30>)
 80015b4:	f006 fb3e 	bl	8007c34 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40012400 	.word	0x40012400
 80015c4:	48000400 	.word	0x48000400

080015c8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <SYS_InitMeasurement+0x14>)
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <SYS_InitMeasurement+0x18>)
 80015d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200001cc 	.word	0x200001cc
 80015e0:	40012400 	.word	0x40012400

080015e4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <SYS_GetBatteryLevel+0x5c>)
 80015f4:	f000 f82a 	bl	800164c <ADC_ReadChannels>
 80015f8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	e016      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160e:	4293      	cmp	r3, r2
 8001610:	d00b      	beq.n	800162a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	f640 43e4 	movw	r3, #3300	; 0xce4
 800161c:	fb03 f202 	mul.w	r2, r3, r2
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	e004      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <SYS_GetBatteryLevel+0x64>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001634:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	b4002000 	.word	0xb4002000
 8001644:	1fff75aa 	.word	0x1fff75aa
 8001648:	004c08d8 	.word	0x004c08d8

0800164c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001664:	f7ff ff1a 	bl	800149c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <ADC_ReadChannels+0x88>)
 800166a:	f005 f9a2 	bl	80069b2 <HAL_ADCEx_Calibration_Start>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001674:	f000 fccc 	bl	8002010 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4619      	mov	r1, r3
 800168a:	4812      	ldr	r0, [pc, #72]	; (80016d4 <ADC_ReadChannels+0x88>)
 800168c:	f004 feae 	bl	80063ec <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001696:	f000 fcbb 	bl	8002010 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <ADC_ReadChannels+0x88>)
 800169c:	f004 fd8a 	bl	80061b4 <HAL_ADC_Start>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016a6:	f000 fcb3 	bl	8002010 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016aa:	f04f 31ff 	mov.w	r1, #4294967295
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b0:	f004 fdf8 	bl	80062a4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b6:	f004 fdc3 	bl	8006240 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016bc:	f004 fe89 	bl	80063d2 <HAL_ADC_GetValue>
 80016c0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016c4:	f004 fcea 	bl	800609c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001cc 	.word	0x200001cc

080016d8 <LL_AHB1_GRP1_EnableClock>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fc:	68fb      	ldr	r3, [r7, #12]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800170c:	2004      	movs	r0, #4
 800170e:	f7ff ffe3 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff ffe0 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2102      	movs	r1, #2
 800171c:	200b      	movs	r0, #11
 800171e:	f005 faee 	bl	8006cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001722:	200b      	movs	r0, #11
 8001724:	f005 fb05 	bl	8006d32 <HAL_NVIC_EnableIRQ>

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001742:	d311      	bcc.n	8001768 <FLASH_IF_Write+0x3c>
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <FLASH_IF_Write+0x48>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	029a      	lsls	r2, r3, #10
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <FLASH_IF_Write+0x4c>)
 800174c:	4013      	ands	r3, r2
 800174e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001752:	3b01      	subs	r3, #1
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4293      	cmp	r3, r2
 8001758:	d306      	bcc.n	8001768 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f85a 	bl	8001818 <FLASH_IF_INT_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	1fff75e0 	.word	0x1fff75e0
 8001778:	03fffc00 	.word	0x03fffc00

0800177c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001788:	23ff      	movs	r3, #255	; 0xff
 800178a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001792:	d311      	bcc.n	80017b8 <FLASH_IF_Read+0x3c>
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <FLASH_IF_Read+0x48>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	029a      	lsls	r2, r3, #10
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <FLASH_IF_Read+0x4c>)
 800179c:	4013      	ands	r3, r2
 800179e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017a2:	3b01      	subs	r3, #1
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d306      	bcc.n	80017b8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f93a 	bl	8001a28 <FLASH_IF_INT_Read>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80017b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	1fff75e0 	.word	0x1fff75e0
 80017c8:	03fffc00 	.word	0x03fffc00

080017cc <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017d6:	23ff      	movs	r3, #255	; 0xff
 80017d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e0:	d310      	bcc.n	8001804 <FLASH_IF_Erase+0x38>
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <FLASH_IF_Erase+0x44>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <FLASH_IF_Erase+0x48>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017f0:	3b01      	subs	r3, #1
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d305      	bcc.n	8001804 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f932 	bl	8001a64 <FLASH_IF_INT_Erase>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	1fff75e0 	.word	0x1fff75e0
 8001814:	03fffc00 	.word	0x03fffc00

08001818 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b090      	sub	sp, #64	; 0x40
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00c      	beq.n	8001856 <FLASH_IF_INT_Write+0x3e>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <FLASH_IF_INT_Write+0x3e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	2b00      	cmp	r3, #0
 800184a:	d104      	bne.n	8001856 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001856:	f06f 0305 	mvn.w	r3, #5
 800185a:	e0da      	b.n	8001a12 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800185c:	f000 f992 	bl	8001b84 <FLASH_IF_INT_Clear_Error>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001866:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80cf 	bne.w	8001a0e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001870:	f005 feaa 	bl	80075c8 <HAL_FLASH_Unlock>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 80c6 	bne.w	8001a08 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001882:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <FLASH_IF_INT_Write+0x204>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0299      	lsls	r1, r3, #10
 8001888:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <FLASH_IF_INT_Write+0x208>)
 800188a:	400b      	ands	r3, r1
 800188c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	0adb      	lsrs	r3, r3, #11
 8001898:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800189a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <FLASH_IF_INT_Write+0x204>)
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	0291      	lsls	r1, r2, #10
 80018ac:	4a5c      	ldr	r2, [pc, #368]	; (8001a20 <FLASH_IF_INT_Write+0x208>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80018b4:	fb01 f202 	mul.w	r2, r1, r2
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	0ada      	lsrs	r2, r3, #11
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d905      	bls.n	80018d6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80018ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018da:	e089      	b.n	80019f0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018e2:	02db      	lsls	r3, r3, #11
 80018e4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80018e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f925 	bl	8001b38 <FLASH_IF_INT_IsEmpty>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d031      	beq.n	8001958 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80018fc:	23fa      	movs	r3, #250	; 0xfa
 80018fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001902:	e07e      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f88a 	bl	8001a28 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001914:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191e:	4413      	add	r3, r2
 8001920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001924:	b292      	uxth	r2, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f01d fb5a 	bl	801efe0 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f896 	bl	8001a64 <FLASH_IF_INT_Erase>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800193e:	23fe      	movs	r3, #254	; 0xfe
 8001940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001944:	e05d      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e005      	b.n	8001964 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
 8001968:	e026      	b.n	80019b8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800196a:	6a3a      	ldr	r2, [r7, #32]
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001976:	2001      	movs	r0, #1
 8001978:	f005 fde2 	bl	8007540 <HAL_FLASH_Program>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d113      	bne.n	80019aa <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	4413      	add	r3, r2
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	4299      	cmp	r1, r3
 8001994:	bf08      	it	eq
 8001996:	4290      	cmpeq	r0, r2
 8001998:	d003      	beq.n	80019a2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800199a:	23fc      	movs	r3, #252	; 0xfc
 800199c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80019a0:	e00e      	b.n	80019c0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3308      	adds	r3, #8
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e003      	b.n	80019b2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80019aa:	23fc      	movs	r3, #252	; 0xfc
 80019ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80019b0:	e006      	b.n	80019c0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	3308      	adds	r3, #8
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3d4      	bcc.n	800196a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80019c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11b      	bne.n	8001a00 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80019c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	4413      	add	r3, r2
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80019d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	4413      	add	r3, r2
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e2:	bf28      	it	cs
 80019e4:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	3301      	adds	r3, #1
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f4ff af6f 	bcc.w	80018dc <FLASH_IF_INT_Write+0xc4>
 80019fe:	e000      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001a00:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001a02:	f005 fe03 	bl	800760c <HAL_FLASH_Lock>
 8001a06:	e002      	b.n	8001a0e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a08:	23fb      	movs	r3, #251	; 0xfb
 8001a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001a0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3740      	adds	r7, #64	; 0x40
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	1fff75e0 	.word	0x1fff75e0
 8001a20:	03fffc00 	.word	0x03fffc00
 8001a24:	20000230 	.word	0x20000230

08001a28 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <FLASH_IF_INT_Read+0x1c>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a44:	f06f 0305 	mvn.w	r3, #5
 8001a48:	e008      	b.n	8001a5c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f01d fac4 	bl	801efe0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a84:	f06f 0305 	mvn.w	r3, #5
 8001a88:	e04e      	b.n	8001b28 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001a8a:	f000 f87b 	bl	8001b84 <FLASH_IF_INT_Clear_Error>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d144      	bne.n	8001b24 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001a9a:	f005 fd95 	bl	80075c8 <HAL_FLASH_Unlock>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13d      	bne.n	8001b20 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <FLASH_IF_INT_Erase+0xcc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0299      	lsls	r1, r3, #10
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <FLASH_IF_INT_Erase+0xd0>)
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <FLASH_IF_INT_Erase+0xcc>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	0291      	lsls	r1, r2, #10
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <FLASH_IF_INT_Erase+0xd0>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ae0:	fb01 f202 	mul.w	r2, r1, r2
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	0ada      	lsrs	r2, r3, #11
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001af0:	f107 0214 	add.w	r2, r7, #20
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 fe66 	bl	80077cc <HAL_FLASHEx_Erase>
 8001b00:	4603      	mov	r3, r0
 8001b02:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001b04:	7fbb      	ldrb	r3, [r7, #30]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001b0a:	7fbb      	ldrb	r3, [r7, #30]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d101      	bne.n	8001b14 <FLASH_IF_INT_Erase+0xb0>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e001      	b.n	8001b18 <FLASH_IF_INT_Erase+0xb4>
 8001b14:	f06f 0301 	mvn.w	r3, #1
 8001b18:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001b1a:	f005 fd77 	bl	800760c <HAL_FLASH_Lock>
 8001b1e:	e001      	b.n	8001b24 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001b20:	23fb      	movs	r3, #251	; 0xfb
 8001b22:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	1fff75e0 	.word	0x1fff75e0
 8001b34:	03fffc00 	.word	0x03fffc00

08001b38 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	e011      	b.n	8001b70 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	bf08      	it	eq
 8001b58:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001b5c:	d002      	beq.n	8001b64 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      break;
 8001b62:	e009      	b.n	8001b78 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3308      	adds	r3, #8
 8001b68:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3e9      	bcc.n	8001b4c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001b8a:	23fb      	movs	r3, #251	; 0xfb
 8001b8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001b8e:	f005 fd1b 	bl	80075c8 <HAL_FLASH_Unlock>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d110      	bne.n	8001bba <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001ba6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001baa:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001bac:	f005 fd2e 	bl	800760c <HAL_FLASH_Lock>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	58004000 	.word	0x58004000

08001bcc <LL_AHB2_GRP1_EnableClock>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff ffdb 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff ffd8 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f7ff ffd5 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Stim_Enable_Pin|Bias_CS_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001c28:	4831      	ldr	r0, [pc, #196]	; (8001cf0 <MX_GPIO_Init+0xf4>)
 8001c2a:	f006 f8e8 	bl	8007dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Anneal_Enable_Pin|Env_Sens_Enable_Pin|Memory_CS_Pin|RF_CTRL1_Pin
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f240 4135 	movw	r1, #1077	; 0x435
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c38:	f006 f8e1 	bl	8007dfe <HAL_GPIO_WritePin>
                          |RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2120      	movs	r1, #32
 8001c40:	482b      	ldr	r0, [pc, #172]	; (8001cf0 <MX_GPIO_Init+0xf4>)
 8001c42:	f006 f8dc 	bl	8007dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Stim_Enable_Pin|Bias_CS_Pin;
 8001c46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4824      	ldr	r0, [pc, #144]	; (8001cf0 <MX_GPIO_Init+0xf4>)
 8001c5e:	f005 fe89 	bl	8007974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Anneal_Enable_Pin|Env_Sens_Enable_Pin|Memory_CS_Pin;
 8001c62:	f240 4305 	movw	r3, #1029	; 0x405
 8001c66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f005 fe7a 	bl	8007974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001c80:	2320      	movs	r3, #32
 8001c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4816      	ldr	r0, [pc, #88]	; (8001cf0 <MX_GPIO_Init+0xf4>)
 8001c96:	f005 fe6d 	bl	8007974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accel_Int_Pin;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Accel_Int_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <MX_GPIO_Init+0xf8>)
 8001cae:	f005 fe61 	bl	8007974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot_Mode_Pin;
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Boot_Mode_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f005 fe55 	bl	8007974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001cca:	2330      	movs	r3, #48	; 0x30
 8001ccc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f005 fe47 	bl	8007974 <HAL_GPIO_Init>

}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800

08001cf8 <LL_AHB2_GRP1_EnableClock>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <LL_APB1_GRP1_EnableClock>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <MX_I2C2_Init+0x78>)
 8001d60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d64:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <MX_I2C2_Init+0x7c>)
 8001d66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001d94:	f006 f84a 	bl	8007e2c <HAL_I2C_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d9e:	f000 f937 	bl	8002010 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001da6:	f006 fd97 	bl	80088d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001db0:	f000 f92e 	bl	8002010 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001db4:	2100      	movs	r1, #0
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_I2C2_Init+0x74>)
 8001db8:	f006 fdd8 	bl	800896c <HAL_I2CEx_ConfigDigitalFilter>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001dc2:	f000 f925 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000234 	.word	0x20000234
 8001dd0:	40005800 	.word	0x40005800
 8001dd4:	20303e5d 	.word	0x20303e5d

08001dd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b096      	sub	sp, #88	; 0x58
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	2238      	movs	r2, #56	; 0x38
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f01e fc91 	bl	8020720 <memset>
  if(i2cHandle->Instance==I2C2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_I2C_MspInit+0xb0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d13b      	bne.n	8001e80 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e0c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4618      	mov	r0, r3
 8001e18:	f008 f864 	bl	8009ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e22:	f000 f8f5 	bl	8002010 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff ff66 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f7ff ff63 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e44:	2304      	movs	r3, #4
 8001e46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f005 fd8f 	bl	8007974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <HAL_I2C_MspInit+0xb4>)
 8001e74:	f005 fd7e 	bl	8007974 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e78:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e7c:	f7ff ff54 	bl	8001d28 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e80:	bf00      	nop
 8001e82:	3758      	adds	r7, #88	; 0x58
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40005800 	.word	0x40005800
 8001e8c:	48000400 	.word	0x48000400

08001e90 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f023 0218 	bic.w	r2, r3, #24
 8001ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
	...

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f003 fd69 	bl	8005998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec6:	f000 f83b 	bl	8001f40 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  // initialize the GPIOs this is to allow the probing of the Boot Mode pin to determine
  // if the user button was pressed during reset
  MX_GPIO_Init();
 8001eca:	f7ff fe97 	bl	8001bfc <MX_GPIO_Init>

  // check to see if the boot mode pin is drawn low (button pressed)
  int boot_mode = HAL_GPIO_ReadPin(Boot_Mode_GPIO_Port, Boot_Mode_Pin);
 8001ece:	2108      	movs	r1, #8
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f005 ff7c 	bl	8007dd0 <HAL_GPIO_ReadPin>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	603b      	str	r3, [r7, #0]

  //enable LoRaWAN or experiment mode as required
  bool experimentMode = false;
 8001edc:	2300      	movs	r3, #0
 8001ede:	71fb      	strb	r3, [r7, #7]
  //if (DEFAULT_DISBALE_LORA && boot_mode == 0) MX_LoRaWAN_Init();
  if (DEFAULT_DISBALE_LORA && boot_mode == 1) experimentMode = true;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <main+0x2e>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if (!DEFAULT_DISBALE_LORA && boot_mode == 0) experimentMode = true;
  //if (!DEFAULT_DISBALE_LORA && boot_mode == 1) MX_LoRaWAN_Init();
  MX_LoRaWAN_Init();
 8001eea:	f00c f8af 	bl	800e04c <MX_LoRaWAN_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C2_Init();
 8001eee:	f7ff ff33 	bl	8001d58 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001ef2:	f000 f9a5 	bl	8002240 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  bsp_env_sensors.init(&hi2c2);
 8001ef6:	490e      	ldr	r1, [pc, #56]	; (8001f30 <main+0x74>)
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <main+0x78>)
 8001efa:	f003 fa49 	bl	8005390 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>
  detector.init();
 8001efe:	480e      	ldr	r0, [pc, #56]	; (8001f38 <main+0x7c>)
 8001f00:	f001 fa22 	bl	8003348 <_ZN8Detector4initEv>
  MX_ADC_Init();
 8001f04:	f7ff faca 	bl	800149c <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(Memory_CS_GPIO_Port, Memory_CS_Pin, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f005 ff75 	bl	8007dfe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1a:	4808      	ldr	r0, [pc, #32]	; (8001f3c <main+0x80>)
 8001f1c:	f005 ff6f 	bl	8007dfe <HAL_GPIO_WritePin>
  if (experimentMode) enterExperimentMode();
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <main+0x6e>
 8001f26:	f003 fc63 	bl	80057f0 <_Z19enterExperimentModev>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001f2a:	f00c f897 	bl	800e05c <MX_LoRaWAN_Process>
 8001f2e:	e7fc      	b.n	8001f2a <main+0x6e>
 8001f30:	20000234 	.word	0x20000234
 8001f34:	20000288 	.word	0x20000288
 8001f38:	200003b8 	.word	0x200003b8
 8001f3c:	48000400 	.word	0x48000400

08001f40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09a      	sub	sp, #104	; 0x68
 8001f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	2248      	movs	r2, #72	; 0x48
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f01e fbe6 	bl	8020720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f66:	f006 fd4d 	bl	8008a04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff ff90 	bl	8001e90 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <_Z18SystemClock_Configv+0xcc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f78:	4a24      	ldr	r2, [pc, #144]	; (800200c <_Z18SystemClock_Configv+0xcc>)
 8001f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <_Z18SystemClock_Configv+0xcc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001f8c:	2326      	movs	r3, #38	; 0x26
 8001f8e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f90:	2381      	movs	r3, #129	; 0x81
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f9e:	2340      	movs	r3, #64	; 0x40
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001fa6:	23b0      	movs	r3, #176	; 0xb0
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f007 f872 	bl	800909c <HAL_RCC_OscConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001fc8:	f000 f822 	bl	8002010 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001fcc:	234f      	movs	r3, #79	; 0x4f
 8001fce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f007 fbd8 	bl	80097a0 <HAL_RCC_ClockConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002000:	f000 f806 	bl	8002010 <Error_Handler>
  }
}
 8002004:	bf00      	nop
 8002006:	3768      	adds	r7, #104	; 0x68
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	58000400 	.word	0x58000400

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	APP_LOG(TS_ON, VLEVEL_M, "HAL error");
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <Error_Handler+0x18>)
 800201a:	2201      	movs	r2, #1
 800201c:	2100      	movs	r1, #0
 800201e:	2002      	movs	r0, #2
 8002020:	f01e f84e 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
 8002024:	e7f8      	b.n	8002018 <Error_Handler+0x8>
 8002026:	bf00      	nop
 8002028:	08021004 	.word	0x08021004

0800202c <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10a      	bne.n	8002052 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002042:	4293      	cmp	r3, r2
 8002044:	d105      	bne.n	8002052 <_Z41__static_initialization_and_destruction_0ii+0x26>
EnvionmentSensors bsp_env_sensors;
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002048:	f003 f98f 	bl	800536a <_ZN17EnvionmentSensorsC1Ev>
Detector detector;
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800204e:	f001 f966 	bl	800331e <_ZN8DetectorC1Ev>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000288 	.word	0x20000288
 8002060:	200003b8 	.word	0x200003b8

08002064 <_GLOBAL__sub_I_bsp_env_sensors>:
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
 8002068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff ffdd 	bl	800202c <_Z41__static_initialization_and_destruction_0ii>
 8002072:	bd80      	pop	{r7, pc}

08002074 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <LL_APB1_GRP1_EnableClock>:
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020b8:	68fb      	ldr	r3, [r7, #12]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	222c      	movs	r2, #44	; 0x2c
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f01e fb25 	bl	8020720 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <MX_RTC_Init+0x9c>)
 80020d8:	4a22      	ldr	r2, [pc, #136]	; (8002164 <MX_RTC_Init+0xa0>)
 80020da:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <MX_RTC_Init+0x9c>)
 80020de:	221f      	movs	r2, #31
 80020e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <MX_RTC_Init+0x9c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <MX_RTC_Init+0x9c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MX_RTC_Init+0x9c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_RTC_Init+0x9c>)
 80020f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_RTC_Init+0x9c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <MX_RTC_Init+0x9c>)
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800210a:	4815      	ldr	r0, [pc, #84]	; (8002160 <MX_RTC_Init+0x9c>)
 800210c:	f008 f804 	bl	800a118 <HAL_RTC_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002116:	f7ff ff7b 	bl	8002010 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800211a:	4811      	ldr	r0, [pc, #68]	; (8002160 <MX_RTC_Init+0x9c>)
 800211c:	f008 fafa 	bl	800a714 <HAL_RTCEx_SetSSRU_IT>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002126:	f7ff ff73 	bl	8002010 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002136:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800213a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800213c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2200      	movs	r2, #0
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_RTC_Init+0x9c>)
 800214a:	f008 f867 	bl	800a21c <HAL_RTC_SetAlarm_IT>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002154:	f7ff ff5c 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000404 	.word	0x20000404
 8002164:	40002800 	.word	0x40002800

08002168 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b090      	sub	sp, #64	; 0x40
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	2238      	movs	r2, #56	; 0x38
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f01e fad1 	bl	8020720 <memset>
  if(rtcHandle->Instance==RTC)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_RTC_MspInit+0x74>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d125      	bne.n	80021d4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800218e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	4618      	mov	r0, r3
 800219a:	f007 fea3 	bl	8009ee4 <HAL_RCCEx_PeriphCLKConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021a4:	f7ff ff34 	bl	8002010 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a8:	f7ff ff64 	bl	8002074 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021b0:	f7ff ff70 	bl	8002094 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2002      	movs	r0, #2
 80021ba:	f004 fda0 	bl	8006cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80021be:	2002      	movs	r0, #2
 80021c0:	f004 fdb7 	bl	8006d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	202a      	movs	r0, #42	; 0x2a
 80021ca:	f004 fd98 	bl	8006cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021ce:	202a      	movs	r0, #42	; 0x2a
 80021d0:	f004 fdaf 	bl	8006d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021d4:	bf00      	nop
 80021d6:	3740      	adds	r7, #64	; 0x40
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40002800 	.word	0x40002800

080021e0 <LL_AHB2_GRP1_EnableClock>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <LL_APB1_GRP1_EnableClock>:
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800221e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002234:	68fb      	ldr	r3, [r7, #12]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002246:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <MX_SPI2_Init+0x78>)
 8002248:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <MX_SPI2_Init+0x74>)
 800224c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002250:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <MX_SPI2_Init+0x74>)
 800225a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800225e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_SPI2_Init+0x74>)
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002276:	2218      	movs	r2, #24
 8002278:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_SPI2_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_SPI2_Init+0x74>)
 800228e:	2207      	movs	r2, #7
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_SPI2_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_SPI2_Init+0x74>)
 800229a:	2200      	movs	r2, #0
 800229c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_SPI2_Init+0x74>)
 80022a0:	f008 fac6 	bl	800a830 <HAL_SPI_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80022aa:	f7ff feb1 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000043c 	.word	0x2000043c
 80022b8:	40003800 	.word	0x40003800

080022bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b096      	sub	sp, #88	; 0x58
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	2238      	movs	r2, #56	; 0x38
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f01e fa1f 	bl	8020720 <memset>
  if(spiHandle->Instance==SPI2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_SPI_MspInit+0xd8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d14e      	bne.n	800238a <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80022ec:	2310      	movs	r3, #16
 80022ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80022f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4618      	mov	r0, r3
 80022fc:	f007 fdf2 	bl	8009ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002306:	f7ff fe83 	bl	8002010 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800230a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800230e:	f7ff ff7f 	bl	8002210 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	2002      	movs	r0, #2
 8002314:	f7ff ff64 	bl	80021e0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff ff61 	bl	80021e0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	2004      	movs	r0, #4
 8002320:	f7ff ff5e 	bl	80021e0 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002324:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002336:	2305      	movs	r3, #5
 8002338:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800233e:	4619      	mov	r1, r3
 8002340:	4815      	ldr	r0, [pc, #84]	; (8002398 <HAL_SPI_MspInit+0xdc>)
 8002342:	f005 fb17 	bl	8007974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800234a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002358:	2305      	movs	r3, #5
 800235a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002360:	4619      	mov	r1, r3
 8002362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002366:	f005 fb05 	bl	8007974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800236a:	2302      	movs	r3, #2
 800236c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800237a:	2303      	movs	r3, #3
 800237c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_SPI_MspInit+0xe0>)
 8002386:	f005 faf5 	bl	8007974 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3758      	adds	r7, #88	; 0x58
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40003800 	.word	0x40003800
 8002398:	48000400 	.word	0x48000400
 800239c:	48000800 	.word	0x48000800

080023a0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	58000400 	.word	0x58000400

080023b8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80023d4:	f003 fb00 	bl	80059d8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80023d8:	f7ff ffe2 	bl	80023a0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80023dc:	2001      	movs	r0, #1
 80023de:	f006 fba3 	bl	8008b28 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80023ea:	f003 fb03 	bl	80059f4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80023ee:	f000 ff17 	bl	8003220 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */
  
  /* USER CODE END ExitStopMode_2 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80023fa:	f003 faed 	bl	80059d8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023fe:	2101      	movs	r1, #1
 8002400:	2000      	movs	r0, #0
 8002402:	f006 fb0d 	bl	8008a20 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}

0800240a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800240e:	f003 faf1 	bl	80059f4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <NMI_Handler+0x4>

08002428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <HardFault_Handler+0x4>

0800242e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <MemManage_Handler+0x4>

08002434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <BusFault_Handler+0x4>

0800243a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <UsageFault_Handler+0x4>

08002440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002476:	f008 f989 	bl	800a78c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000404 	.word	0x20000404

08002484 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA1_Channel1_IRQHandler+0x10>)
 800248a:	f004 fee9 	bl	8007260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000550 	.word	0x20000550

08002498 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <USART1_IRQHandler+0x10>)
 800249e:	f009 fcdb 	bl	800be58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200004bc 	.word	0x200004bc

080024ac <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <RTC_Alarm_IRQHandler+0x10>)
 80024b2:	f008 f81b 	bl	800a4ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000404 	.word	0x20000404

080024c0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <SUBGHZ_Radio_IRQHandler+0x10>)
 80024c6:	f009 f897 	bl	800b5f8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200004a0 	.word	0x200004a0

080024d4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_SUBGHZ_Init+0x20>)
 800250a:	2208      	movs	r2, #8
 800250c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_SUBGHZ_Init+0x20>)
 8002510:	f008 fdf0 	bl	800b0f4 <HAL_SUBGHZ_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800251a:	f7ff fd79 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200004a0 	.word	0x200004a0

08002528 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002530:	2001      	movs	r0, #1
 8002532:	f7ff ffcf 	bl	80024d4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f004 fbdf 	bl	8006cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002540:	2032      	movs	r0, #50	; 0x32
 8002542:	f004 fbf6 	bl	8006d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <LL_RCC_SetClkAfterWakeFromStop>:
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002578:	4b02      	ldr	r3, [pc, #8]	; (8002584 <LL_FLASH_GetUDN+0x10>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	1fff7580 	.word	0x1fff7580

08002588 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <LL_FLASH_GetDeviceID+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	1fff7584 	.word	0x1fff7584

080025a0 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <LL_FLASH_GetSTCompanyID+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0a1b      	lsrs	r3, r3, #8
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	1fff7584 	.word	0x1fff7584

080025b8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff ffc6 	bl	800254e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80025c2:	f01d fabf 	bl	801fb44 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <SystemApp_Init+0x48>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80025cc:	f000 f988 	bl	80028e0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80025d0:	f01d fd48 	bl	8020064 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80025d4:	480b      	ldr	r0, [pc, #44]	; (8002604 <SystemApp_Init+0x4c>)
 80025d6:	f01d fdf3 	bl	80201c0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <SystemApp_Init+0x50>)
 80025dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025e0:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80025e2:	2003      	movs	r0, #3
 80025e4:	f01d fdfa 	bl	80201dc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80025e8:	f7fe ffee 	bl	80015c8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80025ec:	f000 f9b0 	bl	8002950 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80025f0:	f01c fc50 	bl	801ee94 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80025f4:	2101      	movs	r1, #1
 80025f6:	2001      	movs	r0, #1
 80025f8:	f01c fc8c 	bl	801ef14 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200004ac 	.word	0x200004ac
 8002604:	080027d9 	.word	0x080027d9
 8002608:	58004000 	.word	0x58004000

0800260c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002610:	f01c fcb0 	bl	801ef74 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002622:	f7fe ffdf 	bl	80015e4 <SYS_GetBatteryLevel>
 8002626:	4603      	mov	r3, r0
 8002628:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800262a:	88bb      	ldrh	r3, [r7, #4]
 800262c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002630:	4293      	cmp	r3, r2
 8002632:	d902      	bls.n	800263a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002634:	23fe      	movs	r3, #254	; 0xfe
 8002636:	71fb      	strb	r3, [r7, #7]
 8002638:	e014      	b.n	8002664 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800263a:	88bb      	ldrh	r3, [r7, #4]
 800263c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002640:	d202      	bcs.n	8002648 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	e00d      	b.n	8002664 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800264e:	461a      	mov	r2, r3
 8002650:	4613      	mov	r3, r2
 8002652:	01db      	lsls	r3, r3, #7
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	461a      	mov	r2, r3
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <GetBatteryLevel+0x58>)
 800265c:	fba3 2302 	umull	r2, r3, r3, r2
 8002660:	09db      	lsrs	r3, r3, #7
 8002662:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002664:	79fb      	ldrb	r3, [r7, #7]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	1b4e81b5 	.word	0x1b4e81b5

08002674 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f93b 	bl	80028fc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fcfd 	bl	8001088 <__aeabi_f2iz>
 800268e:	4603      	mov	r3, r0
 8002690:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002692:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800269e:	b590      	push	{r4, r7, lr}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80026aa:	f7ff ff63 	bl	8002574 <LL_FLASH_GetUDN>
 80026ae:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d138      	bne.n	800272a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80026b8:	f003 f9aa 	bl	8005a10 <HAL_GetUIDw0>
 80026bc:	4604      	mov	r4, r0
 80026be:	f003 f9bb 	bl	8005a38 <HAL_GetUIDw2>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4423      	add	r3, r4
 80026c6:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80026c8:	f003 f9ac 	bl	8005a24 <HAL_GetUIDw1>
 80026cc:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	0e1a      	lsrs	r2, r3, #24
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3307      	adds	r3, #7
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	0c1a      	lsrs	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3306      	adds	r3, #6
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	0a1a      	lsrs	r2, r3, #8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3305      	adds	r3, #5
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	0e1a      	lsrs	r2, r3, #24
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3303      	adds	r3, #3
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	0c1a      	lsrs	r2, r3, #16
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3302      	adds	r3, #2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	0a1a      	lsrs	r2, r3, #8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3301      	adds	r3, #1
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002728:	e031      	b.n	800278e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3307      	adds	r3, #7
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	0a1a      	lsrs	r2, r3, #8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3306      	adds	r3, #6
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	0c1a      	lsrs	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3305      	adds	r3, #5
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	0e1a      	lsrs	r2, r3, #24
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002758:	f7ff ff16 	bl	8002588 <LL_FLASH_GetDeviceID>
 800275c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3303      	adds	r3, #3
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002768:	f7ff ff1a 	bl	80025a0 <LL_FLASH_GetSTCompanyID>
 800276c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3302      	adds	r3, #2
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	0a1a      	lsrs	r2, r3, #8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3301      	adds	r3, #1
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	b2da      	uxtb	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	701a      	strb	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}

08002796 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002796:	b590      	push	{r4, r7, lr}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800279e:	f7ff fee9 	bl	8002574 <LL_FLASH_GetUDN>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d10d      	bne.n	80027ce <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80027b2:	f003 f92d 	bl	8005a10 <HAL_GetUIDw0>
 80027b6:	4604      	mov	r4, r0
 80027b8:	f003 f934 	bl	8005a24 <HAL_GetUIDw1>
 80027bc:	4603      	mov	r3, r0
 80027be:	405c      	eors	r4, r3
 80027c0:	f003 f93a 	bl	8005a38 <HAL_GetUIDw2>
 80027c4:	4603      	mov	r3, r0
 80027c6:	ea84 0203 	eor.w	r2, r4, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
	...

080027d8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f01c fcd4 	bl	801f194 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80027f2:	9200      	str	r2, [sp, #0]
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <TimestampNow+0x3c>)
 80027f6:	2110      	movs	r1, #16
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f81d 	bl	8002838 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fd fcbe 	bl	8000180 <strlen>
 8002804:	4603      	mov	r3, r0
 8002806:	b29a      	uxth	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	08021010 	.word	0x08021010

08002818 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800281c:	2101      	movs	r1, #1
 800281e:	2002      	movs	r0, #2
 8002820:	f01c fb48 	bl	801eeb4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800282c:	2100      	movs	r1, #0
 800282e:	2002      	movs	r0, #2
 8002830:	f01c fb40 	bl	801eeb4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}

08002838 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002838:	b40c      	push	{r2, r3}
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f01c fe71 	bl	801f538 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002860:	b002      	add	sp, #8
 8002862:	4770      	bx	lr

08002864 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_GetTick+0x24>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800288a:	f000 f965 	bl	8002b58 <TIMER_IF_GetTimerValue>
 800288e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002890:	687b      	ldr	r3, [r7, #4]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004ac 	.word	0x200004ac

080028a0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f9db 	bl	8002c66 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <LL_EXTI_EnableIT_32_63+0x24>)
 80028c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80028c6:	4905      	ldr	r1, [pc, #20]	; (80028dc <LL_EXTI_EnableIT_32_63+0x24>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	58000800 	.word	0x58000800

080028e0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80028e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028e8:	f7ff ffe6 	bl	80028b8 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80028ec:	f003 f8ae 	bl	8005a4c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80028f0:	f003 f8b2 	bl	8005a58 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80028f4:	f003 f8b6 	bl	8005a64 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <EnvSensors_Read+0x44>)
 8002906:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = bsp_env_sensors.getTemperature();
 8002908:	480e      	ldr	r0, [pc, #56]	; (8002944 <EnvSensors_Read+0x48>)
 800290a:	f002 fdb5 	bl	8005478 <_ZN17EnvionmentSensors14getTemperatureEv>
 800290e:	6138      	str	r0, [r7, #16]
  float PRESSURE_Value = bsp_env_sensors.getPressure();
 8002910:	480c      	ldr	r0, [pc, #48]	; (8002944 <EnvSensors_Read+0x48>)
 8002912:	f002 fda3 	bl	800545c <_ZN17EnvionmentSensors11getPressureEv>
 8002916:	60f8      	str	r0, [r7, #12]

  sensor_data->humidity    = HUMIDITY_Value;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <EnvSensors_Read+0x4c>)
 800292e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a06      	ldr	r2, [pc, #24]	; (800294c <EnvSensors_Read+0x50>)
 8002934:	611a      	str	r2, [r3, #16]

  return 0;
 8002936:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	42480000 	.word	0x42480000
 8002944:	20000288 	.word	0x20000288
 8002948:	003e090d 	.word	0x003e090d
 800294c:	000503ab 	.word	0x000503ab

08002950 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Init */

  /* USER CODE END EnvSensors_Init */
  return ret;
 800295a:	687b      	ldr	r3, [r7, #4]
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <_sbrk+0x5c>)
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <_sbrk+0x60>)
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <_sbrk+0x64>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <_sbrk+0x68>)
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d207      	bcs.n	80029a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002998:	f01d fe8a 	bl	80206b0 <__errno>
 800299c:	4603      	mov	r3, r0
 800299e:	220c      	movs	r2, #12
 80029a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	e009      	b.n	80029bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <_sbrk+0x64>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <_sbrk+0x64>)
 80029b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20010000 	.word	0x20010000
 80029c8:	00000400 	.word	0x00000400
 80029cc:	200004b0 	.word	0x200004b0
 80029d0:	200024c8 	.word	0x200024c8

080029d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <TIMER_IF_Init+0x5c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f083 0301 	eor.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <TIMER_IF_Init+0x60>)
 8002a12:	f04f 32ff 	mov.w	r2, #4294967295
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002a18:	f7ff fb54 	bl	80020c4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002a1c:	f000 f856 	bl	8002acc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <TIMER_IF_Init+0x60>)
 8002a26:	f007 fd05 	bl	800a434 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <TIMER_IF_Init+0x60>)
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002a32:	4809      	ldr	r0, [pc, #36]	; (8002a58 <TIMER_IF_Init+0x60>)
 8002a34:	f007 fe3c 	bl	800a6b0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f000 f9d3 	bl	8002de4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002a3e:	f000 f85f 	bl	8002b00 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <TIMER_IF_Init+0x5c>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002a48:	79fb      	ldrb	r3, [r7, #7]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200004b4 	.word	0x200004b4
 8002a58:	20000404 	.word	0x20000404

08002a5c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002a6a:	f107 0308 	add.w	r3, r7, #8
 8002a6e:	222c      	movs	r2, #44	; 0x2c
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f01d fe54 	bl	8020720 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002a78:	f000 f828 	bl	8002acc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <TIMER_IF_StartTimer+0x68>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002a94:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a98:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <TIMER_IF_StartTimer+0x6c>)
 8002aaa:	f007 fbb7 	bl	800a21c <HAL_RTC_SetAlarm_IT>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002ab4:	f7ff faac 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3738      	adds	r7, #56	; 0x38
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200004b8 	.word	0x200004b8
 8002ac8:	20000404 	.word	0x20000404

08002acc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <TIMER_IF_StopTimer+0x2c>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <TIMER_IF_StopTimer+0x30>)
 8002ae2:	f007 fca7 	bl	800a434 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <TIMER_IF_StopTimer+0x30>)
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002aee:	79fb      	ldrb	r3, [r7, #7]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40002800 	.word	0x40002800
 8002afc:	20000404 	.word	0x20000404

08002b00 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002b04:	f000 f98e 	bl	8002e24 <GetTimerTicks>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a03      	ldr	r2, [pc, #12]	; (8002b18 <TIMER_IF_SetTimerContext+0x18>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b0e:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <TIMER_IF_SetTimerContext+0x18>)
 8002b10:	681b      	ldr	r3, [r3, #0]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200004b8 	.word	0x200004b8

08002b1c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b20:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <TIMER_IF_GetTimerContext+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	200004b8 	.word	0x200004b8

08002b30 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002b3a:	f000 f973 	bl	8002e24 <GetTimerTicks>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002b48:	687b      	ldr	r3, [r7, #4]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200004b8 	.word	0x200004b8

08002b58 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <TIMER_IF_GetTimerValue+0x24>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002b6a:	f000 f95b 	bl	8002e24 <GetTimerTicks>
 8002b6e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002b70:	687b      	ldr	r3, [r7, #4]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200004b4 	.word	0x200004b4

08002b80 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002b8e:	687b      	ldr	r3, [r7, #4]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002b9a:	b5b0      	push	{r4, r5, r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	2000      	movs	r0, #0
 8002baa:	460a      	mov	r2, r1
 8002bac:	4603      	mov	r3, r0
 8002bae:	0d95      	lsrs	r5, r2, #22
 8002bb0:	0294      	lsls	r4, r2, #10
 8002bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	f7fe faa9 	bl	8001114 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bdb0      	pop	{r4, r5, r7, pc}

08002bd4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002bd4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002bde:	2100      	movs	r1, #0
 8002be0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	2000      	movs	r0, #0
 8002be6:	460c      	mov	r4, r1
 8002be8:	4605      	mov	r5, r0
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f04f 0a00 	mov.w	sl, #0
 8002bf2:	f04f 0b00 	mov.w	fp, #0
 8002bf6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002bfa:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002bfe:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002c02:	4650      	mov	r0, sl
 8002c04:	4659      	mov	r1, fp
 8002c06:	1b02      	subs	r2, r0, r4
 8002c08:	eb61 0305 	sbc.w	r3, r1, r5
 8002c0c:	f04f 0000 	mov.w	r0, #0
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	0099      	lsls	r1, r3, #2
 8002c16:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c1a:	0090      	lsls	r0, r2, #2
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	eb12 0804 	adds.w	r8, r2, r4
 8002c24:	eb43 0905 	adc.w	r9, r3, r5
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c3c:	4690      	mov	r8, r2
 8002c3e:	4699      	mov	r9, r3
 8002c40:	4640      	mov	r0, r8
 8002c42:	4649      	mov	r1, r9
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	0a82      	lsrs	r2, r0, #10
 8002c4e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002c52:	0a8b      	lsrs	r3, r1, #10
 8002c54:	4613      	mov	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002c58:	68fb      	ldr	r3, [r7, #12]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c64:	4770      	bx	lr

08002c66 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff93 	bl	8002b9a <TIMER_IF_Convert_ms2Tick>
 8002c74:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002c76:	f000 f8d5 	bl	8002e24 <GetTimerTicks>
 8002c7a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002c7c:	e000      	b.n	8002c80 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002c7e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002c80:	f000 f8d0 	bl	8002e24 <GetTimerTicks>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f6      	bhi.n	8002c7e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002ca2:	f01d f89d 	bl	801fde0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002cb6:	f000 f8a5 	bl	8002e04 <TIMER_IF_BkUp_Read_MSBticks>
 8002cba:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f88f 	bl	8002de4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002cce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd2:	b08c      	sub	sp, #48	; 0x30
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002cdc:	f000 f8a2 	bl	8002e24 <GetTimerTicks>
 8002ce0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002ce2:	f000 f88f 	bl	8002e04 <TIMER_IF_BkUp_Read_MSBticks>
 8002ce6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	2200      	movs	r2, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	60fa      	str	r2, [r7, #12]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	000b      	movs	r3, r1
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d00:	2000      	movs	r0, #0
 8002d02:	460c      	mov	r4, r1
 8002d04:	4605      	mov	r5, r0
 8002d06:	eb12 0804 	adds.w	r8, r2, r4
 8002d0a:	eb43 0905 	adc.w	r9, r3, r5
 8002d0e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002d12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	0a82      	lsrs	r2, r0, #10
 8002d20:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d24:	0a8b      	lsrs	r3, r1, #10
 8002d26:	4613      	mov	r3, r2
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002d38:	f04f 0b00 	mov.w	fp, #0
 8002d3c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ff46 	bl	8002bd4 <TIMER_IF_Convert_Tick2ms>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3730      	adds	r7, #48	; 0x30
 8002d56:	46bd      	mov	sp, r7
 8002d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d5c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	2100      	movs	r1, #0
 8002d68:	4803      	ldr	r0, [pc, #12]	; (8002d78 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002d6a:	f007 fd33 	bl	800a7d4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000404 	.word	0x20000404

08002d7c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	2101      	movs	r1, #1
 8002d88:	4803      	ldr	r0, [pc, #12]	; (8002d98 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002d8a:	f007 fd23 	bl	800a7d4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000404 	.word	0x20000404

08002d9c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002da6:	2100      	movs	r1, #0
 8002da8:	4804      	ldr	r0, [pc, #16]	; (8002dbc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002daa:	f007 fd2b 	bl	800a804 <HAL_RTCEx_BKUPRead>
 8002dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000404 	.word	0x20000404

08002dc0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002dce:	f007 fd19 	bl	800a804 <HAL_RTCEx_BKUPRead>
 8002dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002dd4:	687b      	ldr	r3, [r7, #4]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000404 	.word	0x20000404

08002de4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	2102      	movs	r1, #2
 8002df0:	4803      	ldr	r0, [pc, #12]	; (8002e00 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002df2:	f007 fcef 	bl	800a7d4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000404 	.word	0x20000404

08002e04 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002e0e:	f007 fcf9 	bl	800a804 <HAL_RTCEx_BKUPRead>
 8002e12:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002e14:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000404 	.word	0x20000404

08002e24 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e2a:	480b      	ldr	r0, [pc, #44]	; (8002e58 <GetTimerTicks+0x34>)
 8002e2c:	f7ff fdd8 	bl	80029e0 <LL_RTC_TIME_GetSubSecond>
 8002e30:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e32:	e003      	b.n	8002e3c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e34:	4808      	ldr	r0, [pc, #32]	; (8002e58 <GetTimerTicks+0x34>)
 8002e36:	f7ff fdd3 	bl	80029e0 <LL_RTC_TIME_GetSubSecond>
 8002e3a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e3c:	4806      	ldr	r0, [pc, #24]	; (8002e58 <GetTimerTicks+0x34>)
 8002e3e:	f7ff fdcf 	bl	80029e0 <LL_RTC_TIME_GetSubSecond>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d1f4      	bne.n	8002e34 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40002800 	.word	0x40002800

08002e5c <LL_AHB2_GRP1_EnableClock>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e80:	68fb      	ldr	r3, [r7, #12]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <LL_APB2_GRP1_EnableClock>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <LL_APB2_GRP1_DisableClock>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002ee6:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <MX_USART1_UART_Init+0x94>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f28:	4811      	ldr	r0, [pc, #68]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f2a:	f008 fd2e 	bl	800b98a <HAL_UART_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f34:	f7ff f86c 	bl	8002010 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f38:	2100      	movs	r1, #0
 8002f3a:	480d      	ldr	r0, [pc, #52]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f3c:	f00a ff9b 	bl	800de76 <HAL_UARTEx_SetTxFifoThreshold>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f46:	f7ff f863 	bl	8002010 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4808      	ldr	r0, [pc, #32]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f4e:	f00a ffd0 	bl	800def2 <HAL_UARTEx_SetRxFifoThreshold>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f58:	f7ff f85a 	bl	8002010 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <MX_USART1_UART_Init+0x90>)
 8002f5e:	f00a ff4f 	bl	800de00 <HAL_UARTEx_EnableFifoMode>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f68:	f7ff f852 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200004bc 	.word	0x200004bc
 8002f74:	40013800 	.word	0x40013800

08002f78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b096      	sub	sp, #88	; 0x58
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	2238      	movs	r2, #56	; 0x38
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f01d fbc1 	bl	8020720 <memset>
  if(uartHandle->Instance==USART1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <HAL_UART_MspInit+0xe8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d156      	bne.n	8003056 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002fb0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 ff94 	bl	8009ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002fc2:	f7ff f825 	bl	8002010 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fc6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fca:	f7ff ff5f 	bl	8002e8c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	2002      	movs	r0, #2
 8002fd0:	f7ff ff44 	bl	8002e5c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002fd4:	23c0      	movs	r3, #192	; 0xc0
 8002fd6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fec:	4619      	mov	r1, r3
 8002fee:	481d      	ldr	r0, [pc, #116]	; (8003064 <HAL_UART_MspInit+0xec>)
 8002ff0:	f004 fcc0 	bl	8007974 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_UART_MspInit+0xf4>)
 8002ff8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8002ffc:	2212      	movs	r2, #18
 8002ffe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8003002:	2210      	movs	r2, #16
 8003004:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8003008:	2200      	movs	r2, #0
 800300a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_UART_MspInit+0xf0>)
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <HAL_UART_MspInit+0xf0>)
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8003020:	2200      	movs	r2, #0
 8003022:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800302a:	480f      	ldr	r0, [pc, #60]	; (8003068 <HAL_UART_MspInit+0xf0>)
 800302c:	f003 fe9e 	bl	8006d6c <HAL_DMA_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8003036:	f7fe ffeb 	bl	8002010 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_UART_MspInit+0xf0>)
 800303e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_UART_MspInit+0xf0>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2102      	movs	r1, #2
 800304a:	2024      	movs	r0, #36	; 0x24
 800304c:	f003 fe57 	bl	8006cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003050:	2024      	movs	r0, #36	; 0x24
 8003052:	f003 fe6e 	bl	8006d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003056:	bf00      	nop
 8003058:	3758      	adds	r7, #88	; 0x58
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40013800 	.word	0x40013800
 8003064:	48000400 	.word	0x48000400
 8003068:	20000550 	.word	0x20000550
 800306c:	40020008 	.word	0x40020008

08003070 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <HAL_UART_MspDeInit+0x3c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d10f      	bne.n	80030a2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003082:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003086:	f7ff ff19 	bl	8002ebc <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800308a:	21c0      	movs	r1, #192	; 0xc0
 800308c:	4808      	ldr	r0, [pc, #32]	; (80030b0 <HAL_UART_MspDeInit+0x40>)
 800308e:	f004 fdd1 	bl	8007c34 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003096:	4618      	mov	r0, r3
 8003098:	f003 ff10 	bl	8006ebc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800309c:	2024      	movs	r0, #36	; 0x24
 800309e:	f003 fe56 	bl	8006d4e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40013800 	.word	0x40013800
 80030b0:	48000400 	.word	0x48000400

080030b4 <LL_APB2_GRP1_ForceReset>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	640b      	str	r3, [r1, #64]	; 0x40
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <LL_APB2_GRP1_ReleaseReset>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ec:	4013      	ands	r3, r2
 80030ee:	640b      	str	r3, [r1, #64]	; 0x40
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
	...

080030fc <LL_EXTI_EnableIT_0_31>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <LL_EXTI_EnableIT_0_31+0x24>)
 8003106:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800310a:	4905      	ldr	r1, [pc, #20]	; (8003120 <LL_EXTI_EnableIT_0_31+0x24>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	58000800 	.word	0x58000800

08003124 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800312c:	4a07      	ldr	r2, [pc, #28]	; (800314c <vcom_Init+0x28>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003132:	f7fe fae9 	bl	8001708 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003136:	f7ff fed3 	bl	8002ee0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800313a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800313e:	f7ff ffdd 	bl	80030fc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003142:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200005b4 	.word	0x200005b4

08003150 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003154:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003158:	f7ff ffac 	bl	80030b4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800315c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003160:	f7ff ffb9 	bl	80030d6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003164:	4804      	ldr	r0, [pc, #16]	; (8003178 <vcom_DeInit+0x28>)
 8003166:	f7ff ff83 	bl	8003070 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800316a:	200f      	movs	r0, #15
 800316c:	f003 fdef 	bl	8006d4e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003170:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003172:	4618      	mov	r0, r3
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200004bc 	.word	0x200004bc

0800317c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	461a      	mov	r2, r3
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4804      	ldr	r0, [pc, #16]	; (80031a0 <vcom_Trace_DMA+0x24>)
 8003190:	f008 fde2 	bl	800bd58 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003194:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200004bc 	.word	0x200004bc

080031a4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80031ac:	4a19      	ldr	r2, [pc, #100]	; (8003214 <vcom_ReceiveInit+0x70>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80031b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031b6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031c0:	4815      	ldr	r0, [pc, #84]	; (8003218 <vcom_ReceiveInit+0x74>)
 80031c2:	f00a fd90 	bl	800dce6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80031c6:	bf00      	nop
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <vcom_ReceiveInit+0x74>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d0f7      	beq.n	80031c8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80031d8:	bf00      	nop
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <vcom_ReceiveInit+0x74>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e8:	d1f7      	bne.n	80031da <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <vcom_ReceiveInit+0x74>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <vcom_ReceiveInit+0x74>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80031f8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80031fa:	4807      	ldr	r0, [pc, #28]	; (8003218 <vcom_ReceiveInit+0x74>)
 80031fc:	f00a fdce 	bl	800dd9c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003200:	2201      	movs	r2, #1
 8003202:	4906      	ldr	r1, [pc, #24]	; (800321c <vcom_ReceiveInit+0x78>)
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <vcom_ReceiveInit+0x74>)
 8003206:	f008 fd5b 	bl	800bcc0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800320a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	200005b8 	.word	0x200005b8
 8003218:	200004bc 	.word	0x200004bc
 800321c:	200005b0 	.word	0x200005b0

08003220 <vcom_Resume>:

void vcom_Resume(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003224:	4808      	ldr	r0, [pc, #32]	; (8003248 <vcom_Resume+0x28>)
 8003226:	f008 fbb0 	bl	800b98a <HAL_UART_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003230:	f7fe feee 	bl	8002010 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <vcom_Resume+0x2c>)
 8003236:	f003 fd99 	bl	8006d6c <HAL_DMA_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003240:	f7fe fee6 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200004bc 	.word	0x200004bc
 800324c:	20000550 	.word	0x20000550

08003250 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a05      	ldr	r2, [pc, #20]	; (8003274 <HAL_UART_TxCpltCallback+0x24>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d103      	bne.n	800326a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_UART_TxCpltCallback+0x28>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2000      	movs	r0, #0
 8003268:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40013800 	.word	0x40013800
 8003278:	200005b4 	.word	0x200005b4

0800327c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <HAL_UART_RxCpltCallback+0x44>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d113      	bne.n	80032b6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_UART_RxCpltCallback+0x48>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_UART_RxCpltCallback+0x30>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_UART_RxCpltCallback+0x48>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2101      	movs	r1, #1
 80032a8:	4807      	ldr	r0, [pc, #28]	; (80032c8 <HAL_UART_RxCpltCallback+0x4c>)
 80032aa:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80032ac:	2201      	movs	r2, #1
 80032ae:	4906      	ldr	r1, [pc, #24]	; (80032c8 <HAL_UART_RxCpltCallback+0x4c>)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f008 fd05 	bl	800bcc0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40013800 	.word	0x40013800
 80032c4:	200005b8 	.word	0x200005b8
 80032c8:	200005b0 	.word	0x200005b0

080032cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032cc:	480d      	ldr	r0, [pc, #52]	; (8003304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032d0:	f7ff fb80 	bl	80029d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <LoopForever+0x6>)
  ldr r1, =_edata
 80032d6:	490d      	ldr	r1, [pc, #52]	; (800330c <LoopForever+0xa>)
  ldr r2, =_sidata
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <LoopForever+0xe>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032dc:	e002      	b.n	80032e4 <LoopCopyDataInit>

080032de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032e2:	3304      	adds	r3, #4

080032e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e8:	d3f9      	bcc.n	80032de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032ec:	4c0a      	ldr	r4, [pc, #40]	; (8003318 <LoopForever+0x16>)
  movs r3, #0
 80032ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f0:	e001      	b.n	80032f6 <LoopFillZerobss>

080032f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f4:	3204      	adds	r2, #4

080032f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f8:	d3fb      	bcc.n	80032f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032fa:	f01d f9df 	bl	80206bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032fe:	f7fe fddd 	bl	8001ebc <main>

08003302 <LoopForever>:

LoopForever:
    b LoopForever
 8003302:	e7fe      	b.n	8003302 <LoopForever>
  ldr   r0, =_estack
 8003304:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8003310:	08022184 	.word	0x08022184
  ldr r2, =_sbss
 8003314:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8003318:	200024c4 	.word	0x200024c4

0800331c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC_IRQHandler>

0800331e <_ZN8DetectorC1Ev>:
enum {
	sipm_temp_adc,
	sipm_signal_adc
};

Detector::Detector() {
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  lastClearingTime      = 0;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
  integratedDoseTime_ms = 0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
  measuredDose          = 0;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
}
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
	...

08003348 <_ZN8Detector4initEv>:

void Detector::init() {
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  clearPhosphor();
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f898 	bl	8003486 <_ZN8Detector13clearPhosphorEv>
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 8003356:	2201      	movs	r2, #1
 8003358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800335c:	4803      	ldr	r0, [pc, #12]	; (800336c <_ZN8Detector4initEv+0x24>)
 800335e:	f004 fd4e 	bl	8007dfe <HAL_GPIO_WritePin>
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	48000400 	.word	0x48000400

08003370 <_ZL3avgPtt>:
  //TODO: calculate the dacValue from the temperature

  return setSiPM_Bias(dacValue);
}

static float avg(uint16_t *arr, uint16_t len) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
    float result = 0;
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 8003382:	2300      	movs	r3, #0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	897a      	ldrh	r2, [r7, #10]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	429a      	cmp	r2, r3
 800338c:	d212      	bcs.n	80033b4 <_ZL3avgPtt+0x44>
        result += arr[i];
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd fcd1 	bl	8000d40 <__aeabi_i2f>
 800339e:	4603      	mov	r3, r0
 80033a0:	4619      	mov	r1, r3
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7fd fc18 	bl	8000bd8 <__addsf3>
 80033a8:	4603      	mov	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 80033ac:	897b      	ldrh	r3, [r7, #10]
 80033ae:	3301      	adds	r3, #1
 80033b0:	817b      	strh	r3, [r7, #10]
 80033b2:	e7e8      	b.n	8003386 <_ZL3avgPtt+0x16>
    }
    return result / len;
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fcc2 	bl	8000d40 <__aeabi_i2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	4619      	mov	r1, r3
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7fd fdc5 	bl	8000f50 <__aeabi_fdiv>
 80033c6:	4603      	mov	r3, r0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZN8Detector14sampleSiPMtempEv>:

float Detector::sampleSiPMtemp(){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	sampleADC(sipm_temp_adc);
 80033d8:	2100      	movs	r1, #0
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8da 	bl	8003594 <_ZN8Detector9sampleADCEh>
	float avgADC = avg(SiPM_temp_measurements, NUM_TEMP_SAMPLES);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	330c      	adds	r3, #12
 80033e4:	2110      	movs	r1, #16
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ffc2 	bl	8003370 <_ZL3avgPtt>
 80033ec:	60f8      	str	r0, [r7, #12]
	// https://learn.adafruit.com/tmp36-temperature-sensor/overview
	// 3.3v 12 bit dynamic range with a sensor conversion of 10mV/C and a .5v offset
	float temp_c = ((avgADC * 3.3 / 4096)*1000 - 500) / 10;
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7fd f882 	bl	80004f8 <__aeabi_f2d>
 80033f4:	a31a      	add	r3, pc, #104	; (adr r3, 8003460 <_ZN8Detector14sampleSiPMtempEv+0x90>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fd f8d5 	bl	80005a8 <__aeabi_dmul>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <_ZN8Detector14sampleSiPMtempEv+0x98>)
 800340c:	f7fd f9f6 	bl	80007fc <__aeabi_ddiv>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <_ZN8Detector14sampleSiPMtempEv+0x9c>)
 800341e:	f7fd f8c3 	bl	80005a8 <__aeabi_dmul>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <_ZN8Detector14sampleSiPMtempEv+0xa0>)
 8003430:	f7fc ff02 	bl	8000238 <__aeabi_dsub>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <_ZN8Detector14sampleSiPMtempEv+0xa4>)
 8003442:	f7fd f9db 	bl	80007fc <__aeabi_ddiv>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f7fd fb6d 	bl	8000b2c <__aeabi_d2f>
 8003452:	4603      	mov	r3, r0
 8003454:	60bb      	str	r3, [r7, #8]
	return temp_c;
 8003456:	68bb      	ldr	r3, [r7, #8]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	66666666 	.word	0x66666666
 8003464:	400a6666 	.word	0x400a6666
 8003468:	40b00000 	.word	0x40b00000
 800346c:	408f4000 	.word	0x408f4000
 8003470:	407f4000 	.word	0x407f4000
 8003474:	40240000 	.word	0x40240000

08003478 <_ZL3nowv>:

static uint32_t now() {
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  //use the HAL to get the current time in milliseconds
  return HAL_GetTick();
 800347c:	f7ff f9fc 	bl	8002878 <HAL_GetTick>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	bd80      	pop	{r7, pc}

08003486 <_ZN8Detector13clearPhosphorEv>:

void Detector::clearPhosphor() {
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  clearLED_On();
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f862 	bl	8003558 <_ZN8Detector11clearLED_OnEv>
  HAL_Delay(CLEARING_TIME_ms);
 8003494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003498:	f7ff fa02 	bl	80028a0 <HAL_Delay>
  clearLED_Off();
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f86a 	bl	8003576 <_ZN8Detector12clearLED_OffEv>

  lastClearingTime = now();
 80034a2:	f7ff ffe9 	bl	8003478 <_ZL3nowv>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_ZN8Detector16sampleSiPMsignalEv>:

float Detector::sampleSiPMsignal(){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	stimLED_On();
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f82b 	bl	8003518 <_ZN8Detector10stimLED_OnEv>
	HAL_Delay(STABLE_MEASUREMENT_WINDOW_ms);
 80034c2:	2064      	movs	r0, #100	; 0x64
 80034c4:	f7ff f9ec 	bl	80028a0 <HAL_Delay>
	sampleADC(sipm_signal_adc);
 80034c8:	2101      	movs	r1, #1
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f862 	bl	8003594 <_ZN8Detector9sampleADCEh>
	stimLED_Off();
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f831 	bl	8003538 <_ZN8Detector11stimLED_OffEv>
	float avgSipmSignal = avg(SiPM_signal_measurements, NUM_SiPM_SAMPLES);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	332c      	adds	r3, #44	; 0x2c
 80034da:	2110      	movs	r1, #16
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff47 	bl	8003370 <_ZL3avgPtt>
 80034e2:	60f8      	str	r0, [r7, #12]
	clearPhosphor();
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ffce 	bl	8003486 <_ZN8Detector13clearPhosphorEv>

	return avgSipmSignal;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZN8Detector13toggleStimLEDEv>:

float Detector::calcDoseRate() {
  return measuredDose / (integratedDoseTime_ms / 1000.0);
}

void Detector::toggleStimLED() {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  stimLED_On();
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f80b 	bl	8003518 <_ZN8Detector10stimLED_OnEv>
  HAL_Delay(1000);
 8003502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003506:	f7ff f9cb 	bl	80028a0 <HAL_Delay>
  stimLED_Off();
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f814 	bl	8003538 <_ZN8Detector11stimLED_OffEv>
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZN8Detector10stimLED_OnEv>:

void Detector::stimLED_On() {
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  //use the HAL to turn on the LED
  HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_SET);
 8003520:	2201      	movs	r2, #1
 8003522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003526:	4803      	ldr	r0, [pc, #12]	; (8003534 <_ZN8Detector10stimLED_OnEv+0x1c>)
 8003528:	f004 fc69 	bl	8007dfe <HAL_GPIO_WritePin>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	48000400 	.word	0x48000400

08003538 <_ZN8Detector11stimLED_OffEv>:

void Detector::stimLED_Off() {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  //use the HAL to turn off the LED
  HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_RESET);
 8003540:	2200      	movs	r2, #0
 8003542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003546:	4803      	ldr	r0, [pc, #12]	; (8003554 <_ZN8Detector11stimLED_OffEv+0x1c>)
 8003548:	f004 fc59 	bl	8007dfe <HAL_GPIO_WritePin>
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	48000400 	.word	0x48000400

08003558 <_ZN8Detector11clearLED_OnEv>:

void Detector::clearLED_On() {
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  //use the HAL to turn on the LED
  HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_SET);
 8003560:	2201      	movs	r2, #1
 8003562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356a:	f004 fc48 	bl	8007dfe <HAL_GPIO_WritePin>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_ZN8Detector12clearLED_OffEv>:

void Detector::clearLED_Off() {
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  //use the HAL to turn off the LED
  HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_RESET);
 800357e:	2200      	movs	r2, #0
 8003580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003588:	f004 fc39 	bl	8007dfe <HAL_GPIO_WritePin>
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN8Detector9sampleADCEh>:
    //read the ADC value
    SiPM_signal_measurements[i] = HAL_ADC_GetValue(&hadc);
  }
}*/

void Detector::sampleADC(uint8_t target) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
	uint8_t n_samples = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	long unsigned int channel = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
	uint16_t *buf = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]

	switch (target){
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <_ZN8Detector9sampleADCEh+0x26>
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d009      	beq.n	80035cc <_ZN8Detector9sampleADCEh+0x38>
			n_samples = NUM_SiPM_SAMPLES;
			channel = SiPM_SIGNAL_ADC_CHANNEL;
			buf = SiPM_signal_measurements;
			break;
		default:
			break;
 80035b8:	e011      	b.n	80035de <_ZN8Detector9sampleADCEh+0x4a>
			n_samples = NUM_TEMP_SAMPLES;
 80035ba:	2310      	movs	r3, #16
 80035bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			channel = SiPM_TEMP_ADC_CHANNEL;
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <_ZN8Detector9sampleADCEh+0xe4>)
 80035c2:	623b      	str	r3, [r7, #32]
			buf = SiPM_temp_measurements;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	330c      	adds	r3, #12
 80035c8:	61fb      	str	r3, [r7, #28]
			break;
 80035ca:	e008      	b.n	80035de <_ZN8Detector9sampleADCEh+0x4a>
			n_samples = NUM_SiPM_SAMPLES;
 80035cc:	2310      	movs	r3, #16
 80035ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			channel = SiPM_SIGNAL_ADC_CHANNEL;
 80035d2:	4b2a      	ldr	r3, [pc, #168]	; (800367c <_ZN8Detector9sampleADCEh+0xe8>)
 80035d4:	623b      	str	r3, [r7, #32]
			buf = SiPM_signal_measurements;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	332c      	adds	r3, #44	; 0x2c
 80035da:	61fb      	str	r3, [r7, #28]
			break;
 80035dc:	bf00      	nop
	}
  //reset the buffer to 0
  for (uint16_t i = 0; i < n_samples; i++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	837b      	strh	r3, [r7, #26]
 80035e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	8b7a      	ldrh	r2, [r7, #26]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d209      	bcs.n	8003602 <_ZN8Detector9sampleADCEh+0x6e>
  	buf[i] = 0;
 80035ee:	8b7b      	ldrh	r3, [r7, #26]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	2200      	movs	r2, #0
 80035f8:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < n_samples; i++) {
 80035fa:	8b7b      	ldrh	r3, [r7, #26]
 80035fc:	3301      	adds	r3, #1
 80035fe:	837b      	strh	r3, [r7, #26]
 8003600:	e7ef      	b.n	80035e2 <_ZN8Detector9sampleADCEh+0x4e>
  }

  //set the adc to read from the correct signal pin
  ADC_ChannelConfTypeDef sConfig = {0};
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
  sConfig.Channel = channel;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003616:	2307      	movs	r3, #7
 8003618:	617b      	str	r3, [r7, #20]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800361a:	f107 030c 	add.w	r3, r7, #12
 800361e:	4619      	mov	r1, r3
 8003620:	4817      	ldr	r0, [pc, #92]	; (8003680 <_ZN8Detector9sampleADCEh+0xec>)
 8003622:	f002 fee3 	bl	80063ec <HAL_ADC_ConfigChannel>

  //trash the first sample
  //start the ADC conversion
	HAL_ADC_Start(&hadc);
 8003626:	4816      	ldr	r0, [pc, #88]	; (8003680 <_ZN8Detector9sampleADCEh+0xec>)
 8003628:	f002 fdc4 	bl	80061b4 <HAL_ADC_Start>
	//wait for the conversion to complete
	HAL_ADC_PollForConversion(&hadc, 100);
 800362c:	2164      	movs	r1, #100	; 0x64
 800362e:	4814      	ldr	r0, [pc, #80]	; (8003680 <_ZN8Detector9sampleADCEh+0xec>)
 8003630:	f002 fe38 	bl	80062a4 <HAL_ADC_PollForConversion>

  //take n_samples measurements and log into the buffer
  for (uint16_t i = 0; i < n_samples; i++) {
 8003634:	2300      	movs	r3, #0
 8003636:	833b      	strh	r3, [r7, #24]
 8003638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800363c:	b29b      	uxth	r3, r3
 800363e:	8b3a      	ldrh	r2, [r7, #24]
 8003640:	429a      	cmp	r2, r3
 8003642:	d214      	bcs.n	800366e <_ZN8Detector9sampleADCEh+0xda>
    //start the ADC conversion
    HAL_ADC_Start(&hadc);
 8003644:	480e      	ldr	r0, [pc, #56]	; (8003680 <_ZN8Detector9sampleADCEh+0xec>)
 8003646:	f002 fdb5 	bl	80061b4 <HAL_ADC_Start>
    //wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc, 100);
 800364a:	2164      	movs	r1, #100	; 0x64
 800364c:	480c      	ldr	r0, [pc, #48]	; (8003680 <_ZN8Detector9sampleADCEh+0xec>)
 800364e:	f002 fe29 	bl	80062a4 <HAL_ADC_PollForConversion>
    //read the ADC value
    buf[i] = HAL_ADC_GetValue(&hadc);
 8003652:	480b      	ldr	r0, [pc, #44]	; (8003680 <_ZN8Detector9sampleADCEh+0xec>)
 8003654:	f002 febd 	bl	80063d2 <HAL_ADC_GetValue>
 8003658:	4601      	mov	r1, r0
 800365a:	8b3b      	ldrh	r3, [r7, #24]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	b28a      	uxth	r2, r1
 8003664:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < n_samples; i++) {
 8003666:	8b3b      	ldrh	r3, [r7, #24]
 8003668:	3301      	adds	r3, #1
 800366a:	833b      	strh	r3, [r7, #24]
 800366c:	e7e4      	b.n	8003638 <_ZN8Detector9sampleADCEh+0xa4>
  }
}
 800366e:	bf00      	nop
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08000004 	.word	0x08000004
 800367c:	0c000008 	.word	0x0c000008
 8003680:	200001cc 	.word	0x200001cc

08003684 <_ZN8Detector12setSiPM_BiasEh>:
bool Detector::sipmBias_Off() {
  uint8_t dacValue = 0x00;
  return setSiPM_Bias(dacValue);
}

bool Detector::setSiPM_Bias(uint8_t dacValue) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
  //use the HAL SPI to send the dacValue to the SiPM bias DAC
  
  //set the CS pin low
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_RESET);
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003696:	480d      	ldr	r0, [pc, #52]	; (80036cc <_ZN8Detector12setSiPM_BiasEh+0x48>)
 8003698:	f004 fbb1 	bl	8007dfe <HAL_GPIO_WritePin>
  //send the dacValue
  HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &dacValue, 1, 100);
 800369c:	1cf9      	adds	r1, r7, #3
 800369e:	2364      	movs	r3, #100	; 0x64
 80036a0:	2201      	movs	r2, #1
 80036a2:	480b      	ldr	r0, [pc, #44]	; (80036d0 <_ZN8Detector12setSiPM_BiasEh+0x4c>)
 80036a4:	f007 f998 	bl	800a9d8 <HAL_SPI_Transmit>
 80036a8:	4603      	mov	r3, r0
 80036aa:	73fb      	strb	r3, [r7, #15]
  //set the CS pin high
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 80036ac:	2201      	movs	r2, #1
 80036ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036b2:	4806      	ldr	r0, [pc, #24]	; (80036cc <_ZN8Detector12setSiPM_BiasEh+0x48>)
 80036b4:	f004 fba3 	bl	8007dfe <HAL_GPIO_WritePin>
  //check the status
  if (status != HAL_OK) {
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <_ZN8Detector12setSiPM_BiasEh+0x3e>
    return false;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <_ZN8Detector12setSiPM_BiasEh+0x40>
  }
  return true;
 80036c2:	2301      	movs	r3, #1
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	48000400 	.word	0x48000400
 80036d0:	2000043c 	.word	0x2000043c

080036d4 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f001 fadf 	bl	8004ca4 <null_ptr_check>
 80036e6:	4603      	mov	r3, r0
 80036e8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80036ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d131      	bne.n	8003756 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7a1b      	ldrb	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d003      	beq.n	8003702 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	729a      	strb	r2, [r3, #10]
 8003700:	e002      	b.n	8003708 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8003708:	f107 010e 	add.w	r1, r7, #14
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	2000      	movs	r0, #0
 8003712:	f000 f826 	bl	8003762 <bmp3_get_regs>
 8003716:	4603      	mov	r3, r0
 8003718:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800371a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d119      	bne.n	8003756 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8003722:	7bbb      	ldrb	r3, [r7, #14]
 8003724:	2b50      	cmp	r3, #80	; 0x50
 8003726:	d002      	beq.n	800372e <bmp3_init+0x5a>
 8003728:	7bbb      	ldrb	r3, [r7, #14]
 800372a:	2b60      	cmp	r3, #96	; 0x60
 800372c:	d111      	bne.n	8003752 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 800372e:	7bba      	ldrb	r2, [r7, #14]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f98b 	bl	8003a50 <bmp3_soft_reset>
 800373a:	4603      	mov	r3, r0
 800373c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d107      	bne.n	8003756 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fb33 	bl	8003db2 <get_calib_data>
 800374c:	4603      	mov	r3, r0
 800374e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8003750:	e001      	b.n	8003756 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8003752:	23fe      	movs	r3, #254	; 0xfe
 8003754:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003766:	b08b      	sub	sp, #44	; 0x2c
 8003768:	af00      	add	r7, sp, #0
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	f001 fa95 	bl	8004ca4 <null_ptr_check>
 800377a:	4603      	mov	r3, r0
 800377c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8003780:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003784:	2b00      	cmp	r3, #0
 8003786:	d172      	bne.n	800386e <bmp3_get_regs+0x10c>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06f      	beq.n	800386e <bmp3_get_regs+0x10c>
    {
 800378e:	466b      	mov	r3, sp
 8003790:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	7a9b      	ldrb	r3, [r3, #10]
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	7a9b      	ldrb	r3, [r3, #10]
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	18d1      	adds	r1, r2, r3
 80037a8:	460b      	mov	r3, r1
 80037aa:	3b01      	subs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	2300      	movs	r3, #0
 80037b0:	4688      	mov	r8, r1
 80037b2:	4699      	mov	r9, r3
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037c8:	2300      	movs	r3, #0
 80037ca:	460c      	mov	r4, r1
 80037cc:	461d      	mov	r5, r3
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	00eb      	lsls	r3, r5, #3
 80037d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037dc:	00e2      	lsls	r2, r4, #3
 80037de:	1dcb      	adds	r3, r1, #7
 80037e0:	08db      	lsrs	r3, r3, #3
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	ebad 0d03 	sub.w	sp, sp, r3
 80037e8:	466b      	mov	r3, sp
 80037ea:	3300      	adds	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	7a1b      	ldrb	r3, [r3, #8]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d025      	beq.n	8003842 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037fc:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68dc      	ldr	r4, [r3, #12]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	7bf8      	ldrb	r0, [r7, #15]
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	47a0      	blx	r4
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	e00d      	b.n	8003838 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	7a9b      	ldrb	r3, [r3, #10]
 8003820:	461a      	mov	r2, r3
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	441a      	add	r2, r3
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	440b      	add	r3, r1
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	5c8a      	ldrb	r2, [r1, r2]
 8003830:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	3301      	adds	r3, #1
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d3ed      	bcc.n	800381c <bmp3_get_regs+0xba>
 8003840:	e00b      	b.n	800385a <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68dc      	ldr	r4, [r3, #12]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	7bf8      	ldrb	r0, [r7, #15]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	47a0      	blx	r4
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8003864:	23f9      	movs	r3, #249	; 0xf9
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	46b5      	mov	sp, r6
    {
 800386c:	e002      	b.n	8003874 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800386e:	23ff      	movs	r3, #255	; 0xff
 8003870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 8003874:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8003878:	4618      	mov	r0, r3
 800387a:	372c      	adds	r7, #44	; 0x2c
 800387c:	46bd      	mov	sp, r7
 800387e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003882 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	466b      	mov	r3, sp
 8003894:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0059      	lsls	r1, r3, #1
 800389a:	460b      	mov	r3, r1
 800389c:	3b01      	subs	r3, #1
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	2300      	movs	r3, #0
 80038a2:	4688      	mov	r8, r1
 80038a4:	4699      	mov	r9, r3
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ba:	2300      	movs	r3, #0
 80038bc:	460c      	mov	r4, r1
 80038be:	461d      	mov	r5, r3
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	00eb      	lsls	r3, r5, #3
 80038ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ce:	00e2      	lsls	r2, r4, #3
 80038d0:	1dcb      	adds	r3, r1, #7
 80038d2:	08db      	lsrs	r3, r3, #3
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	ebad 0d03 	sub.w	sp, sp, r3
 80038da:	466b      	mov	r3, sp
 80038dc:	3300      	adds	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f001 f9df 	bl	8004ca4 <null_ptr_check>
 80038e6:	4603      	mov	r3, r0
 80038e8:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80038ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d14c      	bne.n	800398c <bmp3_set_regs+0x10a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d049      	beq.n	800398c <bmp3_set_regs+0x10a>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d046      	beq.n	800398c <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d040      	beq.n	8003986 <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	7a1b      	ldrb	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d114      	bne.n	800393e <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003914:	2300      	movs	r3, #0
 8003916:	76bb      	strb	r3, [r7, #26]
 8003918:	e00d      	b.n	8003936 <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800391a:	7ebb      	ldrb	r3, [r7, #26]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	7ebb      	ldrb	r3, [r7, #26]
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	440b      	add	r3, r1
 8003928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003930:	7ebb      	ldrb	r3, [r7, #26]
 8003932:	3301      	adds	r3, #1
 8003934:	76bb      	strb	r3, [r7, #26]
 8003936:	7ebb      	ldrb	r3, [r7, #26]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d8ed      	bhi.n	800391a <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d909      	bls.n	8003958 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	6939      	ldr	r1, [r7, #16]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa56 	bl	8003dfc <interleave_reg_addr>
                temp_len = len * 2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e001      	b.n	800395c <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691c      	ldr	r4, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	7818      	ldrb	r0, [r3, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	6939      	ldr	r1, [r7, #16]
 800396c:	47a0      	blx	r4
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8003980:	23f9      	movs	r3, #249	; 0xf9
 8003982:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8003984:	e005      	b.n	8003992 <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8003986:	23fa      	movs	r3, #250	; 0xfa
 8003988:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800398a:	e002      	b.n	8003992 <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800398c:	23ff      	movs	r3, #255	; 0xff
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e000      	b.n	8003994 <bmp3_set_regs+0x112>
        if (len != 0)
 8003992:	bf00      	nop
    }

    return rslt;
 8003994:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003998:	46b5      	mov	sp, r6
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	; 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080039a4 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80039ae:	6838      	ldr	r0, [r7, #0]
 80039b0:	f001 f978 	bl	8004ca4 <null_ptr_check>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80039b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d141      	bne.n	8003a44 <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	2006      	movs	r0, #6
 80039c4:	f001 f957 	bl	8004c76 <are_settings_changed>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 80039ce:	6839      	ldr	r1, [r7, #0]
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fa77 	bl	8003ec4 <set_pwr_ctrl_settings>
 80039d6:	4603      	mov	r3, r0
 80039d8:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	20f0      	movs	r0, #240	; 0xf0
 80039de:	f001 f94a 	bl	8004c76 <are_settings_changed>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <bmp3_set_sensor_settings+0x58>
 80039e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fab6 	bl	8003f64 <set_odr_filter_settings>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003a02:	f001 f938 	bl	8004c76 <are_settings_changed>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <bmp3_set_sensor_settings+0x7c>
 8003a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 8003a14:	6839      	ldr	r1, [r7, #0]
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fb12 	bl	8004040 <set_int_ctrl_settings>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003a26:	f001 f926 	bl	8004c76 <are_settings_changed>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <bmp3_set_sensor_settings+0xa0>
 8003a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fb79 	bl	8004132 <set_advance_settings>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8003a58:	237e      	movs	r3, #126	; 0x7e
 8003a5a:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8003a5c:	23b6      	movs	r3, #182	; 0xb6
 8003a5e:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f001 f91f 	bl	8004ca4 <null_ptr_check>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d140      	bne.n	8003af4 <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8003a72:	f107 010c 	add.w	r1, r7, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	f7ff fe71 	bl	8003762 <bmp3_get_regs>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8003a84:	7b3b      	ldrb	r3, [r7, #12]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02e      	beq.n	8003aec <bmp3_soft_reset+0x9c>
 8003a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d12a      	bne.n	8003aec <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003a96:	f107 010d 	add.w	r1, r7, #13
 8003a9a:	f107 000e 	add.w	r0, r7, #14
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f7ff feee 	bl	8003882 <bmp3_set_regs>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11f      	bne.n	8003af2 <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6852      	ldr	r2, [r2, #4]
 8003aba:	4611      	mov	r1, r2
 8003abc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ac0:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8003ac2:	f107 010b 	add.w	r1, r7, #11
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	2002      	movs	r0, #2
 8003acc:	f7ff fe49 	bl	8003762 <bmp3_get_regs>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <bmp3_soft_reset+0x96>
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003ae6:	23fc      	movs	r3, #252	; 0xfc
 8003ae8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003aea:	e002      	b.n	8003af2 <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003aec:	23fc      	movs	r3, #252	; 0xfc
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e000      	b.n	8003af4 <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 8003af2:	bf00      	nop
        }
    }

    return rslt;
 8003af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f001 f8cb 	bl	8004ca4 <null_ptr_check>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d130      	bne.n	8003b7c <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003b20:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8003b22:	f107 030d 	add.w	r3, r7, #13
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f82d 	bl	8003b88 <bmp3_get_op_mode>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 8003b32:	7b7b      	ldrb	r3, [r7, #13]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f8fa 	bl	8003d32 <put_device_to_sleep>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6852      	ldr	r2, [r2, #4]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b50:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8003b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d110      	bne.n	8003b7c <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8003b5a:	7bbb      	ldrb	r3, [r7, #14]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d105      	bne.n	8003b6c <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f880 	bl	8003c66 <set_normal_mode>
 8003b66:	4603      	mov	r3, r0
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e007      	b.n	8003b7c <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d104      	bne.n	8003b7c <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8a7 	bl	8003cc6 <write_power_mode>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	f001 f886 	bl	8004ca4 <null_ptr_check>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 8003b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d114      	bne.n	8003bce <bmp3_get_op_mode+0x46>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	201b      	movs	r0, #27
 8003bb2:	f7ff fdd6 	bl	8003762 <bmp3_get_regs>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	111b      	asrs	r3, r3, #4
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e001      	b.n	8003bd2 <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003bce:	23ff      	movs	r3, #255	; 0xff
 8003bd0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b088      	sub	sp, #32
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	4603      	mov	r3, r0
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f001 f850 	bl	8004ca4 <null_ptr_check>
 8003c04:	4603      	mov	r3, r0
 8003c06:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 8003c08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d122      	bne.n	8003c56 <bmp3_get_sensor_data+0x78>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01f      	beq.n	8003c56 <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8003c16:	f107 0118 	add.w	r1, r7, #24
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2206      	movs	r2, #6
 8003c1e:	2004      	movs	r0, #4
 8003c20:	f7ff fd9f 	bl	8003762 <bmp3_get_regs>
 8003c24:	4603      	mov	r3, r0
 8003c26:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 8003c28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8003c30:	f107 0210 	add.w	r2, r7, #16
 8003c34:	f107 0318 	add.w	r3, r7, #24
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fc67 	bl	800450e <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3318      	adds	r3, #24
 8003c44:	f107 0110 	add.w	r1, r7, #16
 8003c48:	7bf8      	ldrb	r0, [r7, #15]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f000 fc92 	bl	8004574 <compensate_data>
 8003c50:	4603      	mov	r3, r0
 8003c52:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 8003c54:	e001      	b.n	8003c5a <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003c56:	23ff      	movs	r3, #255	; 0xff
 8003c58:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003c5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f887 	bl	8003d82 <validate_normal_mode_settings>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8003c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11c      	bne.n	8003cba <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f820 	bl	8003cc6 <write_power_mode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8003c92:	f107 010e 	add.w	r1, r7, #14
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2002      	movs	r0, #2
 8003c9c:	f7ff fd61 	bl	8003762 <bmp3_get_regs>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8003ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003cb6:	23fb      	movs	r3, #251	; 0xfb
 8003cb8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003cce:	231b      	movs	r3, #27
 8003cd0:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003cd8:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8003cda:	7b78      	ldrb	r0, [r7, #13]
 8003cdc:	f107 010c 	add.w	r1, r7, #12
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f7ff fd3d 	bl	8003762 <bmp3_get_regs>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8003cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d118      	bne.n	8003d26 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8003cf4:	7b3b      	ldrb	r3, [r7, #12]
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cfc:	b25a      	sxtb	r2, r3
 8003cfe:	7bbb      	ldrb	r3, [r7, #14]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	b25b      	sxtb	r3, r3
 8003d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8003d12:	f107 010c 	add.w	r1, r7, #12
 8003d16:	f107 000d 	add.w	r0, r7, #13
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f7ff fdb0 	bl	8003882 <bmp3_set_regs>
 8003d22:	4603      	mov	r3, r0
 8003d24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003d3a:	231b      	movs	r3, #27
 8003d3c:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8003d3e:	f107 010d 	add.w	r1, r7, #13
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	201b      	movs	r0, #27
 8003d48:	f7ff fd0b 	bl	8003762 <bmp3_get_regs>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10e      	bne.n	8003d76 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8003d58:	7b7b      	ldrb	r3, [r7, #13]
 8003d5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8003d62:	f107 010d 	add.w	r1, r7, #13
 8003d66:	f107 000e 	add.w	r0, r7, #14
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f7ff fd88 	bl	8003882 <bmp3_set_regs>
 8003d72:	4603      	mov	r3, r0
 8003d74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa23 	bl	80041d6 <get_odr_filter_settings>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fa37 	bl	8004210 <validate_osr_and_odr_settings>
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b088      	sub	sp, #32
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003dba:	2331      	movs	r3, #49	; 0x31
 8003dbc:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	60da      	str	r2, [r3, #12]
 8003dd0:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8003dd2:	f107 0108 	add.w	r1, r7, #8
 8003dd6:	7ff8      	ldrb	r0, [r7, #31]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2215      	movs	r2, #21
 8003ddc:	f7ff fcc1 	bl	8003762 <bmp3_get_regs>
 8003de0:	4603      	mov	r3, r0
 8003de2:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fbfa 	bl	80045e4 <parse_calib_data>

    return rslt;
 8003df0:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e015      	b.n	8003e3c <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	441a      	add	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	440b      	add	r3, r1
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	441a      	add	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	440b      	add	r3, r1
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3e5      	bcc.n	8003e10 <interleave_reg_addr+0x14>
    }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	10db      	asrs	r3, r3, #3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	105b      	asrs	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	709a      	strb	r2, [r3, #2]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003ece:	231b      	movs	r3, #27
 8003ed0:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003ed2:	7bb8      	ldrb	r0, [r7, #14]
 8003ed4:	f107 010d 	add.w	r1, r7, #13
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f7ff fc41 	bl	8003762 <bmp3_get_regs>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d134      	bne.n	8003f56 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00f      	beq.n	8003f16 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8003ef6:	7b7b      	ldrb	r3, [r7, #13]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	b25a      	sxtb	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 8003f20:	7b7b      	ldrb	r3, [r7, #13]
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	f023 0302 	bic.w	r3, r3, #2
 8003f28:	b25a      	sxtb	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	b25b      	sxtb	r3, r3
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f42:	f107 010d 	add.w	r1, r7, #13
 8003f46:	f107 000e 	add.w	r0, r7, #14
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f7ff fc98 	bl	8003882 <bmp3_set_regs>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8003f6e:	4b33      	ldr	r3, [pc, #204]	; (800403c <set_odr_filter_settings+0xd8>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	82bb      	strh	r3, [r7, #20]
 8003f74:	2300      	movs	r3, #0
 8003f76:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003f7c:	f107 0110 	add.w	r1, r7, #16
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2204      	movs	r2, #4
 8003f84:	201c      	movs	r0, #28
 8003f86:	f7ff fbec 	bl	8003762 <bmp3_get_regs>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d14b      	bne.n	800402e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	f000 fe6c 	bl	8004c76 <are_settings_changed>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 8003fa4:	f107 000f 	add.w	r0, r7, #15
 8003fa8:	f107 0210 	add.w	r2, r7, #16
 8003fac:	f107 0114 	add.w	r1, r7, #20
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f9e4 	bl	8004384 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	2080      	movs	r0, #128	; 0x80
 8003fc0:	f000 fe59 	bl	8004c76 <are_settings_changed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003fca:	f107 020f 	add.w	r2, r7, #15
 8003fce:	f107 0110 	add.w	r1, r7, #16
 8003fd2:	f107 0014 	add.w	r0, r7, #20
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f000 fa2b 	bl	8004432 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	2040      	movs	r0, #64	; 0x40
 8003fe0:	f000 fe49 	bl	8004c76 <are_settings_changed>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8003fea:	f107 020f 	add.w	r2, r7, #15
 8003fee:	f107 0110 	add.w	r1, r7, #16
 8003ff2:	f107 0014 	add.w	r0, r7, #20
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f000 fa54 	bl	80044a4 <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004002:	2b03      	cmp	r3, #3
 8004004:	d104      	bne.n	8004010 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f000 f902 	bl	8004210 <validate_osr_and_odr_settings>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8004010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	461a      	mov	r2, r3
 800401c:	f107 0110 	add.w	r1, r7, #16
 8004020:	f107 0014 	add.w	r0, r7, #20
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f7ff fc2c 	bl	8003882 <bmp3_set_regs>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800402e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	0802101c 	.word	0x0802101c

08004040 <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800404a:	2319      	movs	r3, #25
 800404c:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800404e:	7b78      	ldrb	r0, [r7, #13]
 8004050:	f107 010e 	add.w	r1, r7, #14
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2201      	movs	r2, #1
 8004058:	f7ff fb83 	bl	8003762 <bmp3_get_regs>
 800405c:	4603      	mov	r3, r0
 800405e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8004060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d15e      	bne.n	8004126 <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	f107 0308 	add.w	r3, r7, #8
 800406e:	32b7      	adds	r2, #183	; 0xb7
 8004070:	6810      	ldr	r0, [r2, #0]
 8004072:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 800407e:	7bbb      	ldrb	r3, [r7, #14]
 8004080:	b25b      	sxtb	r3, r3
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	b25a      	sxtb	r2, r3
 8004088:	7a3b      	ldrb	r3, [r7, #8]
 800408a:	b25b      	sxtb	r3, r3
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	b25b      	sxtb	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b25b      	sxtb	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 80040a4:	7bbb      	ldrb	r3, [r7, #14]
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	f023 0302 	bic.w	r3, r3, #2
 80040ac:	b25a      	sxtb	r2, r3
 80040ae:	7a7b      	ldrb	r3, [r7, #9]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	4313      	orrs	r3, r2
 80040bc:	b25b      	sxtb	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80040cc:	7bbb      	ldrb	r3, [r7, #14]
 80040ce:	b25b      	sxtb	r3, r3
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	b25a      	sxtb	r2, r3
 80040d6:	7abb      	ldrb	r3, [r7, #10]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	b25b      	sxtb	r3, r3
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	4313      	orrs	r3, r2
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	b25b      	sxtb	r3, r3
 80040f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040fc:	b25a      	sxtb	r2, r3
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	b25b      	sxtb	r3, r3
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	b25b      	sxtb	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b25b      	sxtb	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8004112:	f107 010e 	add.w	r1, r7, #14
 8004116:	f107 000d 	add.w	r0, r7, #13
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	f7ff fbb0 	bl	8003882 <bmp3_set_regs>
 8004122:	4603      	mov	r3, r0
 8004124:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	32bb      	adds	r2, #187	; 0xbb
 8004144:	8812      	ldrh	r2, [r2, #0]
 8004146:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8004148:	231a      	movs	r3, #26
 800414a:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800414c:	7bb8      	ldrb	r0, [r7, #14]
 800414e:	f107 010d 	add.w	r1, r7, #13
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	f7ff fb04 	bl	8003762 <bmp3_get_regs>
 800415a:	4603      	mov	r3, r0
 800415c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d131      	bne.n	80041ca <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8004170:	7b7b      	ldrb	r3, [r7, #13]
 8004172:	b25b      	sxtb	r3, r3
 8004174:	f023 0302 	bic.w	r3, r3, #2
 8004178:	b25a      	sxtb	r2, r3
 800417a:	7a3b      	ldrb	r3, [r7, #8]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b25b      	sxtb	r3, r3
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	b25b      	sxtb	r3, r3
 8004186:	4313      	orrs	r3, r2
 8004188:	b25b      	sxtb	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8004198:	7b7b      	ldrb	r3, [r7, #13]
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f023 0304 	bic.w	r3, r3, #4
 80041a0:	b25a      	sxtb	r2, r3
 80041a2:	7a7b      	ldrb	r3, [r7, #9]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	4313      	orrs	r3, r2
 80041b0:	b25b      	sxtb	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80041b6:	f107 010d 	add.w	r1, r7, #13
 80041ba:	f107 000e 	add.w	r0, r7, #14
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f7ff fb5e 	bl	8003882 <bmp3_set_regs>
 80041c6:	4603      	mov	r3, r0
 80041c8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80041de:	f107 0108 	add.w	r1, r7, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	201c      	movs	r0, #28
 80041e8:	f7ff fabb 	bl	8003762 <bmp3_get_regs>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 80041f6:	f107 0308 	add.w	r3, r7, #8
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fe27 	bl	8003e50 <parse_odr_filter_settings>

    return rslt;
 8004202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b098      	sub	sp, #96	; 0x60
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8004218:	23ea      	movs	r3, #234	; 0xea
 800421a:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <validate_osr_and_odr_settings+0x84>)
 8004222:	f107 030c 	add.w	r3, r7, #12
 8004226:	4611      	mov	r1, r2
 8004228:	2248      	movs	r2, #72	; 0x48
 800422a:	4618      	mov	r0, r3
 800422c:	f01c fa6a 	bl	8020704 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f842 	bl	80042c4 <calculate_press_meas_time>
 8004240:	4602      	mov	r2, r0
 8004242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004244:	4413      	add	r3, r2
 8004246:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f866 	bl	8004324 <calculate_temp_meas_time>
 8004258:	4602      	mov	r2, r0
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	4413      	add	r3, r2
 800425e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8004260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004264:	4413      	add	r3, r2
 8004266:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	3360      	adds	r3, #96	; 0x60
 8004272:	443b      	add	r3, r7
 8004274:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004278:	4619      	mov	r1, r3
 800427a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800427c:	f000 f80c 	bl	8004298 <verify_meas_time_and_odr_duration>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8004286:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800428a:	4618      	mov	r0, r3
 800428c:	3760      	adds	r7, #96	; 0x60
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	08021020 	.word	0x08021020

08004298 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d202      	bcs.n	80042b0 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	e001      	b.n	80042b4 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 80042b0:	23fd      	movs	r3, #253	; 0xfd
 80042b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80042b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
	...

080042c4 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	f107 030c 	add.w	r3, r7, #12
 80042d2:	32b3      	adds	r2, #179	; 0xb3
 80042d4:	6810      	ldr	r0, [r2, #0]
 80042d6:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 80042e4:	7b3b      	ldrb	r3, [r7, #12]
 80042e6:	461a      	mov	r2, r3
 80042e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042ec:	f000 fca2 	bl	8004c34 <pow_bmp3>
 80042f0:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 80042f2:	490a      	ldr	r1, [pc, #40]	; (800431c <calculate_press_meas_time+0x58>)
 80042f4:	6978      	ldr	r0, [r7, #20]
 80042f6:	f7fc fd77 	bl	8000de8 <__aeabi_fmul>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4908      	ldr	r1, [pc, #32]	; (8004320 <calculate_press_meas_time+0x5c>)
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fc fc6a 	bl	8000bd8 <__addsf3>
 8004304:	4603      	mov	r3, r0
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc fee4 	bl	80010d4 <__aeabi_f2uiz>
 800430c:	4603      	mov	r3, r0
 800430e:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8004310:	693b      	ldr	r3, [r7, #16]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	44fa0000 	.word	0x44fa0000
 8004320:	43c40000 	.word	0x43c40000

08004324 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	32b3      	adds	r2, #179	; 0xb3
 8004334:	6810      	ldr	r0, [r2, #0]
 8004336:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004340:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8004344:	7b7b      	ldrb	r3, [r7, #13]
 8004346:	461a      	mov	r2, r3
 8004348:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800434c:	f000 fc72 	bl	8004c34 <pow_bmp3>
 8004350:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8004352:	490a      	ldr	r1, [pc, #40]	; (800437c <calculate_temp_meas_time+0x58>)
 8004354:	6978      	ldr	r0, [r7, #20]
 8004356:	f7fc fd47 	bl	8000de8 <__aeabi_fmul>
 800435a:	4603      	mov	r3, r0
 800435c:	4908      	ldr	r1, [pc, #32]	; (8004380 <calculate_temp_meas_time+0x5c>)
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc fc3a 	bl	8000bd8 <__addsf3>
 8004364:	4603      	mov	r3, r0
 8004366:	4618      	mov	r0, r3
 8004368:	f7fc feb4 	bl	80010d4 <__aeabi_f2uiz>
 800436c:	4603      	mov	r3, r0
 800436e:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8004370:	693b      	ldr	r3, [r7, #16]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	44fa0000 	.word	0x44fa0000
 8004380:	439c8000 	.word	0x439c8000

08004384 <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	32b3      	adds	r2, #179	; 0xb3
 800439a:	6810      	ldr	r0, [r2, #0]
 800439c:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d03f      	beq.n	8004428 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	b25b      	sxtb	r3, r3
 80043b8:	f023 0307 	bic.w	r3, r3, #7
 80043bc:	b25a      	sxtb	r2, r3
 80043be:	7d3b      	ldrb	r3, [r7, #20]
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b25a      	sxtb	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	4619      	mov	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	440b      	add	r3, r1
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d014      	beq.n	800440e <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80043ee:	b25a      	sxtb	r2, r3
 80043f0:	7d7b      	ldrb	r3, [r7, #21]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b25a      	sxtb	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	440b      	add	r3, r1
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4413      	add	r3, r2
 8004418:	221c      	movs	r2, #28
 800441a:	701a      	strb	r2, [r3, #0]
        (*len)++;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	701a      	strb	r2, [r3, #0]
    }
}
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 8004432:	b480      	push	{r7}
 8004434:	b087      	sub	sp, #28
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	33b3      	adds	r3, #179	; 0xb3
 8004444:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	2b11      	cmp	r3, #17
 800444c:	d902      	bls.n	8004454 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2211      	movs	r2, #17
 8004452:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3301      	adds	r3, #1
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	b25b      	sxtb	r3, r3
 800445c:	f023 031f 	bic.w	r3, r3, #31
 8004460:	b25a      	sxtb	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	78db      	ldrb	r3, [r3, #3]
 8004466:	b25b      	sxtb	r3, r3
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	b25b      	sxtb	r3, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	b25a      	sxtb	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	4619      	mov	r1, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	440b      	add	r3, r1
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4413      	add	r3, r2
 800448a:	221d      	movs	r2, #29
 800448c:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	b2da      	uxtb	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	701a      	strb	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	f107 0314 	add.w	r3, r7, #20
 80044b8:	32b3      	adds	r2, #179	; 0xb3
 80044ba:	6810      	ldr	r0, [r2, #0]
 80044bc:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3303      	adds	r3, #3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b25b      	sxtb	r3, r3
 80044c6:	f023 030e 	bic.w	r3, r3, #14
 80044ca:	b25a      	sxtb	r2, r3
 80044cc:	7dbb      	ldrb	r3, [r7, #22]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	b25b      	sxtb	r3, r3
 80044d2:	f003 030e 	and.w	r3, r3, #14
 80044d6:	b25b      	sxtb	r3, r3
 80044d8:	4313      	orrs	r3, r2
 80044da:	b25a      	sxtb	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4619      	mov	r1, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	440b      	add	r3, r1
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	221f      	movs	r2, #31
 80044f6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	701a      	strb	r2, [r3, #0]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3301      	adds	r3, #1
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3302      	adds	r3, #2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	431a      	orrs	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	431a      	orrs	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3303      	adds	r3, #3
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3305      	adds	r3, #5
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	431a      	orrs	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d022      	beq.n	80045d4 <compensate_data+0x60>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01f      	beq.n	80045d4 <compensate_data+0x60>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01c      	beq.n	80045d4 <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	68b8      	ldr	r0, [r7, #8]
 80045a8:	f000 f9e4 	bl	8004974 <compensate_temperature>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	68b8      	ldr	r0, [r7, #8]
 80045c4:	f000 fa19 	bl	80049fa <compensate_pressure>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 80045d2:	e001      	b.n	80045d8 <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80045d4:	23ff      	movs	r3, #255	; 0xff
 80045d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80045d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	3390      	adds	r3, #144	; 0x90
 80045f2:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	3318      	adds	r3, #24
 80045f8:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	4ba4      	ldr	r3, [pc, #656]	; (8004890 <parse_calib_data+0x2ac>)
 8004600:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3301      	adds	r3, #1
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	b21a      	sxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b21b      	sxth	r3, r3
 8004614:	4313      	orrs	r3, r2
 8004616:	b21b      	sxth	r3, r3
 8004618:	b29a      	uxth	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb ff46 	bl	80004b4 <__aeabi_ui2d>
 8004628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800462c:	f7fc f8e6 	bl	80007fc <__aeabi_ddiv>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	6939      	ldr	r1, [r7, #16]
 8004636:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3303      	adds	r3, #3
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	b21a      	sxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3302      	adds	r3, #2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b21b      	sxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b21b      	sxth	r3, r3
 8004650:	b29a      	uxth	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	4b8e      	ldr	r3, [pc, #568]	; (8004894 <parse_calib_data+0x2b0>)
 800465c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	885b      	ldrh	r3, [r3, #2]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fb ff25 	bl	80004b4 <__aeabi_ui2d>
 800466a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800466e:	f7fc f8c5 	bl	80007fc <__aeabi_ddiv>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	6939      	ldr	r1, [r7, #16]
 8004678:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b25a      	sxtb	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	4b82      	ldr	r3, [pc, #520]	; (8004898 <parse_calib_data+0x2b4>)
 800468e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fb ff1b 	bl	80004d4 <__aeabi_i2d>
 800469e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a2:	f7fc f8ab 	bl	80007fc <__aeabi_ddiv>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	6939      	ldr	r1, [r7, #16]
 80046ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3306      	adds	r3, #6
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	b21a      	sxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3305      	adds	r3, #5
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b21b      	sxth	r3, r3
 80046c2:	4313      	orrs	r3, r2
 80046c4:	b21a      	sxth	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	4b73      	ldr	r3, [pc, #460]	; (800489c <parse_calib_data+0x2b8>)
 80046d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80046da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fb fef8 	bl	80004d4 <__aeabi_i2d>
 80046e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e8:	f7fc f888 	bl	80007fc <__aeabi_ddiv>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	6939      	ldr	r1, [r7, #16]
 80046f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3308      	adds	r3, #8
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	b21a      	sxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3307      	adds	r3, #7
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b21b      	sxth	r3, r3
 8004708:	4313      	orrs	r3, r2
 800470a:	b21a      	sxth	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	4b62      	ldr	r3, [pc, #392]	; (80048a0 <parse_calib_data+0x2bc>)
 8004716:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004720:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb fed5 	bl	80004d4 <__aeabi_i2d>
 800472a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472e:	f7fc f865 	bl	80007fc <__aeabi_ddiv>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	6939      	ldr	r1, [r7, #16]
 8004738:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3309      	adds	r3, #9
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b25a      	sxtb	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <parse_calib_data+0x2c0>)
 800474e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb febb 	bl	80004d4 <__aeabi_i2d>
 800475e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004762:	f7fc f84b 	bl	80007fc <__aeabi_ddiv>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	6939      	ldr	r1, [r7, #16]
 800476c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	330a      	adds	r3, #10
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b25a      	sxtb	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <parse_calib_data+0x2c4>)
 8004782:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fea1 	bl	80004d4 <__aeabi_i2d>
 8004792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004796:	f7fc f831 	bl	80007fc <__aeabi_ddiv>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	6939      	ldr	r1, [r7, #16]
 80047a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	330c      	adds	r3, #12
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	b21a      	sxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	330b      	adds	r3, #11
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b21b      	sxth	r3, r3
 80047b6:	4313      	orrs	r3, r2
 80047b8:	b21b      	sxth	r3, r3
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80047c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	899b      	ldrh	r3, [r3, #12]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fb fe6f 	bl	80004b4 <__aeabi_ui2d>
 80047d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047da:	f7fc f80f 	bl	80007fc <__aeabi_ddiv>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	330e      	adds	r3, #14
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	b21a      	sxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	330d      	adds	r3, #13
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b21b      	sxth	r3, r3
 80047fa:	4313      	orrs	r3, r2
 80047fc:	b21b      	sxth	r3, r3
 80047fe:	b29a      	uxth	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <parse_calib_data+0x2c8>)
 800480a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	89db      	ldrh	r3, [r3, #14]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fb fe4e 	bl	80004b4 <__aeabi_ui2d>
 8004818:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800481c:	f7fb ffee 	bl	80007fc <__aeabi_ddiv>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	6939      	ldr	r1, [r7, #16]
 8004826:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	330f      	adds	r3, #15
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b25a      	sxtb	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <parse_calib_data+0x2cc>)
 800483c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb fe44 	bl	80004d4 <__aeabi_i2d>
 800484c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004850:	f7fb ffd4 	bl	80007fc <__aeabi_ddiv>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	6939      	ldr	r1, [r7, #16]
 800485a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3310      	adds	r3, #16
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b25a      	sxtb	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <parse_calib_data+0x2d0>)
 8004870:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fb fe2a 	bl	80004d4 <__aeabi_i2d>
 8004880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004884:	f7fb ffba 	bl	80007fc <__aeabi_ddiv>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	6939      	ldr	r1, [r7, #16]
 800488e:	e013      	b.n	80048b8 <parse_calib_data+0x2d4>
 8004890:	3f700000 	.word	0x3f700000
 8004894:	41d00000 	.word	0x41d00000
 8004898:	42f00000 	.word	0x42f00000
 800489c:	41300000 	.word	0x41300000
 80048a0:	41c00000 	.word	0x41c00000
 80048a4:	41f00000 	.word	0x41f00000
 80048a8:	42400000 	.word	0x42400000
 80048ac:	40500000 	.word	0x40500000
 80048b0:	40700000 	.word	0x40700000
 80048b4:	40e00000 	.word	0x40e00000
 80048b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3312      	adds	r3, #18
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	b21a      	sxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3311      	adds	r3, #17
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b21b      	sxth	r3, r3
 80048ce:	4313      	orrs	r3, r2
 80048d0:	b21a      	sxth	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	4b25      	ldr	r3, [pc, #148]	; (8004970 <parse_calib_data+0x38c>)
 80048dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fb fdf4 	bl	80004d4 <__aeabi_i2d>
 80048ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048f0:	f7fb ff84 	bl	80007fc <__aeabi_ddiv>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	6939      	ldr	r1, [r7, #16]
 80048fa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3313      	adds	r3, #19
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b25a      	sxtb	r2, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <parse_calib_data+0x38c>)
 8004910:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fdda 	bl	80004d4 <__aeabi_i2d>
 8004920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004924:	f7fb ff6a 	bl	80007fc <__aeabi_ddiv>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	6939      	ldr	r1, [r7, #16]
 800492e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3314      	adds	r3, #20
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b25a      	sxtb	r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8004946:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fb fdbf 	bl	80004d4 <__aeabi_i2d>
 8004956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800495a:	f7fb ff4f 	bl	80007fc <__aeabi_ddiv>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	6939      	ldr	r1, [r7, #16]
 8004964:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	42f00000 	.word	0x42f00000

08004974 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8004984:	69f8      	ldr	r0, [r7, #28]
 8004986:	f7fb fd95 	bl	80004b4 <__aeabi_ui2d>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fb fc52 	bl	8000238 <__aeabi_dsub>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049a6:	f7fb fdff 	bl	80005a8 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80049b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049ba:	f7fb fdf5 	bl	80005a8 <__aeabi_dmul>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80049cc:	f7fb fdec 	bl	80005a8 <__aeabi_dmul>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049dc:	f7fb fc2e 	bl	800023c <__adddf3>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 80049fa:	b5b0      	push	{r4, r5, r7, lr}
 80049fc:	b092      	sub	sp, #72	; 0x48
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a10:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004a14:	f7fb fdc8 	bl	80005a8 <__aeabi_dmul>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a22:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8004a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a28:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f000 f901 	bl	8004c34 <pow_bmp3>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fb fd5f 	bl	80004f8 <__aeabi_f2d>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb fdb1 	bl	80005a8 <__aeabi_dmul>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8004a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a50:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a56:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	f000 f8ea 	bl	8004c34 <pow_bmp3>
 8004a60:	4603      	mov	r3, r0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fd48 	bl	80004f8 <__aeabi_f2d>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	4629      	mov	r1, r5
 8004a70:	f7fb fd9a 	bl	80005a8 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a86:	f7fb fbd9 	bl	800023c <__adddf3>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a96:	f7fb fbd1 	bl	800023c <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004aa2:	f7fb fbcb 	bl	800023c <__adddf3>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8004aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004aba:	f7fb fd75 	bl	80005a8 <__aeabi_dmul>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ace:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f000 f8ae 	bl	8004c34 <pow_bmp3>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fb fd0c 	bl	80004f8 <__aeabi_f2d>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb fd5e 	bl	80005a8 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8004af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afc:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004b00:	2203      	movs	r2, #3
 8004b02:	f000 f897 	bl	8004c34 <pow_bmp3>
 8004b06:	4603      	mov	r3, r0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fcf5 	bl	80004f8 <__aeabi_f2d>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4620      	mov	r0, r4
 8004b14:	4629      	mov	r1, r5
 8004b16:	f7fb fd47 	bl	80005a8 <__aeabi_dmul>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fb fcc4 	bl	80004b4 <__aeabi_ui2d>
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b3a:	f7fb fb7f 	bl	800023c <__adddf3>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b4a:	f7fb fb77 	bl	800023c <__adddf3>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b5a:	f7fb fb6f 	bl	800023c <__adddf3>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 8004b62:	4620      	mov	r0, r4
 8004b64:	4629      	mov	r1, r5
 8004b66:	f7fb fd1f 	bl	80005a8 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fb fc9c 	bl	80004b4 <__aeabi_ui2d>
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f000 f859 	bl	8004c34 <pow_bmp3>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb fcb7 	bl	80004f8 <__aeabi_f2d>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8004b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b94:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004ba4:	f7fb fd00 	bl	80005a8 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4620      	mov	r0, r4
 8004bae:	4629      	mov	r1, r5
 8004bb0:	f7fb fb44 	bl	800023c <__adddf3>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004bbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004bc4:	f7fb fcf0 	bl	80005a8 <__aeabi_dmul>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fc6d 	bl	80004b4 <__aeabi_ui2d>
 8004bda:	2203      	movs	r2, #3
 8004bdc:	f000 f82a 	bl	8004c34 <pow_bmp3>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fb fc88 	bl	80004f8 <__aeabi_f2d>
 8004be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004bee:	f7fb fcdb 	bl	80005a8 <__aeabi_dmul>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bfa:	f7fb fb1f 	bl	800023c <__adddf3>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 8004c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c0e:	f7fb fb15 	bl	800023c <__adddf3>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c1a:	f7fb fb0f 	bl	800023c <__adddf3>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 8004c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	3748      	adds	r7, #72	; 0x48
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bdb0      	pop	{r4, r5, r7, pc}

08004c34 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 8004c42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004c46:	617b      	str	r3, [r7, #20]

    while (power != 0)
 8004c48:	e00d      	b.n	8004c66 <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 8004c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c4e:	f7fb ff6d 	bl	8000b2c <__aeabi_d2f>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4619      	mov	r1, r3
 8004c56:	6978      	ldr	r0, [r7, #20]
 8004c58:	f7fc f8c6 	bl	8000de8 <__aeabi_fmul>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	617b      	str	r3, [r7, #20]
        power--;
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ee      	bne.n	8004c4a <pow_bmp3+0x16>
    }

    return pow_output;
 8004c6c:	697b      	ldr	r3, [r7, #20]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
 8004c92:	e001      	b.n	8004c98 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00f      	beq.n	8004cd2 <null_ptr_check+0x2e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <null_ptr_check+0x2e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <null_ptr_check+0x2e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8004cd2:	23ff      	movs	r3, #255	; 0xff
 8004cd4:	73fb      	strb	r3, [r7, #15]
 8004cd6:	e001      	b.n	8004cdc <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
 8004cea:	0000      	movs	r0, r0
 8004cec:	0000      	movs	r0, r0
	...

08004cf0 <_ZN6BMP390C1Ev>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390() {
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  _meas_end = 0;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	a313      	add	r3, pc, #76	; (adr r3, 8004d70 <_ZN6BMP390C1Ev+0x80>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	a310      	add	r3, pc, #64	; (adr r3, 8004d70 <_ZN6BMP390C1Ev+0x80>)
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	22ee      	movs	r2, #238	; 0xee
 8004d3c:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <_ZN6BMP390C1Ev+0x88>)
 8004d48:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <_ZN6BMP390C1Ev+0x8c>)
 8004d4e:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <_ZN6BMP390C1Ev+0x90>)
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	00000000 	.word	0x00000000
 8004d74:	c08f3800 	.word	0xc08f3800
 8004d78:	080050d7 	.word	0x080050d7
 8004d7c:	08005085 	.word	0x08005085
 8004d80:	08004f61 	.word	0x08004f61

08004d84 <_ZN6BMP3904initEP19__I2C_HandleTypeDef>:

bool BMP390::init(I2C_HandleTypeDef *pntr_hi2c){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	the_sensor.intf_ptr = (void *)pntr_hi2c;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	615a      	str	r2, [r3, #20]

	int8_t rslt = BMP3_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3310      	adds	r3, #16
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fe57 	bl	8003a50 <bmp3_soft_reset>
 8004da2:	4603      	mov	r3, r0
 8004da4:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8004da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x2e>
 8004dae:	2300      	movs	r3, #0
 8004db0:	e028      	b.n	8004e04 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	rslt = bmp3_init(&the_sensor);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fc8c 	bl	80036d4 <bmp3_init>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f9af 	bl	8005128 <_ZL23validate_trimming_paramP8bmp3_dev>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 8004dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x56>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e014      	b.n	8004e04 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8d5 	bl	8004f8c <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8004de2:	2100      	movs	r1, #0
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f8f2 	bl	8004fce <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 8004dea:	2100      	movs	r1, #0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f90f 	bl	8005010 <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8004df2:	2103      	movs	r1, #3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f92c 	bl	8005052 <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8004e02:	2301      	movs	r3, #1
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  performReading();
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f81f 	bl	8004e58 <_ZN6BMP39014performReadingEv>
  return temperature;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	f7fb fe82 	bl	8000b2c <__aeabi_d2f>
 8004e28:	4603      	mov	r3, r0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_ZN6BMP39012readPressureEv>:

float BMP390::readPressure(void) {
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  performReading();
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f80c 	bl	8004e58 <_ZN6BMP39014performReadingEv>
  return pressure;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fb fe6f 	bl	8000b2c <__aeabi_d2f>
 8004e4e:	4603      	mov	r3, r0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <_ZN6BMP39014performReadingEv>:

  float atmospheric = readPressure() / 100.0F; //convert to units of hPa
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
}

bool BMP390::performReading(void) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 8004e70:	8bfb      	ldrh	r3, [r7, #30]
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 8004e78:	7f7b      	ldrb	r3, [r7, #29]
 8004e7a:	f043 0302 	orr.w	r3, r3, #2
 8004e7e:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 8004e8a:	8bfb      	ldrh	r3, [r7, #30]
 8004e8c:	f043 0320 	orr.w	r3, r3, #32
 8004e90:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 8004ea2:	7f7b      	ldrb	r3, [r7, #29]
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 8004eb4:	8bfb      	ldrh	r3, [r7, #30]
 8004eb6:	f043 0310 	orr.w	r3, r3, #16
 8004eba:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 8004ec6:	8bfb      	ldrh	r3, [r7, #30]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ecc:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ede:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 8004ee0:	8bfa      	ldrh	r2, [r7, #30]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fe fd5b 	bl	80039a4 <bmp3_set_sensor_settings>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 8004ef2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e02c      	b.n	8004f58 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3310      	adds	r3, #16
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fdf8 	bl	8003b00 <bmp3_set_op_mode>
 8004f10:	4603      	mov	r3, r0
 8004f12:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004f14:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e01b      	b.n	8004f58 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f103 0210 	add.w	r2, r3, #16
 8004f26:	f107 0108 	add.w	r1, r7, #8
 8004f2a:	7f7b      	ldrb	r3, [r7, #29]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fe56 	bl	8003bde <bmp3_get_sensor_data>
 8004f32:	4603      	mov	r3, r0
 8004f34:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004f36:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e00a      	b.n	8004f58 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 8004f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 8004f4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 8004f56:	2301      	movs	r3, #1
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <_ZL10delay_usecmPv+0x28>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	099b      	lsrs	r3, r3, #6
 8004f74:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fd fc91 	bl	80028a0 <HAL_Delay>
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	10624dd3 	.word	0x10624dd3

08004f8c <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d901      	bls.n	8004fa2 <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e010      	b.n	8004fc4 <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004fb8:	e003      	b.n	8004fc2 <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8004fc2:	2301      	movs	r3, #1
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d901      	bls.n	8004fe4 <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e010      	b.n	8005006 <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004ffa:	e003      	b.n	8005004 <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8005004:	2301      	movs	r3, #1
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	2b07      	cmp	r3, #7
 8005020:	d901      	bls.n	8005026 <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 8005022:	2300      	movs	r3, #0
 8005024:	e010      	b.n	8005048 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800503c:	e003      	b.n	8005046 <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 8005046:	2301      	movs	r3, #1
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	2b11      	cmp	r3, #17
 8005062:	d901      	bls.n	8005068 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 8005064:	2300      	movs	r3, #0
 8005066:	e008      	b.n	800507a <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 8005078:	2301      	movs	r3, #1
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af04      	add	r7, sp, #16
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f04f 31ff 	mov.w	r1, #4294967295
 80050a4:	9102      	str	r1, [sp, #8]
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2301      	movs	r3, #1
 80050ae:	21ee      	movs	r1, #238	; 0xee
 80050b0:	6978      	ldr	r0, [r7, #20]
 80050b2:	f002 ff4b 	bl	8007f4c <HAL_I2C_Mem_Write>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	e000      	b.n	80050ce <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08a      	sub	sp, #40	; 0x28
 80050da:	af04      	add	r7, sp, #16
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	4603      	mov	r3, r0
 80050e4:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f04f 31ff 	mov.w	r1, #4294967295
 80050f6:	9102      	str	r1, [sp, #8]
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2301      	movs	r3, #1
 8005100:	21ee      	movs	r1, #238	; 0xee
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f003 f836 	bl	8008174 <HAL_I2C_Mem_Read>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	e000      	b.n	8005120 <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 8005130:	23ff      	movs	r3, #255	; 0xff
 8005132:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8005136:	f107 010c 	add.w	r1, r7, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2215      	movs	r2, #21
 800513e:	2031      	movs	r0, #49	; 0x31
 8005140:	f7fe fb0f 	bl	8003762 <bmp3_get_regs>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 800514a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800514e:	2b00      	cmp	r3, #0
 8005150:	d133      	bne.n	80051ba <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 8005152:	2300      	movs	r3, #0
 8005154:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005158:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800515c:	2b14      	cmp	r3, #20
 800515e:	d814      	bhi.n	800518a <_ZL23validate_trimming_paramP8bmp3_dev+0x62>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8005160:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005164:	3328      	adds	r3, #40	; 0x28
 8005166:	443b      	add	r3, r7
 8005168:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 800516c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f827 	bl	80051c6 <_ZL7cal_crchh>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 800517e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005182:	3301      	adds	r3, #1
 8005184:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005188:	e7e6      	b.n	8005158 <_ZL23validate_trimming_paramP8bmp3_dev+0x30>
    }

    crc = (crc ^ 0xFF);
 800518a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800518e:	43db      	mvns	r3, r3
 8005190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8005194:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	2030      	movs	r0, #48	; 0x30
 800519e:	f7fe fae0 	bl	8003762 <bmp3_get_regs>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 80051a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d002      	beq.n	80051ba <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 80051b4:	23ff      	movs	r3, #255	; 0xff
 80051b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 80051ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3728      	adds	r7, #40	; 0x28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	4603      	mov	r3, r0
 80051ce:	460a      	mov	r2, r1
 80051d0:	71fb      	strb	r3, [r7, #7]
 80051d2:	4613      	mov	r3, r2
 80051d4:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 80051d6:	231d      	movs	r3, #29
 80051d8:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 80051da:	2300      	movs	r3, #0
 80051dc:	73bb      	strb	r3, [r7, #14]
 80051de:	7bbb      	ldrb	r3, [r7, #14]
 80051e0:	2b07      	cmp	r3, #7
 80051e2:	d81d      	bhi.n	8005220 <_ZL7cal_crchh+0x5a>
    if ((seed & 0x80) ^ (data & 0x80)) {
 80051e4:	79fa      	ldrb	r2, [r7, #7]
 80051e6:	79bb      	ldrb	r3, [r7, #6]
 80051e8:	4053      	eors	r3, r2
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	b25b      	sxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	da02      	bge.n	80051f8 <_ZL7cal_crchh+0x32>
      var2 = 1;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
 80051f6:	e001      	b.n	80051fc <_ZL7cal_crchh+0x36>
    } else {
      var2 = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8005202:	79bb      	ldrb	r3, [r7, #6]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8005208:	7b7a      	ldrb	r2, [r7, #13]
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	fb12 f303 	smulbb	r3, r2, r3
 8005210:	b2da      	uxtb	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	4053      	eors	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	3301      	adds	r3, #1
 800521c:	73bb      	strb	r3, [r7, #14]
 800521e:	e7de      	b.n	80051de <_ZL7cal_crchh+0x18>
  }

  return (int8_t)seed;
 8005220:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <_ZN12LSM303_AccelC1Ev>:
#include <lsm303_accel.hpp>

LSM303_Accel::LSM303_Accel() {
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  pntr_hi2c = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

  // Initialize the raw accel data
  data.x = 0;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
  data.y = 0;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	60da      	str	r2, [r3, #12]
  data.z = 0;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
}
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <_ZN12LSM303_Accel5writeEhPKhh>:

bool LSM303_Accel::write(const uint8_t reg_location, const uint8_t *data, const uint8_t len){
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af04      	add	r7, sp, #16
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	461a      	mov	r2, r3
 800526c:	460b      	mov	r3, r1
 800526e:	72fb      	strb	r3, [r7, #11]
 8005270:	4613      	mov	r3, r2
 8005272:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	7afb      	ldrb	r3, [r7, #11]
 800527a:	b29a      	uxth	r2, r3
 800527c:	7abb      	ldrb	r3, [r7, #10]
 800527e:	b29b      	uxth	r3, r3
 8005280:	f04f 31ff 	mov.w	r1, #4294967295
 8005284:	9102      	str	r1, [sp, #8]
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	2301      	movs	r3, #1
 800528e:	2132      	movs	r1, #50	; 0x32
 8005290:	f002 fe5c 	bl	8007f4c <HAL_I2C_Mem_Write>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <_ZN12LSM303_Accel5writeEhPKhh+0x54>
    // Error handling: You can handle write errors here
  	APP_LOG(TS_ON, VLEVEL_M,"Error writing \r\n");
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <_ZN12LSM303_Accel5writeEhPKhh+0x60>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	2100      	movs	r1, #0
 80052aa:	2002      	movs	r0, #2
 80052ac:	f01a ff08 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    return false;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <_ZN12LSM303_Accel5writeEhPKhh+0x56>
  }
  return true;
 80052b4:	2301      	movs	r3, #1
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	08021068 	.word	0x08021068

080052c4 <_ZN12LSM303_Accel4readEhPhh>:

bool LSM303_Accel::read(const uint8_t reg_location, uint8_t *data, const uint8_t len){
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af04      	add	r7, sp, #16
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	461a      	mov	r2, r3
 80052d0:	460b      	mov	r3, r1
 80052d2:	72fb      	strb	r3, [r7, #11]
 80052d4:	4613      	mov	r3, r2
 80052d6:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	7afb      	ldrb	r3, [r7, #11]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	7abb      	ldrb	r3, [r7, #10]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f04f 31ff 	mov.w	r1, #4294967295
 80052e8:	9102      	str	r1, [sp, #8]
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2301      	movs	r3, #1
 80052f2:	2132      	movs	r1, #50	; 0x32
 80052f4:	f002 ff3e 	bl	8008174 <HAL_I2C_Mem_Read>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <_ZN12LSM303_Accel4readEhPhh+0x48>
    // Error handling: You can handle write errors here
    return false;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <_ZN12LSM303_Accel4readEhPhh+0x4a>
  }
  return true;
 800530c:	2301      	movs	r3, #1
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>:

bool LSM303_Accel::init(I2C_HandleTypeDef *_pntr_hi2c) {
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
	pntr_hi2c = _pntr_hi2c;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	601a      	str	r2, [r3, #0]
  uint8_t len = 1;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]

  uint8_t reg_data = 0x57; // Enable the accelerometer (100Hz)
 800532a:	2357      	movs	r3, #87	; 0x57
 800532c:	73bb      	strb	r3, [r7, #14]
  if ( write(LSM303_REGISTER_ACCEL_CTRL_REG1_A, &reg_data, len) ){
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	f107 020e 	add.w	r2, r7, #14
 8005334:	2120      	movs	r1, #32
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ff92 	bl	8005260 <_ZN12LSM303_Accel5writeEhPKhh>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
    if ( read(LSM303_REGISTER_ACCEL_WHO_AM_I, &reg_data, len) ) {
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	f107 020e 	add.w	r2, r7, #14
 8005348:	210f      	movs	r1, #15
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ffba 	bl	80052c4 <_ZN12LSM303_Accel4readEhPhh>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
      if (reg_data == 0x33) return true; //confirm that we are talking
 8005356:	7bbb      	ldrb	r3, [r7, #14]
 8005358:	2b33      	cmp	r3, #51	; 0x33
 800535a:	d101      	bne.n	8005360 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4c>
    }
  }
  return false; //something went wrong
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <_ZN17EnvionmentSensorsC1Ev>:
#include <env_sensors.hpp>


//#define IGNORE_ENV_SENSORS

EnvionmentSensors::EnvionmentSensors(){ }
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff ff5a 	bl	800522e <_ZN12LSM303_AccelC1Ev>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3318      	adds	r3, #24
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fcb6 	bl	8004cf0 <_ZN6BMP390C1Ev>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>:

bool EnvionmentSensors::init(I2C_HandleTypeDef *pntr_hi2c){
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	APP_LOG(TS_ON, VLEVEL_M, "env sensors i2c interface: %d \r\n", pntr_hi2c);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb8>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	2100      	movs	r1, #0
 80053a4:	2002      	movs	r0, #2
 80053a6:	f01a fe8b 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
	if( lsm_accel.init(pntr_hi2c) ){
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff ffb1 	bl	8005316 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00f      	beq.n	80053da <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x4a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup valid \r\n");
 80053ba:	4b24      	ldr	r3, [pc, #144]	; (800544c <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xbc>)
 80053bc:	2201      	movs	r2, #1
 80053be:	2100      	movs	r1, #0
 80053c0:	2002      	movs	r0, #2
 80053c2:	f01a fe7d 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
		return false;
	}

	if( bmp.init(pntr_hi2c) ){
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3318      	adds	r3, #24
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fcd9 	bl	8004d84 <_ZN6BMP3904initEP19__I2C_HandleTypeDef>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d02b      	beq.n	8005430 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa0>
 80053d8:	e007      	b.n	80053ea <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x5a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xc0>)
 80053dc:	2201      	movs	r2, #1
 80053de:	2100      	movs	r1, #0
 80053e0:	2002      	movs	r0, #2
 80053e2:	f01a fe6d 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e029      	b.n	800543e <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xae>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 80053ea:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xc4>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	2100      	movs	r1, #0
 80053f0:	2002      	movs	r0, #2
 80053f2:	f01a fe65 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
		return false;
	}
	bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3318      	adds	r3, #24
 80053fa:	2103      	movs	r1, #3
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fdc5 	bl	8004f8c <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3318      	adds	r3, #24
 8005406:	2102      	movs	r1, #2
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fde0 	bl	8004fce <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3318      	adds	r3, #24
 8005412:	2102      	movs	r1, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fdfb 	bl	8005010 <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3318      	adds	r3, #24
 800541e:	2102      	movs	r1, #2
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fe16 	bl	8005052 <_ZN6BMP39017setOutputDataRateEh>

	disableBattMonitor();
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f842 	bl	80054b0 <_ZN17EnvionmentSensors18disableBattMonitorEv>

	return true;
 800542c:	2301      	movs	r3, #1
 800542e:	e006      	b.n	800543e <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xae>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xc8>)
 8005432:	2201      	movs	r2, #1
 8005434:	2100      	movs	r1, #0
 8005436:	2002      	movs	r0, #2
 8005438:	f01a fe42 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	0802107c 	.word	0x0802107c
 800544c:	080210a0 	.word	0x080210a0
 8005450:	080210b8 	.word	0x080210b8
 8005454:	080210d0 	.word	0x080210d0
 8005458:	080210e8 	.word	0x080210e8

0800545c <_ZN17EnvionmentSensors11getPressureEv>:

float EnvionmentSensors::getPressure(){
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	return bmp.readPressure();
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3318      	adds	r3, #24
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fce2 	bl	8004e32 <_ZN6BMP39012readPressureEv>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getTemperature(){
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3318      	adds	r3, #24
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fcc1 	bl	8004e0c <_ZN6BMP39015readTemperatureEv>
 800548a:	4603      	mov	r3, r0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <_ZN17EnvionmentSensors17enableBattMonitorEv>:

lsm303AccelData EnvionmentSensors::getAccelData(){
  return lsm_accel.getAccelData();
}

void EnvionmentSensors::enableBattMonitor() {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  //use the HAL to turn on the LED
  HAL_GPIO_WritePin(Env_Sens_Enable_GPIO_Port, Env_Sens_Enable_Pin, GPIO_PIN_SET);
 800549c:	2201      	movs	r2, #1
 800549e:	2101      	movs	r1, #1
 80054a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054a4:	f002 fcab 	bl	8007dfe <HAL_GPIO_WritePin>
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZN17EnvionmentSensors18disableBattMonitorEv>:

void EnvionmentSensors::disableBattMonitor() {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  //use the HAL to turn off the LED
  HAL_GPIO_WritePin(Env_Sens_Enable_GPIO_Port, Env_Sens_Enable_Pin, GPIO_PIN_RESET);
 80054b8:	2200      	movs	r2, #0
 80054ba:	2101      	movs	r1, #1
 80054bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054c0:	f002 fc9d 	bl	8007dfe <HAL_GPIO_WritePin>
}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <_ZL3avgPtt>:

static float avg(uint16_t *arr, uint16_t len) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	807b      	strh	r3, [r7, #2]
    float result = 0;
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 80054de:	2300      	movs	r3, #0
 80054e0:	817b      	strh	r3, [r7, #10]
 80054e2:	897a      	ldrh	r2, [r7, #10]
 80054e4:	887b      	ldrh	r3, [r7, #2]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d212      	bcs.n	8005510 <_ZL3avgPtt+0x44>
        result += arr[i];
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fb fc23 	bl	8000d40 <__aeabi_i2f>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4619      	mov	r1, r3
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7fb fb6a 	bl	8000bd8 <__addsf3>
 8005504:	4603      	mov	r3, r0
 8005506:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 8005508:	897b      	ldrh	r3, [r7, #10]
 800550a:	3301      	adds	r3, #1
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	e7e8      	b.n	80054e2 <_ZL3avgPtt+0x16>
    }
    return result / len;
 8005510:	887b      	ldrh	r3, [r7, #2]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fb fc14 	bl	8000d40 <__aeabi_i2f>
 8005518:	4603      	mov	r3, r0
 800551a:	4619      	mov	r1, r3
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7fb fd17 	bl	8000f50 <__aeabi_fdiv>
 8005522:	4603      	mov	r3, r0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	0000      	movs	r0, r0
	...

08005530 <_ZN17EnvionmentSensors14getBattVoltageEv>:

float EnvionmentSensors::getBattVoltage() {
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

	enableBattMonitor();
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ffab 	bl	8005494 <_ZN17EnvionmentSensors17enableBattMonitorEv>

  //reset the temperature array to 0
  for (uint16_t i = 0; i < NUM_BATT_SAMPLES; i++) {
 800553e:	2300      	movs	r3, #0
 8005540:	83fb      	strh	r3, [r7, #30]
 8005542:	8bfb      	ldrh	r3, [r7, #30]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d809      	bhi.n	800555c <_ZN17EnvionmentSensors14getBattVoltageEv+0x2c>
  	batt_adc_measurements[i] = 0;
 8005548:	8bfa      	ldrh	r2, [r7, #30]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3288      	adds	r2, #136	; 0x88
 800554e:	2100      	movs	r1, #0
 8005550:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (uint16_t i = 0; i < NUM_BATT_SAMPLES; i++) {
 8005554:	8bfb      	ldrh	r3, [r7, #30]
 8005556:	3301      	adds	r3, #1
 8005558:	83fb      	strh	r3, [r7, #30]
 800555a:	e7f2      	b.n	8005542 <_ZN17EnvionmentSensors14getBattVoltageEv+0x12>
  }

  //set the adc to read from the SiPM temperature pin
  ADC_ChannelConfTypeDef sConfig = {0};
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
  sConfig.Channel = BATT_VOLTAGE_ADC_CHANNEL;
 8005568:	2301      	movs	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	4619      	mov	r1, r3
 800557a:	482d      	ldr	r0, [pc, #180]	; (8005630 <_ZN17EnvionmentSensors14getBattVoltageEv+0x100>)
 800557c:	f000 ff36 	bl	80063ec <HAL_ADC_ConfigChannel>

  HAL_Delay(100);
 8005580:	2064      	movs	r0, #100	; 0x64
 8005582:	f7fd f98d 	bl	80028a0 <HAL_Delay>

  //toss the first measurement
  //start the ADC conversion
	HAL_ADC_Start(&hadc);
 8005586:	482a      	ldr	r0, [pc, #168]	; (8005630 <_ZN17EnvionmentSensors14getBattVoltageEv+0x100>)
 8005588:	f000 fe14 	bl	80061b4 <HAL_ADC_Start>
	//wait for the conversion to complete
	HAL_ADC_PollForConversion(&hadc, 100);
 800558c:	2164      	movs	r1, #100	; 0x64
 800558e:	4828      	ldr	r0, [pc, #160]	; (8005630 <_ZN17EnvionmentSensors14getBattVoltageEv+0x100>)
 8005590:	f000 fe88 	bl	80062a4 <HAL_ADC_PollForConversion>

  //take NUM_BATT_SAMPLES measurements
  for (uint16_t i = 0; i < NUM_BATT_SAMPLES; i++) {
 8005594:	2300      	movs	r3, #0
 8005596:	83bb      	strh	r3, [r7, #28]
 8005598:	8bbb      	ldrh	r3, [r7, #28]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	d817      	bhi.n	80055ce <_ZN17EnvionmentSensors14getBattVoltageEv+0x9e>
    //start the ADC conversion
    HAL_ADC_Start(&hadc);
 800559e:	4824      	ldr	r0, [pc, #144]	; (8005630 <_ZN17EnvionmentSensors14getBattVoltageEv+0x100>)
 80055a0:	f000 fe08 	bl	80061b4 <HAL_ADC_Start>
    //wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc, 100);
 80055a4:	2164      	movs	r1, #100	; 0x64
 80055a6:	4822      	ldr	r0, [pc, #136]	; (8005630 <_ZN17EnvionmentSensors14getBattVoltageEv+0x100>)
 80055a8:	f000 fe7c 	bl	80062a4 <HAL_ADC_PollForConversion>
    //read the ADC value
    batt_adc_measurements[i] = HAL_ADC_GetValue(&hadc);
 80055ac:	4820      	ldr	r0, [pc, #128]	; (8005630 <_ZN17EnvionmentSensors14getBattVoltageEv+0x100>)
 80055ae:	f000 ff10 	bl	80063d2 <HAL_ADC_GetValue>
 80055b2:	4603      	mov	r3, r0
 80055b4:	8bba      	ldrh	r2, [r7, #28]
 80055b6:	b299      	uxth	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3288      	adds	r2, #136	; 0x88
 80055bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    HAL_Delay(100);
 80055c0:	2064      	movs	r0, #100	; 0x64
 80055c2:	f7fd f96d 	bl	80028a0 <HAL_Delay>
  for (uint16_t i = 0; i < NUM_BATT_SAMPLES; i++) {
 80055c6:	8bbb      	ldrh	r3, [r7, #28]
 80055c8:	3301      	adds	r3, #1
 80055ca:	83bb      	strh	r3, [r7, #28]
 80055cc:	e7e4      	b.n	8005598 <_ZN17EnvionmentSensors14getBattVoltageEv+0x68>
  }

  disableBattMonitor();
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff ff6e 	bl	80054b0 <_ZN17EnvionmentSensors18disableBattMonitorEv>

  float battAvgADC = avg(batt_adc_measurements, NUM_BATT_SAMPLES);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80055da:	2110      	movs	r1, #16
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ff75 	bl	80054cc <_ZL3avgPtt>
 80055e2:	61b8      	str	r0, [r7, #24]
  return battAvgADC * 2 * 3.3 / 4096; //the pcb has a 2x voltage divider, the analog ref voltage is 3.3, the adc has 12 bit resolution
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fb faf5 	bl	8000bd8 <__addsf3>
 80055ee:	4603      	mov	r3, r0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fa ff81 	bl	80004f8 <__aeabi_f2d>
 80055f6:	a30c      	add	r3, pc, #48	; (adr r3, 8005628 <_ZN17EnvionmentSensors14getBattVoltageEv+0xf8>)
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f7fa ffd4 	bl	80005a8 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <_ZN17EnvionmentSensors14getBattVoltageEv+0x104>)
 800560e:	f7fb f8f5 	bl	80007fc <__aeabi_ddiv>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	f7fb fa87 	bl	8000b2c <__aeabi_d2f>
 800561e:	4603      	mov	r3, r0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	66666666 	.word	0x66666666
 800562c:	400a6666 	.word	0x400a6666
 8005630:	200001cc 	.word	0x200001cc
 8005634:	40b00000 	.word	0x40b00000

08005638 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800564c:	2310      	movs	r3, #16
 800564e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005650:	2301      	movs	r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005658:	2303      	movs	r3, #3
 800565a:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	4619      	mov	r1, r3
 8005660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005664:	f002 f986 	bl	8007974 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8005668:	2320      	movs	r3, #32
 800566a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	4619      	mov	r1, r3
 8005670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005674:	f002 f97e 	bl	8007974 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8005678:	2200      	movs	r2, #0
 800567a:	2120      	movs	r1, #32
 800567c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005680:	f002 fbbd 	bl	8007dfe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8005684:	2200      	movs	r2, #0
 8005686:	2110      	movs	r1, #16
 8005688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800568c:	f002 fbb7 	bl	8007dfe <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d83f      	bhi.n	800572c <BSP_RADIO_ConfigRFSwitch+0x90>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	080056df 	.word	0x080056df
 80056bc:	080056f9 	.word	0x080056f9
 80056c0:	08005713 	.word	0x08005713
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2110      	movs	r1, #16
 80056c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056cc:	f002 fb97 	bl	8007dfe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80056d0:	2200      	movs	r2, #0
 80056d2:	2120      	movs	r1, #32
 80056d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056d8:	f002 fb91 	bl	8007dfe <HAL_GPIO_WritePin>
      break;      
 80056dc:	e027      	b.n	800572e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80056de:	2201      	movs	r2, #1
 80056e0:	2110      	movs	r1, #16
 80056e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056e6:	f002 fb8a 	bl	8007dfe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80056ea:	2200      	movs	r2, #0
 80056ec:	2120      	movs	r1, #32
 80056ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056f2:	f002 fb84 	bl	8007dfe <HAL_GPIO_WritePin>
      break;
 80056f6:	e01a      	b.n	800572e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80056f8:	2201      	movs	r2, #1
 80056fa:	2110      	movs	r1, #16
 80056fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005700:	f002 fb7d 	bl	8007dfe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8005704:	2201      	movs	r2, #1
 8005706:	2120      	movs	r1, #32
 8005708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800570c:	f002 fb77 	bl	8007dfe <HAL_GPIO_WritePin>
      break;
 8005710:	e00d      	b.n	800572e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8005712:	2200      	movs	r2, #0
 8005714:	2110      	movs	r1, #16
 8005716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800571a:	f002 fb70 	bl	8007dfe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800571e:	2201      	movs	r2, #1
 8005720:	2120      	movs	r1, #32
 8005722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005726:	f002 fb6a 	bl	8007dfe <HAL_GPIO_WritePin>
      break;
 800572a:	e000      	b.n	800572e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800572c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800573c:	2302      	movs	r3, #2
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8005746:	b480      	push	{r7}
 8005748:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800574a:	2301      	movs	r3, #1
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8005758:	2301      	movs	r3, #1
}
 800575a:	4618      	mov	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	4603      	mov	r3, r0
 800576a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8005772:	230f      	movs	r3, #15
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e001      	b.n	800577c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8005778:	2316      	movs	r3, #22
 800577a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <_Z16uartSendFloatValf>:

#define EXP_MODE_ACTIVE true

extern Detector detector;

void uartSendFloatVal(float val_f){
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	int32_t val = (int32_t)(val_f * 100.0);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fa feb1 	bl	80004f8 <__aeabi_f2d>
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <_Z16uartSendFloatValf+0x60>)
 800579c:	f7fa ff04 	bl	80005a8 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	f7fb f998 	bl	8000adc <__aeabi_d2iz>
 80057ac:	4603      	mov	r3, r0
 80057ae:	60fb      	str	r3, [r7, #12]

	uint8_t buf[4];
	buf[0] = (uint8_t)(val >> 24);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	161b      	asrs	r3, r3, #24
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)(val >> 16);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	141b      	asrs	r3, r3, #16
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t)(val >> 8);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	121b      	asrs	r3, r3, #8
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t)(val >> 0);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart1, buf, 4, 1000);
 80057ce:	f107 0108 	add.w	r1, r7, #8
 80057d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057d6:	2204      	movs	r2, #4
 80057d8:	4804      	ldr	r0, [pc, #16]	; (80057ec <_Z16uartSendFloatValf+0x64>)
 80057da:	f006 f926 	bl	800ba2a <HAL_UART_Transmit>
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40590000 	.word	0x40590000
 80057ec:	200004bc 	.word	0x200004bc

080057f0 <_Z19enterExperimentModev>:

void enterExperimentMode(void){
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
	disableLoRaWAN();
 80057f6:	f008 fc4f 	bl	800e098 <disableLoRaWAN>
	MX_USART1_UART_Init();
 80057fa:	f7fd fb71 	bl	8002ee0 <MX_USART1_UART_Init>

	char msg[8];
	sprintf(msg, "hello\r\n");
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	4949      	ldr	r1, [pc, #292]	; (8005928 <_Z19enterExperimentModev+0x138>)
 8005802:	4618      	mov	r0, r3
 8005804:	f01a ff94 	bl	8020730 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	4618      	mov	r0, r3
 800580c:	f7fa fcb8 	bl	8000180 <strlen>
 8005810:	4603      	mov	r3, r0
 8005812:	b29a      	uxth	r2, r3
 8005814:	1d39      	adds	r1, r7, #4
 8005816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800581a:	4844      	ldr	r0, [pc, #272]	; (800592c <_Z19enterExperimentModev+0x13c>)
 800581c:	f006 f905 	bl	800ba2a <HAL_UART_Transmit>
	// Buffer to store the received command
	uint8_t rxCmdBuffer[2];

	while(1){
		// Wait for the command to be received
		if (HAL_UART_Receive(&huart1, rxCmdBuffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 8005820:	4639      	mov	r1, r7
 8005822:	f04f 33ff 	mov.w	r3, #4294967295
 8005826:	2202      	movs	r2, #2
 8005828:	4840      	ldr	r0, [pc, #256]	; (800592c <_Z19enterExperimentModev+0x13c>)
 800582a:	f006 f984 	bl	800bb36 <HAL_UART_Receive>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <_Z19enterExperimentModev+0x30>
			// Extract the command from the buffer
			command = rxCmdBuffer[0];
 800583e:	783b      	ldrb	r3, [r7, #0]
 8005840:	73fb      	strb	r3, [r7, #15]

			switch(command) {
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	3b01      	subs	r3, #1
 8005846:	2b05      	cmp	r3, #5
 8005848:	d85b      	bhi.n	8005902 <_Z19enterExperimentModev+0x112>
 800584a:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <_Z19enterExperimentModev+0x60>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005869 	.word	0x08005869
 8005854:	08005879 	.word	0x08005879
 8005858:	08005889 	.word	0x08005889
 800585c:	080058ad 	.word	0x080058ad
 8005860:	080058ed 	.word	0x080058ed
 8005864:	080058fd 	.word	0x080058fd
				case RETURN_TEMP:
					uartSendFloatVal( detector.sampleSiPMtemp() );
 8005868:	4831      	ldr	r0, [pc, #196]	; (8005930 <_Z19enterExperimentModev+0x140>)
 800586a:	f7fd fdb1 	bl	80033d0 <_ZN8Detector14sampleSiPMtempEv>
 800586e:	4603      	mov	r3, r0
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff89 	bl	8005788 <_Z16uartSendFloatValf>
					break;
 8005876:	e056      	b.n	8005926 <_Z19enterExperimentModev+0x136>

				case RETURN_SAMPLE:
					uartSendFloatVal( detector.sampleSiPMsignal() );
 8005878:	482d      	ldr	r0, [pc, #180]	; (8005930 <_Z19enterExperimentModev+0x140>)
 800587a:	f7fd fe1b 	bl	80034b4 <_ZN8Detector16sampleSiPMsignalEv>
 800587e:	4603      	mov	r3, r0
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ff81 	bl	8005788 <_Z16uartSendFloatValf>
					break;
 8005886:	e04e      	b.n	8005926 <_Z19enterExperimentModev+0x136>

				case RETURN_HELLO:
					sprintf(msg, "hi\r\n");
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	492a      	ldr	r1, [pc, #168]	; (8005934 <_Z19enterExperimentModev+0x144>)
 800588c:	4618      	mov	r0, r3
 800588e:	f01a ff4f 	bl	8020730 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	4618      	mov	r0, r3
 8005896:	f7fa fc73 	bl	8000180 <strlen>
 800589a:	4603      	mov	r3, r0
 800589c:	b29a      	uxth	r2, r3
 800589e:	1d39      	adds	r1, r7, #4
 80058a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058a4:	4821      	ldr	r0, [pc, #132]	; (800592c <_Z19enterExperimentModev+0x13c>)
 80058a6:	f006 f8c0 	bl	800ba2a <HAL_UART_Transmit>
					break;
 80058aa:	e03c      	b.n	8005926 <_Z19enterExperimentModev+0x136>

				case SET_BIAS:
					if (detector.setSiPM_Bias( rxCmdBuffer[1] )){
 80058ac:	787b      	ldrb	r3, [r7, #1]
 80058ae:	4619      	mov	r1, r3
 80058b0:	481f      	ldr	r0, [pc, #124]	; (8005930 <_Z19enterExperimentModev+0x140>)
 80058b2:	f7fd fee7 	bl	8003684 <_ZN8Detector12setSiPM_BiasEh>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <_Z19enterExperimentModev+0xd8>
						sprintf(msg, "OK\r\n");
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	491e      	ldr	r1, [pc, #120]	; (8005938 <_Z19enterExperimentModev+0x148>)
 80058c0:	4618      	mov	r0, r3
 80058c2:	f01a ff35 	bl	8020730 <siprintf>
 80058c6:	e004      	b.n	80058d2 <_Z19enterExperimentModev+0xe2>
					} else {
						sprintf(msg, "BAD\r\n");
 80058c8:	1d3b      	adds	r3, r7, #4
 80058ca:	491c      	ldr	r1, [pc, #112]	; (800593c <_Z19enterExperimentModev+0x14c>)
 80058cc:	4618      	mov	r0, r3
 80058ce:	f01a ff2f 	bl	8020730 <siprintf>
					}
					HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fa fc53 	bl	8000180 <strlen>
 80058da:	4603      	mov	r3, r0
 80058dc:	b29a      	uxth	r2, r3
 80058de:	1d39      	adds	r1, r7, #4
 80058e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e4:	4811      	ldr	r0, [pc, #68]	; (800592c <_Z19enterExperimentModev+0x13c>)
 80058e6:	f006 f8a0 	bl	800ba2a <HAL_UART_Transmit>
					break;
 80058ea:	e01c      	b.n	8005926 <_Z19enterExperimentModev+0x136>

				case RETURN_BATT:
					uartSendFloatVal( bsp_env_sensors.getBattVoltage() );
 80058ec:	4814      	ldr	r0, [pc, #80]	; (8005940 <_Z19enterExperimentModev+0x150>)
 80058ee:	f7ff fe1f 	bl	8005530 <_ZN17EnvionmentSensors14getBattVoltageEv>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff ff47 	bl	8005788 <_Z16uartSendFloatValf>
					break;
 80058fa:	e014      	b.n	8005926 <_Z19enterExperimentModev+0x136>

				case TOGGLE_RED:
				  detector.toggleStimLED();
 80058fc:	480c      	ldr	r0, [pc, #48]	; (8005930 <_Z19enterExperimentModev+0x140>)
 80058fe:	f7fd fdf9 	bl	80034f4 <_ZN8Detector13toggleStimLEDEv>

				default:
					sprintf(msg, "BAD\r\n");
 8005902:	1d3b      	adds	r3, r7, #4
 8005904:	490d      	ldr	r1, [pc, #52]	; (800593c <_Z19enterExperimentModev+0x14c>)
 8005906:	4618      	mov	r0, r3
 8005908:	f01a ff12 	bl	8020730 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f7fa fc36 	bl	8000180 <strlen>
 8005914:	4603      	mov	r3, r0
 8005916:	b29a      	uxth	r2, r3
 8005918:	1d39      	adds	r1, r7, #4
 800591a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800591e:	4803      	ldr	r0, [pc, #12]	; (800592c <_Z19enterExperimentModev+0x13c>)
 8005920:	f006 f883 	bl	800ba2a <HAL_UART_Transmit>
					break;
 8005924:	bf00      	nop
		if (HAL_UART_Receive(&huart1, rxCmdBuffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 8005926:	e77b      	b.n	8005820 <_Z19enterExperimentModev+0x30>
 8005928:	08021100 	.word	0x08021100
 800592c:	200004bc 	.word	0x200004bc
 8005930:	200003b8 	.word	0x200003b8
 8005934:	08021108 	.word	0x08021108
 8005938:	08021110 	.word	0x08021110
 800593c:	08021118 	.word	0x08021118
 8005940:	20000288 	.word	0x20000288

08005944 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a03      	ldr	r2, [pc, #12]	; (800595c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	6053      	str	r3, [r2, #4]
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	e0042000 	.word	0xe0042000

08005960 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a03      	ldr	r2, [pc, #12]	; (8005978 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800596a:	f043 0302 	orr.w	r3, r3, #2
 800596e:	6053      	str	r3, [r2, #4]
}
 8005970:	bf00      	nop
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr
 8005978:	e0042000 	.word	0xe0042000

0800597c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4a03      	ldr	r2, [pc, #12]	; (8005994 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005986:	f043 0304 	orr.w	r3, r3, #4
 800598a:	6053      	str	r3, [r2, #4]
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr
 8005994:	e0042000 	.word	0xe0042000

08005998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059a2:	2003      	movs	r0, #3
 80059a4:	f001 f9a0 	bl	8006ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059a8:	f004 f8be 	bl	8009b28 <HAL_RCC_GetHCLKFreq>
 80059ac:	4603      	mov	r3, r0
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_Init+0x3c>)
 80059b0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059b2:	200f      	movs	r0, #15
 80059b4:	f7fc ff56 	bl	8002864 <HAL_InitTick>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	71fb      	strb	r3, [r7, #7]
 80059c2:	e001      	b.n	80059c8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059c4:	f7fc fd27 	bl	8002416 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059c8:	79fb      	ldrb	r3, [r7, #7]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000000 	.word	0x20000000

080059d8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_SuspendTick+0x18>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <HAL_SuspendTick+0x18>)
 80059e2:	f023 0302 	bic.w	r3, r3, #2
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	e000e010 	.word	0xe000e010

080059f4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <HAL_ResumeTick+0x18>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a03      	ldr	r2, [pc, #12]	; (8005a0c <HAL_ResumeTick+0x18>)
 80059fe:	f043 0302 	orr.w	r3, r3, #2
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	e000e010 	.word	0xe000e010

08005a10 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8005a14:	4b02      	ldr	r3, [pc, #8]	; (8005a20 <HAL_GetUIDw0+0x10>)
 8005a16:	681b      	ldr	r3, [r3, #0]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr
 8005a20:	1fff7590 	.word	0x1fff7590

08005a24 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005a28:	4b02      	ldr	r3, [pc, #8]	; (8005a34 <HAL_GetUIDw1+0x10>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	1fff7594 	.word	0x1fff7594

08005a38 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005a3c:	4b02      	ldr	r3, [pc, #8]	; (8005a48 <HAL_GetUIDw2+0x10>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	1fff7598 	.word	0x1fff7598

08005a4c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005a50:	f7ff ff78 	bl	8005944 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005a54:	bf00      	nop
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005a5c:	f7ff ff80 	bl	8005960 <LL_DBGMCU_EnableDBGStopMode>
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8005a68:	f7ff ff88 	bl	800597c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2107      	movs	r1, #7
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	401a      	ands	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ada:	431a      	orrs	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2107      	movs	r1, #7
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr

08005b1a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	210f      	movs	r1, #15
 8005b56:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	401a      	ands	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0e9b      	lsrs	r3, r3, #26
 8005b62:	f003 010f 	and.w	r1, r3, #15
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr

08005b80 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	401a      	ands	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	43db      	mvns	r3, r3
 8005be0:	401a      	ands	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	0219      	lsls	r1, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	400b      	ands	r3, r1
 8005bea:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005c12:	f023 0317 	bic.w	r3, r3, #23
 8005c16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005c38:	f023 0317 	bic.w	r3, r3, #23
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6093      	str	r3, [r2, #8]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr

08005c4a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c5e:	d101      	bne.n	8005c64 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c80:	f023 0317 	bic.w	r3, r3, #23
 8005c84:	f043 0201 	orr.w	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr

08005c96 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ca6:	f023 0317 	bic.w	r3, r3, #23
 8005caa:	f043 0202 	orr.w	r2, r3, #2
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <LL_ADC_IsEnabled+0x18>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <LL_ADC_IsEnabled+0x1a>
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d101      	bne.n	8005cf8 <LL_ADC_IsDisableOngoing+0x18>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <LL_ADC_IsDisableOngoing+0x1a>
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	f023 0317 	bic.w	r3, r3, #23
 8005d18:	f043 0204 	orr.w	r2, r3, #4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d3a:	f023 0317 	bic.w	r3, r3, #23
 8005d3e:	f043 0210 	orr.w	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d101      	bne.n	8005d68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e17e      	b.n	8006094 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d109      	bne.n	8005db8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fb fbc7 	bl	8001538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff ff44 	bl	8005c4a <LL_ADC_IsInternalRegulatorEnabled>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d115      	bne.n	8005df4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff18 	bl	8005c02 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dd2:	4b9e      	ldr	r3, [pc, #632]	; (800604c <HAL_ADC_Init+0x2d8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	099b      	lsrs	r3, r3, #6
 8005dd8:	4a9d      	ldr	r2, [pc, #628]	; (8006050 <HAL_ADC_Init+0x2dc>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	099b      	lsrs	r3, r3, #6
 8005de0:	3301      	adds	r3, #1
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005de6:	e002      	b.n	8005dee <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f9      	bne.n	8005de8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff ff26 	bl	8005c4a <LL_ADC_IsInternalRegulatorEnabled>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10d      	bne.n	8005e20 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e08:	f043 0210 	orr.w	r2, r3, #16
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff ff93 	bl	8005d50 <LL_ADC_REG_IsConversionOngoing>
 8005e2a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8124 	bne.w	8006082 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 8120 	bne.w	8006082 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005e4a:	f043 0202 	orr.w	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff ff30 	bl	8005cbc <LL_ADC_IsEnabled>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 80a7 	bne.w	8005fb2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7e1b      	ldrb	r3, [r3, #24]
 8005e6c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005e6e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7e5b      	ldrb	r3, [r3, #25]
 8005e74:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e76:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7e9b      	ldrb	r3, [r3, #26]
 8005e7c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e7e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e84:	2a00      	cmp	r2, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_ADC_Init+0x11a>
 8005e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e8c:	e000      	b.n	8005e90 <HAL_ADC_Init+0x11c>
 8005e8e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e90:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e96:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da04      	bge.n	8005eaa <HAL_ADC_Init+0x136>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	e001      	b.n	8005eae <HAL_ADC_Init+0x13a>
 8005eaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8005eae:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005eb6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005eb8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d114      	bne.n	8005ef4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7e9b      	ldrb	r3, [r3, #26]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e00b      	b.n	8005ef4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	f043 0201 	orr.w	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8005f1a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	69b9      	ldr	r1, [r7, #24]
 8005f24:	430b      	orrs	r3, r1
 8005f26:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f34:	4313      	orrs	r3, r2
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d111      	bne.n	8005f6a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f52:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005f58:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005f5e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	4b38      	ldr	r3, [pc, #224]	; (8006054 <HAL_ADC_Init+0x2e0>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	6979      	ldr	r1, [r7, #20]
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005f86:	d014      	beq.n	8005fb2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d00f      	beq.n	8005fb2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005f9c:	4b2e      	ldr	r3, [pc, #184]	; (8006058 <HAL_ADC_Init+0x2e4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005fac:	492a      	ldr	r1, [pc, #168]	; (8006058 <HAL_ADC_Init+0x2e4>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	461a      	mov	r2, r3
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f7ff fd76 	bl	8005aae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4923      	ldr	r1, [pc, #140]	; (800605c <HAL_ADC_Init+0x2e8>)
 8005fce:	f7ff fd6e 	bl	8005aae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d108      	bne.n	8005fec <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f062 020f 	orn	r2, r2, #15
 8005fe8:	629a      	str	r2, [r3, #40]	; 0x28
 8005fea:	e017      	b.n	800601c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff4:	d112      	bne.n	800601c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	3b01      	subs	r3, #1
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	f003 031c 	and.w	r3, r3, #28
 8006008:	f06f 020f 	mvn.w	r2, #15
 800600c:	fa02 f103 	lsl.w	r1, r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fd61 	bl	8005aea <LL_ADC_GetSamplingTimeCommonChannels>
 8006028:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800602e:	429a      	cmp	r2, r3
 8006030:	d116      	bne.n	8006060 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	f043 0201 	orr.w	r2, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006048:	e023      	b.n	8006092 <HAL_ADC_Init+0x31e>
 800604a:	bf00      	nop
 800604c:	20000000 	.word	0x20000000
 8006050:	053e2d63 	.word	0x053e2d63
 8006054:	1ffffc02 	.word	0x1ffffc02
 8006058:	40012708 	.word	0x40012708
 800605c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	f023 0312 	bic.w	r3, r3, #18
 8006068:	f043 0210 	orr.w	r2, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006074:	f043 0201 	orr.w	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006080:	e007      	b.n	8006092 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	f043 0210 	orr.w	r2, r3, #16
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8006092:	7ffb      	ldrb	r3, [r7, #31]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e07a      	b.n	80061a4 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	f043 0202 	orr.w	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 face 	bl	800665c <ADC_ConversionStop>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fb92 	bl	80067f4 <ADC_Disable>
 80060d0:	4603      	mov	r3, r0
 80060d2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fd9f 	bl	8005c28 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80060f8:	f023 0303 	bic.w	r3, r3, #3
 80060fc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f240 329f 	movw	r2, #927	; 0x39f
 8006106:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68d9      	ldr	r1, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <HAL_ADC_DeInit+0x110>)
 8006114:	400b      	ands	r3, r1
 8006116:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006126:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0207 	bic.w	r2, r2, #7
 8006136:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8006146:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8006176:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <HAL_ADC_DeInit+0x114>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a0d      	ldr	r2, [pc, #52]	; (80061b0 <HAL_ADC_DeInit+0x114>)
 800617c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8006180:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fb fa06 	bl	8001594 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	833e0200 	.word	0x833e0200
 80061b0:	40012708 	.word	0x40012708

080061b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff fdc5 	bl	8005d50 <LL_ADC_REG_IsConversionOngoing>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d132      	bne.n	8006232 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_ADC_Start+0x26>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e02e      	b.n	8006238 <HAL_ADC_Start+0x84>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fa80 	bl	80066e8 <ADC_Enable>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d11a      	bne.n	8006228 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	221c      	movs	r2, #28
 8006212:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fd6f 	bl	8005d04 <LL_ADC_REG_StartConversion>
 8006226:	e006      	b.n	8006236 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006230:	e001      	b.n	8006236 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006232:	2302      	movs	r3, #2
 8006234:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_ADC_Stop+0x16>
 8006252:	2302      	movs	r3, #2
 8006254:	e022      	b.n	800629c <HAL_ADC_Stop+0x5c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9fc 	bl	800665c <ADC_ConversionStop>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d111      	bne.n	8006292 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fac0 	bl	80067f4 <ADC_Disable>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	f043 0201 	orr.w	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d102      	bne.n	80062bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80062b6:	2308      	movs	r3, #8
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e010      	b.n	80062de <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e077      	b.n	80063ca <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80062da:	2304      	movs	r3, #4
 80062dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80062de:	f7fc facb 	bl	8002878 <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80062e4:	e021      	b.n	800632a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d01d      	beq.n	800632a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80062ee:	f7fc fac3 	bl	8002878 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d302      	bcc.n	8006304 <HAL_ADC_PollForConversion+0x60>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d112      	bne.n	800632a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10b      	bne.n	800632a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	f043 0204 	orr.w	r2, r3, #4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e04f      	b.n	80063ca <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0d6      	beq.n	80062e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fbe6 	bl	8005b1a <LL_ADC_REG_IsTriggerSourceSWStart>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d031      	beq.n	80063b8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	7e9b      	ldrb	r3, [r3, #26]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d12d      	bne.n	80063b8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b08      	cmp	r3, #8
 8006368:	d126      	bne.n	80063b8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fcee 	bl	8005d50 <LL_ADC_REG_IsConversionOngoing>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d112      	bne.n	80063a0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 020c 	bic.w	r2, r2, #12
 8006388:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	f043 0201 	orr.w	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	659a      	str	r2, [r3, #88]	; 0x58
 800639e:	e00b      	b.n	80063b8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a4:	f043 0220 	orr.w	r2, r3, #32
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7e1b      	ldrb	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	220c      	movs	r2, #12
 80063c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
	...

080063ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x28>
 8006410:	2302      	movs	r3, #2
 8006412:	e110      	b.n	8006636 <HAL_ADC_ConfigChannel+0x24a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fc95 	bl	8005d50 <LL_ADC_REG_IsConversionOngoing>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 80f7 	bne.w	800661c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b02      	cmp	r3, #2
 8006434:	f000 80b1 	beq.w	800659a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006440:	d004      	beq.n	800644c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006446:	4a7e      	ldr	r2, [pc, #504]	; (8006640 <HAL_ADC_ConfigChannel+0x254>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7ff fb92 	bl	8005b80 <LL_ADC_REG_SetSequencerChAdd>
 800645c:	e041      	b.n	80064e2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	210f      	movs	r1, #15
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	401a      	ands	r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800647c:	2b00      	cmp	r3, #0
 800647e:	d105      	bne.n	800648c <HAL_ADC_ConfigChannel+0xa0>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	0e9b      	lsrs	r3, r3, #26
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	e011      	b.n	80064b0 <HAL_ADC_ConfigChannel+0xc4>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	fa93 f3a3 	rbit	r3, r3
 8006498:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80064a4:	2320      	movs	r3, #32
 80064a6:	e003      	b.n	80064b0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	fab3 f383 	clz	r3, r3
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6849      	ldr	r1, [r1, #4]
 80064b4:	f001 011f 	and.w	r1, r1, #31
 80064b8:	408b      	lsls	r3, r1
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	089b      	lsrs	r3, r3, #2
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d808      	bhi.n	80064e2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6859      	ldr	r1, [r3, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	f7ff fb2e 	bl	8005b3e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f7ff fb6b 	bl	8005bca <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f280 8097 	bge.w	800662c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064fe:	4851      	ldr	r0, [pc, #324]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 8006500:	f7ff fac8 	bl	8005a94 <LL_ADC_GetCommonPathInternalCh>
 8006504:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4f      	ldr	r2, [pc, #316]	; (8006648 <HAL_ADC_ConfigChannel+0x25c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d120      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006516:	2b00      	cmp	r3, #0
 8006518:	d11b      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006520:	4619      	mov	r1, r3
 8006522:	4848      	ldr	r0, [pc, #288]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 8006524:	f7ff faa4 	bl	8005a70 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006528:	4b48      	ldr	r3, [pc, #288]	; (800664c <HAL_ADC_ConfigChannel+0x260>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	099b      	lsrs	r3, r3, #6
 800652e:	4a48      	ldr	r2, [pc, #288]	; (8006650 <HAL_ADC_ConfigChannel+0x264>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	4613      	mov	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006542:	e002      	b.n	800654a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3b01      	subs	r3, #1
 8006548:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f9      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006550:	e06c      	b.n	800662c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a3f      	ldr	r2, [pc, #252]	; (8006654 <HAL_ADC_ConfigChannel+0x268>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d10c      	bne.n	8006576 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d107      	bne.n	8006576 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800656c:	4619      	mov	r1, r3
 800656e:	4835      	ldr	r0, [pc, #212]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 8006570:	f7ff fa7e 	bl	8005a70 <LL_ADC_SetCommonPathInternalCh>
 8006574:	e05a      	b.n	800662c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a37      	ldr	r2, [pc, #220]	; (8006658 <HAL_ADC_ConfigChannel+0x26c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d155      	bne.n	800662c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006586:	2b00      	cmp	r3, #0
 8006588:	d150      	bne.n	800662c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006590:	4619      	mov	r1, r3
 8006592:	482c      	ldr	r0, [pc, #176]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 8006594:	f7ff fa6c 	bl	8005a70 <LL_ADC_SetCommonPathInternalCh>
 8006598:	e048      	b.n	800662c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a2:	d004      	beq.n	80065ae <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80065a8:	4a25      	ldr	r2, [pc, #148]	; (8006640 <HAL_ADC_ConfigChannel+0x254>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d107      	bne.n	80065be <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7ff faf3 	bl	8005ba4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da32      	bge.n	800662c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065c6:	481f      	ldr	r0, [pc, #124]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 80065c8:	f7ff fa64 	bl	8005a94 <LL_ADC_GetCommonPathInternalCh>
 80065cc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <HAL_ADC_ConfigChannel+0x25c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d107      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065de:	4619      	mov	r1, r3
 80065e0:	4818      	ldr	r0, [pc, #96]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 80065e2:	f7ff fa45 	bl	8005a70 <LL_ADC_SetCommonPathInternalCh>
 80065e6:	e021      	b.n	800662c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a19      	ldr	r2, [pc, #100]	; (8006654 <HAL_ADC_ConfigChannel+0x268>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d107      	bne.n	8006602 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f8:	4619      	mov	r1, r3
 80065fa:	4812      	ldr	r0, [pc, #72]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 80065fc:	f7ff fa38 	bl	8005a70 <LL_ADC_SetCommonPathInternalCh>
 8006600:	e014      	b.n	800662c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a14      	ldr	r2, [pc, #80]	; (8006658 <HAL_ADC_ConfigChannel+0x26c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10f      	bne.n	800662c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006612:	4619      	mov	r1, r3
 8006614:	480b      	ldr	r0, [pc, #44]	; (8006644 <HAL_ADC_ConfigChannel+0x258>)
 8006616:	f7ff fa2b 	bl	8005a70 <LL_ADC_SetCommonPathInternalCh>
 800661a:	e007      	b.n	800662c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006634:	7ffb      	ldrb	r3, [r7, #31]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	80000004 	.word	0x80000004
 8006644:	40012708 	.word	0x40012708
 8006648:	b0001000 	.word	0xb0001000
 800664c:	20000000 	.word	0x20000000
 8006650:	053e2d63 	.word	0x053e2d63
 8006654:	b8004000 	.word	0xb8004000
 8006658:	b4002000 	.word	0xb4002000

0800665c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fb71 	bl	8005d50 <LL_ADC_REG_IsConversionOngoing>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d033      	beq.n	80066dc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fb31 	bl	8005ce0 <LL_ADC_IsDisableOngoing>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fb4e 	bl	8005d2a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800668e:	f7fc f8f3 	bl	8002878 <HAL_GetTick>
 8006692:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006694:	e01b      	b.n	80066ce <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006696:	f7fc f8ef 	bl	8002878 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d914      	bls.n	80066ce <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b6:	f043 0210 	orr.w	r2, r3, #16
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c2:	f043 0201 	orr.w	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e007      	b.n	80066de <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1dc      	bne.n	8006696 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fadf 	bl	8005cbc <LL_ADC_IsEnabled>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d169      	bne.n	80067d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	4b36      	ldr	r3, [pc, #216]	; (80067e4 <ADC_Enable+0xfc>)
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00d      	beq.n	800672e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	f043 0210 	orr.w	r2, r3, #16
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	f043 0201 	orr.w	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e055      	b.n	80067da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fa9c 	bl	8005c70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006738:	482b      	ldr	r0, [pc, #172]	; (80067e8 <ADC_Enable+0x100>)
 800673a:	f7ff f9ab 	bl	8005a94 <LL_ADC_GetCommonPathInternalCh>
 800673e:	4603      	mov	r3, r0
 8006740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00f      	beq.n	8006768 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006748:	4b28      	ldr	r3, [pc, #160]	; (80067ec <ADC_Enable+0x104>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	099b      	lsrs	r3, r3, #6
 800674e:	4a28      	ldr	r2, [pc, #160]	; (80067f0 <ADC_Enable+0x108>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8006758:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800675a:	e002      	b.n	8006762 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	3b01      	subs	r3, #1
 8006760:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f9      	bne.n	800675c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7e5b      	ldrb	r3, [r3, #25]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d033      	beq.n	80067d8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006770:	f7fc f882 	bl	8002878 <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006776:	e028      	b.n	80067ca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fa9d 	bl	8005cbc <LL_ADC_IsEnabled>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fa6f 	bl	8005c70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006792:	f7fc f871 	bl	8002878 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d914      	bls.n	80067ca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d00d      	beq.n	80067ca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b2:	f043 0210 	orr.w	r2, r3, #16
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067be:	f043 0201 	orr.w	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e007      	b.n	80067da <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d1cf      	bne.n	8006778 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	80000017 	.word	0x80000017
 80067e8:	40012708 	.word	0x40012708
 80067ec:	20000000 	.word	0x20000000
 80067f0:	053e2d63 	.word	0x053e2d63

080067f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff fa6d 	bl	8005ce0 <LL_ADC_IsDisableOngoing>
 8006806:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fa55 	bl	8005cbc <LL_ADC_IsEnabled>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d047      	beq.n	80068a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d144      	bne.n	80068a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 0305 	and.w	r3, r3, #5
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10c      	bne.n	8006846 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fa30 	bl	8005c96 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2203      	movs	r2, #3
 800683c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800683e:	f7fc f81b 	bl	8002878 <HAL_GetTick>
 8006842:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006844:	e029      	b.n	800689a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684a:	f043 0210 	orr.w	r2, r3, #16
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006856:	f043 0201 	orr.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e023      	b.n	80068aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006862:	f7fc f809 	bl	8002878 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d914      	bls.n	800689a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006882:	f043 0210 	orr.w	r2, r3, #16
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	f043 0201 	orr.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e007      	b.n	80068aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1dc      	bne.n	8006862 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <LL_ADC_SetCalibrationFactor>:
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068c2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <LL_ADC_GetCalibrationFactor>:
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <LL_ADC_Enable>:
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006906:	f023 0317 	bic.w	r3, r3, #23
 800690a:	f043 0201 	orr.w	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	609a      	str	r2, [r3, #8]
}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	bc80      	pop	{r7}
 800691a:	4770      	bx	lr

0800691c <LL_ADC_Disable>:
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800692c:	f023 0317 	bic.w	r3, r3, #23
 8006930:	f043 0202 	orr.w	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <LL_ADC_IsEnabled>:
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <LL_ADC_IsEnabled+0x18>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <LL_ADC_IsEnabled+0x1a>
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr

08006966 <LL_ADC_StartCalibration>:
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006976:	f023 0317 	bic.w	r3, r3, #23
 800697a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	609a      	str	r2, [r3, #8]
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <LL_ADC_IsCalibrationOnGoing>:
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800699c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a0:	d101      	bne.n	80069a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b088      	sub	sp, #32
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_ADCEx_Calibration_Start+0x1e>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e0b9      	b.n	8006b44 <HAL_ADCEx_Calibration_Start+0x192>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff ff0b 	bl	80067f4 <ADC_Disable>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff ffab 	bl	8006942 <LL_ADC_IsEnabled>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f040 809d 	bne.w	8006b2e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80069fc:	f043 0202 	orr.w	r2, r3, #2
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	f248 0303 	movw	r3, #32771	; 0x8003
 8006a0e:	4013      	ands	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a20:	f023 0303 	bic.w	r3, r3, #3
 8006a24:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	e02e      	b.n	8006a8a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ff98 	bl	8006966 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a36:	e014      	b.n	8006a62 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8006a44:	d30d      	bcc.n	8006a62 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	f023 0312 	bic.w	r3, r3, #18
 8006a4e:	f043 0210 	orr.w	r2, r3, #16
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e070      	b.n	8006b44 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff ff90 	bl	800698c <LL_ADC_IsCalibrationOnGoing>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e2      	bne.n	8006a38 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff ff2f 	bl	80068da <LL_ADC_GetCalibrationFactor>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	4413      	add	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b07      	cmp	r3, #7
 8006a8e:	d9cd      	bls.n	8006a2c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff ff29 	bl	80068f6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff ff01 	bl	80068b2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff ff31 	bl	800691c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006aba:	f7fb fedd 	bl	8002878 <HAL_GetTick>
 8006abe:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006ac0:	e01c      	b.n	8006afc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ac2:	f7fb fed9 	bl	8002878 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d915      	bls.n	8006afc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff ff34 	bl	8006942 <LL_ADC_IsEnabled>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	f043 0210 	orr.w	r2, r3, #16
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af0:	f043 0201 	orr.w	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e023      	b.n	8006b44 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff ff1e 	bl	8006942 <LL_ADC_IsEnabled>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1da      	bne.n	8006ac2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68d9      	ldr	r1, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b20:	f023 0303 	bic.w	r3, r3, #3
 8006b24:	f043 0201 	orr.w	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8006b2c:	e005      	b.n	8006b3a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	f043 0210 	orr.w	r2, r3, #16
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <__NVIC_SetPriorityGrouping+0x44>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b7e:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <__NVIC_SetPriorityGrouping+0x44>)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	60d3      	str	r3, [r2, #12]
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	e000ed00 	.word	0xe000ed00

08006b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b98:	4b04      	ldr	r3, [pc, #16]	; (8006bac <__NVIC_GetPriorityGrouping+0x18>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	f003 0307 	and.w	r3, r3, #7
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	db0b      	blt.n	8006bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	f003 021f 	and.w	r2, r3, #31
 8006bc8:	4906      	ldr	r1, [pc, #24]	; (8006be4 <__NVIC_EnableIRQ+0x34>)
 8006bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8006bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr
 8006be4:	e000e100 	.word	0xe000e100

08006be8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	db12      	blt.n	8006c20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	f003 021f 	and.w	r2, r3, #31
 8006c00:	490a      	ldr	r1, [pc, #40]	; (8006c2c <__NVIC_DisableIRQ+0x44>)
 8006c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	2001      	movs	r0, #1
 8006c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c0e:	3320      	adds	r3, #32
 8006c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c14:	f3bf 8f4f 	dsb	sy
}
 8006c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c1a:	f3bf 8f6f 	isb	sy
}
 8006c1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	e000e100 	.word	0xe000e100

08006c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	6039      	str	r1, [r7, #0]
 8006c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	db0a      	blt.n	8006c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	490c      	ldr	r1, [pc, #48]	; (8006c7c <__NVIC_SetPriority+0x4c>)
 8006c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4e:	0112      	lsls	r2, r2, #4
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	440b      	add	r3, r1
 8006c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c58:	e00a      	b.n	8006c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	4908      	ldr	r1, [pc, #32]	; (8006c80 <__NVIC_SetPriority+0x50>)
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	3b04      	subs	r3, #4
 8006c68:	0112      	lsls	r2, r2, #4
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	761a      	strb	r2, [r3, #24]
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	e000e100 	.word	0xe000e100
 8006c80:	e000ed00 	.word	0xe000ed00

08006c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b089      	sub	sp, #36	; 0x24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f1c3 0307 	rsb	r3, r3, #7
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	bf28      	it	cs
 8006ca2:	2304      	movcs	r3, #4
 8006ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	2b06      	cmp	r3, #6
 8006cac:	d902      	bls.n	8006cb4 <NVIC_EncodePriority+0x30>
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3b03      	subs	r3, #3
 8006cb2:	e000      	b.n	8006cb6 <NVIC_EncodePriority+0x32>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43da      	mvns	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd6:	43d9      	mvns	r1, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cdc:	4313      	orrs	r3, r2
         );
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3724      	adds	r7, #36	; 0x24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff ff2b 	bl	8006b4c <__NVIC_SetPriorityGrouping>
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	4603      	mov	r3, r0
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d0c:	f7ff ff42 	bl	8006b94 <__NVIC_GetPriorityGrouping>
 8006d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	6978      	ldr	r0, [r7, #20]
 8006d18:	f7ff ffb4 	bl	8006c84 <NVIC_EncodePriority>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d22:	4611      	mov	r1, r2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff ff83 	bl	8006c30 <__NVIC_SetPriority>
}
 8006d2a:	bf00      	nop
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	4603      	mov	r3, r0
 8006d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff ff35 	bl	8006bb0 <__NVIC_EnableIRQ>
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	4603      	mov	r3, r0
 8006d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff ff43 	bl	8006be8 <__NVIC_DisableIRQ>
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e08e      	b.n	8006e9c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	4b47      	ldr	r3, [pc, #284]	; (8006ea4 <HAL_DMA_Init+0x138>)
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d80f      	bhi.n	8006daa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4b45      	ldr	r3, [pc, #276]	; (8006ea8 <HAL_DMA_Init+0x13c>)
 8006d92:	4413      	add	r3, r2
 8006d94:	4a45      	ldr	r2, [pc, #276]	; (8006eac <HAL_DMA_Init+0x140>)
 8006d96:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	009a      	lsls	r2, r3, #2
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a42      	ldr	r2, [pc, #264]	; (8006eb0 <HAL_DMA_Init+0x144>)
 8006da6:	641a      	str	r2, [r3, #64]	; 0x40
 8006da8:	e00e      	b.n	8006dc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	4b40      	ldr	r3, [pc, #256]	; (8006eb4 <HAL_DMA_Init+0x148>)
 8006db2:	4413      	add	r3, r2
 8006db4:	4a3d      	ldr	r2, [pc, #244]	; (8006eac <HAL_DMA_Init+0x140>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	091b      	lsrs	r3, r3, #4
 8006dbc:	009a      	lsls	r2, r3, #2
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a3c      	ldr	r2, [pc, #240]	; (8006eb8 <HAL_DMA_Init+0x14c>)
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fb24 	bl	8007468 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e28:	d102      	bne.n	8006e30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <HAL_DMA_Init+0x106>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d80c      	bhi.n	8006e72 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb4d 	bl	80074f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	e008      	b.n	8006e84 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40020407 	.word	0x40020407
 8006ea8:	bffdfff8 	.word	0xbffdfff8
 8006eac:	cccccccd 	.word	0xcccccccd
 8006eb0:	40020000 	.word	0x40020000
 8006eb4:	bffdfbf8 	.word	0xbffdfbf8
 8006eb8:	40020400 	.word	0x40020400

08006ebc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e07b      	b.n	8006fc6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4b3a      	ldr	r3, [pc, #232]	; (8006fd0 <HAL_DMA_DeInit+0x114>)
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d80f      	bhi.n	8006f0a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4b38      	ldr	r3, [pc, #224]	; (8006fd4 <HAL_DMA_DeInit+0x118>)
 8006ef2:	4413      	add	r3, r2
 8006ef4:	4a38      	ldr	r2, [pc, #224]	; (8006fd8 <HAL_DMA_DeInit+0x11c>)
 8006ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8006efa:	091b      	lsrs	r3, r3, #4
 8006efc:	009a      	lsls	r2, r3, #2
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a35      	ldr	r2, [pc, #212]	; (8006fdc <HAL_DMA_DeInit+0x120>)
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40
 8006f08:	e00e      	b.n	8006f28 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	4b33      	ldr	r3, [pc, #204]	; (8006fe0 <HAL_DMA_DeInit+0x124>)
 8006f12:	4413      	add	r3, r2
 8006f14:	4a30      	ldr	r2, [pc, #192]	; (8006fd8 <HAL_DMA_DeInit+0x11c>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	091b      	lsrs	r3, r3, #4
 8006f1c:	009a      	lsls	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2f      	ldr	r2, [pc, #188]	; (8006fe4 <HAL_DMA_DeInit+0x128>)
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f34:	f003 021c 	and.w	r2, r3, #28
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f42:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa8f 	bl	8007468 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f5a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <HAL_DMA_DeInit+0xc8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d80b      	bhi.n	8006f84 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fac3 	bl	80074f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006f82:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40020407 	.word	0x40020407
 8006fd4:	bffdfff8 	.word	0xbffdfff8
 8006fd8:	cccccccd 	.word	0xcccccccd
 8006fdc:	40020000 	.word	0x40020000
 8006fe0:	bffdfbf8 	.word	0xbffdfbf8
 8006fe4:	40020400 	.word	0x40020400

08006fe8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_DMA_Start_IT+0x20>
 8007004:	2302      	movs	r3, #2
 8007006:	e069      	b.n	80070dc <HAL_DMA_Start_IT+0xf4>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d155      	bne.n	80070c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f9d3 	bl	80073ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 020e 	orr.w	r2, r2, #14
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e00f      	b.n	8007080 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0204 	bic.w	r2, r2, #4
 800706e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 020a 	orr.w	r2, r2, #10
 800707e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800709c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0201 	orr.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	e008      	b.n	80070da <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2280      	movs	r2, #128	; 0x80
 80070cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e04f      	b.n	8007196 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d008      	beq.n	8007114 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2204      	movs	r2, #4
 8007106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e040      	b.n	8007196 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 020e 	bic.w	r2, r2, #14
 8007122:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	f003 021c 	and.w	r2, r3, #28
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	2101      	movs	r1, #1
 8007152:	fa01 f202 	lsl.w	r2, r1, r2
 8007156:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007160:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007178:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007182:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d005      	beq.n	80071c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2204      	movs	r2, #4
 80071bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	73fb      	strb	r3, [r7, #15]
 80071c2:	e047      	b.n	8007254 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 020e 	bic.w	r2, r2, #14
 80071d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	f003 021c 	and.w	r2, r3, #28
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f202 	lsl.w	r2, r1, r2
 8007206:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007210:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00c      	beq.n	8007234 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007228:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007232:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
    }
  }
  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727c:	f003 031c 	and.w	r3, r3, #28
 8007280:	2204      	movs	r2, #4
 8007282:	409a      	lsls	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4013      	ands	r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d027      	beq.n	80072dc <HAL_DMA_IRQHandler+0x7c>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d022      	beq.n	80072dc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d107      	bne.n	80072b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0204 	bic.w	r2, r2, #4
 80072b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b8:	f003 021c 	and.w	r2, r3, #28
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	2104      	movs	r1, #4
 80072c2:	fa01 f202 	lsl.w	r2, r1, r2
 80072c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8081 	beq.w	80073d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80072da:	e07b      	b.n	80073d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e0:	f003 031c 	and.w	r3, r3, #28
 80072e4:	2202      	movs	r2, #2
 80072e6:	409a      	lsls	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d03d      	beq.n	800736c <HAL_DMA_IRQHandler+0x10c>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d038      	beq.n	800736c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 020a 	bic.w	r2, r2, #10
 8007316:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <HAL_DMA_IRQHandler+0x180>)
 8007328:	429a      	cmp	r2, r3
 800732a:	d909      	bls.n	8007340 <HAL_DMA_IRQHandler+0xe0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007330:	f003 031c 	and.w	r3, r3, #28
 8007334:	4a2b      	ldr	r2, [pc, #172]	; (80073e4 <HAL_DMA_IRQHandler+0x184>)
 8007336:	2102      	movs	r1, #2
 8007338:	fa01 f303 	lsl.w	r3, r1, r3
 800733c:	6053      	str	r3, [r2, #4]
 800733e:	e008      	b.n	8007352 <HAL_DMA_IRQHandler+0xf2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007344:	f003 031c 	and.w	r3, r3, #28
 8007348:	4a27      	ldr	r2, [pc, #156]	; (80073e8 <HAL_DMA_IRQHandler+0x188>)
 800734a:	2102      	movs	r1, #2
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d038      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800736a:	e033      	b.n	80073d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007370:	f003 031c 	and.w	r3, r3, #28
 8007374:	2208      	movs	r2, #8
 8007376:	409a      	lsls	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d02a      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x176>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d025      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 020e 	bic.w	r2, r2, #14
 8007398:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739e:	f003 021c 	and.w	r2, r3, #28
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	2101      	movs	r1, #1
 80073a8:	fa01 f202 	lsl.w	r2, r1, r2
 80073ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
}
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40020080 	.word	0x40020080
 80073e4:	40020400 	.word	0x40020400
 80073e8:	40020000 	.word	0x40020000

080073ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007402:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007414:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f003 021c 	and.w	r2, r3, #28
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	2101      	movs	r1, #1
 8007424:	fa01 f202 	lsl.w	r2, r1, r2
 8007428:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b10      	cmp	r3, #16
 8007438:	d108      	bne.n	800744c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800744a:	e007      	b.n	800745c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr
	...

08007468 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8007478:	429a      	cmp	r2, r3
 800747a:	d813      	bhi.n	80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007480:	089b      	lsrs	r3, r3, #2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007488:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	3b08      	subs	r3, #8
 8007498:	4a14      	ldr	r2, [pc, #80]	; (80074ec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800749a:	fba2 2303 	umull	r2, r3, r2, r3
 800749e:	091b      	lsrs	r3, r3, #4
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e011      	b.n	80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a8:	089b      	lsrs	r3, r3, #2
 80074aa:	009a      	lsls	r2, r3, #2
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80074ae:	4413      	add	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	3b08      	subs	r3, #8
 80074bc:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80074be:	fba2 2303 	umull	r2, r3, r2, r3
 80074c2:	091b      	lsrs	r3, r3, #4
 80074c4:	3307      	adds	r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a0a      	ldr	r2, [pc, #40]	; (80074f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80074cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	2201      	movs	r2, #1
 80074d6:	409a      	lsls	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40020407 	.word	0x40020407
 80074ec:	cccccccd 	.word	0xcccccccd
 80074f0:	4002081c 	.word	0x4002081c
 80074f4:	40020880 	.word	0x40020880

080074f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007508:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a08      	ldr	r2, [pc, #32]	; (800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800751c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3b01      	subs	r3, #1
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2201      	movs	r2, #1
 8007528:	409a      	lsls	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr
 8007538:	1000823f 	.word	0x1000823f
 800753c:	40020940 	.word	0x40020940

08007540 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800754e:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <HAL_FLASH_Program+0x80>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_FLASH_Program+0x1a>
 8007556:	2302      	movs	r3, #2
 8007558:	e02d      	b.n	80075b6 <HAL_FLASH_Program+0x76>
 800755a:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <HAL_FLASH_Program+0x80>)
 800755c:	2201      	movs	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007560:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <HAL_FLASH_Program+0x80>)
 8007562:	2200      	movs	r2, #0
 8007564:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800756a:	f000 f869 	bl	8007640 <FLASH_WaitForLastOperation>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11a      	bne.n	80075ae <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d105      	bne.n	800758a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800757e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007582:	68b8      	ldr	r0, [r7, #8]
 8007584:	f000 f8be 	bl	8007704 <FLASH_Program_DoubleWord>
 8007588:	e004      	b.n	8007594 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	4619      	mov	r1, r3
 800758e:	68b8      	ldr	r0, [r7, #8]
 8007590:	f000 f8de 	bl	8007750 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007598:	f000 f852 	bl	8007640 <FLASH_WaitForLastOperation>
 800759c:	4603      	mov	r3, r0
 800759e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80075a0:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <HAL_FLASH_Program+0x84>)
 80075a2:	695a      	ldr	r2, [r3, #20]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	43db      	mvns	r3, r3
 80075a8:	4906      	ldr	r1, [pc, #24]	; (80075c4 <HAL_FLASH_Program+0x84>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <HAL_FLASH_Program+0x80>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	200005bc 	.word	0x200005bc
 80075c4:	58004000 	.word	0x58004000

080075c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80075d2:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <HAL_FLASH_Unlock+0x38>)
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	da0b      	bge.n	80075f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <HAL_FLASH_Unlock+0x38>)
 80075dc:	4a09      	ldr	r2, [pc, #36]	; (8007604 <HAL_FLASH_Unlock+0x3c>)
 80075de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <HAL_FLASH_Unlock+0x38>)
 80075e2:	4a09      	ldr	r2, [pc, #36]	; (8007608 <HAL_FLASH_Unlock+0x40>)
 80075e4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80075e6:	4b06      	ldr	r3, [pc, #24]	; (8007600 <HAL_FLASH_Unlock+0x38>)
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da01      	bge.n	80075f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80075f2:	79fb      	ldrb	r3, [r7, #7]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bc80      	pop	{r7}
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	58004000 	.word	0x58004000
 8007604:	45670123 	.word	0x45670123
 8007608:	cdef89ab 	.word	0xcdef89ab

0800760c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007616:	4b09      	ldr	r3, [pc, #36]	; (800763c <HAL_FLASH_Lock+0x30>)
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4a08      	ldr	r2, [pc, #32]	; (800763c <HAL_FLASH_Lock+0x30>)
 800761c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007620:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8007622:	4b06      	ldr	r3, [pc, #24]	; (800763c <HAL_FLASH_Lock+0x30>)
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	db01      	blt.n	800762e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800762e:	79fb      	ldrb	r3, [r7, #7]
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	58004000 	.word	0x58004000

08007640 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8007648:	f7fb f916 	bl	8002878 <HAL_GetTick>
 800764c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800764e:	e009      	b.n	8007664 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007650:	f7fb f912 	bl	8002878 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d801      	bhi.n	8007664 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e047      	b.n	80076f4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007664:	4b25      	ldr	r3, [pc, #148]	; (80076fc <FLASH_WaitForLastOperation+0xbc>)
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800766c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007670:	d0ee      	beq.n	8007650 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8007672:	4b22      	ldr	r3, [pc, #136]	; (80076fc <FLASH_WaitForLastOperation+0xbc>)
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007682:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <FLASH_WaitForLastOperation+0xbc>)
 8007684:	2201      	movs	r2, #1
 8007686:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800768e:	4013      	ands	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <FLASH_WaitForLastOperation+0x6c>
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <FLASH_WaitForLastOperation+0xbc>)
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80076a6:	4915      	ldr	r1, [pc, #84]	; (80076fc <FLASH_WaitForLastOperation+0xbc>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	618b      	str	r3, [r1, #24]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <FLASH_WaitForLastOperation+0x80>
 80076b6:	4a11      	ldr	r2, [pc, #68]	; (80076fc <FLASH_WaitForLastOperation+0xbc>)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80076be:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00e      	beq.n	80076e4 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80076c6:	4a0e      	ldr	r2, [pc, #56]	; (8007700 <FLASH_WaitForLastOperation+0xc0>)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e011      	b.n	80076f4 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80076d0:	f7fb f8d2 	bl	8002878 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d801      	bhi.n	80076e4 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e007      	b.n	80076f4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <FLASH_WaitForLastOperation+0xbc>)
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076f0:	d0ee      	beq.n	80076d0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	58004000 	.word	0x58004000
 8007700:	200005bc 	.word	0x200005bc

08007704 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007710:	4b0e      	ldr	r3, [pc, #56]	; (800774c <FLASH_Program_DoubleWord+0x48>)
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	4a0d      	ldr	r2, [pc, #52]	; (800774c <FLASH_Program_DoubleWord+0x48>)
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007722:	f3bf 8f6f 	isb	sy
}
 8007726:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	000a      	movs	r2, r1
 8007736:	2300      	movs	r3, #0
 8007738:	68f9      	ldr	r1, [r7, #12]
 800773a:	3104      	adds	r1, #4
 800773c:	4613      	mov	r3, r2
 800773e:	600b      	str	r3, [r1, #0]
}
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	58004000 	.word	0x58004000

08007750 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8007750:	b480      	push	{r7}
 8007752:	b089      	sub	sp, #36	; 0x24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007766:	4b18      	ldr	r3, [pc, #96]	; (80077c8 <FLASH_Program_Fast+0x78>)
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <FLASH_Program_Fast+0x78>)
 800776c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007770:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007772:	f3ef 8310 	mrs	r3, PRIMASK
 8007776:	60fb      	str	r3, [r7, #12]
  return(result);
 8007778:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800777a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800777c:	b672      	cpsid	i
}
 800777e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	3304      	adds	r3, #4
 800778c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	3304      	adds	r3, #4
 8007792:	617b      	str	r3, [r7, #20]
    row_index--;
 8007794:	7ffb      	ldrb	r3, [r7, #31]
 8007796:	3b01      	subs	r3, #1
 8007798:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800779a:	7ffb      	ldrb	r3, [r7, #31]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1ef      	bne.n	8007780 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80077a0:	bf00      	nop
 80077a2:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <FLASH_Program_Fast+0x78>)
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ae:	d0f8      	beq.n	80077a2 <FLASH_Program_Fast+0x52>
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f383 8810 	msr	PRIMASK, r3
}
 80077ba:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80077bc:	bf00      	nop
 80077be:	3724      	adds	r7, #36	; 0x24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	58004000 	.word	0x58004000

080077cc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80077d6:	4b28      	ldr	r3, [pc, #160]	; (8007878 <HAL_FLASHEx_Erase+0xac>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_FLASHEx_Erase+0x16>
 80077de:	2302      	movs	r3, #2
 80077e0:	e046      	b.n	8007870 <HAL_FLASHEx_Erase+0xa4>
 80077e2:	4b25      	ldr	r3, [pc, #148]	; (8007878 <HAL_FLASHEx_Erase+0xac>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80077e8:	4b23      	ldr	r3, [pc, #140]	; (8007878 <HAL_FLASHEx_Erase+0xac>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80077ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077f2:	f7ff ff25 	bl	8007640 <FLASH_WaitForLastOperation>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d133      	bne.n	8007868 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d108      	bne.n	800781a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8007808:	f000 f838 	bl	800787c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800780c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007810:	f7ff ff16 	bl	8007640 <FLASH_WaitForLastOperation>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
 8007818:	e024      	b.n	8007864 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	f04f 32ff 	mov.w	r2, #4294967295
 8007820:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	60bb      	str	r3, [r7, #8]
 8007828:	e012      	b.n	8007850 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800782a:	68b8      	ldr	r0, [r7, #8]
 800782c:	f000 f836 	bl	800789c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007834:	f7ff ff04 	bl	8007640 <FLASH_WaitForLastOperation>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	601a      	str	r2, [r3, #0]
          break;
 8007848:	e00a      	b.n	8007860 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	3301      	adds	r3, #1
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4413      	add	r3, r2
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d3e4      	bcc.n	800782a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8007860:	f000 f878 	bl	8007954 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007864:	f000 f832 	bl	80078cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007868:	4b03      	ldr	r3, [pc, #12]	; (8007878 <HAL_FLASHEx_Erase+0xac>)
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]

  return status;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	200005bc 	.word	0x200005bc

0800787c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <FLASH_MassErase+0x1c>)
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	4a04      	ldr	r2, [pc, #16]	; (8007898 <FLASH_MassErase+0x1c>)
 8007886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788a:	f043 0304 	orr.w	r3, r3, #4
 800788e:	6153      	str	r3, [r2, #20]
#endif
}
 8007890:	bf00      	nop
 8007892:	46bd      	mov	sp, r7
 8007894:	bc80      	pop	{r7}
 8007896:	4770      	bx	lr
 8007898:	58004000 	.word	0x58004000

0800789c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80078a4:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <FLASH_PageErase+0x2c>)
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <FLASH_PageErase+0x2c>)
 80078b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b8:	f043 0302 	orr.w	r3, r3, #2
 80078bc:	6153      	str	r3, [r2, #20]
#endif
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr
 80078c8:	58004000 	.word	0x58004000

080078cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80078d0:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <FLASH_FlushCaches+0x84>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d117      	bne.n	800790c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80078dc:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <FLASH_FlushCaches+0x84>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <FLASH_FlushCaches+0x84>)
 80078e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80078e8:	4b19      	ldr	r3, [pc, #100]	; (8007950 <FLASH_FlushCaches+0x84>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a18      	ldr	r2, [pc, #96]	; (8007950 <FLASH_FlushCaches+0x84>)
 80078ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	4b16      	ldr	r3, [pc, #88]	; (8007950 <FLASH_FlushCaches+0x84>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a15      	ldr	r2, [pc, #84]	; (8007950 <FLASH_FlushCaches+0x84>)
 80078fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007900:	4b13      	ldr	r3, [pc, #76]	; (8007950 <FLASH_FlushCaches+0x84>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a12      	ldr	r2, [pc, #72]	; (8007950 <FLASH_FlushCaches+0x84>)
 8007906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800790a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800790c:	4b10      	ldr	r3, [pc, #64]	; (8007950 <FLASH_FlushCaches+0x84>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007914:	2b01      	cmp	r3, #1
 8007916:	d117      	bne.n	8007948 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007918:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <FLASH_FlushCaches+0x84>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a0c      	ldr	r2, [pc, #48]	; (8007950 <FLASH_FlushCaches+0x84>)
 800791e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007922:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <FLASH_FlushCaches+0x84>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a09      	ldr	r2, [pc, #36]	; (8007950 <FLASH_FlushCaches+0x84>)
 800792a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <FLASH_FlushCaches+0x84>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a06      	ldr	r2, [pc, #24]	; (8007950 <FLASH_FlushCaches+0x84>)
 8007936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <FLASH_FlushCaches+0x84>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a03      	ldr	r2, [pc, #12]	; (8007950 <FLASH_FlushCaches+0x84>)
 8007942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007946:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8007948:	bf00      	nop
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	58004000 	.word	0x58004000

08007954 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <FLASH_AcknowledgePageErase+0x1c>)
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <FLASH_AcknowledgePageErase+0x1c>)
 800795e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8007962:	f023 0302 	bic.w	r3, r3, #2
 8007966:	6153      	str	r3, [r2, #20]
#endif
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr
 8007970:	58004000 	.word	0x58004000

08007974 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007982:	e140      	b.n	8007c06 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	2101      	movs	r1, #1
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	fa01 f303 	lsl.w	r3, r1, r3
 8007990:	4013      	ands	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8132 	beq.w	8007c00 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f003 0303 	and.w	r3, r3, #3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d005      	beq.n	80079b4 <HAL_GPIO_Init+0x40>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d130      	bne.n	8007a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	2203      	movs	r2, #3
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	43db      	mvns	r3, r3
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4013      	ands	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079ea:	2201      	movs	r2, #1
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4013      	ands	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	091b      	lsrs	r3, r3, #4
 8007a00:	f003 0201 	and.w	r2, r3, #1
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d017      	beq.n	8007a52 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43db      	mvns	r3, r3
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4013      	ands	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	fa02 f303 	lsl.w	r3, r2, r3
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d123      	bne.n	8007aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	08da      	lsrs	r2, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3208      	adds	r2, #8
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	220f      	movs	r2, #15
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	08da      	lsrs	r2, r3, #3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3208      	adds	r2, #8
 8007aa0:	6939      	ldr	r1, [r7, #16]
 8007aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4013      	ands	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f003 0203 	and.w	r2, r3, #3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 808c 	beq.w	8007c00 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007ae8:	4a4e      	ldr	r2, [pc, #312]	; (8007c24 <HAL_GPIO_Init+0x2b0>)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	3302      	adds	r3, #2
 8007af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	2207      	movs	r2, #7
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b12:	d00d      	beq.n	8007b30 <HAL_GPIO_Init+0x1bc>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a44      	ldr	r2, [pc, #272]	; (8007c28 <HAL_GPIO_Init+0x2b4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d007      	beq.n	8007b2c <HAL_GPIO_Init+0x1b8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a43      	ldr	r2, [pc, #268]	; (8007c2c <HAL_GPIO_Init+0x2b8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d101      	bne.n	8007b28 <HAL_GPIO_Init+0x1b4>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e004      	b.n	8007b32 <HAL_GPIO_Init+0x1be>
 8007b28:	2307      	movs	r3, #7
 8007b2a:	e002      	b.n	8007b32 <HAL_GPIO_Init+0x1be>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e000      	b.n	8007b32 <HAL_GPIO_Init+0x1be>
 8007b30:	2300      	movs	r3, #0
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	f002 0203 	and.w	r2, r2, #3
 8007b38:	0092      	lsls	r2, r2, #2
 8007b3a:	4093      	lsls	r3, r2
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007b42:	4938      	ldr	r1, [pc, #224]	; (8007c24 <HAL_GPIO_Init+0x2b0>)
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	089b      	lsrs	r3, r3, #2
 8007b48:	3302      	adds	r3, #2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b50:	4b37      	ldr	r3, [pc, #220]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b74:	4a2e      	ldr	r2, [pc, #184]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b7a:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	43db      	mvns	r3, r3
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4013      	ands	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b9e:	4a24      	ldr	r2, [pc, #144]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007baa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8007bca:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8007bd2:	4b17      	ldr	r3, [pc, #92]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4013      	ands	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8007bf8:	4a0d      	ldr	r2, [pc, #52]	; (8007c30 <HAL_GPIO_Init+0x2bc>)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	3301      	adds	r3, #1
 8007c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f47f aeb7 	bne.w	8007984 <HAL_GPIO_Init+0x10>
  }
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40010000 	.word	0x40010000
 8007c28:	48000400 	.word	0x48000400
 8007c2c:	48000800 	.word	0x48000800
 8007c30:	58000800 	.word	0x58000800

08007c34 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007c42:	e0af      	b.n	8007da4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007c44:	2201      	movs	r2, #1
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80a2 	beq.w	8007d9e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007c5a:	4a59      	ldr	r2, [pc, #356]	; (8007dc0 <HAL_GPIO_DeInit+0x18c>)
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	089b      	lsrs	r3, r3, #2
 8007c60:	3302      	adds	r3, #2
 8007c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c66:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	2207      	movs	r2, #7
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007c82:	d00d      	beq.n	8007ca0 <HAL_GPIO_DeInit+0x6c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a4f      	ldr	r2, [pc, #316]	; (8007dc4 <HAL_GPIO_DeInit+0x190>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d007      	beq.n	8007c9c <HAL_GPIO_DeInit+0x68>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a4e      	ldr	r2, [pc, #312]	; (8007dc8 <HAL_GPIO_DeInit+0x194>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d101      	bne.n	8007c98 <HAL_GPIO_DeInit+0x64>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e004      	b.n	8007ca2 <HAL_GPIO_DeInit+0x6e>
 8007c98:	2307      	movs	r3, #7
 8007c9a:	e002      	b.n	8007ca2 <HAL_GPIO_DeInit+0x6e>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <HAL_GPIO_DeInit+0x6e>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	f002 0203 	and.w	r2, r2, #3
 8007ca8:	0092      	lsls	r2, r2, #2
 8007caa:	4093      	lsls	r3, r2
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d136      	bne.n	8007d20 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8007cb2:	4b46      	ldr	r3, [pc, #280]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007cb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	4943      	ldr	r1, [pc, #268]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007cc4:	4b41      	ldr	r3, [pc, #260]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007cc6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	493f      	ldr	r1, [pc, #252]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007cd6:	4b3d      	ldr	r3, [pc, #244]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	493b      	ldr	r1, [pc, #236]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007ce4:	4b39      	ldr	r3, [pc, #228]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	43db      	mvns	r3, r3
 8007cec:	4937      	ldr	r1, [pc, #220]	; (8007dcc <HAL_GPIO_DeInit+0x198>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	2207      	movs	r2, #7
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007d02:	4a2f      	ldr	r2, [pc, #188]	; (8007dc0 <HAL_GPIO_DeInit+0x18c>)
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	089b      	lsrs	r3, r3, #2
 8007d08:	3302      	adds	r3, #2
 8007d0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	43da      	mvns	r2, r3
 8007d12:	482b      	ldr	r0, [pc, #172]	; (8007dc0 <HAL_GPIO_DeInit+0x18c>)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	089b      	lsrs	r3, r3, #2
 8007d18:	400a      	ands	r2, r1
 8007d1a:	3302      	adds	r3, #2
 8007d1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	2103      	movs	r1, #3
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	08da      	lsrs	r2, r3, #3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3208      	adds	r2, #8
 8007d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	220f      	movs	r2, #15
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	08d2      	lsrs	r2, r2, #3
 8007d54:	4019      	ands	r1, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3208      	adds	r2, #8
 8007d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	2103      	movs	r1, #3
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	401a      	ands	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	2101      	movs	r1, #1
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d80:	43db      	mvns	r3, r3
 8007d82:	401a      	ands	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	2103      	movs	r1, #3
 8007d92:	fa01 f303 	lsl.w	r3, r1, r3
 8007d96:	43db      	mvns	r3, r3
 8007d98:	401a      	ands	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3301      	adds	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f47f af49 	bne.w	8007c44 <HAL_GPIO_DeInit+0x10>
  }
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	40010000 	.word	0x40010000
 8007dc4:	48000400 	.word	0x48000400
 8007dc8:	48000800 	.word	0x48000800
 8007dcc:	58000800 	.word	0x58000800

08007dd0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	887b      	ldrh	r3, [r7, #2]
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
 8007dec:	e001      	b.n	8007df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr

08007dfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	807b      	strh	r3, [r7, #2]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e0e:	787b      	ldrb	r3, [r7, #1]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e1a:	e002      	b.n	8007e22 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e1c:	887a      	ldrh	r2, [r7, #2]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e081      	b.n	8007f42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7f9 ffc0 	bl	8001dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2224      	movs	r2, #36	; 0x24
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d107      	bne.n	8007ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	e006      	b.n	8007eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d104      	bne.n	8007ec6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ee8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691a      	ldr	r2, [r3, #16]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	69d9      	ldr	r1, [r3, #28]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0201 	orr.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	817b      	strh	r3, [r7, #10]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	813b      	strh	r3, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	f040 80f9 	bne.w	8008166 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <HAL_I2C_Mem_Write+0x34>
 8007f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0ed      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_I2C_Mem_Write+0x4e>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e0e6      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fa2:	f7fa fc69 	bl	8002878 <HAL_GetTick>
 8007fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	2319      	movs	r3, #25
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fac2 	bl	800853e <I2C_WaitOnFlagUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e0d1      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2221      	movs	r2, #33	; 0x21
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2240      	movs	r2, #64	; 0x40
 8007fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a3a      	ldr	r2, [r7, #32]
 8007fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fec:	88f8      	ldrh	r0, [r7, #6]
 8007fee:	893a      	ldrh	r2, [r7, #8]
 8007ff0:	8979      	ldrh	r1, [r7, #10]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f9d3 	bl	80083a8 <I2C_RequestMemoryWrite>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0a9      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008018:	b29b      	uxth	r3, r3
 800801a:	2bff      	cmp	r3, #255	; 0xff
 800801c:	d90e      	bls.n	800803c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	22ff      	movs	r2, #255	; 0xff
 8008022:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008028:	b2da      	uxtb	r2, r3
 800802a:	8979      	ldrh	r1, [r7, #10]
 800802c:	2300      	movs	r3, #0
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fc1f 	bl	8008878 <I2C_TransferConfig>
 800803a:	e00f      	b.n	800805c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800804a:	b2da      	uxtb	r2, r3
 800804c:	8979      	ldrh	r1, [r7, #10]
 800804e:	2300      	movs	r3, #0
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fc0e 	bl	8008878 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 faac 	bl	80085be <I2C_WaitOnTXISFlagUntilTimeout>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e07b      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008098:	3b01      	subs	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d034      	beq.n	8008114 <HAL_I2C_Mem_Write+0x1c8>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d130      	bne.n	8008114 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2200      	movs	r2, #0
 80080ba:	2180      	movs	r1, #128	; 0x80
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fa3e 	bl	800853e <I2C_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e04d      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2bff      	cmp	r3, #255	; 0xff
 80080d4:	d90e      	bls.n	80080f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	8979      	ldrh	r1, [r7, #10]
 80080e4:	2300      	movs	r3, #0
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fbc3 	bl	8008878 <I2C_TransferConfig>
 80080f2:	e00f      	b.n	8008114 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008102:	b2da      	uxtb	r2, r3
 8008104:	8979      	ldrh	r1, [r7, #10]
 8008106:	2300      	movs	r3, #0
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fbb2 	bl	8008878 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d19e      	bne.n	800805c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fa8b 	bl	800863e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e01a      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2220      	movs	r2, #32
 8008138:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6859      	ldr	r1, [r3, #4]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <HAL_I2C_Mem_Write+0x224>)
 8008146:	400b      	ands	r3, r1
 8008148:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	e000      	b.n	8008168 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008166:	2302      	movs	r3, #2
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	fe00e800 	.word	0xfe00e800

08008174 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af02      	add	r7, sp, #8
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	4608      	mov	r0, r1
 800817e:	4611      	mov	r1, r2
 8008180:	461a      	mov	r2, r3
 8008182:	4603      	mov	r3, r0
 8008184:	817b      	strh	r3, [r7, #10]
 8008186:	460b      	mov	r3, r1
 8008188:	813b      	strh	r3, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b20      	cmp	r3, #32
 8008198:	f040 80fd 	bne.w	8008396 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <HAL_I2C_Mem_Read+0x34>
 80081a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d105      	bne.n	80081b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0f1      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d101      	bne.n	80081c2 <HAL_I2C_Mem_Read+0x4e>
 80081be:	2302      	movs	r3, #2
 80081c0:	e0ea      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081ca:	f7fa fb55 	bl	8002878 <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	2319      	movs	r3, #25
 80081d6:	2201      	movs	r2, #1
 80081d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f9ae 	bl	800853e <I2C_WaitOnFlagUntilTimeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e0d5      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2222      	movs	r2, #34	; 0x22
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2240      	movs	r2, #64	; 0x40
 80081f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a3a      	ldr	r2, [r7, #32]
 8008206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800820c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008214:	88f8      	ldrh	r0, [r7, #6]
 8008216:	893a      	ldrh	r2, [r7, #8]
 8008218:	8979      	ldrh	r1, [r7, #10]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	4603      	mov	r3, r0
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f913 	bl	8008450 <I2C_RequestMemoryRead>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e0ad      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008240:	b29b      	uxth	r3, r3
 8008242:	2bff      	cmp	r3, #255	; 0xff
 8008244:	d90e      	bls.n	8008264 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	22ff      	movs	r2, #255	; 0xff
 800824a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008250:	b2da      	uxtb	r2, r3
 8008252:	8979      	ldrh	r1, [r7, #10]
 8008254:	4b52      	ldr	r3, [pc, #328]	; (80083a0 <HAL_I2C_Mem_Read+0x22c>)
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 fb0b 	bl	8008878 <I2C_TransferConfig>
 8008262:	e00f      	b.n	8008284 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008272:	b2da      	uxtb	r2, r3
 8008274:	8979      	ldrh	r1, [r7, #10]
 8008276:	4b4a      	ldr	r3, [pc, #296]	; (80083a0 <HAL_I2C_Mem_Read+0x22c>)
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fafa 	bl	8008878 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	2200      	movs	r2, #0
 800828c:	2104      	movs	r1, #4
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 f955 	bl	800853e <I2C_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e07c      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d034      	beq.n	8008344 <HAL_I2C_Mem_Read+0x1d0>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d130      	bne.n	8008344 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	2200      	movs	r2, #0
 80082ea:	2180      	movs	r1, #128	; 0x80
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f926 	bl	800853e <I2C_WaitOnFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e04d      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008300:	b29b      	uxth	r3, r3
 8008302:	2bff      	cmp	r3, #255	; 0xff
 8008304:	d90e      	bls.n	8008324 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	22ff      	movs	r2, #255	; 0xff
 800830a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008310:	b2da      	uxtb	r2, r3
 8008312:	8979      	ldrh	r1, [r7, #10]
 8008314:	2300      	movs	r3, #0
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 faab 	bl	8008878 <I2C_TransferConfig>
 8008322:	e00f      	b.n	8008344 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008332:	b2da      	uxtb	r2, r3
 8008334:	8979      	ldrh	r1, [r7, #10]
 8008336:	2300      	movs	r3, #0
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 fa9a 	bl	8008878 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d19a      	bne.n	8008284 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 f973 	bl	800863e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e01a      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2220      	movs	r2, #32
 8008368:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6859      	ldr	r1, [r3, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <HAL_I2C_Mem_Read+0x230>)
 8008376:	400b      	ands	r3, r1
 8008378:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2220      	movs	r2, #32
 800837e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	e000      	b.n	8008398 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008396:	2302      	movs	r3, #2
  }
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	80002400 	.word	0x80002400
 80083a4:	fe00e800 	.word	0xfe00e800

080083a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	4608      	mov	r0, r1
 80083b2:	4611      	mov	r1, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	817b      	strh	r3, [r7, #10]
 80083ba:	460b      	mov	r3, r1
 80083bc:	813b      	strh	r3, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	8979      	ldrh	r1, [r7, #10]
 80083c8:	4b20      	ldr	r3, [pc, #128]	; (800844c <I2C_RequestMemoryWrite+0xa4>)
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 fa51 	bl	8008878 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083d6:	69fa      	ldr	r2, [r7, #28]
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f8ef 	bl	80085be <I2C_WaitOnTXISFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e02c      	b.n	8008444 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d105      	bne.n	80083fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083f0:	893b      	ldrh	r3, [r7, #8]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28
 80083fa:	e015      	b.n	8008428 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083fc:	893b      	ldrh	r3, [r7, #8]
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	b29b      	uxth	r3, r3
 8008402:	b2da      	uxtb	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	69b9      	ldr	r1, [r7, #24]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 f8d5 	bl	80085be <I2C_WaitOnTXISFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e012      	b.n	8008444 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800841e:	893b      	ldrh	r3, [r7, #8]
 8008420:	b2da      	uxtb	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2200      	movs	r2, #0
 8008430:	2180      	movs	r1, #128	; 0x80
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f883 	bl	800853e <I2C_WaitOnFlagUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	80002000 	.word	0x80002000

08008450 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af02      	add	r7, sp, #8
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	461a      	mov	r2, r3
 800845e:	4603      	mov	r3, r0
 8008460:	817b      	strh	r3, [r7, #10]
 8008462:	460b      	mov	r3, r1
 8008464:	813b      	strh	r3, [r7, #8]
 8008466:	4613      	mov	r3, r2
 8008468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	b2da      	uxtb	r2, r3
 800846e:	8979      	ldrh	r1, [r7, #10]
 8008470:	4b20      	ldr	r3, [pc, #128]	; (80084f4 <I2C_RequestMemoryRead+0xa4>)
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f9fe 	bl	8008878 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	69b9      	ldr	r1, [r7, #24]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f89c 	bl	80085be <I2C_WaitOnTXISFlagUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e02c      	b.n	80084ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d105      	bne.n	80084a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008496:	893b      	ldrh	r3, [r7, #8]
 8008498:	b2da      	uxtb	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	629a      	str	r2, [r3, #40]	; 0x28
 80084a0:	e015      	b.n	80084ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084a2:	893b      	ldrh	r3, [r7, #8]
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	69b9      	ldr	r1, [r7, #24]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f882 	bl	80085be <I2C_WaitOnTXISFlagUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e012      	b.n	80084ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084c4:	893b      	ldrh	r3, [r7, #8]
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2200      	movs	r2, #0
 80084d6:	2140      	movs	r1, #64	; 0x40
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f830 	bl	800853e <I2C_WaitOnFlagUntilTimeout>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	80002000 	.word	0x80002000

080084f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b02      	cmp	r3, #2
 800850c:	d103      	bne.n	8008516 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2200      	movs	r2, #0
 8008514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b01      	cmp	r3, #1
 8008522:	d007      	beq.n	8008534 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0201 	orr.w	r2, r2, #1
 8008532:	619a      	str	r2, [r3, #24]
  }
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	603b      	str	r3, [r7, #0]
 800854a:	4613      	mov	r3, r2
 800854c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800854e:	e022      	b.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d01e      	beq.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008558:	f7fa f98e 	bl	8002878 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d302      	bcc.n	800856e <I2C_WaitOnFlagUntilTimeout+0x30>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d113      	bne.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008572:	f043 0220 	orr.w	r2, r3, #32
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2220      	movs	r2, #32
 800857e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e00f      	b.n	80085b6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	699a      	ldr	r2, [r3, #24]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4013      	ands	r3, r2
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	bf0c      	ite	eq
 80085a6:	2301      	moveq	r3, #1
 80085a8:	2300      	movne	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d0cd      	beq.n	8008550 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085ca:	e02c      	b.n	8008626 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f871 	bl	80086b8 <I2C_IsErrorOccurred>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e02a      	b.n	8008636 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d01e      	beq.n	8008626 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e8:	f7fa f946 	bl	8002878 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d113      	bne.n	8008626 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008602:	f043 0220 	orr.w	r2, r3, #32
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2220      	movs	r2, #32
 800860e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e007      	b.n	8008636 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b02      	cmp	r3, #2
 8008632:	d1cb      	bne.n	80085cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800864a:	e028      	b.n	800869e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f831 	bl	80086b8 <I2C_IsErrorOccurred>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e026      	b.n	80086ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008660:	f7fa f90a 	bl	8002878 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	429a      	cmp	r2, r3
 800866e:	d302      	bcc.n	8008676 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d113      	bne.n	800869e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867a:	f043 0220 	orr.w	r2, r3, #32
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2220      	movs	r2, #32
 8008686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e007      	b.n	80086ae <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d1cf      	bne.n	800864c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d068      	beq.n	80087b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2210      	movs	r2, #16
 80086ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086ec:	e049      	b.n	8008782 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f4:	d045      	beq.n	8008782 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80086f6:	f7fa f8bf 	bl	8002878 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	429a      	cmp	r2, r3
 8008704:	d302      	bcc.n	800870c <I2C_IsErrorOccurred+0x54>
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d13a      	bne.n	8008782 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800871e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800872a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872e:	d121      	bne.n	8008774 <I2C_IsErrorOccurred+0xbc>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008736:	d01d      	beq.n	8008774 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008738:	7cfb      	ldrb	r3, [r7, #19]
 800873a:	2b20      	cmp	r3, #32
 800873c:	d01a      	beq.n	8008774 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800874c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800874e:	f7fa f893 	bl	8002878 <HAL_GetTick>
 8008752:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008754:	e00e      	b.n	8008774 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008756:	f7fa f88f 	bl	8002878 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b19      	cmp	r3, #25
 8008762:	d907      	bls.n	8008774 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	f043 0320 	orr.w	r3, r3, #32
 800876a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008772:	e006      	b.n	8008782 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b20      	cmp	r3, #32
 8008780:	d1e9      	bne.n	8008756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b20      	cmp	r3, #32
 800878e:	d003      	beq.n	8008798 <I2C_IsErrorOccurred+0xe0>
 8008790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0aa      	beq.n	80086ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2220      	movs	r2, #32
 80087a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	f043 0304 	orr.w	r3, r3, #4
 80087ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00b      	beq.n	8008802 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	f043 0308 	orr.w	r3, r3, #8
 80087f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	f043 0302 	orr.w	r3, r3, #2
 8008812:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800881c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01c      	beq.n	8008866 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7ff fe63 	bl	80084f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6859      	ldr	r1, [r3, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <I2C_IsErrorOccurred+0x1bc>)
 800883e:	400b      	ands	r3, r1
 8008840:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	431a      	orrs	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2220      	movs	r2, #32
 8008852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800886a:	4618      	mov	r0, r3
 800886c:	3728      	adds	r7, #40	; 0x28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	fe00e800 	.word	0xfe00e800

08008878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	817b      	strh	r3, [r7, #10]
 8008886:	4613      	mov	r3, r2
 8008888:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800888a:	897b      	ldrh	r3, [r7, #10]
 800888c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008890:	7a7b      	ldrb	r3, [r7, #9]
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008898:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	0d5b      	lsrs	r3, r3, #21
 80088b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80088b6:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <I2C_TransferConfig+0x5c>)
 80088b8:	430b      	orrs	r3, r1
 80088ba:	43db      	mvns	r3, r3
 80088bc:	ea02 0103 	and.w	r1, r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bc80      	pop	{r7}
 80088d2:	4770      	bx	lr
 80088d4:	03ff63ff 	.word	0x03ff63ff

080088d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	d138      	bne.n	8008960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e032      	b.n	8008962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2224      	movs	r2, #36	; 0x24
 8008908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0201 	bic.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800892a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	e000      	b.n	8008962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008960:	2302      	movs	r3, #2
  }
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr

0800896c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b20      	cmp	r3, #32
 8008980:	d139      	bne.n	80089f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800898c:	2302      	movs	r3, #2
 800898e:	e033      	b.n	80089f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2224      	movs	r2, #36	; 0x24
 800899c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0201 	bic.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	021b      	lsls	r3, r3, #8
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f042 0201 	orr.w	r2, r2, #1
 80089e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e000      	b.n	80089f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089f6:	2302      	movs	r3, #2
  }
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a04:	b480      	push	{r7}
 8008a06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a08:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <HAL_PWR_EnableBkUpAccess+0x18>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a03      	ldr	r2, [pc, #12]	; (8008a1c <HAL_PWR_EnableBkUpAccess+0x18>)
 8008a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a12:	6013      	str	r3, [r2, #0]
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	58000400 	.word	0x58000400

08008a20 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10c      	bne.n	8008a4c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a3e:	d10d      	bne.n	8008a5c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008a40:	f000 f83c 	bl	8008abc <HAL_PWREx_DisableLowPowerRunMode>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d008      	beq.n	8008a5c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8008a4a:	e015      	b.n	8008a78 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008a58:	f000 f822 	bl	8008aa0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	4a08      	ldr	r2, [pc, #32]	; (8008a84 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008a62:	f023 0304 	bic.w	r3, r3, #4
 8008a66:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d101      	bne.n	8008a72 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008a6e:	bf30      	wfi
 8008a70:	e002      	b.n	8008a78 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008a72:	bf40      	sev
    __WFE();
 8008a74:	bf20      	wfe
    __WFE();
 8008a76:	bf20      	wfe
  }
}
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	58000400 	.word	0x58000400
 8008a84:	e000ed00 	.word	0xe000ed00

08008a88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008a8c:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <HAL_PWREx_GetVoltageRange+0x14>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr
 8008a9c:	58000400 	.word	0x58000400

08008aa0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a03      	ldr	r2, [pc, #12]	; (8008ab8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8008aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aae:	6013      	str	r3, [r2, #0]
}
 8008ab0:	bf00      	nop
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr
 8008ab8:	58000400 	.word	0x58000400

08008abc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8008ac2:	4b16      	ldr	r3, [pc, #88]	; (8008b1c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008acc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8008ace:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2232      	movs	r2, #50	; 0x32
 8008ad4:	fb02 f303 	mul.w	r3, r2, r3
 8008ad8:	4a12      	ldr	r2, [pc, #72]	; (8008b24 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8008ada:	fba2 2303 	umull	r2, r3, r2, r3
 8008ade:	0c9b      	lsrs	r3, r3, #18
 8008ae0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008ae2:	e002      	b.n	8008aea <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af6:	d102      	bne.n	8008afe <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f2      	bne.n	8008ae4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8008afe:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b0a:	d101      	bne.n	8008b10 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e000      	b.n	8008b12 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr
 8008b1c:	58000400 	.word	0x58000400
 8008b20:	20000000 	.word	0x20000000
 8008b24:	431bde83 	.word	0x431bde83

08008b28 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8008b32:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	4a0e      	ldr	r2, [pc, #56]	; (8008b74 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008b3c:	f043 0302 	orr.w	r3, r3, #2
 8008b40:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008b42:	4b0d      	ldr	r3, [pc, #52]	; (8008b78 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008b48:	f043 0304 	orr.w	r3, r3, #4
 8008b4c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008b54:	bf30      	wfi
 8008b56:	e002      	b.n	8008b5e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008b58:	bf40      	sev
    __WFE();
 8008b5a:	bf20      	wfe
    __WFE();
 8008b5c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	4a05      	ldr	r2, [pc, #20]	; (8008b78 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008b64:	f023 0304 	bic.w	r3, r3, #4
 8008b68:	6113      	str	r3, [r2, #16]
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr
 8008b74:	58000400 	.word	0x58000400
 8008b78:	e000ed00 	.word	0xe000ed00

08008b7c <LL_PWR_IsEnabledBkUpAccess>:
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008b80:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8c:	d101      	bne.n	8008b92 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr
 8008b9c:	58000400 	.word	0x58000400

08008ba0 <LL_RCC_HSE_EnableTcxo>:
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bb2:	6013      	str	r3, [r2, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <LL_RCC_HSE_DisableTcxo>:
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bce:	6013      	str	r3, [r2, #0]
}
 8008bd0:	bf00      	nop
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bea:	d101      	bne.n	8008bf0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bc80      	pop	{r7}
 8008bf8:	4770      	bx	lr

08008bfa <LL_RCC_HSE_Enable>:
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c0c:	6013      	str	r3, [r2, #0]
}
 8008c0e:	bf00      	nop
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr

08008c16 <LL_RCC_HSE_Disable>:
{
 8008c16:	b480      	push	{r7}
 8008c18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c28:	6013      	str	r3, [r2, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr

08008c32 <LL_RCC_HSE_IsReady>:
{
 8008c32:	b480      	push	{r7}
 8008c34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c44:	d101      	bne.n	8008c4a <LL_RCC_HSE_IsReady+0x18>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <LL_RCC_HSE_IsReady+0x1a>
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <LL_RCC_HSI_Enable>:
{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c66:	6013      	str	r3, [r2, #0]
}
 8008c68:	bf00      	nop
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bc80      	pop	{r7}
 8008c6e:	4770      	bx	lr

08008c70 <LL_RCC_HSI_Disable>:
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr

08008c8c <LL_RCC_HSI_IsReady>:
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c9e:	d101      	bne.n	8008ca4 <LL_RCC_HSI_IsReady+0x18>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e000      	b.n	8008ca6 <LL_RCC_HSI_IsReady+0x1a>
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr

08008cae <LL_RCC_HSI_SetCalibTrimming>:
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	061b      	lsls	r3, r3, #24
 8008cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	604b      	str	r3, [r1, #4]
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr

08008cd6 <LL_RCC_LSE_IsReady>:
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d101      	bne.n	8008cee <LL_RCC_LSE_IsReady+0x18>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <LL_RCC_LSE_IsReady+0x1a>
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr

08008cf8 <LL_RCC_LSI_Enable>:
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8008cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d08:	f043 0301 	orr.w	r3, r3, #1
 8008d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008d10:	bf00      	nop
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr

08008d18 <LL_RCC_LSI_Disable>:
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008d30:	bf00      	nop
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc80      	pop	{r7}
 8008d36:	4770      	bx	lr

08008d38 <LL_RCC_LSI_IsReady>:
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d101      	bne.n	8008d50 <LL_RCC_LSI_IsReady+0x18>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <LL_RCC_LSI_IsReady+0x1a>
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr

08008d5a <LL_RCC_MSI_Enable>:
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d68:	f043 0301 	orr.w	r3, r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
}
 8008d6e:	bf00      	nop
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bc80      	pop	{r7}
 8008d74:	4770      	bx	lr

08008d76 <LL_RCC_MSI_Disable>:
{
 8008d76:	b480      	push	{r7}
 8008d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	6013      	str	r3, [r2, #0]
}
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <LL_RCC_MSI_IsReady>:
{
 8008d92:	b480      	push	{r7}
 8008d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d101      	bne.n	8008da8 <LL_RCC_MSI_IsReady+0x16>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <LL_RCC_MSI_IsReady+0x18>
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8008db2:	b480      	push	{r7}
 8008db4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0308 	and.w	r3, r3, #8
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d101      	bne.n	8008dc8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr

08008dd2 <LL_RCC_MSI_GetRange>:
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bc80      	pop	{r7}
 8008de6:	4770      	bx	lr

08008de8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008df4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bc80      	pop	{r7}
 8008dfe:	4770      	bx	lr

08008e00 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	604b      	str	r3, [r1, #4]
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bc80      	pop	{r7}
 8008e26:	4770      	bx	lr

08008e28 <LL_RCC_SetSysClkSource>:
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f023 0203 	bic.w	r2, r3, #3
 8008e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	608b      	str	r3, [r1, #8]
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr

08008e4e <LL_RCC_GetSysClkSource>:
{
 8008e4e:	b480      	push	{r7}
 8008e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 030c 	and.w	r3, r3, #12
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bc80      	pop	{r7}
 8008e62:	4770      	bx	lr

08008e64 <LL_RCC_SetAHBPrescaler>:
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	608b      	str	r3, [r1, #8]
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc80      	pop	{r7}
 8008e88:	4770      	bx	lr

08008e8a <LL_RCC_SetAHB3Prescaler>:
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008e9a:	f023 020f 	bic.w	r2, r3, #15
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	091b      	lsrs	r3, r3, #4
 8008ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <LL_RCC_SetAPB1Prescaler>:
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	608b      	str	r3, [r1, #8]
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr

08008edc <LL_RCC_SetAPB2Prescaler>:
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	608b      	str	r3, [r1, #8]
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr

08008f02 <LL_RCC_GetAHBPrescaler>:
{
 8008f02:	b480      	push	{r7}
 8008f04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bc80      	pop	{r7}
 8008f16:	4770      	bx	lr

08008f18 <LL_RCC_GetAHB3Prescaler>:
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bc80      	pop	{r7}
 8008f30:	4770      	bx	lr

08008f32 <LL_RCC_GetAPB1Prescaler>:
{
 8008f32:	b480      	push	{r7}
 8008f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bc80      	pop	{r7}
 8008f46:	4770      	bx	lr

08008f48 <LL_RCC_GetAPB2Prescaler>:
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr

08008f5e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f70:	6013      	str	r3, [r2, #0]
}
 8008f72:	bf00      	nop
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bc80      	pop	{r7}
 8008f78:	4770      	bx	lr

08008f7a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f8c:	6013      	str	r3, [r2, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008f96:	b480      	push	{r7}
 8008f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fa8:	d101      	bne.n	8008fae <LL_RCC_PLL_IsReady+0x18>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <LL_RCC_PLL_IsReady+0x1a>
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr

08008fb8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	0a1b      	lsrs	r3, r3, #8
 8008fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr

08008fd0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr

08008fe6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f003 0303 	and.w	r3, r3, #3
}
 800900a:	4618      	mov	r0, r3
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr

08009012 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8009012:	b480      	push	{r7}
 8009014:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009024:	d101      	bne.n	800902a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	bc80      	pop	{r7}
 8009032:	4770      	bx	lr

08009034 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800903c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009048:	d101      	bne.n	800904e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	46bd      	mov	sp, r7
 8009054:	bc80      	pop	{r7}
 8009056:	4770      	bx	lr

08009058 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800905c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800906a:	d101      	bne.n	8009070 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800906c:	2301      	movs	r3, #1
 800906e:	e000      	b.n	8009072 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	46bd      	mov	sp, r7
 8009076:	bc80      	pop	{r7}
 8009078:	4770      	bx	lr

0800907a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800907a:	b480      	push	{r7}
 800907c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800907e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009088:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800908c:	d101      	bne.n	8009092 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e36f      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090ae:	f7ff fece 	bl	8008e4e <LL_RCC_GetSysClkSource>
 80090b2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090b4:	f7ff ffa2 	bl	8008ffc <LL_RCC_PLL_GetMainSource>
 80090b8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 80c4 	beq.w	8009250 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <HAL_RCC_OscConfig+0x3e>
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	2b0c      	cmp	r3, #12
 80090d2:	d176      	bne.n	80091c2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d173      	bne.n	80091c2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e353      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0308 	and.w	r3, r3, #8
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <HAL_RCC_OscConfig+0x68>
 80090f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009102:	e006      	b.n	8009112 <HAL_RCC_OscConfig+0x76>
 8009104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800910c:	091b      	lsrs	r3, r3, #4
 800910e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009112:	4293      	cmp	r3, r2
 8009114:	d222      	bcs.n	800915c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fd3c 	bl	8009b98 <RCC_SetFlashLatencyFromMSIRange>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e331      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800912a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009134:	f043 0308 	orr.w	r3, r3, #8
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800914c:	4313      	orrs	r3, r2
 800914e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fe53 	bl	8008e00 <LL_RCC_MSI_SetCalibTrimming>
 800915a:	e021      	b.n	80091a0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800915c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009166:	f043 0308 	orr.w	r3, r3, #8
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800917e:	4313      	orrs	r3, r2
 8009180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fe3a 	bl	8008e00 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fd01 	bl	8009b98 <RCC_SetFlashLatencyFromMSIRange>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e2f6      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80091a0:	f000 fcc2 	bl	8009b28 <HAL_RCC_GetHCLKFreq>
 80091a4:	4603      	mov	r3, r0
 80091a6:	4aa7      	ldr	r2, [pc, #668]	; (8009444 <HAL_RCC_OscConfig+0x3a8>)
 80091a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80091aa:	4ba7      	ldr	r3, [pc, #668]	; (8009448 <HAL_RCC_OscConfig+0x3ac>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f9 fb58 	bl	8002864 <HAL_InitTick>
 80091b4:	4603      	mov	r3, r0
 80091b6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80091b8:	7cfb      	ldrb	r3, [r7, #19]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d047      	beq.n	800924e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80091be:	7cfb      	ldrb	r3, [r7, #19]
 80091c0:	e2e5      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d02c      	beq.n	8009224 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80091ca:	f7ff fdc6 	bl	8008d5a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80091ce:	f7f9 fb53 	bl	8002878 <HAL_GetTick>
 80091d2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80091d4:	e008      	b.n	80091e8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80091d6:	f7f9 fb4f 	bl	8002878 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d901      	bls.n	80091e8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e2d2      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80091e8:	f7ff fdd3 	bl	8008d92 <LL_RCC_MSI_IsReady>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0f1      	beq.n	80091d6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80091f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091fc:	f043 0308 	orr.w	r3, r3, #8
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009214:	4313      	orrs	r3, r2
 8009216:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff fdef 	bl	8008e00 <LL_RCC_MSI_SetCalibTrimming>
 8009222:	e015      	b.n	8009250 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009224:	f7ff fda7 	bl	8008d76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009228:	f7f9 fb26 	bl	8002878 <HAL_GetTick>
 800922c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009230:	f7f9 fb22 	bl	8002878 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e2a5      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009242:	f7ff fda6 	bl	8008d92 <LL_RCC_MSI_IsReady>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1f1      	bne.n	8009230 <HAL_RCC_OscConfig+0x194>
 800924c:	e000      	b.n	8009250 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800924e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d058      	beq.n	800930e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b08      	cmp	r3, #8
 8009260:	d005      	beq.n	800926e <HAL_RCC_OscConfig+0x1d2>
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	2b0c      	cmp	r3, #12
 8009266:	d108      	bne.n	800927a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b03      	cmp	r3, #3
 800926c:	d105      	bne.n	800927a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d14b      	bne.n	800930e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e289      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800927a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800928c:	4313      	orrs	r3, r2
 800928e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009298:	d102      	bne.n	80092a0 <HAL_RCC_OscConfig+0x204>
 800929a:	f7ff fcae 	bl	8008bfa <LL_RCC_HSE_Enable>
 800929e:	e00d      	b.n	80092bc <HAL_RCC_OscConfig+0x220>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80092a8:	d104      	bne.n	80092b4 <HAL_RCC_OscConfig+0x218>
 80092aa:	f7ff fc79 	bl	8008ba0 <LL_RCC_HSE_EnableTcxo>
 80092ae:	f7ff fca4 	bl	8008bfa <LL_RCC_HSE_Enable>
 80092b2:	e003      	b.n	80092bc <HAL_RCC_OscConfig+0x220>
 80092b4:	f7ff fcaf 	bl	8008c16 <LL_RCC_HSE_Disable>
 80092b8:	f7ff fc80 	bl	8008bbc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d012      	beq.n	80092ea <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092c4:	f7f9 fad8 	bl	8002878 <HAL_GetTick>
 80092c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092cc:	f7f9 fad4 	bl	8002878 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b64      	cmp	r3, #100	; 0x64
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e257      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80092de:	f7ff fca8 	bl	8008c32 <LL_RCC_HSE_IsReady>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f1      	beq.n	80092cc <HAL_RCC_OscConfig+0x230>
 80092e8:	e011      	b.n	800930e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ea:	f7f9 fac5 	bl	8002878 <HAL_GetTick>
 80092ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80092f0:	e008      	b.n	8009304 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092f2:	f7f9 fac1 	bl	8002878 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	2b64      	cmp	r3, #100	; 0x64
 80092fe:	d901      	bls.n	8009304 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e244      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009304:	f7ff fc95 	bl	8008c32 <LL_RCC_HSE_IsReady>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1f1      	bne.n	80092f2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d046      	beq.n	80093a8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	2b04      	cmp	r3, #4
 800931e:	d005      	beq.n	800932c <HAL_RCC_OscConfig+0x290>
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	2b0c      	cmp	r3, #12
 8009324:	d10e      	bne.n	8009344 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d10b      	bne.n	8009344 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e22a      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fcb6 	bl	8008cae <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009342:	e031      	b.n	80093a8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d019      	beq.n	8009380 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800934c:	f7ff fc82 	bl	8008c54 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009350:	f7f9 fa92 	bl	8002878 <HAL_GetTick>
 8009354:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009358:	f7f9 fa8e 	bl	8002878 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b02      	cmp	r3, #2
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e211      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800936a:	f7ff fc8f 	bl	8008c8c <LL_RCC_HSI_IsReady>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0f1      	beq.n	8009358 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fc98 	bl	8008cae <LL_RCC_HSI_SetCalibTrimming>
 800937e:	e013      	b.n	80093a8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009380:	f7ff fc76 	bl	8008c70 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009384:	f7f9 fa78 	bl	8002878 <HAL_GetTick>
 8009388:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800938a:	e008      	b.n	800939e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800938c:	f7f9 fa74 	bl	8002878 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e1f7      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800939e:	f7ff fc75 	bl	8008c8c <LL_RCC_HSI_IsReady>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1f1      	bne.n	800938c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0308 	and.w	r3, r3, #8
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d06e      	beq.n	8009492 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d056      	beq.n	800946a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80093bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093c4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69da      	ldr	r2, [r3, #28]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0310 	and.w	r3, r3, #16
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d031      	beq.n	8009438 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d006      	beq.n	80093ec <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e1d0      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d013      	beq.n	800941e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80093f6:	f7ff fc8f 	bl	8008d18 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093fa:	f7f9 fa3d 	bl	8002878 <HAL_GetTick>
 80093fe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8009400:	e008      	b.n	8009414 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009402:	f7f9 fa39 	bl	8002878 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b11      	cmp	r3, #17
 800940e:	d901      	bls.n	8009414 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e1bc      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8009414:	f7ff fc90 	bl	8008d38 <LL_RCC_LSI_IsReady>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f1      	bne.n	8009402 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800941e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009426:	f023 0210 	bic.w	r2, r3, #16
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009432:	4313      	orrs	r3, r2
 8009434:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009438:	f7ff fc5e 	bl	8008cf8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800943c:	f7f9 fa1c 	bl	8002878 <HAL_GetTick>
 8009440:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8009442:	e00c      	b.n	800945e <HAL_RCC_OscConfig+0x3c2>
 8009444:	20000000 	.word	0x20000000
 8009448:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800944c:	f7f9 fa14 	bl	8002878 <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	2b11      	cmp	r3, #17
 8009458:	d901      	bls.n	800945e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e197      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800945e:	f7ff fc6b 	bl	8008d38 <LL_RCC_LSI_IsReady>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d0f1      	beq.n	800944c <HAL_RCC_OscConfig+0x3b0>
 8009468:	e013      	b.n	8009492 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800946a:	f7ff fc55 	bl	8008d18 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800946e:	f7f9 fa03 	bl	8002878 <HAL_GetTick>
 8009472:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8009474:	e008      	b.n	8009488 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009476:	f7f9 f9ff 	bl	8002878 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	2b11      	cmp	r3, #17
 8009482:	d901      	bls.n	8009488 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e182      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8009488:	f7ff fc56 	bl	8008d38 <LL_RCC_LSI_IsReady>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f1      	bne.n	8009476 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 80d8 	beq.w	8009650 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80094a0:	f7ff fb6c 	bl	8008b7c <LL_PWR_IsEnabledBkUpAccess>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d113      	bne.n	80094d2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80094aa:	f7ff faab 	bl	8008a04 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094ae:	f7f9 f9e3 	bl	8002878 <HAL_GetTick>
 80094b2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80094b4:	e008      	b.n	80094c8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094b6:	f7f9 f9df 	bl	8002878 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d901      	bls.n	80094c8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e162      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80094c8:	f7ff fb58 	bl	8008b7c <LL_PWR_IsEnabledBkUpAccess>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0f1      	beq.n	80094b6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d07b      	beq.n	80095d2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2b85      	cmp	r3, #133	; 0x85
 80094e0:	d003      	beq.n	80094ea <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d109      	bne.n	80094fe <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80094ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094f6:	f043 0304 	orr.w	r3, r3, #4
 80094fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094fe:	f7f9 f9bb 	bl	8002878 <HAL_GetTick>
 8009502:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009518:	e00a      	b.n	8009530 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800951a:	f7f9 f9ad 	bl	8002878 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	f241 3288 	movw	r2, #5000	; 0x1388
 8009528:	4293      	cmp	r3, r2
 800952a:	d901      	bls.n	8009530 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e12e      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009530:	f7ff fbd1 	bl	8008cd6 <LL_RCC_LSE_IsReady>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0ef      	beq.n	800951a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	2b81      	cmp	r3, #129	; 0x81
 8009540:	d003      	beq.n	800954a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	2b85      	cmp	r3, #133	; 0x85
 8009548:	d121      	bne.n	800958e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800954a:	f7f9 f995 	bl	8002878 <HAL_GetTick>
 800954e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800955c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009564:	e00a      	b.n	800957c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009566:	f7f9 f987 	bl	8002878 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	f241 3288 	movw	r2, #5000	; 0x1388
 8009574:	4293      	cmp	r3, r2
 8009576:	d901      	bls.n	800957c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e108      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800957c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0ec      	beq.n	8009566 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800958c:	e060      	b.n	8009650 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800958e:	f7f9 f973 	bl	8002878 <HAL_GetTick>
 8009592:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80095a8:	e00a      	b.n	80095c0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095aa:	f7f9 f965 	bl	8002878 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e0e6      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80095c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1ec      	bne.n	80095aa <HAL_RCC_OscConfig+0x50e>
 80095d0:	e03e      	b.n	8009650 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095d2:	f7f9 f951 	bl	8002878 <HAL_GetTick>
 80095d6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80095d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80095ec:	e00a      	b.n	8009604 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ee:	f7f9 f943 	bl	8002878 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d901      	bls.n	8009604 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e0c4      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1ec      	bne.n	80095ee <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009614:	f7f9 f930 	bl	8002878 <HAL_GetTick>
 8009618:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800961a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800961e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009626:	f023 0301 	bic.w	r3, r3, #1
 800962a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800962e:	e00a      	b.n	8009646 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009630:	f7f9 f922 	bl	8002878 <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	f241 3288 	movw	r2, #5000	; 0x1388
 800963e:	4293      	cmp	r3, r2
 8009640:	d901      	bls.n	8009646 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e0a3      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009646:	f7ff fb46 	bl	8008cd6 <LL_RCC_LSE_IsReady>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1ef      	bne.n	8009630 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 8099 	beq.w	800978c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	2b0c      	cmp	r3, #12
 800965e:	d06c      	beq.n	800973a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	2b02      	cmp	r3, #2
 8009666:	d14b      	bne.n	8009700 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009668:	f7ff fc87 	bl	8008f7a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800966c:	f7f9 f904 	bl	8002878 <HAL_GetTick>
 8009670:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8009672:	e008      	b.n	8009686 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009674:	f7f9 f900 	bl	8002878 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b0a      	cmp	r3, #10
 8009680:	d901      	bls.n	8009686 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e083      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8009686:	f7ff fc86 	bl	8008f96 <LL_RCC_PLL_IsReady>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1f1      	bne.n	8009674 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	4b40      	ldr	r3, [pc, #256]	; (8009798 <HAL_RCC_OscConfig+0x6fc>)
 8009698:	4013      	ands	r3, r2
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096a2:	4311      	orrs	r1, r2
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096a8:	0212      	lsls	r2, r2, #8
 80096aa:	4311      	orrs	r1, r2
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80096b0:	4311      	orrs	r1, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80096b6:	4311      	orrs	r1, r2
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80096bc:	430a      	orrs	r2, r1
 80096be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096c2:	4313      	orrs	r3, r2
 80096c4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096c6:	f7ff fc4a 	bl	8008f5e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80096ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096da:	f7f9 f8cd 	bl	8002878 <HAL_GetTick>
 80096de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80096e0:	e008      	b.n	80096f4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096e2:	f7f9 f8c9 	bl	8002878 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b0a      	cmp	r3, #10
 80096ee:	d901      	bls.n	80096f4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e04c      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80096f4:	f7ff fc4f 	bl	8008f96 <LL_RCC_PLL_IsReady>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0f1      	beq.n	80096e2 <HAL_RCC_OscConfig+0x646>
 80096fe:	e045      	b.n	800978c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009700:	f7ff fc3b 	bl	8008f7a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009704:	f7f9 f8b8 	bl	8002878 <HAL_GetTick>
 8009708:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800970a:	e008      	b.n	800971e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800970c:	f7f9 f8b4 	bl	8002878 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b0a      	cmp	r3, #10
 8009718:	d901      	bls.n	800971e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e037      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800971e:	f7ff fc3a 	bl	8008f96 <LL_RCC_PLL_IsReady>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f1      	bne.n	800970c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009732:	4b1a      	ldr	r3, [pc, #104]	; (800979c <HAL_RCC_OscConfig+0x700>)
 8009734:	4013      	ands	r3, r2
 8009736:	60cb      	str	r3, [r1, #12]
 8009738:	e028      	b.n	800978c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973e:	2b01      	cmp	r3, #1
 8009740:	d101      	bne.n	8009746 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e023      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	f003 0203 	and.w	r2, r3, #3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009758:	429a      	cmp	r2, r3
 800975a:	d115      	bne.n	8009788 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	429a      	cmp	r2, r3
 8009768:	d10e      	bne.n	8009788 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	429a      	cmp	r2, r3
 8009778:	d106      	bne.n	8009788 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009784:	429a      	cmp	r2, r3
 8009786:	d001      	beq.n	800978c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	11c1808c 	.word	0x11c1808c
 800979c:	eefefffc 	.word	0xeefefffc

080097a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e10f      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097b4:	4b89      	ldr	r3, [pc, #548]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d91b      	bls.n	80097fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097c2:	4b86      	ldr	r3, [pc, #536]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f023 0207 	bic.w	r2, r3, #7
 80097ca:	4984      	ldr	r1, [pc, #528]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097d2:	f7f9 f851 	bl	8002878 <HAL_GetTick>
 80097d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097d8:	e008      	b.n	80097ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80097da:	f7f9 f84d 	bl	8002878 <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d901      	bls.n	80097ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e0f3      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ec:	4b7b      	ldr	r3, [pc, #492]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0307 	and.w	r3, r3, #7
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d1ef      	bne.n	80097da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b00      	cmp	r3, #0
 8009804:	d016      	beq.n	8009834 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fb2a 	bl	8008e64 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009810:	f7f9 f832 	bl	8002878 <HAL_GetTick>
 8009814:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009816:	e008      	b.n	800982a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009818:	f7f9 f82e 	bl	8002878 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d901      	bls.n	800982a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e0d4      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800982a:	f7ff fbf2 	bl	8009012 <LL_RCC_IsActiveFlag_HPRE>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0f1      	beq.n	8009818 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d016      	beq.n	800986e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff fb20 	bl	8008e8a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800984a:	f7f9 f815 	bl	8002878 <HAL_GetTick>
 800984e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009850:	e008      	b.n	8009864 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009852:	f7f9 f811 	bl	8002878 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e0b7      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009864:	f7ff fbe6 	bl	8009034 <LL_RCC_IsActiveFlag_SHDHPRE>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0f1      	beq.n	8009852 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	d016      	beq.n	80098a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff fb19 	bl	8008eb6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009884:	f7f8 fff8 	bl	8002878 <HAL_GetTick>
 8009888:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800988a:	e008      	b.n	800989e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800988c:	f7f8 fff4 	bl	8002878 <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b02      	cmp	r3, #2
 8009898:	d901      	bls.n	800989e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e09a      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800989e:	f7ff fbdb 	bl	8009058 <LL_RCC_IsActiveFlag_PPRE1>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0f1      	beq.n	800988c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0308 	and.w	r3, r3, #8
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d017      	beq.n	80098e4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7ff fb0e 	bl	8008edc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80098c0:	f7f8 ffda 	bl	8002878 <HAL_GetTick>
 80098c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80098c6:	e008      	b.n	80098da <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80098c8:	f7f8 ffd6 	bl	8002878 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d901      	bls.n	80098da <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e07c      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80098da:	f7ff fbce 	bl	800907a <LL_RCC_IsActiveFlag_PPRE2>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0f1      	beq.n	80098c8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d043      	beq.n	8009978 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d106      	bne.n	8009906 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80098f8:	f7ff f99b 	bl	8008c32 <LL_RCC_HSE_IsReady>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d11e      	bne.n	8009940 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e066      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	2b03      	cmp	r3, #3
 800990c:	d106      	bne.n	800991c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800990e:	f7ff fb42 	bl	8008f96 <LL_RCC_PLL_IsReady>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d113      	bne.n	8009940 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e05b      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009924:	f7ff fa35 	bl	8008d92 <LL_RCC_MSI_IsReady>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d108      	bne.n	8009940 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e050      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009932:	f7ff f9ab 	bl	8008c8c <LL_RCC_HSI_IsReady>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e049      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff fa6f 	bl	8008e28 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800994a:	f7f8 ff95 	bl	8002878 <HAL_GetTick>
 800994e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009950:	e00a      	b.n	8009968 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009952:	f7f8 ff91 	bl	8002878 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009960:	4293      	cmp	r3, r2
 8009962:	d901      	bls.n	8009968 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e035      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009968:	f7ff fa71 	bl	8008e4e <LL_RCC_GetSysClkSource>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	429a      	cmp	r2, r3
 8009976:	d1ec      	bne.n	8009952 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009978:	4b18      	ldr	r3, [pc, #96]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0307 	and.w	r3, r3, #7
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d21b      	bcs.n	80099be <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009986:	4b15      	ldr	r3, [pc, #84]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f023 0207 	bic.w	r2, r3, #7
 800998e:	4913      	ldr	r1, [pc, #76]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	4313      	orrs	r3, r2
 8009994:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009996:	f7f8 ff6f 	bl	8002878 <HAL_GetTick>
 800999a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800999c:	e008      	b.n	80099b0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800999e:	f7f8 ff6b 	bl	8002878 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d901      	bls.n	80099b0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e011      	b.n	80099d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099b0:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <HAL_RCC_ClockConfig+0x23c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0307 	and.w	r3, r3, #7
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d1ef      	bne.n	800999e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80099be:	f000 f8b3 	bl	8009b28 <HAL_RCC_GetHCLKFreq>
 80099c2:	4603      	mov	r3, r0
 80099c4:	4a06      	ldr	r2, [pc, #24]	; (80099e0 <HAL_RCC_ClockConfig+0x240>)
 80099c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80099c8:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <HAL_RCC_ClockConfig+0x244>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7f8 ff49 	bl	8002864 <HAL_InitTick>
 80099d2:	4603      	mov	r3, r0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	58004000 	.word	0x58004000
 80099e0:	20000000 	.word	0x20000000
 80099e4:	20000004 	.word	0x20000004

080099e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099e8:	b590      	push	{r4, r7, lr}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099f6:	f7ff fa2a 	bl	8008e4e <LL_RCC_GetSysClkSource>
 80099fa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099fc:	f7ff fafe 	bl	8008ffc <LL_RCC_PLL_GetMainSource>
 8009a00:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <HAL_RCC_GetSysClockFreq+0x2c>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2b0c      	cmp	r3, #12
 8009a0c:	d139      	bne.n	8009a82 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d136      	bne.n	8009a82 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009a14:	f7ff f9cd 	bl	8008db2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d115      	bne.n	8009a4a <HAL_RCC_GetSysClockFreq+0x62>
 8009a1e:	f7ff f9c8 	bl	8008db2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d106      	bne.n	8009a36 <HAL_RCC_GetSysClockFreq+0x4e>
 8009a28:	f7ff f9d3 	bl	8008dd2 <LL_RCC_MSI_GetRange>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	f003 030f 	and.w	r3, r3, #15
 8009a34:	e005      	b.n	8009a42 <HAL_RCC_GetSysClockFreq+0x5a>
 8009a36:	f7ff f9d7 	bl	8008de8 <LL_RCC_MSI_GetRangeAfterStandby>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	0a1b      	lsrs	r3, r3, #8
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	4a36      	ldr	r2, [pc, #216]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x134>)
 8009a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a48:	e014      	b.n	8009a74 <HAL_RCC_GetSysClockFreq+0x8c>
 8009a4a:	f7ff f9b2 	bl	8008db2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d106      	bne.n	8009a62 <HAL_RCC_GetSysClockFreq+0x7a>
 8009a54:	f7ff f9bd 	bl	8008dd2 <LL_RCC_MSI_GetRange>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	091b      	lsrs	r3, r3, #4
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	e005      	b.n	8009a6e <HAL_RCC_GetSysClockFreq+0x86>
 8009a62:	f7ff f9c1 	bl	8008de8 <LL_RCC_MSI_GetRangeAfterStandby>
 8009a66:	4603      	mov	r3, r0
 8009a68:	091b      	lsrs	r3, r3, #4
 8009a6a:	f003 030f 	and.w	r3, r3, #15
 8009a6e:	4a2b      	ldr	r2, [pc, #172]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x134>)
 8009a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a74:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d115      	bne.n	8009aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a80:	e012      	b.n	8009aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d102      	bne.n	8009a8e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009a88:	4b25      	ldr	r3, [pc, #148]	; (8009b20 <HAL_RCC_GetSysClockFreq+0x138>)
 8009a8a:	617b      	str	r3, [r7, #20]
 8009a8c:	e00c      	b.n	8009aa8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b08      	cmp	r3, #8
 8009a92:	d109      	bne.n	8009aa8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009a94:	f7ff f8a0 	bl	8008bd8 <LL_RCC_HSE_IsEnabledDiv2>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d102      	bne.n	8009aa4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009a9e:	4b20      	ldr	r3, [pc, #128]	; (8009b20 <HAL_RCC_GetSysClockFreq+0x138>)
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	e001      	b.n	8009aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009aa4:	4b1f      	ldr	r3, [pc, #124]	; (8009b24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009aa6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009aa8:	f7ff f9d1 	bl	8008e4e <LL_RCC_GetSysClkSource>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b0c      	cmp	r3, #12
 8009ab0:	d12f      	bne.n	8009b12 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009ab2:	f7ff faa3 	bl	8008ffc <LL_RCC_PLL_GetMainSource>
 8009ab6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d003      	beq.n	8009ac6 <HAL_RCC_GetSysClockFreq+0xde>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d003      	beq.n	8009acc <HAL_RCC_GetSysClockFreq+0xe4>
 8009ac4:	e00d      	b.n	8009ae2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009ac6:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <HAL_RCC_GetSysClockFreq+0x138>)
 8009ac8:	60fb      	str	r3, [r7, #12]
        break;
 8009aca:	e00d      	b.n	8009ae8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009acc:	f7ff f884 	bl	8008bd8 <LL_RCC_HSE_IsEnabledDiv2>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d102      	bne.n	8009adc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009ad6:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <HAL_RCC_GetSysClockFreq+0x138>)
 8009ad8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009ada:	e005      	b.n	8009ae8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8009adc:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009ade:	60fb      	str	r3, [r7, #12]
        break;
 8009ae0:	e002      	b.n	8009ae8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	60fb      	str	r3, [r7, #12]
        break;
 8009ae6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009ae8:	f7ff fa66 	bl	8008fb8 <LL_RCC_PLL_GetN>
 8009aec:	4602      	mov	r2, r0
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	fb03 f402 	mul.w	r4, r3, r2
 8009af4:	f7ff fa77 	bl	8008fe6 <LL_RCC_PLL_GetDivider>
 8009af8:	4603      	mov	r3, r0
 8009afa:	091b      	lsrs	r3, r3, #4
 8009afc:	3301      	adds	r3, #1
 8009afe:	fbb4 f4f3 	udiv	r4, r4, r3
 8009b02:	f7ff fa65 	bl	8008fd0 <LL_RCC_PLL_GetR>
 8009b06:	4603      	mov	r3, r0
 8009b08:	0f5b      	lsrs	r3, r3, #29
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	fbb4 f3f3 	udiv	r3, r4, r3
 8009b10:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009b12:	697b      	ldr	r3, [r7, #20]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd90      	pop	{r4, r7, pc}
 8009b1c:	08021a44 	.word	0x08021a44
 8009b20:	00f42400 	.word	0x00f42400
 8009b24:	01e84800 	.word	0x01e84800

08009b28 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b28:	b598      	push	{r3, r4, r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009b2c:	f7ff ff5c 	bl	80099e8 <HAL_RCC_GetSysClockFreq>
 8009b30:	4604      	mov	r4, r0
 8009b32:	f7ff f9e6 	bl	8008f02 <LL_RCC_GetAHBPrescaler>
 8009b36:	4603      	mov	r3, r0
 8009b38:	091b      	lsrs	r3, r3, #4
 8009b3a:	f003 030f 	and.w	r3, r3, #15
 8009b3e:	4a03      	ldr	r2, [pc, #12]	; (8009b4c <HAL_RCC_GetHCLKFreq+0x24>)
 8009b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b44:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	bd98      	pop	{r3, r4, r7, pc}
 8009b4c:	080219e4 	.word	0x080219e4

08009b50 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b50:	b598      	push	{r3, r4, r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009b54:	f7ff ffe8 	bl	8009b28 <HAL_RCC_GetHCLKFreq>
 8009b58:	4604      	mov	r4, r0
 8009b5a:	f7ff f9ea 	bl	8008f32 <LL_RCC_GetAPB1Prescaler>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	0a1b      	lsrs	r3, r3, #8
 8009b62:	4a03      	ldr	r2, [pc, #12]	; (8009b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	bd98      	pop	{r3, r4, r7, pc}
 8009b70:	08021a24 	.word	0x08021a24

08009b74 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b74:	b598      	push	{r3, r4, r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009b78:	f7ff ffd6 	bl	8009b28 <HAL_RCC_GetHCLKFreq>
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	f7ff f9e3 	bl	8008f48 <LL_RCC_GetAPB2Prescaler>
 8009b82:	4603      	mov	r3, r0
 8009b84:	0adb      	lsrs	r3, r3, #11
 8009b86:	4a03      	ldr	r2, [pc, #12]	; (8009b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	bd98      	pop	{r3, r4, r7, pc}
 8009b94:	08021a24 	.word	0x08021a24

08009b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	091b      	lsrs	r3, r3, #4
 8009ba4:	f003 030f 	and.w	r3, r3, #15
 8009ba8:	4a10      	ldr	r2, [pc, #64]	; (8009bec <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8009baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bae:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8009bb0:	f7ff f9b2 	bl	8008f18 <LL_RCC_GetAHB3Prescaler>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	f003 030f 	and.w	r3, r3, #15
 8009bbc:	4a0c      	ldr	r2, [pc, #48]	; (8009bf0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8009bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8009bce:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd2:	0c9c      	lsrs	r4, r3, #18
 8009bd4:	f7fe ff58 	bl	8008a88 <HAL_PWREx_GetVoltageRange>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 f80b 	bl	8009bf8 <RCC_SetFlashLatency>
 8009be2:	4603      	mov	r3, r0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd90      	pop	{r4, r7, pc}
 8009bec:	08021a44 	.word	0x08021a44
 8009bf0:	080219e4 	.word	0x080219e4
 8009bf4:	431bde83 	.word	0x431bde83

08009bf8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08e      	sub	sp, #56	; 0x38
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8009c02:	4a3a      	ldr	r2, [pc, #232]	; (8009cec <RCC_SetFlashLatency+0xf4>)
 8009c04:	f107 0320 	add.w	r3, r7, #32
 8009c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c0c:	6018      	str	r0, [r3, #0]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8009c12:	4a37      	ldr	r2, [pc, #220]	; (8009cf0 <RCC_SetFlashLatency+0xf8>)
 8009c14:	f107 0318 	add.w	r3, r7, #24
 8009c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c1c:	6018      	str	r0, [r3, #0]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009c22:	4a34      	ldr	r2, [pc, #208]	; (8009cf4 <RCC_SetFlashLatency+0xfc>)
 8009c24:	f107 030c 	add.w	r3, r7, #12
 8009c28:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009c2e:	2300      	movs	r3, #0
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c38:	d11b      	bne.n	8009c72 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8009c3e:	e014      	b.n	8009c6a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	3338      	adds	r3, #56	; 0x38
 8009c46:	443b      	add	r3, r7
 8009c48:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d807      	bhi.n	8009c64 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	3338      	adds	r3, #56	; 0x38
 8009c5a:	443b      	add	r3, r7
 8009c5c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c62:	e021      	b.n	8009ca8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	3301      	adds	r3, #1
 8009c68:	633b      	str	r3, [r7, #48]	; 0x30
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d9e7      	bls.n	8009c40 <RCC_SetFlashLatency+0x48>
 8009c70:	e01a      	b.n	8009ca8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009c72:	2300      	movs	r3, #0
 8009c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c76:	e014      	b.n	8009ca2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	3338      	adds	r3, #56	; 0x38
 8009c7e:	443b      	add	r3, r7
 8009c80:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8009c84:	461a      	mov	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d807      	bhi.n	8009c9c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	3338      	adds	r3, #56	; 0x38
 8009c92:	443b      	add	r3, r7
 8009c94:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009c98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c9a:	e005      	b.n	8009ca8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d9e7      	bls.n	8009c78 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009ca8:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <RCC_SetFlashLatency+0x100>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f023 0207 	bic.w	r2, r3, #7
 8009cb0:	4911      	ldr	r1, [pc, #68]	; (8009cf8 <RCC_SetFlashLatency+0x100>)
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009cb8:	f7f8 fdde 	bl	8002878 <HAL_GetTick>
 8009cbc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009cbe:	e008      	b.n	8009cd2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009cc0:	f7f8 fdda 	bl	8002878 <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d901      	bls.n	8009cd2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e007      	b.n	8009ce2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <RCC_SetFlashLatency+0x100>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d1ef      	bne.n	8009cc0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3738      	adds	r7, #56	; 0x38
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	08021120 	.word	0x08021120
 8009cf0:	08021128 	.word	0x08021128
 8009cf4:	08021130 	.word	0x08021130
 8009cf8:	58004000 	.word	0x58004000

08009cfc <LL_RCC_LSE_IsReady>:
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d101      	bne.n	8009d14 <LL_RCC_LSE_IsReady+0x18>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <LL_RCC_LSE_IsReady+0x1a>
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bc80      	pop	{r7}
 8009d1c:	4770      	bx	lr

08009d1e <LL_RCC_SetUSARTClockSource>:
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	0c1b      	lsrs	r3, r3, #16
 8009d32:	43db      	mvns	r3, r3
 8009d34:	401a      	ands	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bc80      	pop	{r7}
 8009d4c:	4770      	bx	lr

08009d4e <LL_RCC_SetI2SClockSource>:
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr

08009d78 <LL_RCC_SetLPUARTClockSource>:
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bc80      	pop	{r7}
 8009da0:	4770      	bx	lr

08009da2 <LL_RCC_SetI2CClockSource>:
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	091b      	lsrs	r3, r3, #4
 8009db6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009dba:	43db      	mvns	r3, r3
 8009dbc:	401a      	ands	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	011b      	lsls	r3, r3, #4
 8009dc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr

08009dda <LL_RCC_SetLPTIMClockSource>:
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009de6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	0c1b      	lsrs	r3, r3, #16
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	43db      	mvns	r3, r3
 8009df2:	401a      	ands	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr

08009e0c <LL_RCC_SetRNGClockSource>:
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bc80      	pop	{r7}
 8009e34:	4770      	bx	lr

08009e36 <LL_RCC_SetADCClockSource>:
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bc80      	pop	{r7}
 8009e5e:	4770      	bx	lr

08009e60 <LL_RCC_SetRTCClockSource>:
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bc80      	pop	{r7}
 8009e88:	4770      	bx	lr

08009e8a <LL_RCC_GetRTCClockSource>:
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bc80      	pop	{r7}
 8009ea0:	4770      	bx	lr

08009ea2 <LL_RCC_ForceBackupDomainReset>:
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009eba:	bf00      	nop
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr

08009ec2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009eda:	bf00      	nop
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bc80      	pop	{r7}
 8009ee0:	4770      	bx	lr
	...

08009ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d058      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8009f04:	f7fe fd7e 	bl	8008a04 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f08:	f7f8 fcb6 	bl	8002878 <HAL_GetTick>
 8009f0c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009f0e:	e009      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f10:	f7f8 fcb2 	bl	8002878 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d902      	bls.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	74fb      	strb	r3, [r7, #19]
        break;
 8009f22:	e006      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009f24:	4b7b      	ldr	r3, [pc, #492]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f30:	d1ee      	bne.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8009f32:	7cfb      	ldrb	r3, [r7, #19]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d13c      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009f38:	f7ff ffa7 	bl	8009e8a <LL_RCC_GetRTCClockSource>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d00f      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f54:	f7ff ffa5 	bl	8009ea2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f58:	f7ff ffb3 	bl	8009ec2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d014      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f70:	f7f8 fc82 	bl	8002878 <HAL_GetTick>
 8009f74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009f76:	e00b      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f78:	f7f8 fc7e 	bl	8002878 <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d902      	bls.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	74fb      	strb	r3, [r7, #19]
            break;
 8009f8e:	e004      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009f90:	f7ff feb4 	bl	8009cfc <LL_RCC_LSE_IsReady>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d1ee      	bne.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8009f9a:	7cfb      	ldrb	r3, [r7, #19]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d105      	bne.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff ff5b 	bl	8009e60 <LL_RCC_SetRTCClockSource>
 8009faa:	e004      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009fac:	7cfb      	ldrb	r3, [r7, #19]
 8009fae:	74bb      	strb	r3, [r7, #18]
 8009fb0:	e001      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb2:	7cfb      	ldrb	r3, [r7, #19]
 8009fb4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d004      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fea9 	bl	8009d1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0302 	and.w	r3, r3, #2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d004      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff fe9e 	bl	8009d1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0320 	and.w	r3, r3, #32
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d004      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fec0 	bl	8009d78 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a000:	2b00      	cmp	r3, #0
 800a002:	d004      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff fee6 	bl	8009dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff fedb 	bl	8009dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d004      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fed0 	bl	8009dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a042:	2b00      	cmp	r3, #0
 800a044:	d004      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff fea9 	bl	8009da2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d004      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff fe9e 	bl	8009da2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d004      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff fe93 	bl	8009da2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b00      	cmp	r3, #0
 800a086:	d011      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff fe5e 	bl	8009d4e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a09a:	d107      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800a09c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a0a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d010      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fea5 	bl	8009e0c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d107      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a0ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a0d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d011      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff fea3 	bl	8009e36 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f8:	d107      	bne.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a0fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a108:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800a10a:	7cbb      	ldrb	r3, [r7, #18]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	58000400 	.word	0x58000400

0800a118 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d071      	beq.n	800a20e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7f8 f812 	bl	8002168 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a14c:	4b32      	ldr	r3, [pc, #200]	; (800a218 <HAL_RTC_Init+0x100>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	f003 0310 	and.w	r3, r3, #16
 800a154:	2b10      	cmp	r3, #16
 800a156:	d051      	beq.n	800a1fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a158:	4b2f      	ldr	r3, [pc, #188]	; (800a218 <HAL_RTC_Init+0x100>)
 800a15a:	22ca      	movs	r2, #202	; 0xca
 800a15c:	625a      	str	r2, [r3, #36]	; 0x24
 800a15e:	4b2e      	ldr	r3, [pc, #184]	; (800a218 <HAL_RTC_Init+0x100>)
 800a160:	2253      	movs	r2, #83	; 0x53
 800a162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fa11 	bl	800a58c <RTC_EnterInitMode>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d13f      	bne.n	800a1f4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a174:	4b28      	ldr	r3, [pc, #160]	; (800a218 <HAL_RTC_Init+0x100>)
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	4a27      	ldr	r2, [pc, #156]	; (800a218 <HAL_RTC_Init+0x100>)
 800a17a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800a17e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a182:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a184:	4b24      	ldr	r3, [pc, #144]	; (800a218 <HAL_RTC_Init+0x100>)
 800a186:	699a      	ldr	r2, [r3, #24]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6859      	ldr	r1, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	4319      	orrs	r1, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	430b      	orrs	r3, r1
 800a198:	491f      	ldr	r1, [pc, #124]	; (800a218 <HAL_RTC_Init+0x100>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68da      	ldr	r2, [r3, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	041b      	lsls	r3, r3, #16
 800a1a8:	491b      	ldr	r1, [pc, #108]	; (800a218 <HAL_RTC_Init+0x100>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a1ae:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <HAL_RTC_Init+0x100>)
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1be:	430b      	orrs	r3, r1
 800a1c0:	4915      	ldr	r1, [pc, #84]	; (800a218 <HAL_RTC_Init+0x100>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fa14 	bl	800a5f4 <RTC_ExitInitMode>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10e      	bne.n	800a1f4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800a1d6:	4b10      	ldr	r3, [pc, #64]	; (800a218 <HAL_RTC_Init+0x100>)
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a19      	ldr	r1, [r3, #32]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	4319      	orrs	r1, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	490a      	ldr	r1, [pc, #40]	; (800a218 <HAL_RTC_Init+0x100>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1f4:	4b08      	ldr	r3, [pc, #32]	; (800a218 <HAL_RTC_Init+0x100>)
 800a1f6:	22ff      	movs	r2, #255	; 0xff
 800a1f8:	625a      	str	r2, [r3, #36]	; 0x24
 800a1fa:	e001      	b.n	800a200 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d103      	bne.n	800a20e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	40002800 	.word	0x40002800

0800a21c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a21c:	b590      	push	{r4, r7, lr}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a232:	2b01      	cmp	r3, #1
 800a234:	d101      	bne.n	800a23a <HAL_RTC_SetAlarm_IT+0x1e>
 800a236:	2302      	movs	r3, #2
 800a238:	e0f3      	b.n	800a422 <HAL_RTC_SetAlarm_IT+0x206>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2202      	movs	r2, #2
 800a246:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800a24a:	4b78      	ldr	r3, [pc, #480]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a252:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25a:	d06a      	beq.n	800a332 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d13a      	bne.n	800a2d8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a262:	4b72      	ldr	r3, [pc, #456]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2200      	movs	r2, #0
 800a272:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 f9f5 	bl	800a670 <RTC_ByteToBcd2>
 800a286:	4603      	mov	r3, r0
 800a288:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	785b      	ldrb	r3, [r3, #1]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f9ee 	bl	800a670 <RTC_ByteToBcd2>
 800a294:	4603      	mov	r3, r0
 800a296:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a298:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	789b      	ldrb	r3, [r3, #2]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f9e6 	bl	800a670 <RTC_ByteToBcd2>
 800a2a4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a2a6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	78db      	ldrb	r3, [r3, #3]
 800a2ae:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a2b0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 f9d8 	bl	800a670 <RTC_ByteToBcd2>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a2c4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a2cc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e02c      	b.n	800a332 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800a2e0:	d00d      	beq.n	800a2fe <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2ea:	d008      	beq.n	800a2fe <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a2ec:	4b4f      	ldr	r3, [pc, #316]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	785b      	ldrb	r3, [r3, #1]
 800a308:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a30a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a310:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	78db      	ldrb	r3, [r3, #3]
 800a316:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a318:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a320:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a322:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a328:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a332:	4b3e      	ldr	r3, [pc, #248]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a334:	22ca      	movs	r2, #202	; 0xca
 800a336:	625a      	str	r2, [r3, #36]	; 0x24
 800a338:	4b3c      	ldr	r3, [pc, #240]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a33a:	2253      	movs	r2, #83	; 0x53
 800a33c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a346:	d12c      	bne.n	800a3a2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a348:	4b38      	ldr	r3, [pc, #224]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	4a37      	ldr	r2, [pc, #220]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a34e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a352:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a354:	4b35      	ldr	r3, [pc, #212]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a356:	2201      	movs	r2, #1
 800a358:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a360:	d107      	bne.n	800a372 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	4930      	ldr	r1, [pc, #192]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	644b      	str	r3, [r1, #68]	; 0x44
 800a370:	e006      	b.n	800a380 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800a372:	4a2e      	ldr	r2, [pc, #184]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800a378:	4a2c      	ldr	r2, [pc, #176]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800a380:	4a2a      	ldr	r2, [pc, #168]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38c:	f043 0201 	orr.w	r2, r3, #1
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a394:	4b25      	ldr	r3, [pc, #148]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	4a24      	ldr	r2, [pc, #144]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a39a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800a39e:	6193      	str	r3, [r2, #24]
 800a3a0:	e02b      	b.n	800a3fa <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a3a2:	4b22      	ldr	r3, [pc, #136]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	4a21      	ldr	r2, [pc, #132]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3a8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800a3ac:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a3ae:	4b1f      	ldr	r3, [pc, #124]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ba:	d107      	bne.n	800a3cc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	699a      	ldr	r2, [r3, #24]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	4919      	ldr	r1, [pc, #100]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3ca:	e006      	b.n	800a3da <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800a3cc:	4a17      	ldr	r2, [pc, #92]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800a3d2:	4a16      	ldr	r2, [pc, #88]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800a3da:	4a14      	ldr	r2, [pc, #80]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e6:	f043 0202 	orr.w	r2, r3, #2
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a3ee:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	4a0e      	ldr	r2, [pc, #56]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a3f4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800a3f8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <HAL_RTC_SetAlarm_IT+0x214>)
 800a3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a400:	4a0b      	ldr	r2, [pc, #44]	; (800a430 <HAL_RTC_SetAlarm_IT+0x214>)
 800a402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a406:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a40a:	4b08      	ldr	r3, [pc, #32]	; (800a42c <HAL_RTC_SetAlarm_IT+0x210>)
 800a40c:	22ff      	movs	r2, #255	; 0xff
 800a40e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	bd90      	pop	{r4, r7, pc}
 800a42a:	bf00      	nop
 800a42c:	40002800 	.word	0x40002800
 800a430:	58000800 	.word	0x58000800

0800a434 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <HAL_RTC_DeactivateAlarm+0x18>
 800a448:	2302      	movs	r3, #2
 800a44a:	e048      	b.n	800a4de <HAL_RTC_DeactivateAlarm+0xaa>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a45c:	4b22      	ldr	r3, [pc, #136]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a45e:	22ca      	movs	r2, #202	; 0xca
 800a460:	625a      	str	r2, [r3, #36]	; 0x24
 800a462:	4b21      	ldr	r3, [pc, #132]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a464:	2253      	movs	r2, #83	; 0x53
 800a466:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a46e:	d115      	bne.n	800a49c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a470:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	4a1c      	ldr	r2, [pc, #112]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a476:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a47a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800a47c:	4b1a      	ldr	r3, [pc, #104]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a480:	4a19      	ldr	r2, [pc, #100]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a486:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	f023 0201 	bic.w	r2, r3, #1
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a494:	4b14      	ldr	r3, [pc, #80]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a496:	2201      	movs	r2, #1
 800a498:	65da      	str	r2, [r3, #92]	; 0x5c
 800a49a:	e014      	b.n	800a4c6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a49c:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a4a2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800a4a6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800a4a8:	4b0f      	ldr	r3, [pc, #60]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a4aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ac:	4a0e      	ldr	r2, [pc, #56]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a4ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4b2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b8:	f023 0202 	bic.w	r2, r3, #2
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a4c0:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4c6:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800a4c8:	22ff      	movs	r2, #255	; 0xff
 800a4ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bc80      	pop	{r7}
 800a4e6:	4770      	bx	lr
 800a4e8:	40002800 	.word	0x40002800

0800a4ec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800a4f4:	4b11      	ldr	r3, [pc, #68]	; (800a53c <HAL_RTC_AlarmIRQHandler+0x50>)
 800a4f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	d005      	beq.n	800a516 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a50a:	4b0c      	ldr	r3, [pc, #48]	; (800a53c <HAL_RTC_AlarmIRQHandler+0x50>)
 800a50c:	2201      	movs	r2, #1
 800a50e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7f8 fbc2 	bl	8002c9a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d005      	beq.n	800a52c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a520:	4b06      	ldr	r3, [pc, #24]	; (800a53c <HAL_RTC_AlarmIRQHandler+0x50>)
 800a522:	2202      	movs	r2, #2
 800a524:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f94a 	bl	800a7c0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a534:	bf00      	nop
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	40002800 	.word	0x40002800

0800a540 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a548:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <HAL_RTC_WaitForSynchro+0x48>)
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	4a0e      	ldr	r2, [pc, #56]	; (800a588 <HAL_RTC_WaitForSynchro+0x48>)
 800a54e:	f023 0320 	bic.w	r3, r3, #32
 800a552:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a554:	f7f8 f990 	bl	8002878 <HAL_GetTick>
 800a558:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a55a:	e009      	b.n	800a570 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a55c:	f7f8 f98c 	bl	8002878 <HAL_GetTick>
 800a560:	4602      	mov	r2, r0
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a56a:	d901      	bls.n	800a570 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e006      	b.n	800a57e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a570:	4b05      	ldr	r3, [pc, #20]	; (800a588 <HAL_RTC_WaitForSynchro+0x48>)
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d0ef      	beq.n	800a55c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	40002800 	.word	0x40002800

0800a58c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a598:	4b15      	ldr	r3, [pc, #84]	; (800a5f0 <RTC_EnterInitMode+0x64>)
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d120      	bne.n	800a5e6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a5a4:	4b12      	ldr	r3, [pc, #72]	; (800a5f0 <RTC_EnterInitMode+0x64>)
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	4a11      	ldr	r2, [pc, #68]	; (800a5f0 <RTC_EnterInitMode+0x64>)
 800a5aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ae:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a5b0:	f7f8 f962 	bl	8002878 <HAL_GetTick>
 800a5b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5b6:	e00d      	b.n	800a5d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a5b8:	f7f8 f95e 	bl	8002878 <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5c6:	d905      	bls.n	800a5d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5d4:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <RTC_EnterInitMode+0x64>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d102      	bne.n	800a5e6 <RTC_EnterInitMode+0x5a>
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d1e8      	bne.n	800a5b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	40002800 	.word	0x40002800

0800a5f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a600:	4b1a      	ldr	r3, [pc, #104]	; (800a66c <RTC_ExitInitMode+0x78>)
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	4a19      	ldr	r2, [pc, #100]	; (800a66c <RTC_ExitInitMode+0x78>)
 800a606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a60a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a60c:	4b17      	ldr	r3, [pc, #92]	; (800a66c <RTC_ExitInitMode+0x78>)
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f003 0320 	and.w	r3, r3, #32
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10c      	bne.n	800a632 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff ff91 	bl	800a540 <HAL_RTC_WaitForSynchro>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01e      	beq.n	800a662 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2203      	movs	r2, #3
 800a628:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	73fb      	strb	r3, [r7, #15]
 800a630:	e017      	b.n	800a662 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a632:	4b0e      	ldr	r3, [pc, #56]	; (800a66c <RTC_ExitInitMode+0x78>)
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	4a0d      	ldr	r2, [pc, #52]	; (800a66c <RTC_ExitInitMode+0x78>)
 800a638:	f023 0320 	bic.w	r3, r3, #32
 800a63c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff ff7e 	bl	800a540 <HAL_RTC_WaitForSynchro>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2203      	movs	r2, #3
 800a64e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a656:	4b05      	ldr	r3, [pc, #20]	; (800a66c <RTC_ExitInitMode+0x78>)
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	4a04      	ldr	r2, [pc, #16]	; (800a66c <RTC_ExitInitMode+0x78>)
 800a65c:	f043 0320 	orr.w	r3, r3, #32
 800a660:	6193      	str	r3, [r2, #24]
  }

  return status;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	40002800 	.word	0x40002800

0800a670 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a682:	e005      	b.n	800a690 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	3301      	adds	r3, #1
 800a688:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a68a:	7afb      	ldrb	r3, [r7, #11]
 800a68c:	3b0a      	subs	r3, #10
 800a68e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a690:	7afb      	ldrb	r3, [r7, #11]
 800a692:	2b09      	cmp	r3, #9
 800a694:	d8f6      	bhi.n	800a684 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	7afb      	ldrb	r3, [r7, #11]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	b2db      	uxtb	r3, r3
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bc80      	pop	{r7}
 800a6ac:	4770      	bx	lr
	...

0800a6b0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_RTCEx_EnableBypassShadow+0x16>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e01f      	b.n	800a706 <HAL_RTCEx_EnableBypassShadow+0x56>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6d6:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a6d8:	22ca      	movs	r2, #202	; 0xca
 800a6da:	625a      	str	r2, [r3, #36]	; 0x24
 800a6dc:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a6de:	2253      	movs	r2, #83	; 0x53
 800a6e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a6e2:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	4a0a      	ldr	r2, [pc, #40]	; (800a710 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a6e8:	f043 0320 	orr.w	r3, r3, #32
 800a6ec:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6ee:	4b08      	ldr	r3, [pc, #32]	; (800a710 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bc80      	pop	{r7}
 800a70e:	4770      	bx	lr
 800a710:	40002800 	.word	0x40002800

0800a714 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a722:	2b01      	cmp	r3, #1
 800a724:	d101      	bne.n	800a72a <HAL_RTCEx_SetSSRU_IT+0x16>
 800a726:	2302      	movs	r3, #2
 800a728:	e027      	b.n	800a77a <HAL_RTCEx_SetSSRU_IT+0x66>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2202      	movs	r2, #2
 800a736:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a73c:	22ca      	movs	r2, #202	; 0xca
 800a73e:	625a      	str	r2, [r3, #36]	; 0x24
 800a740:	4b10      	ldr	r3, [pc, #64]	; (800a784 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a742:	2253      	movs	r2, #83	; 0x53
 800a744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800a746:	4b0f      	ldr	r3, [pc, #60]	; (800a784 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	4a0e      	ldr	r2, [pc, #56]	; (800a784 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a750:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800a752:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a758:	4a0b      	ldr	r2, [pc, #44]	; (800a788 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a75a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a75e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a764:	22ff      	movs	r2, #255	; 0xff
 800a766:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	bc80      	pop	{r7}
 800a782:	4770      	bx	lr
 800a784:	40002800 	.word	0x40002800
 800a788:	58000800 	.word	0x58000800

0800a78c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800a794:	4b09      	ldr	r3, [pc, #36]	; (800a7bc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800a7a0:	4b06      	ldr	r3, [pc, #24]	; (800a7bc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a7a2:	2240      	movs	r2, #64	; 0x40
 800a7a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7f8 fa81 	bl	8002cae <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	40002800 	.word	0x40002800

0800a7c0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr
	...

0800a7d4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <HAL_RTCEx_BKUPWrite+0x2c>)
 800a7e2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	371c      	adds	r7, #28
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bc80      	pop	{r7}
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	4000b100 	.word	0x4000b100

0800a804 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a80e:	4b07      	ldr	r3, [pc, #28]	; (800a82c <HAL_RTCEx_BKUPRead+0x28>)
 800a810:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4413      	add	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	4000b100 	.word	0x4000b100

0800a830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e0c6      	b.n	800a9d0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	2b00      	cmp	r3, #0
 800a848:	d108      	bne.n	800a85c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a852:	d009      	beq.n	800a868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	61da      	str	r2, [r3, #28]
 800a85a:	e005      	b.n	800a868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7f7 fd1d 	bl	80022bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2202      	movs	r2, #2
 800a886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a898:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8a2:	d902      	bls.n	800a8aa <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	e002      	b.n	800a8b0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a8aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a8b8:	d007      	beq.n	800a8ca <HAL_SPI_Init+0x9a>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8c2:	d002      	beq.n	800a8ca <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a1b      	ldr	r3, [r3, #32]
 800a908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90c:	ea42 0103 	orr.w	r1, r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a914:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a928:	d11b      	bne.n	800a962 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10b      	bne.n	800a94a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a93a:	d903      	bls.n	800a944 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2202      	movs	r2, #2
 800a940:	631a      	str	r2, [r3, #48]	; 0x30
 800a942:	e002      	b.n	800a94a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d107      	bne.n	800a962 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a960:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	0c1b      	lsrs	r3, r3, #16
 800a968:	f003 0204 	and.w	r2, r3, #4
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	f003 0310 	and.w	r3, r3, #16
 800a974:	431a      	orrs	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	431a      	orrs	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a988:	ea42 0103 	orr.w	r1, r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9a2:	d105      	bne.n	800a9b0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	b292      	uxth	r2, r2
 800a9ae:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	69da      	ldr	r2, [r3, #28]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	603b      	str	r3, [r7, #0]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d101      	bne.n	800a9fa <HAL_SPI_Transmit+0x22>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e17a      	b.n	800acf0 <HAL_SPI_Transmit+0x318>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa02:	f7f7 ff39 	bl	8002878 <HAL_GetTick>
 800aa06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800aa08:	88fb      	ldrh	r3, [r7, #6]
 800aa0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d002      	beq.n	800aa1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa1c:	e15f      	b.n	800acde <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <HAL_SPI_Transmit+0x52>
 800aa24:	88fb      	ldrh	r3, [r7, #6]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d102      	bne.n	800aa30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa2e:	e156      	b.n	800acde <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2203      	movs	r2, #3
 800aa34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	88fa      	ldrh	r2, [r7, #6]
 800aa48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	88fa      	ldrh	r2, [r7, #6]
 800aa4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa7a:	d10f      	bne.n	800aa9c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa9a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaa4:	d10f      	bne.n	800aac6 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aac4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad0:	2b40      	cmp	r3, #64	; 0x40
 800aad2:	d007      	beq.n	800aae4 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aaec:	d94b      	bls.n	800ab86 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <HAL_SPI_Transmit+0x124>
 800aaf6:	8afb      	ldrh	r3, [r7, #22]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d13e      	bne.n	800ab7a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	881a      	ldrh	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0c:	1c9a      	adds	r2, r3, #2
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab20:	e02b      	b.n	800ab7a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d112      	bne.n	800ab56 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab34:	881a      	ldrh	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	1c9a      	adds	r2, r3, #2
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab54:	e011      	b.n	800ab7a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab56:	f7f7 fe8f 	bl	8002878 <HAL_GetTick>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d803      	bhi.n	800ab6e <HAL_SPI_Transmit+0x196>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6c:	d102      	bne.n	800ab74 <HAL_SPI_Transmit+0x19c>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d102      	bne.n	800ab7a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab78:	e0b1      	b.n	800acde <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1ce      	bne.n	800ab22 <HAL_SPI_Transmit+0x14a>
 800ab84:	e07c      	b.n	800ac80 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <HAL_SPI_Transmit+0x1bc>
 800ab8e:	8afb      	ldrh	r3, [r7, #22]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d170      	bne.n	800ac76 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d912      	bls.n	800abc4 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	881a      	ldrh	r2, [r3, #0]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abae:	1c9a      	adds	r2, r3, #2
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abb8:	b29b      	uxth	r3, r3
 800abba:	3b02      	subs	r3, #2
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800abc2:	e058      	b.n	800ac76 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	330c      	adds	r3, #12
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	1c5a      	adds	r2, r3, #1
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	3b01      	subs	r3, #1
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800abea:	e044      	b.n	800ac76 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d12b      	bne.n	800ac52 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d912      	bls.n	800ac2a <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac08:	881a      	ldrh	r2, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac14:	1c9a      	adds	r2, r3, #2
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	3b02      	subs	r3, #2
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac28:	e025      	b.n	800ac76 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	330c      	adds	r3, #12
 800ac34:	7812      	ldrb	r2, [r2, #0]
 800ac36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac50:	e011      	b.n	800ac76 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac52:	f7f7 fe11 	bl	8002878 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d803      	bhi.n	800ac6a <HAL_SPI_Transmit+0x292>
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d102      	bne.n	800ac70 <HAL_SPI_Transmit+0x298>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d102      	bne.n	800ac76 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ac74:	e033      	b.n	800acde <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1b5      	bne.n	800abec <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac88:	d107      	bne.n	800ac9a <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac98:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 f948 	bl	800af34 <SPI_EndRxTxTransaction>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d002      	beq.n	800acb0 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2220      	movs	r2, #32
 800acae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10a      	bne.n	800acce <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acb8:	2300      	movs	r3, #0
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	77fb      	strb	r3, [r7, #31]
 800acda:	e000      	b.n	800acde <HAL_SPI_Transmit+0x306>
  }

error:
 800acdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800acee:	7ffb      	ldrb	r3, [r7, #31]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3720      	adds	r7, #32
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	4613      	mov	r3, r2
 800ad06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad08:	f7f7 fdb6 	bl	8002878 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	4413      	add	r3, r2
 800ad16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad18:	f7f7 fdae 	bl	8002878 <HAL_GetTick>
 800ad1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad1e:	4b39      	ldr	r3, [pc, #228]	; (800ae04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	015b      	lsls	r3, r3, #5
 800ad24:	0d1b      	lsrs	r3, r3, #20
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	fb02 f303 	mul.w	r3, r2, r3
 800ad2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad2e:	e054      	b.n	800adda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad36:	d050      	beq.n	800adda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad38:	f7f7 fd9e 	bl	8002878 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d902      	bls.n	800ad4e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d13d      	bne.n	800adca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad66:	d111      	bne.n	800ad8c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad70:	d004      	beq.n	800ad7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad7a:	d107      	bne.n	800ad8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad94:	d10f      	bne.n	800adb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e017      	b.n	800adfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	3b01      	subs	r3, #1
 800add8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	4013      	ands	r3, r2
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	bf0c      	ite	eq
 800adea:	2301      	moveq	r3, #1
 800adec:	2300      	movne	r3, #0
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	461a      	mov	r2, r3
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d19b      	bne.n	800ad30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	20000000 	.word	0x20000000

0800ae08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	; 0x28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae1a:	f7f7 fd2d 	bl	8002878 <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	4413      	add	r3, r2
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ae2a:	f7f7 fd25 	bl	8002878 <HAL_GetTick>
 800ae2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	330c      	adds	r3, #12
 800ae36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae38:	4b3d      	ldr	r3, [pc, #244]	; (800af30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	00da      	lsls	r2, r3, #3
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	0d1b      	lsrs	r3, r3, #20
 800ae48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae4a:	fb02 f303 	mul.w	r3, r2, r3
 800ae4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae50:	e060      	b.n	800af14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae58:	d107      	bne.n	800ae6a <SPI_WaitFifoStateUntilTimeout+0x62>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d104      	bne.n	800ae6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae70:	d050      	beq.n	800af14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae72:	f7f7 fd01 	bl	8002878 <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d902      	bls.n	800ae88 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d13d      	bne.n	800af04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aea0:	d111      	bne.n	800aec6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeaa:	d004      	beq.n	800aeb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeb4:	d107      	bne.n	800aec6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aec4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aece:	d10f      	bne.n	800aef0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aeee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e010      	b.n	800af26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	3b01      	subs	r3, #1
 800af12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689a      	ldr	r2, [r3, #8]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	4013      	ands	r3, r2
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	429a      	cmp	r2, r3
 800af22:	d196      	bne.n	800ae52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3728      	adds	r7, #40	; 0x28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000000 	.word	0x20000000

0800af34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af02      	add	r7, sp, #8
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2200      	movs	r2, #0
 800af48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7ff ff5b 	bl	800ae08 <SPI_WaitFifoStateUntilTimeout>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d007      	beq.n	800af68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af5c:	f043 0220 	orr.w	r2, r3, #32
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	e027      	b.n	800afb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2200      	movs	r2, #0
 800af70:	2180      	movs	r1, #128	; 0x80
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f7ff fec0 	bl	800acf8 <SPI_WaitFlagStateUntilTimeout>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d007      	beq.n	800af8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af82:	f043 0220 	orr.w	r2, r3, #32
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e014      	b.n	800afb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2200      	movs	r2, #0
 800af96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff ff34 	bl	800ae08 <SPI_WaitFifoStateUntilTimeout>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d007      	beq.n	800afb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afaa:	f043 0220 	orr.w	r2, r3, #32
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e000      	b.n	800afb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <LL_PWR_SetRadioBusyTrigger>:
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800afc8:	4b06      	ldr	r3, [pc, #24]	; (800afe4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afd0:	4904      	ldr	r1, [pc, #16]	; (800afe4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	608b      	str	r3, [r1, #8]
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	bc80      	pop	{r7}
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	58000400 	.word	0x58000400

0800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800afee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff2:	4a04      	ldr	r2, [pc, #16]	; (800b004 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800aff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800affc:	bf00      	nop
 800affe:	46bd      	mov	sp, r7
 800b000:	bc80      	pop	{r7}
 800b002:	4770      	bx	lr
 800b004:	58000400 	.word	0x58000400

0800b008 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b00c:	4b05      	ldr	r3, [pc, #20]	; (800b024 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800b00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b012:	4a04      	ldr	r2, [pc, #16]	; (800b024 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800b014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b01c:	bf00      	nop
 800b01e:	46bd      	mov	sp, r7
 800b020:	bc80      	pop	{r7}
 800b022:	4770      	bx	lr
 800b024:	58000400 	.word	0x58000400

0800b028 <LL_PWR_ClearFlag_RFBUSY>:
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800b02c:	4b03      	ldr	r3, [pc, #12]	; (800b03c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800b02e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b032:	619a      	str	r2, [r3, #24]
}
 800b034:	bf00      	nop
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr
 800b03c:	58000400 	.word	0x58000400

0800b040 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800b044:	4b06      	ldr	r3, [pc, #24]	; (800b060 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800b046:	695b      	ldr	r3, [r3, #20]
 800b048:	f003 0302 	and.w	r3, r3, #2
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d101      	bne.n	800b054 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800b050:	2301      	movs	r3, #1
 800b052:	e000      	b.n	800b056 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	46bd      	mov	sp, r7
 800b05a:	bc80      	pop	{r7}
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	58000400 	.word	0x58000400

0800b064 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800b068:	4b06      	ldr	r3, [pc, #24]	; (800b084 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b04      	cmp	r3, #4
 800b072:	d101      	bne.n	800b078 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800b074:	2301      	movs	r3, #1
 800b076:	e000      	b.n	800b07a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	58000400 	.word	0x58000400

0800b088 <LL_RCC_RF_DisableReset>:
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800b08c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b09c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800b0a0:	bf00      	nop
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bc80      	pop	{r7}
 800b0a6:	4770      	bx	lr

0800b0a8 <LL_RCC_IsRFUnderReset>:
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800b0ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0bc:	d101      	bne.n	800b0c2 <LL_RCC_IsRFUnderReset+0x1a>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e000      	b.n	800b0c4 <LL_RCC_IsRFUnderReset+0x1c>
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bc80      	pop	{r7}
 800b0ca:	4770      	bx	lr

0800b0cc <LL_EXTI_EnableIT_32_63>:
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <LL_EXTI_EnableIT_32_63+0x24>)
 800b0d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b0da:	4905      	ldr	r1, [pc, #20]	; (800b0f0 <LL_EXTI_EnableIT_32_63+0x24>)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bc80      	pop	{r7}
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	58000800 	.word	0x58000800

0800b0f4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d103      	bne.n	800b10a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	73fb      	strb	r3, [r7, #15]
    return status;
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	e052      	b.n	800b1b0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	799b      	ldrb	r3, [r3, #6]
 800b112:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <HAL_SUBGHZ_Init+0x2c>
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d109      	bne.n	800b134 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7f7 f9fe 	bl	8002528 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800b12c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b130:	f7ff ffcc 	bl	800b0cc <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d126      	bne.n	800b188 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2202      	movs	r2, #2
 800b13e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800b140:	f7ff ffa2 	bl	800b088 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b144:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <HAL_SUBGHZ_Init+0xc4>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	4613      	mov	r3, r2
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	1a9b      	subs	r3, r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	0cdb      	lsrs	r3, r3, #19
 800b152:	2264      	movs	r2, #100	; 0x64
 800b154:	fb02 f303 	mul.w	r3, r2, r3
 800b158:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d105      	bne.n	800b16c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	609a      	str	r2, [r3, #8]
        break;
 800b16a:	e007      	b.n	800b17c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	3b01      	subs	r3, #1
 800b170:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800b172:	f7ff ff99 	bl	800b0a8 <LL_RCC_IsRFUnderReset>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1ee      	bne.n	800b15a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b17c:	f7ff ff34 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800b180:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b184:	f7ff ff1c 	bl	800afc0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800b188:	f7ff ff4e 	bl	800b028 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fab6 	bl	800b708 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	719a      	strb	r2, [r3, #6]

  return status;
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20000000 	.word	0x20000000

0800b1bc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	607a      	str	r2, [r7, #4]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	817b      	strh	r3, [r7, #10]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	799b      	ldrb	r3, [r3, #6]
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d14a      	bne.n	800b270 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	795b      	ldrb	r3, [r3, #5]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d101      	bne.n	800b1e6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800b1e2:	2302      	movs	r3, #2
 800b1e4:	e045      	b.n	800b272 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 fb56 	bl	800b8a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b1f8:	f7ff ff06 	bl	800b008 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800b1fc:	210d      	movs	r1, #13
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f000 faa2 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b204:	897b      	ldrh	r3, [r7, #10]
 800b206:	0a1b      	lsrs	r3, r3, #8
 800b208:	b29b      	uxth	r3, r3
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	4619      	mov	r1, r3
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f000 fa9a 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b214:	897b      	ldrh	r3, [r7, #10]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	4619      	mov	r1, r3
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 fa94 	bl	800b748 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b220:	2300      	movs	r3, #0
 800b222:	82bb      	strh	r3, [r7, #20]
 800b224:	e00a      	b.n	800b23c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b226:	8abb      	ldrh	r3, [r7, #20]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	4413      	add	r3, r2
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	4619      	mov	r1, r3
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 fa89 	bl	800b748 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b236:	8abb      	ldrh	r3, [r7, #20]
 800b238:	3301      	adds	r3, #1
 800b23a:	82bb      	strh	r3, [r7, #20]
 800b23c:	8aba      	ldrh	r2, [r7, #20]
 800b23e:	893b      	ldrh	r3, [r7, #8]
 800b240:	429a      	cmp	r2, r3
 800b242:	d3f0      	bcc.n	800b226 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b244:	f7ff fed0 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 fb4f 	bl	800b8ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	75fb      	strb	r3, [r7, #23]
 800b25a:	e001      	b.n	800b260 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2201      	movs	r2, #1
 800b264:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	715a      	strb	r2, [r3, #5]

    return status;
 800b26c:	7dfb      	ldrb	r3, [r7, #23]
 800b26e:	e000      	b.n	800b272 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800b270:	2302      	movs	r3, #2
  }
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b088      	sub	sp, #32
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	461a      	mov	r2, r3
 800b286:	460b      	mov	r3, r1
 800b288:	817b      	strh	r3, [r7, #10]
 800b28a:	4613      	mov	r3, r2
 800b28c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	799b      	ldrb	r3, [r3, #6]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d14a      	bne.n	800b332 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	795b      	ldrb	r3, [r3, #5]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e045      	b.n	800b334 <HAL_SUBGHZ_ReadRegisters+0xba>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 faf8 	bl	800b8a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b2b4:	f7ff fea8 	bl	800b008 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800b2b8:	211d      	movs	r1, #29
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 fa44 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b2c0:	897b      	ldrh	r3, [r7, #10]
 800b2c2:	0a1b      	lsrs	r3, r3, #8
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 fa3c 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b2d0:	897b      	ldrh	r3, [r7, #10]
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 fa36 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800b2dc:	2100      	movs	r1, #0
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f000 fa32 	bl	800b748 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	82fb      	strh	r3, [r7, #22]
 800b2e8:	e009      	b.n	800b2fe <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b2ea:	69b9      	ldr	r1, [r7, #24]
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 fa81 	bl	800b7f4 <SUBGHZSPI_Receive>
      pData++;
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b2f8:	8afb      	ldrh	r3, [r7, #22]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	82fb      	strh	r3, [r7, #22]
 800b2fe:	8afa      	ldrh	r2, [r7, #22]
 800b300:	893b      	ldrh	r3, [r7, #8]
 800b302:	429a      	cmp	r2, r3
 800b304:	d3f1      	bcc.n	800b2ea <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b306:	f7ff fe6f 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f000 faee 	bl	800b8ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	77fb      	strb	r3, [r7, #31]
 800b31c:	e001      	b.n	800b322 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2201      	movs	r2, #1
 800b326:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	715a      	strb	r2, [r3, #5]

    return status;
 800b32e:	7ffb      	ldrb	r3, [r7, #31]
 800b330:	e000      	b.n	800b334 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800b332:	2302      	movs	r3, #2
  }
}
 800b334:	4618      	mov	r0, r3
 800b336:	3720      	adds	r7, #32
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	607a      	str	r2, [r7, #4]
 800b346:	461a      	mov	r2, r3
 800b348:	460b      	mov	r3, r1
 800b34a:	72fb      	strb	r3, [r7, #11]
 800b34c:	4613      	mov	r3, r2
 800b34e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	799b      	ldrb	r3, [r3, #6]
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b01      	cmp	r3, #1
 800b358:	d14a      	bne.n	800b3f0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	795b      	ldrb	r3, [r3, #5]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d101      	bne.n	800b366 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800b362:	2302      	movs	r3, #2
 800b364:	e045      	b.n	800b3f2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2201      	movs	r2, #1
 800b36a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 fa99 	bl	800b8a4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800b372:	7afb      	ldrb	r3, [r7, #11]
 800b374:	2b84      	cmp	r3, #132	; 0x84
 800b376:	d002      	beq.n	800b37e <HAL_SUBGHZ_ExecSetCmd+0x42>
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	2b94      	cmp	r3, #148	; 0x94
 800b37c:	d103      	bne.n	800b386 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2201      	movs	r2, #1
 800b382:	711a      	strb	r2, [r3, #4]
 800b384:	e002      	b.n	800b38c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b38c:	f7ff fe3c 	bl	800b008 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b390:	7afb      	ldrb	r3, [r7, #11]
 800b392:	4619      	mov	r1, r3
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 f9d7 	bl	800b748 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b39a:	2300      	movs	r3, #0
 800b39c:	82bb      	strh	r3, [r7, #20]
 800b39e:	e00a      	b.n	800b3b6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b3a0:	8abb      	ldrh	r3, [r7, #20]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 f9cc 	bl	800b748 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b3b0:	8abb      	ldrh	r3, [r7, #20]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	82bb      	strh	r3, [r7, #20]
 800b3b6:	8aba      	ldrh	r2, [r7, #20]
 800b3b8:	893b      	ldrh	r3, [r7, #8]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d3f0      	bcc.n	800b3a0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b3be:	f7ff fe13 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800b3c2:	7afb      	ldrb	r3, [r7, #11]
 800b3c4:	2b84      	cmp	r3, #132	; 0x84
 800b3c6:	d002      	beq.n	800b3ce <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f000 fa8f 	bl	800b8ec <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]
 800b3da:	e001      	b.n	800b3e0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	715a      	strb	r2, [r3, #5]

    return status;
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	e000      	b.n	800b3f2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800b3f0:	2302      	movs	r3, #2
  }
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b088      	sub	sp, #32
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	461a      	mov	r2, r3
 800b406:	460b      	mov	r3, r1
 800b408:	72fb      	strb	r3, [r7, #11]
 800b40a:	4613      	mov	r3, r2
 800b40c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	799b      	ldrb	r3, [r3, #6]
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d13d      	bne.n	800b498 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	795b      	ldrb	r3, [r3, #5]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800b424:	2302      	movs	r3, #2
 800b426:	e038      	b.n	800b49a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2201      	movs	r2, #1
 800b42c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 fa38 	bl	800b8a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b434:	f7ff fde8 	bl	800b008 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b438:	7afb      	ldrb	r3, [r7, #11]
 800b43a:	4619      	mov	r1, r3
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 f983 	bl	800b748 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b442:	2100      	movs	r1, #0
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 f97f 	bl	800b748 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b44a:	2300      	movs	r3, #0
 800b44c:	82fb      	strh	r3, [r7, #22]
 800b44e:	e009      	b.n	800b464 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b450:	69b9      	ldr	r1, [r7, #24]
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 f9ce 	bl	800b7f4 <SUBGHZSPI_Receive>
      pData++;
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	3301      	adds	r3, #1
 800b45c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b45e:	8afb      	ldrh	r3, [r7, #22]
 800b460:	3301      	adds	r3, #1
 800b462:	82fb      	strh	r3, [r7, #22]
 800b464:	8afa      	ldrh	r2, [r7, #22]
 800b466:	893b      	ldrh	r3, [r7, #8]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d3f1      	bcc.n	800b450 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b46c:	f7ff fdbc 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 fa3b 	bl	800b8ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	77fb      	strb	r3, [r7, #31]
 800b482:	e001      	b.n	800b488 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2201      	movs	r2, #1
 800b48c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	715a      	strb	r2, [r3, #5]

    return status;
 800b494:	7ffb      	ldrb	r3, [r7, #31]
 800b496:	e000      	b.n	800b49a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b498:	2302      	movs	r3, #2
  }
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3720      	adds	r7, #32
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b086      	sub	sp, #24
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	72fb      	strb	r3, [r7, #11]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	799b      	ldrb	r3, [r3, #6]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d13e      	bne.n	800b53e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	795b      	ldrb	r3, [r3, #5]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d101      	bne.n	800b4cc <HAL_SUBGHZ_WriteBuffer+0x2a>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	e039      	b.n	800b540 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f000 f9e6 	bl	800b8a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b4d8:	f7ff fd96 	bl	800b008 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800b4dc:	210e      	movs	r1, #14
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 f932 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f92d 	bl	800b748 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	82bb      	strh	r3, [r7, #20]
 800b4f2:	e00a      	b.n	800b50a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b4f4:	8abb      	ldrh	r3, [r7, #20]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f000 f922 	bl	800b748 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b504:	8abb      	ldrh	r3, [r7, #20]
 800b506:	3301      	adds	r3, #1
 800b508:	82bb      	strh	r3, [r7, #20]
 800b50a:	8aba      	ldrh	r2, [r7, #20]
 800b50c:	893b      	ldrh	r3, [r7, #8]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d3f0      	bcc.n	800b4f4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b512:	f7ff fd69 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f000 f9e8 	bl	800b8ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	75fb      	strb	r3, [r7, #23]
 800b528:	e001      	b.n	800b52e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	715a      	strb	r2, [r3, #5]

    return status;
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	e000      	b.n	800b540 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b53e:	2302      	movs	r3, #2
  }
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	607a      	str	r2, [r7, #4]
 800b552:	461a      	mov	r2, r3
 800b554:	460b      	mov	r3, r1
 800b556:	72fb      	strb	r3, [r7, #11]
 800b558:	4613      	mov	r3, r2
 800b55a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	799b      	ldrb	r3, [r3, #6]
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b01      	cmp	r3, #1
 800b568:	d141      	bne.n	800b5ee <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	795b      	ldrb	r3, [r3, #5]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d101      	bne.n	800b576 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800b572:	2302      	movs	r3, #2
 800b574:	e03c      	b.n	800b5f0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2201      	movs	r2, #1
 800b57a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 f991 	bl	800b8a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b582:	f7ff fd41 	bl	800b008 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800b586:	211e      	movs	r1, #30
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f8dd 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	4619      	mov	r1, r3
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f000 f8d8 	bl	800b748 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b598:	2100      	movs	r1, #0
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 f8d4 	bl	800b748 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	82fb      	strh	r3, [r7, #22]
 800b5a4:	e009      	b.n	800b5ba <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b5a6:	69b9      	ldr	r1, [r7, #24]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f923 	bl	800b7f4 <SUBGHZSPI_Receive>
      pData++;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b5b4:	8afb      	ldrh	r3, [r7, #22]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	82fb      	strh	r3, [r7, #22]
 800b5ba:	8afa      	ldrh	r2, [r7, #22]
 800b5bc:	893b      	ldrh	r3, [r7, #8]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d3f1      	bcc.n	800b5a6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b5c2:	f7ff fd11 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f000 f990 	bl	800b8ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	77fb      	strb	r3, [r7, #31]
 800b5d8:	e001      	b.n	800b5de <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	715a      	strb	r2, [r3, #5]

    return status;
 800b5ea:	7ffb      	ldrb	r3, [r7, #31]
 800b5ec:	e000      	b.n	800b5f0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b5ee:	2302      	movs	r3, #2
  }
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3720      	adds	r7, #32
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800b600:	2300      	movs	r3, #0
 800b602:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800b604:	f107 020c 	add.w	r2, r7, #12
 800b608:	2302      	movs	r3, #2
 800b60a:	2112      	movs	r1, #18
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff fef4 	bl	800b3fa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800b612:	7b3b      	ldrb	r3, [r7, #12]
 800b614:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800b616:	89fb      	ldrh	r3, [r7, #14]
 800b618:	021b      	lsls	r3, r3, #8
 800b61a:	b21a      	sxth	r2, r3
 800b61c:	7b7b      	ldrb	r3, [r7, #13]
 800b61e:	b21b      	sxth	r3, r3
 800b620:	4313      	orrs	r3, r2
 800b622:	b21b      	sxth	r3, r3
 800b624:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800b626:	f107 020c 	add.w	r2, r7, #12
 800b62a:	2302      	movs	r3, #2
 800b62c:	2102      	movs	r1, #2
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff fe84 	bl	800b33c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800b634:	89fb      	ldrh	r3, [r7, #14]
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f013 fa4c 	bl	801eadc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	085b      	lsrs	r3, r3, #1
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f013 fa51 	bl	801eaf8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800b656:	89fb      	ldrh	r3, [r7, #14]
 800b658:	089b      	lsrs	r3, r3, #2
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f013 faa0 	bl	801eba8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800b668:	89fb      	ldrh	r3, [r7, #14]
 800b66a:	08db      	lsrs	r3, r3, #3
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f013 faa5 	bl	801ebc4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800b67a:	89fb      	ldrh	r3, [r7, #14]
 800b67c:	091b      	lsrs	r3, r3, #4
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f013 faaa 	bl	801ebe0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800b68c:	89fb      	ldrh	r3, [r7, #14]
 800b68e:	095b      	lsrs	r3, r3, #5
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f013 fa77 	bl	801eb8c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800b69e:	89fb      	ldrh	r3, [r7, #14]
 800b6a0:	099b      	lsrs	r3, r3, #6
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f013 fa32 	bl	801eb14 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800b6b0:	89fb      	ldrh	r3, [r7, #14]
 800b6b2:	09db      	lsrs	r3, r3, #7
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00e      	beq.n	800b6da <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800b6bc:	89fb      	ldrh	r3, [r7, #14]
 800b6be:	0a1b      	lsrs	r3, r3, #8
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d004      	beq.n	800b6d2 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f013 fa30 	bl	801eb30 <HAL_SUBGHZ_CADStatusCallback>
 800b6d0:	e003      	b.n	800b6da <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f013 fa2b 	bl	801eb30 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800b6da:	89fb      	ldrh	r3, [r7, #14]
 800b6dc:	0a5b      	lsrs	r3, r3, #9
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f013 fa40 	bl	801eb6c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800b6ec:	89fb      	ldrh	r3, [r7, #14]
 800b6ee:	0b9b      	lsrs	r3, r3, #14
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f013 fa7f 	bl	801ebfc <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800b6fe:	bf00      	nop
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
	...

0800b708 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b710:	4b0c      	ldr	r3, [pc, #48]	; (800b744 <SUBGHZSPI_Init+0x3c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a0b      	ldr	r2, [pc, #44]	; (800b744 <SUBGHZSPI_Init+0x3c>)
 800b716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b71a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800b71c:	4a09      	ldr	r2, [pc, #36]	; (800b744 <SUBGHZSPI_Init+0x3c>)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800b724:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800b726:	4b07      	ldr	r3, [pc, #28]	; (800b744 <SUBGHZSPI_Init+0x3c>)
 800b728:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800b72c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b72e:	4b05      	ldr	r3, [pc, #20]	; (800b744 <SUBGHZSPI_Init+0x3c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a04      	ldr	r2, [pc, #16]	; (800b744 <SUBGHZSPI_Init+0x3c>)
 800b734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b738:	6013      	str	r3, [r2, #0]
}
 800b73a:	bf00      	nop
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr
 800b744:	58010000 	.word	0x58010000

0800b748 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b758:	4b23      	ldr	r3, [pc, #140]	; (800b7e8 <SUBGHZSPI_Transmit+0xa0>)
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	4613      	mov	r3, r2
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	1a9b      	subs	r3, r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	0cdb      	lsrs	r3, r3, #19
 800b766:	2264      	movs	r2, #100	; 0x64
 800b768:	fb02 f303 	mul.w	r3, r2, r3
 800b76c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d105      	bne.n	800b780 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	609a      	str	r2, [r3, #8]
      break;
 800b77e:	e008      	b.n	800b792 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3b01      	subs	r3, #1
 800b784:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b786:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <SUBGHZSPI_Transmit+0xa4>)
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 0302 	and.w	r3, r3, #2
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d1ed      	bne.n	800b76e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800b792:	4b17      	ldr	r3, [pc, #92]	; (800b7f0 <SUBGHZSPI_Transmit+0xa8>)
 800b794:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	78fa      	ldrb	r2, [r7, #3]
 800b79a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b79c:	4b12      	ldr	r3, [pc, #72]	; (800b7e8 <SUBGHZSPI_Transmit+0xa0>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	1a9b      	subs	r3, r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	0cdb      	lsrs	r3, r3, #19
 800b7aa:	2264      	movs	r2, #100	; 0x64
 800b7ac:	fb02 f303 	mul.w	r3, r2, r3
 800b7b0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d105      	bne.n	800b7c4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	609a      	str	r2, [r3, #8]
      break;
 800b7c2:	e008      	b.n	800b7d6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b7ca:	4b08      	ldr	r3, [pc, #32]	; (800b7ec <SUBGHZSPI_Transmit+0xa4>)
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d1ed      	bne.n	800b7b2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800b7d6:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <SUBGHZSPI_Transmit+0xa4>)
 800b7d8:	68db      	ldr	r3, [r3, #12]

  return status;
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	371c      	adds	r7, #28
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bc80      	pop	{r7}
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	20000000 	.word	0x20000000
 800b7ec:	58010000 	.word	0x58010000
 800b7f0:	5801000c 	.word	0x5801000c

0800b7f4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b802:	4b25      	ldr	r3, [pc, #148]	; (800b898 <SUBGHZSPI_Receive+0xa4>)
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	4613      	mov	r3, r2
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	0cdb      	lsrs	r3, r3, #19
 800b810:	2264      	movs	r2, #100	; 0x64
 800b812:	fb02 f303 	mul.w	r3, r2, r3
 800b816:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d105      	bne.n	800b82a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	609a      	str	r2, [r3, #8]
      break;
 800b828:	e008      	b.n	800b83c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b830:	4b1a      	ldr	r3, [pc, #104]	; (800b89c <SUBGHZSPI_Receive+0xa8>)
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d1ed      	bne.n	800b818 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800b83c:	4b18      	ldr	r3, [pc, #96]	; (800b8a0 <SUBGHZSPI_Receive+0xac>)
 800b83e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	22ff      	movs	r2, #255	; 0xff
 800b844:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b846:	4b14      	ldr	r3, [pc, #80]	; (800b898 <SUBGHZSPI_Receive+0xa4>)
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	4613      	mov	r3, r2
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	0cdb      	lsrs	r3, r3, #19
 800b854:	2264      	movs	r2, #100	; 0x64
 800b856:	fb02 f303 	mul.w	r3, r2, r3
 800b85a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d105      	bne.n	800b86e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	609a      	str	r2, [r3, #8]
      break;
 800b86c:	e008      	b.n	800b880 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3b01      	subs	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b874:	4b09      	ldr	r3, [pc, #36]	; (800b89c <SUBGHZSPI_Receive+0xa8>)
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d1ed      	bne.n	800b85c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800b880:	4b06      	ldr	r3, [pc, #24]	; (800b89c <SUBGHZSPI_Receive+0xa8>)
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	b2da      	uxtb	r2, r3
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	701a      	strb	r2, [r3, #0]

  return status;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	371c      	adds	r7, #28
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	20000000 	.word	0x20000000
 800b89c:	58010000 	.word	0x58010000
 800b8a0:	5801000c 	.word	0x5801000c

0800b8a4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	791b      	ldrb	r3, [r3, #4]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d111      	bne.n	800b8d8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <SUBGHZ_CheckDeviceReady+0x44>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	4413      	add	r3, r2
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	0c1b      	lsrs	r3, r3, #16
 800b8c2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b8c4:	f7ff fba0 	bl	800b008 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1f9      	bne.n	800b8c8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b8d4:	f7ff fb88 	bl	800afe8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f807 	bl	800b8ec <SUBGHZ_WaitOnBusy>
 800b8de:	4603      	mov	r3, r0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20000000 	.word	0x20000000

0800b8ec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800b8f8:	4b12      	ldr	r3, [pc, #72]	; (800b944 <SUBGHZ_WaitOnBusy+0x58>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	005b      	lsls	r3, r3, #1
 800b900:	4413      	add	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	0d1b      	lsrs	r3, r3, #20
 800b906:	2264      	movs	r2, #100	; 0x64
 800b908:	fb02 f303 	mul.w	r3, r2, r3
 800b90c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800b90e:	f7ff fba9 	bl	800b064 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800b912:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d105      	bne.n	800b926 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2202      	movs	r2, #2
 800b922:	609a      	str	r2, [r3, #8]
      break;
 800b924:	e009      	b.n	800b93a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3b01      	subs	r3, #1
 800b92a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800b92c:	f7ff fb88 	bl	800b040 <LL_PWR_IsActiveFlag_RFBUSYS>
 800b930:	4602      	mov	r2, r0
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	4013      	ands	r3, r2
 800b936:	2b01      	cmp	r3, #1
 800b938:	d0e9      	beq.n	800b90e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20000000 	.word	0x20000000

0800b948 <LL_RCC_GetUSARTClockSource>:
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800b950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b954:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	401a      	ands	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	041b      	lsls	r3, r3, #16
 800b960:	4313      	orrs	r3, r2
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	bc80      	pop	{r7}
 800b96a:	4770      	bx	lr

0800b96c <LL_RCC_GetLPUARTClockSource>:
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4013      	ands	r3, r2
}
 800b980:	4618      	mov	r0, r3
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	bc80      	pop	{r7}
 800b988:	4770      	bx	lr

0800b98a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e042      	b.n	800ba22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7f7 fae2 	bl	8002f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2224      	movs	r2, #36	; 0x24
 800b9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f022 0201 	bic.w	r2, r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fd85 	bl	800c4dc <UART_SetConfig>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d101      	bne.n	800b9dc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e022      	b.n	800ba22 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 ffed 	bl	800c9c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	685a      	ldr	r2, [r3, #4]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689a      	ldr	r2, [r3, #8]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f042 0201 	orr.w	r2, r2, #1
 800ba18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f001 f873 	bl	800cb06 <UART_CheckIdleState>
 800ba20:	4603      	mov	r3, r0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b08a      	sub	sp, #40	; 0x28
 800ba2e:	af02      	add	r7, sp, #8
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	60b9      	str	r1, [r7, #8]
 800ba34:	603b      	str	r3, [r7, #0]
 800ba36:	4613      	mov	r3, r2
 800ba38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba40:	2b20      	cmp	r3, #32
 800ba42:	d173      	bne.n	800bb2c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <HAL_UART_Transmit+0x26>
 800ba4a:	88fb      	ldrh	r3, [r7, #6]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e06c      	b.n	800bb2e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2221      	movs	r2, #33	; 0x21
 800ba60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba64:	f7f6 ff08 	bl	8002878 <HAL_GetTick>
 800ba68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	88fa      	ldrh	r2, [r7, #6]
 800ba6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	88fa      	ldrh	r2, [r7, #6]
 800ba76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba82:	d108      	bne.n	800ba96 <HAL_UART_Transmit+0x6c>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d104      	bne.n	800ba96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	61bb      	str	r3, [r7, #24]
 800ba94:	e003      	b.n	800ba9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ba9e:	e02c      	b.n	800bafa <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2180      	movs	r1, #128	; 0x80
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f001 f879 	bl	800cba2 <UART_WaitOnFlagUntilTimeout>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	e039      	b.n	800bb2e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10b      	bne.n	800bad8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	461a      	mov	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bace:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	3302      	adds	r3, #2
 800bad4:	61bb      	str	r3, [r7, #24]
 800bad6:	e007      	b.n	800bae8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	781a      	ldrb	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	3301      	adds	r3, #1
 800bae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800baee:	b29b      	uxth	r3, r3
 800baf0:	3b01      	subs	r3, #1
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1cc      	bne.n	800baa0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2140      	movs	r1, #64	; 0x40
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f001 f846 	bl	800cba2 <UART_WaitOnFlagUntilTimeout>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e006      	b.n	800bb2e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2220      	movs	r2, #32
 800bb24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	e000      	b.n	800bb2e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800bb2c:	2302      	movs	r3, #2
  }
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3720      	adds	r7, #32
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b08a      	sub	sp, #40	; 0x28
 800bb3a:	af02      	add	r7, sp, #8
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	603b      	str	r3, [r7, #0]
 800bb42:	4613      	mov	r3, r2
 800bb44:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb4c:	2b20      	cmp	r3, #32
 800bb4e:	f040 80b1 	bne.w	800bcb4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <HAL_UART_Receive+0x28>
 800bb58:	88fb      	ldrh	r3, [r7, #6]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e0a9      	b.n	800bcb6 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2222      	movs	r2, #34	; 0x22
 800bb6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb78:	f7f6 fe7e 	bl	8002878 <HAL_GetTick>
 800bb7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	88fa      	ldrh	r2, [r7, #6]
 800bb82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	88fa      	ldrh	r2, [r7, #6]
 800bb8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb96:	d10e      	bne.n	800bbb6 <HAL_UART_Receive+0x80>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <HAL_UART_Receive+0x76>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbaa:	e02d      	b.n	800bc08 <HAL_UART_Receive+0xd2>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	22ff      	movs	r2, #255	; 0xff
 800bbb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbb4:	e028      	b.n	800bc08 <HAL_UART_Receive+0xd2>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10d      	bne.n	800bbda <HAL_UART_Receive+0xa4>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d104      	bne.n	800bbd0 <HAL_UART_Receive+0x9a>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	22ff      	movs	r2, #255	; 0xff
 800bbca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbce:	e01b      	b.n	800bc08 <HAL_UART_Receive+0xd2>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	227f      	movs	r2, #127	; 0x7f
 800bbd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbd8:	e016      	b.n	800bc08 <HAL_UART_Receive+0xd2>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbe2:	d10d      	bne.n	800bc00 <HAL_UART_Receive+0xca>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d104      	bne.n	800bbf6 <HAL_UART_Receive+0xc0>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	227f      	movs	r2, #127	; 0x7f
 800bbf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbf4:	e008      	b.n	800bc08 <HAL_UART_Receive+0xd2>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	223f      	movs	r2, #63	; 0x3f
 800bbfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bbfe:	e003      	b.n	800bc08 <HAL_UART_Receive+0xd2>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc18:	d108      	bne.n	800bc2c <HAL_UART_Receive+0xf6>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d104      	bne.n	800bc2c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	61bb      	str	r3, [r7, #24]
 800bc2a:	e003      	b.n	800bc34 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc30:	2300      	movs	r3, #0
 800bc32:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bc34:	e032      	b.n	800bc9c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2120      	movs	r1, #32
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f000 ffae 	bl	800cba2 <UART_WaitOnFlagUntilTimeout>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e032      	b.n	800bcb6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10c      	bne.n	800bc70 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	8a7b      	ldrh	r3, [r7, #18]
 800bc60:	4013      	ands	r3, r2
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	3302      	adds	r3, #2
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	e00c      	b.n	800bc8a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	8a7b      	ldrh	r3, [r7, #18]
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	3301      	adds	r3, #1
 800bc88:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1c6      	bne.n	800bc36 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e000      	b.n	800bcb6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800bcb4:	2302      	movs	r3, #2
  }
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08a      	sub	sp, #40	; 0x28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	4613      	mov	r3, r2
 800bccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d137      	bne.n	800bd48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <HAL_UART_Receive_IT+0x24>
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e030      	b.n	800bd4a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a18      	ldr	r2, [pc, #96]	; (800bd54 <HAL_UART_Receive_IT+0x94>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d01f      	beq.n	800bd38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d018      	beq.n	800bd38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	e853 3f00 	ldrex	r3, [r3]
 800bd12:	613b      	str	r3, [r7, #16]
   return(result);
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	623b      	str	r3, [r7, #32]
 800bd26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd28:	69f9      	ldr	r1, [r7, #28]
 800bd2a:	6a3a      	ldr	r2, [r7, #32]
 800bd2c:	e841 2300 	strex	r3, r2, [r1]
 800bd30:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1e6      	bne.n	800bd06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	68b9      	ldr	r1, [r7, #8]
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 fff8 	bl	800cd34 <UART_Start_Receive_IT>
 800bd44:	4603      	mov	r3, r0
 800bd46:	e000      	b.n	800bd4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bd48:	2302      	movs	r3, #2
  }
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3728      	adds	r7, #40	; 0x28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	40008000 	.word	0x40008000

0800bd58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08a      	sub	sp, #40	; 0x28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	4613      	mov	r3, r2
 800bd64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd6c:	2b20      	cmp	r3, #32
 800bd6e:	d167      	bne.n	800be40 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <HAL_UART_Transmit_DMA+0x24>
 800bd76:	88fb      	ldrh	r3, [r7, #6]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e060      	b.n	800be42 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	88fa      	ldrh	r2, [r7, #6]
 800bd8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	88fa      	ldrh	r2, [r7, #6]
 800bd92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2221      	movs	r2, #33	; 0x21
 800bda2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d028      	beq.n	800be00 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb2:	4a26      	ldr	r2, [pc, #152]	; (800be4c <HAL_UART_Transmit_DMA+0xf4>)
 800bdb4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdba:	4a25      	ldr	r2, [pc, #148]	; (800be50 <HAL_UART_Transmit_DMA+0xf8>)
 800bdbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc2:	4a24      	ldr	r2, [pc, #144]	; (800be54 <HAL_UART_Transmit_DMA+0xfc>)
 800bdc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdca:	2200      	movs	r2, #0
 800bdcc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3328      	adds	r3, #40	; 0x28
 800bdde:	461a      	mov	r2, r3
 800bde0:	88fb      	ldrh	r3, [r7, #6]
 800bde2:	f7fb f901 	bl	8006fe8 <HAL_DMA_Start_IT>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d009      	beq.n	800be00 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2210      	movs	r2, #16
 800bdf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e020      	b.n	800be42 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2240      	movs	r2, #64	; 0x40
 800be06:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3308      	adds	r3, #8
 800be0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	e853 3f00 	ldrex	r3, [r3]
 800be16:	613b      	str	r3, [r7, #16]
   return(result);
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be1e:	627b      	str	r3, [r7, #36]	; 0x24
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3308      	adds	r3, #8
 800be26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be28:	623a      	str	r2, [r7, #32]
 800be2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2c:	69f9      	ldr	r1, [r7, #28]
 800be2e:	6a3a      	ldr	r2, [r7, #32]
 800be30:	e841 2300 	strex	r3, r2, [r1]
 800be34:	61bb      	str	r3, [r7, #24]
   return(result);
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1e5      	bne.n	800be08 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	e000      	b.n	800be42 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800be40:	2302      	movs	r3, #2
  }
}
 800be42:	4618      	mov	r0, r3
 800be44:	3728      	adds	r7, #40	; 0x28
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	0800d0bf 	.word	0x0800d0bf
 800be50:	0800d159 	.word	0x0800d159
 800be54:	0800d175 	.word	0x0800d175

0800be58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b0ba      	sub	sp, #232	; 0xe8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	69db      	ldr	r3, [r3, #28]
 800be66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800be82:	f640 030f 	movw	r3, #2063	; 0x80f
 800be86:	4013      	ands	r3, r2
 800be88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800be8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be90:	2b00      	cmp	r3, #0
 800be92:	d11b      	bne.n	800becc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be98:	f003 0320 	and.w	r3, r3, #32
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d015      	beq.n	800becc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bea4:	f003 0320 	and.w	r3, r3, #32
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d105      	bne.n	800beb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800beac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d009      	beq.n	800becc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 82e3 	beq.w	800c488 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	4798      	blx	r3
      }
      return;
 800beca:	e2dd      	b.n	800c488 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800becc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 8123 	beq.w	800c11c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800beda:	4b8d      	ldr	r3, [pc, #564]	; (800c110 <HAL_UART_IRQHandler+0x2b8>)
 800bedc:	4013      	ands	r3, r2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bee6:	4b8b      	ldr	r3, [pc, #556]	; (800c114 <HAL_UART_IRQHandler+0x2bc>)
 800bee8:	4013      	ands	r3, r2
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 8116 	beq.w	800c11c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d011      	beq.n	800bf20 <HAL_UART_IRQHandler+0xc8>
 800befc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00b      	beq.n	800bf20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf16:	f043 0201 	orr.w	r2, r3, #1
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf24:	f003 0302 	and.w	r3, r3, #2
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d011      	beq.n	800bf50 <HAL_UART_IRQHandler+0xf8>
 800bf2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00b      	beq.n	800bf50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf46:	f043 0204 	orr.w	r2, r3, #4
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf54:	f003 0304 	and.w	r3, r3, #4
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d011      	beq.n	800bf80 <HAL_UART_IRQHandler+0x128>
 800bf5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf60:	f003 0301 	and.w	r3, r3, #1
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00b      	beq.n	800bf80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2204      	movs	r2, #4
 800bf6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf76:	f043 0202 	orr.w	r2, r3, #2
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf84:	f003 0308 	and.w	r3, r3, #8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d017      	beq.n	800bfbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf90:	f003 0320 	and.w	r3, r3, #32
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d105      	bne.n	800bfa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf9c:	4b5c      	ldr	r3, [pc, #368]	; (800c110 <HAL_UART_IRQHandler+0x2b8>)
 800bf9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00b      	beq.n	800bfbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfb2:	f043 0208 	orr.w	r2, r3, #8
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bfbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d012      	beq.n	800bfee <HAL_UART_IRQHandler+0x196>
 800bfc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00c      	beq.n	800bfee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfe4:	f043 0220 	orr.w	r2, r3, #32
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 8249 	beq.w	800c48c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bffe:	f003 0320 	and.w	r3, r3, #32
 800c002:	2b00      	cmp	r3, #0
 800c004:	d013      	beq.n	800c02e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d105      	bne.n	800c01e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d007      	beq.n	800c02e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c042:	2b40      	cmp	r3, #64	; 0x40
 800c044:	d005      	beq.n	800c052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c04a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d054      	beq.n	800c0fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 ffce 	bl	800cff4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c062:	2b40      	cmp	r3, #64	; 0x40
 800c064:	d146      	bne.n	800c0f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3308      	adds	r3, #8
 800c06c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c07c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3308      	adds	r3, #8
 800c08e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c09e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c0a2:	e841 2300 	strex	r3, r2, [r1]
 800c0a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1d9      	bne.n	800c066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d017      	beq.n	800c0ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0c2:	4a15      	ldr	r2, [pc, #84]	; (800c118 <HAL_UART_IRQHandler+0x2c0>)
 800c0c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fb f867 	bl	80071a0 <HAL_DMA_Abort_IT>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d019      	beq.n	800c10c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0ea:	e00f      	b.n	800c10c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f9e0 	bl	800c4b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0f2:	e00b      	b.n	800c10c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f9dc 	bl	800c4b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0fa:	e007      	b.n	800c10c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f9d8 	bl	800c4b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c10a:	e1bf      	b.n	800c48c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c10c:	bf00      	nop
    return;
 800c10e:	e1bd      	b.n	800c48c <HAL_UART_IRQHandler+0x634>
 800c110:	10000001 	.word	0x10000001
 800c114:	04000120 	.word	0x04000120
 800c118:	0800d1f5 	.word	0x0800d1f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c120:	2b01      	cmp	r3, #1
 800c122:	f040 8153 	bne.w	800c3cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c12a:	f003 0310 	and.w	r3, r3, #16
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 814c 	beq.w	800c3cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c138:	f003 0310 	and.w	r3, r3, #16
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f000 8145 	beq.w	800c3cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2210      	movs	r2, #16
 800c148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c154:	2b40      	cmp	r3, #64	; 0x40
 800c156:	f040 80bb 	bne.w	800c2d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 818f 	beq.w	800c490 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c17c:	429a      	cmp	r2, r3
 800c17e:	f080 8187 	bcs.w	800c490 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 0320 	and.w	r3, r3, #32
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f040 8087 	bne.w	800c2ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1ac:	e853 3f00 	ldrex	r3, [r3]
 800c1b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c1d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c1da:	e841 2300 	strex	r3, r2, [r1]
 800c1de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c1e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1da      	bne.n	800c1a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c1fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1fc:	f023 0301 	bic.w	r3, r3, #1
 800c200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	3308      	adds	r3, #8
 800c20a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c20e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c21a:	e841 2300 	strex	r3, r2, [r1]
 800c21e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1e1      	bne.n	800c1ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3308      	adds	r3, #8
 800c22c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c230:	e853 3f00 	ldrex	r3, [r3]
 800c234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c23c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3308      	adds	r3, #8
 800c246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c24a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c24c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c252:	e841 2300 	strex	r3, r2, [r1]
 800c256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1e3      	bne.n	800c226 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2220      	movs	r2, #32
 800c262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c274:	e853 3f00 	ldrex	r3, [r3]
 800c278:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c27a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c27c:	f023 0310 	bic.w	r3, r3, #16
 800c280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c28e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c290:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e4      	bne.n	800c26c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fa ff1b 	bl	80070e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f8fb 	bl	800c4c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2ce:	e0df      	b.n	800c490 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 80d1 	beq.w	800c494 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800c2f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 80cc 	beq.w	800c494 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c30c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	461a      	mov	r2, r3
 800c31a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c31e:	647b      	str	r3, [r7, #68]	; 0x44
 800c320:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e4      	bne.n	800c2fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3308      	adds	r3, #8
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	e853 3f00 	ldrex	r3, [r3]
 800c340:	623b      	str	r3, [r7, #32]
   return(result);
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c348:	f023 0301 	bic.w	r3, r3, #1
 800c34c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3308      	adds	r3, #8
 800c356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c35a:	633a      	str	r2, [r7, #48]	; 0x30
 800c35c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c362:	e841 2300 	strex	r3, r2, [r1]
 800c366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1e1      	bne.n	800c332 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2220      	movs	r2, #32
 800c372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f023 0310 	bic.w	r3, r3, #16
 800c396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c3a4:	61fb      	str	r3, [r7, #28]
 800c3a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	69b9      	ldr	r1, [r7, #24]
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	617b      	str	r3, [r7, #20]
   return(result);
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e4      	bne.n	800c382 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f87d 	bl	800c4c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3ca:	e063      	b.n	800c494 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00e      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x59e>
 800c3d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d008      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c3ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f001 fc5e 	bl	800dcb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3f4:	e051      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d014      	beq.n	800c42c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d105      	bne.n	800c41a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c416:	2b00      	cmp	r3, #0
 800c418:	d008      	beq.n	800c42c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d03a      	beq.n	800c498 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	4798      	blx	r3
    }
    return;
 800c42a:	e035      	b.n	800c498 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c434:	2b00      	cmp	r3, #0
 800c436:	d009      	beq.n	800c44c <HAL_UART_IRQHandler+0x5f4>
 800c438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 feeb 	bl	800d220 <UART_EndTransmit_IT>
    return;
 800c44a:	e026      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d009      	beq.n	800c46c <HAL_UART_IRQHandler+0x614>
 800c458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c45c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f001 fc35 	bl	800dcd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c46a:	e016      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d010      	beq.n	800c49a <HAL_UART_IRQHandler+0x642>
 800c478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	da0c      	bge.n	800c49a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f001 fc1e 	bl	800dcc2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c486:	e008      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
      return;
 800c488:	bf00      	nop
 800c48a:	e006      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
    return;
 800c48c:	bf00      	nop
 800c48e:	e004      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
      return;
 800c490:	bf00      	nop
 800c492:	e002      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
      return;
 800c494:	bf00      	nop
 800c496:	e000      	b.n	800c49a <HAL_UART_IRQHandler+0x642>
    return;
 800c498:	bf00      	nop
  }
}
 800c49a:	37e8      	adds	r7, #232	; 0xe8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bc80      	pop	{r7}
 800c4b0:	4770      	bx	lr

0800c4b2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c4ba:	bf00      	nop
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bc80      	pop	{r7}
 800c4c2:	4770      	bx	lr

0800c4c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bc80      	pop	{r7}
 800c4d8:	4770      	bx	lr
	...

0800c4dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4e0:	b08c      	sub	sp, #48	; 0x30
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	431a      	orrs	r2, r3
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	4313      	orrs	r3, r2
 800c502:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	4b94      	ldr	r3, [pc, #592]	; (800c75c <UART_SetConfig+0x280>)
 800c50c:	4013      	ands	r3, r2
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	6812      	ldr	r2, [r2, #0]
 800c512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c514:	430b      	orrs	r3, r1
 800c516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	68da      	ldr	r2, [r3, #12]
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	430a      	orrs	r2, r1
 800c52c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a89      	ldr	r2, [pc, #548]	; (800c760 <UART_SetConfig+0x284>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d004      	beq.n	800c548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	6a1b      	ldr	r3, [r3, #32]
 800c542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c544:	4313      	orrs	r3, r2
 800c546:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c552:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	6812      	ldr	r2, [r2, #0]
 800c55a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c55c:	430b      	orrs	r3, r1
 800c55e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c566:	f023 010f 	bic.w	r1, r3, #15
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	430a      	orrs	r2, r1
 800c574:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a7a      	ldr	r2, [pc, #488]	; (800c764 <UART_SetConfig+0x288>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d127      	bne.n	800c5d0 <UART_SetConfig+0xf4>
 800c580:	2003      	movs	r0, #3
 800c582:	f7ff f9e1 	bl	800b948 <LL_RCC_GetUSARTClockSource>
 800c586:	4603      	mov	r3, r0
 800c588:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d81b      	bhi.n	800c5c8 <UART_SetConfig+0xec>
 800c590:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <UART_SetConfig+0xbc>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5a9 	.word	0x0800c5a9
 800c59c:	0800c5b9 	.word	0x0800c5b9
 800c5a0:	0800c5b1 	.word	0x0800c5b1
 800c5a4:	0800c5c1 	.word	0x0800c5c1
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5ae:	e080      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5b6:	e07c      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c5b8:	2304      	movs	r3, #4
 800c5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5be:	e078      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5c6:	e074      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c5c8:	2310      	movs	r3, #16
 800c5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5ce:	e070      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a64      	ldr	r2, [pc, #400]	; (800c768 <UART_SetConfig+0x28c>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d138      	bne.n	800c64c <UART_SetConfig+0x170>
 800c5da:	200c      	movs	r0, #12
 800c5dc:	f7ff f9b4 	bl	800b948 <LL_RCC_GetUSARTClockSource>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800c5e6:	2b0c      	cmp	r3, #12
 800c5e8:	d82c      	bhi.n	800c644 <UART_SetConfig+0x168>
 800c5ea:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <UART_SetConfig+0x114>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c625 	.word	0x0800c625
 800c5f4:	0800c645 	.word	0x0800c645
 800c5f8:	0800c645 	.word	0x0800c645
 800c5fc:	0800c645 	.word	0x0800c645
 800c600:	0800c635 	.word	0x0800c635
 800c604:	0800c645 	.word	0x0800c645
 800c608:	0800c645 	.word	0x0800c645
 800c60c:	0800c645 	.word	0x0800c645
 800c610:	0800c62d 	.word	0x0800c62d
 800c614:	0800c645 	.word	0x0800c645
 800c618:	0800c645 	.word	0x0800c645
 800c61c:	0800c645 	.word	0x0800c645
 800c620:	0800c63d 	.word	0x0800c63d
 800c624:	2300      	movs	r3, #0
 800c626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c62a:	e042      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c62c:	2302      	movs	r3, #2
 800c62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c632:	e03e      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c634:	2304      	movs	r3, #4
 800c636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c63a:	e03a      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c63c:	2308      	movs	r3, #8
 800c63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c642:	e036      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c644:	2310      	movs	r3, #16
 800c646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c64a:	e032      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a43      	ldr	r2, [pc, #268]	; (800c760 <UART_SetConfig+0x284>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d12a      	bne.n	800c6ac <UART_SetConfig+0x1d0>
 800c656:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c65a:	f7ff f987 	bl	800b96c <LL_RCC_GetLPUARTClockSource>
 800c65e:	4603      	mov	r3, r0
 800c660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c664:	d01a      	beq.n	800c69c <UART_SetConfig+0x1c0>
 800c666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c66a:	d81b      	bhi.n	800c6a4 <UART_SetConfig+0x1c8>
 800c66c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c670:	d00c      	beq.n	800c68c <UART_SetConfig+0x1b0>
 800c672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c676:	d815      	bhi.n	800c6a4 <UART_SetConfig+0x1c8>
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <UART_SetConfig+0x1a8>
 800c67c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c680:	d008      	beq.n	800c694 <UART_SetConfig+0x1b8>
 800c682:	e00f      	b.n	800c6a4 <UART_SetConfig+0x1c8>
 800c684:	2300      	movs	r3, #0
 800c686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c68a:	e012      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c68c:	2302      	movs	r3, #2
 800c68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c692:	e00e      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c694:	2304      	movs	r3, #4
 800c696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c69a:	e00a      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c69c:	2308      	movs	r3, #8
 800c69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6a2:	e006      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6aa:	e002      	b.n	800c6b2 <UART_SetConfig+0x1d6>
 800c6ac:	2310      	movs	r3, #16
 800c6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a2a      	ldr	r2, [pc, #168]	; (800c760 <UART_SetConfig+0x284>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	f040 80a4 	bne.w	800c806 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c6be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6c2:	2b08      	cmp	r3, #8
 800c6c4:	d823      	bhi.n	800c70e <UART_SetConfig+0x232>
 800c6c6:	a201      	add	r2, pc, #4	; (adr r2, 800c6cc <UART_SetConfig+0x1f0>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c6f1 	.word	0x0800c6f1
 800c6d0:	0800c70f 	.word	0x0800c70f
 800c6d4:	0800c6f9 	.word	0x0800c6f9
 800c6d8:	0800c70f 	.word	0x0800c70f
 800c6dc:	0800c6ff 	.word	0x0800c6ff
 800c6e0:	0800c70f 	.word	0x0800c70f
 800c6e4:	0800c70f 	.word	0x0800c70f
 800c6e8:	0800c70f 	.word	0x0800c70f
 800c6ec:	0800c707 	.word	0x0800c707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6f0:	f7fd fa2e 	bl	8009b50 <HAL_RCC_GetPCLK1Freq>
 800c6f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c6f6:	e010      	b.n	800c71a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6f8:	4b1c      	ldr	r3, [pc, #112]	; (800c76c <UART_SetConfig+0x290>)
 800c6fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c6fc:	e00d      	b.n	800c71a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6fe:	f7fd f973 	bl	80099e8 <HAL_RCC_GetSysClockFreq>
 800c702:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c704:	e009      	b.n	800c71a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c70a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c70c:	e005      	b.n	800c71a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800c70e:	2300      	movs	r3, #0
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 8137 	beq.w	800c990 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c726:	4a12      	ldr	r2, [pc, #72]	; (800c770 <UART_SetConfig+0x294>)
 800c728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c72c:	461a      	mov	r2, r3
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	fbb3 f3f2 	udiv	r3, r3, r2
 800c734:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	4613      	mov	r3, r2
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	4413      	add	r3, r2
 800c740:	69ba      	ldr	r2, [r7, #24]
 800c742:	429a      	cmp	r2, r3
 800c744:	d305      	bcc.n	800c752 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c74c:	69ba      	ldr	r2, [r7, #24]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d910      	bls.n	800c774 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c758:	e11a      	b.n	800c990 <UART_SetConfig+0x4b4>
 800c75a:	bf00      	nop
 800c75c:	cfff69f3 	.word	0xcfff69f3
 800c760:	40008000 	.word	0x40008000
 800c764:	40013800 	.word	0x40013800
 800c768:	40004400 	.word	0x40004400
 800c76c:	00f42400 	.word	0x00f42400
 800c770:	08021ad4 	.word	0x08021ad4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c776:	2200      	movs	r2, #0
 800c778:	60bb      	str	r3, [r7, #8]
 800c77a:	60fa      	str	r2, [r7, #12]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	4a8e      	ldr	r2, [pc, #568]	; (800c9bc <UART_SetConfig+0x4e0>)
 800c782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c786:	b29b      	uxth	r3, r3
 800c788:	2200      	movs	r2, #0
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	607a      	str	r2, [r7, #4]
 800c78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c796:	f7f4 fcbd 	bl	8001114 <__aeabi_uldivmod>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4610      	mov	r0, r2
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	f04f 0300 	mov.w	r3, #0
 800c7aa:	020b      	lsls	r3, r1, #8
 800c7ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7b0:	0202      	lsls	r2, r0, #8
 800c7b2:	6979      	ldr	r1, [r7, #20]
 800c7b4:	6849      	ldr	r1, [r1, #4]
 800c7b6:	0849      	lsrs	r1, r1, #1
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	4605      	mov	r5, r0
 800c7be:	eb12 0804 	adds.w	r8, r2, r4
 800c7c2:	eb43 0905 	adc.w	r9, r3, r5
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	469a      	mov	sl, r3
 800c7ce:	4693      	mov	fp, r2
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	465b      	mov	r3, fp
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f4 fc9c 	bl	8001114 <__aeabi_uldivmod>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ea:	d308      	bcc.n	800c7fe <UART_SetConfig+0x322>
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7f2:	d204      	bcs.n	800c7fe <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6a3a      	ldr	r2, [r7, #32]
 800c7fa:	60da      	str	r2, [r3, #12]
 800c7fc:	e0c8      	b.n	800c990 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c804:	e0c4      	b.n	800c990 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c80e:	d167      	bne.n	800c8e0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800c810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c814:	2b08      	cmp	r3, #8
 800c816:	d828      	bhi.n	800c86a <UART_SetConfig+0x38e>
 800c818:	a201      	add	r2, pc, #4	; (adr r2, 800c820 <UART_SetConfig+0x344>)
 800c81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81e:	bf00      	nop
 800c820:	0800c845 	.word	0x0800c845
 800c824:	0800c84d 	.word	0x0800c84d
 800c828:	0800c855 	.word	0x0800c855
 800c82c:	0800c86b 	.word	0x0800c86b
 800c830:	0800c85b 	.word	0x0800c85b
 800c834:	0800c86b 	.word	0x0800c86b
 800c838:	0800c86b 	.word	0x0800c86b
 800c83c:	0800c86b 	.word	0x0800c86b
 800c840:	0800c863 	.word	0x0800c863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c844:	f7fd f984 	bl	8009b50 <HAL_RCC_GetPCLK1Freq>
 800c848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c84a:	e014      	b.n	800c876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c84c:	f7fd f992 	bl	8009b74 <HAL_RCC_GetPCLK2Freq>
 800c850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c852:	e010      	b.n	800c876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c854:	4b5a      	ldr	r3, [pc, #360]	; (800c9c0 <UART_SetConfig+0x4e4>)
 800c856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c858:	e00d      	b.n	800c876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c85a:	f7fd f8c5 	bl	80099e8 <HAL_RCC_GetSysClockFreq>
 800c85e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c860:	e009      	b.n	800c876 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c868:	e005      	b.n	800c876 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 8089 	beq.w	800c990 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c882:	4a4e      	ldr	r2, [pc, #312]	; (800c9bc <UART_SetConfig+0x4e0>)
 800c884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c888:	461a      	mov	r2, r3
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c890:	005a      	lsls	r2, r3, #1
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	085b      	lsrs	r3, r3, #1
 800c898:	441a      	add	r2, r3
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	2b0f      	cmp	r3, #15
 800c8a8:	d916      	bls.n	800c8d8 <UART_SetConfig+0x3fc>
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8b0:	d212      	bcs.n	800c8d8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8b2:	6a3b      	ldr	r3, [r7, #32]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f023 030f 	bic.w	r3, r3, #15
 800c8ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	085b      	lsrs	r3, r3, #1
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	8bfb      	ldrh	r3, [r7, #30]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	8bfa      	ldrh	r2, [r7, #30]
 800c8d4:	60da      	str	r2, [r3, #12]
 800c8d6:	e05b      	b.n	800c990 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c8de:	e057      	b.n	800c990 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c8e4:	2b08      	cmp	r3, #8
 800c8e6:	d828      	bhi.n	800c93a <UART_SetConfig+0x45e>
 800c8e8:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <UART_SetConfig+0x414>)
 800c8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ee:	bf00      	nop
 800c8f0:	0800c915 	.word	0x0800c915
 800c8f4:	0800c91d 	.word	0x0800c91d
 800c8f8:	0800c925 	.word	0x0800c925
 800c8fc:	0800c93b 	.word	0x0800c93b
 800c900:	0800c92b 	.word	0x0800c92b
 800c904:	0800c93b 	.word	0x0800c93b
 800c908:	0800c93b 	.word	0x0800c93b
 800c90c:	0800c93b 	.word	0x0800c93b
 800c910:	0800c933 	.word	0x0800c933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c914:	f7fd f91c 	bl	8009b50 <HAL_RCC_GetPCLK1Freq>
 800c918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c91a:	e014      	b.n	800c946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c91c:	f7fd f92a 	bl	8009b74 <HAL_RCC_GetPCLK2Freq>
 800c920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c922:	e010      	b.n	800c946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c924:	4b26      	ldr	r3, [pc, #152]	; (800c9c0 <UART_SetConfig+0x4e4>)
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c928:	e00d      	b.n	800c946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c92a:	f7fd f85d 	bl	80099e8 <HAL_RCC_GetSysClockFreq>
 800c92e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c930:	e009      	b.n	800c946 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c938:	e005      	b.n	800c946 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800c93a:	2300      	movs	r3, #0
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c944:	bf00      	nop
    }

    if (pclk != 0U)
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d021      	beq.n	800c990 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c950:	4a1a      	ldr	r2, [pc, #104]	; (800c9bc <UART_SetConfig+0x4e0>)
 800c952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c956:	461a      	mov	r2, r3
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	085b      	lsrs	r3, r3, #1
 800c964:	441a      	add	r2, r3
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c96e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c970:	6a3b      	ldr	r3, [r7, #32]
 800c972:	2b0f      	cmp	r3, #15
 800c974:	d909      	bls.n	800c98a <UART_SetConfig+0x4ae>
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c97c:	d205      	bcs.n	800c98a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	b29a      	uxth	r2, r3
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60da      	str	r2, [r3, #12]
 800c988:	e002      	b.n	800c990 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	2201      	movs	r2, #1
 800c994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c9ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3730      	adds	r7, #48	; 0x30
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9ba:	bf00      	nop
 800c9bc:	08021ad4 	.word	0x08021ad4
 800c9c0:	00f42400 	.word	0x00f42400

0800c9c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00a      	beq.n	800c9ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f2:	f003 0302 	and.w	r3, r3, #2
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	430a      	orrs	r2, r1
 800ca0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	f003 0304 	and.w	r3, r3, #4
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00a      	beq.n	800ca32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	f003 0308 	and.w	r3, r3, #8
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00a      	beq.n	800ca54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	430a      	orrs	r2, r1
 800ca52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca58:	f003 0310 	and.w	r3, r3, #16
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00a      	beq.n	800ca76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	430a      	orrs	r2, r1
 800ca74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7a:	f003 0320 	and.w	r3, r3, #32
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00a      	beq.n	800ca98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	430a      	orrs	r2, r1
 800ca96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d01a      	beq.n	800cada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cabe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cac2:	d10a      	bne.n	800cada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	430a      	orrs	r2, r1
 800cad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00a      	beq.n	800cafc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	605a      	str	r2, [r3, #4]
  }
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bc80      	pop	{r7}
 800cb04:	4770      	bx	lr

0800cb06 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af02      	add	r7, sp, #8
 800cb0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb16:	f7f5 feaf 	bl	8002878 <HAL_GetTick>
 800cb1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 0308 	and.w	r3, r3, #8
 800cb26:	2b08      	cmp	r3, #8
 800cb28:	d10e      	bne.n	800cb48 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f832 	bl	800cba2 <UART_WaitOnFlagUntilTimeout>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb44:	2303      	movs	r3, #3
 800cb46:	e028      	b.n	800cb9a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0304 	and.w	r3, r3, #4
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d10e      	bne.n	800cb74 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f81c 	bl	800cba2 <UART_WaitOnFlagUntilTimeout>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e012      	b.n	800cb9a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2220      	movs	r2, #32
 800cb78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2220      	movs	r2, #32
 800cb80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b09c      	sub	sp, #112	; 0x70
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	60b9      	str	r1, [r7, #8]
 800cbac:	603b      	str	r3, [r7, #0]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbb2:	e0a9      	b.n	800cd08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbba:	f000 80a5 	beq.w	800cd08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbbe:	f7f5 fe5b 	bl	8002878 <HAL_GetTick>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d302      	bcc.n	800cbd4 <UART_WaitOnFlagUntilTimeout+0x32>
 800cbce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d140      	bne.n	800cc56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbdc:	e853 3f00 	ldrex	r3, [r3]
 800cbe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbe4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cbe8:	667b      	str	r3, [r7, #100]	; 0x64
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbf4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cbf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbfa:	e841 2300 	strex	r3, r2, [r1]
 800cbfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1e6      	bne.n	800cbd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc10:	e853 3f00 	ldrex	r3, [r3]
 800cc14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	f023 0301 	bic.w	r3, r3, #1
 800cc1c:	663b      	str	r3, [r7, #96]	; 0x60
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	3308      	adds	r3, #8
 800cc24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc26:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc2e:	e841 2300 	strex	r3, r2, [r1]
 800cc32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e5      	bne.n	800cc06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2220      	movs	r2, #32
 800cc46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e069      	b.n	800cd2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d051      	beq.n	800cd08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	69db      	ldr	r3, [r3, #28]
 800cc6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc72:	d149      	bne.n	800cd08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	e853 3f00 	ldrex	r3, [r3]
 800cc8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc9c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cca4:	e841 2300 	strex	r3, r2, [r1]
 800cca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e6      	bne.n	800cc7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	e853 3f00 	ldrex	r3, [r3]
 800ccbe:	613b      	str	r3, [r7, #16]
   return(result);
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	f023 0301 	bic.w	r3, r3, #1
 800ccc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	3308      	adds	r3, #8
 800ccce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccd0:	623a      	str	r2, [r7, #32]
 800ccd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd4:	69f9      	ldr	r1, [r7, #28]
 800ccd6:	6a3a      	ldr	r2, [r7, #32]
 800ccd8:	e841 2300 	strex	r3, r2, [r1]
 800ccdc:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1e5      	bne.n	800ccb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2220      	movs	r2, #32
 800cce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2220      	movs	r2, #32
 800ccf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cd04:	2303      	movs	r3, #3
 800cd06:	e010      	b.n	800cd2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	69da      	ldr	r2, [r3, #28]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	4013      	ands	r3, r2
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	bf0c      	ite	eq
 800cd18:	2301      	moveq	r3, #1
 800cd1a:	2300      	movne	r3, #0
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	461a      	mov	r2, r3
 800cd20:	79fb      	ldrb	r3, [r7, #7]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	f43f af46 	beq.w	800cbb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3770      	adds	r7, #112	; 0x70
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b0a3      	sub	sp, #140	; 0x8c
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	88fa      	ldrh	r2, [r7, #6]
 800cd4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	88fa      	ldrh	r2, [r7, #6]
 800cd54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd66:	d10e      	bne.n	800cd86 <UART_Start_Receive_IT+0x52>
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d105      	bne.n	800cd7c <UART_Start_Receive_IT+0x48>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cd76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd7a:	e02d      	b.n	800cdd8 <UART_Start_Receive_IT+0xa4>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	22ff      	movs	r2, #255	; 0xff
 800cd80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd84:	e028      	b.n	800cdd8 <UART_Start_Receive_IT+0xa4>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10d      	bne.n	800cdaa <UART_Start_Receive_IT+0x76>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	691b      	ldr	r3, [r3, #16]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d104      	bne.n	800cda0 <UART_Start_Receive_IT+0x6c>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	22ff      	movs	r2, #255	; 0xff
 800cd9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cd9e:	e01b      	b.n	800cdd8 <UART_Start_Receive_IT+0xa4>
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	227f      	movs	r2, #127	; 0x7f
 800cda4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cda8:	e016      	b.n	800cdd8 <UART_Start_Receive_IT+0xa4>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdb2:	d10d      	bne.n	800cdd0 <UART_Start_Receive_IT+0x9c>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d104      	bne.n	800cdc6 <UART_Start_Receive_IT+0x92>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	227f      	movs	r2, #127	; 0x7f
 800cdc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdc4:	e008      	b.n	800cdd8 <UART_Start_Receive_IT+0xa4>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	223f      	movs	r2, #63	; 0x3f
 800cdca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdce:	e003      	b.n	800cdd8 <UART_Start_Receive_IT+0xa4>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2222      	movs	r2, #34	; 0x22
 800cde4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3308      	adds	r3, #8
 800cdee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdf2:	e853 3f00 	ldrex	r3, [r3]
 800cdf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cdf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdfa:	f043 0301 	orr.w	r3, r3, #1
 800cdfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3308      	adds	r3, #8
 800ce08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ce0c:	673a      	str	r2, [r7, #112]	; 0x70
 800ce0e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ce12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ce14:	e841 2300 	strex	r3, r2, [r1]
 800ce18:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ce1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e3      	bne.n	800cde8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce28:	d14f      	bne.n	800ceca <UART_Start_Receive_IT+0x196>
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce30:	88fa      	ldrh	r2, [r7, #6]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d349      	bcc.n	800ceca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce3e:	d107      	bne.n	800ce50 <UART_Start_Receive_IT+0x11c>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d103      	bne.n	800ce50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	4a46      	ldr	r2, [pc, #280]	; (800cf64 <UART_Start_Receive_IT+0x230>)
 800ce4c:	675a      	str	r2, [r3, #116]	; 0x74
 800ce4e:	e002      	b.n	800ce56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4a45      	ldr	r2, [pc, #276]	; (800cf68 <UART_Start_Receive_IT+0x234>)
 800ce54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d01a      	beq.n	800ce94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce66:	e853 3f00 	ldrex	r3, [r3]
 800ce6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce88:	e841 2300 	strex	r3, r2, [r1]
 800ce8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ce8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1e4      	bne.n	800ce5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3308      	adds	r3, #8
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce9e:	e853 3f00 	ldrex	r3, [r3]
 800cea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3308      	adds	r3, #8
 800ceb2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ceb4:	64ba      	str	r2, [r7, #72]	; 0x48
 800ceb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ceba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cebc:	e841 2300 	strex	r3, r2, [r1]
 800cec0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1e5      	bne.n	800ce94 <UART_Start_Receive_IT+0x160>
 800cec8:	e046      	b.n	800cf58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ced2:	d107      	bne.n	800cee4 <UART_Start_Receive_IT+0x1b0>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d103      	bne.n	800cee4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4a23      	ldr	r2, [pc, #140]	; (800cf6c <UART_Start_Receive_IT+0x238>)
 800cee0:	675a      	str	r2, [r3, #116]	; 0x74
 800cee2:	e002      	b.n	800ceea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	4a22      	ldr	r2, [pc, #136]	; (800cf70 <UART_Start_Receive_IT+0x23c>)
 800cee8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d019      	beq.n	800cf26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefa:	e853 3f00 	ldrex	r3, [r3]
 800cefe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cf06:	677b      	str	r3, [r7, #116]	; 0x74
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf10:	637b      	str	r3, [r7, #52]	; 0x34
 800cf12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf18:	e841 2300 	strex	r3, r2, [r1]
 800cf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1e6      	bne.n	800cef2 <UART_Start_Receive_IT+0x1be>
 800cf24:	e018      	b.n	800cf58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	e853 3f00 	ldrex	r3, [r3]
 800cf32:	613b      	str	r3, [r7, #16]
   return(result);
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	f043 0320 	orr.w	r3, r3, #32
 800cf3a:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	461a      	mov	r2, r3
 800cf42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf44:	623b      	str	r3, [r7, #32]
 800cf46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf48:	69f9      	ldr	r1, [r7, #28]
 800cf4a:	6a3a      	ldr	r2, [r7, #32]
 800cf4c:	e841 2300 	strex	r3, r2, [r1]
 800cf50:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1e6      	bne.n	800cf26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	378c      	adds	r7, #140	; 0x8c
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bc80      	pop	{r7}
 800cf62:	4770      	bx	lr
 800cf64:	0800d949 	.word	0x0800d949
 800cf68:	0800d5e9 	.word	0x0800d5e9
 800cf6c:	0800d431 	.word	0x0800d431
 800cf70:	0800d279 	.word	0x0800d279

0800cf74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b08f      	sub	sp, #60	; 0x3c
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf82:	6a3b      	ldr	r3, [r7, #32]
 800cf84:	e853 3f00 	ldrex	r3, [r3]
 800cf88:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cf90:	637b      	str	r3, [r7, #52]	; 0x34
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfa2:	e841 2300 	strex	r3, r2, [r1]
 800cfa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1e6      	bne.n	800cf7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	3308      	adds	r3, #8
 800cfb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	e853 3f00 	ldrex	r3, [r3]
 800cfbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cfc4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfce:	61ba      	str	r2, [r7, #24]
 800cfd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd2:	6979      	ldr	r1, [r7, #20]
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	e841 2300 	strex	r3, r2, [r1]
 800cfda:	613b      	str	r3, [r7, #16]
   return(result);
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1e5      	bne.n	800cfae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2220      	movs	r2, #32
 800cfe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800cfea:	bf00      	nop
 800cfec:	373c      	adds	r7, #60	; 0x3c
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bc80      	pop	{r7}
 800cff2:	4770      	bx	lr

0800cff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b095      	sub	sp, #84	; 0x54
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d004:	e853 3f00 	ldrex	r3, [r3]
 800d008:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d010:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	461a      	mov	r2, r3
 800d018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d01a:	643b      	str	r3, [r7, #64]	; 0x40
 800d01c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d022:	e841 2300 	strex	r3, r2, [r1]
 800d026:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1e6      	bne.n	800cffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3308      	adds	r3, #8
 800d034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	e853 3f00 	ldrex	r3, [r3]
 800d03c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d044:	f023 0301 	bic.w	r3, r3, #1
 800d048:	64bb      	str	r3, [r7, #72]	; 0x48
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3308      	adds	r3, #8
 800d050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d052:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e3      	bne.n	800d02e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d118      	bne.n	800d0a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	e853 3f00 	ldrex	r3, [r3]
 800d07a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	f023 0310 	bic.w	r3, r3, #16
 800d082:	647b      	str	r3, [r7, #68]	; 0x44
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	461a      	mov	r2, r3
 800d08a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d08c:	61bb      	str	r3, [r7, #24]
 800d08e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d090:	6979      	ldr	r1, [r7, #20]
 800d092:	69ba      	ldr	r2, [r7, #24]
 800d094:	e841 2300 	strex	r3, r2, [r1]
 800d098:	613b      	str	r3, [r7, #16]
   return(result);
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e6      	bne.n	800d06e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d0b4:	bf00      	nop
 800d0b6:	3754      	adds	r7, #84	; 0x54
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bc80      	pop	{r7}
 800d0bc:	4770      	bx	lr

0800d0be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b090      	sub	sp, #64	; 0x40
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0320 	and.w	r3, r3, #32
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d137      	bne.n	800d14a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3308      	adds	r3, #8
 800d0e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ec:	e853 3f00 	ldrex	r3, [r3]
 800d0f0:	623b      	str	r3, [r7, #32]
   return(result);
 800d0f2:	6a3b      	ldr	r3, [r7, #32]
 800d0f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3308      	adds	r3, #8
 800d100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d102:	633a      	str	r2, [r7, #48]	; 0x30
 800d104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d10a:	e841 2300 	strex	r3, r2, [r1]
 800d10e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1e5      	bne.n	800d0e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	e853 3f00 	ldrex	r3, [r3]
 800d122:	60fb      	str	r3, [r7, #12]
   return(result);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d12a:	637b      	str	r3, [r7, #52]	; 0x34
 800d12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	461a      	mov	r2, r3
 800d132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d134:	61fb      	str	r3, [r7, #28]
 800d136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d138:	69b9      	ldr	r1, [r7, #24]
 800d13a:	69fa      	ldr	r2, [r7, #28]
 800d13c:	e841 2300 	strex	r3, r2, [r1]
 800d140:	617b      	str	r3, [r7, #20]
   return(result);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1e6      	bne.n	800d116 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d148:	e002      	b.n	800d150 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d14a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d14c:	f7f6 f880 	bl	8003250 <HAL_UART_TxCpltCallback>
}
 800d150:	bf00      	nop
 800d152:	3740      	adds	r7, #64	; 0x40
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d164:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7ff f99a 	bl	800c4a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d16c:	bf00      	nop
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d180:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d188:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d190:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d19c:	2b80      	cmp	r3, #128	; 0x80
 800d19e:	d109      	bne.n	800d1b4 <UART_DMAError+0x40>
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	2b21      	cmp	r3, #33	; 0x21
 800d1a4:	d106      	bne.n	800d1b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d1ae:	6978      	ldr	r0, [r7, #20]
 800d1b0:	f7ff fee0 	bl	800cf74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1be:	2b40      	cmp	r3, #64	; 0x40
 800d1c0:	d109      	bne.n	800d1d6 <UART_DMAError+0x62>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2b22      	cmp	r3, #34	; 0x22
 800d1c6:	d106      	bne.n	800d1d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d1d0:	6978      	ldr	r0, [r7, #20]
 800d1d2:	f7ff ff0f 	bl	800cff4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1dc:	f043 0210 	orr.w	r2, r3, #16
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1e6:	6978      	ldr	r0, [r7, #20]
 800d1e8:	f7ff f963 	bl	800c4b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1ec:	bf00      	nop
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f7ff f94d 	bl	800c4b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d218:	bf00      	nop
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	e853 3f00 	ldrex	r3, [r3]
 800d234:	60bb      	str	r3, [r7, #8]
   return(result);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d23c:	61fb      	str	r3, [r7, #28]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	461a      	mov	r2, r3
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	61bb      	str	r3, [r7, #24]
 800d248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24a:	6979      	ldr	r1, [r7, #20]
 800d24c:	69ba      	ldr	r2, [r7, #24]
 800d24e:	e841 2300 	strex	r3, r2, [r1]
 800d252:	613b      	str	r3, [r7, #16]
   return(result);
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1e6      	bne.n	800d228 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2220      	movs	r2, #32
 800d25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7f5 fff1 	bl	8003250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d26e:	bf00      	nop
 800d270:	3720      	adds	r7, #32
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b09c      	sub	sp, #112	; 0x70
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d286:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d290:	2b22      	cmp	r3, #34	; 0x22
 800d292:	f040 80be 	bne.w	800d412 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d2a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d2a4:	b2d9      	uxtb	r1, r3
 800d2a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b0:	400a      	ands	r2, r1
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f040 80a1 	bne.w	800d422 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e8:	e853 3f00 	ldrex	r3, [r3]
 800d2ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800d300:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d302:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d306:	e841 2300 	strex	r3, r2, [r1]
 800d30a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1e6      	bne.n	800d2e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3308      	adds	r3, #8
 800d318:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	e853 3f00 	ldrex	r3, [r3]
 800d320:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d324:	f023 0301 	bic.w	r3, r3, #1
 800d328:	667b      	str	r3, [r7, #100]	; 0x64
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3308      	adds	r3, #8
 800d330:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d332:	647a      	str	r2, [r7, #68]	; 0x44
 800d334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d33a:	e841 2300 	strex	r3, r2, [r1]
 800d33e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e5      	bne.n	800d312 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2220      	movs	r2, #32
 800d34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a33      	ldr	r2, [pc, #204]	; (800d42c <UART_RxISR_8BIT+0x1b4>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d01f      	beq.n	800d3a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d018      	beq.n	800d3a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	e853 3f00 	ldrex	r3, [r3]
 800d37e:	623b      	str	r3, [r7, #32]
   return(result);
 800d380:	6a3b      	ldr	r3, [r7, #32]
 800d382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d386:	663b      	str	r3, [r7, #96]	; 0x60
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	461a      	mov	r2, r3
 800d38e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d390:	633b      	str	r3, [r7, #48]	; 0x30
 800d392:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d398:	e841 2300 	strex	r3, r2, [r1]
 800d39c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1e6      	bne.n	800d372 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d12e      	bne.n	800d40a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	e853 3f00 	ldrex	r3, [r3]
 800d3be:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f023 0310 	bic.w	r3, r3, #16
 800d3c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3d0:	61fb      	str	r3, [r7, #28]
 800d3d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d4:	69b9      	ldr	r1, [r7, #24]
 800d3d6:	69fa      	ldr	r2, [r7, #28]
 800d3d8:	e841 2300 	strex	r3, r2, [r1]
 800d3dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1e6      	bne.n	800d3b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	f003 0310 	and.w	r3, r3, #16
 800d3ee:	2b10      	cmp	r3, #16
 800d3f0:	d103      	bne.n	800d3fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2210      	movs	r2, #16
 800d3f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7ff f85e 	bl	800c4c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d408:	e00b      	b.n	800d422 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7f5 ff36 	bl	800327c <HAL_UART_RxCpltCallback>
}
 800d410:	e007      	b.n	800d422 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	699a      	ldr	r2, [r3, #24]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f042 0208 	orr.w	r2, r2, #8
 800d420:	619a      	str	r2, [r3, #24]
}
 800d422:	bf00      	nop
 800d424:	3770      	adds	r7, #112	; 0x70
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	40008000 	.word	0x40008000

0800d430 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b09c      	sub	sp, #112	; 0x70
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d43e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d448:	2b22      	cmp	r3, #34	; 0x22
 800d44a:	f040 80be 	bne.w	800d5ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d454:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d45c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d45e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d462:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d466:	4013      	ands	r3, r2
 800d468:	b29a      	uxth	r2, r3
 800d46a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d46c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d472:	1c9a      	adds	r2, r3, #2
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d47e:	b29b      	uxth	r3, r3
 800d480:	3b01      	subs	r3, #1
 800d482:	b29a      	uxth	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d490:	b29b      	uxth	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	f040 80a1 	bne.w	800d5da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4a0:	e853 3f00 	ldrex	r3, [r3]
 800d4a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d4a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4ac:	667b      	str	r3, [r7, #100]	; 0x64
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4b6:	657b      	str	r3, [r7, #84]	; 0x54
 800d4b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4be:	e841 2300 	strex	r3, r2, [r1]
 800d4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1e6      	bne.n	800d498 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d4:	e853 3f00 	ldrex	r3, [r3]
 800d4d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	f023 0301 	bic.w	r3, r3, #1
 800d4e0:	663b      	str	r3, [r7, #96]	; 0x60
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4ea:	643a      	str	r2, [r7, #64]	; 0x40
 800d4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4f2:	e841 2300 	strex	r3, r2, [r1]
 800d4f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e5      	bne.n	800d4ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2220      	movs	r2, #32
 800d502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a33      	ldr	r2, [pc, #204]	; (800d5e4 <UART_RxISR_16BIT+0x1b4>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d01f      	beq.n	800d55c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d526:	2b00      	cmp	r3, #0
 800d528:	d018      	beq.n	800d55c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	e853 3f00 	ldrex	r3, [r3]
 800d536:	61fb      	str	r3, [r7, #28]
   return(result);
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d53e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	461a      	mov	r2, r3
 800d546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d54a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d550:	e841 2300 	strex	r3, r2, [r1]
 800d554:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e6      	bne.n	800d52a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d560:	2b01      	cmp	r3, #1
 800d562:	d12e      	bne.n	800d5c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	e853 3f00 	ldrex	r3, [r3]
 800d576:	60bb      	str	r3, [r7, #8]
   return(result);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f023 0310 	bic.w	r3, r3, #16
 800d57e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	461a      	mov	r2, r3
 800d586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d588:	61bb      	str	r3, [r7, #24]
 800d58a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58c:	6979      	ldr	r1, [r7, #20]
 800d58e:	69ba      	ldr	r2, [r7, #24]
 800d590:	e841 2300 	strex	r3, r2, [r1]
 800d594:	613b      	str	r3, [r7, #16]
   return(result);
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1e6      	bne.n	800d56a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	69db      	ldr	r3, [r3, #28]
 800d5a2:	f003 0310 	and.w	r3, r3, #16
 800d5a6:	2b10      	cmp	r3, #16
 800d5a8:	d103      	bne.n	800d5b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2210      	movs	r2, #16
 800d5b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7fe ff82 	bl	800c4c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d5c0:	e00b      	b.n	800d5da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7f5 fe5a 	bl	800327c <HAL_UART_RxCpltCallback>
}
 800d5c8:	e007      	b.n	800d5da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	699a      	ldr	r2, [r3, #24]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f042 0208 	orr.w	r2, r2, #8
 800d5d8:	619a      	str	r2, [r3, #24]
}
 800d5da:	bf00      	nop
 800d5dc:	3770      	adds	r7, #112	; 0x70
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	40008000 	.word	0x40008000

0800d5e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b0ac      	sub	sp, #176	; 0xb0
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	69db      	ldr	r3, [r3, #28]
 800d600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d61e:	2b22      	cmp	r3, #34	; 0x22
 800d620:	f040 8182 	bne.w	800d928 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d62a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d62e:	e125      	b.n	800d87c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d636:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d63a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d63e:	b2d9      	uxtb	r1, r3
 800d640:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d644:	b2da      	uxtb	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d64a:	400a      	ands	r2, r1
 800d64c:	b2d2      	uxtb	r2, r2
 800d64e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d654:	1c5a      	adds	r2, r3, #1
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d660:	b29b      	uxth	r3, r3
 800d662:	3b01      	subs	r3, #1
 800d664:	b29a      	uxth	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	69db      	ldr	r3, [r3, #28]
 800d672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d67a:	f003 0307 	and.w	r3, r3, #7
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d053      	beq.n	800d72a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d011      	beq.n	800d6b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d68e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00b      	beq.n	800d6b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6a8:	f043 0201 	orr.w	r2, r3, #1
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6b6:	f003 0302 	and.w	r3, r3, #2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d011      	beq.n	800d6e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d6be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00b      	beq.n	800d6e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6d8:	f043 0204 	orr.w	r2, r3, #4
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6e6:	f003 0304 	and.w	r3, r3, #4
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d011      	beq.n	800d712 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d6ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00b      	beq.n	800d712 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2204      	movs	r2, #4
 800d700:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d708:	f043 0202 	orr.w	r2, r3, #2
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7fe fec8 	bl	800c4b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d730:	b29b      	uxth	r3, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	f040 80a2 	bne.w	800d87c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d740:	e853 3f00 	ldrex	r3, [r3]
 800d744:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d74c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	461a      	mov	r2, r3
 800d756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d75a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d75c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d760:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d762:	e841 2300 	strex	r3, r2, [r1]
 800d766:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1e4      	bne.n	800d738 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3308      	adds	r3, #8
 800d774:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d778:	e853 3f00 	ldrex	r3, [r3]
 800d77c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d784:	f023 0301 	bic.w	r3, r3, #1
 800d788:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3308      	adds	r3, #8
 800d792:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d796:	66ba      	str	r2, [r7, #104]	; 0x68
 800d798:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d79a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d79c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d79e:	e841 2300 	strex	r3, r2, [r1]
 800d7a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d7a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1e1      	bne.n	800d76e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a5f      	ldr	r2, [pc, #380]	; (800d940 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d021      	beq.n	800d80c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d01a      	beq.n	800d80c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7de:	e853 3f00 	ldrex	r3, [r3]
 800d7e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7f8:	657b      	str	r3, [r7, #84]	; 0x54
 800d7fa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d7fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d800:	e841 2300 	strex	r3, r2, [r1]
 800d804:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1e4      	bne.n	800d7d6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d810:	2b01      	cmp	r3, #1
 800d812:	d130      	bne.n	800d876 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d822:	e853 3f00 	ldrex	r3, [r3]
 800d826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82a:	f023 0310 	bic.w	r3, r3, #16
 800d82e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d83c:	643b      	str	r3, [r7, #64]	; 0x40
 800d83e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d844:	e841 2300 	strex	r3, r2, [r1]
 800d848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1e4      	bne.n	800d81a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	69db      	ldr	r3, [r3, #28]
 800d856:	f003 0310 	and.w	r3, r3, #16
 800d85a:	2b10      	cmp	r3, #16
 800d85c:	d103      	bne.n	800d866 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2210      	movs	r2, #16
 800d864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7fe fe28 	bl	800c4c4 <HAL_UARTEx_RxEventCallback>
 800d874:	e002      	b.n	800d87c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7f5 fd00 	bl	800327c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d87c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d880:	2b00      	cmp	r3, #0
 800d882:	d006      	beq.n	800d892 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800d884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d888:	f003 0320 	and.w	r3, r3, #32
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f47f aecf 	bne.w	800d630 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d898:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d89c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d049      	beq.n	800d938 <UART_RxISR_8BIT_FIFOEN+0x350>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d8aa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d242      	bcs.n	800d938 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	3308      	adds	r3, #8
 800d8d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d8d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8de:	e841 2300 	strex	r3, r2, [r1]
 800d8e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1e3      	bne.n	800d8b2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4a15      	ldr	r2, [pc, #84]	; (800d944 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d8ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	e853 3f00 	ldrex	r3, [r3]
 800d8fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	f043 0320 	orr.w	r3, r3, #32
 800d904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	461a      	mov	r2, r3
 800d90e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d912:	61bb      	str	r3, [r7, #24]
 800d914:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d916:	6979      	ldr	r1, [r7, #20]
 800d918:	69ba      	ldr	r2, [r7, #24]
 800d91a:	e841 2300 	strex	r3, r2, [r1]
 800d91e:	613b      	str	r3, [r7, #16]
   return(result);
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1e4      	bne.n	800d8f0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d926:	e007      	b.n	800d938 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	699a      	ldr	r2, [r3, #24]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f042 0208 	orr.w	r2, r2, #8
 800d936:	619a      	str	r2, [r3, #24]
}
 800d938:	bf00      	nop
 800d93a:	37b0      	adds	r7, #176	; 0xb0
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	40008000 	.word	0x40008000
 800d944:	0800d279 	.word	0x0800d279

0800d948 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b0ae      	sub	sp, #184	; 0xb8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d956:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d97e:	2b22      	cmp	r3, #34	; 0x22
 800d980:	f040 8186 	bne.w	800dc90 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d98a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d98e:	e129      	b.n	800dbe4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d996:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d99e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d9a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d9a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9b8:	1c9a      	adds	r2, r3, #2
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	69db      	ldr	r3, [r3, #28]
 800d9d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d9da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d053      	beq.n	800da8e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d011      	beq.n	800da16 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d9f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00b      	beq.n	800da16 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2201      	movs	r2, #1
 800da04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da0c:	f043 0201 	orr.w	r2, r3, #1
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da1a:	f003 0302 	and.w	r3, r3, #2
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d011      	beq.n	800da46 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800da22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00b      	beq.n	800da46 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2202      	movs	r2, #2
 800da34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da3c:	f043 0204 	orr.w	r2, r3, #4
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d011      	beq.n	800da76 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800da52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00b      	beq.n	800da76 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2204      	movs	r2, #4
 800da64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da6c:	f043 0202 	orr.w	r2, r3, #2
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d006      	beq.n	800da8e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7fe fd16 	bl	800c4b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da94:	b29b      	uxth	r3, r3
 800da96:	2b00      	cmp	r3, #0
 800da98:	f040 80a4 	bne.w	800dbe4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daa4:	e853 3f00 	ldrex	r3, [r3]
 800daa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800daaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800daac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	461a      	mov	r2, r3
 800daba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dabe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dac2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800daca:	e841 2300 	strex	r3, r2, [r1]
 800dace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1e2      	bne.n	800da9c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3308      	adds	r3, #8
 800dadc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dae0:	e853 3f00 	ldrex	r3, [r3]
 800dae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800daec:	f023 0301 	bic.w	r3, r3, #1
 800daf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	3308      	adds	r3, #8
 800dafa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dafe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db06:	e841 2300 	strex	r3, r2, [r1]
 800db0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1e1      	bne.n	800dad6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2220      	movs	r2, #32
 800db16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a5f      	ldr	r2, [pc, #380]	; (800dca8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d021      	beq.n	800db74 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d01a      	beq.n	800db74 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db46:	e853 3f00 	ldrex	r3, [r3]
 800db4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db60:	65bb      	str	r3, [r7, #88]	; 0x58
 800db62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db68:	e841 2300 	strex	r3, r2, [r1]
 800db6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1e4      	bne.n	800db3e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d130      	bne.n	800dbde <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8a:	e853 3f00 	ldrex	r3, [r3]
 800db8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db92:	f023 0310 	bic.w	r3, r3, #16
 800db96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	461a      	mov	r2, r3
 800dba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dba4:	647b      	str	r3, [r7, #68]	; 0x44
 800dba6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dbaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbac:	e841 2300 	strex	r3, r2, [r1]
 800dbb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1e4      	bne.n	800db82 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	69db      	ldr	r3, [r3, #28]
 800dbbe:	f003 0310 	and.w	r3, r3, #16
 800dbc2:	2b10      	cmp	r3, #16
 800dbc4:	d103      	bne.n	800dbce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2210      	movs	r2, #16
 800dbcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7fe fc74 	bl	800c4c4 <HAL_UARTEx_RxEventCallback>
 800dbdc:	e002      	b.n	800dbe4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7f5 fb4c 	bl	800327c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dbe4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d006      	beq.n	800dbfa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800dbec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbf0:	f003 0320 	and.w	r3, r3, #32
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f47f aecb 	bne.w	800d990 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc00:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dc04:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d049      	beq.n	800dca0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc12:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d242      	bcs.n	800dca0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	3308      	adds	r3, #8
 800dc20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc24:	e853 3f00 	ldrex	r3, [r3]
 800dc28:	623b      	str	r3, [r7, #32]
   return(result);
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3308      	adds	r3, #8
 800dc3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dc3e:	633a      	str	r2, [r7, #48]	; 0x30
 800dc40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc46:	e841 2300 	strex	r3, r2, [r1]
 800dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1e3      	bne.n	800dc1a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	4a15      	ldr	r2, [pc, #84]	; (800dcac <UART_RxISR_16BIT_FIFOEN+0x364>)
 800dc56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	e853 3f00 	ldrex	r3, [r3]
 800dc64:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f043 0320 	orr.w	r3, r3, #32
 800dc6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	461a      	mov	r2, r3
 800dc76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc7a:	61fb      	str	r3, [r7, #28]
 800dc7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7e:	69b9      	ldr	r1, [r7, #24]
 800dc80:	69fa      	ldr	r2, [r7, #28]
 800dc82:	e841 2300 	strex	r3, r2, [r1]
 800dc86:	617b      	str	r3, [r7, #20]
   return(result);
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1e4      	bne.n	800dc58 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc8e:	e007      	b.n	800dca0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	699a      	ldr	r2, [r3, #24]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f042 0208 	orr.w	r2, r2, #8
 800dc9e:	619a      	str	r2, [r3, #24]
}
 800dca0:	bf00      	nop
 800dca2:	37b8      	adds	r7, #184	; 0xb8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	40008000 	.word	0x40008000
 800dcac:	0800d431 	.word	0x0800d431

0800dcb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dcb8:	bf00      	nop
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bc80      	pop	{r7}
 800dcc0:	4770      	bx	lr

0800dcc2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dcc2:	b480      	push	{r7}
 800dcc4:	b083      	sub	sp, #12
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dcca:	bf00      	nop
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bc80      	pop	{r7}
 800dcd2:	4770      	bx	lr

0800dcd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dcdc:	bf00      	nop
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bc80      	pop	{r7}
 800dce4:	4770      	bx	lr

0800dce6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b088      	sub	sp, #32
 800dcea:	af02      	add	r7, sp, #8
 800dcec:	60f8      	str	r0, [r7, #12]
 800dcee:	1d3b      	adds	r3, r7, #4
 800dcf0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d101      	bne.n	800dd06 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800dd02:	2302      	movs	r3, #2
 800dd04:	e046      	b.n	800dd94 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2224      	movs	r2, #36	; 0x24
 800dd12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0201 	bic.w	r2, r2, #1
 800dd24:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	430a      	orrs	r2, r1
 800dd38:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d105      	bne.n	800dd4c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800dd40:	1d3b      	adds	r3, r7, #4
 800dd42:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f000 f911 	bl	800df6e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f042 0201 	orr.w	r2, r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd5c:	f7f4 fd8c 	bl	8002878 <HAL_GetTick>
 800dd60:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f7fe ff16 	bl	800cba2 <UART_WaitOnFlagUntilTimeout>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	75fb      	strb	r3, [r7, #23]
 800dd80:	e003      	b.n	800dd8a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2220      	movs	r2, #32
 800dd86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b089      	sub	sp, #36	; 0x24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d101      	bne.n	800ddb2 <HAL_UARTEx_EnableStopMode+0x16>
 800ddae:	2302      	movs	r3, #2
 800ddb0:	e021      	b.n	800ddf6 <HAL_UARTEx_EnableStopMode+0x5a>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	e853 3f00 	ldrex	r3, [r3]
 800ddc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	f043 0302 	orr.w	r3, r3, #2
 800ddce:	61fb      	str	r3, [r7, #28]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	61bb      	str	r3, [r7, #24]
 800ddda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dddc:	6979      	ldr	r1, [r7, #20]
 800ddde:	69ba      	ldr	r2, [r7, #24]
 800dde0:	e841 2300 	strex	r3, r2, [r1]
 800dde4:	613b      	str	r3, [r7, #16]
   return(result);
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1e6      	bne.n	800ddba <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3724      	adds	r7, #36	; 0x24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bc80      	pop	{r7}
 800ddfe:	4770      	bx	lr

0800de00 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <HAL_UARTEx_EnableFifoMode+0x16>
 800de12:	2302      	movs	r3, #2
 800de14:	e02b      	b.n	800de6e <HAL_UARTEx_EnableFifoMode+0x6e>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2224      	movs	r2, #36	; 0x24
 800de22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f022 0201 	bic.w	r2, r2, #1
 800de3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800de44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800de4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f8ac 	bl	800dfb4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2220      	movs	r2, #32
 800de60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b084      	sub	sp, #16
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800de86:	2b01      	cmp	r3, #1
 800de88:	d101      	bne.n	800de8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de8a:	2302      	movs	r3, #2
 800de8c:	e02d      	b.n	800deea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2224      	movs	r2, #36	; 0x24
 800de9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f022 0201 	bic.w	r2, r2, #1
 800deb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	683a      	ldr	r2, [r7, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f872 	bl	800dfb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2220      	movs	r2, #32
 800dedc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df02:	2b01      	cmp	r3, #1
 800df04:	d101      	bne.n	800df0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df06:	2302      	movs	r3, #2
 800df08:	e02d      	b.n	800df66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2224      	movs	r2, #36	; 0x24
 800df16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f022 0201 	bic.w	r2, r2, #1
 800df30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	430a      	orrs	r2, r1
 800df44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f834 	bl	800dfb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2220      	movs	r2, #32
 800df58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	1d3b      	adds	r3, r7, #4
 800df78:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	f023 0210 	bic.w	r2, r3, #16
 800df86:	893b      	ldrh	r3, [r7, #8]
 800df88:	4619      	mov	r1, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	430a      	orrs	r2, r1
 800df90:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800df9c:	7abb      	ldrb	r3, [r7, #10]
 800df9e:	061a      	lsls	r2, r3, #24
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	430a      	orrs	r2, r1
 800dfa6:	605a      	str	r2, [r3, #4]
}
 800dfa8:	bf00      	nop
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bc80      	pop	{r7}
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d108      	bne.n	800dfd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dfd4:	e031      	b.n	800e03a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dfd6:	2308      	movs	r3, #8
 800dfd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dfda:	2308      	movs	r3, #8
 800dfdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	0e5b      	lsrs	r3, r3, #25
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	f003 0307 	and.w	r3, r3, #7
 800dfec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	0f5b      	lsrs	r3, r3, #29
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	f003 0307 	and.w	r3, r3, #7
 800dffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dffe:	7bbb      	ldrb	r3, [r7, #14]
 800e000:	7b3a      	ldrb	r2, [r7, #12]
 800e002:	4910      	ldr	r1, [pc, #64]	; (800e044 <UARTEx_SetNbDataToProcess+0x90>)
 800e004:	5c8a      	ldrb	r2, [r1, r2]
 800e006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e00a:	7b3a      	ldrb	r2, [r7, #12]
 800e00c:	490e      	ldr	r1, [pc, #56]	; (800e048 <UARTEx_SetNbDataToProcess+0x94>)
 800e00e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e010:	fb93 f3f2 	sdiv	r3, r3, r2
 800e014:	b29a      	uxth	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
 800e01e:	7b7a      	ldrb	r2, [r7, #13]
 800e020:	4908      	ldr	r1, [pc, #32]	; (800e044 <UARTEx_SetNbDataToProcess+0x90>)
 800e022:	5c8a      	ldrb	r2, [r1, r2]
 800e024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e028:	7b7a      	ldrb	r2, [r7, #13]
 800e02a:	4907      	ldr	r1, [pc, #28]	; (800e048 <UARTEx_SetNbDataToProcess+0x94>)
 800e02c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e02e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e032:	b29a      	uxth	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e03a:	bf00      	nop
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	bc80      	pop	{r7}
 800e042:	4770      	bx	lr
 800e044:	08021aec 	.word	0x08021aec
 800e048:	08021af4 	.word	0x08021af4

0800e04c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800e050:	f7f4 fab2 	bl	80025b8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800e054:	f000 f854 	bl	800e100 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800e058:	bf00      	nop
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	f011 fbbe 	bl	801f7e4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800e068:	bf00      	nop
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e06c:	b480      	push	{r7}
 800e06e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e070:	f3bf 8f4f 	dsb	sy
}
 800e074:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e076:	4b06      	ldr	r3, [pc, #24]	; (800e090 <__NVIC_SystemReset+0x24>)
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e07e:	4904      	ldr	r1, [pc, #16]	; (800e090 <__NVIC_SystemReset+0x24>)
 800e080:	4b04      	ldr	r3, [pc, #16]	; (800e094 <__NVIC_SystemReset+0x28>)
 800e082:	4313      	orrs	r3, r2
 800e084:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e086:	f3bf 8f4f 	dsb	sy
}
 800e08a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e08c:	bf00      	nop
 800e08e:	e7fd      	b.n	800e08c <__NVIC_SystemReset+0x20>
 800e090:	e000ed00 	.word	0xe000ed00
 800e094:	05fa0004 	.word	0x05fa0004

0800e098 <disableLoRaWAN>:
/* USER CODE END PV */

/* Exported functions ---------------------------------------------------------*/
/* USER CODE BEGIN EF */

void disableLoRaWAN(void){
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
	// Determine the total number of tasks from the last value in the enum
	int totalTasks = (int)CFG_SEQ_Task_NBR;
 800e09e:	2304      	movs	r3, #4
 800e0a0:	60bb      	str	r3, [r7, #8]

	// Iterate through each task ID
	for (int taskID = CFG_SEQ_Task_LmHandlerProcess; taskID < totalTasks; taskID++) {
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	60fb      	str	r3, [r7, #12]
 800e0a6:	e00a      	b.n	800e0be <disableLoRaWAN+0x26>
		UTIL_SEQ_bm_t taskMask = (1U << taskID);
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b0:	607b      	str	r3, [r7, #4]

		UTIL_SEQ_PauseTask(taskMask);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f011 fce0 	bl	801fa78 <UTIL_SEQ_PauseTask>
	for (int taskID = CFG_SEQ_Task_LmHandlerProcess; taskID < totalTasks; taskID++) {
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	60fb      	str	r3, [r7, #12]
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	dbf0      	blt.n	800e0a8 <disableLoRaWAN+0x10>
	}
	UTIL_TIMER_Stop(&TxTimer);
 800e0c6:	4809      	ldr	r0, [pc, #36]	; (800e0ec <disableLoRaWAN+0x54>)
 800e0c8:	f011 fdf0 	bl	801fcac <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&StopJoinTimer);
 800e0cc:	4808      	ldr	r0, [pc, #32]	; (800e0f0 <disableLoRaWAN+0x58>)
 800e0ce:	f011 fded 	bl	801fcac <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&TxLedTimer);
 800e0d2:	4808      	ldr	r0, [pc, #32]	; (800e0f4 <disableLoRaWAN+0x5c>)
 800e0d4:	f011 fdea 	bl	801fcac <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&RxLedTimer);
 800e0d8:	4807      	ldr	r0, [pc, #28]	; (800e0f8 <disableLoRaWAN+0x60>)
 800e0da:	f011 fde7 	bl	801fcac <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&JoinLedTimer);
 800e0de:	4807      	ldr	r0, [pc, #28]	; (800e0fc <disableLoRaWAN+0x64>)
 800e0e0:	f011 fde4 	bl	801fcac <UTIL_TIMER_Stop>
}
 800e0e4:	bf00      	nop
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	200005d8 	.word	0x200005d8
 800e0f0:	200005f0 	.word	0x200005f0
 800e0f4:	200006fc 	.word	0x200006fc
 800e0f8:	20000714 	.word	0x20000714
 800e0fc:	2000072c 	.word	0x2000072c

0800e100 <LoRaWAN_Init>:

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800e106:	2300      	movs	r3, #0
 800e108:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800e10a:	2300      	movs	r3, #0
 800e10c:	9302      	str	r3, [sp, #8]
 800e10e:	2303      	movs	r3, #3
 800e110:	9301      	str	r3, [sp, #4]
 800e112:	2301      	movs	r3, #1
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	4b59      	ldr	r3, [pc, #356]	; (800e27c <LoRaWAN_Init+0x17c>)
 800e118:	2200      	movs	r2, #0
 800e11a:	2100      	movs	r1, #0
 800e11c:	2002      	movs	r0, #2
 800e11e:	f011 ffcf 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800e122:	2300      	movs	r3, #0
 800e124:	9302      	str	r3, [sp, #8]
 800e126:	2305      	movs	r3, #5
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	2302      	movs	r3, #2
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	4b54      	ldr	r3, [pc, #336]	; (800e280 <LoRaWAN_Init+0x180>)
 800e130:	2200      	movs	r2, #0
 800e132:	2100      	movs	r1, #0
 800e134:	2002      	movs	r0, #2
 800e136:	f011 ffc3 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800e13a:	2300      	movs	r3, #0
 800e13c:	9302      	str	r3, [sp, #8]
 800e13e:	2303      	movs	r3, #3
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	2301      	movs	r3, #1
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	4b4f      	ldr	r3, [pc, #316]	; (800e284 <LoRaWAN_Init+0x184>)
 800e148:	2200      	movs	r2, #0
 800e14a:	2100      	movs	r1, #0
 800e14c:	2002      	movs	r0, #2
 800e14e:	f011 ffb7 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800e152:	1d3b      	adds	r3, r7, #4
 800e154:	4619      	mov	r1, r3
 800e156:	2000      	movs	r0, #0
 800e158:	f003 fa78 	bl	801164c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	0e1b      	lsrs	r3, r3, #24
 800e160:	b2db      	uxtb	r3, r3
 800e162:	461a      	mov	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	0c1b      	lsrs	r3, r3, #16
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	4619      	mov	r1, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	0a1b      	lsrs	r3, r3, #8
 800e170:	b2db      	uxtb	r3, r3
 800e172:	9302      	str	r3, [sp, #8]
 800e174:	9101      	str	r1, [sp, #4]
 800e176:	9200      	str	r2, [sp, #0]
 800e178:	4b43      	ldr	r3, [pc, #268]	; (800e288 <LoRaWAN_Init+0x188>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	2100      	movs	r1, #0
 800e17e:	2002      	movs	r0, #2
 800e180:	f011 ff9e 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800e184:	1d3b      	adds	r3, r7, #4
 800e186:	4619      	mov	r1, r3
 800e188:	2001      	movs	r0, #1
 800e18a:	f003 fa5f 	bl	801164c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	0e1b      	lsrs	r3, r3, #24
 800e192:	b2db      	uxtb	r3, r3
 800e194:	461a      	mov	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	0c1b      	lsrs	r3, r3, #16
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	4619      	mov	r1, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	0a1b      	lsrs	r3, r3, #8
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	b2c0      	uxtb	r0, r0
 800e1a8:	9003      	str	r0, [sp, #12]
 800e1aa:	9302      	str	r3, [sp, #8]
 800e1ac:	9101      	str	r1, [sp, #4]
 800e1ae:	9200      	str	r2, [sp, #0]
 800e1b0:	4b36      	ldr	r3, [pc, #216]	; (800e28c <LoRaWAN_Init+0x18c>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	2002      	movs	r0, #2
 800e1b8:	f011 ff82 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	4b33      	ldr	r3, [pc, #204]	; (800e290 <LoRaWAN_Init+0x190>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e1c8:	4832      	ldr	r0, [pc, #200]	; (800e294 <LoRaWAN_Init+0x194>)
 800e1ca:	f011 fccb 	bl	801fb64 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	4b31      	ldr	r3, [pc, #196]	; (800e298 <LoRaWAN_Init+0x198>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e1da:	4830      	ldr	r0, [pc, #192]	; (800e29c <LoRaWAN_Init+0x19c>)
 800e1dc:	f011 fcc2 	bl	801fb64 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	4b2e      	ldr	r3, [pc, #184]	; (800e2a0 <LoRaWAN_Init+0x1a0>)
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e1ec:	482d      	ldr	r0, [pc, #180]	; (800e2a4 <LoRaWAN_Init+0x1a4>)
 800e1ee:	f011 fcb9 	bl	801fb64 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4b2c      	ldr	r3, [pc, #176]	; (800e2a8 <LoRaWAN_Init+0x1a8>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e1fe:	482b      	ldr	r0, [pc, #172]	; (800e2ac <LoRaWAN_Init+0x1ac>)
 800e200:	f011 fcb0 	bl	801fb64 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800e204:	4a2a      	ldr	r2, [pc, #168]	; (800e2b0 <LoRaWAN_Init+0x1b0>)
 800e206:	2100      	movs	r1, #0
 800e208:	2001      	movs	r0, #1
 800e20a:	f011 fbe7 	bl	801f9dc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800e20e:	4a29      	ldr	r2, [pc, #164]	; (800e2b4 <LoRaWAN_Init+0x1b4>)
 800e210:	2100      	movs	r1, #0
 800e212:	2002      	movs	r0, #2
 800e214:	f011 fbe2 	bl	801f9dc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800e218:	4a27      	ldr	r2, [pc, #156]	; (800e2b8 <LoRaWAN_Init+0x1b8>)
 800e21a:	2100      	movs	r1, #0
 800e21c:	2004      	movs	r0, #4
 800e21e:	f011 fbdd 	bl	801f9dc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800e222:	4a26      	ldr	r2, [pc, #152]	; (800e2bc <LoRaWAN_Init+0x1bc>)
 800e224:	2100      	movs	r1, #0
 800e226:	2008      	movs	r0, #8
 800e228:	f011 fbd8 	bl	801f9dc <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800e22c:	f000 fd68 	bl	800ed00 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800e230:	4923      	ldr	r1, [pc, #140]	; (800e2c0 <LoRaWAN_Init+0x1c0>)
 800e232:	4824      	ldr	r0, [pc, #144]	; (800e2c4 <LoRaWAN_Init+0x1c4>)
 800e234:	f002 fa78 	bl	8010728 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800e238:	4823      	ldr	r0, [pc, #140]	; (800e2c8 <LoRaWAN_Init+0x1c8>)
 800e23a:	f002 fae3 	bl	8010804 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800e23e:	4819      	ldr	r0, [pc, #100]	; (800e2a4 <LoRaWAN_Init+0x1a4>)
 800e240:	f011 fcc6 	bl	801fbd0 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800e244:	4b21      	ldr	r3, [pc, #132]	; (800e2cc <LoRaWAN_Init+0x1cc>)
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	4a21      	ldr	r2, [pc, #132]	; (800e2d0 <LoRaWAN_Init+0x1d0>)
 800e24a:	7812      	ldrb	r2, [r2, #0]
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f002 fc30 	bl	8010ab4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800e254:	4b1f      	ldr	r3, [pc, #124]	; (800e2d4 <LoRaWAN_Init+0x1d4>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10b      	bne.n	800e274 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800e25c:	4b1e      	ldr	r3, [pc, #120]	; (800e2d8 <LoRaWAN_Init+0x1d8>)
 800e25e:	6819      	ldr	r1, [r3, #0]
 800e260:	2300      	movs	r3, #0
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	4b1d      	ldr	r3, [pc, #116]	; (800e2dc <LoRaWAN_Init+0x1dc>)
 800e266:	2200      	movs	r2, #0
 800e268:	481d      	ldr	r0, [pc, #116]	; (800e2e0 <LoRaWAN_Init+0x1e0>)
 800e26a:	f011 fc7b 	bl	801fb64 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800e26e:	481c      	ldr	r0, [pc, #112]	; (800e2e0 <LoRaWAN_Init+0x1e0>)
 800e270:	f011 fcae 	bl	801fbd0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	0802115c 	.word	0x0802115c
 800e280:	08021180 	.word	0x08021180
 800e284:	080211a4 	.word	0x080211a4
 800e288:	080211c8 	.word	0x080211c8
 800e28c:	080211ec 	.word	0x080211ec
 800e290:	0800e81d 	.word	0x0800e81d
 800e294:	200006fc 	.word	0x200006fc
 800e298:	0800e82f 	.word	0x0800e82f
 800e29c:	20000714 	.word	0x20000714
 800e2a0:	0800e841 	.word	0x0800e841
 800e2a4:	2000072c 	.word	0x2000072c
 800e2a8:	0800ec01 	.word	0x0800ec01
 800e2ac:	200005f0 	.word	0x200005f0
 800e2b0:	08010a49 	.word	0x08010a49
 800e2b4:	0800e431 	.word	0x0800e431
 800e2b8:	0800ec25 	.word	0x0800ec25
 800e2bc:	0800eb81 	.word	0x0800eb81
 800e2c0:	01030000 	.word	0x01030000
 800e2c4:	20000024 	.word	0x20000024
 800e2c8:	20000070 	.word	0x20000070
 800e2cc:	20000020 	.word	0x20000020
 800e2d0:	20000021 	.word	0x20000021
 800e2d4:	200005d4 	.word	0x200005d4
 800e2d8:	20000088 	.word	0x20000088
 800e2dc:	0800e7e9 	.word	0x0800e7e9
 800e2e0:	200005d8 	.word	0x200005d8

0800e2e4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800e2e4:	b5b0      	push	{r4, r5, r7, lr}
 800e2e6:	b08a      	sub	sp, #40	; 0x28
 800e2e8:	af06      	add	r7, sp, #24
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f000 8088 	beq.w	800e40a <OnRxData+0x126>
  {

    UTIL_TIMER_Start(&RxLedTimer);
 800e2fa:	4846      	ldr	r0, [pc, #280]	; (800e414 <OnRxData+0x130>)
 800e2fc:	f011 fc68 	bl	801fbd0 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d057      	beq.n	800e3b8 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d054      	beq.n	800e3b8 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d04d      	beq.n	800e3b8 <OnRxData+0xd4>
        {
          switch (appData->Port)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d021      	beq.n	800e368 <OnRxData+0x84>
 800e324:	2b03      	cmp	r3, #3
 800e326:	d149      	bne.n	800e3bc <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	785b      	ldrb	r3, [r3, #1]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d117      	bne.n	800e360 <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	2b02      	cmp	r3, #2
 800e338:	d00e      	beq.n	800e358 <OnRxData+0x74>
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	dc12      	bgt.n	800e364 <OnRxData+0x80>
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <OnRxData+0x64>
 800e342:	2b01      	cmp	r3, #1
 800e344:	d004      	beq.n	800e350 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800e346:	e00d      	b.n	800e364 <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 800e348:	2000      	movs	r0, #0
 800e34a:	f002 fd67 	bl	8010e1c <LmHandlerRequestClass>
                    break;
 800e34e:	e00a      	b.n	800e366 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 800e350:	2001      	movs	r0, #1
 800e352:	f002 fd63 	bl	8010e1c <LmHandlerRequestClass>
                    break;
 800e356:	e006      	b.n	800e366 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 800e358:	2002      	movs	r0, #2
 800e35a:	f002 fd5f 	bl	8010e1c <LmHandlerRequestClass>
                    break;
 800e35e:	e002      	b.n	800e366 <OnRxData+0x82>
                }
              }
 800e360:	bf00      	nop
 800e362:	e02e      	b.n	800e3c2 <OnRxData+0xde>
                    break;
 800e364:	bf00      	nop
              break;
 800e366:	e02c      	b.n	800e3c2 <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	785b      	ldrb	r3, [r3, #1]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d127      	bne.n	800e3c0 <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	4b26      	ldr	r3, [pc, #152]	; (800e418 <OnRxData+0x134>)
 800e37e:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800e380:	4b25      	ldr	r3, [pc, #148]	; (800e418 <OnRxData+0x134>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10b      	bne.n	800e3a0 <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800e388:	4b24      	ldr	r3, [pc, #144]	; (800e41c <OnRxData+0x138>)
 800e38a:	2200      	movs	r2, #0
 800e38c:	2100      	movs	r1, #0
 800e38e:	2003      	movs	r0, #3
 800e390:	f011 fe96 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800e394:	2201      	movs	r2, #1
 800e396:	2120      	movs	r1, #32
 800e398:	4821      	ldr	r0, [pc, #132]	; (800e420 <OnRxData+0x13c>)
 800e39a:	f7f9 fd30 	bl	8007dfe <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800e39e:	e00f      	b.n	800e3c0 <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800e3a0:	4b20      	ldr	r3, [pc, #128]	; (800e424 <OnRxData+0x140>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	2003      	movs	r0, #3
 800e3a8:	f011 fe8a 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	2120      	movs	r1, #32
 800e3b0:	481b      	ldr	r0, [pc, #108]	; (800e420 <OnRxData+0x13c>)
 800e3b2:	f7f9 fd24 	bl	8007dfe <HAL_GPIO_WritePin>
              break;
 800e3b6:	e003      	b.n	800e3c0 <OnRxData+0xdc>

            default:

              break;
          }
        }
 800e3b8:	bf00      	nop
 800e3ba:	e002      	b.n	800e3c2 <OnRxData+0xde>
              break;
 800e3bc:	bf00      	nop
 800e3be:	e000      	b.n	800e3c2 <OnRxData+0xde>
              break;
 800e3c0:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	7c1b      	ldrb	r3, [r3, #16]
 800e3c6:	2b05      	cmp	r3, #5
 800e3c8:	d81f      	bhi.n	800e40a <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	7bfa      	ldrb	r2, [r7, #15]
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800e3d6:	460c      	mov	r4, r1
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	7c09      	ldrb	r1, [r1, #16]
 800e3dc:	4608      	mov	r0, r1
 800e3de:	4912      	ldr	r1, [pc, #72]	; (800e428 <OnRxData+0x144>)
 800e3e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e3e4:	6838      	ldr	r0, [r7, #0]
 800e3e6:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	6838      	ldr	r0, [r7, #0]
 800e3ee:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800e3f2:	9005      	str	r0, [sp, #20]
 800e3f4:	9504      	str	r5, [sp, #16]
 800e3f6:	9103      	str	r1, [sp, #12]
 800e3f8:	9402      	str	r4, [sp, #8]
 800e3fa:	9201      	str	r2, [sp, #4]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	4b0b      	ldr	r3, [pc, #44]	; (800e42c <OnRxData+0x148>)
 800e400:	2200      	movs	r2, #0
 800e402:	2100      	movs	r1, #0
 800e404:	2003      	movs	r0, #3
 800e406:	f011 fe5b 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800e40a:	bf00      	nop
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bdb0      	pop	{r4, r5, r7, pc}
 800e412:	bf00      	nop
 800e414:	20000714 	.word	0x20000714
 800e418:	200006fa 	.word	0x200006fa
 800e41c:	08021210 	.word	0x08021210
 800e420:	48000400 	.word	0x48000400
 800e424:	0802121c 	.word	0x0802121c
 800e428:	20000008 	.word	0x20000008
 800e42c:	08021228 	.word	0x08021228

0800e430 <SendTxData>:

static void SendTxData(void)
{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b093      	sub	sp, #76	; 0x4c
 800e434:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800e436:	23ff      	movs	r3, #255	; 0xff
 800e438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t batteryLevel = GetBatteryLevel();
 800e43c:	f7f4 f8ec 	bl	8002618 <GetBatteryLevel>
 800e440:	4603      	mov	r3, r0
 800e442:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t pressure = 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	86bb      	strh	r3, [r7, #52]	; 0x34
  int16_t temperature = 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t humidity = 0;
 800e452:	2300      	movs	r3, #0
 800e454:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t i = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	63bb      	str	r3, [r7, #56]	; 0x38
  int32_t latitude = 0;
 800e45a:	2300      	movs	r3, #0
 800e45c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t longitude = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t altitudeGps = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	84fb      	strh	r3, [r7, #38]	; 0x26

  EnvSensors_Read(&sensor_data);
 800e466:	1d3b      	adds	r3, r7, #4
 800e468:	4618      	mov	r0, r3
 800e46a:	f7f4 fa47 	bl	80028fc <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800e46e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	4b72      	ldr	r3, [pc, #456]	; (800e640 <SendTxData+0x210>)
 800e476:	2201      	movs	r2, #1
 800e478:	2100      	movs	r1, #0
 800e47a:	2002      	movs	r0, #2
 800e47c:	f011 fe20 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
  float temperature_f = sensor_data.temperature*100;
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	4970      	ldr	r1, [pc, #448]	; (800e644 <SendTxData+0x214>)
 800e484:	4618      	mov	r0, r3
 800e486:	f7f2 fcaf 	bl	8000de8 <__aeabi_fmul>
 800e48a:	4603      	mov	r3, r0
 800e48c:	623b      	str	r3, [r7, #32]
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature_f / 100, (int)temperature_f % 100);
 800e48e:	6a38      	ldr	r0, [r7, #32]
 800e490:	f7f2 fdfa 	bl	8001088 <__aeabi_f2iz>
 800e494:	4603      	mov	r3, r0
 800e496:	4a6c      	ldr	r2, [pc, #432]	; (800e648 <SendTxData+0x218>)
 800e498:	fb82 1203 	smull	r1, r2, r2, r3
 800e49c:	1152      	asrs	r2, r2, #5
 800e49e:	17db      	asrs	r3, r3, #31
 800e4a0:	1ad4      	subs	r4, r2, r3
 800e4a2:	6a38      	ldr	r0, [r7, #32]
 800e4a4:	f7f2 fdf0 	bl	8001088 <__aeabi_f2iz>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	4b67      	ldr	r3, [pc, #412]	; (800e648 <SendTxData+0x218>)
 800e4ac:	fb83 1302 	smull	r1, r3, r3, r2
 800e4b0:	1159      	asrs	r1, r3, #5
 800e4b2:	17d3      	asrs	r3, r2, #31
 800e4b4:	1acb      	subs	r3, r1, r3
 800e4b6:	2164      	movs	r1, #100	; 0x64
 800e4b8:	fb01 f303 	mul.w	r3, r1, r3
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	9301      	str	r3, [sp, #4]
 800e4c0:	9400      	str	r4, [sp, #0]
 800e4c2:	4b62      	ldr	r3, [pc, #392]	; (800e64c <SendTxData+0x21c>)
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	2002      	movs	r0, #2
 800e4ca:	f011 fdf9 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
  temperature = (uint16_t)temperature_f;
 800e4ce:	6a38      	ldr	r0, [r7, #32]
 800e4d0:	f7f2 fe00 	bl	80010d4 <__aeabi_f2uiz>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	867b      	strh	r3, [r7, #50]	; 0x32

  float pressure_f = sensor_data.pressure*100;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4959      	ldr	r1, [pc, #356]	; (800e644 <SendTxData+0x214>)
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7f2 fc82 	bl	8000de8 <__aeabi_fmul>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	61fb      	str	r3, [r7, #28]
  APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure_f / 100, (int)pressure_f % 100);
 800e4e8:	69f8      	ldr	r0, [r7, #28]
 800e4ea:	f7f2 fdcd 	bl	8001088 <__aeabi_f2iz>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	4a55      	ldr	r2, [pc, #340]	; (800e648 <SendTxData+0x218>)
 800e4f2:	fb82 1203 	smull	r1, r2, r2, r3
 800e4f6:	1152      	asrs	r2, r2, #5
 800e4f8:	17db      	asrs	r3, r3, #31
 800e4fa:	1ad4      	subs	r4, r2, r3
 800e4fc:	69f8      	ldr	r0, [r7, #28]
 800e4fe:	f7f2 fdc3 	bl	8001088 <__aeabi_f2iz>
 800e502:	4602      	mov	r2, r0
 800e504:	4b50      	ldr	r3, [pc, #320]	; (800e648 <SendTxData+0x218>)
 800e506:	fb83 1302 	smull	r1, r3, r3, r2
 800e50a:	1159      	asrs	r1, r3, #5
 800e50c:	17d3      	asrs	r3, r2, #31
 800e50e:	1acb      	subs	r3, r1, r3
 800e510:	2164      	movs	r1, #100	; 0x64
 800e512:	fb01 f303 	mul.w	r3, r1, r3
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	9400      	str	r4, [sp, #0]
 800e51c:	4b4c      	ldr	r3, [pc, #304]	; (800e650 <SendTxData+0x220>)
 800e51e:	2201      	movs	r2, #1
 800e520:	2100      	movs	r1, #0
 800e522:	2002      	movs	r0, #2
 800e524:	f011 fdcc 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800e528:	4b4a      	ldr	r3, [pc, #296]	; (800e654 <SendTxData+0x224>)
 800e52a:	2202      	movs	r2, #2
 800e52c:	701a      	strb	r2, [r3, #0]

  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	4949      	ldr	r1, [pc, #292]	; (800e658 <SendTxData+0x228>)
 800e532:	4618      	mov	r0, r3
 800e534:	f7f2 fc58 	bl	8000de8 <__aeabi_fmul>
 800e538:	4603      	mov	r3, r0
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7f2 fdca 	bl	80010d4 <__aeabi_f2uiz>
 800e540:	4603      	mov	r3, r0
 800e542:	863b      	strh	r3, [r7, #48]	; 0x30
  temperature = (int16_t)(sensor_data.temperature);
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	4618      	mov	r0, r3
 800e548:	f7f2 fd9e 	bl	8001088 <__aeabi_f2iz>
 800e54c:	4603      	mov	r3, r0
 800e54e:	867b      	strh	r3, [r7, #50]	; 0x32
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	493c      	ldr	r1, [pc, #240]	; (800e644 <SendTxData+0x214>)
 800e554:	4618      	mov	r0, r3
 800e556:	f7f2 fc47 	bl	8000de8 <__aeabi_fmul>
 800e55a:	4603      	mov	r3, r0
 800e55c:	493e      	ldr	r1, [pc, #248]	; (800e658 <SendTxData+0x228>)
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f2 fcf6 	bl	8000f50 <__aeabi_fdiv>
 800e564:	4603      	mov	r3, r0
 800e566:	4618      	mov	r0, r3
 800e568:	f7f2 fdb4 	bl	80010d4 <__aeabi_f2uiz>
 800e56c:	4603      	mov	r3, r0
 800e56e:	86bb      	strh	r3, [r7, #52]	; 0x34

  AppData.Buffer[i++] = AppLedStateOn;
 800e570:	4b38      	ldr	r3, [pc, #224]	; (800e654 <SendTxData+0x224>)
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	1c59      	adds	r1, r3, #1
 800e578:	63b9      	str	r1, [r7, #56]	; 0x38
 800e57a:	4413      	add	r3, r2
 800e57c:	4a37      	ldr	r2, [pc, #220]	; (800e65c <SendTxData+0x22c>)
 800e57e:	7812      	ldrb	r2, [r2, #0]
 800e580:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800e582:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e584:	0a1b      	lsrs	r3, r3, #8
 800e586:	b298      	uxth	r0, r3
 800e588:	4b32      	ldr	r3, [pc, #200]	; (800e654 <SendTxData+0x224>)
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58e:	1c59      	adds	r1, r3, #1
 800e590:	63b9      	str	r1, [r7, #56]	; 0x38
 800e592:	4413      	add	r3, r2
 800e594:	b2c2      	uxtb	r2, r0
 800e596:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800e598:	4b2e      	ldr	r3, [pc, #184]	; (800e654 <SendTxData+0x224>)
 800e59a:	685a      	ldr	r2, [r3, #4]
 800e59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59e:	1c59      	adds	r1, r3, #1
 800e5a0:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5a2:	4413      	add	r3, r2
 800e5a4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e5a6:	b2d2      	uxtb	r2, r2
 800e5a8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800e5aa:	4b2a      	ldr	r3, [pc, #168]	; (800e654 <SendTxData+0x224>)
 800e5ac:	685a      	ldr	r2, [r3, #4]
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	1c59      	adds	r1, r3, #1
 800e5b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5b4:	4413      	add	r3, r2
 800e5b6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e5b8:	b2d2      	uxtb	r2, r2
 800e5ba:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800e5bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e5be:	0a1b      	lsrs	r3, r3, #8
 800e5c0:	b298      	uxth	r0, r3
 800e5c2:	4b24      	ldr	r3, [pc, #144]	; (800e654 <SendTxData+0x224>)
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c8:	1c59      	adds	r1, r3, #1
 800e5ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5cc:	4413      	add	r3, r2
 800e5ce:	b2c2      	uxtb	r2, r0
 800e5d0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800e5d2:	4b20      	ldr	r3, [pc, #128]	; (800e654 <SendTxData+0x224>)
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	1c59      	adds	r1, r3, #1
 800e5da:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5dc:	4413      	add	r3, r2
 800e5de:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e5e0:	b2d2      	uxtb	r2, r2
 800e5e2:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800e5e4:	4b1e      	ldr	r3, [pc, #120]	; (800e660 <SendTxData+0x230>)
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	2b08      	cmp	r3, #8
 800e5ea:	d007      	beq.n	800e5fc <SendTxData+0x1cc>
 800e5ec:	4b1c      	ldr	r3, [pc, #112]	; (800e660 <SendTxData+0x230>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d003      	beq.n	800e5fc <SendTxData+0x1cc>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800e5f4:	4b1a      	ldr	r3, [pc, #104]	; (800e660 <SendTxData+0x230>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d133      	bne.n	800e664 <SendTxData+0x234>
  {
    AppData.Buffer[i++] = 0;
 800e5fc:	4b15      	ldr	r3, [pc, #84]	; (800e654 <SendTxData+0x224>)
 800e5fe:	685a      	ldr	r2, [r3, #4]
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	1c59      	adds	r1, r3, #1
 800e604:	63b9      	str	r1, [r7, #56]	; 0x38
 800e606:	4413      	add	r3, r2
 800e608:	2200      	movs	r2, #0
 800e60a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e60c:	4b11      	ldr	r3, [pc, #68]	; (800e654 <SendTxData+0x224>)
 800e60e:	685a      	ldr	r2, [r3, #4]
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	1c59      	adds	r1, r3, #1
 800e614:	63b9      	str	r1, [r7, #56]	; 0x38
 800e616:	4413      	add	r3, r2
 800e618:	2200      	movs	r2, #0
 800e61a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e61c:	4b0d      	ldr	r3, [pc, #52]	; (800e654 <SendTxData+0x224>)
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e622:	1c59      	adds	r1, r3, #1
 800e624:	63b9      	str	r1, [r7, #56]	; 0x38
 800e626:	4413      	add	r3, r2
 800e628:	2200      	movs	r2, #0
 800e62a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e62c:	4b09      	ldr	r3, [pc, #36]	; (800e654 <SendTxData+0x224>)
 800e62e:	685a      	ldr	r2, [r3, #4]
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	1c59      	adds	r1, r3, #1
 800e634:	63b9      	str	r1, [r7, #56]	; 0x38
 800e636:	4413      	add	r3, r2
 800e638:	2200      	movs	r2, #0
 800e63a:	701a      	strb	r2, [r3, #0]
 800e63c:	e06e      	b.n	800e71c <SendTxData+0x2ec>
 800e63e:	bf00      	nop
 800e640:	08021270 	.word	0x08021270
 800e644:	42c80000 	.word	0x42c80000
 800e648:	51eb851f 	.word	0x51eb851f
 800e64c:	0802127c 	.word	0x0802127c
 800e650:	08021290 	.word	0x08021290
 800e654:	2000008c 	.word	0x2000008c
 800e658:	41200000 	.word	0x41200000
 800e65c:	200006fa 	.word	0x200006fa
 800e660:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	62fb      	str	r3, [r7, #44]	; 0x2c
    longitude = sensor_data.longitude;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	62bb      	str	r3, [r7, #40]	; 0x28

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800e66c:	4b55      	ldr	r3, [pc, #340]	; (800e7c4 <SendTxData+0x394>)
 800e66e:	685a      	ldr	r2, [r3, #4]
 800e670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e672:	1c59      	adds	r1, r3, #1
 800e674:	63b9      	str	r1, [r7, #56]	; 0x38
 800e676:	18d4      	adds	r4, r2, r3
 800e678:	f7f3 ffce 	bl	8002618 <GetBatteryLevel>
 800e67c:	4603      	mov	r3, r0
 800e67e:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800e680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e682:	1418      	asrs	r0, r3, #16
 800e684:	4b4f      	ldr	r3, [pc, #316]	; (800e7c4 <SendTxData+0x394>)
 800e686:	685a      	ldr	r2, [r3, #4]
 800e688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68a:	1c59      	adds	r1, r3, #1
 800e68c:	63b9      	str	r1, [r7, #56]	; 0x38
 800e68e:	4413      	add	r3, r2
 800e690:	b2c2      	uxtb	r2, r0
 800e692:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	1218      	asrs	r0, r3, #8
 800e698:	4b4a      	ldr	r3, [pc, #296]	; (800e7c4 <SendTxData+0x394>)
 800e69a:	685a      	ldr	r2, [r3, #4]
 800e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69e:	1c59      	adds	r1, r3, #1
 800e6a0:	63b9      	str	r1, [r7, #56]	; 0x38
 800e6a2:	4413      	add	r3, r2
 800e6a4:	b2c2      	uxtb	r2, r0
 800e6a6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800e6a8:	4b46      	ldr	r3, [pc, #280]	; (800e7c4 <SendTxData+0x394>)
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ae:	1c59      	adds	r1, r3, #1
 800e6b0:	63b9      	str	r1, [r7, #56]	; 0x38
 800e6b2:	4413      	add	r3, r2
 800e6b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b6:	b2d2      	uxtb	r2, r2
 800e6b8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	1418      	asrs	r0, r3, #16
 800e6be:	4b41      	ldr	r3, [pc, #260]	; (800e7c4 <SendTxData+0x394>)
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	1c59      	adds	r1, r3, #1
 800e6c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e6c8:	4413      	add	r3, r2
 800e6ca:	b2c2      	uxtb	r2, r0
 800e6cc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	1218      	asrs	r0, r3, #8
 800e6d2:	4b3c      	ldr	r3, [pc, #240]	; (800e7c4 <SendTxData+0x394>)
 800e6d4:	685a      	ldr	r2, [r3, #4]
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d8:	1c59      	adds	r1, r3, #1
 800e6da:	63b9      	str	r1, [r7, #56]	; 0x38
 800e6dc:	4413      	add	r3, r2
 800e6de:	b2c2      	uxtb	r2, r0
 800e6e0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800e6e2:	4b38      	ldr	r3, [pc, #224]	; (800e7c4 <SendTxData+0x394>)
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	1c59      	adds	r1, r3, #1
 800e6ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800e6ec:	4413      	add	r3, r2
 800e6ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6f0:	b2d2      	uxtb	r2, r2
 800e6f2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800e6f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6f6:	0a1b      	lsrs	r3, r3, #8
 800e6f8:	b298      	uxth	r0, r3
 800e6fa:	4b32      	ldr	r3, [pc, #200]	; (800e7c4 <SendTxData+0x394>)
 800e6fc:	685a      	ldr	r2, [r3, #4]
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	1c59      	adds	r1, r3, #1
 800e702:	63b9      	str	r1, [r7, #56]	; 0x38
 800e704:	4413      	add	r3, r2
 800e706:	b2c2      	uxtb	r2, r0
 800e708:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800e70a:	4b2e      	ldr	r3, [pc, #184]	; (800e7c4 <SendTxData+0x394>)
 800e70c:	685a      	ldr	r2, [r3, #4]
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	1c59      	adds	r1, r3, #1
 800e712:	63b9      	str	r1, [r7, #56]	; 0x38
 800e714:	4413      	add	r3, r2
 800e716:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e718:	b2d2      	uxtb	r2, r2
 800e71a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	b2da      	uxtb	r2, r3
 800e720:	4b28      	ldr	r3, [pc, #160]	; (800e7c4 <SendTxData+0x394>)
 800e722:	705a      	strb	r2, [r3, #1]


  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800e724:	4b28      	ldr	r3, [pc, #160]	; (800e7c8 <SendTxData+0x398>)
 800e726:	7a5b      	ldrb	r3, [r3, #9]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d007      	beq.n	800e73c <SendTxData+0x30c>
 800e72c:	f002 fa64 	bl	8010bf8 <LmHandlerJoinStatus>
 800e730:	4603      	mov	r3, r0
 800e732:	2b01      	cmp	r3, #1
 800e734:	d102      	bne.n	800e73c <SendTxData+0x30c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800e736:	4824      	ldr	r0, [pc, #144]	; (800e7c8 <SendTxData+0x398>)
 800e738:	f011 fab8 	bl	801fcac <UTIL_TIMER_Stop>
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800e73c:	4b23      	ldr	r3, [pc, #140]	; (800e7cc <SendTxData+0x39c>)
 800e73e:	78db      	ldrb	r3, [r3, #3]
 800e740:	2200      	movs	r2, #0
 800e742:	4619      	mov	r1, r3
 800e744:	481f      	ldr	r0, [pc, #124]	; (800e7c4 <SendTxData+0x394>)
 800e746:	f002 fa73 	bl	8010c30 <LmHandlerSend>
 800e74a:	4603      	mov	r3, r0
 800e74c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (LORAMAC_HANDLER_SUCCESS == status)
 800e750:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e754:	2b00      	cmp	r3, #0
 800e756:	d106      	bne.n	800e766 <SendTxData+0x336>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800e758:	4b1d      	ldr	r3, [pc, #116]	; (800e7d0 <SendTxData+0x3a0>)
 800e75a:	2201      	movs	r2, #1
 800e75c:	2100      	movs	r1, #0
 800e75e:	2001      	movs	r0, #1
 800e760:	f011 fcae 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
 800e764:	e016      	b.n	800e794 <SendTxData+0x364>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800e766:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e76a:	f113 0f06 	cmn.w	r3, #6
 800e76e:	d111      	bne.n	800e794 <SendTxData+0x364>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800e770:	f002 f996 	bl	8010aa0 <LmHandlerGetDutyCycleWaitTime>
 800e774:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (nextTxIn > 0)
 800e776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00b      	beq.n	800e794 <SendTxData+0x364>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800e77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77e:	4a15      	ldr	r2, [pc, #84]	; (800e7d4 <SendTxData+0x3a4>)
 800e780:	fba2 2303 	umull	r2, r3, r2, r3
 800e784:	099b      	lsrs	r3, r3, #6
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	4b13      	ldr	r3, [pc, #76]	; (800e7d8 <SendTxData+0x3a8>)
 800e78a:	2201      	movs	r2, #1
 800e78c:	2100      	movs	r1, #0
 800e78e:	2001      	movs	r0, #1
 800e790:	f011 fc96 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800e794:	4b11      	ldr	r3, [pc, #68]	; (800e7dc <SendTxData+0x3ac>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10f      	bne.n	800e7bc <SendTxData+0x38c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800e79c:	4810      	ldr	r0, [pc, #64]	; (800e7e0 <SendTxData+0x3b0>)
 800e79e:	f011 fa85 	bl	801fcac <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800e7a2:	4b10      	ldr	r3, [pc, #64]	; (800e7e4 <SendTxData+0x3b4>)
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	bf38      	it	cc
 800e7ac:	4613      	movcc	r3, r2
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	480b      	ldr	r0, [pc, #44]	; (800e7e0 <SendTxData+0x3b0>)
 800e7b2:	f011 faeb 	bl	801fd8c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800e7b6:	480a      	ldr	r0, [pc, #40]	; (800e7e0 <SendTxData+0x3b0>)
 800e7b8:	f011 fa0a 	bl	801fbd0 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800e7bc:	bf00      	nop
 800e7be:	3744      	adds	r7, #68	; 0x44
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd90      	pop	{r4, r7, pc}
 800e7c4:	2000008c 	.word	0x2000008c
 800e7c8:	2000072c 	.word	0x2000072c
 800e7cc:	20000070 	.word	0x20000070
 800e7d0:	080212ac 	.word	0x080212ac
 800e7d4:	10624dd3 	.word	0x10624dd3
 800e7d8:	080212bc 	.word	0x080212bc
 800e7dc:	200005d4 	.word	0x200005d4
 800e7e0:	200005d8 	.word	0x200005d8
 800e7e4:	20000088 	.word	0x20000088

0800e7e8 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */
	APP_LOG(TS_ON, VLEVEL_M, "starting TX timer\r\n");
 800e7f0:	4b08      	ldr	r3, [pc, #32]	; (800e814 <OnTxTimerEvent+0x2c>)
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	2002      	movs	r0, #2
 800e7f8:	f011 fc62 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	2002      	movs	r0, #2
 800e800:	f011 f90e 	bl	801fa20 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800e804:	4804      	ldr	r0, [pc, #16]	; (800e818 <OnTxTimerEvent+0x30>)
 800e806:	f011 f9e3 	bl	801fbd0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800e80a:	bf00      	nop
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	080212dc 	.word	0x080212dc
 800e818:	200005d8 	.word	0x200005d8

0800e81c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{ }
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	bc80      	pop	{r7}
 800e82c:	4770      	bx	lr

0800e82e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{ }
 800e82e:	b480      	push	{r7}
 800e830:	b083      	sub	sp, #12
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	bf00      	nop
 800e838:	370c      	adds	r7, #12
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bc80      	pop	{r7}
 800e83e:	4770      	bx	lr

0800e840 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{ }
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	bf00      	nop
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bc80      	pop	{r7}
 800e850:	4770      	bx	lr
	...

0800e854 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af04      	add	r7, sp, #16
 800e85a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d041      	beq.n	800e8e6 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d03d      	beq.n	800e8e6 <OnTxData+0x92>
    {
      UTIL_TIMER_Start(&TxLedTimer);
 800e86a:	4821      	ldr	r0, [pc, #132]	; (800e8f0 <OnTxData+0x9c>)
 800e86c:	f011 f9b0 	bl	801fbd0 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800e870:	4b20      	ldr	r3, [pc, #128]	; (800e8f4 <OnTxData+0xa0>)
 800e872:	2200      	movs	r2, #0
 800e874:	2100      	movs	r1, #0
 800e876:	2002      	movs	r0, #2
 800e878:	f011 fc22 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	7c12      	ldrb	r2, [r2, #16]
 800e884:	4611      	mov	r1, r2
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800e88c:	4610      	mov	r0, r2
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800e894:	9203      	str	r2, [sp, #12]
 800e896:	9002      	str	r0, [sp, #8]
 800e898:	9101      	str	r1, [sp, #4]
 800e89a:	9300      	str	r3, [sp, #0]
 800e89c:	4b16      	ldr	r3, [pc, #88]	; (800e8f8 <OnTxData+0xa4>)
 800e89e:	2200      	movs	r2, #0
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	2002      	movs	r0, #2
 800e8a4:	f011 fc0c 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_M, " | MSG TYPE:");
 800e8a8:	4b14      	ldr	r3, [pc, #80]	; (800e8fc <OnTxData+0xa8>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	2002      	movs	r0, #2
 800e8b0:	f011 fc06 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	7a1b      	ldrb	r3, [r3, #8]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d10e      	bne.n	800e8da <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	7a5b      	ldrb	r3, [r3, #9]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d001      	beq.n	800e8c8 <OnTxData+0x74>
 800e8c4:	4b0e      	ldr	r3, [pc, #56]	; (800e900 <OnTxData+0xac>)
 800e8c6:	e000      	b.n	800e8ca <OnTxData+0x76>
 800e8c8:	4b0e      	ldr	r3, [pc, #56]	; (800e904 <OnTxData+0xb0>)
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	4b0e      	ldr	r3, [pc, #56]	; (800e908 <OnTxData+0xb4>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	2002      	movs	r0, #2
 800e8d4:	f011 fbf4 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800e8d8:	e005      	b.n	800e8e6 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
 800e8da:	4b0c      	ldr	r3, [pc, #48]	; (800e90c <OnTxData+0xb8>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	2100      	movs	r1, #0
 800e8e0:	2002      	movs	r0, #2
 800e8e2:	f011 fbed 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e8e6:	bf00      	nop
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	200006fc 	.word	0x200006fc
 800e8f4:	080212f0 	.word	0x080212f0
 800e8f8:	08021324 	.word	0x08021324
 800e8fc:	08021358 	.word	0x08021358
 800e900:	08021368 	.word	0x08021368
 800e904:	0802136c 	.word	0x0802136c
 800e908:	08021374 	.word	0x08021374
 800e90c:	08021388 	.word	0x08021388

0800e910 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d039      	beq.n	800e992 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11e      	bne.n	800e966 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800e928:	2100      	movs	r1, #0
 800e92a:	2004      	movs	r0, #4
 800e92c:	f011 f878 	bl	801fa20 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800e930:	481a      	ldr	r0, [pc, #104]	; (800e99c <OnJoinRequest+0x8c>)
 800e932:	f011 f9bb 	bl	801fcac <UTIL_TIMER_Stop>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800e936:	4b1a      	ldr	r3, [pc, #104]	; (800e9a0 <OnJoinRequest+0x90>)
 800e938:	2200      	movs	r2, #0
 800e93a:	2100      	movs	r1, #0
 800e93c:	2002      	movs	r0, #2
 800e93e:	f011 fbbf 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	79db      	ldrb	r3, [r3, #7]
 800e946:	2b01      	cmp	r3, #1
 800e948:	d106      	bne.n	800e958 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800e94a:	4b16      	ldr	r3, [pc, #88]	; (800e9a4 <OnJoinRequest+0x94>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	2002      	movs	r0, #2
 800e952:	f011 fbb5 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800e956:	e01c      	b.n	800e992 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800e958:	4b13      	ldr	r3, [pc, #76]	; (800e9a8 <OnJoinRequest+0x98>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	2100      	movs	r1, #0
 800e95e:	2002      	movs	r0, #2
 800e960:	f011 fbae 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e964:	e015      	b.n	800e992 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800e966:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <OnJoinRequest+0x9c>)
 800e968:	2200      	movs	r2, #0
 800e96a:	2100      	movs	r1, #0
 800e96c:	2002      	movs	r0, #2
 800e96e:	f011 fba7 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	79db      	ldrb	r3, [r3, #7]
 800e976:	2b02      	cmp	r3, #2
 800e978:	d10b      	bne.n	800e992 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <OnJoinRequest+0xa0>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	2100      	movs	r1, #0
 800e980:	2002      	movs	r0, #2
 800e982:	f011 fb9d 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800e986:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <OnJoinRequest+0xa4>)
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	2101      	movs	r1, #1
 800e98c:	4618      	mov	r0, r3
 800e98e:	f002 f891 	bl	8010ab4 <LmHandlerJoin>
}
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	2000072c 	.word	0x2000072c
 800e9a0:	08021398 	.word	0x08021398
 800e9a4:	080213b0 	.word	0x080213b0
 800e9a8:	080213d0 	.word	0x080213d0
 800e9ac:	080213f0 	.word	0x080213f0
 800e9b0:	0802140c 	.word	0x0802140c
 800e9b4:	20000020 	.word	0x20000020

0800e9b8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800e9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ba:	b093      	sub	sp, #76	; 0x4c
 800e9bc:	af0c      	add	r7, sp, #48	; 0x30
 800e9be:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d056      	beq.n	800ea74 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	785b      	ldrb	r3, [r3, #1]
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d008      	beq.n	800e9e0 <OnBeaconStatusChange+0x28>
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	d049      	beq.n	800ea66 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800e9d2:	4b2b      	ldr	r3, [pc, #172]	; (800ea80 <OnBeaconStatusChange+0xc8>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	2002      	movs	r0, #2
 800e9da:	f011 fb71 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e9de:	e04a      	b.n	800ea76 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	7c1b      	ldrb	r3, [r3, #16]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e9ec:	461c      	mov	r4, r3
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800e9f4:	461d      	mov	r5, r3
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	697a      	ldr	r2, [r7, #20]
 800e9fc:	6852      	ldr	r2, [r2, #4]
 800e9fe:	6979      	ldr	r1, [r7, #20]
 800ea00:	7d89      	ldrb	r1, [r1, #22]
 800ea02:	460e      	mov	r6, r1
 800ea04:	6979      	ldr	r1, [r7, #20]
 800ea06:	7dc9      	ldrb	r1, [r1, #23]
 800ea08:	6139      	str	r1, [r7, #16]
 800ea0a:	6979      	ldr	r1, [r7, #20]
 800ea0c:	7e09      	ldrb	r1, [r1, #24]
 800ea0e:	60f9      	str	r1, [r7, #12]
 800ea10:	6979      	ldr	r1, [r7, #20]
 800ea12:	7e49      	ldrb	r1, [r1, #25]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	6979      	ldr	r1, [r7, #20]
 800ea18:	7e89      	ldrb	r1, [r1, #26]
 800ea1a:	6079      	str	r1, [r7, #4]
 800ea1c:	6979      	ldr	r1, [r7, #20]
 800ea1e:	7ec9      	ldrb	r1, [r1, #27]
 800ea20:	6039      	str	r1, [r7, #0]
 800ea22:	6979      	ldr	r1, [r7, #20]
 800ea24:	7f09      	ldrb	r1, [r1, #28]
 800ea26:	910b      	str	r1, [sp, #44]	; 0x2c
 800ea28:	f8d7 c000 	ldr.w	ip, [r7]
 800ea2c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800ea30:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800ea34:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ea38:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ea3c:	f8cd c020 	str.w	ip, [sp, #32]
 800ea40:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800ea44:	f8cd c01c 	str.w	ip, [sp, #28]
 800ea48:	6939      	ldr	r1, [r7, #16]
 800ea4a:	9106      	str	r1, [sp, #24]
 800ea4c:	9605      	str	r6, [sp, #20]
 800ea4e:	9204      	str	r2, [sp, #16]
 800ea50:	9303      	str	r3, [sp, #12]
 800ea52:	9502      	str	r5, [sp, #8]
 800ea54:	9401      	str	r4, [sp, #4]
 800ea56:	9000      	str	r0, [sp, #0]
 800ea58:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <OnBeaconStatusChange+0xcc>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	2002      	movs	r0, #2
 800ea60:	f011 fb2e 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800ea64:	e007      	b.n	800ea76 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800ea66:	4b08      	ldr	r3, [pc, #32]	; (800ea88 <OnBeaconStatusChange+0xd0>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	2002      	movs	r0, #2
 800ea6e:	f011 fb27 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ea72:	e000      	b.n	800ea76 <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800ea74:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800ea76:	bf00      	nop
 800ea78:	371c      	adds	r7, #28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	08021430 	.word	0x08021430
 800ea84:	08021448 	.word	0x08021448
 800ea88:	080214bc 	.word	0x080214bc

0800ea8c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800ea90:	bf00      	nop
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bc80      	pop	{r7}
 800ea96:	4770      	bx	lr

0800ea98 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af02      	add	r7, sp, #8
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800eaa2:	79fb      	ldrb	r3, [r7, #7]
 800eaa4:	4a06      	ldr	r2, [pc, #24]	; (800eac0 <OnClassChange+0x28>)
 800eaa6:	5cd3      	ldrb	r3, [r2, r3]
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	4b06      	ldr	r3, [pc, #24]	; (800eac4 <OnClassChange+0x2c>)
 800eaac:	2200      	movs	r2, #0
 800eaae:	2100      	movs	r1, #0
 800eab0:	2002      	movs	r0, #2
 800eab2:	f011 fb05 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800eab6:	bf00      	nop
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	080214f8 	.word	0x080214f8
 800eac4:	080214dc 	.word	0x080214dc

0800eac8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800eacc:	2100      	movs	r1, #0
 800eace:	2001      	movs	r0, #1
 800ead0:	f010 ffa6 	bl	801fa20 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800ead4:	bf00      	nop
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800eae0:	4a0d      	ldr	r2, [pc, #52]	; (800eb18 <OnTxPeriodicityChanged+0x40>)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800eae6:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <OnTxPeriodicityChanged+0x40>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d103      	bne.n	800eaf6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800eaee:	4b0a      	ldr	r3, [pc, #40]	; (800eb18 <OnTxPeriodicityChanged+0x40>)
 800eaf0:	f242 7210 	movw	r2, #10000	; 0x2710
 800eaf4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800eaf6:	4809      	ldr	r0, [pc, #36]	; (800eb1c <OnTxPeriodicityChanged+0x44>)
 800eaf8:	f011 f8d8 	bl	801fcac <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800eafc:	4b06      	ldr	r3, [pc, #24]	; (800eb18 <OnTxPeriodicityChanged+0x40>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4619      	mov	r1, r3
 800eb02:	4806      	ldr	r0, [pc, #24]	; (800eb1c <OnTxPeriodicityChanged+0x44>)
 800eb04:	f011 f942 	bl	801fd8c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800eb08:	4804      	ldr	r0, [pc, #16]	; (800eb1c <OnTxPeriodicityChanged+0x44>)
 800eb0a:	f011 f861 	bl	801fbd0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800eb0e:	bf00      	nop
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	20000088 	.word	0x20000088
 800eb1c:	200005d8 	.word	0x200005d8

0800eb20 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	4603      	mov	r3, r0
 800eb28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800eb2a:	4a04      	ldr	r2, [pc, #16]	; (800eb3c <OnTxFrameCtrlChanged+0x1c>)
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bc80      	pop	{r7}
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	20000070 	.word	0x20000070

0800eb40 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	4603      	mov	r3, r0
 800eb48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800eb4a:	4a04      	ldr	r2, [pc, #16]	; (800eb5c <OnPingSlotPeriodicityChanged+0x1c>)
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800eb50:	bf00      	nop
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bc80      	pop	{r7}
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	20000070 	.word	0x20000070

0800eb60 <OnSystemReset>:

static void OnSystemReset(void)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800eb64:	f002 fda3 	bl	80116ae <LmHandlerHalt>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d106      	bne.n	800eb7c <OnSystemReset+0x1c>
 800eb6e:	f002 f843 	bl	8010bf8 <LmHandlerJoinStatus>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d101      	bne.n	800eb7c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800eb78:	f7ff fa78 	bl	800e06c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800eb7c:	bf00      	nop
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <StopJoin>:

static void StopJoin(void)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800eb84:	4817      	ldr	r0, [pc, #92]	; (800ebe4 <StopJoin+0x64>)
 800eb86:	f011 f891 	bl	801fcac <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800eb8a:	f002 fd83 	bl	8011694 <LmHandlerStop>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d006      	beq.n	800eba2 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800eb94:	4b14      	ldr	r3, [pc, #80]	; (800ebe8 <StopJoin+0x68>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	2100      	movs	r1, #0
 800eb9a:	2002      	movs	r0, #2
 800eb9c:	f011 fa90 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
 800eba0:	e01a      	b.n	800ebd8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800eba2:	4b12      	ldr	r3, [pc, #72]	; (800ebec <StopJoin+0x6c>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	2100      	movs	r1, #0
 800eba8:	2002      	movs	r0, #2
 800ebaa:	f011 fa89 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ebae:	4b10      	ldr	r3, [pc, #64]	; (800ebf0 <StopJoin+0x70>)
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ebb4:	4b0f      	ldr	r3, [pc, #60]	; (800ebf4 <StopJoin+0x74>)
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2100      	movs	r1, #0
 800ebba:	2002      	movs	r0, #2
 800ebbc:	f011 fa80 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ebc0:	480d      	ldr	r0, [pc, #52]	; (800ebf8 <StopJoin+0x78>)
 800ebc2:	f001 fe1f 	bl	8010804 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ebc6:	4b0a      	ldr	r3, [pc, #40]	; (800ebf0 <StopJoin+0x70>)
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2101      	movs	r1, #1
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f001 ff71 	bl	8010ab4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800ebd2:	4804      	ldr	r0, [pc, #16]	; (800ebe4 <StopJoin+0x64>)
 800ebd4:	f010 fffc 	bl	801fbd0 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ebd8:	4808      	ldr	r0, [pc, #32]	; (800ebfc <StopJoin+0x7c>)
 800ebda:	f010 fff9 	bl	801fbd0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ebde:	bf00      	nop
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	200005d8 	.word	0x200005d8
 800ebe8:	080214fc 	.word	0x080214fc
 800ebec:	0802151c 	.word	0x0802151c
 800ebf0:	20000020 	.word	0x20000020
 800ebf4:	08021530 	.word	0x08021530
 800ebf8:	20000070 	.word	0x20000070
 800ebfc:	200005f0 	.word	0x200005f0

0800ec00 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800ec08:	4b05      	ldr	r3, [pc, #20]	; (800ec20 <OnStopJoinTimerEvent+0x20>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	2b02      	cmp	r3, #2
 800ec0e:	d103      	bne.n	800ec18 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ec10:	2100      	movs	r1, #0
 800ec12:	2008      	movs	r0, #8
 800ec14:	f010 ff04 	bl	801fa20 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ec18:	bf00      	nop
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20000020 	.word	0x20000020

0800ec24 <StoreContext>:

static void StoreContext(void)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ec2a:	23ff      	movs	r3, #255	; 0xff
 800ec2c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ec2e:	f002 fd73 	bl	8011718 <LmHandlerNvmDataStore>
 800ec32:	4603      	mov	r3, r0
 800ec34:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800ec36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec3a:	f113 0f08 	cmn.w	r3, #8
 800ec3e:	d106      	bne.n	800ec4e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800ec40:	4b0a      	ldr	r3, [pc, #40]	; (800ec6c <StoreContext+0x48>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	2100      	movs	r1, #0
 800ec46:	2002      	movs	r0, #2
 800ec48:	f011 fa3a 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800ec4c:	e00a      	b.n	800ec64 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800ec4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec56:	d105      	bne.n	800ec64 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800ec58:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <StoreContext+0x4c>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	2002      	movs	r0, #2
 800ec60:	f011 fa2e 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 800ec64:	bf00      	nop
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	08021550 	.word	0x08021550
 800ec70:	08021568 	.word	0x08021568

0800ec74 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800ec7e:	79fb      	ldrb	r3, [r7, #7]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d106      	bne.n	800ec92 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800ec84:	4b08      	ldr	r3, [pc, #32]	; (800eca8 <OnNvmDataChange+0x34>)
 800ec86:	2200      	movs	r2, #0
 800ec88:	2100      	movs	r1, #0
 800ec8a:	2002      	movs	r0, #2
 800ec8c:	f011 fa18 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ec90:	e005      	b.n	800ec9e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ec92:	4b06      	ldr	r3, [pc, #24]	; (800ecac <OnNvmDataChange+0x38>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	2100      	movs	r1, #0
 800ec98:	2002      	movs	r0, #2
 800ec9a:	f011 fa11 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 800ec9e:	bf00      	nop
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	08021580 	.word	0x08021580
 800ecac:	08021594 	.word	0x08021594

0800ecb0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800ecba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ecbe:	4807      	ldr	r0, [pc, #28]	; (800ecdc <OnStoreContextRequest+0x2c>)
 800ecc0:	f7f2 fd84 	bl	80017cc <FLASH_IF_Erase>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d104      	bne.n	800ecd4 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	6879      	ldr	r1, [r7, #4]
 800ecce:	4803      	ldr	r0, [pc, #12]	; (800ecdc <OnStoreContextRequest+0x2c>)
 800ecd0:	f7f2 fd2c 	bl	800172c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ecd4:	bf00      	nop
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	0803f000 	.word	0x0803f000

0800ece0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	4903      	ldr	r1, [pc, #12]	; (800ecfc <OnRestoreContextRequest+0x1c>)
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7f2 fd44 	bl	800177c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ecf4:	bf00      	nop
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	0803f000 	.word	0x0803f000

0800ed00 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800ed04:	4b15      	ldr	r3, [pc, #84]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ed0a:	4b14      	ldr	r3, [pc, #80]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ed10:	4b12      	ldr	r3, [pc, #72]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ed16:	4b11      	ldr	r3, [pc, #68]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800ed1c:	4b0f      	ldr	r3, [pc, #60]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed24:	4a0d      	ldr	r2, [pc, #52]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed26:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ed28:	4b0c      	ldr	r3, [pc, #48]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10c      	bne.n	800ed4a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ed30:	4b0b      	ldr	r3, [pc, #44]	; (800ed60 <LoraInfo_Init+0x60>)
 800ed32:	2200      	movs	r2, #0
 800ed34:	2100      	movs	r1, #0
 800ed36:	2000      	movs	r0, #0
 800ed38:	f011 f9c2 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ed3c:	bf00      	nop
 800ed3e:	f011 f9ad 	bl	802009c <UTIL_ADV_TRACE_IsBufferEmpty>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d1fa      	bne.n	800ed3e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ed48:	e7fe      	b.n	800ed48 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ed4a:	4b04      	ldr	r3, [pc, #16]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800ed50:	4b02      	ldr	r3, [pc, #8]	; (800ed5c <LoraInfo_Init+0x5c>)
 800ed52:	2201      	movs	r2, #1
 800ed54:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ed56:	bf00      	nop
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000744 	.word	0x20000744
 800ed60:	080215a8 	.word	0x080215a8

0800ed64 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ed64:	b480      	push	{r7}
 800ed66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ed68:	4b02      	ldr	r3, [pc, #8]	; (800ed74 <LoraInfo_GetPtr+0x10>)
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bc80      	pop	{r7}
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	20000744 	.word	0x20000744

0800ed78 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ed7c:	f7f6 fc5c 	bl	8005638 <BSP_RADIO_Init>
 800ed80:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b082      	sub	sp, #8
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7f6 fc82 	bl	800569c <BSP_RADIO_ConfigRFSwitch>
 800ed98:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800eda6:	f7f6 fcc7 	bl	8005738 <BSP_RADIO_GetTxConfig>
 800edaa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800edac:	4618      	mov	r0, r3
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800edb4:	f7f6 fcc7 	bl	8005746 <BSP_RADIO_IsTCXO>
 800edb8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800edba:	4618      	mov	r0, r3
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800edc2:	f7f6 fcc7 	bl	8005754 <BSP_RADIO_IsDCDC>
 800edc6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800edc8:	4618      	mov	r0, r3
 800edca:	bd80      	pop	{r7, pc}

0800edcc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	4603      	mov	r3, r0
 800edd4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	4618      	mov	r0, r3
 800edda:	f7f6 fcc2 	bl	8005762 <BSP_RADIO_GetRFOMaxPowerConfig>
 800edde:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	33f1      	adds	r3, #241	; 0xf1
 800edf4:	2210      	movs	r2, #16
 800edf6:	2100      	movs	r1, #0
 800edf8:	4618      	mov	r0, r3
 800edfa:	f00c fdd5 	bl	801b9a8 <memset1>
    ctx->M_n = 0;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	22f0      	movs	r2, #240	; 0xf0
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f00c fdcb 	bl	801b9a8 <memset1>
}
 800ee12:	bf00      	nop
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	461a      	mov	r2, r3
 800ee28:	2110      	movs	r1, #16
 800ee2a:	6838      	ldr	r0, [r7, #0]
 800ee2c:	f000 fe5c 	bl	800fae8 <lorawan_aes_set_key>
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08c      	sub	sp, #48	; 0x30
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f000 80a1 	beq.w	800ef92 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee56:	f1c3 0310 	rsb	r3, r3, #16
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	bf28      	it	cs
 800ee60:	4613      	movcs	r3, r2
 800ee62:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee70:	4413      	add	r3, r2
 800ee72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee74:	b292      	uxth	r2, r2
 800ee76:	68b9      	ldr	r1, [r7, #8]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f00c fd5a 	bl	801b932 <memcpy1>
        ctx->M_n += mlen;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	441a      	add	r2, r3
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee94:	2b0f      	cmp	r3, #15
 800ee96:	f240 808d 	bls.w	800efb4 <AES_CMAC_Update+0x17c>
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	f000 8088 	beq.w	800efb4 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800eea4:	2300      	movs	r3, #0
 800eea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eea8:	e015      	b.n	800eed6 <AES_CMAC_Update+0x9e>
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	4413      	add	r3, r2
 800eeb0:	33f1      	adds	r3, #241	; 0xf1
 800eeb2:	781a      	ldrb	r2, [r3, #0]
 800eeb4:	68f9      	ldr	r1, [r7, #12]
 800eeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb8:	440b      	add	r3, r1
 800eeba:	f203 1301 	addw	r3, r3, #257	; 0x101
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	4053      	eors	r3, r2
 800eec2:	b2d9      	uxtb	r1, r3
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec8:	4413      	add	r3, r2
 800eeca:	33f1      	adds	r3, #241	; 0xf1
 800eecc:	460a      	mov	r2, r1
 800eece:	701a      	strb	r2, [r3, #0]
 800eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed2:	3301      	adds	r3, #1
 800eed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed8:	2b0f      	cmp	r3, #15
 800eeda:	dde6      	ble.n	800eeaa <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800eee2:	f107 0314 	add.w	r3, r7, #20
 800eee6:	2210      	movs	r2, #16
 800eee8:	4618      	mov	r0, r3
 800eeea:	f00c fd22 	bl	801b932 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	f107 0114 	add.w	r1, r7, #20
 800eef4:	f107 0314 	add.w	r3, r7, #20
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fed3 	bl	800fca4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	33f1      	adds	r3, #241	; 0xf1
 800ef02:	f107 0114 	add.w	r1, r7, #20
 800ef06:	2210      	movs	r2, #16
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f00c fd12 	bl	801b932 <memcpy1>

        data += mlen;
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	4413      	add	r3, r2
 800ef14:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ef1e:	e038      	b.n	800ef92 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ef20:	2300      	movs	r3, #0
 800ef22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef24:	e013      	b.n	800ef4e <AES_CMAC_Update+0x116>
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2a:	4413      	add	r3, r2
 800ef2c:	33f1      	adds	r3, #241	; 0xf1
 800ef2e:	781a      	ldrb	r2, [r3, #0]
 800ef30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef32:	68b9      	ldr	r1, [r7, #8]
 800ef34:	440b      	add	r3, r1
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	4053      	eors	r3, r2
 800ef3a:	b2d9      	uxtb	r1, r3
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef40:	4413      	add	r3, r2
 800ef42:	33f1      	adds	r3, #241	; 0xf1
 800ef44:	460a      	mov	r2, r1
 800ef46:	701a      	strb	r2, [r3, #0]
 800ef48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef50:	2b0f      	cmp	r3, #15
 800ef52:	dde8      	ble.n	800ef26 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ef5a:	f107 0314 	add.w	r3, r7, #20
 800ef5e:	2210      	movs	r2, #16
 800ef60:	4618      	mov	r0, r3
 800ef62:	f00c fce6 	bl	801b932 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	f107 0114 	add.w	r1, r7, #20
 800ef6c:	f107 0314 	add.w	r3, r7, #20
 800ef70:	4618      	mov	r0, r3
 800ef72:	f000 fe97 	bl	800fca4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	33f1      	adds	r3, #241	; 0xf1
 800ef7a:	f107 0114 	add.w	r1, r7, #20
 800ef7e:	2210      	movs	r2, #16
 800ef80:	4618      	mov	r0, r3
 800ef82:	f00c fcd6 	bl	801b932 <memcpy1>

        data += 16;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	3310      	adds	r3, #16
 800ef8a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	3b10      	subs	r3, #16
 800ef90:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b10      	cmp	r3, #16
 800ef96:	d8c3      	bhi.n	800ef20 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	b292      	uxth	r2, r2
 800efa2:	68b9      	ldr	r1, [r7, #8]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f00c fcc4 	bl	801b932 <memcpy1>
    ctx->M_n = len;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800efb2:	e000      	b.n	800efb6 <AES_CMAC_Update+0x17e>
            return;
 800efb4:	bf00      	nop
}
 800efb6:	3730      	adds	r7, #48	; 0x30
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b092      	sub	sp, #72	; 0x48
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800efc6:	f107 031c 	add.w	r3, r7, #28
 800efca:	2210      	movs	r2, #16
 800efcc:	2100      	movs	r1, #0
 800efce:	4618      	mov	r0, r3
 800efd0:	f00c fcea 	bl	801b9a8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	f107 011c 	add.w	r1, r7, #28
 800efda:	f107 031c 	add.w	r3, r7, #28
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 fe60 	bl	800fca4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800efe4:	7f3b      	ldrb	r3, [r7, #28]
 800efe6:	b25b      	sxtb	r3, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	da30      	bge.n	800f04e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800efec:	2300      	movs	r3, #0
 800efee:	647b      	str	r3, [r7, #68]	; 0x44
 800eff0:	e01b      	b.n	800f02a <AES_CMAC_Final+0x6e>
 800eff2:	f107 021c 	add.w	r2, r7, #28
 800eff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff8:	4413      	add	r3, r2
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	b25a      	sxtb	r2, r3
 800f000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f002:	3301      	adds	r3, #1
 800f004:	3348      	adds	r3, #72	; 0x48
 800f006:	443b      	add	r3, r7
 800f008:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f00c:	09db      	lsrs	r3, r3, #7
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	b25b      	sxtb	r3, r3
 800f012:	4313      	orrs	r3, r2
 800f014:	b25b      	sxtb	r3, r3
 800f016:	b2d9      	uxtb	r1, r3
 800f018:	f107 021c 	add.w	r2, r7, #28
 800f01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f01e:	4413      	add	r3, r2
 800f020:	460a      	mov	r2, r1
 800f022:	701a      	strb	r2, [r3, #0]
 800f024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f026:	3301      	adds	r3, #1
 800f028:	647b      	str	r3, [r7, #68]	; 0x44
 800f02a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f02c:	2b0e      	cmp	r3, #14
 800f02e:	dde0      	ble.n	800eff2 <AES_CMAC_Final+0x36>
 800f030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	b2db      	uxtb	r3, r3
 800f038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800f03c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f040:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800f044:	43db      	mvns	r3, r3
 800f046:	b2db      	uxtb	r3, r3
 800f048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f04c:	e027      	b.n	800f09e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800f04e:	2300      	movs	r3, #0
 800f050:	643b      	str	r3, [r7, #64]	; 0x40
 800f052:	e01b      	b.n	800f08c <AES_CMAC_Final+0xd0>
 800f054:	f107 021c 	add.w	r2, r7, #28
 800f058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f05a:	4413      	add	r3, r2
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	b25a      	sxtb	r2, r3
 800f062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f064:	3301      	adds	r3, #1
 800f066:	3348      	adds	r3, #72	; 0x48
 800f068:	443b      	add	r3, r7
 800f06a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f06e:	09db      	lsrs	r3, r3, #7
 800f070:	b2db      	uxtb	r3, r3
 800f072:	b25b      	sxtb	r3, r3
 800f074:	4313      	orrs	r3, r2
 800f076:	b25b      	sxtb	r3, r3
 800f078:	b2d9      	uxtb	r1, r3
 800f07a:	f107 021c 	add.w	r2, r7, #28
 800f07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f080:	4413      	add	r3, r2
 800f082:	460a      	mov	r2, r1
 800f084:	701a      	strb	r2, [r3, #0]
 800f086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f088:	3301      	adds	r3, #1
 800f08a:	643b      	str	r3, [r7, #64]	; 0x40
 800f08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f08e:	2b0e      	cmp	r3, #14
 800f090:	dde0      	ble.n	800f054 <AES_CMAC_Final+0x98>
 800f092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f096:	005b      	lsls	r3, r3, #1
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f0a4:	2b10      	cmp	r3, #16
 800f0a6:	d11d      	bne.n	800f0e4 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0ac:	e016      	b.n	800f0dc <AES_CMAC_Final+0x120>
 800f0ae:	683a      	ldr	r2, [r7, #0]
 800f0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b2:	4413      	add	r3, r2
 800f0b4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f0b8:	781a      	ldrb	r2, [r3, #0]
 800f0ba:	f107 011c 	add.w	r1, r7, #28
 800f0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c0:	440b      	add	r3, r1
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	4053      	eors	r3, r2
 800f0c6:	b2d9      	uxtb	r1, r3
 800f0c8:	683a      	ldr	r2, [r7, #0]
 800f0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0cc:	4413      	add	r3, r2
 800f0ce:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f0d2:	460a      	mov	r2, r1
 800f0d4:	701a      	strb	r2, [r3, #0]
 800f0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0d8:	3301      	adds	r3, #1
 800f0da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0de:	2b0f      	cmp	r3, #15
 800f0e0:	dde5      	ble.n	800f0ae <AES_CMAC_Final+0xf2>
 800f0e2:	e096      	b.n	800f212 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800f0e4:	7f3b      	ldrb	r3, [r7, #28]
 800f0e6:	b25b      	sxtb	r3, r3
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	da30      	bge.n	800f14e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0f0:	e01b      	b.n	800f12a <AES_CMAC_Final+0x16e>
 800f0f2:	f107 021c 	add.w	r2, r7, #28
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	4413      	add	r3, r2
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	005b      	lsls	r3, r3, #1
 800f0fe:	b25a      	sxtb	r2, r3
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	3301      	adds	r3, #1
 800f104:	3348      	adds	r3, #72	; 0x48
 800f106:	443b      	add	r3, r7
 800f108:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f10c:	09db      	lsrs	r3, r3, #7
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	b25b      	sxtb	r3, r3
 800f112:	4313      	orrs	r3, r2
 800f114:	b25b      	sxtb	r3, r3
 800f116:	b2d9      	uxtb	r1, r3
 800f118:	f107 021c 	add.w	r2, r7, #28
 800f11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11e:	4413      	add	r3, r2
 800f120:	460a      	mov	r2, r1
 800f122:	701a      	strb	r2, [r3, #0]
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	3301      	adds	r3, #1
 800f128:	63bb      	str	r3, [r7, #56]	; 0x38
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	2b0e      	cmp	r3, #14
 800f12e:	dde0      	ble.n	800f0f2 <AES_CMAC_Final+0x136>
 800f130:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f134:	005b      	lsls	r3, r3, #1
 800f136:	b2db      	uxtb	r3, r3
 800f138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800f13c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f140:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800f144:	43db      	mvns	r3, r3
 800f146:	b2db      	uxtb	r3, r3
 800f148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f14c:	e027      	b.n	800f19e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800f14e:	2300      	movs	r3, #0
 800f150:	637b      	str	r3, [r7, #52]	; 0x34
 800f152:	e01b      	b.n	800f18c <AES_CMAC_Final+0x1d0>
 800f154:	f107 021c 	add.w	r2, r7, #28
 800f158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15a:	4413      	add	r3, r2
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	005b      	lsls	r3, r3, #1
 800f160:	b25a      	sxtb	r2, r3
 800f162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f164:	3301      	adds	r3, #1
 800f166:	3348      	adds	r3, #72	; 0x48
 800f168:	443b      	add	r3, r7
 800f16a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f16e:	09db      	lsrs	r3, r3, #7
 800f170:	b2db      	uxtb	r3, r3
 800f172:	b25b      	sxtb	r3, r3
 800f174:	4313      	orrs	r3, r2
 800f176:	b25b      	sxtb	r3, r3
 800f178:	b2d9      	uxtb	r1, r3
 800f17a:	f107 021c 	add.w	r2, r7, #28
 800f17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f180:	4413      	add	r3, r2
 800f182:	460a      	mov	r2, r1
 800f184:	701a      	strb	r2, [r3, #0]
 800f186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f188:	3301      	adds	r3, #1
 800f18a:	637b      	str	r3, [r7, #52]	; 0x34
 800f18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f18e:	2b0e      	cmp	r3, #14
 800f190:	dde0      	ble.n	800f154 <AES_CMAC_Final+0x198>
 800f192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f196:	005b      	lsls	r3, r3, #1
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f1a4:	683a      	ldr	r2, [r7, #0]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	2280      	movs	r2, #128	; 0x80
 800f1aa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f1ae:	e007      	b.n	800f1c0 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f1c6:	1c5a      	adds	r2, r3, #1
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f1d4:	2b0f      	cmp	r3, #15
 800f1d6:	d9eb      	bls.n	800f1b0 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800f1d8:	2300      	movs	r3, #0
 800f1da:	633b      	str	r3, [r7, #48]	; 0x30
 800f1dc:	e016      	b.n	800f20c <AES_CMAC_Final+0x250>
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f1e8:	781a      	ldrb	r2, [r3, #0]
 800f1ea:	f107 011c 	add.w	r1, r7, #28
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	440b      	add	r3, r1
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	4053      	eors	r3, r2
 800f1f6:	b2d9      	uxtb	r1, r3
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	4413      	add	r3, r2
 800f1fe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f202:	460a      	mov	r2, r1
 800f204:	701a      	strb	r2, [r3, #0]
 800f206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f208:	3301      	adds	r3, #1
 800f20a:	633b      	str	r3, [r7, #48]	; 0x30
 800f20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20e:	2b0f      	cmp	r3, #15
 800f210:	dde5      	ble.n	800f1de <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800f212:	2300      	movs	r3, #0
 800f214:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f216:	e015      	b.n	800f244 <AES_CMAC_Final+0x288>
 800f218:	683a      	ldr	r2, [r7, #0]
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	4413      	add	r3, r2
 800f21e:	33f1      	adds	r3, #241	; 0xf1
 800f220:	781a      	ldrb	r2, [r3, #0]
 800f222:	6839      	ldr	r1, [r7, #0]
 800f224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f226:	440b      	add	r3, r1
 800f228:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	4053      	eors	r3, r2
 800f230:	b2d9      	uxtb	r1, r3
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f236:	4413      	add	r3, r2
 800f238:	33f1      	adds	r3, #241	; 0xf1
 800f23a:	460a      	mov	r2, r1
 800f23c:	701a      	strb	r2, [r3, #0]
 800f23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f240:	3301      	adds	r3, #1
 800f242:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f246:	2b0f      	cmp	r3, #15
 800f248:	dde6      	ble.n	800f218 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800f250:	f107 030c 	add.w	r3, r7, #12
 800f254:	2210      	movs	r2, #16
 800f256:	4618      	mov	r0, r3
 800f258:	f00c fb6b 	bl	801b932 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f25c:	683a      	ldr	r2, [r7, #0]
 800f25e:	f107 030c 	add.w	r3, r7, #12
 800f262:	6879      	ldr	r1, [r7, #4]
 800f264:	4618      	mov	r0, r3
 800f266:	f000 fd1d 	bl	800fca4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f26a:	f107 031c 	add.w	r3, r7, #28
 800f26e:	2210      	movs	r2, #16
 800f270:	2100      	movs	r1, #0
 800f272:	4618      	mov	r0, r3
 800f274:	f00c fb98 	bl	801b9a8 <memset1>
}
 800f278:	bf00      	nop
 800f27a:	3748      	adds	r7, #72	; 0x48
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	781a      	ldrb	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	3301      	adds	r3, #1
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	7852      	ldrb	r2, [r2, #1]
 800f29a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	3302      	adds	r3, #2
 800f2a0:	683a      	ldr	r2, [r7, #0]
 800f2a2:	7892      	ldrb	r2, [r2, #2]
 800f2a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3303      	adds	r3, #3
 800f2aa:	683a      	ldr	r2, [r7, #0]
 800f2ac:	78d2      	ldrb	r2, [r2, #3]
 800f2ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	7912      	ldrb	r2, [r2, #4]
 800f2b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	3305      	adds	r3, #5
 800f2be:	683a      	ldr	r2, [r7, #0]
 800f2c0:	7952      	ldrb	r2, [r2, #5]
 800f2c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	3306      	adds	r3, #6
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	7992      	ldrb	r2, [r2, #6]
 800f2cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	3307      	adds	r3, #7
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	79d2      	ldrb	r2, [r2, #7]
 800f2d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3308      	adds	r3, #8
 800f2dc:	683a      	ldr	r2, [r7, #0]
 800f2de:	7a12      	ldrb	r2, [r2, #8]
 800f2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	3309      	adds	r3, #9
 800f2e6:	683a      	ldr	r2, [r7, #0]
 800f2e8:	7a52      	ldrb	r2, [r2, #9]
 800f2ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	330a      	adds	r3, #10
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	7a92      	ldrb	r2, [r2, #10]
 800f2f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	330b      	adds	r3, #11
 800f2fa:	683a      	ldr	r2, [r7, #0]
 800f2fc:	7ad2      	ldrb	r2, [r2, #11]
 800f2fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	330c      	adds	r3, #12
 800f304:	683a      	ldr	r2, [r7, #0]
 800f306:	7b12      	ldrb	r2, [r2, #12]
 800f308:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	330d      	adds	r3, #13
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	7b52      	ldrb	r2, [r2, #13]
 800f312:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	330e      	adds	r3, #14
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	7b92      	ldrb	r2, [r2, #14]
 800f31c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	330f      	adds	r3, #15
 800f322:	683a      	ldr	r2, [r7, #0]
 800f324:	7bd2      	ldrb	r2, [r2, #15]
 800f326:	701a      	strb	r2, [r3, #0]
#endif
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bc80      	pop	{r7}
 800f330:	4770      	bx	lr

0800f332 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800f332:	b480      	push	{r7}
 800f334:	b085      	sub	sp, #20
 800f336:	af00      	add	r7, sp, #0
 800f338:	60f8      	str	r0, [r7, #12]
 800f33a:	60b9      	str	r1, [r7, #8]
 800f33c:	4613      	mov	r3, r2
 800f33e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800f340:	e007      	b.n	800f352 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	1c53      	adds	r3, r2, #1
 800f346:	60bb      	str	r3, [r7, #8]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	1c59      	adds	r1, r3, #1
 800f34c:	60f9      	str	r1, [r7, #12]
 800f34e:	7812      	ldrb	r2, [r2, #0]
 800f350:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800f352:	79fb      	ldrb	r3, [r7, #7]
 800f354:	1e5a      	subs	r2, r3, #1
 800f356:	71fa      	strb	r2, [r7, #7]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1f2      	bne.n	800f342 <copy_block_nn+0x10>
}
 800f35c:	bf00      	nop
 800f35e:	bf00      	nop
 800f360:	3714      	adds	r7, #20
 800f362:	46bd      	mov	sp, r7
 800f364:	bc80      	pop	{r7}
 800f366:	4770      	bx	lr

0800f368 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	781a      	ldrb	r2, [r3, #0]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	4053      	eors	r3, r2
 800f37c:	b2da      	uxtb	r2, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	3301      	adds	r3, #1
 800f386:	7819      	ldrb	r1, [r3, #0]
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	3301      	adds	r3, #1
 800f38c:	781a      	ldrb	r2, [r3, #0]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	3301      	adds	r3, #1
 800f392:	404a      	eors	r2, r1
 800f394:	b2d2      	uxtb	r2, r2
 800f396:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	3302      	adds	r3, #2
 800f39c:	7819      	ldrb	r1, [r3, #0]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	3302      	adds	r3, #2
 800f3a2:	781a      	ldrb	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	3302      	adds	r3, #2
 800f3a8:	404a      	eors	r2, r1
 800f3aa:	b2d2      	uxtb	r2, r2
 800f3ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	3303      	adds	r3, #3
 800f3b2:	7819      	ldrb	r1, [r3, #0]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	3303      	adds	r3, #3
 800f3b8:	781a      	ldrb	r2, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3303      	adds	r3, #3
 800f3be:	404a      	eors	r2, r1
 800f3c0:	b2d2      	uxtb	r2, r2
 800f3c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	7819      	ldrb	r1, [r3, #0]
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	781a      	ldrb	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	404a      	eors	r2, r1
 800f3d6:	b2d2      	uxtb	r2, r2
 800f3d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	3305      	adds	r3, #5
 800f3de:	7819      	ldrb	r1, [r3, #0]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	3305      	adds	r3, #5
 800f3e4:	781a      	ldrb	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	3305      	adds	r3, #5
 800f3ea:	404a      	eors	r2, r1
 800f3ec:	b2d2      	uxtb	r2, r2
 800f3ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3306      	adds	r3, #6
 800f3f4:	7819      	ldrb	r1, [r3, #0]
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	3306      	adds	r3, #6
 800f3fa:	781a      	ldrb	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	3306      	adds	r3, #6
 800f400:	404a      	eors	r2, r1
 800f402:	b2d2      	uxtb	r2, r2
 800f404:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	3307      	adds	r3, #7
 800f40a:	7819      	ldrb	r1, [r3, #0]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	3307      	adds	r3, #7
 800f410:	781a      	ldrb	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	3307      	adds	r3, #7
 800f416:	404a      	eors	r2, r1
 800f418:	b2d2      	uxtb	r2, r2
 800f41a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	3308      	adds	r3, #8
 800f420:	7819      	ldrb	r1, [r3, #0]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	3308      	adds	r3, #8
 800f426:	781a      	ldrb	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	3308      	adds	r3, #8
 800f42c:	404a      	eors	r2, r1
 800f42e:	b2d2      	uxtb	r2, r2
 800f430:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3309      	adds	r3, #9
 800f436:	7819      	ldrb	r1, [r3, #0]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	3309      	adds	r3, #9
 800f43c:	781a      	ldrb	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3309      	adds	r3, #9
 800f442:	404a      	eors	r2, r1
 800f444:	b2d2      	uxtb	r2, r2
 800f446:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	330a      	adds	r3, #10
 800f44c:	7819      	ldrb	r1, [r3, #0]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	330a      	adds	r3, #10
 800f452:	781a      	ldrb	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	330a      	adds	r3, #10
 800f458:	404a      	eors	r2, r1
 800f45a:	b2d2      	uxtb	r2, r2
 800f45c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	330b      	adds	r3, #11
 800f462:	7819      	ldrb	r1, [r3, #0]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	330b      	adds	r3, #11
 800f468:	781a      	ldrb	r2, [r3, #0]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	330b      	adds	r3, #11
 800f46e:	404a      	eors	r2, r1
 800f470:	b2d2      	uxtb	r2, r2
 800f472:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	330c      	adds	r3, #12
 800f478:	7819      	ldrb	r1, [r3, #0]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	330c      	adds	r3, #12
 800f47e:	781a      	ldrb	r2, [r3, #0]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	330c      	adds	r3, #12
 800f484:	404a      	eors	r2, r1
 800f486:	b2d2      	uxtb	r2, r2
 800f488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	330d      	adds	r3, #13
 800f48e:	7819      	ldrb	r1, [r3, #0]
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	330d      	adds	r3, #13
 800f494:	781a      	ldrb	r2, [r3, #0]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	330d      	adds	r3, #13
 800f49a:	404a      	eors	r2, r1
 800f49c:	b2d2      	uxtb	r2, r2
 800f49e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	330e      	adds	r3, #14
 800f4a4:	7819      	ldrb	r1, [r3, #0]
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	330e      	adds	r3, #14
 800f4aa:	781a      	ldrb	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	330e      	adds	r3, #14
 800f4b0:	404a      	eors	r2, r1
 800f4b2:	b2d2      	uxtb	r2, r2
 800f4b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	330f      	adds	r3, #15
 800f4ba:	7819      	ldrb	r1, [r3, #0]
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	330f      	adds	r3, #15
 800f4c0:	781a      	ldrb	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	330f      	adds	r3, #15
 800f4c6:	404a      	eors	r2, r1
 800f4c8:	b2d2      	uxtb	r2, r2
 800f4ca:	701a      	strb	r2, [r3, #0]
#endif
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bc80      	pop	{r7}
 800f4d4:	4770      	bx	lr

0800f4d6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800f4d6:	b480      	push	{r7}
 800f4d8:	b085      	sub	sp, #20
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	60f8      	str	r0, [r7, #12]
 800f4de:	60b9      	str	r1, [r7, #8]
 800f4e0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	781a      	ldrb	r2, [r3, #0]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	4053      	eors	r3, r2
 800f4ec:	b2da      	uxtb	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	7819      	ldrb	r1, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	781a      	ldrb	r2, [r3, #0]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	3301      	adds	r3, #1
 800f502:	404a      	eors	r2, r1
 800f504:	b2d2      	uxtb	r2, r2
 800f506:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	3302      	adds	r3, #2
 800f50c:	7819      	ldrb	r1, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	3302      	adds	r3, #2
 800f512:	781a      	ldrb	r2, [r3, #0]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	3302      	adds	r3, #2
 800f518:	404a      	eors	r2, r1
 800f51a:	b2d2      	uxtb	r2, r2
 800f51c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	3303      	adds	r3, #3
 800f522:	7819      	ldrb	r1, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3303      	adds	r3, #3
 800f528:	781a      	ldrb	r2, [r3, #0]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	3303      	adds	r3, #3
 800f52e:	404a      	eors	r2, r1
 800f530:	b2d2      	uxtb	r2, r2
 800f532:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	3304      	adds	r3, #4
 800f538:	7819      	ldrb	r1, [r3, #0]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	3304      	adds	r3, #4
 800f53e:	781a      	ldrb	r2, [r3, #0]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	3304      	adds	r3, #4
 800f544:	404a      	eors	r2, r1
 800f546:	b2d2      	uxtb	r2, r2
 800f548:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	3305      	adds	r3, #5
 800f54e:	7819      	ldrb	r1, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	3305      	adds	r3, #5
 800f554:	781a      	ldrb	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3305      	adds	r3, #5
 800f55a:	404a      	eors	r2, r1
 800f55c:	b2d2      	uxtb	r2, r2
 800f55e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	3306      	adds	r3, #6
 800f564:	7819      	ldrb	r1, [r3, #0]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3306      	adds	r3, #6
 800f56a:	781a      	ldrb	r2, [r3, #0]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3306      	adds	r3, #6
 800f570:	404a      	eors	r2, r1
 800f572:	b2d2      	uxtb	r2, r2
 800f574:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	3307      	adds	r3, #7
 800f57a:	7819      	ldrb	r1, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3307      	adds	r3, #7
 800f580:	781a      	ldrb	r2, [r3, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	3307      	adds	r3, #7
 800f586:	404a      	eors	r2, r1
 800f588:	b2d2      	uxtb	r2, r2
 800f58a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	3308      	adds	r3, #8
 800f590:	7819      	ldrb	r1, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	3308      	adds	r3, #8
 800f596:	781a      	ldrb	r2, [r3, #0]
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3308      	adds	r3, #8
 800f59c:	404a      	eors	r2, r1
 800f59e:	b2d2      	uxtb	r2, r2
 800f5a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	3309      	adds	r3, #9
 800f5a6:	7819      	ldrb	r1, [r3, #0]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	3309      	adds	r3, #9
 800f5ac:	781a      	ldrb	r2, [r3, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	3309      	adds	r3, #9
 800f5b2:	404a      	eors	r2, r1
 800f5b4:	b2d2      	uxtb	r2, r2
 800f5b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	330a      	adds	r3, #10
 800f5bc:	7819      	ldrb	r1, [r3, #0]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	330a      	adds	r3, #10
 800f5c2:	781a      	ldrb	r2, [r3, #0]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	330a      	adds	r3, #10
 800f5c8:	404a      	eors	r2, r1
 800f5ca:	b2d2      	uxtb	r2, r2
 800f5cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	330b      	adds	r3, #11
 800f5d2:	7819      	ldrb	r1, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	330b      	adds	r3, #11
 800f5d8:	781a      	ldrb	r2, [r3, #0]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	330b      	adds	r3, #11
 800f5de:	404a      	eors	r2, r1
 800f5e0:	b2d2      	uxtb	r2, r2
 800f5e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	330c      	adds	r3, #12
 800f5e8:	7819      	ldrb	r1, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	330c      	adds	r3, #12
 800f5ee:	781a      	ldrb	r2, [r3, #0]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	330c      	adds	r3, #12
 800f5f4:	404a      	eors	r2, r1
 800f5f6:	b2d2      	uxtb	r2, r2
 800f5f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	330d      	adds	r3, #13
 800f5fe:	7819      	ldrb	r1, [r3, #0]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	330d      	adds	r3, #13
 800f604:	781a      	ldrb	r2, [r3, #0]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	330d      	adds	r3, #13
 800f60a:	404a      	eors	r2, r1
 800f60c:	b2d2      	uxtb	r2, r2
 800f60e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	330e      	adds	r3, #14
 800f614:	7819      	ldrb	r1, [r3, #0]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	330e      	adds	r3, #14
 800f61a:	781a      	ldrb	r2, [r3, #0]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	330e      	adds	r3, #14
 800f620:	404a      	eors	r2, r1
 800f622:	b2d2      	uxtb	r2, r2
 800f624:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	330f      	adds	r3, #15
 800f62a:	7819      	ldrb	r1, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	330f      	adds	r3, #15
 800f630:	781a      	ldrb	r2, [r3, #0]
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	330f      	adds	r3, #15
 800f636:	404a      	eors	r2, r1
 800f638:	b2d2      	uxtb	r2, r2
 800f63a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f63c:	bf00      	nop
 800f63e:	3714      	adds	r7, #20
 800f640:	46bd      	mov	sp, r7
 800f642:	bc80      	pop	{r7}
 800f644:	4770      	bx	lr

0800f646 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b082      	sub	sp, #8
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7ff fe88 	bl	800f368 <xor_block>
}
 800f658:	bf00      	nop
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	461a      	mov	r2, r3
 800f66e:	4b48      	ldr	r3, [pc, #288]	; (800f790 <shift_sub_rows+0x130>)
 800f670:	5c9a      	ldrb	r2, [r3, r2]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	701a      	strb	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3304      	adds	r3, #4
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	4619      	mov	r1, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	3304      	adds	r3, #4
 800f682:	4a43      	ldr	r2, [pc, #268]	; (800f790 <shift_sub_rows+0x130>)
 800f684:	5c52      	ldrb	r2, [r2, r1]
 800f686:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	3308      	adds	r3, #8
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	4619      	mov	r1, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	3308      	adds	r3, #8
 800f694:	4a3e      	ldr	r2, [pc, #248]	; (800f790 <shift_sub_rows+0x130>)
 800f696:	5c52      	ldrb	r2, [r2, r1]
 800f698:	701a      	strb	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	330c      	adds	r3, #12
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	330c      	adds	r3, #12
 800f6a6:	4a3a      	ldr	r2, [pc, #232]	; (800f790 <shift_sub_rows+0x130>)
 800f6a8:	5c52      	ldrb	r2, [r2, r1]
 800f6aa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	785b      	ldrb	r3, [r3, #1]
 800f6b0:	73fb      	strb	r3, [r7, #15]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3305      	adds	r3, #5
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	4a34      	ldr	r2, [pc, #208]	; (800f790 <shift_sub_rows+0x130>)
 800f6c0:	5c52      	ldrb	r2, [r2, r1]
 800f6c2:	701a      	strb	r2, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	3309      	adds	r3, #9
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3305      	adds	r3, #5
 800f6d0:	4a2f      	ldr	r2, [pc, #188]	; (800f790 <shift_sub_rows+0x130>)
 800f6d2:	5c52      	ldrb	r2, [r2, r1]
 800f6d4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	330d      	adds	r3, #13
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	4619      	mov	r1, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	3309      	adds	r3, #9
 800f6e2:	4a2b      	ldr	r2, [pc, #172]	; (800f790 <shift_sub_rows+0x130>)
 800f6e4:	5c52      	ldrb	r2, [r2, r1]
 800f6e6:	701a      	strb	r2, [r3, #0]
 800f6e8:	7bfa      	ldrb	r2, [r7, #15]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	330d      	adds	r3, #13
 800f6ee:	4928      	ldr	r1, [pc, #160]	; (800f790 <shift_sub_rows+0x130>)
 800f6f0:	5c8a      	ldrb	r2, [r1, r2]
 800f6f2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	789b      	ldrb	r3, [r3, #2]
 800f6f8:	73fb      	strb	r3, [r7, #15]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	330a      	adds	r3, #10
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	4619      	mov	r1, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	3302      	adds	r3, #2
 800f706:	4a22      	ldr	r2, [pc, #136]	; (800f790 <shift_sub_rows+0x130>)
 800f708:	5c52      	ldrb	r2, [r2, r1]
 800f70a:	701a      	strb	r2, [r3, #0]
 800f70c:	7bfa      	ldrb	r2, [r7, #15]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	330a      	adds	r3, #10
 800f712:	491f      	ldr	r1, [pc, #124]	; (800f790 <shift_sub_rows+0x130>)
 800f714:	5c8a      	ldrb	r2, [r1, r2]
 800f716:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	799b      	ldrb	r3, [r3, #6]
 800f71c:	73fb      	strb	r3, [r7, #15]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	330e      	adds	r3, #14
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	4619      	mov	r1, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3306      	adds	r3, #6
 800f72a:	4a19      	ldr	r2, [pc, #100]	; (800f790 <shift_sub_rows+0x130>)
 800f72c:	5c52      	ldrb	r2, [r2, r1]
 800f72e:	701a      	strb	r2, [r3, #0]
 800f730:	7bfa      	ldrb	r2, [r7, #15]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	330e      	adds	r3, #14
 800f736:	4916      	ldr	r1, [pc, #88]	; (800f790 <shift_sub_rows+0x130>)
 800f738:	5c8a      	ldrb	r2, [r1, r2]
 800f73a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	7bdb      	ldrb	r3, [r3, #15]
 800f740:	73fb      	strb	r3, [r7, #15]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	330b      	adds	r3, #11
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	4619      	mov	r1, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	330f      	adds	r3, #15
 800f74e:	4a10      	ldr	r2, [pc, #64]	; (800f790 <shift_sub_rows+0x130>)
 800f750:	5c52      	ldrb	r2, [r2, r1]
 800f752:	701a      	strb	r2, [r3, #0]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	3307      	adds	r3, #7
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	4619      	mov	r1, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	330b      	adds	r3, #11
 800f760:	4a0b      	ldr	r2, [pc, #44]	; (800f790 <shift_sub_rows+0x130>)
 800f762:	5c52      	ldrb	r2, [r2, r1]
 800f764:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	3303      	adds	r3, #3
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	4619      	mov	r1, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	3307      	adds	r3, #7
 800f772:	4a07      	ldr	r2, [pc, #28]	; (800f790 <shift_sub_rows+0x130>)
 800f774:	5c52      	ldrb	r2, [r2, r1]
 800f776:	701a      	strb	r2, [r3, #0]
 800f778:	7bfa      	ldrb	r2, [r7, #15]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	3303      	adds	r3, #3
 800f77e:	4904      	ldr	r1, [pc, #16]	; (800f790 <shift_sub_rows+0x130>)
 800f780:	5c8a      	ldrb	r2, [r1, r2]
 800f782:	701a      	strb	r2, [r3, #0]
}
 800f784:	bf00      	nop
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	bc80      	pop	{r7}
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	08021afc 	.word	0x08021afc

0800f794 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800f79c:	f107 0308 	add.w	r3, r7, #8
 800f7a0:	6879      	ldr	r1, [r7, #4]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7ff fd6c 	bl	800f280 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f7a8:	7a3b      	ldrb	r3, [r7, #8]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	4b9a      	ldr	r3, [pc, #616]	; (800fa18 <mix_sub_columns+0x284>)
 800f7ae:	5c9a      	ldrb	r2, [r3, r2]
 800f7b0:	7b7b      	ldrb	r3, [r7, #13]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	4b99      	ldr	r3, [pc, #612]	; (800fa1c <mix_sub_columns+0x288>)
 800f7b6:	5c5b      	ldrb	r3, [r3, r1]
 800f7b8:	4053      	eors	r3, r2
 800f7ba:	b2da      	uxtb	r2, r3
 800f7bc:	7cbb      	ldrb	r3, [r7, #18]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4b97      	ldr	r3, [pc, #604]	; (800fa20 <mix_sub_columns+0x28c>)
 800f7c2:	5c5b      	ldrb	r3, [r3, r1]
 800f7c4:	4053      	eors	r3, r2
 800f7c6:	b2da      	uxtb	r2, r3
 800f7c8:	7dfb      	ldrb	r3, [r7, #23]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	4b94      	ldr	r3, [pc, #592]	; (800fa20 <mix_sub_columns+0x28c>)
 800f7ce:	5c5b      	ldrb	r3, [r3, r1]
 800f7d0:	4053      	eors	r3, r2
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f7d8:	7a3b      	ldrb	r3, [r7, #8]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	4b90      	ldr	r3, [pc, #576]	; (800fa20 <mix_sub_columns+0x28c>)
 800f7de:	5c9a      	ldrb	r2, [r3, r2]
 800f7e0:	7b7b      	ldrb	r3, [r7, #13]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	4b8c      	ldr	r3, [pc, #560]	; (800fa18 <mix_sub_columns+0x284>)
 800f7e6:	5c5b      	ldrb	r3, [r3, r1]
 800f7e8:	4053      	eors	r3, r2
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	7cbb      	ldrb	r3, [r7, #18]
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	4b8a      	ldr	r3, [pc, #552]	; (800fa1c <mix_sub_columns+0x288>)
 800f7f2:	5c5b      	ldrb	r3, [r3, r1]
 800f7f4:	4053      	eors	r3, r2
 800f7f6:	b2d9      	uxtb	r1, r3
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	4b88      	ldr	r3, [pc, #544]	; (800fa20 <mix_sub_columns+0x28c>)
 800f7fe:	5c9a      	ldrb	r2, [r3, r2]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	3301      	adds	r3, #1
 800f804:	404a      	eors	r2, r1
 800f806:	b2d2      	uxtb	r2, r2
 800f808:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f80a:	7a3b      	ldrb	r3, [r7, #8]
 800f80c:	461a      	mov	r2, r3
 800f80e:	4b84      	ldr	r3, [pc, #528]	; (800fa20 <mix_sub_columns+0x28c>)
 800f810:	5c9a      	ldrb	r2, [r3, r2]
 800f812:	7b7b      	ldrb	r3, [r7, #13]
 800f814:	4619      	mov	r1, r3
 800f816:	4b82      	ldr	r3, [pc, #520]	; (800fa20 <mix_sub_columns+0x28c>)
 800f818:	5c5b      	ldrb	r3, [r3, r1]
 800f81a:	4053      	eors	r3, r2
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	7cbb      	ldrb	r3, [r7, #18]
 800f820:	4619      	mov	r1, r3
 800f822:	4b7d      	ldr	r3, [pc, #500]	; (800fa18 <mix_sub_columns+0x284>)
 800f824:	5c5b      	ldrb	r3, [r3, r1]
 800f826:	4053      	eors	r3, r2
 800f828:	b2d9      	uxtb	r1, r3
 800f82a:	7dfb      	ldrb	r3, [r7, #23]
 800f82c:	461a      	mov	r2, r3
 800f82e:	4b7b      	ldr	r3, [pc, #492]	; (800fa1c <mix_sub_columns+0x288>)
 800f830:	5c9a      	ldrb	r2, [r3, r2]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	3302      	adds	r3, #2
 800f836:	404a      	eors	r2, r1
 800f838:	b2d2      	uxtb	r2, r2
 800f83a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800f83c:	7a3b      	ldrb	r3, [r7, #8]
 800f83e:	461a      	mov	r2, r3
 800f840:	4b76      	ldr	r3, [pc, #472]	; (800fa1c <mix_sub_columns+0x288>)
 800f842:	5c9a      	ldrb	r2, [r3, r2]
 800f844:	7b7b      	ldrb	r3, [r7, #13]
 800f846:	4619      	mov	r1, r3
 800f848:	4b75      	ldr	r3, [pc, #468]	; (800fa20 <mix_sub_columns+0x28c>)
 800f84a:	5c5b      	ldrb	r3, [r3, r1]
 800f84c:	4053      	eors	r3, r2
 800f84e:	b2da      	uxtb	r2, r3
 800f850:	7cbb      	ldrb	r3, [r7, #18]
 800f852:	4619      	mov	r1, r3
 800f854:	4b72      	ldr	r3, [pc, #456]	; (800fa20 <mix_sub_columns+0x28c>)
 800f856:	5c5b      	ldrb	r3, [r3, r1]
 800f858:	4053      	eors	r3, r2
 800f85a:	b2d9      	uxtb	r1, r3
 800f85c:	7dfb      	ldrb	r3, [r7, #23]
 800f85e:	461a      	mov	r2, r3
 800f860:	4b6d      	ldr	r3, [pc, #436]	; (800fa18 <mix_sub_columns+0x284>)
 800f862:	5c9a      	ldrb	r2, [r3, r2]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	3303      	adds	r3, #3
 800f868:	404a      	eors	r2, r1
 800f86a:	b2d2      	uxtb	r2, r2
 800f86c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800f86e:	7b3b      	ldrb	r3, [r7, #12]
 800f870:	461a      	mov	r2, r3
 800f872:	4b69      	ldr	r3, [pc, #420]	; (800fa18 <mix_sub_columns+0x284>)
 800f874:	5c9a      	ldrb	r2, [r3, r2]
 800f876:	7c7b      	ldrb	r3, [r7, #17]
 800f878:	4619      	mov	r1, r3
 800f87a:	4b68      	ldr	r3, [pc, #416]	; (800fa1c <mix_sub_columns+0x288>)
 800f87c:	5c5b      	ldrb	r3, [r3, r1]
 800f87e:	4053      	eors	r3, r2
 800f880:	b2da      	uxtb	r2, r3
 800f882:	7dbb      	ldrb	r3, [r7, #22]
 800f884:	4619      	mov	r1, r3
 800f886:	4b66      	ldr	r3, [pc, #408]	; (800fa20 <mix_sub_columns+0x28c>)
 800f888:	5c5b      	ldrb	r3, [r3, r1]
 800f88a:	4053      	eors	r3, r2
 800f88c:	b2d9      	uxtb	r1, r3
 800f88e:	7afb      	ldrb	r3, [r7, #11]
 800f890:	461a      	mov	r2, r3
 800f892:	4b63      	ldr	r3, [pc, #396]	; (800fa20 <mix_sub_columns+0x28c>)
 800f894:	5c9a      	ldrb	r2, [r3, r2]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	3304      	adds	r3, #4
 800f89a:	404a      	eors	r2, r1
 800f89c:	b2d2      	uxtb	r2, r2
 800f89e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f8a0:	7b3b      	ldrb	r3, [r7, #12]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	4b5e      	ldr	r3, [pc, #376]	; (800fa20 <mix_sub_columns+0x28c>)
 800f8a6:	5c9a      	ldrb	r2, [r3, r2]
 800f8a8:	7c7b      	ldrb	r3, [r7, #17]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	4b5a      	ldr	r3, [pc, #360]	; (800fa18 <mix_sub_columns+0x284>)
 800f8ae:	5c5b      	ldrb	r3, [r3, r1]
 800f8b0:	4053      	eors	r3, r2
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	7dbb      	ldrb	r3, [r7, #22]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	4b58      	ldr	r3, [pc, #352]	; (800fa1c <mix_sub_columns+0x288>)
 800f8ba:	5c5b      	ldrb	r3, [r3, r1]
 800f8bc:	4053      	eors	r3, r2
 800f8be:	b2d9      	uxtb	r1, r3
 800f8c0:	7afb      	ldrb	r3, [r7, #11]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	4b56      	ldr	r3, [pc, #344]	; (800fa20 <mix_sub_columns+0x28c>)
 800f8c6:	5c9a      	ldrb	r2, [r3, r2]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3305      	adds	r3, #5
 800f8cc:	404a      	eors	r2, r1
 800f8ce:	b2d2      	uxtb	r2, r2
 800f8d0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f8d2:	7b3b      	ldrb	r3, [r7, #12]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	4b52      	ldr	r3, [pc, #328]	; (800fa20 <mix_sub_columns+0x28c>)
 800f8d8:	5c9a      	ldrb	r2, [r3, r2]
 800f8da:	7c7b      	ldrb	r3, [r7, #17]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4b50      	ldr	r3, [pc, #320]	; (800fa20 <mix_sub_columns+0x28c>)
 800f8e0:	5c5b      	ldrb	r3, [r3, r1]
 800f8e2:	4053      	eors	r3, r2
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	7dbb      	ldrb	r3, [r7, #22]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	4b4b      	ldr	r3, [pc, #300]	; (800fa18 <mix_sub_columns+0x284>)
 800f8ec:	5c5b      	ldrb	r3, [r3, r1]
 800f8ee:	4053      	eors	r3, r2
 800f8f0:	b2d9      	uxtb	r1, r3
 800f8f2:	7afb      	ldrb	r3, [r7, #11]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	4b49      	ldr	r3, [pc, #292]	; (800fa1c <mix_sub_columns+0x288>)
 800f8f8:	5c9a      	ldrb	r2, [r3, r2]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	3306      	adds	r3, #6
 800f8fe:	404a      	eors	r2, r1
 800f900:	b2d2      	uxtb	r2, r2
 800f902:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f904:	7b3b      	ldrb	r3, [r7, #12]
 800f906:	461a      	mov	r2, r3
 800f908:	4b44      	ldr	r3, [pc, #272]	; (800fa1c <mix_sub_columns+0x288>)
 800f90a:	5c9a      	ldrb	r2, [r3, r2]
 800f90c:	7c7b      	ldrb	r3, [r7, #17]
 800f90e:	4619      	mov	r1, r3
 800f910:	4b43      	ldr	r3, [pc, #268]	; (800fa20 <mix_sub_columns+0x28c>)
 800f912:	5c5b      	ldrb	r3, [r3, r1]
 800f914:	4053      	eors	r3, r2
 800f916:	b2da      	uxtb	r2, r3
 800f918:	7dbb      	ldrb	r3, [r7, #22]
 800f91a:	4619      	mov	r1, r3
 800f91c:	4b40      	ldr	r3, [pc, #256]	; (800fa20 <mix_sub_columns+0x28c>)
 800f91e:	5c5b      	ldrb	r3, [r3, r1]
 800f920:	4053      	eors	r3, r2
 800f922:	b2d9      	uxtb	r1, r3
 800f924:	7afb      	ldrb	r3, [r7, #11]
 800f926:	461a      	mov	r2, r3
 800f928:	4b3b      	ldr	r3, [pc, #236]	; (800fa18 <mix_sub_columns+0x284>)
 800f92a:	5c9a      	ldrb	r2, [r3, r2]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	3307      	adds	r3, #7
 800f930:	404a      	eors	r2, r1
 800f932:	b2d2      	uxtb	r2, r2
 800f934:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f936:	7c3b      	ldrb	r3, [r7, #16]
 800f938:	461a      	mov	r2, r3
 800f93a:	4b37      	ldr	r3, [pc, #220]	; (800fa18 <mix_sub_columns+0x284>)
 800f93c:	5c9a      	ldrb	r2, [r3, r2]
 800f93e:	7d7b      	ldrb	r3, [r7, #21]
 800f940:	4619      	mov	r1, r3
 800f942:	4b36      	ldr	r3, [pc, #216]	; (800fa1c <mix_sub_columns+0x288>)
 800f944:	5c5b      	ldrb	r3, [r3, r1]
 800f946:	4053      	eors	r3, r2
 800f948:	b2da      	uxtb	r2, r3
 800f94a:	7abb      	ldrb	r3, [r7, #10]
 800f94c:	4619      	mov	r1, r3
 800f94e:	4b34      	ldr	r3, [pc, #208]	; (800fa20 <mix_sub_columns+0x28c>)
 800f950:	5c5b      	ldrb	r3, [r3, r1]
 800f952:	4053      	eors	r3, r2
 800f954:	b2d9      	uxtb	r1, r3
 800f956:	7bfb      	ldrb	r3, [r7, #15]
 800f958:	461a      	mov	r2, r3
 800f95a:	4b31      	ldr	r3, [pc, #196]	; (800fa20 <mix_sub_columns+0x28c>)
 800f95c:	5c9a      	ldrb	r2, [r3, r2]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	3308      	adds	r3, #8
 800f962:	404a      	eors	r2, r1
 800f964:	b2d2      	uxtb	r2, r2
 800f966:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f968:	7c3b      	ldrb	r3, [r7, #16]
 800f96a:	461a      	mov	r2, r3
 800f96c:	4b2c      	ldr	r3, [pc, #176]	; (800fa20 <mix_sub_columns+0x28c>)
 800f96e:	5c9a      	ldrb	r2, [r3, r2]
 800f970:	7d7b      	ldrb	r3, [r7, #21]
 800f972:	4619      	mov	r1, r3
 800f974:	4b28      	ldr	r3, [pc, #160]	; (800fa18 <mix_sub_columns+0x284>)
 800f976:	5c5b      	ldrb	r3, [r3, r1]
 800f978:	4053      	eors	r3, r2
 800f97a:	b2da      	uxtb	r2, r3
 800f97c:	7abb      	ldrb	r3, [r7, #10]
 800f97e:	4619      	mov	r1, r3
 800f980:	4b26      	ldr	r3, [pc, #152]	; (800fa1c <mix_sub_columns+0x288>)
 800f982:	5c5b      	ldrb	r3, [r3, r1]
 800f984:	4053      	eors	r3, r2
 800f986:	b2d9      	uxtb	r1, r3
 800f988:	7bfb      	ldrb	r3, [r7, #15]
 800f98a:	461a      	mov	r2, r3
 800f98c:	4b24      	ldr	r3, [pc, #144]	; (800fa20 <mix_sub_columns+0x28c>)
 800f98e:	5c9a      	ldrb	r2, [r3, r2]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3309      	adds	r3, #9
 800f994:	404a      	eors	r2, r1
 800f996:	b2d2      	uxtb	r2, r2
 800f998:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f99a:	7c3b      	ldrb	r3, [r7, #16]
 800f99c:	461a      	mov	r2, r3
 800f99e:	4b20      	ldr	r3, [pc, #128]	; (800fa20 <mix_sub_columns+0x28c>)
 800f9a0:	5c9a      	ldrb	r2, [r3, r2]
 800f9a2:	7d7b      	ldrb	r3, [r7, #21]
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	4b1e      	ldr	r3, [pc, #120]	; (800fa20 <mix_sub_columns+0x28c>)
 800f9a8:	5c5b      	ldrb	r3, [r3, r1]
 800f9aa:	4053      	eors	r3, r2
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	7abb      	ldrb	r3, [r7, #10]
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4b19      	ldr	r3, [pc, #100]	; (800fa18 <mix_sub_columns+0x284>)
 800f9b4:	5c5b      	ldrb	r3, [r3, r1]
 800f9b6:	4053      	eors	r3, r2
 800f9b8:	b2d9      	uxtb	r1, r3
 800f9ba:	7bfb      	ldrb	r3, [r7, #15]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	4b17      	ldr	r3, [pc, #92]	; (800fa1c <mix_sub_columns+0x288>)
 800f9c0:	5c9a      	ldrb	r2, [r3, r2]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	330a      	adds	r3, #10
 800f9c6:	404a      	eors	r2, r1
 800f9c8:	b2d2      	uxtb	r2, r2
 800f9ca:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800f9cc:	7c3b      	ldrb	r3, [r7, #16]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4b12      	ldr	r3, [pc, #72]	; (800fa1c <mix_sub_columns+0x288>)
 800f9d2:	5c9a      	ldrb	r2, [r3, r2]
 800f9d4:	7d7b      	ldrb	r3, [r7, #21]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	4b11      	ldr	r3, [pc, #68]	; (800fa20 <mix_sub_columns+0x28c>)
 800f9da:	5c5b      	ldrb	r3, [r3, r1]
 800f9dc:	4053      	eors	r3, r2
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	7abb      	ldrb	r3, [r7, #10]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	4b0e      	ldr	r3, [pc, #56]	; (800fa20 <mix_sub_columns+0x28c>)
 800f9e6:	5c5b      	ldrb	r3, [r3, r1]
 800f9e8:	4053      	eors	r3, r2
 800f9ea:	b2d9      	uxtb	r1, r3
 800f9ec:	7bfb      	ldrb	r3, [r7, #15]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	4b09      	ldr	r3, [pc, #36]	; (800fa18 <mix_sub_columns+0x284>)
 800f9f2:	5c9a      	ldrb	r2, [r3, r2]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	330b      	adds	r3, #11
 800f9f8:	404a      	eors	r2, r1
 800f9fa:	b2d2      	uxtb	r2, r2
 800f9fc:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f9fe:	7d3b      	ldrb	r3, [r7, #20]
 800fa00:	461a      	mov	r2, r3
 800fa02:	4b05      	ldr	r3, [pc, #20]	; (800fa18 <mix_sub_columns+0x284>)
 800fa04:	5c9a      	ldrb	r2, [r3, r2]
 800fa06:	7a7b      	ldrb	r3, [r7, #9]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	4b04      	ldr	r3, [pc, #16]	; (800fa1c <mix_sub_columns+0x288>)
 800fa0c:	5c5b      	ldrb	r3, [r3, r1]
 800fa0e:	4053      	eors	r3, r2
 800fa10:	b2da      	uxtb	r2, r3
 800fa12:	7bbb      	ldrb	r3, [r7, #14]
 800fa14:	4619      	mov	r1, r3
 800fa16:	e005      	b.n	800fa24 <mix_sub_columns+0x290>
 800fa18:	08021bfc 	.word	0x08021bfc
 800fa1c:	08021cfc 	.word	0x08021cfc
 800fa20:	08021afc 	.word	0x08021afc
 800fa24:	4b2d      	ldr	r3, [pc, #180]	; (800fadc <mix_sub_columns+0x348>)
 800fa26:	5c5b      	ldrb	r3, [r3, r1]
 800fa28:	4053      	eors	r3, r2
 800fa2a:	b2d9      	uxtb	r1, r3
 800fa2c:	7cfb      	ldrb	r3, [r7, #19]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	4b2a      	ldr	r3, [pc, #168]	; (800fadc <mix_sub_columns+0x348>)
 800fa32:	5c9a      	ldrb	r2, [r3, r2]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	330c      	adds	r3, #12
 800fa38:	404a      	eors	r2, r1
 800fa3a:	b2d2      	uxtb	r2, r2
 800fa3c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800fa3e:	7d3b      	ldrb	r3, [r7, #20]
 800fa40:	461a      	mov	r2, r3
 800fa42:	4b26      	ldr	r3, [pc, #152]	; (800fadc <mix_sub_columns+0x348>)
 800fa44:	5c9a      	ldrb	r2, [r3, r2]
 800fa46:	7a7b      	ldrb	r3, [r7, #9]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4b25      	ldr	r3, [pc, #148]	; (800fae0 <mix_sub_columns+0x34c>)
 800fa4c:	5c5b      	ldrb	r3, [r3, r1]
 800fa4e:	4053      	eors	r3, r2
 800fa50:	b2da      	uxtb	r2, r3
 800fa52:	7bbb      	ldrb	r3, [r7, #14]
 800fa54:	4619      	mov	r1, r3
 800fa56:	4b23      	ldr	r3, [pc, #140]	; (800fae4 <mix_sub_columns+0x350>)
 800fa58:	5c5b      	ldrb	r3, [r3, r1]
 800fa5a:	4053      	eors	r3, r2
 800fa5c:	b2d9      	uxtb	r1, r3
 800fa5e:	7cfb      	ldrb	r3, [r7, #19]
 800fa60:	461a      	mov	r2, r3
 800fa62:	4b1e      	ldr	r3, [pc, #120]	; (800fadc <mix_sub_columns+0x348>)
 800fa64:	5c9a      	ldrb	r2, [r3, r2]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	330d      	adds	r3, #13
 800fa6a:	404a      	eors	r2, r1
 800fa6c:	b2d2      	uxtb	r2, r2
 800fa6e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800fa70:	7d3b      	ldrb	r3, [r7, #20]
 800fa72:	461a      	mov	r2, r3
 800fa74:	4b19      	ldr	r3, [pc, #100]	; (800fadc <mix_sub_columns+0x348>)
 800fa76:	5c9a      	ldrb	r2, [r3, r2]
 800fa78:	7a7b      	ldrb	r3, [r7, #9]
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	4b17      	ldr	r3, [pc, #92]	; (800fadc <mix_sub_columns+0x348>)
 800fa7e:	5c5b      	ldrb	r3, [r3, r1]
 800fa80:	4053      	eors	r3, r2
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	7bbb      	ldrb	r3, [r7, #14]
 800fa86:	4619      	mov	r1, r3
 800fa88:	4b15      	ldr	r3, [pc, #84]	; (800fae0 <mix_sub_columns+0x34c>)
 800fa8a:	5c5b      	ldrb	r3, [r3, r1]
 800fa8c:	4053      	eors	r3, r2
 800fa8e:	b2d9      	uxtb	r1, r3
 800fa90:	7cfb      	ldrb	r3, [r7, #19]
 800fa92:	461a      	mov	r2, r3
 800fa94:	4b13      	ldr	r3, [pc, #76]	; (800fae4 <mix_sub_columns+0x350>)
 800fa96:	5c9a      	ldrb	r2, [r3, r2]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	330e      	adds	r3, #14
 800fa9c:	404a      	eors	r2, r1
 800fa9e:	b2d2      	uxtb	r2, r2
 800faa0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800faa2:	7d3b      	ldrb	r3, [r7, #20]
 800faa4:	461a      	mov	r2, r3
 800faa6:	4b0f      	ldr	r3, [pc, #60]	; (800fae4 <mix_sub_columns+0x350>)
 800faa8:	5c9a      	ldrb	r2, [r3, r2]
 800faaa:	7a7b      	ldrb	r3, [r7, #9]
 800faac:	4619      	mov	r1, r3
 800faae:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <mix_sub_columns+0x348>)
 800fab0:	5c5b      	ldrb	r3, [r3, r1]
 800fab2:	4053      	eors	r3, r2
 800fab4:	b2da      	uxtb	r2, r3
 800fab6:	7bbb      	ldrb	r3, [r7, #14]
 800fab8:	4619      	mov	r1, r3
 800faba:	4b08      	ldr	r3, [pc, #32]	; (800fadc <mix_sub_columns+0x348>)
 800fabc:	5c5b      	ldrb	r3, [r3, r1]
 800fabe:	4053      	eors	r3, r2
 800fac0:	b2d9      	uxtb	r1, r3
 800fac2:	7cfb      	ldrb	r3, [r7, #19]
 800fac4:	461a      	mov	r2, r3
 800fac6:	4b06      	ldr	r3, [pc, #24]	; (800fae0 <mix_sub_columns+0x34c>)
 800fac8:	5c9a      	ldrb	r2, [r3, r2]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	330f      	adds	r3, #15
 800face:	404a      	eors	r2, r1
 800fad0:	b2d2      	uxtb	r2, r2
 800fad2:	701a      	strb	r2, [r3, #0]
  }
 800fad4:	bf00      	nop
 800fad6:	3718      	adds	r7, #24
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	08021afc 	.word	0x08021afc
 800fae0:	08021bfc 	.word	0x08021bfc
 800fae4:	08021cfc 	.word	0x08021cfc

0800fae8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	460b      	mov	r3, r1
 800faf2:	607a      	str	r2, [r7, #4]
 800faf4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800faf6:	7afb      	ldrb	r3, [r7, #11]
 800faf8:	3b10      	subs	r3, #16
 800fafa:	2b10      	cmp	r3, #16
 800fafc:	bf8c      	ite	hi
 800fafe:	2201      	movhi	r2, #1
 800fb00:	2200      	movls	r2, #0
 800fb02:	b2d2      	uxtb	r2, r2
 800fb04:	2a00      	cmp	r2, #0
 800fb06:	d10d      	bne.n	800fb24 <lorawan_aes_set_key+0x3c>
 800fb08:	2201      	movs	r2, #1
 800fb0a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb0e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800fb12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	bf14      	ite	ne
 800fb1a:	2301      	movne	r3, #1
 800fb1c:	2300      	moveq	r3, #0
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d105      	bne.n	800fb30 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800fb2c:	23ff      	movs	r3, #255	; 0xff
 800fb2e:	e0b2      	b.n	800fc96 <lorawan_aes_set_key+0x1ae>
        break;
 800fb30:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	7afa      	ldrb	r2, [r7, #11]
 800fb36:	68f9      	ldr	r1, [r7, #12]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff fbfa 	bl	800f332 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800fb3e:	7afb      	ldrb	r3, [r7, #11]
 800fb40:	331c      	adds	r3, #28
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800fb48:	7c7b      	ldrb	r3, [r7, #17]
 800fb4a:	091b      	lsrs	r3, r3, #4
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fb58:	7afb      	ldrb	r3, [r7, #11]
 800fb5a:	75fb      	strb	r3, [r7, #23]
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	75bb      	strb	r3, [r7, #22]
 800fb60:	e093      	b.n	800fc8a <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	3b04      	subs	r3, #4
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	5cd3      	ldrb	r3, [r2, r3]
 800fb6a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800fb6c:	7dfb      	ldrb	r3, [r7, #23]
 800fb6e:	3b03      	subs	r3, #3
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	5cd3      	ldrb	r3, [r2, r3]
 800fb74:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800fb76:	7dfb      	ldrb	r3, [r7, #23]
 800fb78:	3b02      	subs	r3, #2
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	5cd3      	ldrb	r3, [r2, r3]
 800fb7e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800fb80:	7dfb      	ldrb	r3, [r7, #23]
 800fb82:	3b01      	subs	r3, #1
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	5cd3      	ldrb	r3, [r2, r3]
 800fb88:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
 800fb8c:	7afa      	ldrb	r2, [r7, #11]
 800fb8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb92:	fb01 f202 	mul.w	r2, r1, r2
 800fb96:	1a9b      	subs	r3, r3, r2
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d127      	bne.n	800fbee <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800fb9e:	7d7b      	ldrb	r3, [r7, #21]
 800fba0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800fba2:	7d3b      	ldrb	r3, [r7, #20]
 800fba4:	4a3e      	ldr	r2, [pc, #248]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fba6:	5cd2      	ldrb	r2, [r2, r3]
 800fba8:	7dbb      	ldrb	r3, [r7, #22]
 800fbaa:	4053      	eors	r3, r2
 800fbac:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800fbae:	7cfb      	ldrb	r3, [r7, #19]
 800fbb0:	4a3b      	ldr	r2, [pc, #236]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fbb2:	5cd3      	ldrb	r3, [r2, r3]
 800fbb4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800fbb6:	7cbb      	ldrb	r3, [r7, #18]
 800fbb8:	4a39      	ldr	r2, [pc, #228]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fbba:	5cd3      	ldrb	r3, [r2, r3]
 800fbbc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800fbbe:	7c3b      	ldrb	r3, [r7, #16]
 800fbc0:	4a37      	ldr	r2, [pc, #220]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fbc2:	5cd3      	ldrb	r3, [r2, r3]
 800fbc4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800fbc6:	7dbb      	ldrb	r3, [r7, #22]
 800fbc8:	005b      	lsls	r3, r3, #1
 800fbca:	b25a      	sxtb	r2, r3
 800fbcc:	7dbb      	ldrb	r3, [r7, #22]
 800fbce:	09db      	lsrs	r3, r3, #7
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	0049      	lsls	r1, r1, #1
 800fbd6:	440b      	add	r3, r1
 800fbd8:	4619      	mov	r1, r3
 800fbda:	00c8      	lsls	r0, r1, #3
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4603      	mov	r3, r0
 800fbe0:	440b      	add	r3, r1
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	b25b      	sxtb	r3, r3
 800fbe6:	4053      	eors	r3, r2
 800fbe8:	b25b      	sxtb	r3, r3
 800fbea:	75bb      	strb	r3, [r7, #22]
 800fbec:	e01c      	b.n	800fc28 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800fbee:	7afb      	ldrb	r3, [r7, #11]
 800fbf0:	2b18      	cmp	r3, #24
 800fbf2:	d919      	bls.n	800fc28 <lorawan_aes_set_key+0x140>
 800fbf4:	7dfb      	ldrb	r3, [r7, #23]
 800fbf6:	7afa      	ldrb	r2, [r7, #11]
 800fbf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbfc:	fb01 f202 	mul.w	r2, r1, r2
 800fc00:	1a9b      	subs	r3, r3, r2
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b10      	cmp	r3, #16
 800fc06:	d10f      	bne.n	800fc28 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800fc08:	7d7b      	ldrb	r3, [r7, #21]
 800fc0a:	4a25      	ldr	r2, [pc, #148]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fc0c:	5cd3      	ldrb	r3, [r2, r3]
 800fc0e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800fc10:	7d3b      	ldrb	r3, [r7, #20]
 800fc12:	4a23      	ldr	r2, [pc, #140]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fc14:	5cd3      	ldrb	r3, [r2, r3]
 800fc16:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800fc18:	7cfb      	ldrb	r3, [r7, #19]
 800fc1a:	4a21      	ldr	r2, [pc, #132]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fc1c:	5cd3      	ldrb	r3, [r2, r3]
 800fc1e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800fc20:	7cbb      	ldrb	r3, [r7, #18]
 800fc22:	4a1f      	ldr	r2, [pc, #124]	; (800fca0 <lorawan_aes_set_key+0x1b8>)
 800fc24:	5cd3      	ldrb	r3, [r2, r3]
 800fc26:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800fc28:	7dfa      	ldrb	r2, [r7, #23]
 800fc2a:	7afb      	ldrb	r3, [r7, #11]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800fc30:	7c3b      	ldrb	r3, [r7, #16]
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	5cd1      	ldrb	r1, [r2, r3]
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
 800fc38:	7d7a      	ldrb	r2, [r7, #21]
 800fc3a:	404a      	eors	r2, r1
 800fc3c:	b2d1      	uxtb	r1, r2
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800fc42:	7c3b      	ldrb	r3, [r7, #16]
 800fc44:	3301      	adds	r3, #1
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	5cd1      	ldrb	r1, [r2, r3]
 800fc4a:	7dfb      	ldrb	r3, [r7, #23]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	7d3a      	ldrb	r2, [r7, #20]
 800fc50:	404a      	eors	r2, r1
 800fc52:	b2d1      	uxtb	r1, r2
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800fc58:	7c3b      	ldrb	r3, [r7, #16]
 800fc5a:	3302      	adds	r3, #2
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	5cd1      	ldrb	r1, [r2, r3]
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
 800fc62:	3302      	adds	r3, #2
 800fc64:	7cfa      	ldrb	r2, [r7, #19]
 800fc66:	404a      	eors	r2, r1
 800fc68:	b2d1      	uxtb	r1, r2
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800fc6e:	7c3b      	ldrb	r3, [r7, #16]
 800fc70:	3303      	adds	r3, #3
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	5cd1      	ldrb	r1, [r2, r3]
 800fc76:	7dfb      	ldrb	r3, [r7, #23]
 800fc78:	3303      	adds	r3, #3
 800fc7a:	7cba      	ldrb	r2, [r7, #18]
 800fc7c:	404a      	eors	r2, r1
 800fc7e:	b2d1      	uxtb	r1, r2
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fc84:	7dfb      	ldrb	r3, [r7, #23]
 800fc86:	3304      	adds	r3, #4
 800fc88:	75fb      	strb	r3, [r7, #23]
 800fc8a:	7dfa      	ldrb	r2, [r7, #23]
 800fc8c:	7c7b      	ldrb	r3, [r7, #17]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	f4ff af67 	bcc.w	800fb62 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3718      	adds	r7, #24
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	08021afc 	.word	0x08021afc

0800fca4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b08a      	sub	sp, #40	; 0x28
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d038      	beq.n	800fd2c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	f107 0314 	add.w	r3, r7, #20
 800fcc0:	68f9      	ldr	r1, [r7, #12]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7ff fc07 	bl	800f4d6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800fcc8:	2301      	movs	r3, #1
 800fcca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fcce:	e014      	b.n	800fcfa <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800fcd0:	f107 0314 	add.w	r3, r7, #20
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff fd5d 	bl	800f794 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fce0:	0112      	lsls	r2, r2, #4
 800fce2:	441a      	add	r2, r3
 800fce4:	f107 0314 	add.w	r3, r7, #20
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7ff fcab 	bl	800f646 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800fcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800fd00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d3e3      	bcc.n	800fcd0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800fd08:	f107 0314 	add.w	r3, r7, #20
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7ff fca7 	bl	800f660 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fd18:	0112      	lsls	r2, r2, #4
 800fd1a:	441a      	add	r2, r3
 800fd1c:	f107 0314 	add.w	r3, r7, #20
 800fd20:	4619      	mov	r1, r3
 800fd22:	68b8      	ldr	r0, [r7, #8]
 800fd24:	f7ff fbd7 	bl	800f4d6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	e000      	b.n	800fd2e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800fd2c:	23ff      	movs	r3, #255	; 0xff
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3728      	adds	r7, #40	; 0x28
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
	...

0800fd38 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800fd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd3a:	b0a1      	sub	sp, #132	; 0x84
 800fd3c:	af12      	add	r7, sp, #72	; 0x48
 800fd3e:	4603      	mov	r3, r0
 800fd40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800fd44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fd48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd4c:	4611      	mov	r1, r2
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f000 fa12 	bl	8010178 <SecureElementGetKeyByID>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d174      	bne.n	800fe44 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fd60:	e06c      	b.n	800fe3c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800fd62:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd66:	4939      	ldr	r1, [pc, #228]	; (800fe4c <PrintKey+0x114>)
 800fd68:	4613      	mov	r3, r2
 800fd6a:	005b      	lsls	r3, r3, #1
 800fd6c:	4413      	add	r3, r2
 800fd6e:	009b      	lsls	r3, r3, #2
 800fd70:	440b      	add	r3, r1
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d15a      	bne.n	800fe32 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800fd7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd80:	4932      	ldr	r1, [pc, #200]	; (800fe4c <PrintKey+0x114>)
 800fd82:	4613      	mov	r3, r2
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	4413      	add	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	440b      	add	r3, r1
 800fd8c:	3308      	adds	r3, #8
 800fd8e:	6819      	ldr	r1, [r3, #0]
 800fd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd92:	785b      	ldrb	r3, [r3, #1]
 800fd94:	461d      	mov	r5, r3
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	789b      	ldrb	r3, [r3, #2]
 800fd9a:	461e      	mov	r6, r3
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9e:	78db      	ldrb	r3, [r3, #3]
 800fda0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda4:	791b      	ldrb	r3, [r3, #4]
 800fda6:	627b      	str	r3, [r7, #36]	; 0x24
 800fda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdaa:	795b      	ldrb	r3, [r3, #5]
 800fdac:	623b      	str	r3, [r7, #32]
 800fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb0:	799b      	ldrb	r3, [r3, #6]
 800fdb2:	61fb      	str	r3, [r7, #28]
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb6:	79db      	ldrb	r3, [r3, #7]
 800fdb8:	61bb      	str	r3, [r7, #24]
 800fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbc:	7a1b      	ldrb	r3, [r3, #8]
 800fdbe:	617b      	str	r3, [r7, #20]
 800fdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc2:	7a5b      	ldrb	r3, [r3, #9]
 800fdc4:	613b      	str	r3, [r7, #16]
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	7a9b      	ldrb	r3, [r3, #10]
 800fdca:	60fb      	str	r3, [r7, #12]
 800fdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdce:	7adb      	ldrb	r3, [r3, #11]
 800fdd0:	60bb      	str	r3, [r7, #8]
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd4:	7b1b      	ldrb	r3, [r3, #12]
 800fdd6:	607b      	str	r3, [r7, #4]
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdda:	7b5b      	ldrb	r3, [r3, #13]
 800fddc:	461c      	mov	r4, r3
 800fdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde0:	7b9b      	ldrb	r3, [r3, #14]
 800fde2:	4618      	mov	r0, r3
 800fde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde6:	7bdb      	ldrb	r3, [r3, #15]
 800fde8:	461a      	mov	r2, r3
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	7c1b      	ldrb	r3, [r3, #16]
 800fdee:	9310      	str	r3, [sp, #64]	; 0x40
 800fdf0:	920f      	str	r2, [sp, #60]	; 0x3c
 800fdf2:	900e      	str	r0, [sp, #56]	; 0x38
 800fdf4:	940d      	str	r4, [sp, #52]	; 0x34
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	920c      	str	r2, [sp, #48]	; 0x30
 800fdfa:	68ba      	ldr	r2, [r7, #8]
 800fdfc:	920b      	str	r2, [sp, #44]	; 0x2c
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	920a      	str	r2, [sp, #40]	; 0x28
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	9209      	str	r2, [sp, #36]	; 0x24
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	9208      	str	r2, [sp, #32]
 800fe0a:	69ba      	ldr	r2, [r7, #24]
 800fe0c:	9207      	str	r2, [sp, #28]
 800fe0e:	69fa      	ldr	r2, [r7, #28]
 800fe10:	9206      	str	r2, [sp, #24]
 800fe12:	6a3a      	ldr	r2, [r7, #32]
 800fe14:	9205      	str	r2, [sp, #20]
 800fe16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe18:	9204      	str	r2, [sp, #16]
 800fe1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1c:	9303      	str	r3, [sp, #12]
 800fe1e:	9602      	str	r6, [sp, #8]
 800fe20:	9501      	str	r5, [sp, #4]
 800fe22:	9100      	str	r1, [sp, #0]
 800fe24:	4b0a      	ldr	r3, [pc, #40]	; (800fe50 <PrintKey+0x118>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	2100      	movs	r1, #0
 800fe2a:	2002      	movs	r0, #2
 800fe2c:	f010 f948 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
 800fe30:	e008      	b.n	800fe44 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe36:	3301      	adds	r3, #1
 800fe38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fe3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe40:	2b0a      	cmp	r3, #10
 800fe42:	d98e      	bls.n	800fd62 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800fe44:	373c      	adds	r7, #60	; 0x3c
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	08021dfc 	.word	0x08021dfc
 800fe50:	0802168c 	.word	0x0802168c

0800fe54 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe56:	b091      	sub	sp, #68	; 0x44
 800fe58:	af08      	add	r7, sp, #32
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800fe62:	f107 0310 	add.w	r3, r7, #16
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 fbda 	bl	8010620 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800fe6c:	7c3b      	ldrb	r3, [r7, #16]
 800fe6e:	7c7a      	ldrb	r2, [r7, #17]
 800fe70:	7cb9      	ldrb	r1, [r7, #18]
 800fe72:	7cf8      	ldrb	r0, [r7, #19]
 800fe74:	7d3c      	ldrb	r4, [r7, #20]
 800fe76:	7d7d      	ldrb	r5, [r7, #21]
 800fe78:	7dbe      	ldrb	r6, [r7, #22]
 800fe7a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800fe7e:	f8cd c01c 	str.w	ip, [sp, #28]
 800fe82:	9606      	str	r6, [sp, #24]
 800fe84:	9505      	str	r5, [sp, #20]
 800fe86:	9404      	str	r4, [sp, #16]
 800fe88:	9003      	str	r0, [sp, #12]
 800fe8a:	9102      	str	r1, [sp, #8]
 800fe8c:	9201      	str	r2, [sp, #4]
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	4b24      	ldr	r3, [pc, #144]	; (800ff24 <PrintIds+0xd0>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	2100      	movs	r1, #0
 800fe96:	2002      	movs	r0, #2
 800fe98:	f010 f912 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800fe9c:	f107 0318 	add.w	r3, r7, #24
 800fea0:	4618      	mov	r0, r3
 800fea2:	f000 fbed 	bl	8010680 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800fea6:	7e3b      	ldrb	r3, [r7, #24]
 800fea8:	7e7a      	ldrb	r2, [r7, #25]
 800feaa:	7eb9      	ldrb	r1, [r7, #26]
 800feac:	7ef8      	ldrb	r0, [r7, #27]
 800feae:	7f3c      	ldrb	r4, [r7, #28]
 800feb0:	7f7d      	ldrb	r5, [r7, #29]
 800feb2:	7fbe      	ldrb	r6, [r7, #30]
 800feb4:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800feb8:	f8cd c01c 	str.w	ip, [sp, #28]
 800febc:	9606      	str	r6, [sp, #24]
 800febe:	9505      	str	r5, [sp, #20]
 800fec0:	9404      	str	r4, [sp, #16]
 800fec2:	9003      	str	r0, [sp, #12]
 800fec4:	9102      	str	r1, [sp, #8]
 800fec6:	9201      	str	r2, [sp, #4]
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	4b17      	ldr	r3, [pc, #92]	; (800ff28 <PrintIds+0xd4>)
 800fecc:	2200      	movs	r2, #0
 800fece:	2100      	movs	r1, #0
 800fed0:	2002      	movs	r0, #2
 800fed2:	f010 f8f5 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800fed6:	f107 020c 	add.w	r2, r7, #12
 800feda:	79fb      	ldrb	r3, [r7, #7]
 800fedc:	4611      	mov	r1, r2
 800fede:	4618      	mov	r0, r3
 800fee0:	f000 fc00 	bl	80106e4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800fee4:	f107 030c 	add.w	r3, r7, #12
 800fee8:	3303      	adds	r3, #3
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	461a      	mov	r2, r3
 800feee:	f107 030c 	add.w	r3, r7, #12
 800fef2:	3302      	adds	r3, #2
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	4619      	mov	r1, r3
 800fef8:	f107 030c 	add.w	r3, r7, #12
 800fefc:	3301      	adds	r3, #1
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f107 030c 	add.w	r3, r7, #12
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	9303      	str	r3, [sp, #12]
 800ff0a:	9002      	str	r0, [sp, #8]
 800ff0c:	9101      	str	r1, [sp, #4]
 800ff0e:	9200      	str	r2, [sp, #0]
 800ff10:	4b06      	ldr	r3, [pc, #24]	; (800ff2c <PrintIds+0xd8>)
 800ff12:	2200      	movs	r2, #0
 800ff14:	2100      	movs	r1, #0
 800ff16:	2002      	movs	r0, #2
 800ff18:	f010 f8d2 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800ff1c:	bf00      	nop
 800ff1e:	3724      	adds	r7, #36	; 0x24
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff24:	080216e8 	.word	0x080216e8
 800ff28:	08021728 	.word	0x08021728
 800ff2c:	08021768 	.word	0x08021768

0800ff30 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ff30:	b480      	push	{r7}
 800ff32:	b085      	sub	sp, #20
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	4603      	mov	r3, r0
 800ff38:	6039      	str	r1, [r7, #0]
 800ff3a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	73fb      	strb	r3, [r7, #15]
 800ff40:	e01a      	b.n	800ff78 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ff42:	4b12      	ldr	r3, [pc, #72]	; (800ff8c <GetKeyByID+0x5c>)
 800ff44:	6819      	ldr	r1, [r3, #0]
 800ff46:	7bfa      	ldrb	r2, [r7, #15]
 800ff48:	4613      	mov	r3, r2
 800ff4a:	011b      	lsls	r3, r3, #4
 800ff4c:	4413      	add	r3, r2
 800ff4e:	440b      	add	r3, r1
 800ff50:	3318      	adds	r3, #24
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	79fa      	ldrb	r2, [r7, #7]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d10b      	bne.n	800ff72 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ff5a:	4b0c      	ldr	r3, [pc, #48]	; (800ff8c <GetKeyByID+0x5c>)
 800ff5c:	6819      	ldr	r1, [r3, #0]
 800ff5e:	7bfa      	ldrb	r2, [r7, #15]
 800ff60:	4613      	mov	r3, r2
 800ff62:	011b      	lsls	r3, r3, #4
 800ff64:	4413      	add	r3, r2
 800ff66:	3318      	adds	r3, #24
 800ff68:	18ca      	adds	r2, r1, r3
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e006      	b.n	800ff80 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ff72:	7bfb      	ldrb	r3, [r7, #15]
 800ff74:	3301      	adds	r3, #1
 800ff76:	73fb      	strb	r3, [r7, #15]
 800ff78:	7bfb      	ldrb	r3, [r7, #15]
 800ff7a:	2b0a      	cmp	r3, #10
 800ff7c:	d9e1      	bls.n	800ff42 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ff7e:	2303      	movs	r3, #3
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3714      	adds	r7, #20
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bc80      	pop	{r7}
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	20000754 	.word	0x20000754

0800ff90 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ff90:	b590      	push	{r4, r7, lr}
 800ff92:	b0d1      	sub	sp, #324	; 0x144
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ff9a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ff9e:	6020      	str	r0, [r4, #0]
 800ffa0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ffa4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ffa8:	6001      	str	r1, [r0, #0]
 800ffaa:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ffae:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ffb2:	600a      	str	r2, [r1, #0]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ffba:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ffbe:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ffc0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ffc4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d003      	beq.n	800ffd6 <ComputeCmac+0x46>
 800ffce:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d101      	bne.n	800ffda <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	e05d      	b.n	8010096 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ffda:	f107 0314 	add.w	r3, r7, #20
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fe ff02 	bl	800ede8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ffe4:	f107 0210 	add.w	r2, r7, #16
 800ffe8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ffec:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	4611      	mov	r1, r2
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7ff ff9b 	bl	800ff30 <GetKeyByID>
 800fffa:	4603      	mov	r3, r0
 800fffc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010000:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8010004:	2b00      	cmp	r3, #0
 8010006:	d144      	bne.n	8010092 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8010008:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801000c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	1c5a      	adds	r2, r3, #1
 8010014:	f107 0314 	add.w	r3, r7, #20
 8010018:	4611      	mov	r1, r2
 801001a:	4618      	mov	r0, r3
 801001c:	f7fe fefd 	bl	800ee1a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8010020:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010024:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d009      	beq.n	8010042 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 801002e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010032:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8010036:	f107 0014 	add.w	r0, r7, #20
 801003a:	2210      	movs	r2, #16
 801003c:	6819      	ldr	r1, [r3, #0]
 801003e:	f7fe fefb 	bl	800ee38 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010042:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010046:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 801004a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801004e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8010052:	f107 0014 	add.w	r0, r7, #20
 8010056:	6812      	ldr	r2, [r2, #0]
 8010058:	6819      	ldr	r1, [r3, #0]
 801005a:	f7fe feed 	bl	800ee38 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 801005e:	f107 0214 	add.w	r2, r7, #20
 8010062:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8010066:	4611      	mov	r1, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe ffa7 	bl	800efbc <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 801006e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8010072:	461a      	mov	r2, r3
 8010074:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8010078:	021b      	lsls	r3, r3, #8
 801007a:	431a      	orrs	r2, r3
 801007c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8010080:	041b      	lsls	r3, r3, #16
 8010082:	431a      	orrs	r2, r3
 8010084:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8010088:	061b      	lsls	r3, r3, #24
 801008a:	431a      	orrs	r2, r3
 801008c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8010090:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8010092:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 8010096:	4618      	mov	r0, r3
 8010098:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 801009c:	46bd      	mov	sp, r7
 801009e:	bd90      	pop	{r4, r7, pc}

080100a0 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d101      	bne.n	80100b2 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80100ae:	2302      	movs	r3, #2
 80100b0:	e00a      	b.n	80100c8 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 80100b2:	4a07      	ldr	r2, [pc, #28]	; (80100d0 <SecureElementInit+0x30>)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <SecureElementInit+0x30>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	22d8      	movs	r2, #216	; 0xd8
 80100be:	4905      	ldr	r1, [pc, #20]	; (80100d4 <SecureElementInit+0x34>)
 80100c0:	4618      	mov	r0, r3
 80100c2:	f00b fc36 	bl	801b932 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	20000754 	.word	0x20000754
 80100d4:	08022098 	.word	0x08022098

080100d8 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 80100e6:	f107 030c 	add.w	r3, r7, #12
 80100ea:	4618      	mov	r0, r3
 80100ec:	f000 fa98 	bl	8010620 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 80100f0:	f107 0308 	add.w	r3, r7, #8
 80100f4:	4619      	mov	r1, r3
 80100f6:	2001      	movs	r0, #1
 80100f8:	f000 faf4 	bl	80106e4 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d024      	beq.n	801014c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 8010102:	2300      	movs	r3, #0
 8010104:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010106:	2300      	movs	r3, #0
 8010108:	75bb      	strb	r3, [r7, #22]
 801010a:	e00c      	b.n	8010126 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 801010c:	7dbb      	ldrb	r3, [r7, #22]
 801010e:	3318      	adds	r3, #24
 8010110:	443b      	add	r3, r7
 8010112:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 801011a:	2301      	movs	r3, #1
 801011c:	75fb      	strb	r3, [r7, #23]
                break;
 801011e:	e005      	b.n	801012c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010120:	7dbb      	ldrb	r3, [r7, #22]
 8010122:	3301      	adds	r3, #1
 8010124:	75bb      	strb	r3, [r7, #22]
 8010126:	7dbb      	ldrb	r3, [r7, #22]
 8010128:	2b07      	cmp	r3, #7
 801012a:	d9ef      	bls.n	801010c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 801012c:	7dfb      	ldrb	r3, [r7, #23]
 801012e:	f083 0301 	eor.w	r3, r3, #1
 8010132:	b2db      	uxtb	r3, r3
 8010134:	2b00      	cmp	r3, #0
 8010136:	d009      	beq.n	801014c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 8010138:	f107 020c 	add.w	r2, r7, #12
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4610      	mov	r0, r2
 8010140:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 8010142:	f107 030c 	add.w	r3, r7, #12
 8010146:	4618      	mov	r0, r3
 8010148:	f000 fa52 	bl	80105f0 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00c      	beq.n	801016c <SecureElementInitMcuID+0x94>
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d109      	bne.n	801016c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 8010158:	f107 0208 	add.w	r2, r7, #8
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	4610      	mov	r0, r2
 8010160:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	4619      	mov	r1, r3
 8010166:	2001      	movs	r0, #1
 8010168:	f000 faa2 	bl	80106b0 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 801016c:	2300      	movs	r3, #0
}
 801016e:	4618      	mov	r0, r3
 8010170:	3718      	adds	r7, #24
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
	...

08010178 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	6039      	str	r1, [r7, #0]
 8010182:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010184:	2300      	movs	r3, #0
 8010186:	73fb      	strb	r3, [r7, #15]
 8010188:	e01a      	b.n	80101c0 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801018a:	4b12      	ldr	r3, [pc, #72]	; (80101d4 <SecureElementGetKeyByID+0x5c>)
 801018c:	6819      	ldr	r1, [r3, #0]
 801018e:	7bfa      	ldrb	r2, [r7, #15]
 8010190:	4613      	mov	r3, r2
 8010192:	011b      	lsls	r3, r3, #4
 8010194:	4413      	add	r3, r2
 8010196:	440b      	add	r3, r1
 8010198:	3318      	adds	r3, #24
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	79fa      	ldrb	r2, [r7, #7]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d10b      	bne.n	80101ba <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 80101a2:	4b0c      	ldr	r3, [pc, #48]	; (80101d4 <SecureElementGetKeyByID+0x5c>)
 80101a4:	6819      	ldr	r1, [r3, #0]
 80101a6:	7bfa      	ldrb	r2, [r7, #15]
 80101a8:	4613      	mov	r3, r2
 80101aa:	011b      	lsls	r3, r3, #4
 80101ac:	4413      	add	r3, r2
 80101ae:	3318      	adds	r3, #24
 80101b0:	18ca      	adds	r2, r1, r3
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e006      	b.n	80101c8 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80101ba:	7bfb      	ldrb	r3, [r7, #15]
 80101bc:	3301      	adds	r3, #1
 80101be:	73fb      	strb	r3, [r7, #15]
 80101c0:	7bfb      	ldrb	r3, [r7, #15]
 80101c2:	2b0a      	cmp	r3, #10
 80101c4:	d9e1      	bls.n	801018a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80101c6:	2303      	movs	r3, #3
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3714      	adds	r7, #20
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bc80      	pop	{r7}
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	20000754 	.word	0x20000754

080101d8 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 80101dc:	2000      	movs	r0, #0
 80101de:	f7ff fdab 	bl	800fd38 <PrintKey>
    PrintKey( NWK_KEY );
 80101e2:	2001      	movs	r0, #1
 80101e4:	f7ff fda8 	bl	800fd38 <PrintKey>
    PrintKey( APP_S_KEY );
 80101e8:	2009      	movs	r0, #9
 80101ea:	f7ff fda5 	bl	800fd38 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80101ee:	2008      	movs	r0, #8
 80101f0:	f7ff fda2 	bl	800fd38 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 80101f4:	2000      	movs	r0, #0
 80101f6:	f7ff fe2d 	bl	800fe54 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	bd80      	pop	{r7, pc}

08010200 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	4603      	mov	r3, r0
 8010208:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 801020a:	200b      	movs	r0, #11
 801020c:	f7ff fd94 	bl	800fd38 <PrintKey>
    PrintKey( MC_KE_KEY );
 8010210:	200c      	movs	r0, #12
 8010212:	f7ff fd91 	bl	800fd38 <PrintKey>
    PrintKey( APP_S_KEY );
 8010216:	2009      	movs	r0, #9
 8010218:	f7ff fd8e 	bl	800fd38 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 801021c:	2008      	movs	r0, #8
 801021e:	f7ff fd8b 	bl	800fd38 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 8010222:	200a      	movs	r0, #10
 8010224:	f7ff fd88 	bl	800fd38 <PrintKey>
    PrintIds( mode );
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	4618      	mov	r0, r3
 801022c:	f7ff fe12 	bl	800fe54 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af00      	add	r7, sp, #0
 8010242:	4603      	mov	r3, r0
 8010244:	6039      	str	r1, [r7, #0]
 8010246:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d101      	bne.n	8010252 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801024e:	2302      	movs	r3, #2
 8010250:	e04c      	b.n	80102ec <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010252:	2300      	movs	r3, #0
 8010254:	77fb      	strb	r3, [r7, #31]
 8010256:	e045      	b.n	80102e4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010258:	4b26      	ldr	r3, [pc, #152]	; (80102f4 <SecureElementSetKey+0xb8>)
 801025a:	6819      	ldr	r1, [r3, #0]
 801025c:	7ffa      	ldrb	r2, [r7, #31]
 801025e:	4613      	mov	r3, r2
 8010260:	011b      	lsls	r3, r3, #4
 8010262:	4413      	add	r3, r2
 8010264:	440b      	add	r3, r1
 8010266:	3318      	adds	r3, #24
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	79fa      	ldrb	r2, [r7, #7]
 801026c:	429a      	cmp	r2, r3
 801026e:	d136      	bne.n	80102de <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8010270:	79fb      	ldrb	r3, [r7, #7]
 8010272:	2b0d      	cmp	r3, #13
 8010274:	d123      	bne.n	80102be <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8010276:	2306      	movs	r3, #6
 8010278:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 801027a:	2300      	movs	r3, #0
 801027c:	60fb      	str	r3, [r7, #12]
 801027e:	f107 0310 	add.w	r3, r7, #16
 8010282:	2200      	movs	r2, #0
 8010284:	601a      	str	r2, [r3, #0]
 8010286:	605a      	str	r2, [r3, #4]
 8010288:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 801028a:	f107 030c 	add.w	r3, r7, #12
 801028e:	220c      	movs	r2, #12
 8010290:	2110      	movs	r1, #16
 8010292:	6838      	ldr	r0, [r7, #0]
 8010294:	f000 f876 	bl	8010384 <SecureElementAesEncrypt>
 8010298:	4603      	mov	r3, r0
 801029a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 801029c:	4b15      	ldr	r3, [pc, #84]	; (80102f4 <SecureElementSetKey+0xb8>)
 801029e:	6819      	ldr	r1, [r3, #0]
 80102a0:	7ffa      	ldrb	r2, [r7, #31]
 80102a2:	4613      	mov	r3, r2
 80102a4:	011b      	lsls	r3, r3, #4
 80102a6:	4413      	add	r3, r2
 80102a8:	3318      	adds	r3, #24
 80102aa:	440b      	add	r3, r1
 80102ac:	3301      	adds	r3, #1
 80102ae:	f107 010c 	add.w	r1, r7, #12
 80102b2:	2210      	movs	r2, #16
 80102b4:	4618      	mov	r0, r3
 80102b6:	f00b fb3c 	bl	801b932 <memcpy1>
                return retval;
 80102ba:	7fbb      	ldrb	r3, [r7, #30]
 80102bc:	e016      	b.n	80102ec <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80102be:	4b0d      	ldr	r3, [pc, #52]	; (80102f4 <SecureElementSetKey+0xb8>)
 80102c0:	6819      	ldr	r1, [r3, #0]
 80102c2:	7ffa      	ldrb	r2, [r7, #31]
 80102c4:	4613      	mov	r3, r2
 80102c6:	011b      	lsls	r3, r3, #4
 80102c8:	4413      	add	r3, r2
 80102ca:	3318      	adds	r3, #24
 80102cc:	440b      	add	r3, r1
 80102ce:	3301      	adds	r3, #1
 80102d0:	2210      	movs	r2, #16
 80102d2:	6839      	ldr	r1, [r7, #0]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f00b fb2c 	bl	801b932 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80102da:	2300      	movs	r3, #0
 80102dc:	e006      	b.n	80102ec <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80102de:	7ffb      	ldrb	r3, [r7, #31]
 80102e0:	3301      	adds	r3, #1
 80102e2:	77fb      	strb	r3, [r7, #31]
 80102e4:	7ffb      	ldrb	r3, [r7, #31]
 80102e6:	2b0a      	cmp	r3, #10
 80102e8:	d9b6      	bls.n	8010258 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80102ea:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3720      	adds	r7, #32
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	20000754 	.word	0x20000754

080102f8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af02      	add	r7, sp, #8
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 8010306:	78fb      	ldrb	r3, [r7, #3]
 8010308:	2b0b      	cmp	r3, #11
 801030a:	d901      	bls.n	8010310 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801030c:	2303      	movs	r3, #3
 801030e:	e009      	b.n	8010324 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8010310:	78fa      	ldrb	r2, [r7, #3]
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	9300      	str	r3, [sp, #0]
 8010316:	4613      	mov	r3, r2
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	68b9      	ldr	r1, [r7, #8]
 801031c:	68f8      	ldr	r0, [r7, #12]
 801031e:	f7ff fe37 	bl	800ff90 <ComputeCmac>
 8010322:	4603      	mov	r3, r0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af02      	add	r7, sp, #8
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	607a      	str	r2, [r7, #4]
 8010338:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010340:	2302      	movs	r3, #2
 8010342:	e01b      	b.n	801037c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 8010344:	2306      	movs	r3, #6
 8010346:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8010348:	2300      	movs	r3, #0
 801034a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801034c:	78fa      	ldrb	r2, [r7, #3]
 801034e:	f107 0310 	add.w	r3, r7, #16
 8010352:	9300      	str	r3, [sp, #0]
 8010354:	4613      	mov	r3, r2
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	68f9      	ldr	r1, [r7, #12]
 801035a:	2000      	movs	r0, #0
 801035c:	f7ff fe18 	bl	800ff90 <ComputeCmac>
 8010360:	4603      	mov	r3, r0
 8010362:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010364:	7dfb      	ldrb	r3, [r7, #23]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d001      	beq.n	801036e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 801036a:	7dfb      	ldrb	r3, [r7, #23]
 801036c:	e006      	b.n	801037c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	429a      	cmp	r2, r3
 8010374:	d001      	beq.n	801037a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010376:	2301      	movs	r3, #1
 8010378:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 801037a:	7dfb      	ldrb	r3, [r7, #23]
}
 801037c:	4618      	mov	r0, r3
 801037e:	3718      	adds	r7, #24
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b0c2      	sub	sp, #264	; 0x108
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010390:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8010394:	6001      	str	r1, [r0, #0]
 8010396:	4611      	mov	r1, r2
 8010398:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801039c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80103a0:	6013      	str	r3, [r2, #0]
 80103a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103a6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80103aa:	460a      	mov	r2, r1
 80103ac:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d006      	beq.n	80103c2 <SecureElementAesEncrypt+0x3e>
 80103b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80103c2:	2302      	movs	r3, #2
 80103c4:	e059      	b.n	801047a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 80103c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f003 030f 	and.w	r3, r3, #15
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80103d8:	2305      	movs	r3, #5
 80103da:	e04e      	b.n	801047a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80103dc:	f107 0314 	add.w	r3, r7, #20
 80103e0:	22f0      	movs	r2, #240	; 0xf0
 80103e2:	2100      	movs	r1, #0
 80103e4:	4618      	mov	r0, r3
 80103e6:	f00b fadf 	bl	801b9a8 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80103ea:	f107 0210 	add.w	r2, r7, #16
 80103ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103f2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	4611      	mov	r1, r2
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7ff fd98 	bl	800ff30 <GetKeyByID>
 8010400:	4603      	mov	r3, r0
 8010402:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010406:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 801040a:	2b00      	cmp	r3, #0
 801040c:	d133      	bne.n	8010476 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	3301      	adds	r3, #1
 8010412:	f107 0214 	add.w	r2, r7, #20
 8010416:	2110      	movs	r1, #16
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff fb65 	bl	800fae8 <lorawan_aes_set_key>

        uint8_t block = 0;
 801041e:	2300      	movs	r3, #0
 8010420:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 8010424:	e020      	b.n	8010468 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8010426:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	18d0      	adds	r0, r2, r3
 801042e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8010432:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8010436:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 801043a:	6812      	ldr	r2, [r2, #0]
 801043c:	4413      	add	r3, r2
 801043e:	f107 0214 	add.w	r2, r7, #20
 8010442:	4619      	mov	r1, r3
 8010444:	f7ff fc2e 	bl	800fca4 <lorawan_aes_encrypt>
            block = block + 16;
 8010448:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801044c:	3310      	adds	r3, #16
 801044e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 8010452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010456:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801045a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801045e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8010462:	6812      	ldr	r2, [r2, #0]
 8010464:	3a10      	subs	r2, #16
 8010466:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8010468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801046c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1d7      	bne.n	8010426 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8010476:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 801047a:	4618      	mov	r0, r3
 801047c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b088      	sub	sp, #32
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	460b      	mov	r3, r1
 801048e:	70fb      	strb	r3, [r7, #3]
 8010490:	4613      	mov	r3, r2
 8010492:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d101      	bne.n	801049e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801049a:	2302      	movs	r3, #2
 801049c:	e02e      	b.n	80104fc <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 801049e:	2306      	movs	r3, #6
 80104a0:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 80104a2:	78bb      	ldrb	r3, [r7, #2]
 80104a4:	2b0c      	cmp	r3, #12
 80104a6:	d104      	bne.n	80104b2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 80104a8:	78fb      	ldrb	r3, [r7, #3]
 80104aa:	2b0b      	cmp	r3, #11
 80104ac:	d001      	beq.n	80104b2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80104ae:	2303      	movs	r3, #3
 80104b0:	e024      	b.n	80104fc <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 80104b2:	2300      	movs	r3, #0
 80104b4:	60fb      	str	r3, [r7, #12]
 80104b6:	f107 0310 	add.w	r3, r7, #16
 80104ba:	2200      	movs	r2, #0
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	605a      	str	r2, [r3, #4]
 80104c0:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 80104c2:	f107 030c 	add.w	r3, r7, #12
 80104c6:	78fa      	ldrb	r2, [r7, #3]
 80104c8:	2110      	movs	r1, #16
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7ff ff5a 	bl	8010384 <SecureElementAesEncrypt>
 80104d0:	4603      	mov	r3, r0
 80104d2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80104d4:	7ffb      	ldrb	r3, [r7, #31]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 80104da:	7ffb      	ldrb	r3, [r7, #31]
 80104dc:	e00e      	b.n	80104fc <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 80104de:	f107 020c 	add.w	r2, r7, #12
 80104e2:	78bb      	ldrb	r3, [r7, #2]
 80104e4:	4611      	mov	r1, r2
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7ff fea8 	bl	801023c <SecureElementSetKey>
 80104ec:	4603      	mov	r3, r0
 80104ee:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80104f0:	7ffb      	ldrb	r3, [r7, #31]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d001      	beq.n	80104fa <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 80104f6:	7ffb      	ldrb	r3, [r7, #31]
 80104f8:	e000      	b.n	80104fc <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 80104fa:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3720      	adds	r7, #32
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b086      	sub	sp, #24
 8010508:	af00      	add	r7, sp, #0
 801050a:	60b9      	str	r1, [r7, #8]
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	4603      	mov	r3, r0
 8010510:	73fb      	strb	r3, [r7, #15]
 8010512:	4613      	mov	r3, r2
 8010514:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d005      	beq.n	8010528 <SecureElementProcessJoinAccept+0x24>
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <SecureElementProcessJoinAccept+0x24>
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	2b00      	cmp	r3, #0
 8010526:	d101      	bne.n	801052c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010528:	2302      	movs	r3, #2
 801052a:	e05c      	b.n	80105e6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 801052c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010530:	2b21      	cmp	r3, #33	; 0x21
 8010532:	d901      	bls.n	8010538 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010534:	2305      	movs	r3, #5
 8010536:	e056      	b.n	80105e6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 8010538:	2301      	movs	r3, #1
 801053a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 801053c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010540:	b29b      	uxth	r3, r3
 8010542:	461a      	mov	r2, r3
 8010544:	6879      	ldr	r1, [r7, #4]
 8010546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010548:	f00b f9f3 	bl	801b932 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	1c58      	adds	r0, r3, #1
 8010550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010554:	3b01      	subs	r3, #1
 8010556:	4619      	mov	r1, r3
 8010558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055a:	3301      	adds	r3, #1
 801055c:	7dfa      	ldrb	r2, [r7, #23]
 801055e:	f7ff ff11 	bl	8010384 <SecureElementAesEncrypt>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010568:	2307      	movs	r3, #7
 801056a:	e03c      	b.n	80105e6 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056e:	330b      	adds	r3, #11
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	09db      	lsrs	r3, r3, #7
 8010574:	b2da      	uxtb	r2, r3
 8010576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010578:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 801057a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801057e:	3b04      	subs	r3, #4
 8010580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010582:	4413      	add	r3, r2
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	4619      	mov	r1, r3
 8010588:	f897 3020 	ldrb.w	r3, [r7, #32]
 801058c:	3b03      	subs	r3, #3
 801058e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010590:	4413      	add	r3, r2
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	021b      	lsls	r3, r3, #8
 8010596:	ea41 0203 	orr.w	r2, r1, r3
 801059a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801059e:	3b02      	subs	r3, #2
 80105a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105a2:	440b      	add	r3, r1
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	041b      	lsls	r3, r3, #16
 80105a8:	431a      	orrs	r2, r3
 80105aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80105ae:	3b01      	subs	r3, #1
 80105b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105b2:	440b      	add	r3, r1
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	061b      	lsls	r3, r3, #24
 80105b8:	4313      	orrs	r3, r2
 80105ba:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 80105bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d10d      	bne.n	80105e0 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80105c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80105c8:	3b04      	subs	r3, #4
 80105ca:	4619      	mov	r1, r3
 80105cc:	2301      	movs	r3, #1
 80105ce:	693a      	ldr	r2, [r7, #16]
 80105d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105d2:	f7ff feab 	bl	801032c <SecureElementVerifyAesCmac>
 80105d6:	4603      	mov	r3, r0
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d003      	beq.n	80105e4 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80105dc:	2301      	movs	r3, #1
 80105de:	e002      	b.n	80105e6 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80105e0:	2304      	movs	r3, #4
 80105e2:	e000      	b.n	80105e6 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
	...

080105f0 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d101      	bne.n	8010602 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80105fe:	2302      	movs	r3, #2
 8010600:	e007      	b.n	8010612 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8010602:	4b06      	ldr	r3, [pc, #24]	; (801061c <SecureElementSetDevEui+0x2c>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2208      	movs	r2, #8
 8010608:	6879      	ldr	r1, [r7, #4]
 801060a:	4618      	mov	r0, r3
 801060c:	f00b f991 	bl	801b932 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010610:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010612:	4618      	mov	r0, r3
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	20000754 	.word	0x20000754

08010620 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d101      	bne.n	8010632 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801062e:	2302      	movs	r3, #2
 8010630:	e007      	b.n	8010642 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8010632:	4b06      	ldr	r3, [pc, #24]	; (801064c <SecureElementGetDevEui+0x2c>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2208      	movs	r2, #8
 8010638:	4619      	mov	r1, r3
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f00b f979 	bl	801b932 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010640:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010642:	4618      	mov	r0, r3
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	20000754 	.word	0x20000754

08010650 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801065e:	2302      	movs	r3, #2
 8010660:	e008      	b.n	8010674 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8010662:	4b06      	ldr	r3, [pc, #24]	; (801067c <SecureElementSetJoinEui+0x2c>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	3308      	adds	r3, #8
 8010668:	2208      	movs	r2, #8
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	4618      	mov	r0, r3
 801066e:	f00b f960 	bl	801b932 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010672:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	20000754 	.word	0x20000754

08010680 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d101      	bne.n	8010692 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801068e:	2302      	movs	r3, #2
 8010690:	e008      	b.n	80106a4 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8010692:	4b06      	ldr	r3, [pc, #24]	; (80106ac <SecureElementGetJoinEui+0x2c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	3308      	adds	r3, #8
 8010698:	2208      	movs	r2, #8
 801069a:	4619      	mov	r1, r3
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f00b f948 	bl	801b932 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80106a2:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	20000754 	.word	0x20000754

080106b0 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	4603      	mov	r3, r0
 80106b8:	6039      	str	r1, [r7, #0]
 80106ba:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 80106bc:	79fb      	ldrb	r3, [r7, #7]
 80106be:	2b02      	cmp	r3, #2
 80106c0:	d104      	bne.n	80106cc <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80106c2:	4b07      	ldr	r3, [pc, #28]	; (80106e0 <SecureElementSetDevAddr+0x30>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	683a      	ldr	r2, [r7, #0]
 80106c8:	611a      	str	r2, [r3, #16]
 80106ca:	e003      	b.n	80106d4 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 80106cc:	4b04      	ldr	r3, [pc, #16]	; (80106e0 <SecureElementSetDevAddr+0x30>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	683a      	ldr	r2, [r7, #0]
 80106d2:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 80106d4:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	bc80      	pop	{r7}
 80106de:	4770      	bx	lr
 80106e0:	20000754 	.word	0x20000754

080106e4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	4603      	mov	r3, r0
 80106ec:	6039      	str	r1, [r7, #0]
 80106ee:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d101      	bne.n	80106fa <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80106f6:	2302      	movs	r3, #2
 80106f8:	e00e      	b.n	8010718 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80106fa:	79fb      	ldrb	r3, [r7, #7]
 80106fc:	2b02      	cmp	r3, #2
 80106fe:	d105      	bne.n	801070c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8010700:	4b08      	ldr	r3, [pc, #32]	; (8010724 <SecureElementGetDevAddr+0x40>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	691a      	ldr	r2, [r3, #16]
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	601a      	str	r2, [r3, #0]
 801070a:	e004      	b.n	8010716 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 801070c:	4b05      	ldr	r3, [pc, #20]	; (8010724 <SecureElementGetDevAddr+0x40>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	695a      	ldr	r2, [r3, #20]
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8010716:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8010718:	4618      	mov	r0, r3
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	bc80      	pop	{r7}
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	20000754 	.word	0x20000754

08010728 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 8010732:	4a29      	ldr	r2, [pc, #164]	; (80107d8 <LmHandlerInit+0xb0>)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8010738:	4b28      	ldr	r3, [pc, #160]	; (80107dc <LmHandlerInit+0xb4>)
 801073a:	4a29      	ldr	r2, [pc, #164]	; (80107e0 <LmHandlerInit+0xb8>)
 801073c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 801073e:	4b27      	ldr	r3, [pc, #156]	; (80107dc <LmHandlerInit+0xb4>)
 8010740:	4a28      	ldr	r2, [pc, #160]	; (80107e4 <LmHandlerInit+0xbc>)
 8010742:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8010744:	4b25      	ldr	r3, [pc, #148]	; (80107dc <LmHandlerInit+0xb4>)
 8010746:	4a28      	ldr	r2, [pc, #160]	; (80107e8 <LmHandlerInit+0xc0>)
 8010748:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 801074a:	4b24      	ldr	r3, [pc, #144]	; (80107dc <LmHandlerInit+0xb4>)
 801074c:	4a27      	ldr	r2, [pc, #156]	; (80107ec <LmHandlerInit+0xc4>)
 801074e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8010750:	4b21      	ldr	r3, [pc, #132]	; (80107d8 <LmHandlerInit+0xb0>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a26      	ldr	r2, [pc, #152]	; (80107f0 <LmHandlerInit+0xc8>)
 8010758:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 801075a:	4b1f      	ldr	r3, [pc, #124]	; (80107d8 <LmHandlerInit+0xb0>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4a23      	ldr	r2, [pc, #140]	; (80107f0 <LmHandlerInit+0xc8>)
 8010762:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8010764:	4b1c      	ldr	r3, [pc, #112]	; (80107d8 <LmHandlerInit+0xb0>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	689b      	ldr	r3, [r3, #8]
 801076a:	4a21      	ldr	r2, [pc, #132]	; (80107f0 <LmHandlerInit+0xc8>)
 801076c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 801076e:	4b1a      	ldr	r3, [pc, #104]	; (80107d8 <LmHandlerInit+0xb0>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	4a1e      	ldr	r2, [pc, #120]	; (80107f0 <LmHandlerInit+0xc8>)
 8010776:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8010778:	4b1d      	ldr	r3, [pc, #116]	; (80107f0 <LmHandlerInit+0xc8>)
 801077a:	4a1e      	ldr	r2, [pc, #120]	; (80107f4 <LmHandlerInit+0xcc>)
 801077c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 801077e:	4b16      	ldr	r3, [pc, #88]	; (80107d8 <LmHandlerInit+0xb0>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	4a1a      	ldr	r2, [pc, #104]	; (80107f0 <LmHandlerInit+0xc8>)
 8010786:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	4a1b      	ldr	r2, [pc, #108]	; (80107f8 <LmHandlerInit+0xd0>)
 801078c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 801078e:	4b12      	ldr	r3, [pc, #72]	; (80107d8 <LmHandlerInit+0xb0>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010794:	4a18      	ldr	r2, [pc, #96]	; (80107f8 <LmHandlerInit+0xd0>)
 8010796:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8010798:	4b17      	ldr	r3, [pc, #92]	; (80107f8 <LmHandlerInit+0xd0>)
 801079a:	4a18      	ldr	r2, [pc, #96]	; (80107fc <LmHandlerInit+0xd4>)
 801079c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 801079e:	4b16      	ldr	r3, [pc, #88]	; (80107f8 <LmHandlerInit+0xd0>)
 80107a0:	4a17      	ldr	r2, [pc, #92]	; (8010800 <LmHandlerInit+0xd8>)
 80107a2:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 80107a4:	4914      	ldr	r1, [pc, #80]	; (80107f8 <LmHandlerInit+0xd0>)
 80107a6:	2000      	movs	r0, #0
 80107a8:	f000 fdb6 	bl	8011318 <LmHandlerPackageRegister>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d002      	beq.n	80107b8 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 80107b2:	f04f 33ff 	mov.w	r3, #4294967295
 80107b6:	e00a      	b.n	80107ce <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 80107b8:	463b      	mov	r3, r7
 80107ba:	4618      	mov	r0, r3
 80107bc:	f001 fd2e 	bl	801221c <LmhpPackagesRegistrationInit>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d002      	beq.n	80107cc <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 80107c6:	f04f 33ff 	mov.w	r3, #4294967295
 80107ca:	e000      	b.n	80107ce <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 80107cc:	2300      	movs	r3, #0
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	200007ac 	.word	0x200007ac
 80107dc:	200007b0 	.word	0x200007b0
 80107e0:	08010ff1 	.word	0x08010ff1
 80107e4:	08011065 	.word	0x08011065
 80107e8:	08011135 	.word	0x08011135
 80107ec:	08011285 	.word	0x08011285
 80107f0:	200007c0 	.word	0x200007c0
 80107f4:	080117c9 	.word	0x080117c9
 80107f8:	20000770 	.word	0x20000770
 80107fc:	080115dd 	.word	0x080115dd
 8010800:	08011615 	.word	0x08011615

08010804 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b092      	sub	sp, #72	; 0x48
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 801080c:	2218      	movs	r2, #24
 801080e:	6879      	ldr	r1, [r7, #4]
 8010810:	4884      	ldr	r0, [pc, #528]	; (8010a24 <LmHandlerConfigure+0x220>)
 8010812:	f00b f88e 	bl	801b932 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 8010816:	4b84      	ldr	r3, [pc, #528]	; (8010a28 <LmHandlerConfigure+0x224>)
 8010818:	2200      	movs	r2, #0
 801081a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 801081c:	f7fe faa2 	bl	800ed64 <LoraInfo_GetPtr>
 8010820:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8010822:	4b80      	ldr	r3, [pc, #512]	; (8010a24 <LmHandlerConfigure+0x220>)
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	461a      	mov	r2, r3
 8010828:	2301      	movs	r3, #1
 801082a:	4093      	lsls	r3, r2
 801082c:	461a      	mov	r2, r3
 801082e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	4013      	ands	r3, r2
 8010834:	2b00      	cmp	r3, #0
 8010836:	d106      	bne.n	8010846 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8010838:	4b7c      	ldr	r3, [pc, #496]	; (8010a2c <LmHandlerConfigure+0x228>)
 801083a:	2201      	movs	r2, #1
 801083c:	2100      	movs	r1, #0
 801083e:	2000      	movs	r0, #0
 8010840:	f00f fc3e 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8010844:	e7fe      	b.n	8010844 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8010846:	4b77      	ldr	r3, [pc, #476]	; (8010a24 <LmHandlerConfigure+0x220>)
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	4978      	ldr	r1, [pc, #480]	; (8010a30 <LmHandlerConfigure+0x22c>)
 801084e:	4879      	ldr	r0, [pc, #484]	; (8010a34 <LmHandlerConfigure+0x230>)
 8010850:	f004 ffd8 	bl	8015804 <LoRaMacInitialization>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d002      	beq.n	8010860 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 801085a:	f04f 33ff 	mov.w	r3, #4294967295
 801085e:	e0dc      	b.n	8010a1a <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 8010860:	2327      	movs	r3, #39	; 0x27
 8010862:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010864:	f107 0318 	add.w	r3, r7, #24
 8010868:	4618      	mov	r0, r3
 801086a:	f005 fd57 	bl	801631c <LoRaMacMibSetRequestConfirm>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d103      	bne.n	801087c <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 8010874:	4b70      	ldr	r3, [pc, #448]	; (8010a38 <LmHandlerConfigure+0x234>)
 8010876:	2201      	movs	r2, #1
 8010878:	701a      	strb	r2, [r3, #0]
 801087a:	e02a      	b.n	80108d2 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 801087c:	2328      	movs	r3, #40	; 0x28
 801087e:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8010880:	4b6e      	ldr	r3, [pc, #440]	; (8010a3c <LmHandlerConfigure+0x238>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	691b      	ldr	r3, [r3, #16]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00c      	beq.n	80108a4 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 801088a:	f107 0318 	add.w	r3, r7, #24
 801088e:	4618      	mov	r0, r3
 8010890:	f005 fb6c 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8010894:	4b69      	ldr	r3, [pc, #420]	; (8010a3c <LmHandlerConfigure+0x238>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	691b      	ldr	r3, [r3, #16]
 801089a:	69fa      	ldr	r2, [r7, #28]
 801089c:	f240 51cc 	movw	r1, #1484	; 0x5cc
 80108a0:	4610      	mov	r0, r2
 80108a2:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 80108a4:	2327      	movs	r3, #39	; 0x27
 80108a6:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80108a8:	f107 0318 	add.w	r3, r7, #24
 80108ac:	4618      	mov	r0, r3
 80108ae:	f005 fd35 	bl	801631c <LoRaMacMibSetRequestConfirm>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d10c      	bne.n	80108d2 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 80108b8:	2301      	movs	r3, #1
 80108ba:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80108bc:	f107 0318 	add.w	r3, r7, #24
 80108c0:	4618      	mov	r0, r3
 80108c2:	f005 fb53 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 80108c6:	7f3b      	ldrb	r3, [r7, #28]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 80108cc:	4b5a      	ldr	r3, [pc, #360]	; (8010a38 <LmHandlerConfigure+0x234>)
 80108ce:	2201      	movs	r2, #1
 80108d0:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 80108d2:	4b59      	ldr	r3, [pc, #356]	; (8010a38 <LmHandlerConfigure+0x234>)
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d022      	beq.n	8010920 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80108da:	4b58      	ldr	r3, [pc, #352]	; (8010a3c <LmHandlerConfigure+0x238>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	69db      	ldr	r3, [r3, #28]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d004      	beq.n	80108ee <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80108e4:	4b55      	ldr	r3, [pc, #340]	; (8010a3c <LmHandlerConfigure+0x238>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	69db      	ldr	r3, [r3, #28]
 80108ea:	2000      	movs	r0, #0
 80108ec:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 80108ee:	2327      	movs	r3, #39	; 0x27
 80108f0:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80108f2:	f107 0318 	add.w	r3, r7, #24
 80108f6:	4618      	mov	r0, r3
 80108f8:	f005 fb38 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8010900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010902:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010906:	4b47      	ldr	r3, [pc, #284]	; (8010a24 <LmHandlerConfigure+0x220>)
 8010908:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 801090a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801090c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8010910:	4b44      	ldr	r3, [pc, #272]	; (8010a24 <LmHandlerConfigure+0x220>)
 8010912:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8010914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010916:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801091a:	4b42      	ldr	r3, [pc, #264]	; (8010a24 <LmHandlerConfigure+0x220>)
 801091c:	709a      	strb	r2, [r3, #2]
 801091e:	e008      	b.n	8010932 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 8010920:	2305      	movs	r3, #5
 8010922:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8010924:	2300      	movs	r3, #0
 8010926:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8010928:	f107 0318 	add.w	r3, r7, #24
 801092c:	4618      	mov	r0, r3
 801092e:	f005 fcf5 	bl	801631c <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8010932:	4b3f      	ldr	r3, [pc, #252]	; (8010a30 <LmHandlerConfigure+0x22c>)
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	4a3e      	ldr	r2, [pc, #248]	; (8010a30 <LmHandlerConfigure+0x22c>)
 8010938:	68d2      	ldr	r2, [r2, #12]
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff fbcb 	bl	80100d8 <SecureElementInitMcuID>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010948:	f04f 33ff 	mov.w	r3, #4294967295
 801094c:	e065      	b.n	8010a1a <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 801094e:	2306      	movs	r3, #6
 8010950:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010952:	f107 0318 	add.w	r3, r7, #24
 8010956:	4618      	mov	r0, r3
 8010958:	f005 fb08 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	4a38      	ldr	r2, [pc, #224]	; (8010a40 <LmHandlerConfigure+0x23c>)
 8010960:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010962:	f107 0318 	add.w	r3, r7, #24
 8010966:	4618      	mov	r0, r3
 8010968:	f005 fcd8 	bl	801631c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 801096c:	2302      	movs	r3, #2
 801096e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8010970:	4b33      	ldr	r3, [pc, #204]	; (8010a40 <LmHandlerConfigure+0x23c>)
 8010972:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010974:	f107 0318 	add.w	r3, r7, #24
 8010978:	4618      	mov	r0, r3
 801097a:	f005 faf7 	bl	8015f6c <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 801097e:	2303      	movs	r3, #3
 8010980:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8010982:	4b30      	ldr	r3, [pc, #192]	; (8010a44 <LmHandlerConfigure+0x240>)
 8010984:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8010986:	f107 0318 	add.w	r3, r7, #24
 801098a:	4618      	mov	r0, r3
 801098c:	f005 faee 	bl	8015f6c <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 8010990:	f7ff fc22 	bl	80101d8 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 8010994:	230f      	movs	r3, #15
 8010996:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8010998:	2301      	movs	r3, #1
 801099a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801099c:	f107 0318 	add.w	r3, r7, #24
 80109a0:	4618      	mov	r0, r3
 80109a2:	f005 fcbb 	bl	801631c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 80109a6:	2310      	movs	r3, #16
 80109a8:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80109aa:	2300      	movs	r3, #0
 80109ac:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80109ae:	f107 0318 	add.w	r3, r7, #24
 80109b2:	4618      	mov	r0, r3
 80109b4:	f005 fcb2 	bl	801631c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 80109b8:	2304      	movs	r3, #4
 80109ba:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80109bc:	4b19      	ldr	r3, [pc, #100]	; (8010a24 <LmHandlerConfigure+0x220>)
 80109be:	789b      	ldrb	r3, [r3, #2]
 80109c0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80109c2:	f107 0318 	add.w	r3, r7, #24
 80109c6:	4618      	mov	r0, r3
 80109c8:	f005 fca8 	bl	801631c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80109cc:	233a      	movs	r3, #58	; 0x3a
 80109ce:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80109d0:	4b14      	ldr	r3, [pc, #80]	; (8010a24 <LmHandlerConfigure+0x220>)
 80109d2:	695b      	ldr	r3, [r3, #20]
 80109d4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80109d6:	f107 0318 	add.w	r3, r7, #24
 80109da:	4618      	mov	r0, r3
 80109dc:	f005 fc9e 	bl	801631c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80109e0:	230f      	movs	r3, #15
 80109e2:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80109e4:	4b0f      	ldr	r3, [pc, #60]	; (8010a24 <LmHandlerConfigure+0x220>)
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	f107 0210 	add.w	r2, r7, #16
 80109ec:	4611      	mov	r1, r2
 80109ee:	4618      	mov	r0, r3
 80109f0:	f008 fbe7 	bl	80191c2 <RegionGetPhyParam>
 80109f4:	4603      	mov	r3, r0
 80109f6:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	bf14      	ite	ne
 80109fe:	2301      	movne	r3, #1
 8010a00:	2300      	moveq	r3, #0
 8010a02:	b2da      	uxtb	r2, r3
 8010a04:	4b07      	ldr	r3, [pc, #28]	; (8010a24 <LmHandlerConfigure+0x220>)
 8010a06:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 8010a08:	2014      	movs	r0, #20
 8010a0a:	f000 fad9 	bl	8010fc0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8010a0e:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <LmHandlerConfigure+0x220>)
 8010a10:	79db      	ldrb	r3, [r3, #7]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f006 fafc 	bl	8017010 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 8010a18:	2300      	movs	r3, #0
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3748      	adds	r7, #72	; 0x48
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	20000794 	.word	0x20000794
 8010a28:	200007dc 	.word	0x200007dc
 8010a2c:	08021794 	.word	0x08021794
 8010a30:	200007c0 	.word	0x200007c0
 8010a34:	200007b0 	.word	0x200007b0
 8010a38:	200008d2 	.word	0x200008d2
 8010a3c:	200007ac 	.word	0x200007ac
 8010a40:	20000758 	.word	0x20000758
 8010a44:	20000760 	.word	0x20000760

08010a48 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 8010a4e:	f002 fe4d 	bl	80136ec <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 8010a52:	f000 fd8f 	bl	8011574 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 8010a56:	f000 fd63 	bl	8011520 <LmHandlerPackageIsTxPending>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d117      	bne.n	8010a90 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 8010a60:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <LmHandlerProcess+0x50>)
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d014      	beq.n	8010a92 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 8010a68:	2300      	movs	r3, #0
 8010a6a:	703b      	strb	r3, [r7, #0]
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	707b      	strb	r3, [r7, #1]
 8010a70:	2300      	movs	r3, #0
 8010a72:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8010a74:	4b09      	ldr	r3, [pc, #36]	; (8010a9c <LmHandlerProcess+0x54>)
 8010a76:	78d9      	ldrb	r1, [r3, #3]
 8010a78:	463b      	mov	r3, r7
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f000 f8d7 	bl	8010c30 <LmHandlerSend>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d104      	bne.n	8010a92 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 8010a88:	4b03      	ldr	r3, [pc, #12]	; (8010a98 <LmHandlerProcess+0x50>)
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	701a      	strb	r2, [r3, #0]
 8010a8e:	e000      	b.n	8010a92 <LmHandlerProcess+0x4a>
        return;
 8010a90:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	200007dc 	.word	0x200007dc
 8010a9c:	20000794 	.word	0x20000794

08010aa0 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 8010aa4:	4b02      	ldr	r3, [pc, #8]	; (8010ab0 <LmHandlerGetDutyCycleWaitTime+0x10>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bc80      	pop	{r7}
 8010aae:	4770      	bx	lr
 8010ab0:	200007d8 	.word	0x200007d8

08010ab4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b092      	sub	sp, #72	; 0x48
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	4603      	mov	r3, r0
 8010abc:	460a      	mov	r2, r1
 8010abe:	71fb      	strb	r3, [r7, #7]
 8010ac0:	4613      	mov	r3, r2
 8010ac2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8010aca:	4b46      	ldr	r3, [pc, #280]	; (8010be4 <LmHandlerJoin+0x130>)
 8010acc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8010ad6:	4b43      	ldr	r3, [pc, #268]	; (8010be4 <LmHandlerJoin+0x130>)
 8010ad8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010adc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 8010ae0:	79fb      	ldrb	r3, [r7, #7]
 8010ae2:	2b02      	cmp	r3, #2
 8010ae4:	d10b      	bne.n	8010afe <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010ae6:	2302      	movs	r3, #2
 8010ae8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8010aec:	4b3e      	ldr	r3, [pc, #248]	; (8010be8 <LmHandlerJoin+0x134>)
 8010aee:	2202      	movs	r2, #2
 8010af0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8010af2:	4a3d      	ldr	r2, [pc, #244]	; (8010be8 <LmHandlerJoin+0x134>)
 8010af4:	79bb      	ldrb	r3, [r7, #6]
 8010af6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 8010af8:	f005 f93a 	bl	8015d70 <LoRaMacStart>
 8010afc:	e05c      	b.n	8010bb8 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8010afe:	2301      	movs	r3, #1
 8010b00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8010b04:	4b38      	ldr	r3, [pc, #224]	; (8010be8 <LmHandlerJoin+0x134>)
 8010b06:	2201      	movs	r2, #1
 8010b08:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8010b0a:	4b36      	ldr	r3, [pc, #216]	; (8010be4 <LmHandlerJoin+0x130>)
 8010b0c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010b10:	4b35      	ldr	r3, [pc, #212]	; (8010be8 <LmHandlerJoin+0x134>)
 8010b12:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8010b14:	4b33      	ldr	r3, [pc, #204]	; (8010be4 <LmHandlerJoin+0x130>)
 8010b16:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8010b1a:	4b33      	ldr	r3, [pc, #204]	; (8010be8 <LmHandlerJoin+0x134>)
 8010b1c:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010b1e:	4b32      	ldr	r3, [pc, #200]	; (8010be8 <LmHandlerJoin+0x134>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8010b24:	4a30      	ldr	r2, [pc, #192]	; (8010be8 <LmHandlerJoin+0x134>)
 8010b26:	79bb      	ldrb	r3, [r7, #6]
 8010b28:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 8010b2a:	4b30      	ldr	r3, [pc, #192]	; (8010bec <LmHandlerJoin+0x138>)
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	f083 0301 	eor.w	r3, r3, #1
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d034      	beq.n	8010ba2 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8010b38:	231f      	movs	r3, #31
 8010b3a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8010b3c:	4b29      	ldr	r3, [pc, #164]	; (8010be4 <LmHandlerJoin+0x130>)
 8010b3e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010b42:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b44:	f107 030c 	add.w	r3, r7, #12
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f005 fbe7 	bl	801631c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 8010b4e:	2320      	movs	r3, #32
 8010b50:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8010b52:	4b24      	ldr	r3, [pc, #144]	; (8010be4 <LmHandlerJoin+0x130>)
 8010b54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010b58:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b5a:	f107 030c 	add.w	r3, r7, #12
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f005 fbdc 	bl	801631c <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8010b64:	2322      	movs	r3, #34	; 0x22
 8010b66:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8010b68:	4b1e      	ldr	r3, [pc, #120]	; (8010be4 <LmHandlerJoin+0x130>)
 8010b6a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010b6e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b70:	f107 030c 	add.w	r3, r7, #12
 8010b74:	4618      	mov	r0, r3
 8010b76:	f005 fbd1 	bl	801631c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010b7a:	2321      	movs	r3, #33	; 0x21
 8010b7c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8010b7e:	4b19      	ldr	r3, [pc, #100]	; (8010be4 <LmHandlerJoin+0x130>)
 8010b80:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010b84:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b86:	f107 030c 	add.w	r3, r7, #12
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f005 fbc6 	bl	801631c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8010b90:	2329      	movs	r3, #41	; 0x29
 8010b92:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8010b94:	4b16      	ldr	r3, [pc, #88]	; (8010bf0 <LmHandlerJoin+0x13c>)
 8010b96:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b98:	f107 030c 	add.w	r3, r7, #12
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f005 fbbd 	bl	801631c <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 8010ba2:	f005 f8e5 	bl	8015d70 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8010baa:	2301      	movs	r3, #1
 8010bac:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8010bae:	f107 030c 	add.w	r3, r7, #12
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f005 fbb2 	bl	801631c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8010bb8:	4b0c      	ldr	r3, [pc, #48]	; (8010bec <LmHandlerJoin+0x138>)
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	f083 0301 	eor.w	r3, r3, #1
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d102      	bne.n	8010bcc <LmHandlerJoin+0x118>
 8010bc6:	79bb      	ldrb	r3, [r7, #6]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d004      	beq.n	8010bd6 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 8010bcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f005 ff4d 	bl	8016a70 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bd8:	4a06      	ldr	r2, [pc, #24]	; (8010bf4 <LmHandlerJoin+0x140>)
 8010bda:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 8010bdc:	bf00      	nop
 8010bde:	3748      	adds	r7, #72	; 0x48
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	20000794 	.word	0x20000794
 8010be8:	20000094 	.word	0x20000094
 8010bec:	200008d2 	.word	0x200008d2
 8010bf0:	01000400 	.word	0x01000400
 8010bf4:	200007d8 	.word	0x200007d8

08010bf8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08c      	sub	sp, #48	; 0x30
 8010bfc:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010bfe:	2301      	movs	r3, #1
 8010c00:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8010c02:	1d3b      	adds	r3, r7, #4
 8010c04:	4618      	mov	r0, r3
 8010c06:	f005 f9b1 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 8010c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d106      	bne.n	8010c26 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010c18:	7a3b      	ldrb	r3, [r7, #8]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e002      	b.n	8010c28 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8010c22:	2301      	movs	r3, #1
 8010c24:	e000      	b.n	8010c28 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8010c26:	2300      	movs	r3, #0
    }
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3730      	adds	r7, #48	; 0x30
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b08a      	sub	sp, #40	; 0x28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	460b      	mov	r3, r1
 8010c3a:	70fb      	strb	r3, [r7, #3]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8010c40:	23ff      	movs	r3, #255	; 0xff
 8010c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 8010c46:	f002 faab 	bl	80131a0 <LoRaMacIsBusy>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d002      	beq.n	8010c56 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010c50:	f06f 0301 	mvn.w	r3, #1
 8010c54:	e0ab      	b.n	8010dae <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 8010c56:	f002 facb 	bl	80131f0 <LoRaMacIsStopped>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d002      	beq.n	8010c66 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010c60:	f06f 0302 	mvn.w	r3, #2
 8010c64:	e0a3      	b.n	8010dae <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8010c66:	f7ff ffc7 	bl	8010bf8 <LmHandlerJoinStatus>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d00a      	beq.n	8010c86 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8010c70:	4b51      	ldr	r3, [pc, #324]	; (8010db8 <LmHandlerSend+0x188>)
 8010c72:	79db      	ldrb	r3, [r3, #7]
 8010c74:	4a50      	ldr	r2, [pc, #320]	; (8010db8 <LmHandlerSend+0x188>)
 8010c76:	7a12      	ldrb	r2, [r2, #8]
 8010c78:	4611      	mov	r1, r2
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7ff ff1a 	bl	8010ab4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010c80:	f06f 0302 	mvn.w	r3, #2
 8010c84:	e093      	b.n	8010dae <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 8010c86:	4a4d      	ldr	r2, [pc, #308]	; (8010dbc <LmHandlerSend+0x18c>)
 8010c88:	78fb      	ldrb	r3, [r7, #3]
 8010c8a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8010c8c:	78fb      	ldrb	r3, [r7, #3]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	bf14      	ite	ne
 8010c92:	2301      	movne	r3, #1
 8010c94:	2300      	moveq	r3, #0
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8010c9a:	4b49      	ldr	r3, [pc, #292]	; (8010dc0 <LmHandlerSend+0x190>)
 8010c9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010ca0:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	785b      	ldrb	r3, [r3, #1]
 8010ca6:	f107 020c 	add.w	r2, r7, #12
 8010caa:	4611      	mov	r1, r2
 8010cac:	4618      	mov	r0, r3
 8010cae:	f005 f8cd 	bl	8015e4c <LoRaMacQueryTxPossible>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d009      	beq.n	8010ccc <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8010cc4:	23f9      	movs	r3, #249	; 0xf9
 8010cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010cca:	e009      	b.n	8010ce0 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	785b      	ldrb	r3, [r3, #1]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8010ce0:	4b36      	ldr	r3, [pc, #216]	; (8010dbc <LmHandlerSend+0x18c>)
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	3310      	adds	r3, #16
 8010ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cea:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8010cee:	4b34      	ldr	r3, [pc, #208]	; (8010dc0 <LmHandlerSend+0x190>)
 8010cf0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010cf4:	4b31      	ldr	r3, [pc, #196]	; (8010dbc <LmHandlerSend+0x18c>)
 8010cf6:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8010cf8:	78ba      	ldrb	r2, [r7, #2]
 8010cfa:	f107 0310 	add.w	r3, r7, #16
 8010cfe:	4611      	mov	r1, r2
 8010d00:	4618      	mov	r0, r3
 8010d02:	f006 f84d 	bl	8016da0 <LoRaMacMcpsRequest>
 8010d06:	4603      	mov	r3, r0
 8010d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	4a2d      	ldr	r2, [pc, #180]	; (8010dc4 <LmHandlerSend+0x194>)
 8010d10:	6013      	str	r3, [r2, #0]

    switch( status )
 8010d12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d16:	2b11      	cmp	r3, #17
 8010d18:	d842      	bhi.n	8010da0 <LmHandlerSend+0x170>
 8010d1a:	a201      	add	r2, pc, #4	; (adr r2, 8010d20 <LmHandlerSend+0xf0>)
 8010d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d20:	08010d69 	.word	0x08010d69
 8010d24:	08010d81 	.word	0x08010d81
 8010d28:	08010da1 	.word	0x08010da1
 8010d2c:	08010da1 	.word	0x08010da1
 8010d30:	08010da1 	.word	0x08010da1
 8010d34:	08010da1 	.word	0x08010da1
 8010d38:	08010da1 	.word	0x08010da1
 8010d3c:	08010d89 	.word	0x08010d89
 8010d40:	08010da1 	.word	0x08010da1
 8010d44:	08010da1 	.word	0x08010da1
 8010d48:	08010da1 	.word	0x08010da1
 8010d4c:	08010d99 	.word	0x08010d99
 8010d50:	08010da1 	.word	0x08010da1
 8010d54:	08010da1 	.word	0x08010da1
 8010d58:	08010d81 	.word	0x08010d81
 8010d5c:	08010d81 	.word	0x08010d81
 8010d60:	08010d81 	.word	0x08010d81
 8010d64:	08010d91 	.word	0x08010d91
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 8010d68:	4b17      	ldr	r3, [pc, #92]	; (8010dc8 <LmHandlerSend+0x198>)
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8010d6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d72:	f113 0f07 	cmn.w	r3, #7
 8010d76:	d017      	beq.n	8010da8 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8010d7e:	e013      	b.n	8010da8 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8010d80:	23fe      	movs	r3, #254	; 0xfe
 8010d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010d86:	e010      	b.n	8010daa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010d88:	23fd      	movs	r3, #253	; 0xfd
 8010d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010d8e:	e00c      	b.n	8010daa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8010d90:	23fb      	movs	r3, #251	; 0xfb
 8010d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010d96:	e008      	b.n	8010daa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8010d98:	23fa      	movs	r3, #250	; 0xfa
 8010d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010d9e:	e004      	b.n	8010daa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010da0:	23ff      	movs	r3, #255	; 0xff
 8010da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010da6:	e000      	b.n	8010daa <LmHandlerSend+0x17a>
            break;
 8010da8:	bf00      	nop
    }

    return lmhStatus;
 8010daa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3728      	adds	r7, #40	; 0x28
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	20000094 	.word	0x20000094
 8010dbc:	200000a0 	.word	0x200000a0
 8010dc0:	20000794 	.word	0x20000794
 8010dc4:	200007d8 	.word	0x200007d8
 8010dc8:	200007dc 	.word	0x200007dc

08010dcc <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8010dd2:	2309      	movs	r3, #9
 8010dd4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010dd6:	463b      	mov	r3, r7
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f005 fe49 	bl	8016a70 <LoRaMacMlmeRequest>
 8010dde:	4603      	mov	r3, r0
 8010de0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	4a06      	ldr	r2, [pc, #24]	; (8010e00 <LmHandlerDeviceTimeReq+0x34>)
 8010de6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010de8:	7dfb      	ldrb	r3, [r7, #23]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d101      	bne.n	8010df2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010dee:	2300      	movs	r3, #0
 8010df0:	e001      	b.n	8010df6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010df2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	200007d8 	.word	0x200007d8

08010e04 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8010e0e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	370c      	adds	r7, #12
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bc80      	pop	{r7}
 8010e1a:	4770      	bx	lr

08010e1c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b08e      	sub	sp, #56	; 0x38
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	4603      	mov	r3, r0
 8010e24:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8010e26:	2300      	movs	r3, #0
 8010e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 8010e2c:	f002 f9b8 	bl	80131a0 <LoRaMacIsBusy>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010e36:	f06f 0301 	mvn.w	r3, #1
 8010e3a:	e073      	b.n	8010f24 <LmHandlerRequestClass+0x108>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8010e3c:	f7ff fedc 	bl	8010bf8 <LmHandlerJoinStatus>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d002      	beq.n	8010e4c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010e46:	f06f 0302 	mvn.w	r3, #2
 8010e4a:	e06b      	b.n	8010f24 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010e50:	f107 030c 	add.w	r3, r7, #12
 8010e54:	4618      	mov	r0, r3
 8010e56:	f005 f889 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d002      	beq.n	8010e66 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e60:	f04f 33ff 	mov.w	r3, #4294967295
 8010e64:	e05e      	b.n	8010f24 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 8010e66:	7c3b      	ldrb	r3, [r7, #16]
 8010e68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 8010e6c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010e70:	79fb      	ldrb	r3, [r7, #7]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d04d      	beq.n	8010f12 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	2b02      	cmp	r3, #2
 8010e7a:	d028      	beq.n	8010ece <LmHandlerRequestClass+0xb2>
 8010e7c:	2b02      	cmp	r3, #2
 8010e7e:	dc4a      	bgt.n	8010f16 <LmHandlerRequestClass+0xfa>
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <LmHandlerRequestClass+0x6e>
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d01e      	beq.n	8010ec6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 8010e88:	e045      	b.n	8010f16 <LmHandlerRequestClass+0xfa>
                    if( currentClass != CLASS_A )
 8010e8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d043      	beq.n	8010f1a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 8010e92:	79fb      	ldrb	r3, [r7, #7]
 8010e94:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010e96:	f107 030c 	add.w	r3, r7, #12
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f005 fa3e 	bl	801631c <LoRaMacMibSetRequestConfirm>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10b      	bne.n	8010ebe <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010ea6:	4b21      	ldr	r3, [pc, #132]	; (8010f2c <LmHandlerRequestClass+0x110>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d034      	beq.n	8010f1a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010eb0:	4b1e      	ldr	r3, [pc, #120]	; (8010f2c <LmHandlerRequestClass+0x110>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eb6:	79fa      	ldrb	r2, [r7, #7]
 8010eb8:	4610      	mov	r0, r2
 8010eba:	4798      	blx	r3
                break;
 8010ebc:	e02d      	b.n	8010f1a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010ebe:	23ff      	movs	r3, #255	; 0xff
 8010ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010ec4:	e029      	b.n	8010f1a <LmHandlerRequestClass+0xfe>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8010ec6:	23ff      	movs	r3, #255	; 0xff
 8010ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010ecc:	e028      	b.n	8010f20 <LmHandlerRequestClass+0x104>
                    if( currentClass != CLASS_A )
 8010ece:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8010ed6:	23ff      	movs	r3, #255	; 0xff
 8010ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010edc:	e01f      	b.n	8010f1e <LmHandlerRequestClass+0x102>
                        mibReq.Param.Class = newClass;
 8010ede:	79fb      	ldrb	r3, [r7, #7]
 8010ee0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010ee2:	f107 030c 	add.w	r3, r7, #12
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f005 fa18 	bl	801631c <LoRaMacMibSetRequestConfirm>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d10b      	bne.n	8010f0a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010ef2:	4b0e      	ldr	r3, [pc, #56]	; (8010f2c <LmHandlerRequestClass+0x110>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d010      	beq.n	8010f1e <LmHandlerRequestClass+0x102>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010efc:	4b0b      	ldr	r3, [pc, #44]	; (8010f2c <LmHandlerRequestClass+0x110>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f02:	79fa      	ldrb	r2, [r7, #7]
 8010f04:	4610      	mov	r0, r2
 8010f06:	4798      	blx	r3
                break;
 8010f08:	e009      	b.n	8010f1e <LmHandlerRequestClass+0x102>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010f0a:	23ff      	movs	r3, #255	; 0xff
 8010f0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010f10:	e005      	b.n	8010f1e <LmHandlerRequestClass+0x102>
        }
    }
 8010f12:	bf00      	nop
 8010f14:	e004      	b.n	8010f20 <LmHandlerRequestClass+0x104>
                break;
 8010f16:	bf00      	nop
 8010f18:	e002      	b.n	8010f20 <LmHandlerRequestClass+0x104>
                break;
 8010f1a:	bf00      	nop
 8010f1c:	e000      	b.n	8010f20 <LmHandlerRequestClass+0x104>
                break;
 8010f1e:	bf00      	nop
    return errorStatus;
 8010f20:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3738      	adds	r7, #56	; 0x38
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	200007ac 	.word	0x200007ac

08010f30 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b08c      	sub	sp, #48	; 0x30
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d102      	bne.n	8010f44 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f42:	e010      	b.n	8010f66 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010f44:	2300      	movs	r3, #0
 8010f46:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010f48:	f107 0308 	add.w	r3, r7, #8
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f005 f80d 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
 8010f52:	4603      	mov	r3, r0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d002      	beq.n	8010f5e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010f58:	f04f 33ff 	mov.w	r3, #4294967295
 8010f5c:	e003      	b.n	8010f66 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8010f5e:	7b3a      	ldrb	r2, [r7, #12]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010f64:	2300      	movs	r3, #0
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3730      	adds	r7, #48	; 0x30
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
	...

08010f70 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b08c      	sub	sp, #48	; 0x30
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d102      	bne.n	8010f84 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f82:	e016      	b.n	8010fb2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8010f84:	2320      	movs	r3, #32
 8010f86:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8010f88:	f107 0308 	add.w	r3, r7, #8
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f004 ffed 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010f98:	f04f 33ff 	mov.w	r3, #4294967295
 8010f9c:	e009      	b.n	8010fb2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 8010f9e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f993 2000 	ldrsb.w	r2, [r3]
 8010fac:	4b03      	ldr	r3, [pc, #12]	; (8010fbc <LmHandlerGetTxDatarate+0x4c>)
 8010fae:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8010fb0:	2300      	movs	r3, #0
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3730      	adds	r7, #48	; 0x30
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	20000794 	.word	0x20000794

08010fc0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b08c      	sub	sp, #48	; 0x30
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8010fc8:	2323      	movs	r3, #35	; 0x23
 8010fca:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010fd0:	f107 0308 	add.w	r3, r7, #8
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f005 f9a1 	bl	801631c <LoRaMacMibSetRequestConfirm>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d002      	beq.n	8010fe6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8010fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe4:	e000      	b.n	8010fe8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 8010fe6:	2300      	movs	r3, #0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3730      	adds	r7, #48	; 0x30
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8010ff8:	4b18      	ldr	r3, [pc, #96]	; (801105c <McpsConfirm+0x6c>)
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	785a      	ldrb	r2, [r3, #1]
 8011002:	4b16      	ldr	r3, [pc, #88]	; (801105c <McpsConfirm+0x6c>)
 8011004:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	789b      	ldrb	r3, [r3, #2]
 801100a:	b25a      	sxtb	r2, r3
 801100c:	4b13      	ldr	r3, [pc, #76]	; (801105c <McpsConfirm+0x6c>)
 801100e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	4a11      	ldr	r2, [pc, #68]	; (801105c <McpsConfirm+0x6c>)
 8011016:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 801101e:	4b0f      	ldr	r3, [pc, #60]	; (801105c <McpsConfirm+0x6c>)
 8011020:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	691b      	ldr	r3, [r3, #16]
 8011026:	b2da      	uxtb	r2, r3
 8011028:	4b0c      	ldr	r3, [pc, #48]	; (801105c <McpsConfirm+0x6c>)
 801102a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	791b      	ldrb	r3, [r3, #4]
 8011030:	461a      	mov	r2, r3
 8011032:	4b0a      	ldr	r3, [pc, #40]	; (801105c <McpsConfirm+0x6c>)
 8011034:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 8011036:	4b0a      	ldr	r3, [pc, #40]	; (8011060 <McpsConfirm+0x70>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801103c:	2b00      	cmp	r3, #0
 801103e:	d004      	beq.n	801104a <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8011040:	4b07      	ldr	r3, [pc, #28]	; (8011060 <McpsConfirm+0x70>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011046:	4805      	ldr	r0, [pc, #20]	; (801105c <McpsConfirm+0x6c>)
 8011048:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 801104a:	6879      	ldr	r1, [r7, #4]
 801104c:	2000      	movs	r0, #0
 801104e:	f000 f9e9 	bl	8011424 <LmHandlerPackagesNotify>
}
 8011052:	bf00      	nop
 8011054:	3708      	adds	r7, #8
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
 801105a:	bf00      	nop
 801105c:	200000a0 	.word	0x200000a0
 8011060:	200007ac 	.word	0x200007ac

08011064 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 801106e:	2300      	movs	r3, #0
 8011070:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 8011072:	4b2d      	ldr	r3, [pc, #180]	; (8011128 <McpsIndication+0xc4>)
 8011074:	2201      	movs	r2, #1
 8011076:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	785a      	ldrb	r2, [r3, #1]
 801107c:	4b2a      	ldr	r3, [pc, #168]	; (8011128 <McpsIndication+0xc4>)
 801107e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8011080:	4b29      	ldr	r3, [pc, #164]	; (8011128 <McpsIndication+0xc4>)
 8011082:	785b      	ldrb	r3, [r3, #1]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d14b      	bne.n	8011120 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	791b      	ldrb	r3, [r3, #4]
 801108c:	b25a      	sxtb	r2, r3
 801108e:	4b26      	ldr	r3, [pc, #152]	; (8011128 <McpsIndication+0xc4>)
 8011090:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011098:	b25a      	sxtb	r2, r3
 801109a:	4b23      	ldr	r3, [pc, #140]	; (8011128 <McpsIndication+0xc4>)
 801109c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80110a4:	4b20      	ldr	r3, [pc, #128]	; (8011128 <McpsIndication+0xc4>)
 80110a6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	78da      	ldrb	r2, [r3, #3]
 80110ac:	4b1e      	ldr	r3, [pc, #120]	; (8011128 <McpsIndication+0xc4>)
 80110ae:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	691b      	ldr	r3, [r3, #16]
 80110b4:	4a1c      	ldr	r2, [pc, #112]	; (8011128 <McpsIndication+0xc4>)
 80110b6:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	78db      	ldrb	r3, [r3, #3]
 80110bc:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	7b1b      	ldrb	r3, [r3, #12]
 80110c2:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 80110ca:	4b18      	ldr	r3, [pc, #96]	; (801112c <McpsIndication+0xc8>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d007      	beq.n	80110e4 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80110d4:	4b15      	ldr	r3, [pc, #84]	; (801112c <McpsIndication+0xc8>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110da:	f107 0210 	add.w	r2, r7, #16
 80110de:	4912      	ldr	r1, [pc, #72]	; (8011128 <McpsIndication+0xc4>)
 80110e0:	4610      	mov	r0, r2
 80110e2:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 80110e4:	4b11      	ldr	r3, [pc, #68]	; (801112c <McpsIndication+0xc8>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d007      	beq.n	80110fe <McpsIndication+0x9a>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	7e1b      	ldrb	r3, [r3, #24]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d003      	beq.n	80110fe <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80110f6:	4b0d      	ldr	r3, [pc, #52]	; (801112c <McpsIndication+0xc8>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110fc:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80110fe:	6879      	ldr	r1, [r7, #4]
 8011100:	2001      	movs	r0, #1
 8011102:	f000 f98f 	bl	8011424 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 8011106:	f107 030f 	add.w	r3, r7, #15
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff ff10 	bl	8010f30 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	795b      	ldrb	r3, [r3, #5]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d004      	beq.n	8011122 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 8011118:	4b05      	ldr	r3, [pc, #20]	; (8011130 <McpsIndication+0xcc>)
 801111a:	2201      	movs	r2, #1
 801111c:	701a      	strb	r2, [r3, #0]
 801111e:	e000      	b.n	8011122 <McpsIndication+0xbe>
        return;
 8011120:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 8011122:	3718      	adds	r7, #24
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	200000bc 	.word	0x200000bc
 801112c:	200007ac 	.word	0x200007ac
 8011130:	200007dc 	.word	0x200007dc

08011134 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b08c      	sub	sp, #48	; 0x30
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 801113c:	4b49      	ldr	r3, [pc, #292]	; (8011264 <MlmeConfirm+0x130>)
 801113e:	2200      	movs	r2, #0
 8011140:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	785a      	ldrb	r2, [r3, #1]
 8011146:	4b47      	ldr	r3, [pc, #284]	; (8011264 <MlmeConfirm+0x130>)
 8011148:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 801114a:	4b47      	ldr	r3, [pc, #284]	; (8011268 <MlmeConfirm+0x134>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011150:	2b00      	cmp	r3, #0
 8011152:	d004      	beq.n	801115e <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8011154:	4b44      	ldr	r3, [pc, #272]	; (8011268 <MlmeConfirm+0x134>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801115a:	4842      	ldr	r0, [pc, #264]	; (8011264 <MlmeConfirm+0x130>)
 801115c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 801115e:	6879      	ldr	r1, [r7, #4]
 8011160:	2002      	movs	r0, #2
 8011162:	f000 f95f 	bl	8011424 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	3b01      	subs	r3, #1
 801116c:	2b0b      	cmp	r3, #11
 801116e:	d872      	bhi.n	8011256 <MlmeConfirm+0x122>
 8011170:	a201      	add	r2, pc, #4	; (adr r2, 8011178 <MlmeConfirm+0x44>)
 8011172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011176:	bf00      	nop
 8011178:	080111a9 	.word	0x080111a9
 801117c:	08011257 	.word	0x08011257
 8011180:	08011257 	.word	0x08011257
 8011184:	08011257 	.word	0x08011257
 8011188:	08011225 	.word	0x08011225
 801118c:	08011257 	.word	0x08011257
 8011190:	08011257 	.word	0x08011257
 8011194:	08011257 	.word	0x08011257
 8011198:	08011257 	.word	0x08011257
 801119c:	08011257 	.word	0x08011257
 80111a0:	0801123d 	.word	0x0801123d
 80111a4:	08011257 	.word	0x08011257
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 80111a8:	2306      	movs	r3, #6
 80111aa:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80111ac:	f107 0308 	add.w	r3, r7, #8
 80111b0:	4618      	mov	r0, r3
 80111b2:	f004 fedb 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80111b6:	4b2d      	ldr	r3, [pc, #180]	; (801126c <MlmeConfirm+0x138>)
 80111b8:	79db      	ldrb	r3, [r3, #7]
 80111ba:	68fa      	ldr	r2, [r7, #12]
 80111bc:	4611      	mov	r1, r2
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff fa76 	bl	80106b0 <SecureElementSetDevAddr>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d102      	bne.n	80111d0 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	4a28      	ldr	r2, [pc, #160]	; (8011270 <MlmeConfirm+0x13c>)
 80111ce:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80111d0:	4828      	ldr	r0, [pc, #160]	; (8011274 <MlmeConfirm+0x140>)
 80111d2:	f7ff fecd 	bl	8010f70 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80111d6:	4828      	ldr	r0, [pc, #160]	; (8011278 <MlmeConfirm+0x144>)
 80111d8:	f000 fa76 	bl	80116c8 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80111dc:	4b21      	ldr	r3, [pc, #132]	; (8011264 <MlmeConfirm+0x130>)
 80111de:	785b      	ldrb	r3, [r3, #1]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d108      	bne.n	80111f6 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80111e4:	4b21      	ldr	r3, [pc, #132]	; (801126c <MlmeConfirm+0x138>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80111ea:	4b24      	ldr	r3, [pc, #144]	; (801127c <MlmeConfirm+0x148>)
 80111ec:	785b      	ldrb	r3, [r3, #1]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7ff fe14 	bl	8010e1c <LmHandlerRequestClass>
 80111f4:	e002      	b.n	80111fc <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80111f6:	4b1d      	ldr	r3, [pc, #116]	; (801126c <MlmeConfirm+0x138>)
 80111f8:	22ff      	movs	r2, #255	; 0xff
 80111fa:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80111fc:	4b1a      	ldr	r3, [pc, #104]	; (8011268 <MlmeConfirm+0x134>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011202:	2b00      	cmp	r3, #0
 8011204:	d004      	beq.n	8011210 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8011206:	4b18      	ldr	r3, [pc, #96]	; (8011268 <MlmeConfirm+0x134>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801120c:	4817      	ldr	r0, [pc, #92]	; (801126c <MlmeConfirm+0x138>)
 801120e:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8011210:	4b14      	ldr	r3, [pc, #80]	; (8011264 <MlmeConfirm+0x130>)
 8011212:	785b      	ldrb	r3, [r3, #1]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d120      	bne.n	801125a <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8011218:	4b14      	ldr	r3, [pc, #80]	; (801126c <MlmeConfirm+0x138>)
 801121a:	79db      	ldrb	r3, [r3, #7]
 801121c:	4618      	mov	r0, r3
 801121e:	f7fe ffef 	bl	8010200 <SecureElementPrintSessionKeys>
                }
            }
            break;
 8011222:	e01a      	b.n	801125a <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8011224:	4b16      	ldr	r3, [pc, #88]	; (8011280 <MlmeConfirm+0x14c>)
 8011226:	2201      	movs	r2, #1
 8011228:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	7a1a      	ldrb	r2, [r3, #8]
 801122e:	4b14      	ldr	r3, [pc, #80]	; (8011280 <MlmeConfirm+0x14c>)
 8011230:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	7a5a      	ldrb	r2, [r3, #9]
 8011236:	4b12      	ldr	r3, [pc, #72]	; (8011280 <MlmeConfirm+0x14c>)
 8011238:	74da      	strb	r2, [r3, #19]
            }
            break;
 801123a:	e00f      	b.n	801125c <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	785b      	ldrb	r3, [r3, #1]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d105      	bne.n	8011250 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8011244:	4b0d      	ldr	r3, [pc, #52]	; (801127c <MlmeConfirm+0x148>)
 8011246:	7c1b      	ldrb	r3, [r3, #16]
 8011248:	4618      	mov	r0, r3
 801124a:	f7ff fddb 	bl	8010e04 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801124e:	e005      	b.n	801125c <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 8011250:	f7ff fdbc 	bl	8010dcc <LmHandlerDeviceTimeReq>
            break;
 8011254:	e002      	b.n	801125c <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8011256:	bf00      	nop
 8011258:	e000      	b.n	801125c <MlmeConfirm+0x128>
            break;
 801125a:	bf00      	nop
    }
}
 801125c:	bf00      	nop
 801125e:	3730      	adds	r7, #48	; 0x30
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	200000a0 	.word	0x200000a0
 8011268:	200007ac 	.word	0x200007ac
 801126c:	20000094 	.word	0x20000094
 8011270:	20000758 	.word	0x20000758
 8011274:	20000098 	.word	0x20000098
 8011278:	20000099 	.word	0x20000099
 801127c:	20000794 	.word	0x20000794
 8011280:	200000bc 	.word	0x200000bc

08011284 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801128e:	4b20      	ldr	r3, [pc, #128]	; (8011310 <MlmeIndication+0x8c>)
 8011290:	2200      	movs	r2, #0
 8011292:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	785a      	ldrb	r2, [r3, #1]
 8011298:	4b1d      	ldr	r3, [pc, #116]	; (8011310 <MlmeIndication+0x8c>)
 801129a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	789b      	ldrb	r3, [r3, #2]
 80112a0:	b25a      	sxtb	r2, r3
 80112a2:	4b1b      	ldr	r3, [pc, #108]	; (8011310 <MlmeIndication+0x8c>)
 80112a4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112ac:	b25a      	sxtb	r2, r3
 80112ae:	4b18      	ldr	r3, [pc, #96]	; (8011310 <MlmeIndication+0x8c>)
 80112b0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80112b8:	4b15      	ldr	r3, [pc, #84]	; (8011310 <MlmeIndication+0x8c>)
 80112ba:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	78da      	ldrb	r2, [r3, #3]
 80112c0:	4b13      	ldr	r3, [pc, #76]	; (8011310 <MlmeIndication+0x8c>)
 80112c2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	4a11      	ldr	r2, [pc, #68]	; (8011310 <MlmeIndication+0x8c>)
 80112ca:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80112cc:	4b11      	ldr	r3, [pc, #68]	; (8011314 <MlmeIndication+0x90>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00d      	beq.n	80112f2 <MlmeIndication+0x6e>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	2b0a      	cmp	r3, #10
 80112dc:	d009      	beq.n	80112f2 <MlmeIndication+0x6e>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	2b0e      	cmp	r3, #14
 80112e4:	d005      	beq.n	80112f2 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80112e6:	4b0b      	ldr	r3, [pc, #44]	; (8011314 <MlmeIndication+0x90>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ec:	4908      	ldr	r1, [pc, #32]	; (8011310 <MlmeIndication+0x8c>)
 80112ee:	2000      	movs	r0, #0
 80112f0:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80112f2:	6879      	ldr	r1, [r7, #4]
 80112f4:	2003      	movs	r0, #3
 80112f6:	f000 f895 	bl	8011424 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	2b0a      	cmp	r3, #10
 8011300:	d001      	beq.n	8011306 <MlmeIndication+0x82>
 8011302:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8011304:	e000      	b.n	8011308 <MlmeIndication+0x84>
            break;
 8011306:	bf00      	nop
    }
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	200000bc 	.word	0x200000bc
 8011314:	200007ac 	.word	0x200007ac

08011318 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	6039      	str	r1, [r7, #0]
 8011322:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8011324:	2300      	movs	r3, #0
 8011326:	60fb      	str	r3, [r7, #12]
    switch( id )
 8011328:	79fb      	ldrb	r3, [r7, #7]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d104      	bne.n	8011338 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 801132e:	f000 fa8d 	bl	801184c <LmhpCompliancePackageFactory>
 8011332:	4603      	mov	r3, r0
 8011334:	60fb      	str	r3, [r7, #12]
                break;
 8011336:	e00d      	b.n	8011354 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8011338:	f107 020c 	add.w	r2, r7, #12
 801133c:	79fb      	ldrb	r3, [r7, #7]
 801133e:	4611      	mov	r1, r2
 8011340:	4618      	mov	r0, r3
 8011342:	f000 ff75 	bl	8012230 <LmhpPackagesRegister>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d002      	beq.n	8011352 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 801134c:	f04f 33ff 	mov.w	r3, #4294967295
 8011350:	e03b      	b.n	80113ca <LmHandlerPackageRegister+0xb2>
                }
                break;
 8011352:	bf00      	nop
            }
    }
    if( package != NULL )
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d035      	beq.n	80113c6 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 801135a:	79fb      	ldrb	r3, [r7, #7]
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	491d      	ldr	r1, [pc, #116]	; (80113d4 <LmHandlerPackageRegister+0xbc>)
 8011360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8011364:	79fb      	ldrb	r3, [r7, #7]
 8011366:	4a1b      	ldr	r2, [pc, #108]	; (80113d4 <LmHandlerPackageRegister+0xbc>)
 8011368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801136c:	4a1a      	ldr	r2, [pc, #104]	; (80113d8 <LmHandlerPackageRegister+0xc0>)
 801136e:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8011370:	4b1a      	ldr	r3, [pc, #104]	; (80113dc <LmHandlerPackageRegister+0xc4>)
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	79fb      	ldrb	r3, [r7, #7]
 8011376:	4917      	ldr	r1, [pc, #92]	; (80113d4 <LmHandlerPackageRegister+0xbc>)
 8011378:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801137c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801137e:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8011380:	4b16      	ldr	r3, [pc, #88]	; (80113dc <LmHandlerPackageRegister+0xc4>)
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	79fb      	ldrb	r3, [r7, #7]
 8011386:	4913      	ldr	r1, [pc, #76]	; (80113d4 <LmHandlerPackageRegister+0xbc>)
 8011388:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801138c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801138e:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8011390:	79fb      	ldrb	r3, [r7, #7]
 8011392:	4a10      	ldr	r2, [pc, #64]	; (80113d4 <LmHandlerPackageRegister+0xbc>)
 8011394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011398:	4a11      	ldr	r2, [pc, #68]	; (80113e0 <LmHandlerPackageRegister+0xc8>)
 801139a:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 801139c:	4b0f      	ldr	r3, [pc, #60]	; (80113dc <LmHandlerPackageRegister+0xc4>)
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	79fb      	ldrb	r3, [r7, #7]
 80113a2:	490c      	ldr	r1, [pc, #48]	; (80113d4 <LmHandlerPackageRegister+0xbc>)
 80113a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80113a8:	6992      	ldr	r2, [r2, #24]
 80113aa:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80113ac:	79fb      	ldrb	r3, [r7, #7]
 80113ae:	4a09      	ldr	r2, [pc, #36]	; (80113d4 <LmHandlerPackageRegister+0xbc>)
 80113b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	4a0b      	ldr	r2, [pc, #44]	; (80113e4 <LmHandlerPackageRegister+0xcc>)
 80113b8:	6851      	ldr	r1, [r2, #4]
 80113ba:	4a0a      	ldr	r2, [pc, #40]	; (80113e4 <LmHandlerPackageRegister+0xcc>)
 80113bc:	7852      	ldrb	r2, [r2, #1]
 80113be:	6838      	ldr	r0, [r7, #0]
 80113c0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80113c2:	2300      	movs	r3, #0
 80113c4:	e001      	b.n	80113ca <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80113c6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	20000780 	.word	0x20000780
 80113d8:	08010ab5 	.word	0x08010ab5
 80113dc:	200007ac 	.word	0x200007ac
 80113e0:	08010dcd 	.word	0x08010dcd
 80113e4:	200000d0 	.word	0x200000d0

080113e8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	4603      	mov	r3, r0
 80113f0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	2b04      	cmp	r3, #4
 80113f6:	d80e      	bhi.n	8011416 <LmHandlerPackageIsInitialized+0x2e>
 80113f8:	79fb      	ldrb	r3, [r7, #7]
 80113fa:	4a09      	ldr	r2, [pc, #36]	; (8011420 <LmHandlerPackageIsInitialized+0x38>)
 80113fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011400:	689b      	ldr	r3, [r3, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d007      	beq.n	8011416 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8011406:	79fb      	ldrb	r3, [r7, #7]
 8011408:	4a05      	ldr	r2, [pc, #20]	; (8011420 <LmHandlerPackageIsInitialized+0x38>)
 801140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801140e:	689b      	ldr	r3, [r3, #8]
 8011410:	4798      	blx	r3
 8011412:	4603      	mov	r3, r0
 8011414:	e000      	b.n	8011418 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 8011416:	2300      	movs	r3, #0
    }
}
 8011418:	4618      	mov	r0, r3
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	20000780 	.word	0x20000780

08011424 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b084      	sub	sp, #16
 8011428:	af00      	add	r7, sp, #0
 801142a:	4603      	mov	r3, r0
 801142c:	6039      	str	r1, [r7, #0]
 801142e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011430:	2300      	movs	r3, #0
 8011432:	73fb      	strb	r3, [r7, #15]
 8011434:	e069      	b.n	801150a <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 8011436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801143a:	4a38      	ldr	r2, [pc, #224]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 801143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d051      	beq.n	80114e8 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 8011444:	79fb      	ldrb	r3, [r7, #7]
 8011446:	2b03      	cmp	r3, #3
 8011448:	d850      	bhi.n	80114ec <LmHandlerPackagesNotify+0xc8>
 801144a:	a201      	add	r2, pc, #4	; (adr r2, 8011450 <LmHandlerPackagesNotify+0x2c>)
 801144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011450:	08011461 	.word	0x08011461
 8011454:	08011483 	.word	0x08011483
 8011458:	080114a5 	.word	0x080114a5
 801145c:	080114c7 	.word	0x080114c7
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8011460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011464:	4a2d      	ldr	r2, [pc, #180]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 8011466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801146a:	699b      	ldr	r3, [r3, #24]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d03f      	beq.n	80114f0 <LmHandlerPackagesNotify+0xcc>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8011470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011474:	4a29      	ldr	r2, [pc, #164]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 8011476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801147a:	699b      	ldr	r3, [r3, #24]
 801147c:	6838      	ldr	r0, [r7, #0]
 801147e:	4798      	blx	r3
                        }
                        break;
 8011480:	e036      	b.n	80114f0 <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8011482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011486:	4a25      	ldr	r2, [pc, #148]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 8011488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801148c:	69db      	ldr	r3, [r3, #28]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d030      	beq.n	80114f4 <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8011492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011496:	4a21      	ldr	r2, [pc, #132]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 8011498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801149c:	69db      	ldr	r3, [r3, #28]
 801149e:	6838      	ldr	r0, [r7, #0]
 80114a0:	4798      	blx	r3
                        }
                        break;
 80114a2:	e027      	b.n	80114f4 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80114a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114a8:	4a1c      	ldr	r2, [pc, #112]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 80114aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114ae:	6a1b      	ldr	r3, [r3, #32]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d021      	beq.n	80114f8 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80114b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114b8:	4a18      	ldr	r2, [pc, #96]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 80114ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114be:	6a1b      	ldr	r3, [r3, #32]
 80114c0:	6838      	ldr	r0, [r7, #0]
 80114c2:	4798      	blx	r3
                        }
                        break;
 80114c4:	e018      	b.n	80114f8 <LmHandlerPackagesNotify+0xd4>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80114c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114ca:	4a14      	ldr	r2, [pc, #80]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 80114cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d012      	beq.n	80114fc <LmHandlerPackagesNotify+0xd8>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80114d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114da:	4a10      	ldr	r2, [pc, #64]	; (801151c <LmHandlerPackagesNotify+0xf8>)
 80114dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e2:	6838      	ldr	r0, [r7, #0]
 80114e4:	4798      	blx	r3
                        }
                        break;
 80114e6:	e009      	b.n	80114fc <LmHandlerPackagesNotify+0xd8>
                default:
                    {
                        break;
                    }
            }
        }
 80114e8:	bf00      	nop
 80114ea:	e008      	b.n	80114fe <LmHandlerPackagesNotify+0xda>
                        break;
 80114ec:	bf00      	nop
 80114ee:	e006      	b.n	80114fe <LmHandlerPackagesNotify+0xda>
                        break;
 80114f0:	bf00      	nop
 80114f2:	e004      	b.n	80114fe <LmHandlerPackagesNotify+0xda>
                        break;
 80114f4:	bf00      	nop
 80114f6:	e002      	b.n	80114fe <LmHandlerPackagesNotify+0xda>
                        break;
 80114f8:	bf00      	nop
 80114fa:	e000      	b.n	80114fe <LmHandlerPackagesNotify+0xda>
                        break;
 80114fc:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80114fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011502:	b2db      	uxtb	r3, r3
 8011504:	3301      	adds	r3, #1
 8011506:	b2db      	uxtb	r3, r3
 8011508:	73fb      	strb	r3, [r7, #15]
 801150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801150e:	2b04      	cmp	r3, #4
 8011510:	dd91      	ble.n	8011436 <LmHandlerPackagesNotify+0x12>
    }
}
 8011512:	bf00      	nop
 8011514:	bf00      	nop
 8011516:	3710      	adds	r7, #16
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	20000780 	.word	0x20000780

08011520 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011526:	2300      	movs	r3, #0
 8011528:	71fb      	strb	r3, [r7, #7]
 801152a:	e018      	b.n	801155e <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 801152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011530:	4a0f      	ldr	r2, [pc, #60]	; (8011570 <LmHandlerPackageIsTxPending+0x50>)
 8011532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00b      	beq.n	8011552 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 801153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801153e:	4a0c      	ldr	r2, [pc, #48]	; (8011570 <LmHandlerPackageIsTxPending+0x50>)
 8011540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	4798      	blx	r3
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 801154e:	2301      	movs	r3, #1
 8011550:	e00a      	b.n	8011568 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011556:	b2db      	uxtb	r3, r3
 8011558:	3301      	adds	r3, #1
 801155a:	b2db      	uxtb	r3, r3
 801155c:	71fb      	strb	r3, [r7, #7]
 801155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011562:	2b04      	cmp	r3, #4
 8011564:	dde2      	ble.n	801152c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 8011566:	2300      	movs	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	20000780 	.word	0x20000780

08011574 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801157a:	2300      	movs	r3, #0
 801157c:	71fb      	strb	r3, [r7, #7]
 801157e:	e022      	b.n	80115c6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8011580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011584:	4a14      	ldr	r2, [pc, #80]	; (80115d8 <LmHandlerPackagesProcess+0x64>)
 8011586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d015      	beq.n	80115ba <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 801158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011592:	4a11      	ldr	r2, [pc, #68]	; (80115d8 <LmHandlerPackagesProcess+0x64>)
 8011594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011598:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00d      	beq.n	80115ba <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7ff ff21 	bl	80113e8 <LmHandlerPackageIsInitialized>
 80115a6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d006      	beq.n	80115ba <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 80115ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115b0:	4a09      	ldr	r2, [pc, #36]	; (80115d8 <LmHandlerPackagesProcess+0x64>)
 80115b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80115ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	3301      	adds	r3, #1
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	71fb      	strb	r3, [r7, #7]
 80115c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115ca:	2b04      	cmp	r3, #4
 80115cc:	ddd8      	ble.n	8011580 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80115ce:	bf00      	nop
 80115d0:	bf00      	nop
 80115d2:	3708      	adds	r7, #8
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	20000780 	.word	0x20000780

080115dc <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	4603      	mov	r3, r0
 80115e4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80115e6:	4a09      	ldr	r2, [pc, #36]	; (801160c <LmHandlerOnTxFrameCtrlChanged+0x30>)
 80115e8:	79fb      	ldrb	r3, [r7, #7]
 80115ea:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 80115ec:	4b08      	ldr	r3, [pc, #32]	; (8011610 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d005      	beq.n	8011602 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 80115f6:	4b06      	ldr	r3, [pc, #24]	; (8011610 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115fc:	79fa      	ldrb	r2, [r7, #7]
 80115fe:	4610      	mov	r0, r2
 8011600:	4798      	blx	r3
    }
}
 8011602:	bf00      	nop
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	20000794 	.word	0x20000794
 8011610:	200007ac 	.word	0x200007ac

08011614 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	4603      	mov	r3, r0
 801161c:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 801161e:	4a09      	ldr	r2, [pc, #36]	; (8011644 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 8011620:	79fb      	ldrb	r3, [r7, #7]
 8011622:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8011624:	4b08      	ldr	r3, [pc, #32]	; (8011648 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801162a:	2b00      	cmp	r3, #0
 801162c:	d005      	beq.n	801163a <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 801162e:	4b06      	ldr	r3, [pc, #24]	; (8011648 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011634:	79fa      	ldrb	r2, [r7, #7]
 8011636:	4610      	mov	r0, r2
 8011638:	4798      	blx	r3
    }
}
 801163a:	bf00      	nop
 801163c:	3708      	adds	r7, #8
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	20000794 	.word	0x20000794
 8011648:	200007ac 	.word	0x200007ac

0801164c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	4603      	mov	r3, r0
 8011654:	6039      	str	r1, [r7, #0]
 8011656:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d102      	bne.n	8011664 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801165e:	f04f 33ff 	mov.w	r3, #4294967295
 8011662:	e00e      	b.n	8011682 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 8011664:	79fb      	ldrb	r3, [r7, #7]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d002      	beq.n	8011670 <LmHandlerGetVersion+0x24>
 801166a:	2b01      	cmp	r3, #1
 801166c:	d004      	beq.n	8011678 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 801166e:	e007      	b.n	8011680 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	4a06      	ldr	r2, [pc, #24]	; (801168c <LmHandlerGetVersion+0x40>)
 8011674:	601a      	str	r2, [r3, #0]
            break;
 8011676:	e003      	b.n	8011680 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	4a05      	ldr	r2, [pc, #20]	; (8011690 <LmHandlerGetVersion+0x44>)
 801167c:	601a      	str	r2, [r3, #0]
            break;
 801167e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011680:	2300      	movs	r3, #0
}
 8011682:	4618      	mov	r0, r3
 8011684:	370c      	adds	r7, #12
 8011686:	46bd      	mov	sp, r7
 8011688:	bc80      	pop	{r7}
 801168a:	4770      	bx	lr
 801168c:	01000400 	.word	0x01000400
 8011690:	02010001 	.word	0x02010001

08011694 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8011694:	b580      	push	{r7, lr}
 8011696:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8011698:	f005 fce0 	bl	801705c <LoRaMacDeInitialization>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d101      	bne.n	80116a6 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80116a2:	2300      	movs	r3, #0
 80116a4:	e001      	b.n	80116aa <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80116a6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	bd80      	pop	{r7, pc}

080116ae <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 80116b2:	f004 fb93 	bl	8015ddc <LoRaMacHalt>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d101      	bne.n	80116c0 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80116bc:	2300      	movs	r3, #0
 80116be:	e001      	b.n	80116c4 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80116c0:	f06f 0301 	mvn.w	r3, #1
    }
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b08c      	sub	sp, #48	; 0x30
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d102      	bne.n	80116dc <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80116d6:	f04f 33ff 	mov.w	r3, #4294967295
 80116da:	e016      	b.n	801170a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80116dc:	2321      	movs	r3, #33	; 0x21
 80116de:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80116e0:	f107 0308 	add.w	r3, r7, #8
 80116e4:	4618      	mov	r0, r3
 80116e6:	f004 fc41 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80116f0:	f04f 33ff 	mov.w	r3, #4294967295
 80116f4:	e009      	b.n	801170a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80116f6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f993 2000 	ldrsb.w	r2, [r3]
 8011704:	4b03      	ldr	r3, [pc, #12]	; (8011714 <LmHandlerGetTxPower+0x4c>)
 8011706:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8011708:	2300      	movs	r3, #0
}
 801170a:	4618      	mov	r0, r3
 801170c:	3730      	adds	r7, #48	; 0x30
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}
 8011712:	bf00      	nop
 8011714:	20000794 	.word	0x20000794

08011718 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b08e      	sub	sp, #56	; 0x38
 801171c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 801171e:	2300      	movs	r3, #0
 8011720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 8011724:	2300      	movs	r3, #0
 8011726:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 8011728:	f7ff ffc1 	bl	80116ae <LmHandlerHalt>
 801172c:	4603      	mov	r3, r0
 801172e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8011732:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8011736:	2b00      	cmp	r3, #0
 8011738:	d12f      	bne.n	801179a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 801173a:	f000 f859 	bl	80117f0 <NvmDataMgmtStoreBegin>
 801173e:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 8011740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011742:	f113 0f02 	cmn.w	r3, #2
 8011746:	d103      	bne.n	8011750 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8011748:	23f8      	movs	r3, #248	; 0xf8
 801174a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801174e:	e01c      	b.n	801178a <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8011750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011752:	2b00      	cmp	r3, #0
 8011754:	d104      	bne.n	8011760 <LmHandlerNvmDataStore+0x48>
 8011756:	4b1b      	ldr	r3, [pc, #108]	; (80117c4 <LmHandlerNvmDataStore+0xac>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	695b      	ldr	r3, [r3, #20]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d103      	bne.n	8011768 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8011760:	23ff      	movs	r3, #255	; 0xff
 8011762:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011766:	e010      	b.n	801178a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 8011768:	2327      	movs	r3, #39	; 0x27
 801176a:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 801176c:	463b      	mov	r3, r7
 801176e:	4618      	mov	r0, r3
 8011770:	f004 fbfc 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 8011778:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 801177c:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 801177e:	4b11      	ldr	r3, [pc, #68]	; (80117c4 <LmHandlerNvmDataStore+0xac>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011788:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 801178a:	f000 f847 	bl	801181c <NvmDataMgmtStoreEnd>
 801178e:	4603      	mov	r3, r0
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8011794:	23ff      	movs	r3, #255	; 0xff
 8011796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 801179a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d109      	bne.n	80117b6 <LmHandlerNvmDataStore+0x9e>
 80117a2:	4b08      	ldr	r3, [pc, #32]	; (80117c4 <LmHandlerNvmDataStore+0xac>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	69db      	ldr	r3, [r3, #28]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80117ac:	4b05      	ldr	r3, [pc, #20]	; (80117c4 <LmHandlerNvmDataStore+0xac>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	69db      	ldr	r3, [r3, #28]
 80117b2:	2001      	movs	r0, #1
 80117b4:	4798      	blx	r3
    }

    return lmhStatus;
 80117b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3738      	adds	r7, #56	; 0x38
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	200007ac 	.word	0x200007ac

080117c8 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	4603      	mov	r3, r0
 80117d0:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80117d2:	4b06      	ldr	r3, [pc, #24]	; (80117ec <NvmDataMgmtEvent+0x24>)
 80117d4:	881a      	ldrh	r2, [r3, #0]
 80117d6:	88fb      	ldrh	r3, [r7, #6]
 80117d8:	4313      	orrs	r3, r2
 80117da:	b29a      	uxth	r2, r3
 80117dc:	4b03      	ldr	r3, [pc, #12]	; (80117ec <NvmDataMgmtEvent+0x24>)
 80117de:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80117e0:	bf00      	nop
 80117e2:	370c      	adds	r7, #12
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bc80      	pop	{r7}
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	200008d4 	.word	0x200008d4

080117f0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 80117f4:	4b08      	ldr	r3, [pc, #32]	; (8011818 <NvmDataMgmtStoreBegin+0x28>)
 80117f6:	881b      	ldrh	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d102      	bne.n	8011802 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 80117fc:	f06f 0301 	mvn.w	r3, #1
 8011800:	e008      	b.n	8011814 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 8011802:	f004 fac3 	bl	8015d8c <LoRaMacStop>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 801180c:	f06f 0302 	mvn.w	r3, #2
 8011810:	e000      	b.n	8011814 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 8011812:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8011814:	4618      	mov	r0, r3
 8011816:	bd80      	pop	{r7, pc}
 8011818:	200008d4 	.word	0x200008d4

0801181c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 801181c:	b580      	push	{r7, lr}
 801181e:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011820:	4b03      	ldr	r3, [pc, #12]	; (8011830 <NvmDataMgmtStoreEnd+0x14>)
 8011822:	2200      	movs	r2, #0
 8011824:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 8011826:	f004 faa3 	bl	8015d70 <LoRaMacStart>
    return NVM_DATA_OK;
 801182a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801182c:	4618      	mov	r0, r3
 801182e:	bd80      	pop	{r7, pc}
 8011830:	200008d4 	.word	0x200008d4

08011834 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 8011834:	b580      	push	{r7, lr}
 8011836:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8011838:	2220      	movs	r2, #32
 801183a:	2100      	movs	r1, #0
 801183c:	4802      	ldr	r0, [pc, #8]	; (8011848 <ClassBStatusReset+0x14>)
 801183e:	f00a f8b3 	bl	801b9a8 <memset1>
}
 8011842:	bf00      	nop
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	200008ec 	.word	0x200008ec

0801184c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 801184c:	b480      	push	{r7}
 801184e:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 8011850:	4b02      	ldr	r3, [pc, #8]	; (801185c <LmhpCompliancePackageFactory+0x10>)
}
 8011852:	4618      	mov	r0, r3
 8011854:	46bd      	mov	sp, r7
 8011856:	bc80      	pop	{r7}
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	200000d8 	.word	0x200000d8

08011860 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b086      	sub	sp, #24
 8011864:	af02      	add	r7, sp, #8
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	4613      	mov	r3, r2
 801186c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d018      	beq.n	80118a6 <LmhpComplianceInit+0x46>
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d015      	beq.n	80118a6 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 801187a:	4a19      	ldr	r2, [pc, #100]	; (80118e0 <LmhpComplianceInit+0x80>)
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8011880:	4a18      	ldr	r2, [pc, #96]	; (80118e4 <LmhpComplianceInit+0x84>)
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8011886:	4a17      	ldr	r2, [pc, #92]	; (80118e4 <LmhpComplianceInit+0x84>)
 8011888:	79fb      	ldrb	r3, [r7, #7]
 801188a:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 801188c:	4b15      	ldr	r3, [pc, #84]	; (80118e4 <LmhpComplianceInit+0x84>)
 801188e:	2201      	movs	r2, #1
 8011890:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8011892:	2300      	movs	r3, #0
 8011894:	9300      	str	r3, [sp, #0]
 8011896:	4b14      	ldr	r3, [pc, #80]	; (80118e8 <LmhpComplianceInit+0x88>)
 8011898:	2200      	movs	r2, #0
 801189a:	f04f 31ff 	mov.w	r1, #4294967295
 801189e:	4813      	ldr	r0, [pc, #76]	; (80118ec <LmhpComplianceInit+0x8c>)
 80118a0:	f00e f960 	bl	801fb64 <UTIL_TIMER_Create>
 80118a4:	e005      	b.n	80118b2 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 80118a6:	4b0e      	ldr	r3, [pc, #56]	; (80118e0 <LmhpComplianceInit+0x80>)
 80118a8:	2200      	movs	r2, #0
 80118aa:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 80118ac:	4b0d      	ldr	r3, [pc, #52]	; (80118e4 <LmhpComplianceInit+0x84>)
 80118ae:	2200      	movs	r2, #0
 80118b0:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 80118b2:	4b0c      	ldr	r3, [pc, #48]	; (80118e4 <LmhpComplianceInit+0x84>)
 80118b4:	2200      	movs	r2, #0
 80118b6:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 80118b8:	f7ff ffbc 	bl	8011834 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 80118bc:	4b09      	ldr	r3, [pc, #36]	; (80118e4 <LmhpComplianceInit+0x84>)
 80118be:	2200      	movs	r2, #0
 80118c0:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 80118c2:	4b08      	ldr	r3, [pc, #32]	; (80118e4 <LmhpComplianceInit+0x84>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 80118c8:	4b06      	ldr	r3, [pc, #24]	; (80118e4 <LmhpComplianceInit+0x84>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 80118d0:	4b04      	ldr	r3, [pc, #16]	; (80118e4 <LmhpComplianceInit+0x84>)
 80118d2:	2200      	movs	r2, #0
 80118d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80118d8:	bf00      	nop
 80118da:	3710      	adds	r7, #16
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	20000910 	.word	0x20000910
 80118e4:	200008d8 	.word	0x200008d8
 80118e8:	080121e9 	.word	0x080121e9
 80118ec:	20000914 	.word	0x20000914

080118f0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80118f0:	b480      	push	{r7}
 80118f2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80118f4:	4b02      	ldr	r3, [pc, #8]	; (8011900 <LmhpComplianceIsInitialized+0x10>)
 80118f6:	781b      	ldrb	r3, [r3, #0]
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bc80      	pop	{r7}
 80118fe:	4770      	bx	lr
 8011900:	200008d8 	.word	0x200008d8

08011904 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 8011904:	b480      	push	{r7}
 8011906:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 8011908:	4b02      	ldr	r3, [pc, #8]	; (8011914 <LmhpComplianceIsTxPending+0x10>)
 801190a:	785b      	ldrb	r3, [r3, #1]
}
 801190c:	4618      	mov	r0, r3
 801190e:	46bd      	mov	sp, r7
 8011910:	bc80      	pop	{r7}
 8011912:	4770      	bx	lr
 8011914:	200008d8 	.word	0x200008d8

08011918 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8011918:	b590      	push	{r4, r7, lr}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 801191e:	4b33      	ldr	r3, [pc, #204]	; (80119ec <LmhpComplianceProcess+0xd4>)
 8011920:	785b      	ldrb	r3, [r3, #1]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d03e      	beq.n	80119a4 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 8011926:	f00e fadb 	bl	801fee0 <UTIL_TIMER_GetCurrentTime>
 801192a:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 801192c:	4b2f      	ldr	r3, [pc, #188]	; (80119ec <LmhpComplianceProcess+0xd4>)
 801192e:	685c      	ldr	r4, [r3, #4]
 8011930:	f7ff f8b6 	bl	8010aa0 <LmHandlerGetDutyCycleWaitTime>
 8011934:	4603      	mov	r3, r0
 8011936:	4423      	add	r3, r4
 8011938:	68fa      	ldr	r2, [r7, #12]
 801193a:	429a      	cmp	r2, r3
 801193c:	d941      	bls.n	80119c2 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 801193e:	4b2b      	ldr	r3, [pc, #172]	; (80119ec <LmhpComplianceProcess+0xd4>)
 8011940:	7a9b      	ldrb	r3, [r3, #10]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d03d      	beq.n	80119c2 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 8011946:	23e0      	movs	r3, #224	; 0xe0
 8011948:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 801194a:	4b28      	ldr	r3, [pc, #160]	; (80119ec <LmhpComplianceProcess+0xd4>)
 801194c:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 801194e:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8011950:	4b26      	ldr	r3, [pc, #152]	; (80119ec <LmhpComplianceProcess+0xd4>)
 8011952:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 8011954:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8011956:	23ff      	movs	r3, #255	; 0xff
 8011958:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 801195a:	4b24      	ldr	r3, [pc, #144]	; (80119ec <LmhpComplianceProcess+0xd4>)
 801195c:	7a19      	ldrb	r1, [r3, #8]
 801195e:	463b      	mov	r3, r7
 8011960:	2201      	movs	r2, #1
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff f964 	bl	8010c30 <LmHandlerSend>
 8011968:	4603      	mov	r3, r0
 801196a:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 801196c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d004      	beq.n	801197e <LmhpComplianceProcess+0x66>
 8011974:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011978:	f113 0f07 	cmn.w	r3, #7
 801197c:	d106      	bne.n	801198c <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 801197e:	4b1b      	ldr	r3, [pc, #108]	; (80119ec <LmhpComplianceProcess+0xd4>)
 8011980:	2200      	movs	r2, #0
 8011982:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8011984:	4b19      	ldr	r3, [pc, #100]	; (80119ec <LmhpComplianceProcess+0xd4>)
 8011986:	2200      	movs	r2, #0
 8011988:	729a      	strb	r2, [r3, #10]
 801198a:	e007      	b.n	801199c <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 801198c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011990:	4817      	ldr	r0, [pc, #92]	; (80119f0 <LmhpComplianceProcess+0xd8>)
 8011992:	f00e f9fb 	bl	801fd8c <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8011996:	4816      	ldr	r0, [pc, #88]	; (80119f0 <LmhpComplianceProcess+0xd8>)
 8011998:	f00e f91a 	bl	801fbd0 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 801199c:	4a13      	ldr	r2, [pc, #76]	; (80119ec <LmhpComplianceProcess+0xd4>)
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	6053      	str	r3, [r2, #4]
 80119a2:	e00e      	b.n	80119c2 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 80119a4:	4b11      	ldr	r3, [pc, #68]	; (80119ec <LmhpComplianceProcess+0xd4>)
 80119a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d009      	beq.n	80119c2 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 80119ae:	4b0f      	ldr	r3, [pc, #60]	; (80119ec <LmhpComplianceProcess+0xd4>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 80119b6:	4b0d      	ldr	r3, [pc, #52]	; (80119ec <LmhpComplianceProcess+0xd4>)
 80119b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fa2d 	bl	8010e1c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 80119c2:	4b0a      	ldr	r3, [pc, #40]	; (80119ec <LmhpComplianceProcess+0xd4>)
 80119c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d00a      	beq.n	80119e2 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 80119cc:	4b07      	ldr	r3, [pc, #28]	; (80119ec <LmhpComplianceProcess+0xd4>)
 80119ce:	2200      	movs	r2, #0
 80119d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 80119d4:	4b07      	ldr	r3, [pc, #28]	; (80119f4 <LmhpComplianceProcess+0xdc>)
 80119d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 80119dc:	4b05      	ldr	r3, [pc, #20]	; (80119f4 <LmhpComplianceProcess+0xdc>)
 80119de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119e0:	4798      	blx	r3
        }
    }
}
 80119e2:	bf00      	nop
 80119e4:	3714      	adds	r7, #20
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd90      	pop	{r4, r7, pc}
 80119ea:	bf00      	nop
 80119ec:	200008d8 	.word	0x200008d8
 80119f0:	20000914 	.word	0x20000914
 80119f4:	200000d8 	.word	0x200000d8

080119f8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80119f8:	b5b0      	push	{r4, r5, r7, lr}
 80119fa:	b0a4      	sub	sp, #144	; 0x90
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 8011a00:	2300      	movs	r3, #0
 8011a02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 8011a06:	4bd0      	ldr	r3, [pc, #832]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	f083 0301 	eor.w	r3, r3, #1
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f040 83bf 	bne.w	8012194 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	78db      	ldrb	r3, [r3, #3]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d103      	bne.n	8011a26 <LmhpComplianceOnMcpsIndication+0x2e>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	7b9b      	ldrb	r3, [r3, #14]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d005      	beq.n	8011a32 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 8011a26:	4bc8      	ldr	r3, [pc, #800]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011a28:	8a1b      	ldrh	r3, [r3, #16]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	4bc6      	ldr	r3, [pc, #792]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011a30:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	7b5b      	ldrb	r3, [r3, #13]
 8011a36:	f083 0301 	eor.w	r3, r3, #1
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	f040 83ab 	bne.w	8012198 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	78db      	ldrb	r3, [r3, #3]
 8011a46:	2be0      	cmp	r3, #224	; 0xe0
 8011a48:	f040 83a8 	bne.w	801219c <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 8011a4c:	4bbe      	ldr	r3, [pc, #760]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	689a      	ldr	r2, [r3, #8]
 8011a56:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011a5a:	1c59      	adds	r1, r3, #1
 8011a5c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011a60:	4413      	add	r3, r2
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	2b7f      	cmp	r3, #127	; 0x7f
 8011a66:	f200 8372 	bhi.w	801214e <LmhpComplianceOnMcpsIndication+0x756>
 8011a6a:	a201      	add	r2, pc, #4	; (adr r2, 8011a70 <LmhpComplianceOnMcpsIndication+0x78>)
 8011a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a70:	08011c71 	.word	0x08011c71
 8011a74:	08011cb5 	.word	0x08011cb5
 8011a78:	08011cbf 	.word	0x08011cbf
 8011a7c:	08011cd5 	.word	0x08011cd5
 8011a80:	08011cf7 	.word	0x08011cf7
 8011a84:	08011d25 	.word	0x08011d25
 8011a88:	08011d51 	.word	0x08011d51
 8011a8c:	08011daf 	.word	0x08011daf
 8011a90:	08011e07 	.word	0x08011e07
 8011a94:	08011e73 	.word	0x08011e73
 8011a98:	08011ec3 	.word	0x08011ec3
 8011a9c:	0801214f 	.word	0x0801214f
 8011aa0:	0801214f 	.word	0x0801214f
 8011aa4:	0801214f 	.word	0x0801214f
 8011aa8:	0801214f 	.word	0x0801214f
 8011aac:	0801214f 	.word	0x0801214f
 8011ab0:	0801214f 	.word	0x0801214f
 8011ab4:	0801214f 	.word	0x0801214f
 8011ab8:	0801214f 	.word	0x0801214f
 8011abc:	0801214f 	.word	0x0801214f
 8011ac0:	0801214f 	.word	0x0801214f
 8011ac4:	0801214f 	.word	0x0801214f
 8011ac8:	0801214f 	.word	0x0801214f
 8011acc:	0801214f 	.word	0x0801214f
 8011ad0:	0801214f 	.word	0x0801214f
 8011ad4:	0801214f 	.word	0x0801214f
 8011ad8:	0801214f 	.word	0x0801214f
 8011adc:	0801214f 	.word	0x0801214f
 8011ae0:	0801214f 	.word	0x0801214f
 8011ae4:	0801214f 	.word	0x0801214f
 8011ae8:	0801214f 	.word	0x0801214f
 8011aec:	0801214f 	.word	0x0801214f
 8011af0:	08011ecb 	.word	0x08011ecb
 8011af4:	08011edd 	.word	0x08011edd
 8011af8:	08011ee5 	.word	0x08011ee5
 8011afc:	0801214f 	.word	0x0801214f
 8011b00:	0801214f 	.word	0x0801214f
 8011b04:	0801214f 	.word	0x0801214f
 8011b08:	0801214f 	.word	0x0801214f
 8011b0c:	0801214f 	.word	0x0801214f
 8011b10:	0801214f 	.word	0x0801214f
 8011b14:	0801214f 	.word	0x0801214f
 8011b18:	0801214f 	.word	0x0801214f
 8011b1c:	0801214f 	.word	0x0801214f
 8011b20:	0801214f 	.word	0x0801214f
 8011b24:	0801214f 	.word	0x0801214f
 8011b28:	0801214f 	.word	0x0801214f
 8011b2c:	0801214f 	.word	0x0801214f
 8011b30:	0801214f 	.word	0x0801214f
 8011b34:	0801214f 	.word	0x0801214f
 8011b38:	0801214f 	.word	0x0801214f
 8011b3c:	0801214f 	.word	0x0801214f
 8011b40:	0801214f 	.word	0x0801214f
 8011b44:	0801214f 	.word	0x0801214f
 8011b48:	0801214f 	.word	0x0801214f
 8011b4c:	0801214f 	.word	0x0801214f
 8011b50:	0801214f 	.word	0x0801214f
 8011b54:	0801214f 	.word	0x0801214f
 8011b58:	0801214f 	.word	0x0801214f
 8011b5c:	0801214f 	.word	0x0801214f
 8011b60:	0801214f 	.word	0x0801214f
 8011b64:	0801214f 	.word	0x0801214f
 8011b68:	0801214f 	.word	0x0801214f
 8011b6c:	0801214f 	.word	0x0801214f
 8011b70:	0801214f 	.word	0x0801214f
 8011b74:	0801214f 	.word	0x0801214f
 8011b78:	0801214f 	.word	0x0801214f
 8011b7c:	0801214f 	.word	0x0801214f
 8011b80:	0801214f 	.word	0x0801214f
 8011b84:	0801214f 	.word	0x0801214f
 8011b88:	0801214f 	.word	0x0801214f
 8011b8c:	0801214f 	.word	0x0801214f
 8011b90:	0801214f 	.word	0x0801214f
 8011b94:	0801214f 	.word	0x0801214f
 8011b98:	0801214f 	.word	0x0801214f
 8011b9c:	0801214f 	.word	0x0801214f
 8011ba0:	0801214f 	.word	0x0801214f
 8011ba4:	0801214f 	.word	0x0801214f
 8011ba8:	0801214f 	.word	0x0801214f
 8011bac:	0801214f 	.word	0x0801214f
 8011bb0:	0801214f 	.word	0x0801214f
 8011bb4:	0801214f 	.word	0x0801214f
 8011bb8:	0801214f 	.word	0x0801214f
 8011bbc:	0801214f 	.word	0x0801214f
 8011bc0:	0801214f 	.word	0x0801214f
 8011bc4:	0801214f 	.word	0x0801214f
 8011bc8:	0801214f 	.word	0x0801214f
 8011bcc:	0801214f 	.word	0x0801214f
 8011bd0:	0801214f 	.word	0x0801214f
 8011bd4:	0801214f 	.word	0x0801214f
 8011bd8:	0801214f 	.word	0x0801214f
 8011bdc:	0801214f 	.word	0x0801214f
 8011be0:	0801214f 	.word	0x0801214f
 8011be4:	0801214f 	.word	0x0801214f
 8011be8:	0801214f 	.word	0x0801214f
 8011bec:	0801214f 	.word	0x0801214f
 8011bf0:	0801214f 	.word	0x0801214f
 8011bf4:	0801214f 	.word	0x0801214f
 8011bf8:	0801214f 	.word	0x0801214f
 8011bfc:	0801214f 	.word	0x0801214f
 8011c00:	0801214f 	.word	0x0801214f
 8011c04:	0801214f 	.word	0x0801214f
 8011c08:	0801214f 	.word	0x0801214f
 8011c0c:	0801214f 	.word	0x0801214f
 8011c10:	0801214f 	.word	0x0801214f
 8011c14:	0801214f 	.word	0x0801214f
 8011c18:	0801214f 	.word	0x0801214f
 8011c1c:	0801214f 	.word	0x0801214f
 8011c20:	0801214f 	.word	0x0801214f
 8011c24:	0801214f 	.word	0x0801214f
 8011c28:	0801214f 	.word	0x0801214f
 8011c2c:	0801214f 	.word	0x0801214f
 8011c30:	0801214f 	.word	0x0801214f
 8011c34:	0801214f 	.word	0x0801214f
 8011c38:	0801214f 	.word	0x0801214f
 8011c3c:	0801214f 	.word	0x0801214f
 8011c40:	0801214f 	.word	0x0801214f
 8011c44:	0801214f 	.word	0x0801214f
 8011c48:	0801214f 	.word	0x0801214f
 8011c4c:	0801214f 	.word	0x0801214f
 8011c50:	0801214f 	.word	0x0801214f
 8011c54:	0801214f 	.word	0x0801214f
 8011c58:	0801214f 	.word	0x0801214f
 8011c5c:	0801214f 	.word	0x0801214f
 8011c60:	0801214f 	.word	0x0801214f
 8011c64:	08011f17 	.word	0x08011f17
 8011c68:	08011fc7 	.word	0x08011fc7
 8011c6c:	08011ff9 	.word	0x08011ff9
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8011c70:	4b35      	ldr	r3, [pc, #212]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011c72:	68da      	ldr	r2, [r3, #12]
 8011c74:	4b34      	ldr	r3, [pc, #208]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011c76:	7a9b      	ldrb	r3, [r3, #10]
 8011c78:	1c59      	adds	r1, r3, #1
 8011c7a:	b2c8      	uxtb	r0, r1
 8011c7c:	4932      	ldr	r1, [pc, #200]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011c7e:	7288      	strb	r0, [r1, #10]
 8011c80:	4413      	add	r3, r2
 8011c82:	2200      	movs	r2, #0
 8011c84:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8011c86:	4b30      	ldr	r3, [pc, #192]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011c88:	68da      	ldr	r2, [r3, #12]
 8011c8a:	4b2f      	ldr	r3, [pc, #188]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011c8c:	7a9b      	ldrb	r3, [r3, #10]
 8011c8e:	1c59      	adds	r1, r3, #1
 8011c90:	b2c8      	uxtb	r0, r1
 8011c92:	492d      	ldr	r1, [pc, #180]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011c94:	7288      	strb	r0, [r1, #10]
 8011c96:	4413      	add	r3, r2
 8011c98:	2206      	movs	r2, #6
 8011c9a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8011c9c:	4b2a      	ldr	r3, [pc, #168]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011c9e:	68da      	ldr	r2, [r3, #12]
 8011ca0:	4b29      	ldr	r3, [pc, #164]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011ca2:	7a9b      	ldrb	r3, [r3, #10]
 8011ca4:	1c59      	adds	r1, r3, #1
 8011ca6:	b2c8      	uxtb	r0, r1
 8011ca8:	4927      	ldr	r1, [pc, #156]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011caa:	7288      	strb	r0, [r1, #10]
 8011cac:	4413      	add	r3, r2
 8011cae:	2201      	movs	r2, #1
 8011cb0:	701a      	strb	r2, [r3, #0]
                break;
 8011cb2:	e257      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8011cb4:	4b24      	ldr	r3, [pc, #144]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8011cbc:	e252      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 8011cbe:	4b23      	ldr	r3, [pc, #140]	; (8011d4c <LmhpComplianceOnMcpsIndication+0x354>)
 8011cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f000 8245 	beq.w	8012152 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8011cc8:	4b20      	ldr	r3, [pc, #128]	; (8011d4c <LmhpComplianceOnMcpsIndication+0x354>)
 8011cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ccc:	2101      	movs	r1, #1
 8011cce:	2002      	movs	r0, #2
 8011cd0:	4798      	blx	r3
                }
                break;
 8011cd2:	e23e      	b.n	8012152 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	689a      	ldr	r2, [r3, #8]
 8011cd8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011cdc:	1c59      	adds	r1, r3, #1
 8011cde:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011ce2:	4413      	add	r3, r2
 8011ce4:	781a      	ldrb	r2, [r3, #0]
 8011ce6:	4b18      	ldr	r3, [pc, #96]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011ce8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8011cec:	4b16      	ldr	r3, [pc, #88]	; (8011d48 <LmhpComplianceOnMcpsIndication+0x350>)
 8011cee:	2201      	movs	r2, #1
 8011cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8011cf4:	e236      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 8011cf6:	2304      	movs	r3, #4
 8011cf8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	689a      	ldr	r2, [r3, #8]
 8011cfe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011d02:	1c59      	adds	r1, r3, #1
 8011d04:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011d08:	4413      	add	r3, r2
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	bf14      	ite	ne
 8011d10:	2301      	movne	r3, #1
 8011d12:	2300      	moveq	r3, #0
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 8011d18:	f107 0308 	add.w	r3, r7, #8
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f004 fafd 	bl	801631c <LoRaMacMibSetRequestConfirm>
                break;
 8011d22:	e21f      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	689a      	ldr	r2, [r3, #8]
 8011d28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011d2c:	1c59      	adds	r1, r3, #1
 8011d2e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011d32:	4413      	add	r3, r2
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	bf14      	ite	ne
 8011d3a:	2301      	movne	r3, #1
 8011d3c:	2300      	moveq	r3, #0
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	4618      	mov	r0, r3
 8011d42:	f005 f965 	bl	8017010 <LoRaMacTestSetDutyCycleOn>
                break;
 8011d46:	e20d      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
 8011d48:	200008d8 	.word	0x200008d8
 8011d4c:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8011d50:	4ba5      	ldr	r3, [pc, #660]	; (8011fe8 <LmhpComplianceOnMcpsIndication+0x5f0>)
 8011d52:	f107 0408 	add.w	r4, r7, #8
 8011d56:	461d      	mov	r5, r3
 8011d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011d64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	689a      	ldr	r2, [r3, #8]
 8011d6c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011d70:	1c59      	adds	r1, r3, #1
 8011d72:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011d76:	4413      	add	r3, r2
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8011d7e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8011d82:	2b0a      	cmp	r3, #10
 8011d84:	f200 81e7 	bhi.w	8012156 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8011d88:	4b98      	ldr	r3, [pc, #608]	; (8011fec <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 81e1 	beq.w	8012156 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8011d94:	4b95      	ldr	r3, [pc, #596]	; (8011fec <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	685a      	ldr	r2, [r3, #4]
 8011d9a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	3390      	adds	r3, #144	; 0x90
 8011da2:	443b      	add	r3, r7
 8011da4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8011da8:	4618      	mov	r0, r3
 8011daa:	4790      	blx	r2
                    }
                }
                break;
 8011dac:	e1d3      	b.n	8012156 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	689a      	ldr	r2, [r3, #8]
 8011db2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011db6:	1c59      	adds	r1, r3, #1
 8011db8:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011dbc:	4413      	add	r3, r2
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8011dc4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d004      	beq.n	8011dd6 <LmhpComplianceOnMcpsIndication+0x3de>
 8011dcc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	f040 81c2 	bne.w	801215a <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8011dd6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	bf14      	ite	ne
 8011dde:	2301      	movne	r3, #1
 8011de0:	2300      	moveq	r3, #0
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	461a      	mov	r2, r3
 8011de6:	4b82      	ldr	r3, [pc, #520]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011de8:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8011dea:	4b80      	ldr	r3, [pc, #512]	; (8011fec <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	f000 81b2 	beq.w	801215a <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8011df6:	4b7d      	ldr	r3, [pc, #500]	; (8011fec <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	689b      	ldr	r3, [r3, #8]
 8011dfc:	4a7c      	ldr	r2, [pc, #496]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011dfe:	7a12      	ldrb	r2, [r2, #8]
 8011e00:	4610      	mov	r0, r2
 8011e02:	4798      	blx	r3
                    }
                }
                break;
 8011e04:	e1a9      	b.n	801215a <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8011e06:	4b7a      	ldr	r3, [pc, #488]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e08:	68da      	ldr	r2, [r3, #12]
 8011e0a:	4b79      	ldr	r3, [pc, #484]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e0c:	7a9b      	ldrb	r3, [r3, #10]
 8011e0e:	1c59      	adds	r1, r3, #1
 8011e10:	b2c8      	uxtb	r0, r1
 8011e12:	4977      	ldr	r1, [pc, #476]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e14:	7288      	strb	r0, [r1, #10]
 8011e16:	4413      	add	r3, r2
 8011e18:	2208      	movs	r2, #8
 8011e1a:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8011e22:	e019      	b.n	8011e58 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	689a      	ldr	r2, [r3, #8]
 8011e28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e2c:	1c59      	adds	r1, r3, #1
 8011e2e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011e32:	4413      	add	r3, r2
 8011e34:	781a      	ldrb	r2, [r3, #0]
 8011e36:	4b6e      	ldr	r3, [pc, #440]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e38:	68d9      	ldr	r1, [r3, #12]
 8011e3a:	4b6d      	ldr	r3, [pc, #436]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e3c:	7a9b      	ldrb	r3, [r3, #10]
 8011e3e:	1c58      	adds	r0, r3, #1
 8011e40:	b2c4      	uxtb	r4, r0
 8011e42:	486b      	ldr	r0, [pc, #428]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e44:	7284      	strb	r4, [r0, #10]
 8011e46:	440b      	add	r3, r1
 8011e48:	3201      	adds	r2, #1
 8011e4a:	b2d2      	uxtb	r2, r2
 8011e4c:	701a      	strb	r2, [r3, #0]
                     i++ )
 8011e4e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011e52:	3301      	adds	r3, #1
 8011e54:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8011e58:	4b65      	ldr	r3, [pc, #404]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e5a:	7a5a      	ldrb	r2, [r3, #9]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	7b1b      	ldrb	r3, [r3, #12]
 8011e60:	4293      	cmp	r3, r2
 8011e62:	bf28      	it	cs
 8011e64:	4613      	movcs	r3, r2
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d3d9      	bcc.n	8011e24 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 8011e70:	e178      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8011e72:	4b5f      	ldr	r3, [pc, #380]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e74:	68da      	ldr	r2, [r3, #12]
 8011e76:	4b5e      	ldr	r3, [pc, #376]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e78:	7a9b      	ldrb	r3, [r3, #10]
 8011e7a:	1c59      	adds	r1, r3, #1
 8011e7c:	b2c8      	uxtb	r0, r1
 8011e7e:	495c      	ldr	r1, [pc, #368]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e80:	7288      	strb	r0, [r1, #10]
 8011e82:	4413      	add	r3, r2
 8011e84:	2209      	movs	r2, #9
 8011e86:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8011e88:	4b59      	ldr	r3, [pc, #356]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e8a:	8a18      	ldrh	r0, [r3, #16]
 8011e8c:	4b58      	ldr	r3, [pc, #352]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e8e:	68da      	ldr	r2, [r3, #12]
 8011e90:	4b57      	ldr	r3, [pc, #348]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e92:	7a9b      	ldrb	r3, [r3, #10]
 8011e94:	1c59      	adds	r1, r3, #1
 8011e96:	b2cc      	uxtb	r4, r1
 8011e98:	4955      	ldr	r1, [pc, #340]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011e9a:	728c      	strb	r4, [r1, #10]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	b2c2      	uxtb	r2, r0
 8011ea0:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8011ea2:	4b53      	ldr	r3, [pc, #332]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011ea4:	8a1b      	ldrh	r3, [r3, #16]
 8011ea6:	0a1b      	lsrs	r3, r3, #8
 8011ea8:	b298      	uxth	r0, r3
 8011eaa:	4b51      	ldr	r3, [pc, #324]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011eac:	68da      	ldr	r2, [r3, #12]
 8011eae:	4b50      	ldr	r3, [pc, #320]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011eb0:	7a9b      	ldrb	r3, [r3, #10]
 8011eb2:	1c59      	adds	r1, r3, #1
 8011eb4:	b2cc      	uxtb	r4, r1
 8011eb6:	494e      	ldr	r1, [pc, #312]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011eb8:	728c      	strb	r4, [r1, #10]
 8011eba:	4413      	add	r3, r2
 8011ebc:	b2c2      	uxtb	r2, r0
 8011ebe:	701a      	strb	r2, [r3, #0]
                break;
 8011ec0:	e150      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 8011ec2:	4b4b      	ldr	r3, [pc, #300]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	821a      	strh	r2, [r3, #16]
                break;
 8011ec8:	e14c      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 8011eca:	2305      	movs	r3, #5
 8011ecc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 8011ed0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f004 fdcb 	bl	8016a70 <LoRaMacMlmeRequest>
                break;
 8011eda:	e143      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 8011edc:	4b45      	ldr	r3, [pc, #276]	; (8011ff4 <LmhpComplianceOnMcpsIndication+0x5fc>)
 8011ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee0:	4798      	blx	r3
                break;
 8011ee2:	e13f      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	689a      	ldr	r2, [r3, #8]
 8011ee8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011eec:	1c59      	adds	r1, r3, #1
 8011eee:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011ef2:	4413      	add	r3, r2
 8011ef4:	781a      	ldrb	r2, [r3, #0]
 8011ef6:	4b3e      	ldr	r3, [pc, #248]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011ef8:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8011efa:	4b3c      	ldr	r3, [pc, #240]	; (8011fec <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	f000 812c 	beq.w	801215e <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8011f06:	4b39      	ldr	r3, [pc, #228]	; (8011fec <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	4a38      	ldr	r2, [pc, #224]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011f0e:	7d52      	ldrb	r2, [r2, #21]
 8011f10:	4610      	mov	r0, r2
 8011f12:	4798      	blx	r3
                }
                break;
 8011f14:	e123      	b.n	801215e <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	7b1b      	ldrb	r3, [r3, #12]
 8011f1a:	2b07      	cmp	r3, #7
 8011f1c:	f040 8121 	bne.w	8012162 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 8011f20:	2306      	movs	r3, #6
 8011f22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	689a      	ldr	r2, [r3, #8]
 8011f2a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011f2e:	4413      	add	r3, r2
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	b21a      	sxth	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6899      	ldr	r1, [r3, #8]
 8011f38:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	440b      	add	r3, r1
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	021b      	lsls	r3, r3, #8
 8011f44:	b21b      	sxth	r3, r3
 8011f46:	4313      	orrs	r3, r2
 8011f48:	b21b      	sxth	r3, r3
 8011f4a:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 8011f4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 8011f50:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011f54:	3302      	adds	r3, #2
 8011f56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	689a      	ldr	r2, [r3, #8]
 8011f5e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011f62:	4413      	add	r3, r2
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	4619      	mov	r1, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	689a      	ldr	r2, [r3, #8]
 8011f6c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011f70:	3301      	adds	r3, #1
 8011f72:	4413      	add	r3, r2
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	021b      	lsls	r3, r3, #8
 8011f78:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6899      	ldr	r1, [r3, #8]
 8011f80:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011f84:	3302      	adds	r3, #2
 8011f86:	440b      	add	r3, r1
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8011f8c:	4313      	orrs	r3, r2
 8011f8e:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8011f90:	2364      	movs	r3, #100	; 0x64
 8011f92:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8011f96:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 8011f98:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011f9c:	3303      	adds	r3, #3
 8011f9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	689a      	ldr	r2, [r3, #8]
 8011fa6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011faa:	1c59      	adds	r1, r3, #1
 8011fac:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011fb0:	4413      	add	r3, r2
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	b25b      	sxtb	r3, r3
 8011fb6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8011fba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f004 fd56 	bl	8016a70 <LoRaMacMlmeRequest>
                }
                break;
 8011fc4:	e0cd      	b.n	8012162 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8011fc6:	233b      	movs	r3, #59	; 0x3b
 8011fc8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 8011fd2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f004 f9a0 	bl	801631c <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 8011fdc:	4b04      	ldr	r3, [pc, #16]	; (8011ff0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8011fe4:	e0be      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
 8011fe6:	bf00      	nop
 8011fe8:	080217e0 	.word	0x080217e0
 8011fec:	20000910 	.word	0x20000910
 8011ff0:	200008d8 	.word	0x200008d8
 8011ff4:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 8011ff8:	232a      	movs	r3, #42	; 0x2a
 8011ffa:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 8011ffc:	f107 0308 	add.w	r3, r7, #8
 8012000:	4618      	mov	r0, r3
 8012002:	f003 ffb3 	bl	8015f6c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 801200e:	4b65      	ldr	r3, [pc, #404]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012010:	68da      	ldr	r2, [r3, #12]
 8012012:	4b64      	ldr	r3, [pc, #400]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012014:	7a9b      	ldrb	r3, [r3, #10]
 8012016:	1c59      	adds	r1, r3, #1
 8012018:	b2c8      	uxtb	r0, r1
 801201a:	4962      	ldr	r1, [pc, #392]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801201c:	7288      	strb	r0, [r1, #10]
 801201e:	4413      	add	r3, r2
 8012020:	227f      	movs	r2, #127	; 0x7f
 8012022:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8012024:	4b60      	ldr	r3, [pc, #384]	; (80121a8 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	4b5e      	ldr	r3, [pc, #376]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801202a:	68d9      	ldr	r1, [r3, #12]
 801202c:	4b5d      	ldr	r3, [pc, #372]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801202e:	7a9b      	ldrb	r3, [r3, #10]
 8012030:	1c58      	adds	r0, r3, #1
 8012032:	b2c4      	uxtb	r4, r0
 8012034:	485b      	ldr	r0, [pc, #364]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012036:	7284      	strb	r4, [r0, #10]
 8012038:	440b      	add	r3, r1
 801203a:	78d2      	ldrb	r2, [r2, #3]
 801203c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 801203e:	4b5a      	ldr	r3, [pc, #360]	; (80121a8 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	4b58      	ldr	r3, [pc, #352]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012044:	68d9      	ldr	r1, [r3, #12]
 8012046:	4b57      	ldr	r3, [pc, #348]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012048:	7a9b      	ldrb	r3, [r3, #10]
 801204a:	1c58      	adds	r0, r3, #1
 801204c:	b2c4      	uxtb	r4, r0
 801204e:	4855      	ldr	r0, [pc, #340]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012050:	7284      	strb	r4, [r0, #10]
 8012052:	440b      	add	r3, r1
 8012054:	7892      	ldrb	r2, [r2, #2]
 8012056:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8012058:	4b53      	ldr	r3, [pc, #332]	; (80121a8 <LmhpComplianceOnMcpsIndication+0x7b0>)
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	4b51      	ldr	r3, [pc, #324]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801205e:	68d9      	ldr	r1, [r3, #12]
 8012060:	4b50      	ldr	r3, [pc, #320]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012062:	7a9b      	ldrb	r3, [r3, #10]
 8012064:	1c58      	adds	r0, r3, #1
 8012066:	b2c4      	uxtb	r4, r0
 8012068:	484e      	ldr	r0, [pc, #312]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801206a:	7284      	strb	r4, [r0, #10]
 801206c:	440b      	add	r3, r1
 801206e:	7852      	ldrb	r2, [r2, #1]
 8012070:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8012072:	4b4d      	ldr	r3, [pc, #308]	; (80121a8 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8012074:	681a      	ldr	r2, [r3, #0]
 8012076:	4b4b      	ldr	r3, [pc, #300]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012078:	68d9      	ldr	r1, [r3, #12]
 801207a:	4b4a      	ldr	r3, [pc, #296]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801207c:	7a9b      	ldrb	r3, [r3, #10]
 801207e:	1c58      	adds	r0, r3, #1
 8012080:	b2c4      	uxtb	r4, r0
 8012082:	4848      	ldr	r0, [pc, #288]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012084:	7284      	strb	r4, [r0, #10]
 8012086:	440b      	add	r3, r1
 8012088:	7812      	ldrb	r2, [r2, #0]
 801208a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 801208c:	4b45      	ldr	r3, [pc, #276]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801208e:	68da      	ldr	r2, [r3, #12]
 8012090:	4b44      	ldr	r3, [pc, #272]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012092:	7a9b      	ldrb	r3, [r3, #10]
 8012094:	1c59      	adds	r1, r3, #1
 8012096:	b2c8      	uxtb	r0, r1
 8012098:	4942      	ldr	r1, [pc, #264]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801209a:	7288      	strb	r0, [r1, #10]
 801209c:	4413      	add	r3, r2
 801209e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80120a2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 80120a4:	4b3f      	ldr	r3, [pc, #252]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120a6:	68da      	ldr	r2, [r3, #12]
 80120a8:	4b3e      	ldr	r3, [pc, #248]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120aa:	7a9b      	ldrb	r3, [r3, #10]
 80120ac:	1c59      	adds	r1, r3, #1
 80120ae:	b2c8      	uxtb	r0, r1
 80120b0:	493c      	ldr	r1, [pc, #240]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120b2:	7288      	strb	r0, [r1, #10]
 80120b4:	4413      	add	r3, r2
 80120b6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80120ba:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 80120bc:	4b39      	ldr	r3, [pc, #228]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120be:	68da      	ldr	r2, [r3, #12]
 80120c0:	4b38      	ldr	r3, [pc, #224]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120c2:	7a9b      	ldrb	r3, [r3, #10]
 80120c4:	1c59      	adds	r1, r3, #1
 80120c6:	b2c8      	uxtb	r0, r1
 80120c8:	4936      	ldr	r1, [pc, #216]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120ca:	7288      	strb	r0, [r1, #10]
 80120cc:	4413      	add	r3, r2
 80120ce:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80120d2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 80120d4:	4b33      	ldr	r3, [pc, #204]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120d6:	68da      	ldr	r2, [r3, #12]
 80120d8:	4b32      	ldr	r3, [pc, #200]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120da:	7a9b      	ldrb	r3, [r3, #10]
 80120dc:	1c59      	adds	r1, r3, #1
 80120de:	b2c8      	uxtb	r0, r1
 80120e0:	4930      	ldr	r1, [pc, #192]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120e2:	7288      	strb	r0, [r1, #10]
 80120e4:	4413      	add	r3, r2
 80120e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80120ea:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 80120ec:	4b2d      	ldr	r3, [pc, #180]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120ee:	68da      	ldr	r2, [r3, #12]
 80120f0:	4b2c      	ldr	r3, [pc, #176]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120f2:	7a9b      	ldrb	r3, [r3, #10]
 80120f4:	1c59      	adds	r1, r3, #1
 80120f6:	b2c8      	uxtb	r0, r1
 80120f8:	492a      	ldr	r1, [pc, #168]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80120fa:	7288      	strb	r0, [r1, #10]
 80120fc:	4413      	add	r3, r2
 80120fe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012102:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8012104:	4b27      	ldr	r3, [pc, #156]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012106:	68da      	ldr	r2, [r3, #12]
 8012108:	4b26      	ldr	r3, [pc, #152]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801210a:	7a9b      	ldrb	r3, [r3, #10]
 801210c:	1c59      	adds	r1, r3, #1
 801210e:	b2c8      	uxtb	r0, r1
 8012110:	4924      	ldr	r1, [pc, #144]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012112:	7288      	strb	r0, [r1, #10]
 8012114:	4413      	add	r3, r2
 8012116:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801211a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 801211c:	4b21      	ldr	r3, [pc, #132]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801211e:	68da      	ldr	r2, [r3, #12]
 8012120:	4b20      	ldr	r3, [pc, #128]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012122:	7a9b      	ldrb	r3, [r3, #10]
 8012124:	1c59      	adds	r1, r3, #1
 8012126:	b2c8      	uxtb	r0, r1
 8012128:	491e      	ldr	r1, [pc, #120]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801212a:	7288      	strb	r0, [r1, #10]
 801212c:	4413      	add	r3, r2
 801212e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012132:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8012134:	4b1b      	ldr	r3, [pc, #108]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012136:	68da      	ldr	r2, [r3, #12]
 8012138:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801213a:	7a9b      	ldrb	r3, [r3, #10]
 801213c:	1c59      	adds	r1, r3, #1
 801213e:	b2c8      	uxtb	r0, r1
 8012140:	4918      	ldr	r1, [pc, #96]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012142:	7288      	strb	r0, [r1, #10]
 8012144:	4413      	add	r3, r2
 8012146:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801214a:	701a      	strb	r2, [r3, #0]
                break;
 801214c:	e00a      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 801214e:	bf00      	nop
 8012150:	e008      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012152:	bf00      	nop
 8012154:	e006      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012156:	bf00      	nop
 8012158:	e004      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801215a:	bf00      	nop
 801215c:	e002      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801215e:	bf00      	nop
 8012160:	e000      	b.n	8012164 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012162:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 8012164:	4b0f      	ldr	r3, [pc, #60]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012166:	7a9b      	ldrb	r3, [r3, #10]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00c      	beq.n	8012186 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 801216c:	4b0f      	ldr	r3, [pc, #60]	; (80121ac <LmhpComplianceOnMcpsIndication+0x7b4>)
 801216e:	7a5b      	ldrb	r3, [r3, #9]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d114      	bne.n	801219e <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 8012174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012178:	480c      	ldr	r0, [pc, #48]	; (80121ac <LmhpComplianceOnMcpsIndication+0x7b4>)
 801217a:	f00d fe07 	bl	801fd8c <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 801217e:	480b      	ldr	r0, [pc, #44]	; (80121ac <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012180:	f00d fd26 	bl	801fbd0 <UTIL_TIMER_Start>
 8012184:	e00b      	b.n	801219e <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 8012186:	4809      	ldr	r0, [pc, #36]	; (80121ac <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012188:	f00d fd90 	bl	801fcac <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 801218c:	4b05      	ldr	r3, [pc, #20]	; (80121a4 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801218e:	2200      	movs	r2, #0
 8012190:	705a      	strb	r2, [r3, #1]
 8012192:	e004      	b.n	801219e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012194:	bf00      	nop
 8012196:	e002      	b.n	801219e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012198:	bf00      	nop
 801219a:	e000      	b.n	801219e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 801219c:	bf00      	nop
    }
}
 801219e:	3790      	adds	r7, #144	; 0x90
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bdb0      	pop	{r4, r5, r7, pc}
 80121a4:	200008d8 	.word	0x200008d8
 80121a8:	20000910 	.word	0x20000910
 80121ac:	20000914 	.word	0x20000914

080121b0 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 80121b8:	bf00      	nop
    }
}
 80121ba:	bf00      	nop
 80121bc:	370c      	adds	r7, #12
 80121be:	46bd      	mov	sp, r7
 80121c0:	bc80      	pop	{r7}
 80121c2:	4770      	bx	lr

080121c4 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b083      	sub	sp, #12
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80121cc:	4b05      	ldr	r3, [pc, #20]	; (80121e4 <LmhpComplianceOnMlmeIndication+0x20>)
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	f083 0301 	eor.w	r3, r3, #1
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	2b00      	cmp	r3, #0
    {
        return;
 80121d8:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	bc80      	pop	{r7}
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	200008d8 	.word	0x200008d8

080121e8 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 80121f0:	4b08      	ldr	r3, [pc, #32]	; (8012214 <OnProcessTimer+0x2c>)
 80121f2:	7a9b      	ldrb	r3, [r3, #10]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 80121f8:	4b06      	ldr	r3, [pc, #24]	; (8012214 <OnProcessTimer+0x2c>)
 80121fa:	2201      	movs	r2, #1
 80121fc:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 80121fe:	4b06      	ldr	r3, [pc, #24]	; (8012218 <OnProcessTimer+0x30>)
 8012200:	695b      	ldr	r3, [r3, #20]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 8012206:	4b04      	ldr	r3, [pc, #16]	; (8012218 <OnProcessTimer+0x30>)
 8012208:	695b      	ldr	r3, [r3, #20]
 801220a:	4798      	blx	r3
    }
}
 801220c:	bf00      	nop
 801220e:	3708      	adds	r7, #8
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	200008d8 	.word	0x200008d8
 8012218:	200000d8 	.word	0x200000d8

0801221c <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8012224:	2300      	movs	r3, #0
}
 8012226:	4618      	mov	r0, r3
 8012228:	370c      	adds	r7, #12
 801222a:	46bd      	mov	sp, r7
 801222c:	bc80      	pop	{r7}
 801222e:	4770      	bx	lr

08012230 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	4603      	mov	r3, r0
 8012238:	6039      	str	r1, [r7, #0]
 801223a:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 801223c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	bc80      	pop	{r7}
 8012248:	4770      	bx	lr
	...

0801224c <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 801224c:	b590      	push	{r4, r7, lr}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8012252:	f00d fe45 	bl	801fee0 <UTIL_TIMER_GetCurrentTime>
 8012256:	4603      	mov	r3, r0
 8012258:	4a0f      	ldr	r2, [pc, #60]	; (8012298 <OnRadioTxDone+0x4c>)
 801225a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 801225c:	4c0f      	ldr	r4, [pc, #60]	; (801229c <OnRadioTxDone+0x50>)
 801225e:	463b      	mov	r3, r7
 8012260:	4618      	mov	r0, r3
 8012262:	f00c ff97 	bl	801f194 <SysTimeGet>
 8012266:	f504 734e 	add.w	r3, r4, #824	; 0x338
 801226a:	463a      	mov	r2, r7
 801226c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012270:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8012274:	4a0a      	ldr	r2, [pc, #40]	; (80122a0 <OnRadioTxDone+0x54>)
 8012276:	7813      	ldrb	r3, [r2, #0]
 8012278:	f043 0320 	orr.w	r3, r3, #32
 801227c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801227e:	f003 fa71 	bl	8015764 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8012282:	4b08      	ldr	r3, [pc, #32]	; (80122a4 <OnRadioTxDone+0x58>)
 8012284:	2201      	movs	r2, #1
 8012286:	2100      	movs	r1, #0
 8012288:	2002      	movs	r0, #2
 801228a:	f00d ff19 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 801228e:	bf00      	nop
 8012290:	370c      	adds	r7, #12
 8012292:	46bd      	mov	sp, r7
 8012294:	bd90      	pop	{r4, r7, pc}
 8012296:	bf00      	nop
 8012298:	20001a74 	.word	0x20001a74
 801229c:	2000092c 	.word	0x2000092c
 80122a0:	20001a70 	.word	0x20001a70
 80122a4:	0802180c 	.word	0x0802180c

080122a8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	4608      	mov	r0, r1
 80122b2:	4611      	mov	r1, r2
 80122b4:	461a      	mov	r2, r3
 80122b6:	4603      	mov	r3, r0
 80122b8:	817b      	strh	r3, [r7, #10]
 80122ba:	460b      	mov	r3, r1
 80122bc:	813b      	strh	r3, [r7, #8]
 80122be:	4613      	mov	r3, r2
 80122c0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80122c2:	f00d fe0d 	bl	801fee0 <UTIL_TIMER_GetCurrentTime>
 80122c6:	4603      	mov	r3, r0
 80122c8:	4a11      	ldr	r2, [pc, #68]	; (8012310 <OnRadioRxDone+0x68>)
 80122ca:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 80122cc:	4a10      	ldr	r2, [pc, #64]	; (8012310 <OnRadioRxDone+0x68>)
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 80122d2:	4a0f      	ldr	r2, [pc, #60]	; (8012310 <OnRadioRxDone+0x68>)
 80122d4:	897b      	ldrh	r3, [r7, #10]
 80122d6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 80122d8:	4a0d      	ldr	r2, [pc, #52]	; (8012310 <OnRadioRxDone+0x68>)
 80122da:	893b      	ldrh	r3, [r7, #8]
 80122dc:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 80122de:	4a0c      	ldr	r2, [pc, #48]	; (8012310 <OnRadioRxDone+0x68>)
 80122e0:	79fb      	ldrb	r3, [r7, #7]
 80122e2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 80122e4:	4a0b      	ldr	r2, [pc, #44]	; (8012314 <OnRadioRxDone+0x6c>)
 80122e6:	7813      	ldrb	r3, [r2, #0]
 80122e8:	f043 0310 	orr.w	r3, r3, #16
 80122ec:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80122ee:	4a09      	ldr	r2, [pc, #36]	; (8012314 <OnRadioRxDone+0x6c>)
 80122f0:	7813      	ldrb	r3, [r2, #0]
 80122f2:	f043 0301 	orr.w	r3, r3, #1
 80122f6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 80122f8:	f003 fa34 	bl	8015764 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80122fc:	4b06      	ldr	r3, [pc, #24]	; (8012318 <OnRadioRxDone+0x70>)
 80122fe:	2201      	movs	r2, #1
 8012300:	2100      	movs	r1, #0
 8012302:	2002      	movs	r0, #2
 8012304:	f00d fedc 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012308:	bf00      	nop
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20001a78 	.word	0x20001a78
 8012314:	20001a70 	.word	0x20001a70
 8012318:	0802181c 	.word	0x0802181c

0801231c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 801231c:	b580      	push	{r7, lr}
 801231e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8012320:	4a07      	ldr	r2, [pc, #28]	; (8012340 <OnRadioTxTimeout+0x24>)
 8012322:	7813      	ldrb	r3, [r2, #0]
 8012324:	f043 0308 	orr.w	r3, r3, #8
 8012328:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801232a:	f003 fa1b 	bl	8015764 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 801232e:	4b05      	ldr	r3, [pc, #20]	; (8012344 <OnRadioTxTimeout+0x28>)
 8012330:	2201      	movs	r2, #1
 8012332:	2100      	movs	r1, #0
 8012334:	2002      	movs	r0, #2
 8012336:	f00d fec3 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 801233a:	bf00      	nop
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	20001a70 	.word	0x20001a70
 8012344:	0802182c 	.word	0x0802182c

08012348 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 801234c:	4a04      	ldr	r2, [pc, #16]	; (8012360 <OnRadioRxError+0x18>)
 801234e:	7813      	ldrb	r3, [r2, #0]
 8012350:	f043 0304 	orr.w	r3, r3, #4
 8012354:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012356:	f003 fa05 	bl	8015764 <OnMacProcessNotify>
}
 801235a:	bf00      	nop
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	20001a70 	.word	0x20001a70

08012364 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8012364:	b580      	push	{r7, lr}
 8012366:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8012368:	4a07      	ldr	r2, [pc, #28]	; (8012388 <OnRadioRxTimeout+0x24>)
 801236a:	7813      	ldrb	r3, [r2, #0]
 801236c:	f043 0302 	orr.w	r3, r3, #2
 8012370:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012372:	f003 f9f7 	bl	8015764 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8012376:	4b05      	ldr	r3, [pc, #20]	; (801238c <OnRadioRxTimeout+0x28>)
 8012378:	2201      	movs	r2, #1
 801237a:	2100      	movs	r1, #0
 801237c:	2002      	movs	r0, #2
 801237e:	f00d fe9f 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012382:	bf00      	nop
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	20001a70 	.word	0x20001a70
 801238c:	0802183c 	.word	0x0802183c

08012390 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8012390:	b480      	push	{r7}
 8012392:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012394:	4b08      	ldr	r3, [pc, #32]	; (80123b8 <UpdateRxSlotIdleState+0x28>)
 8012396:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801239a:	2b02      	cmp	r3, #2
 801239c:	d004      	beq.n	80123a8 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 801239e:	4b07      	ldr	r3, [pc, #28]	; (80123bc <UpdateRxSlotIdleState+0x2c>)
 80123a0:	2206      	movs	r2, #6
 80123a2:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80123a6:	e003      	b.n	80123b0 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80123a8:	4b04      	ldr	r3, [pc, #16]	; (80123bc <UpdateRxSlotIdleState+0x2c>)
 80123aa:	2202      	movs	r2, #2
 80123ac:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 80123b0:	bf00      	nop
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bc80      	pop	{r7}
 80123b6:	4770      	bx	lr
 80123b8:	20000e48 	.word	0x20000e48
 80123bc:	2000092c 	.word	0x2000092c

080123c0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b092      	sub	sp, #72	; 0x48
 80123c4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80123c6:	4b4a      	ldr	r3, [pc, #296]	; (80124f0 <ProcessRadioTxDone+0x130>)
 80123c8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80123cc:	2b02      	cmp	r3, #2
 80123ce:	d002      	beq.n	80123d6 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 80123d0:	4b48      	ldr	r3, [pc, #288]	; (80124f4 <ProcessRadioTxDone+0x134>)
 80123d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123d4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123d6:	f3ef 8310 	mrs	r3, PRIMASK
 80123da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80123dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 80123de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 80123e0:	b672      	cpsid	i
}
 80123e2:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 80123e4:	f00d fd7c 	bl	801fee0 <UTIL_TIMER_GetCurrentTime>
 80123e8:	4602      	mov	r2, r0
 80123ea:	4b43      	ldr	r3, [pc, #268]	; (80124f8 <ProcessRadioTxDone+0x138>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	1ad3      	subs	r3, r2, r3
 80123f0:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 80123f2:	4b42      	ldr	r3, [pc, #264]	; (80124fc <ProcessRadioTxDone+0x13c>)
 80123f4:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 80123f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fa:	1ad3      	subs	r3, r2, r3
 80123fc:	4619      	mov	r1, r3
 80123fe:	4840      	ldr	r0, [pc, #256]	; (8012500 <ProcessRadioTxDone+0x140>)
 8012400:	f00d fcc4 	bl	801fd8c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8012404:	483e      	ldr	r0, [pc, #248]	; (8012500 <ProcessRadioTxDone+0x140>)
 8012406:	f00d fbe3 	bl	801fbd0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 801240a:	4b3c      	ldr	r3, [pc, #240]	; (80124fc <ProcessRadioTxDone+0x13c>)
 801240c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8012410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	4619      	mov	r1, r3
 8012416:	483b      	ldr	r0, [pc, #236]	; (8012504 <ProcessRadioTxDone+0x144>)
 8012418:	f00d fcb8 	bl	801fd8c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 801241c:	4839      	ldr	r0, [pc, #228]	; (8012504 <ProcessRadioTxDone+0x144>)
 801241e:	f00d fbd7 	bl	801fbd0 <UTIL_TIMER_Start>
 8012422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012424:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012428:	f383 8810 	msr	PRIMASK, r3
}
 801242c:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 801242e:	4b33      	ldr	r3, [pc, #204]	; (80124fc <ProcessRadioTxDone+0x13c>)
 8012430:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012434:	2b00      	cmp	r3, #0
 8012436:	d01a      	beq.n	801246e <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8012438:	2315      	movs	r3, #21
 801243a:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801243e:	4b2c      	ldr	r3, [pc, #176]	; (80124f0 <ProcessRadioTxDone+0x130>)
 8012440:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012444:	f107 0220 	add.w	r2, r7, #32
 8012448:	4611      	mov	r1, r2
 801244a:	4618      	mov	r0, r3
 801244c:	f006 feb9 	bl	80191c2 <RegionGetPhyParam>
 8012450:	4603      	mov	r3, r0
 8012452:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8012454:	4b29      	ldr	r3, [pc, #164]	; (80124fc <ProcessRadioTxDone+0x13c>)
 8012456:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	4413      	add	r3, r2
 801245e:	4619      	mov	r1, r3
 8012460:	4829      	ldr	r0, [pc, #164]	; (8012508 <ProcessRadioTxDone+0x148>)
 8012462:	f00d fc93 	bl	801fd8c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8012466:	4828      	ldr	r0, [pc, #160]	; (8012508 <ProcessRadioTxDone+0x148>)
 8012468:	f00d fbb2 	bl	801fbd0 <UTIL_TIMER_Start>
 801246c:	e003      	b.n	8012476 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801246e:	4b23      	ldr	r3, [pc, #140]	; (80124fc <ProcessRadioTxDone+0x13c>)
 8012470:	2200      	movs	r2, #0
 8012472:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8012476:	4b20      	ldr	r3, [pc, #128]	; (80124f8 <ProcessRadioTxDone+0x138>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4a1d      	ldr	r2, [pc, #116]	; (80124f0 <ProcessRadioTxDone+0x130>)
 801247c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 801247e:	4b1f      	ldr	r3, [pc, #124]	; (80124fc <ProcessRadioTxDone+0x13c>)
 8012480:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8012484:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8012486:	4b1c      	ldr	r3, [pc, #112]	; (80124f8 <ProcessRadioTxDone+0x138>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801248c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012490:	4618      	mov	r0, r3
 8012492:	f00c feb7 	bl	801f204 <SysTimeGetMcuTime>
 8012496:	4638      	mov	r0, r7
 8012498:	4b15      	ldr	r3, [pc, #84]	; (80124f0 <ProcessRadioTxDone+0x130>)
 801249a:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 801249e:	9200      	str	r2, [sp, #0]
 80124a0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80124a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80124a8:	ca06      	ldmia	r2, {r1, r2}
 80124aa:	f00c fe0c 	bl	801f0c6 <SysTimeSub>
 80124ae:	f107 0314 	add.w	r3, r7, #20
 80124b2:	463a      	mov	r2, r7
 80124b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124b8:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80124bc:	4b0f      	ldr	r3, [pc, #60]	; (80124fc <ProcessRadioTxDone+0x13c>)
 80124be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80124c2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 80124c4:	2301      	movs	r3, #1
 80124c6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80124c8:	4b09      	ldr	r3, [pc, #36]	; (80124f0 <ProcessRadioTxDone+0x130>)
 80124ca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d101      	bne.n	80124d6 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 80124d2:	2300      	movs	r3, #0
 80124d4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80124d6:	4b06      	ldr	r3, [pc, #24]	; (80124f0 <ProcessRadioTxDone+0x130>)
 80124d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80124dc:	f107 0208 	add.w	r2, r7, #8
 80124e0:	4611      	mov	r1, r2
 80124e2:	4618      	mov	r0, r3
 80124e4:	f006 fe85 	bl	80191f2 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 80124e8:	bf00      	nop
 80124ea:	3740      	adds	r7, #64	; 0x40
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	20000e48 	.word	0x20000e48
 80124f4:	08021f14 	.word	0x08021f14
 80124f8:	20001a74 	.word	0x20001a74
 80124fc:	2000092c 	.word	0x2000092c
 8012500:	20000cac 	.word	0x20000cac
 8012504:	20000cc4 	.word	0x20000cc4
 8012508:	20000d2c 	.word	0x20000d2c

0801250c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 801250c:	b580      	push	{r7, lr}
 801250e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8012510:	4b10      	ldr	r3, [pc, #64]	; (8012554 <PrepareRxDoneAbort+0x48>)
 8012512:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801251a:	4a0e      	ldr	r2, [pc, #56]	; (8012554 <PrepareRxDoneAbort+0x48>)
 801251c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8012520:	4b0c      	ldr	r3, [pc, #48]	; (8012554 <PrepareRxDoneAbort+0x48>)
 8012522:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012526:	2b00      	cmp	r3, #0
 8012528:	d002      	beq.n	8012530 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 801252a:	2000      	movs	r0, #0
 801252c:	f001 f9fa 	bl	8013924 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8012530:	4a08      	ldr	r2, [pc, #32]	; (8012554 <PrepareRxDoneAbort+0x48>)
 8012532:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012536:	f043 0302 	orr.w	r3, r3, #2
 801253a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 801253e:	4a05      	ldr	r2, [pc, #20]	; (8012554 <PrepareRxDoneAbort+0x48>)
 8012540:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012544:	f043 0310 	orr.w	r3, r3, #16
 8012548:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 801254c:	f7ff ff20 	bl	8012390 <UpdateRxSlotIdleState>
}
 8012550:	bf00      	nop
 8012552:	bd80      	pop	{r7, pc}
 8012554:	2000092c 	.word	0x2000092c

08012558 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8012558:	b590      	push	{r4, r7, lr}
 801255a:	b0ab      	sub	sp, #172	; 0xac
 801255c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801255e:	2312      	movs	r3, #18
 8012560:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8012564:	4b81      	ldr	r3, [pc, #516]	; (801276c <ProcessRadioRxDone+0x214>)
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 801256c:	4b7f      	ldr	r3, [pc, #508]	; (801276c <ProcessRadioRxDone+0x214>)
 801256e:	891b      	ldrh	r3, [r3, #8]
 8012570:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 8012574:	4b7d      	ldr	r3, [pc, #500]	; (801276c <ProcessRadioRxDone+0x214>)
 8012576:	895b      	ldrh	r3, [r3, #10]
 8012578:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 801257c:	4b7b      	ldr	r3, [pc, #492]	; (801276c <ProcessRadioRxDone+0x214>)
 801257e:	7b1b      	ldrb	r3, [r3, #12]
 8012580:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 8012584:	2300      	movs	r3, #0
 8012586:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 801258a:	2300      	movs	r3, #0
 801258c:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 801258e:	4b78      	ldr	r3, [pc, #480]	; (8012770 <ProcessRadioRxDone+0x218>)
 8012590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8012594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8012598:	2300      	movs	r3, #0
 801259a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 801259e:	2301      	movs	r3, #1
 80125a0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 80125a4:	2301      	movs	r3, #1
 80125a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80125aa:	4a72      	ldr	r2, [pc, #456]	; (8012774 <ProcessRadioRxDone+0x21c>)
 80125ac:	7813      	ldrb	r3, [r2, #0]
 80125ae:	f36f 0300 	bfc	r3, #0, #1
 80125b2:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 80125b4:	4b70      	ldr	r3, [pc, #448]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125b6:	2200      	movs	r2, #0
 80125b8:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 80125bc:	4a6e      	ldr	r2, [pc, #440]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125be:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80125c2:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 80125c6:	4a6c      	ldr	r2, [pc, #432]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80125cc:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80125d0:	4b69      	ldr	r3, [pc, #420]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125d2:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 80125d6:	4b68      	ldr	r3, [pc, #416]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125d8:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 80125dc:	4b66      	ldr	r3, [pc, #408]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125de:	2200      	movs	r2, #0
 80125e0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 80125e4:	4b64      	ldr	r3, [pc, #400]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 80125ec:	4b62      	ldr	r3, [pc, #392]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125ee:	2200      	movs	r2, #0
 80125f0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 80125f4:	4b60      	ldr	r3, [pc, #384]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125f6:	2200      	movs	r2, #0
 80125f8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 80125fc:	4b5e      	ldr	r3, [pc, #376]	; (8012778 <ProcessRadioRxDone+0x220>)
 80125fe:	2200      	movs	r2, #0
 8012600:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8012604:	4b5c      	ldr	r3, [pc, #368]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012606:	2200      	movs	r2, #0
 8012608:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 801260c:	4b5a      	ldr	r3, [pc, #360]	; (8012778 <ProcessRadioRxDone+0x220>)
 801260e:	2200      	movs	r2, #0
 8012610:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8012614:	4b58      	ldr	r3, [pc, #352]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012616:	2200      	movs	r2, #0
 8012618:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801261c:	4b56      	ldr	r3, [pc, #344]	; (8012778 <ProcessRadioRxDone+0x220>)
 801261e:	2200      	movs	r2, #0
 8012620:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8012624:	4b54      	ldr	r3, [pc, #336]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012626:	2200      	movs	r2, #0
 8012628:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801262c:	4b52      	ldr	r3, [pc, #328]	; (8012778 <ProcessRadioRxDone+0x220>)
 801262e:	2200      	movs	r2, #0
 8012630:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8012634:	4b50      	ldr	r3, [pc, #320]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012636:	2200      	movs	r2, #0
 8012638:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 801263c:	4b4f      	ldr	r3, [pc, #316]	; (801277c <ProcessRadioRxDone+0x224>)
 801263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012640:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8012642:	4b4d      	ldr	r3, [pc, #308]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012644:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012648:	2b00      	cmp	r3, #0
 801264a:	d102      	bne.n	8012652 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 801264c:	484c      	ldr	r0, [pc, #304]	; (8012780 <ProcessRadioRxDone+0x228>)
 801264e:	f00d fb2d 	bl	801fcac <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8012652:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012656:	4619      	mov	r1, r3
 8012658:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801265c:	f004 fe28 	bl	80172b0 <LoRaMacClassBRxBeacon>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d00b      	beq.n	801267e <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8012666:	4a44      	ldr	r2, [pc, #272]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012668:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 801266c:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8012670:	4a41      	ldr	r2, [pc, #260]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012672:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012676:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 801267a:	f000 bc75 	b.w	8012f68 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801267e:	4b3c      	ldr	r3, [pc, #240]	; (8012770 <ProcessRadioRxDone+0x218>)
 8012680:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012684:	2b01      	cmp	r3, #1
 8012686:	d11e      	bne.n	80126c6 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012688:	f004 fe25 	bl	80172d6 <LoRaMacClassBIsPingExpected>
 801268c:	4603      	mov	r3, r0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d00a      	beq.n	80126a8 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012692:	2000      	movs	r0, #0
 8012694:	f004 fdd6 	bl	8017244 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8012698:	2000      	movs	r0, #0
 801269a:	f004 fdf7 	bl	801728c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801269e:	4b36      	ldr	r3, [pc, #216]	; (8012778 <ProcessRadioRxDone+0x220>)
 80126a0:	2204      	movs	r2, #4
 80126a2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80126a6:	e00e      	b.n	80126c6 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80126a8:	f004 fe1c 	bl	80172e4 <LoRaMacClassBIsMulticastExpected>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d009      	beq.n	80126c6 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80126b2:	2000      	movs	r0, #0
 80126b4:	f004 fdd0 	bl	8017258 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80126b8:	2000      	movs	r0, #0
 80126ba:	f004 fdf0 	bl	801729e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80126be:	4b2e      	ldr	r3, [pc, #184]	; (8012778 <ProcessRadioRxDone+0x220>)
 80126c0:	2205      	movs	r2, #5
 80126c2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 80126c6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d107      	bne.n	80126de <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80126ce:	4b2a      	ldr	r3, [pc, #168]	; (8012778 <ProcessRadioRxDone+0x220>)
 80126d0:	2201      	movs	r2, #1
 80126d2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 80126d6:	f7ff ff19 	bl	801250c <PrepareRxDoneAbort>
        return;
 80126da:	f000 bc45 	b.w	8012f68 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 80126de:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 80126e8:	461a      	mov	r2, r3
 80126ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80126ee:	4413      	add	r3, r2
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80126f6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80126fa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	3b01      	subs	r3, #1
 8012702:	2b06      	cmp	r3, #6
 8012704:	f200 8403 	bhi.w	8012f0e <ProcessRadioRxDone+0x9b6>
 8012708:	a201      	add	r2, pc, #4	; (adr r2, 8012710 <ProcessRadioRxDone+0x1b8>)
 801270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801270e:	bf00      	nop
 8012710:	0801272d 	.word	0x0801272d
 8012714:	08012f0f 	.word	0x08012f0f
 8012718:	0801292b 	.word	0x0801292b
 801271c:	08012f0f 	.word	0x08012f0f
 8012720:	08012923 	.word	0x08012923
 8012724:	08012f0f 	.word	0x08012f0f
 8012728:	08012eb3 	.word	0x08012eb3
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 801272c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012730:	2b10      	cmp	r3, #16
 8012732:	d807      	bhi.n	8012744 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012734:	4b10      	ldr	r3, [pc, #64]	; (8012778 <ProcessRadioRxDone+0x220>)
 8012736:	2201      	movs	r2, #1
 8012738:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801273c:	f7ff fee6 	bl	801250c <PrepareRxDoneAbort>
                return;
 8012740:	f000 bc12 	b.w	8012f68 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 8012744:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012748:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 801274a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801274e:	b2db      	uxtb	r3, r3
 8012750:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012752:	4b07      	ldr	r3, [pc, #28]	; (8012770 <ProcessRadioRxDone+0x218>)
 8012754:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012758:	2b00      	cmp	r3, #0
 801275a:	d013      	beq.n	8012784 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801275c:	4b06      	ldr	r3, [pc, #24]	; (8012778 <ProcessRadioRxDone+0x220>)
 801275e:	2201      	movs	r2, #1
 8012760:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012764:	f7ff fed2 	bl	801250c <PrepareRxDoneAbort>
                return;
 8012768:	e3fe      	b.n	8012f68 <ProcessRadioRxDone+0xa10>
 801276a:	bf00      	nop
 801276c:	20001a78 	.word	0x20001a78
 8012770:	20000e48 	.word	0x20000e48
 8012774:	20001a70 	.word	0x20001a70
 8012778:	2000092c 	.word	0x2000092c
 801277c:	08021f14 	.word	0x08021f14
 8012780:	20000cc4 	.word	0x20000cc4
            }

            SecureElementGetJoinEui( joinEui );
 8012784:	f107 0308 	add.w	r3, r7, #8
 8012788:	4618      	mov	r0, r3
 801278a:	f7fd ff79 	bl	8010680 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 801278e:	f107 0218 	add.w	r2, r7, #24
 8012792:	f107 0308 	add.w	r3, r7, #8
 8012796:	4619      	mov	r1, r3
 8012798:	20ff      	movs	r0, #255	; 0xff
 801279a:	f005 ff93 	bl	80186c4 <LoRaMacCryptoHandleJoinAccept>
 801279e:	4603      	mov	r3, r0
 80127a0:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 80127a4:	2300      	movs	r3, #0
 80127a6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80127aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80127ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	b25b      	sxtb	r3, r3
 80127b6:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127b8:	4bb1      	ldr	r3, [pc, #708]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80127ba:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80127be:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 80127c0:	4baf      	ldr	r3, [pc, #700]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80127c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127c6:	1d39      	adds	r1, r7, #4
 80127c8:	2207      	movs	r2, #7
 80127ca:	4618      	mov	r0, r3
 80127cc:	f006 fd34 	bl	8019238 <RegionVerify>
 80127d0:	4603      	mov	r3, r0
 80127d2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80127d6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f040 8095 	bne.w	801290a <ProcessRadioRxDone+0x3b2>
 80127e0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	f000 8090 	beq.w	801290a <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80127ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80127ee:	461a      	mov	r2, r3
 80127f0:	4ba3      	ldr	r3, [pc, #652]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80127f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80127f6:	4ba2      	ldr	r3, [pc, #648]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80127f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80127fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012800:	021b      	lsls	r3, r3, #8
 8012802:	4313      	orrs	r3, r2
 8012804:	4a9e      	ldr	r2, [pc, #632]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 801280a:	4b9d      	ldr	r3, [pc, #628]	; (8012a80 <ProcessRadioRxDone+0x528>)
 801280c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8012810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012814:	041b      	lsls	r3, r3, #16
 8012816:	4313      	orrs	r3, r2
 8012818:	4a99      	ldr	r2, [pc, #612]	; (8012a80 <ProcessRadioRxDone+0x528>)
 801281a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 801281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012820:	4a97      	ldr	r2, [pc, #604]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012822:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8012826:	4b96      	ldr	r3, [pc, #600]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012828:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801282c:	4619      	mov	r1, r3
 801282e:	2002      	movs	r0, #2
 8012830:	f7fd ff3e 	bl	80106b0 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8012834:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012838:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801283c:	b2db      	uxtb	r3, r3
 801283e:	461a      	mov	r2, r3
 8012840:	4b8f      	ldr	r3, [pc, #572]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012842:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8012846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801284a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801284e:	b2db      	uxtb	r3, r3
 8012850:	461a      	mov	r2, r3
 8012852:	4b8b      	ldr	r3, [pc, #556]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012854:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8012858:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801285c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012860:	b2db      	uxtb	r3, r3
 8012862:	461a      	mov	r2, r3
 8012864:	4b86      	ldr	r3, [pc, #536]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012866:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801286a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801286e:	461a      	mov	r2, r3
 8012870:	4b83      	ldr	r3, [pc, #524]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012872:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8012874:	4b82      	ldr	r3, [pc, #520]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012878:	2b00      	cmp	r3, #0
 801287a:	d102      	bne.n	8012882 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 801287c:	4b80      	ldr	r3, [pc, #512]	; (8012a80 <ProcessRadioRxDone+0x528>)
 801287e:	2201      	movs	r2, #1
 8012880:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8012882:	4b7f      	ldr	r3, [pc, #508]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801288a:	fb02 f303 	mul.w	r3, r2, r3
 801288e:	4a7c      	ldr	r2, [pc, #496]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012890:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012892:	4b7b      	ldr	r3, [pc, #492]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012896:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801289a:	4a79      	ldr	r2, [pc, #484]	; (8012a80 <ProcessRadioRxDone+0x528>)
 801289c:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 801289e:	4b78      	ldr	r3, [pc, #480]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80128a0:	2201      	movs	r2, #1
 80128a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80128a6:	4b76      	ldr	r3, [pc, #472]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80128a8:	2200      	movs	r2, #0
 80128aa:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80128ae:	f107 0318 	add.w	r3, r7, #24
 80128b2:	3312      	adds	r3, #18
 80128b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 80128b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	3b11      	subs	r3, #17
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 80128c6:	4b6f      	ldr	r3, [pc, #444]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 80128c8:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80128cc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80128d0:	4b6b      	ldr	r3, [pc, #428]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80128d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128d6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80128da:	4611      	mov	r1, r2
 80128dc:	4618      	mov	r0, r3
 80128de:	f006 fcc2 	bl	8019266 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80128e2:	4b67      	ldr	r3, [pc, #412]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80128e4:	2202      	movs	r2, #2
 80128e6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80128ea:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80128ee:	4618      	mov	r0, r3
 80128f0:	f005 f9f2 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 8311 	beq.w	8012f1e <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80128fc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8012900:	4619      	mov	r1, r3
 8012902:	2000      	movs	r0, #0
 8012904:	f005 f95c 	bl	8017bc0 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8012908:	e309      	b.n	8012f1e <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801290a:	2001      	movs	r0, #1
 801290c:	f005 f9e4 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 8012910:	4603      	mov	r3, r0
 8012912:	2b00      	cmp	r3, #0
 8012914:	f000 8302 	beq.w	8012f1c <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8012918:	2101      	movs	r1, #1
 801291a:	2007      	movs	r0, #7
 801291c:	f005 f950 	bl	8017bc0 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8012920:	e2fc      	b.n	8012f1c <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8012922:	4b58      	ldr	r3, [pc, #352]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 8012924:	2201      	movs	r2, #1
 8012926:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801292a:	4b55      	ldr	r3, [pc, #340]	; (8012a80 <ProcessRadioRxDone+0x528>)
 801292c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012930:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8012934:	4b53      	ldr	r3, [pc, #332]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 8012936:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 801293a:	b25b      	sxtb	r3, r3
 801293c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012940:	230d      	movs	r3, #13
 8012942:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012946:	4b4e      	ldr	r3, [pc, #312]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012948:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801294c:	2b00      	cmp	r3, #0
 801294e:	d002      	beq.n	8012956 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012950:	230e      	movs	r3, #14
 8012952:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012956:	4b4a      	ldr	r3, [pc, #296]	; (8012a80 <ProcessRadioRxDone+0x528>)
 8012958:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801295c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8012960:	4611      	mov	r1, r2
 8012962:	4618      	mov	r0, r3
 8012964:	f006 fc2d 	bl	80191c2 <RegionGetPhyParam>
 8012968:	4603      	mov	r3, r0
 801296a:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 801296c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012970:	3b0d      	subs	r3, #13
 8012972:	b29b      	uxth	r3, r3
 8012974:	b21b      	sxth	r3, r3
 8012976:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801297a:	b21a      	sxth	r2, r3
 801297c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801297e:	b21b      	sxth	r3, r3
 8012980:	429a      	cmp	r2, r3
 8012982:	dc03      	bgt.n	801298c <ProcessRadioRxDone+0x434>
 8012984:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012988:	2b0b      	cmp	r3, #11
 801298a:	d806      	bhi.n	801299a <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801298c:	4b3d      	ldr	r3, [pc, #244]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 801298e:	2201      	movs	r2, #1
 8012990:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012994:	f7ff fdba 	bl	801250c <PrepareRxDoneAbort>
                return;
 8012998:	e2e6      	b.n	8012f68 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 801299a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801299e:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 80129a0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80129aa:	4b37      	ldr	r3, [pc, #220]	; (8012a88 <ProcessRadioRxDone+0x530>)
 80129ac:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80129ae:	23ff      	movs	r3, #255	; 0xff
 80129b0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80129b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80129b8:	4618      	mov	r0, r3
 80129ba:	f006 f985 	bl	8018cc8 <LoRaMacParserData>
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d006      	beq.n	80129d2 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80129c4:	4b2f      	ldr	r3, [pc, #188]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 80129c6:	2201      	movs	r2, #1
 80129c8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80129cc:	f7ff fd9e 	bl	801250c <PrepareRxDoneAbort>
                return;
 80129d0:	e2ca      	b.n	8012f68 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80129d2:	4b2b      	ldr	r3, [pc, #172]	; (8012a80 <ProcessRadioRxDone+0x528>)
 80129d4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d132      	bne.n	8012a42 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 80129dc:	f004 fc7b 	bl	80172d6 <LoRaMacClassBIsPingExpected>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d014      	beq.n	8012a10 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80129e6:	2000      	movs	r0, #0
 80129e8:	f004 fc2c 	bl	8017244 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80129ec:	2000      	movs	r0, #0
 80129ee:	f004 fc4d 	bl	801728c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80129f2:	4b24      	ldr	r3, [pc, #144]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 80129f4:	2204      	movs	r2, #4
 80129f6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80129fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012a00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	4619      	mov	r1, r3
 8012a08:	4610      	mov	r0, r2
 8012a0a:	f004 fced 	bl	80173e8 <LoRaMacClassBSetFPendingBit>
 8012a0e:	e018      	b.n	8012a42 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012a10:	f004 fc68 	bl	80172e4 <LoRaMacClassBIsMulticastExpected>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d013      	beq.n	8012a42 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	f004 fc1c 	bl	8017258 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8012a20:	2000      	movs	r0, #0
 8012a22:	f004 fc3c 	bl	801729e <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8012a26:	4b17      	ldr	r3, [pc, #92]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 8012a28:	2205      	movs	r2, #5
 8012a2a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8012a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a30:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012a34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	f004 fcd3 	bl	80173e8 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8012a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a44:	4a0f      	ldr	r2, [pc, #60]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 8012a46:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8012a4a:	f107 0212 	add.w	r2, r7, #18
 8012a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012a52:	4611      	mov	r1, r2
 8012a54:	4618      	mov	r0, r3
 8012a56:	f002 fd81 	bl	801555c <DetermineFrameType>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d006      	beq.n	8012a6e <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a60:	4b08      	ldr	r3, [pc, #32]	; (8012a84 <ProcessRadioRxDone+0x52c>)
 8012a62:	2201      	movs	r2, #1
 8012a64:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012a68:	f7ff fd50 	bl	801250c <PrepareRxDoneAbort>
                return;
 8012a6c:	e27c      	b.n	8012f68 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 8012a74:	2300      	movs	r3, #0
 8012a76:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012a78:	2300      	movs	r3, #0
 8012a7a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8012a7e:	e055      	b.n	8012b2c <ProcessRadioRxDone+0x5d4>
 8012a80:	20000e48 	.word	0x20000e48
 8012a84:	2000092c 	.word	0x2000092c
 8012a88:	20000b64 	.word	0x20000b64
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8012a8c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012a90:	499f      	ldr	r1, [pc, #636]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012a92:	4613      	mov	r3, r2
 8012a94:	005b      	lsls	r3, r3, #1
 8012a96:	4413      	add	r3, r2
 8012a98:	011b      	lsls	r3, r3, #4
 8012a9a:	440b      	add	r3, r1
 8012a9c:	33ec      	adds	r3, #236	; 0xec
 8012a9e:	681a      	ldr	r2, [r3, #0]
 8012aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d13d      	bne.n	8012b22 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8012aa6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012aaa:	4999      	ldr	r1, [pc, #612]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012aac:	4613      	mov	r3, r2
 8012aae:	005b      	lsls	r3, r3, #1
 8012ab0:	4413      	add	r3, r2
 8012ab2:	011b      	lsls	r3, r3, #4
 8012ab4:	440b      	add	r3, r1
 8012ab6:	33e9      	adds	r3, #233	; 0xe9
 8012ab8:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d031      	beq.n	8012b22 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8012ac4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012ac8:	4991      	ldr	r1, [pc, #580]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012aca:	4613      	mov	r3, r2
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	4413      	add	r3, r2
 8012ad0:	011b      	lsls	r3, r3, #4
 8012ad2:	440b      	add	r3, r1
 8012ad4:	33ea      	adds	r3, #234	; 0xea
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8012adc:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012ae0:	498b      	ldr	r1, [pc, #556]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012ae2:	4613      	mov	r3, r2
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	4413      	add	r3, r2
 8012ae8:	011b      	lsls	r3, r3, #4
 8012aea:	440b      	add	r3, r1
 8012aec:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8012af6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012afa:	4985      	ldr	r1, [pc, #532]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012afc:	4613      	mov	r3, r2
 8012afe:	005b      	lsls	r3, r3, #1
 8012b00:	4413      	add	r3, r2
 8012b02:	011b      	lsls	r3, r3, #4
 8012b04:	440b      	add	r3, r1
 8012b06:	33ec      	adds	r3, #236	; 0xec
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8012b0e:	4b80      	ldr	r3, [pc, #512]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012b10:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012b14:	2b02      	cmp	r3, #2
 8012b16:	d10e      	bne.n	8012b36 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8012b18:	4b7e      	ldr	r3, [pc, #504]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012b1a:	2203      	movs	r2, #3
 8012b1c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 8012b20:	e009      	b.n	8012b36 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012b22:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8012b26:	3301      	adds	r3, #1
 8012b28:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8012b2c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d0ab      	beq.n	8012a8c <ProcessRadioRxDone+0x534>
 8012b34:	e000      	b.n	8012b38 <ProcessRadioRxDone+0x5e0>
                    break;
 8012b36:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8012b38:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d117      	bne.n	8012b70 <ProcessRadioRxDone+0x618>
 8012b40:	7cbb      	ldrb	r3, [r7, #18]
 8012b42:	2b03      	cmp	r3, #3
 8012b44:	d10d      	bne.n	8012b62 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8012b46:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012b4a:	f003 0320 	and.w	r3, r3, #32
 8012b4e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d106      	bne.n	8012b62 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8012b54:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b5c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d006      	beq.n	8012b70 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b62:	4b6c      	ldr	r3, [pc, #432]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012b64:	2201      	movs	r2, #1
 8012b66:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012b6a:	f7ff fccf 	bl	801250c <PrepareRxDoneAbort>
                return;
 8012b6e:	e1fb      	b.n	8012f68 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8012b70:	7cb9      	ldrb	r1, [r7, #18]
 8012b72:	4c67      	ldr	r4, [pc, #412]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012b74:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012b78:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8012b7c:	f107 0314 	add.w	r3, r7, #20
 8012b80:	9301      	str	r3, [sp, #4]
 8012b82:	f107 0313 	add.w	r3, r7, #19
 8012b86:	9300      	str	r3, [sp, #0]
 8012b88:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8012b8c:	f000 fee4 	bl	8013958 <GetFCntDown>
 8012b90:	4603      	mov	r3, r0
 8012b92:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012b96:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d017      	beq.n	8012bce <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8012b9e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012ba2:	2b07      	cmp	r3, #7
 8012ba4:	d104      	bne.n	8012bb0 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8012ba6:	4b5b      	ldr	r3, [pc, #364]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012ba8:	2208      	movs	r2, #8
 8012baa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8012bae:	e003      	b.n	8012bb8 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012bb0:	4b58      	ldr	r3, [pc, #352]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	4a56      	ldr	r2, [pc, #344]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012bbc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	4a54      	ldr	r2, [pc, #336]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012bc4:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8012bc8:	f7ff fca0 	bl	801250c <PrepareRxDoneAbort>
                return;
 8012bcc:	e1cc      	b.n	8012f68 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8012bce:	7cfa      	ldrb	r2, [r7, #19]
 8012bd0:	6979      	ldr	r1, [r7, #20]
 8012bd2:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8012bd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	460b      	mov	r3, r1
 8012bde:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012be2:	f005 fed1 	bl	8018988 <LoRaMacCryptoUnsecureMessage>
 8012be6:	4603      	mov	r3, r0
 8012be8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012bec:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d00f      	beq.n	8012c14 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8012bf4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012bf8:	2b02      	cmp	r3, #2
 8012bfa:	d104      	bne.n	8012c06 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8012bfc:	4b45      	ldr	r3, [pc, #276]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012bfe:	220a      	movs	r2, #10
 8012c00:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8012c04:	e003      	b.n	8012c0e <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8012c06:	4b43      	ldr	r3, [pc, #268]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c08:	220b      	movs	r2, #11
 8012c0a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 8012c0e:	f7ff fc7d 	bl	801250c <PrepareRxDoneAbort>
                return;
 8012c12:	e1a9      	b.n	8012f68 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012c14:	4b3f      	ldr	r3, [pc, #252]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8012c1c:	4a3d      	ldr	r2, [pc, #244]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c1e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012c22:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8012c26:	4b3b      	ldr	r3, [pc, #236]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8012c2e:	4b39      	ldr	r3, [pc, #228]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c30:	2200      	movs	r2, #0
 8012c32:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	4a36      	ldr	r2, [pc, #216]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c3a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	4a34      	ldr	r2, [pc, #208]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c42:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8012c46:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012c4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	bf14      	ite	ne
 8012c54:	2301      	movne	r3, #1
 8012c56:	2300      	moveq	r3, #0
 8012c58:	b2da      	uxtb	r2, r3
 8012c5a:	4b2e      	ldr	r3, [pc, #184]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c5c:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012c60:	4b2c      	ldr	r3, [pc, #176]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c62:	2200      	movs	r2, #0
 8012c64:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8012c68:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012c6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	bf14      	ite	ne
 8012c76:	2301      	movne	r3, #1
 8012c78:	2300      	moveq	r3, #0
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	4b25      	ldr	r3, [pc, #148]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c7e:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012c82:	4b24      	ldr	r3, [pc, #144]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c84:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d004      	beq.n	8012c96 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012c8c:	4b21      	ldr	r3, [pc, #132]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012c8e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d106      	bne.n	8012ca4 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8012c96:	4b1e      	ldr	r3, [pc, #120]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012c98:	2200      	movs	r2, #0
 8012c9a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8012c9c:	4b1c      	ldr	r3, [pc, #112]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8012ca4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012ca8:	2b01      	cmp	r3, #1
 8012caa:	d104      	bne.n	8012cb6 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8012cac:	4b19      	ldr	r3, [pc, #100]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012cae:	2202      	movs	r2, #2
 8012cb0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8012cb4:	e03a      	b.n	8012d2c <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8012cb6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8012cba:	f023 031f 	bic.w	r3, r3, #31
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	2ba0      	cmp	r3, #160	; 0xa0
 8012cc2:	d12b      	bne.n	8012d1c <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8012cc4:	4b12      	ldr	r3, [pc, #72]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8012ccc:	4b10      	ldr	r3, [pc, #64]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012cce:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d102      	bne.n	8012cdc <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8012cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012cd8:	4a0d      	ldr	r2, [pc, #52]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012cda:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8012cdc:	4b0d      	ldr	r3, [pc, #52]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012cde:	2201      	movs	r2, #1
 8012ce0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012ce4:	4b0b      	ldr	r3, [pc, #44]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012ce6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d01e      	beq.n	8012d2c <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8012cee:	4b09      	ldr	r3, [pc, #36]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012cf0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d019      	beq.n	8012d2c <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012cf8:	4b05      	ldr	r3, [pc, #20]	; (8012d10 <ProcessRadioRxDone+0x7b8>)
 8012cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012cfe:	4a05      	ldr	r2, [pc, #20]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012d00:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8012d04:	4b04      	ldr	r3, [pc, #16]	; (8012d18 <ProcessRadioRxDone+0x7c0>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	4a02      	ldr	r2, [pc, #8]	; (8012d14 <ProcessRadioRxDone+0x7bc>)
 8012d0a:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 8012d0e:	e00d      	b.n	8012d2c <ProcessRadioRxDone+0x7d4>
 8012d10:	20000e48 	.word	0x20000e48
 8012d14:	2000092c 	.word	0x2000092c
 8012d18:	20001a78 	.word	0x20001a78
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8012d1c:	4b94      	ldr	r3, [pc, #592]	; (8012f70 <ProcessRadioRxDone+0xa18>)
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8012d24:	4b93      	ldr	r3, [pc, #588]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012d26:	2200      	movs	r2, #0
 8012d28:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8012d2c:	4b90      	ldr	r3, [pc, #576]	; (8012f70 <ProcessRadioRxDone+0xa18>)
 8012d2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d106      	bne.n	8012d44 <ProcessRadioRxDone+0x7ec>
 8012d36:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012d3a:	f003 0310 	and.w	r3, r3, #16
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d008      	beq.n	8012d56 <ProcessRadioRxDone+0x7fe>
 8012d44:	4b8a      	ldr	r3, [pc, #552]	; (8012f70 <ProcessRadioRxDone+0xa18>)
 8012d46:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d103      	bne.n	8012d56 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8012d4e:	4b89      	ldr	r3, [pc, #548]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012d50:	2201      	movs	r2, #1
 8012d52:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8012d56:	4b87      	ldr	r3, [pc, #540]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012d58:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012d5c:	4a85      	ldr	r2, [pc, #532]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012d5e:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 8012d62:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8012d66:	4618      	mov	r0, r3
 8012d68:	f001 ff8a 	bl	8014c80 <RemoveMacCommands>

            switch( fType )
 8012d6c:	7cbb      	ldrb	r3, [r7, #18]
 8012d6e:	2b03      	cmp	r3, #3
 8012d70:	d873      	bhi.n	8012e5a <ProcessRadioRxDone+0x902>
 8012d72:	a201      	add	r2, pc, #4	; (adr r2, 8012d78 <ProcessRadioRxDone+0x820>)
 8012d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d78:	08012d89 	.word	0x08012d89
 8012d7c:	08012dd9 	.word	0x08012dd9
 8012d80:	08012e0f 	.word	0x08012e0f
 8012d84:	08012e35 	.word	0x08012e35
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8012d88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012d8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	461c      	mov	r4, r3
 8012d94:	4b77      	ldr	r3, [pc, #476]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012d96:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012d9a:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012d9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012da2:	f102 0010 	add.w	r0, r2, #16
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	460b      	mov	r3, r1
 8012daa:	4622      	mov	r2, r4
 8012dac:	2100      	movs	r1, #0
 8012dae:	f000 ff4f 	bl	8013c50 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012db2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012db6:	4b6f      	ldr	r3, [pc, #444]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012db8:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8012dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dbe:	4a6d      	ldr	r2, [pc, #436]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012dc0:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8012dc4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012dc8:	4b6a      	ldr	r3, [pc, #424]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012dca:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8012dce:	4b69      	ldr	r3, [pc, #420]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8012dd6:	e047      	b.n	8012e68 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8012dd8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012ddc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012de0:	b2db      	uxtb	r3, r3
 8012de2:	461c      	mov	r4, r3
 8012de4:	4b63      	ldr	r3, [pc, #396]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012de6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012dea:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012dee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012df2:	f102 0010 	add.w	r0, r2, #16
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	4622      	mov	r2, r4
 8012dfc:	2100      	movs	r1, #0
 8012dfe:	f000 ff27 	bl	8013c50 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012e02:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012e06:	4b5b      	ldr	r3, [pc, #364]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e08:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8012e0c:	e02c      	b.n	8012e68 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8012e0e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012e10:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012e14:	4b57      	ldr	r3, [pc, #348]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e16:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012e1a:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	460b      	mov	r3, r1
 8012e22:	2100      	movs	r1, #0
 8012e24:	f000 ff14 	bl	8013c50 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012e28:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012e2c:	4b51      	ldr	r3, [pc, #324]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e2e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8012e32:	e019      	b.n	8012e68 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012e34:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012e38:	4b4e      	ldr	r3, [pc, #312]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e3a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8012e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e40:	4a4c      	ldr	r2, [pc, #304]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e42:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8012e46:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012e4a:	4b4a      	ldr	r3, [pc, #296]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e4c:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8012e50:	4b48      	ldr	r3, [pc, #288]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e52:	2201      	movs	r2, #1
 8012e54:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8012e58:	e006      	b.n	8012e68 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e5a:	4b46      	ldr	r3, [pc, #280]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8012e62:	f7ff fb53 	bl	801250c <PrepareRxDoneAbort>
                    break;
 8012e66:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8012e68:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8012e6c:	2be0      	cmp	r3, #224	; 0xe0
 8012e6e:	d118      	bne.n	8012ea2 <ProcessRadioRxDone+0x94a>
 8012e70:	4b3f      	ldr	r3, [pc, #252]	; (8012f70 <ProcessRadioRxDone+0xa18>)
 8012e72:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8012e76:	f083 0301 	eor.w	r3, r3, #1
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d010      	beq.n	8012ea2 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012e80:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012e84:	4b3b      	ldr	r3, [pc, #236]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e86:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8012e8a:	4b3a      	ldr	r3, [pc, #232]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8012e92:	4b38      	ldr	r3, [pc, #224]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8012e9a:	4b36      	ldr	r3, [pc, #216]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8012ea2:	4a34      	ldr	r2, [pc, #208]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012ea4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012ea8:	f043 0302 	orr.w	r3, r3, #2
 8012eac:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8012eb0:	e035      	b.n	8012f1e <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8012eb2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012eba:	18d1      	adds	r1, r2, r3
 8012ebc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	461a      	mov	r2, r3
 8012ecc:	482a      	ldr	r0, [pc, #168]	; (8012f78 <ProcessRadioRxDone+0xa20>)
 8012ece:	f008 fd30 	bl	801b932 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8012ed2:	4b28      	ldr	r3, [pc, #160]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012ed4:	2203      	movs	r2, #3
 8012ed6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012eda:	4b26      	ldr	r3, [pc, #152]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012edc:	2200      	movs	r2, #0
 8012ede:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8012ee2:	4b24      	ldr	r3, [pc, #144]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012ee4:	4a24      	ldr	r2, [pc, #144]	; (8012f78 <ProcessRadioRxDone+0xa20>)
 8012ee6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8012eea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012eee:	b2da      	uxtb	r2, r3
 8012ef0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012ef4:	1ad3      	subs	r3, r2, r3
 8012ef6:	b2da      	uxtb	r2, r3
 8012ef8:	4b1e      	ldr	r3, [pc, #120]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012efa:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8012efe:	4a1d      	ldr	r2, [pc, #116]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f00:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012f04:	f043 0302 	orr.w	r3, r3, #2
 8012f08:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8012f0c:	e007      	b.n	8012f1e <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012f0e:	4b19      	ldr	r3, [pc, #100]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f10:	2201      	movs	r2, #1
 8012f12:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8012f16:	f7ff faf9 	bl	801250c <PrepareRxDoneAbort>
            break;
 8012f1a:	e000      	b.n	8012f1e <ProcessRadioRxDone+0x9c6>
            break;
 8012f1c:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012f1e:	4b15      	ldr	r3, [pc, #84]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f20:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d004      	beq.n	8012f32 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012f28:	4b12      	ldr	r3, [pc, #72]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f2a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d10c      	bne.n	8012f4c <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8012f32:	4b10      	ldr	r3, [pc, #64]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f34:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d007      	beq.n	8012f4c <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8012f3c:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f3e:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d002      	beq.n	8012f4c <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8012f46:	2000      	movs	r0, #0
 8012f48:	f000 fcec 	bl	8013924 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8012f4c:	4b09      	ldr	r3, [pc, #36]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f4e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012f52:	2b02      	cmp	r3, #2
 8012f54:	d006      	beq.n	8012f64 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8012f56:	4a07      	ldr	r2, [pc, #28]	; (8012f74 <ProcessRadioRxDone+0xa1c>)
 8012f58:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012f5c:	f043 0310 	orr.w	r3, r3, #16
 8012f60:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8012f64:	f7ff fa14 	bl	8012390 <UpdateRxSlotIdleState>
}
 8012f68:	37a4      	adds	r7, #164	; 0xa4
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd90      	pop	{r4, r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	20000e48 	.word	0x20000e48
 8012f74:	2000092c 	.word	0x2000092c
 8012f78:	20000b64 	.word	0x20000b64

08012f7c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012f80:	4b11      	ldr	r3, [pc, #68]	; (8012fc8 <ProcessRadioTxTimeout+0x4c>)
 8012f82:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d002      	beq.n	8012f90 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8012f8a:	4b10      	ldr	r3, [pc, #64]	; (8012fcc <ProcessRadioTxTimeout+0x50>)
 8012f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f8e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8012f90:	f7ff f9fe 	bl	8012390 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8012f94:	4b0e      	ldr	r3, [pc, #56]	; (8012fd0 <ProcessRadioTxTimeout+0x54>)
 8012f96:	2202      	movs	r2, #2
 8012f98:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8012f9c:	2002      	movs	r0, #2
 8012f9e:	f004 fe67 	bl	8017c70 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8012fa2:	4b0b      	ldr	r3, [pc, #44]	; (8012fd0 <ProcessRadioTxTimeout+0x54>)
 8012fa4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d003      	beq.n	8012fb4 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8012fac:	4b08      	ldr	r3, [pc, #32]	; (8012fd0 <ProcessRadioTxTimeout+0x54>)
 8012fae:	2201      	movs	r2, #1
 8012fb0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012fb4:	4a06      	ldr	r2, [pc, #24]	; (8012fd0 <ProcessRadioTxTimeout+0x54>)
 8012fb6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012fba:	f043 0310 	orr.w	r3, r3, #16
 8012fbe:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8012fc2:	bf00      	nop
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	20000e48 	.word	0x20000e48
 8012fcc:	08021f14 	.word	0x08021f14
 8012fd0:	2000092c 	.word	0x2000092c

08012fd4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	4603      	mov	r3, r0
 8012fdc:	460a      	mov	r2, r1
 8012fde:	71fb      	strb	r3, [r7, #7]
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012fe8:	4b3d      	ldr	r3, [pc, #244]	; (80130e0 <HandleRadioRxErrorTimeout+0x10c>)
 8012fea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012fee:	2b02      	cmp	r3, #2
 8012ff0:	d002      	beq.n	8012ff8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8012ff2:	4b3c      	ldr	r3, [pc, #240]	; (80130e4 <HandleRadioRxErrorTimeout+0x110>)
 8012ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012ff8:	f004 f966 	bl	80172c8 <LoRaMacClassBIsBeaconExpected>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d007      	beq.n	8013012 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8013002:	2002      	movs	r0, #2
 8013004:	f004 f914 	bl	8017230 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8013008:	2000      	movs	r0, #0
 801300a:	f004 f936 	bl	801727a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801300e:	2301      	movs	r3, #1
 8013010:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013012:	4b33      	ldr	r3, [pc, #204]	; (80130e0 <HandleRadioRxErrorTimeout+0x10c>)
 8013014:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013018:	2b01      	cmp	r3, #1
 801301a:	d119      	bne.n	8013050 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801301c:	f004 f95b 	bl	80172d6 <LoRaMacClassBIsPingExpected>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d007      	beq.n	8013036 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8013026:	2000      	movs	r0, #0
 8013028:	f004 f90c 	bl	8017244 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801302c:	2000      	movs	r0, #0
 801302e:	f004 f92d 	bl	801728c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8013032:	2301      	movs	r3, #1
 8013034:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013036:	f004 f955 	bl	80172e4 <LoRaMacClassBIsMulticastExpected>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d007      	beq.n	8013050 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8013040:	2000      	movs	r0, #0
 8013042:	f004 f909 	bl	8017258 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8013046:	2000      	movs	r0, #0
 8013048:	f004 f929 	bl	801729e <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 801304c:	2301      	movs	r3, #1
 801304e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8013050:	7bfb      	ldrb	r3, [r7, #15]
 8013052:	f083 0301 	eor.w	r3, r3, #1
 8013056:	b2db      	uxtb	r3, r3
 8013058:	2b00      	cmp	r3, #0
 801305a:	d03b      	beq.n	80130d4 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801305c:	4b22      	ldr	r3, [pc, #136]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 801305e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8013062:	2b00      	cmp	r3, #0
 8013064:	d122      	bne.n	80130ac <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8013066:	4b20      	ldr	r3, [pc, #128]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 8013068:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801306c:	2b00      	cmp	r3, #0
 801306e:	d003      	beq.n	8013078 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8013070:	4a1d      	ldr	r2, [pc, #116]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 8013072:	79fb      	ldrb	r3, [r7, #7]
 8013074:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8013078:	79fb      	ldrb	r3, [r7, #7]
 801307a:	4618      	mov	r0, r3
 801307c:	f004 fdf8 	bl	8017c70 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8013080:	4b17      	ldr	r3, [pc, #92]	; (80130e0 <HandleRadioRxErrorTimeout+0x10c>)
 8013082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013084:	4618      	mov	r0, r3
 8013086:	f00c ff3d 	bl	801ff04 <UTIL_TIMER_GetElapsedTime>
 801308a:	4602      	mov	r2, r0
 801308c:	4b16      	ldr	r3, [pc, #88]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 801308e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8013092:	429a      	cmp	r2, r3
 8013094:	d31e      	bcc.n	80130d4 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8013096:	4815      	ldr	r0, [pc, #84]	; (80130ec <HandleRadioRxErrorTimeout+0x118>)
 8013098:	f00c fe08 	bl	801fcac <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801309c:	4a12      	ldr	r2, [pc, #72]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 801309e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80130a2:	f043 0310 	orr.w	r3, r3, #16
 80130a6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 80130aa:	e013      	b.n	80130d4 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80130ac:	4b0e      	ldr	r3, [pc, #56]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 80130ae:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d003      	beq.n	80130be <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80130b6:	4a0c      	ldr	r2, [pc, #48]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 80130b8:	79bb      	ldrb	r3, [r7, #6]
 80130ba:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80130be:	79bb      	ldrb	r3, [r7, #6]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f004 fdd5 	bl	8017c70 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 80130c6:	4a08      	ldr	r2, [pc, #32]	; (80130e8 <HandleRadioRxErrorTimeout+0x114>)
 80130c8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80130cc:	f043 0310 	orr.w	r3, r3, #16
 80130d0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80130d4:	f7ff f95c 	bl	8012390 <UpdateRxSlotIdleState>
}
 80130d8:	bf00      	nop
 80130da:	3710      	adds	r7, #16
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	20000e48 	.word	0x20000e48
 80130e4:	08021f14 	.word	0x08021f14
 80130e8:	2000092c 	.word	0x2000092c
 80130ec:	20000cc4 	.word	0x20000cc4

080130f0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80130f4:	2106      	movs	r1, #6
 80130f6:	2005      	movs	r0, #5
 80130f8:	f7ff ff6c 	bl	8012fd4 <HandleRadioRxErrorTimeout>
}
 80130fc:	bf00      	nop
 80130fe:	bd80      	pop	{r7, pc}

08013100 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8013100:	b580      	push	{r7, lr}
 8013102:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8013104:	2104      	movs	r1, #4
 8013106:	2003      	movs	r0, #3
 8013108:	f7ff ff64 	bl	8012fd4 <HandleRadioRxErrorTimeout>
}
 801310c:	bf00      	nop
 801310e:	bd80      	pop	{r7, pc}

08013110 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013116:	f3ef 8310 	mrs	r3, PRIMASK
 801311a:	607b      	str	r3, [r7, #4]
  return(result);
 801311c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 801311e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8013120:	b672      	cpsid	i
}
 8013122:	bf00      	nop
    events = LoRaMacRadioEvents;
 8013124:	4b1d      	ldr	r3, [pc, #116]	; (801319c <LoRaMacHandleIrqEvents+0x8c>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801312a:	4b1c      	ldr	r3, [pc, #112]	; (801319c <LoRaMacHandleIrqEvents+0x8c>)
 801312c:	2200      	movs	r2, #0
 801312e:	601a      	str	r2, [r3, #0]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	f383 8810 	msr	PRIMASK, r3
}
 801313a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d027      	beq.n	8013192 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8013142:	783b      	ldrb	r3, [r7, #0]
 8013144:	f003 0320 	and.w	r3, r3, #32
 8013148:	b2db      	uxtb	r3, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	d001      	beq.n	8013152 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 801314e:	f7ff f937 	bl	80123c0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8013152:	783b      	ldrb	r3, [r7, #0]
 8013154:	f003 0310 	and.w	r3, r3, #16
 8013158:	b2db      	uxtb	r3, r3
 801315a:	2b00      	cmp	r3, #0
 801315c:	d001      	beq.n	8013162 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 801315e:	f7ff f9fb 	bl	8012558 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8013162:	783b      	ldrb	r3, [r7, #0]
 8013164:	f003 0308 	and.w	r3, r3, #8
 8013168:	b2db      	uxtb	r3, r3
 801316a:	2b00      	cmp	r3, #0
 801316c:	d001      	beq.n	8013172 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 801316e:	f7ff ff05 	bl	8012f7c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8013172:	783b      	ldrb	r3, [r7, #0]
 8013174:	f003 0304 	and.w	r3, r3, #4
 8013178:	b2db      	uxtb	r3, r3
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 801317e:	f7ff ffb7 	bl	80130f0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8013182:	783b      	ldrb	r3, [r7, #0]
 8013184:	f003 0302 	and.w	r3, r3, #2
 8013188:	b2db      	uxtb	r3, r3
 801318a:	2b00      	cmp	r3, #0
 801318c:	d001      	beq.n	8013192 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801318e:	f7ff ffb7 	bl	8013100 <ProcessRadioRxTimeout>
        }
    }
}
 8013192:	bf00      	nop
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	20001a70 	.word	0x20001a70

080131a0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 80131a0:	b480      	push	{r7}
 80131a2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80131a4:	4b10      	ldr	r3, [pc, #64]	; (80131e8 <LoRaMacIsBusy+0x48>)
 80131a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d101      	bne.n	80131b2 <LoRaMacIsBusy+0x12>
    {
        return false;
 80131ae:	2300      	movs	r3, #0
 80131b0:	e015      	b.n	80131de <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80131b2:	4b0e      	ldr	r3, [pc, #56]	; (80131ec <LoRaMacIsBusy+0x4c>)
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	f003 0301 	and.w	r3, r3, #1
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d001      	beq.n	80131c4 <LoRaMacIsBusy+0x24>
    {
        return true;
 80131c0:	2301      	movs	r3, #1
 80131c2:	e00c      	b.n	80131de <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80131c4:	4b08      	ldr	r3, [pc, #32]	; (80131e8 <LoRaMacIsBusy+0x48>)
 80131c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d106      	bne.n	80131dc <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80131ce:	4b06      	ldr	r3, [pc, #24]	; (80131e8 <LoRaMacIsBusy+0x48>)
 80131d0:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d101      	bne.n	80131dc <LoRaMacIsBusy+0x3c>
    {
        return false;
 80131d8:	2300      	movs	r3, #0
 80131da:	e000      	b.n	80131de <LoRaMacIsBusy+0x3e>
    }
    return true;
 80131dc:	2301      	movs	r3, #1
}
 80131de:	4618      	mov	r0, r3
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bc80      	pop	{r7}
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	2000092c 	.word	0x2000092c
 80131ec:	20001a70 	.word	0x20001a70

080131f0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80131f0:	b480      	push	{r7}
 80131f2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80131f4:	4b05      	ldr	r3, [pc, #20]	; (801320c <LoRaMacIsStopped+0x1c>)
 80131f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80131fa:	2b01      	cmp	r3, #1
 80131fc:	d101      	bne.n	8013202 <LoRaMacIsStopped+0x12>
    {
        return true;
 80131fe:	2301      	movs	r3, #1
 8013200:	e000      	b.n	8013204 <LoRaMacIsStopped+0x14>
    }
    return false;
 8013202:	2300      	movs	r3, #0
}
 8013204:	4618      	mov	r0, r3
 8013206:	46bd      	mov	sp, r7
 8013208:	bc80      	pop	{r7}
 801320a:	4770      	bx	lr
 801320c:	2000092c 	.word	0x2000092c

08013210 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	4603      	mov	r3, r0
 8013218:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801321a:	4a04      	ldr	r2, [pc, #16]	; (801322c <LoRaMacEnableRequests+0x1c>)
 801321c:	79fb      	ldrb	r3, [r7, #7]
 801321e:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 8013222:	bf00      	nop
 8013224:	370c      	adds	r7, #12
 8013226:	46bd      	mov	sp, r7
 8013228:	bc80      	pop	{r7}
 801322a:	4770      	bx	lr
 801322c:	2000092c 	.word	0x2000092c

08013230 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8013236:	4b2c      	ldr	r3, [pc, #176]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 8013238:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801323c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801323e:	4b2a      	ldr	r3, [pc, #168]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 8013240:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013244:	2b00      	cmp	r3, #0
 8013246:	d14a      	bne.n	80132de <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8013248:	4b27      	ldr	r3, [pc, #156]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 801324a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801324e:	f003 0301 	and.w	r3, r3, #1
 8013252:	b2db      	uxtb	r3, r3
 8013254:	2b00      	cmp	r3, #0
 8013256:	d006      	beq.n	8013266 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8013258:	4a23      	ldr	r2, [pc, #140]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 801325a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801325e:	f36f 0300 	bfc	r3, #0, #1
 8013262:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013266:	4b20      	ldr	r3, [pc, #128]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 8013268:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801326c:	f003 0304 	and.w	r3, r3, #4
 8013270:	b2db      	uxtb	r3, r3
 8013272:	2b00      	cmp	r3, #0
 8013274:	d006      	beq.n	8013284 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013276:	4a1c      	ldr	r2, [pc, #112]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 8013278:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801327c:	f36f 0382 	bfc	r3, #2, #1
 8013280:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013284:	2001      	movs	r0, #1
 8013286:	f7ff ffc3 	bl	8013210 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801328a:	793b      	ldrb	r3, [r7, #4]
 801328c:	f003 0301 	and.w	r3, r3, #1
 8013290:	b2db      	uxtb	r3, r3
 8013292:	2b00      	cmp	r3, #0
 8013294:	d005      	beq.n	80132a2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8013296:	4b14      	ldr	r3, [pc, #80]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 8013298:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	4813      	ldr	r0, [pc, #76]	; (80132ec <LoRaMacHandleRequestEvents+0xbc>)
 80132a0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80132a2:	793b      	ldrb	r3, [r7, #4]
 80132a4:	f003 0304 	and.w	r3, r3, #4
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d00e      	beq.n	80132cc <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80132ae:	4810      	ldr	r0, [pc, #64]	; (80132f0 <LoRaMacHandleRequestEvents+0xc0>)
 80132b0:	f004 fd2c 	bl	8017d0c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80132b4:	f004 fd7c 	bl	8017db0 <LoRaMacConfirmQueueGetCnt>
 80132b8:	4603      	mov	r3, r0
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d006      	beq.n	80132cc <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80132be:	4a0a      	ldr	r2, [pc, #40]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 80132c0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80132c4:	f043 0304 	orr.w	r3, r3, #4
 80132c8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80132cc:	f004 f828 	bl	8017320 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80132d0:	4a05      	ldr	r2, [pc, #20]	; (80132e8 <LoRaMacHandleRequestEvents+0xb8>)
 80132d2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80132d6:	f36f 1304 	bfc	r3, #4, #1
 80132da:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80132de:	bf00      	nop
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	2000092c 	.word	0x2000092c
 80132ec:	20000d6c 	.word	0x20000d6c
 80132f0:	20000d80 	.word	0x20000d80

080132f4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80132f8:	4b16      	ldr	r3, [pc, #88]	; (8013354 <LoRaMacHandleIndicationEvents+0x60>)
 80132fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80132fe:	f003 0308 	and.w	r3, r3, #8
 8013302:	b2db      	uxtb	r3, r3
 8013304:	2b00      	cmp	r3, #0
 8013306:	d00d      	beq.n	8013324 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8013308:	4a12      	ldr	r2, [pc, #72]	; (8013354 <LoRaMacHandleIndicationEvents+0x60>)
 801330a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801330e:	f36f 03c3 	bfc	r3, #3, #1
 8013312:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8013316:	4b0f      	ldr	r3, [pc, #60]	; (8013354 <LoRaMacHandleIndicationEvents+0x60>)
 8013318:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801331c:	68db      	ldr	r3, [r3, #12]
 801331e:	490e      	ldr	r1, [pc, #56]	; (8013358 <LoRaMacHandleIndicationEvents+0x64>)
 8013320:	480e      	ldr	r0, [pc, #56]	; (801335c <LoRaMacHandleIndicationEvents+0x68>)
 8013322:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013324:	4b0b      	ldr	r3, [pc, #44]	; (8013354 <LoRaMacHandleIndicationEvents+0x60>)
 8013326:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801332a:	f003 0302 	and.w	r3, r3, #2
 801332e:	b2db      	uxtb	r3, r3
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00d      	beq.n	8013350 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8013334:	4a07      	ldr	r2, [pc, #28]	; (8013354 <LoRaMacHandleIndicationEvents+0x60>)
 8013336:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801333a:	f36f 0341 	bfc	r3, #1, #1
 801333e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8013342:	4b04      	ldr	r3, [pc, #16]	; (8013354 <LoRaMacHandleIndicationEvents+0x60>)
 8013344:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	4903      	ldr	r1, [pc, #12]	; (8013358 <LoRaMacHandleIndicationEvents+0x64>)
 801334c:	4804      	ldr	r0, [pc, #16]	; (8013360 <LoRaMacHandleIndicationEvents+0x6c>)
 801334e:	4798      	blx	r3
    }
}
 8013350:	bf00      	nop
 8013352:	bd80      	pop	{r7, pc}
 8013354:	2000092c 	.word	0x2000092c
 8013358:	20000db8 	.word	0x20000db8
 801335c:	20000d94 	.word	0x20000d94
 8013360:	20000d4c 	.word	0x20000d4c

08013364 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801336a:	4b2a      	ldr	r3, [pc, #168]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 801336c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013370:	f003 0301 	and.w	r3, r3, #1
 8013374:	b2db      	uxtb	r3, r3
 8013376:	2b00      	cmp	r3, #0
 8013378:	d048      	beq.n	801340c <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 801337a:	2300      	movs	r3, #0
 801337c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 801337e:	2300      	movs	r3, #0
 8013380:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8013382:	4b24      	ldr	r3, [pc, #144]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 8013384:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8013388:	2b00      	cmp	r3, #0
 801338a:	d004      	beq.n	8013396 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 801338c:	4b21      	ldr	r3, [pc, #132]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 801338e:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8013392:	2b03      	cmp	r3, #3
 8013394:	d104      	bne.n	80133a0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8013396:	f002 f943 	bl	8015620 <CheckRetransUnconfirmedUplink>
 801339a:	4603      	mov	r3, r0
 801339c:	71fb      	strb	r3, [r7, #7]
 801339e:	e010      	b.n	80133c2 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80133a0:	4b1c      	ldr	r3, [pc, #112]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 80133a2:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 80133a6:	2b01      	cmp	r3, #1
 80133a8:	d10b      	bne.n	80133c2 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 80133aa:	4b1a      	ldr	r3, [pc, #104]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 80133ac:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d004      	beq.n	80133be <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80133b4:	f002 f960 	bl	8015678 <CheckRetransConfirmedUplink>
 80133b8:	4603      	mov	r3, r0
 80133ba:	71fb      	strb	r3, [r7, #7]
 80133bc:	e001      	b.n	80133c2 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 80133be:	2301      	movs	r3, #1
 80133c0:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80133c2:	79fb      	ldrb	r3, [r7, #7]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00d      	beq.n	80133e4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80133c8:	4813      	ldr	r0, [pc, #76]	; (8013418 <LoRaMacHandleMcpsRequest+0xb4>)
 80133ca:	f00c fc6f 	bl	801fcac <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80133ce:	4b11      	ldr	r3, [pc, #68]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 80133d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80133d4:	f023 0320 	bic.w	r3, r3, #32
 80133d8:	4a0e      	ldr	r2, [pc, #56]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 80133da:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80133de:	f002 f985 	bl	80156ec <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80133e2:	e013      	b.n	801340c <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80133e4:	79bb      	ldrb	r3, [r7, #6]
 80133e6:	f083 0301 	eor.w	r3, r3, #1
 80133ea:	b2db      	uxtb	r3, r3
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d00d      	beq.n	801340c <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80133f0:	4a08      	ldr	r2, [pc, #32]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 80133f2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80133f6:	f36f 1304 	bfc	r3, #4, #1
 80133fa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80133fe:	4b05      	ldr	r3, [pc, #20]	; (8013414 <LoRaMacHandleMcpsRequest+0xb0>)
 8013400:	2200      	movs	r2, #0
 8013402:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8013406:	2000      	movs	r0, #0
 8013408:	f000 f9c8 	bl	801379c <OnTxDelayedTimerEvent>
}
 801340c:	bf00      	nop
 801340e:	3708      	adds	r7, #8
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	2000092c 	.word	0x2000092c
 8013418:	20000c94 	.word	0x20000c94

0801341c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013420:	4b18      	ldr	r3, [pc, #96]	; (8013484 <LoRaMacHandleMlmeRequest+0x68>)
 8013422:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013426:	f003 0304 	and.w	r3, r3, #4
 801342a:	b2db      	uxtb	r3, r3
 801342c:	2b00      	cmp	r3, #0
 801342e:	d026      	beq.n	801347e <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8013430:	2001      	movs	r0, #1
 8013432:	f004 fc51 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 8013436:	4603      	mov	r3, r0
 8013438:	2b00      	cmp	r3, #0
 801343a:	d012      	beq.n	8013462 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801343c:	2001      	movs	r0, #1
 801343e:	f004 fbed 	bl	8017c1c <LoRaMacConfirmQueueGetStatus>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d103      	bne.n	8013450 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8013448:	4b0e      	ldr	r3, [pc, #56]	; (8013484 <LoRaMacHandleMlmeRequest+0x68>)
 801344a:	2200      	movs	r2, #0
 801344c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013450:	4b0c      	ldr	r3, [pc, #48]	; (8013484 <LoRaMacHandleMlmeRequest+0x68>)
 8013452:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013456:	f023 0302 	bic.w	r3, r3, #2
 801345a:	4a0a      	ldr	r2, [pc, #40]	; (8013484 <LoRaMacHandleMlmeRequest+0x68>)
 801345c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8013460:	e00d      	b.n	801347e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8013462:	2006      	movs	r0, #6
 8013464:	f004 fc38 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 8013468:	4603      	mov	r3, r0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d007      	beq.n	801347e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801346e:	4b05      	ldr	r3, [pc, #20]	; (8013484 <LoRaMacHandleMlmeRequest+0x68>)
 8013470:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013474:	f023 0302 	bic.w	r3, r3, #2
 8013478:	4a02      	ldr	r2, [pc, #8]	; (8013484 <LoRaMacHandleMlmeRequest+0x68>)
 801347a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 801347e:	bf00      	nop
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	2000092c 	.word	0x2000092c

08013488 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8013488:	b580      	push	{r7, lr}
 801348a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801348c:	200b      	movs	r0, #11
 801348e:	f004 fc23 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d019      	beq.n	80134cc <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8013498:	4b0e      	ldr	r3, [pc, #56]	; (80134d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801349a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801349e:	f003 0301 	and.w	r3, r3, #1
 80134a2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d111      	bne.n	80134cc <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80134a8:	4b0a      	ldr	r3, [pc, #40]	; (80134d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80134aa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80134ae:	f003 0304 	and.w	r3, r3, #4
 80134b2:	b2db      	uxtb	r3, r3
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d009      	beq.n	80134cc <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80134b8:	4b06      	ldr	r3, [pc, #24]	; (80134d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80134ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80134be:	f023 0302 	bic.w	r3, r3, #2
 80134c2:	4a04      	ldr	r2, [pc, #16]	; (80134d4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80134c4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80134c8:	2301      	movs	r3, #1
 80134ca:	e000      	b.n	80134ce <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	2000092c 	.word	0x2000092c

080134d8 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	71fb      	strb	r3, [r7, #7]
 80134e2:	460b      	mov	r3, r1
 80134e4:	71bb      	strb	r3, [r7, #6]
 80134e6:	4613      	mov	r3, r2
 80134e8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80134ea:	79fb      	ldrb	r3, [r7, #7]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d00a      	beq.n	8013506 <CheckForMinimumAbpDatarate+0x2e>
 80134f0:	79bb      	ldrb	r3, [r7, #6]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d107      	bne.n	8013506 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80134f6:	797b      	ldrb	r3, [r7, #5]
 80134f8:	f083 0301 	eor.w	r3, r3, #1
 80134fc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d001      	beq.n	8013506 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8013502:	2301      	movs	r3, #1
 8013504:	e000      	b.n	8013508 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8013506:	2300      	movs	r3, #0
}
 8013508:	4618      	mov	r0, r3
 801350a:	370c      	adds	r7, #12
 801350c:	46bd      	mov	sp, r7
 801350e:	bc80      	pop	{r7}
 8013510:	4770      	bx	lr
	...

08013514 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8013514:	b480      	push	{r7}
 8013516:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8013518:	4b0d      	ldr	r3, [pc, #52]	; (8013550 <LoRaMacCheckForRxAbort+0x3c>)
 801351a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013522:	2b00      	cmp	r3, #0
 8013524:	d00f      	beq.n	8013546 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8013526:	4b0a      	ldr	r3, [pc, #40]	; (8013550 <LoRaMacCheckForRxAbort+0x3c>)
 8013528:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801352c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013530:	4a07      	ldr	r2, [pc, #28]	; (8013550 <LoRaMacCheckForRxAbort+0x3c>)
 8013532:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013536:	4b06      	ldr	r3, [pc, #24]	; (8013550 <LoRaMacCheckForRxAbort+0x3c>)
 8013538:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801353c:	f023 0302 	bic.w	r3, r3, #2
 8013540:	4a03      	ldr	r2, [pc, #12]	; (8013550 <LoRaMacCheckForRxAbort+0x3c>)
 8013542:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8013546:	bf00      	nop
 8013548:	46bd      	mov	sp, r7
 801354a:	bc80      	pop	{r7}
 801354c:	4770      	bx	lr
 801354e:	bf00      	nop
 8013550:	2000092c 	.word	0x2000092c

08013554 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 801355c:	2300      	movs	r3, #0
 801355e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8013560:	2300      	movs	r3, #0
 8013562:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8013564:	4b51      	ldr	r3, [pc, #324]	; (80136ac <LoRaMacHandleNvm+0x158>)
 8013566:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801356a:	2b00      	cmp	r3, #0
 801356c:	f040 8099 	bne.w	80136a2 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2124      	movs	r1, #36	; 0x24
 8013574:	4618      	mov	r0, r3
 8013576:	f008 fa31 	bl	801b9dc <Crc32>
 801357a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013580:	68ba      	ldr	r2, [r7, #8]
 8013582:	429a      	cmp	r2, r3
 8013584:	d006      	beq.n	8013594 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	68ba      	ldr	r2, [r7, #8]
 801358a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 801358c:	89fb      	ldrh	r3, [r7, #14]
 801358e:	f043 0301 	orr.w	r3, r3, #1
 8013592:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	3328      	adds	r3, #40	; 0x28
 8013598:	211c      	movs	r1, #28
 801359a:	4618      	mov	r0, r3
 801359c:	f008 fa1e 	bl	801b9dc <Crc32>
 80135a0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135a6:	68ba      	ldr	r2, [r7, #8]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d006      	beq.n	80135ba <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	68ba      	ldr	r2, [r7, #8]
 80135b0:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80135b2:	89fb      	ldrh	r3, [r7, #14]
 80135b4:	f043 0302 	orr.w	r3, r3, #2
 80135b8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	3348      	adds	r3, #72	; 0x48
 80135be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80135c2:	4618      	mov	r0, r3
 80135c4:	f008 fa0a 	bl	801b9dc <Crc32>
 80135c8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80135d0:	68ba      	ldr	r2, [r7, #8]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d007      	beq.n	80135e6 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80135de:	89fb      	ldrh	r3, [r7, #14]
 80135e0:	f043 0304 	orr.w	r3, r3, #4
 80135e4:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80135ec:	21d4      	movs	r1, #212	; 0xd4
 80135ee:	4618      	mov	r0, r3
 80135f0:	f008 f9f4 	bl	801b9dc <Crc32>
 80135f4:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80135fc:	68ba      	ldr	r2, [r7, #8]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d007      	beq.n	8013612 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	68ba      	ldr	r2, [r7, #8]
 8013606:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 801360a:	89fb      	ldrh	r3, [r7, #14]
 801360c:	f043 0308 	orr.w	r3, r3, #8
 8013610:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8013618:	2110      	movs	r1, #16
 801361a:	4618      	mov	r0, r3
 801361c:	f008 f9de 	bl	801b9dc <Crc32>
 8013620:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8013628:	68ba      	ldr	r2, [r7, #8]
 801362a:	429a      	cmp	r2, r3
 801362c:	d007      	beq.n	801363e <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8013636:	89fb      	ldrh	r3, [r7, #14]
 8013638:	f043 0310 	orr.w	r3, r3, #16
 801363c:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013644:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013648:	4618      	mov	r0, r3
 801364a:	f008 f9c7 	bl	801b9dc <Crc32>
 801364e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	429a      	cmp	r2, r3
 801365a:	d007      	beq.n	801366c <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	68ba      	ldr	r2, [r7, #8]
 8013660:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8013664:	89fb      	ldrh	r3, [r7, #14]
 8013666:	f043 0320 	orr.w	r3, r3, #32
 801366a:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8013672:	2114      	movs	r1, #20
 8013674:	4618      	mov	r0, r3
 8013676:	f008 f9b1 	bl	801b9dc <Crc32>
 801367a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8013682:	68ba      	ldr	r2, [r7, #8]
 8013684:	429a      	cmp	r2, r3
 8013686:	d007      	beq.n	8013698 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	68ba      	ldr	r2, [r7, #8]
 801368c:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8013690:	89fb      	ldrh	r3, [r7, #14]
 8013692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013696:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8013698:	89fb      	ldrh	r3, [r7, #14]
 801369a:	4618      	mov	r0, r3
 801369c:	f002 f878 	bl	8015790 <CallNvmDataChangeCallback>
 80136a0:	e000      	b.n	80136a4 <LoRaMacHandleNvm+0x150>
        return;
 80136a2:	bf00      	nop
}
 80136a4:	3710      	adds	r7, #16
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	2000092c 	.word	0x2000092c

080136b0 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d00d      	beq.n	80136dc <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80136c0:	6838      	ldr	r0, [r7, #0]
 80136c2:	f00c fc1f 	bl	801ff04 <UTIL_TIMER_GetElapsedTime>
 80136c6:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80136c8:	68fa      	ldr	r2, [r7, #12]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d905      	bls.n	80136dc <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80136d0:	4b05      	ldr	r3, [pc, #20]	; (80136e8 <LoRaMacHandleResponseTimeout+0x38>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80136d8:	2301      	movs	r3, #1
 80136da:	e000      	b.n	80136de <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80136dc:	2300      	movs	r3, #0
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3710      	adds	r7, #16
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	20000e48 	.word	0x20000e48

080136ec <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80136f2:	2300      	movs	r3, #0
 80136f4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80136f6:	f7ff fd0b 	bl	8013110 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80136fa:	f003 fe80 	bl	80173fe <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80136fe:	4b25      	ldr	r3, [pc, #148]	; (8013794 <LoRaMacProcess+0xa8>)
 8013700:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013704:	f003 0310 	and.w	r3, r3, #16
 8013708:	b2db      	uxtb	r3, r3
 801370a:	2b00      	cmp	r3, #0
 801370c:	d023      	beq.n	8013756 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 801370e:	2000      	movs	r0, #0
 8013710:	f7ff fd7e 	bl	8013210 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8013714:	f7ff fefe 	bl	8013514 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8013718:	f002 f858 	bl	80157cc <IsRequestPending>
 801371c:	4603      	mov	r3, r0
 801371e:	2b00      	cmp	r3, #0
 8013720:	d006      	beq.n	8013730 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8013722:	f7ff feb1 	bl	8013488 <LoRaMacCheckForBeaconAcquisition>
 8013726:	4603      	mov	r3, r0
 8013728:	461a      	mov	r2, r3
 801372a:	79fb      	ldrb	r3, [r7, #7]
 801372c:	4313      	orrs	r3, r2
 801372e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8013730:	79fb      	ldrb	r3, [r7, #7]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d103      	bne.n	801373e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8013736:	f7ff fe71 	bl	801341c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801373a:	f7ff fe13 	bl	8013364 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801373e:	f7ff fd77 	bl	8013230 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013742:	2001      	movs	r0, #1
 8013744:	f7ff fd64 	bl	8013210 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013748:	4a12      	ldr	r2, [pc, #72]	; (8013794 <LoRaMacProcess+0xa8>)
 801374a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801374e:	f043 0320 	orr.w	r3, r3, #32
 8013752:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8013756:	f7ff fdcd 	bl	80132f4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801375a:	4b0e      	ldr	r3, [pc, #56]	; (8013794 <LoRaMacProcess+0xa8>)
 801375c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8013760:	2b02      	cmp	r3, #2
 8013762:	d101      	bne.n	8013768 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8013764:	f001 fc1a 	bl	8014f9c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8013768:	4b0a      	ldr	r3, [pc, #40]	; (8013794 <LoRaMacProcess+0xa8>)
 801376a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801376e:	f003 0320 	and.w	r3, r3, #32
 8013772:	b2db      	uxtb	r3, r3
 8013774:	2b00      	cmp	r3, #0
 8013776:	d009      	beq.n	801378c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8013778:	4a06      	ldr	r2, [pc, #24]	; (8013794 <LoRaMacProcess+0xa8>)
 801377a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801377e:	f36f 1345 	bfc	r3, #5, #1
 8013782:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 8013786:	4804      	ldr	r0, [pc, #16]	; (8013798 <LoRaMacProcess+0xac>)
 8013788:	f7ff fee4 	bl	8013554 <LoRaMacHandleNvm>
    }
}
 801378c:	bf00      	nop
 801378e:	3708      	adds	r7, #8
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}
 8013794:	2000092c 	.word	0x2000092c
 8013798:	20000e48 	.word	0x20000e48

0801379c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 80137a4:	481e      	ldr	r0, [pc, #120]	; (8013820 <OnTxDelayedTimerEvent+0x84>)
 80137a6:	f00c fa81 	bl	801fcac <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80137aa:	4b1e      	ldr	r3, [pc, #120]	; (8013824 <OnTxDelayedTimerEvent+0x88>)
 80137ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80137b0:	f023 0320 	bic.w	r3, r3, #32
 80137b4:	4a1b      	ldr	r2, [pc, #108]	; (8013824 <OnTxDelayedTimerEvent+0x88>)
 80137b6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80137ba:	4b1b      	ldr	r3, [pc, #108]	; (8013828 <OnTxDelayedTimerEvent+0x8c>)
 80137bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80137c0:	4a18      	ldr	r2, [pc, #96]	; (8013824 <OnTxDelayedTimerEvent+0x88>)
 80137c2:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 80137c6:	4611      	mov	r1, r2
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7ff ff71 	bl	80136b0 <LoRaMacHandleResponseTimeout>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d11e      	bne.n	8013812 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80137d4:	2001      	movs	r0, #1
 80137d6:	f001 f92b 	bl	8014a30 <ScheduleTx>
 80137da:	4603      	mov	r3, r0
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d01a      	beq.n	8013816 <OnTxDelayedTimerEvent+0x7a>
 80137e0:	2b0b      	cmp	r3, #11
 80137e2:	d018      	beq.n	8013816 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80137e4:	4b10      	ldr	r3, [pc, #64]	; (8013828 <OnTxDelayedTimerEvent+0x8c>)
 80137e6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80137ea:	b2da      	uxtb	r2, r3
 80137ec:	4b0d      	ldr	r3, [pc, #52]	; (8013824 <OnTxDelayedTimerEvent+0x88>)
 80137ee:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80137f2:	4b0c      	ldr	r3, [pc, #48]	; (8013824 <OnTxDelayedTimerEvent+0x88>)
 80137f4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80137f8:	4b0a      	ldr	r3, [pc, #40]	; (8013824 <OnTxDelayedTimerEvent+0x88>)
 80137fa:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80137fe:	4b09      	ldr	r3, [pc, #36]	; (8013824 <OnTxDelayedTimerEvent+0x88>)
 8013800:	2209      	movs	r2, #9
 8013802:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8013806:	2009      	movs	r0, #9
 8013808:	f004 fa32 	bl	8017c70 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 801380c:	f001 ff6e 	bl	80156ec <StopRetransmission>
            break;
 8013810:	e002      	b.n	8013818 <OnTxDelayedTimerEvent+0x7c>
        return;
 8013812:	bf00      	nop
 8013814:	e000      	b.n	8013818 <OnTxDelayedTimerEvent+0x7c>
            break;
 8013816:	bf00      	nop
        }
    }
}
 8013818:	3708      	adds	r7, #8
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	20000c94 	.word	0x20000c94
 8013824:	2000092c 	.word	0x2000092c
 8013828:	20000e48 	.word	0x20000e48

0801382c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8013834:	4b17      	ldr	r3, [pc, #92]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 8013836:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 801383a:	4b16      	ldr	r3, [pc, #88]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 801383c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8013840:	4b15      	ldr	r3, [pc, #84]	; (8013898 <OnRxWindow1TimerEvent+0x6c>)
 8013842:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013846:	b25a      	sxtb	r2, r3
 8013848:	4b12      	ldr	r3, [pc, #72]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 801384a:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801384e:	4b12      	ldr	r3, [pc, #72]	; (8013898 <OnRxWindow1TimerEvent+0x6c>)
 8013850:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013854:	4b0f      	ldr	r3, [pc, #60]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 8013856:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801385a:	4b0f      	ldr	r3, [pc, #60]	; (8013898 <OnRxWindow1TimerEvent+0x6c>)
 801385c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013860:	4b0c      	ldr	r3, [pc, #48]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 8013862:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8013866:	4b0b      	ldr	r3, [pc, #44]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 8013868:	2200      	movs	r2, #0
 801386a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801386e:	4b09      	ldr	r3, [pc, #36]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 8013870:	2200      	movs	r2, #0
 8013872:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013876:	4b08      	ldr	r3, [pc, #32]	; (8013898 <OnRxWindow1TimerEvent+0x6c>)
 8013878:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801387c:	4b05      	ldr	r3, [pc, #20]	; (8013894 <OnRxWindow1TimerEvent+0x68>)
 801387e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8013882:	4906      	ldr	r1, [pc, #24]	; (801389c <OnRxWindow1TimerEvent+0x70>)
 8013884:	4806      	ldr	r0, [pc, #24]	; (80138a0 <OnRxWindow1TimerEvent+0x74>)
 8013886:	f001 fb55 	bl	8014f34 <RxWindowSetup>
}
 801388a:	bf00      	nop
 801388c:	3708      	adds	r7, #8
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	2000092c 	.word	0x2000092c
 8013898:	20000e48 	.word	0x20000e48
 801389c:	20000ce4 	.word	0x20000ce4
 80138a0:	20000cac 	.word	0x20000cac

080138a4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80138ac:	4b19      	ldr	r3, [pc, #100]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138ae:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d029      	beq.n	801390a <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80138b6:	4b17      	ldr	r3, [pc, #92]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138b8:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80138bc:	4b15      	ldr	r3, [pc, #84]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138be:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80138c2:	4b15      	ldr	r3, [pc, #84]	; (8013918 <OnRxWindow2TimerEvent+0x74>)
 80138c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c6:	4a13      	ldr	r2, [pc, #76]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138c8:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80138cc:	4b12      	ldr	r3, [pc, #72]	; (8013918 <OnRxWindow2TimerEvent+0x74>)
 80138ce:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80138d2:	4b10      	ldr	r3, [pc, #64]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138d4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80138d8:	4b0f      	ldr	r3, [pc, #60]	; (8013918 <OnRxWindow2TimerEvent+0x74>)
 80138da:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80138de:	4b0d      	ldr	r3, [pc, #52]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138e0:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80138e4:	4b0b      	ldr	r3, [pc, #44]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138e6:	2200      	movs	r2, #0
 80138e8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80138ec:	4b09      	ldr	r3, [pc, #36]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138ee:	2201      	movs	r2, #1
 80138f0:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80138f4:	4b08      	ldr	r3, [pc, #32]	; (8013918 <OnRxWindow2TimerEvent+0x74>)
 80138f6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80138fa:	4b06      	ldr	r3, [pc, #24]	; (8013914 <OnRxWindow2TimerEvent+0x70>)
 80138fc:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8013900:	4906      	ldr	r1, [pc, #24]	; (801391c <OnRxWindow2TimerEvent+0x78>)
 8013902:	4807      	ldr	r0, [pc, #28]	; (8013920 <OnRxWindow2TimerEvent+0x7c>)
 8013904:	f001 fb16 	bl	8014f34 <RxWindowSetup>
 8013908:	e000      	b.n	801390c <OnRxWindow2TimerEvent+0x68>
        return;
 801390a:	bf00      	nop
}
 801390c:	3708      	adds	r7, #8
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	2000092c 	.word	0x2000092c
 8013918:	20000e48 	.word	0x20000e48
 801391c:	20000cfc 	.word	0x20000cfc
 8013920:	20000cc4 	.word	0x20000cc4

08013924 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801392c:	4808      	ldr	r0, [pc, #32]	; (8013950 <OnRetransmitTimeoutTimerEvent+0x2c>)
 801392e:	f00c f9bd 	bl	801fcac <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8013932:	4b08      	ldr	r3, [pc, #32]	; (8013954 <OnRetransmitTimeoutTimerEvent+0x30>)
 8013934:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8013938:	2b00      	cmp	r3, #0
 801393a:	d003      	beq.n	8013944 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 801393c:	4b05      	ldr	r3, [pc, #20]	; (8013954 <OnRetransmitTimeoutTimerEvent+0x30>)
 801393e:	2201      	movs	r2, #1
 8013940:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 8013944:	f001 ff0e 	bl	8015764 <OnMacProcessNotify>
}
 8013948:	bf00      	nop
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}
 8013950:	20000d2c 	.word	0x20000d2c
 8013954:	2000092c 	.word	0x2000092c

08013958 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	af00      	add	r7, sp, #0
 801395e:	60ba      	str	r2, [r7, #8]
 8013960:	607b      	str	r3, [r7, #4]
 8013962:	4603      	mov	r3, r0
 8013964:	73fb      	strb	r3, [r7, #15]
 8013966:	460b      	mov	r3, r1
 8013968:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d005      	beq.n	801397c <GetFCntDown+0x24>
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d002      	beq.n	801397c <GetFCntDown+0x24>
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d101      	bne.n	8013980 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801397c:	2309      	movs	r3, #9
 801397e:	e028      	b.n	80139d2 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8013980:	7bfb      	ldrb	r3, [r7, #15]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d016      	beq.n	80139b4 <GetFCntDown+0x5c>
 8013986:	2b01      	cmp	r3, #1
 8013988:	d118      	bne.n	80139bc <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801398a:	79bb      	ldrb	r3, [r7, #6]
 801398c:	2b01      	cmp	r3, #1
 801398e:	d10d      	bne.n	80139ac <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8013990:	7bbb      	ldrb	r3, [r7, #14]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d002      	beq.n	801399c <GetFCntDown+0x44>
 8013996:	7bbb      	ldrb	r3, [r7, #14]
 8013998:	2b03      	cmp	r3, #3
 801399a:	d103      	bne.n	80139a4 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 801399c:	69bb      	ldr	r3, [r7, #24]
 801399e:	2202      	movs	r2, #2
 80139a0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80139a2:	e00d      	b.n	80139c0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 80139a4:	69bb      	ldr	r3, [r7, #24]
 80139a6:	2201      	movs	r2, #1
 80139a8:	701a      	strb	r2, [r3, #0]
            break;
 80139aa:	e009      	b.n	80139c0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80139ac:	69bb      	ldr	r3, [r7, #24]
 80139ae:	2203      	movs	r2, #3
 80139b0:	701a      	strb	r2, [r3, #0]
            break;
 80139b2:	e005      	b.n	80139c0 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80139b4:	69bb      	ldr	r3, [r7, #24]
 80139b6:	2204      	movs	r2, #4
 80139b8:	701a      	strb	r2, [r3, #0]
            break;
 80139ba:	e001      	b.n	80139c0 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80139bc:	2305      	movs	r3, #5
 80139be:	e008      	b.n	80139d2 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	7818      	ldrb	r0, [r3, #0]
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	89db      	ldrh	r3, [r3, #14]
 80139c8:	69fa      	ldr	r2, [r7, #28]
 80139ca:	4619      	mov	r1, r3
 80139cc:	f004 fd8e 	bl	80184ec <LoRaMacCryptoGetFCntDown>
 80139d0:	4603      	mov	r3, r0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3710      	adds	r7, #16
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
	...

080139dc <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80139dc:	b5b0      	push	{r4, r5, r7, lr}
 80139de:	b084      	sub	sp, #16
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	4603      	mov	r3, r0
 80139e4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139e6:	2303      	movs	r3, #3
 80139e8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80139ea:	4b6e      	ldr	r3, [pc, #440]	; (8013ba4 <SwitchClass+0x1c8>)
 80139ec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80139f0:	2b02      	cmp	r3, #2
 80139f2:	f000 80bb 	beq.w	8013b6c <SwitchClass+0x190>
 80139f6:	2b02      	cmp	r3, #2
 80139f8:	f300 80ce 	bgt.w	8013b98 <SwitchClass+0x1bc>
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d003      	beq.n	8013a08 <SwitchClass+0x2c>
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	f000 80a5 	beq.w	8013b50 <SwitchClass+0x174>
 8013a06:	e0c7      	b.n	8013b98 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8013a08:	79fb      	ldrb	r3, [r7, #7]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d109      	bne.n	8013a22 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013a0e:	4b65      	ldr	r3, [pc, #404]	; (8013ba4 <SwitchClass+0x1c8>)
 8013a10:	4a64      	ldr	r2, [pc, #400]	; (8013ba4 <SwitchClass+0x1c8>)
 8013a12:	3374      	adds	r3, #116	; 0x74
 8013a14:	326c      	adds	r2, #108	; 0x6c
 8013a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a1a:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8013a22:	79fb      	ldrb	r3, [r7, #7]
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d10c      	bne.n	8013a42 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8013a28:	79fb      	ldrb	r3, [r7, #7]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f003 fc7e 	bl	801732c <LoRaMacClassBSwitchClass>
 8013a30:	4603      	mov	r3, r0
 8013a32:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8013a34:	7bfb      	ldrb	r3, [r7, #15]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d103      	bne.n	8013a42 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8013a3a:	4a5a      	ldr	r2, [pc, #360]	; (8013ba4 <SwitchClass+0x1c8>)
 8013a3c:	79fb      	ldrb	r3, [r7, #7]
 8013a3e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8013a42:	79fb      	ldrb	r3, [r7, #7]
 8013a44:	2b02      	cmp	r3, #2
 8013a46:	f040 80a2 	bne.w	8013b8e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013a4a:	4a56      	ldr	r2, [pc, #344]	; (8013ba4 <SwitchClass+0x1c8>)
 8013a4c:	79fb      	ldrb	r3, [r7, #7]
 8013a4e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013a52:	4a55      	ldr	r2, [pc, #340]	; (8013ba8 <SwitchClass+0x1cc>)
 8013a54:	4b54      	ldr	r3, [pc, #336]	; (8013ba8 <SwitchClass+0x1cc>)
 8013a56:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8013a5a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8013a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013a66:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013a6a:	4b4f      	ldr	r3, [pc, #316]	; (8013ba8 <SwitchClass+0x1cc>)
 8013a6c:	2202      	movs	r2, #2
 8013a6e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013a72:	2300      	movs	r3, #0
 8013a74:	73bb      	strb	r3, [r7, #14]
 8013a76:	e05b      	b.n	8013b30 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8013a78:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013a7c:	4949      	ldr	r1, [pc, #292]	; (8013ba4 <SwitchClass+0x1c8>)
 8013a7e:	4613      	mov	r3, r2
 8013a80:	005b      	lsls	r3, r3, #1
 8013a82:	4413      	add	r3, r2
 8013a84:	011b      	lsls	r3, r3, #4
 8013a86:	440b      	add	r3, r1
 8013a88:	33e9      	adds	r3, #233	; 0xe9
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d049      	beq.n	8013b24 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8013a90:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013a94:	4943      	ldr	r1, [pc, #268]	; (8013ba4 <SwitchClass+0x1c8>)
 8013a96:	4613      	mov	r3, r2
 8013a98:	005b      	lsls	r3, r3, #1
 8013a9a:	4413      	add	r3, r2
 8013a9c:	011b      	lsls	r3, r3, #4
 8013a9e:	440b      	add	r3, r1
 8013aa0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013aa4:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8013aa6:	2b02      	cmp	r3, #2
 8013aa8:	d13c      	bne.n	8013b24 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8013aaa:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013aae:	493d      	ldr	r1, [pc, #244]	; (8013ba4 <SwitchClass+0x1c8>)
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	011b      	lsls	r3, r3, #4
 8013ab8:	440b      	add	r3, r1
 8013aba:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4a38      	ldr	r2, [pc, #224]	; (8013ba4 <SwitchClass+0x1c8>)
 8013ac2:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8013ac4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013ac8:	4936      	ldr	r1, [pc, #216]	; (8013ba4 <SwitchClass+0x1c8>)
 8013aca:	4613      	mov	r3, r2
 8013acc:	005b      	lsls	r3, r3, #1
 8013ace:	4413      	add	r3, r2
 8013ad0:	011b      	lsls	r3, r3, #4
 8013ad2:	440b      	add	r3, r1
 8013ad4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013ad8:	f993 3000 	ldrsb.w	r3, [r3]
 8013adc:	b2da      	uxtb	r2, r3
 8013ade:	4b31      	ldr	r3, [pc, #196]	; (8013ba4 <SwitchClass+0x1c8>)
 8013ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013ae4:	4b30      	ldr	r3, [pc, #192]	; (8013ba8 <SwitchClass+0x1cc>)
 8013ae6:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013aea:	4b2f      	ldr	r3, [pc, #188]	; (8013ba8 <SwitchClass+0x1cc>)
 8013aec:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013af0:	4b2c      	ldr	r3, [pc, #176]	; (8013ba4 <SwitchClass+0x1c8>)
 8013af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013af4:	4a2c      	ldr	r2, [pc, #176]	; (8013ba8 <SwitchClass+0x1cc>)
 8013af6:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013afa:	4b2a      	ldr	r3, [pc, #168]	; (8013ba4 <SwitchClass+0x1c8>)
 8013afc:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013b00:	4b29      	ldr	r3, [pc, #164]	; (8013ba8 <SwitchClass+0x1cc>)
 8013b02:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013b06:	4b27      	ldr	r3, [pc, #156]	; (8013ba4 <SwitchClass+0x1c8>)
 8013b08:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013b0c:	4b26      	ldr	r3, [pc, #152]	; (8013ba8 <SwitchClass+0x1cc>)
 8013b0e:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8013b12:	4b25      	ldr	r3, [pc, #148]	; (8013ba8 <SwitchClass+0x1cc>)
 8013b14:	2203      	movs	r2, #3
 8013b16:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8013b1a:	4b23      	ldr	r3, [pc, #140]	; (8013ba8 <SwitchClass+0x1cc>)
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8013b22:	e009      	b.n	8013b38 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b28:	b2db      	uxtb	r3, r3
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	b2db      	uxtb	r3, r3
 8013b2e:	73bb      	strb	r3, [r7, #14]
 8013b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	dd9f      	ble.n	8013a78 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8013b38:	4b1b      	ldr	r3, [pc, #108]	; (8013ba8 <SwitchClass+0x1cc>)
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8013b40:	4b1a      	ldr	r3, [pc, #104]	; (8013bac <SwitchClass+0x1d0>)
 8013b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b44:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8013b46:	f001 fa29 	bl	8014f9c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8013b4e:	e01e      	b.n	8013b8e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8013b50:	79fb      	ldrb	r3, [r7, #7]
 8013b52:	4618      	mov	r0, r3
 8013b54:	f003 fbea 	bl	801732c <LoRaMacClassBSwitchClass>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8013b5c:	7bfb      	ldrb	r3, [r7, #15]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d117      	bne.n	8013b92 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013b62:	4a10      	ldr	r2, [pc, #64]	; (8013ba4 <SwitchClass+0x1c8>)
 8013b64:	79fb      	ldrb	r3, [r7, #7]
 8013b66:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8013b6a:	e012      	b.n	8013b92 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8013b6c:	79fb      	ldrb	r3, [r7, #7]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d111      	bne.n	8013b96 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8013b72:	4b0d      	ldr	r3, [pc, #52]	; (8013ba8 <SwitchClass+0x1cc>)
 8013b74:	2206      	movs	r2, #6
 8013b76:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013b7a:	4a0a      	ldr	r2, [pc, #40]	; (8013ba4 <SwitchClass+0x1c8>)
 8013b7c:	79fb      	ldrb	r3, [r7, #7]
 8013b7e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8013b82:	4b0a      	ldr	r3, [pc, #40]	; (8013bac <SwitchClass+0x1d0>)
 8013b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b86:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8013b8c:	e003      	b.n	8013b96 <SwitchClass+0x1ba>
            break;
 8013b8e:	bf00      	nop
 8013b90:	e002      	b.n	8013b98 <SwitchClass+0x1bc>
            break;
 8013b92:	bf00      	nop
 8013b94:	e000      	b.n	8013b98 <SwitchClass+0x1bc>
            break;
 8013b96:	bf00      	nop
        }
    }

    return status;
 8013b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3710      	adds	r7, #16
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	20000e48 	.word	0x20000e48
 8013ba8:	2000092c 	.word	0x2000092c
 8013bac:	08021f14 	.word	0x08021f14

08013bb0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b086      	sub	sp, #24
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013bba:	4b10      	ldr	r3, [pc, #64]	; (8013bfc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013bbc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013bc0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8013bc2:	79fb      	ldrb	r3, [r7, #7]
 8013bc4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8013bc6:	230d      	movs	r3, #13
 8013bc8:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8013bca:	4b0c      	ldr	r3, [pc, #48]	; (8013bfc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013bcc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d001      	beq.n	8013bd8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8013bd4:	230e      	movs	r3, #14
 8013bd6:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013bd8:	4b08      	ldr	r3, [pc, #32]	; (8013bfc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013bda:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bde:	f107 0210 	add.w	r2, r7, #16
 8013be2:	4611      	mov	r1, r2
 8013be4:	4618      	mov	r0, r3
 8013be6:	f005 faec 	bl	80191c2 <RegionGetPhyParam>
 8013bea:	4603      	mov	r3, r0
 8013bec:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	b2db      	uxtb	r3, r3
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3718      	adds	r7, #24
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	20000e48 	.word	0x20000e48

08013c00 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	71fb      	strb	r3, [r7, #7]
 8013c0a:	460b      	mov	r3, r1
 8013c0c:	71bb      	strb	r3, [r7, #6]
 8013c0e:	4613      	mov	r3, r2
 8013c10:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8013c16:	2300      	movs	r3, #0
 8013c18:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013c1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7ff ffc6 	bl	8013bb0 <GetMaxAppPayloadWithoutFOptsLength>
 8013c24:	4603      	mov	r3, r0
 8013c26:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8013c28:	79fb      	ldrb	r3, [r7, #7]
 8013c2a:	b29a      	uxth	r2, r3
 8013c2c:	797b      	ldrb	r3, [r7, #5]
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	4413      	add	r3, r2
 8013c32:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8013c34:	89ba      	ldrh	r2, [r7, #12]
 8013c36:	89fb      	ldrh	r3, [r7, #14]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d804      	bhi.n	8013c46 <ValidatePayloadLength+0x46>
 8013c3c:	89bb      	ldrh	r3, [r7, #12]
 8013c3e:	2bff      	cmp	r3, #255	; 0xff
 8013c40:	d801      	bhi.n	8013c46 <ValidatePayloadLength+0x46>
    {
        return true;
 8013c42:	2301      	movs	r3, #1
 8013c44:	e000      	b.n	8013c48 <ValidatePayloadLength+0x48>
    }
    return false;
 8013c46:	2300      	movs	r3, #0
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3710      	adds	r7, #16
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8013c50:	b590      	push	{r4, r7, lr}
 8013c52:	b0a5      	sub	sp, #148	; 0x94
 8013c54:	af02      	add	r7, sp, #8
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	4608      	mov	r0, r1
 8013c5a:	4611      	mov	r1, r2
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4603      	mov	r3, r0
 8013c60:	70fb      	strb	r3, [r7, #3]
 8013c62:	460b      	mov	r3, r1
 8013c64:	70bb      	strb	r3, [r7, #2]
 8013c66:	4613      	mov	r3, r2
 8013c68:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8013c70:	2300      	movs	r3, #0
 8013c72:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013c76:	2300      	movs	r3, #0
 8013c78:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8013c7c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	f000 84ab 	beq.w	80145dc <ProcessMacCommands+0x98c>
 8013c86:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8013c8a:	2b01      	cmp	r3, #1
 8013c8c:	f040 84ac 	bne.w	80145e8 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8013c90:	f000 bca4 	b.w	80145dc <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8013c94:	78fb      	ldrb	r3, [r7, #3]
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	4413      	add	r3, r2
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f003 fe43 	bl	8017928 <LoRaMacCommandsGetCmdSize>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	78fb      	ldrb	r3, [r7, #3]
 8013ca8:	441a      	add	r2, r3
 8013caa:	78bb      	ldrb	r3, [r7, #2]
 8013cac:	429a      	cmp	r2, r3
 8013cae:	f300 849d 	bgt.w	80145ec <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8013cb2:	78fb      	ldrb	r3, [r7, #3]
 8013cb4:	1c5a      	adds	r2, r3, #1
 8013cb6:	70fa      	strb	r2, [r7, #3]
 8013cb8:	461a      	mov	r2, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	3b02      	subs	r3, #2
 8013cc2:	2b11      	cmp	r3, #17
 8013cc4:	f200 8494 	bhi.w	80145f0 <ProcessMacCommands+0x9a0>
 8013cc8:	a201      	add	r2, pc, #4	; (adr r2, 8013cd0 <ProcessMacCommands+0x80>)
 8013cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cce:	bf00      	nop
 8013cd0:	08013d19 	.word	0x08013d19
 8013cd4:	08013d5b 	.word	0x08013d5b
 8013cd8:	08013ed7 	.word	0x08013ed7
 8013cdc:	08013f15 	.word	0x08013f15
 8013ce0:	0801400d 	.word	0x0801400d
 8013ce4:	0801405d 	.word	0x0801405d
 8013ce8:	08014119 	.word	0x08014119
 8013cec:	0801416f 	.word	0x0801416f
 8013cf0:	08014255 	.word	0x08014255
 8013cf4:	080145f1 	.word	0x080145f1
 8013cf8:	080145f1 	.word	0x080145f1
 8013cfc:	080142fd 	.word	0x080142fd
 8013d00:	080145f1 	.word	0x080145f1
 8013d04:	080145f1 	.word	0x080145f1
 8013d08:	0801441d 	.word	0x0801441d
 8013d0c:	08014451 	.word	0x08014451
 8013d10:	080144e1 	.word	0x080144e1
 8013d14:	08014557 	.word	0x08014557
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8013d18:	2005      	movs	r0, #5
 8013d1a:	f003 ffdd 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f000 845b 	beq.w	80145dc <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8013d26:	2105      	movs	r1, #5
 8013d28:	2000      	movs	r0, #0
 8013d2a:	f003 ff49 	bl	8017bc0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8013d2e:	78fb      	ldrb	r3, [r7, #3]
 8013d30:	1c5a      	adds	r2, r3, #1
 8013d32:	70fa      	strb	r2, [r7, #3]
 8013d34:	461a      	mov	r2, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4413      	add	r3, r2
 8013d3a:	781a      	ldrb	r2, [r3, #0]
 8013d3c:	4bb0      	ldr	r3, [pc, #704]	; (8014000 <ProcessMacCommands+0x3b0>)
 8013d3e:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8013d42:	78fb      	ldrb	r3, [r7, #3]
 8013d44:	1c5a      	adds	r2, r3, #1
 8013d46:	70fa      	strb	r2, [r7, #3]
 8013d48:	461a      	mov	r2, r3
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	781a      	ldrb	r2, [r3, #0]
 8013d50:	4bab      	ldr	r3, [pc, #684]	; (8014000 <ProcessMacCommands+0x3b0>)
 8013d52:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 8013d56:	f000 bc41 	b.w	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8013d60:	2300      	movs	r3, #0
 8013d62:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8013d66:	2300      	movs	r3, #0
 8013d68:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8013d72:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013d76:	f083 0301 	eor.w	r3, r3, #1
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f000 80a5 	beq.w	8013ecc <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8013d82:	2301      	movs	r3, #1
 8013d84:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8013d88:	78fb      	ldrb	r3, [r7, #3]
 8013d8a:	3b01      	subs	r3, #1
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	4413      	add	r3, r2
 8013d90:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013d92:	4b9c      	ldr	r3, [pc, #624]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013d94:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013d98:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013d9c:	4b99      	ldr	r3, [pc, #612]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013d9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013da2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013da6:	4b97      	ldr	r3, [pc, #604]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013da8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013dac:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013db0:	4b94      	ldr	r3, [pc, #592]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013db2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013db6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013dba:	4b92      	ldr	r3, [pc, #584]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013dbc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013dc0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8013dc4:	4b8f      	ldr	r3, [pc, #572]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013dc6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8013dca:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013dcc:	4b8d      	ldr	r3, [pc, #564]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013dce:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d008      	beq.n	8013de8 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8013dd6:	78ba      	ldrb	r2, [r7, #2]
 8013dd8:	78fb      	ldrb	r3, [r7, #3]
 8013dda:	1ad3      	subs	r3, r2, r3
 8013ddc:	b2db      	uxtb	r3, r3
 8013dde:	3301      	adds	r3, #1
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8013de6:	e002      	b.n	8013dee <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8013de8:	2305      	movs	r3, #5
 8013dea:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8013dee:	4b85      	ldr	r3, [pc, #532]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013df0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013df4:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8013df8:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8013dfc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e04:	9301      	str	r3, [sp, #4]
 8013e06:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8013e0a:	9300      	str	r3, [sp, #0]
 8013e0c:	4623      	mov	r3, r4
 8013e0e:	f005 fa95 	bl	801933c <RegionLinkAdrReq>
 8013e12:	4603      	mov	r3, r0
 8013e14:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8013e18:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013e1c:	f003 0307 	and.w	r3, r3, #7
 8013e20:	2b07      	cmp	r3, #7
 8013e22:	d119      	bne.n	8013e58 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8013e24:	4b77      	ldr	r3, [pc, #476]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013e26:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8013e2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	da03      	bge.n	8013e3a <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8013e32:	4b74      	ldr	r3, [pc, #464]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013e34:	2201      	movs	r2, #1
 8013e36:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8013e3a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8013e3e:	4b71      	ldr	r3, [pc, #452]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8013e44:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8013e48:	4b6e      	ldr	r3, [pc, #440]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8013e4e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8013e52:	4b6c      	ldr	r3, [pc, #432]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013e54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8013e58:	2300      	movs	r3, #0
 8013e5a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8013e5e:	e00b      	b.n	8013e78 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8013e60:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8013e64:	2201      	movs	r2, #1
 8013e66:	4619      	mov	r1, r3
 8013e68:	2003      	movs	r0, #3
 8013e6a:	f003 fbfd 	bl	8017668 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8013e6e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8013e72:	3301      	adds	r3, #1
 8013e74:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8013e78:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8013e7c:	4a62      	ldr	r2, [pc, #392]	; (8014008 <ProcessMacCommands+0x3b8>)
 8013e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8013e82:	089b      	lsrs	r3, r3, #2
 8013e84:	b2db      	uxtb	r3, r3
 8013e86:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d3e8      	bcc.n	8013e60 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8013e8e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8013e92:	78fb      	ldrb	r3, [r7, #3]
 8013e94:	4413      	add	r3, r2
 8013e96:	b2db      	uxtb	r3, r3
 8013e98:	3b01      	subs	r3, #1
 8013e9a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8013e9c:	78fa      	ldrb	r2, [r7, #3]
 8013e9e:	78bb      	ldrb	r3, [r7, #2]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d20a      	bcs.n	8013eba <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8013ea4:	78fb      	ldrb	r3, [r7, #3]
 8013ea6:	1c5a      	adds	r2, r3, #1
 8013ea8:	70fa      	strb	r2, [r7, #3]
 8013eaa:	461a      	mov	r2, r3
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	4413      	add	r3, r2
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	2b03      	cmp	r3, #3
 8013eb4:	f43f af68 	beq.w	8013d88 <ProcessMacCommands+0x138>
 8013eb8:	e000      	b.n	8013ebc <ProcessMacCommands+0x26c>
                            break;
 8013eba:	bf00      	nop

                    if( macIndex < commandsSize )
 8013ebc:	78fa      	ldrb	r2, [r7, #3]
 8013ebe:	78bb      	ldrb	r3, [r7, #2]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d206      	bcs.n	8013ed2 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8013ec4:	78fb      	ldrb	r3, [r7, #3]
 8013ec6:	3b01      	subs	r3, #1
 8013ec8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8013eca:	e002      	b.n	8013ed2 <ProcessMacCommands+0x282>
                    macIndex += 4;
 8013ecc:	78fb      	ldrb	r3, [r7, #3]
 8013ece:	3304      	adds	r3, #4
 8013ed0:	70fb      	strb	r3, [r7, #3]
                break;
 8013ed2:	bf00      	nop
 8013ed4:	e382      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8013ed6:	78fb      	ldrb	r3, [r7, #3]
 8013ed8:	1c5a      	adds	r2, r3, #1
 8013eda:	70fa      	strb	r2, [r7, #3]
 8013edc:	461a      	mov	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	4413      	add	r3, r2
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	f003 030f 	and.w	r3, r3, #15
 8013ee8:	b2da      	uxtb	r2, r3
 8013eea:	4b46      	ldr	r3, [pc, #280]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013eec:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8013ef0:	4b44      	ldr	r3, [pc, #272]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013ef2:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	2301      	movs	r3, #1
 8013efa:	4093      	lsls	r3, r2
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	4b41      	ldr	r3, [pc, #260]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013f00:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8013f04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013f08:	2200      	movs	r2, #0
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	2004      	movs	r0, #4
 8013f0e:	f003 fbab 	bl	8017668 <LoRaMacCommandsAddCmd>
                break;
 8013f12:	e363      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8013f14:	2307      	movs	r3, #7
 8013f16:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8013f1a:	78fb      	ldrb	r3, [r7, #3]
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	4413      	add	r3, r2
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	091b      	lsrs	r3, r3, #4
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	b25b      	sxtb	r3, r3
 8013f28:	f003 0307 	and.w	r3, r3, #7
 8013f2c:	b25b      	sxtb	r3, r3
 8013f2e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8013f32:	78fb      	ldrb	r3, [r7, #3]
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	4413      	add	r3, r2
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	b25b      	sxtb	r3, r3
 8013f3c:	f003 030f 	and.w	r3, r3, #15
 8013f40:	b25b      	sxtb	r3, r3
 8013f42:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8013f46:	78fb      	ldrb	r3, [r7, #3]
 8013f48:	3301      	adds	r3, #1
 8013f4a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8013f4c:	78fb      	ldrb	r3, [r7, #3]
 8013f4e:	1c5a      	adds	r2, r3, #1
 8013f50:	70fa      	strb	r2, [r7, #3]
 8013f52:	461a      	mov	r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	4413      	add	r3, r2
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013f5c:	78fb      	ldrb	r3, [r7, #3]
 8013f5e:	1c5a      	adds	r2, r3, #1
 8013f60:	70fa      	strb	r2, [r7, #3]
 8013f62:	461a      	mov	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	4413      	add	r3, r2
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	021a      	lsls	r2, r3, #8
 8013f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8013f72:	78fb      	ldrb	r3, [r7, #3]
 8013f74:	1c5a      	adds	r2, r3, #1
 8013f76:	70fa      	strb	r2, [r7, #3]
 8013f78:	461a      	mov	r2, r3
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	781b      	ldrb	r3, [r3, #0]
 8013f80:	041a      	lsls	r2, r3, #16
 8013f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f84:	4313      	orrs	r3, r2
 8013f86:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8013f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f8a:	2264      	movs	r2, #100	; 0x64
 8013f8c:	fb02 f303 	mul.w	r3, r2, r3
 8013f90:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8013f92:	4b1c      	ldr	r3, [pc, #112]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013f94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f98:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013f9c:	4611      	mov	r1, r2
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f005 f9e6 	bl	8019370 <RegionRxParamSetupReq>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8013faa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013fae:	f003 0307 	and.w	r3, r3, #7
 8013fb2:	2b07      	cmp	r3, #7
 8013fb4:	d117      	bne.n	8013fe6 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8013fb6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8013fba:	b2da      	uxtb	r2, r3
 8013fbc:	4b11      	ldr	r3, [pc, #68]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013fbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8013fc2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8013fc6:	b2da      	uxtb	r2, r3
 8013fc8:	4b0e      	ldr	r3, [pc, #56]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8013fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fd0:	4a0c      	ldr	r2, [pc, #48]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013fd2:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8013fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fd6:	4a0b      	ldr	r2, [pc, #44]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013fd8:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8013fda:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8013fde:	b2da      	uxtb	r2, r3
 8013fe0:	4b08      	ldr	r3, [pc, #32]	; (8014004 <ProcessMacCommands+0x3b4>)
 8013fe2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8013fe6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013fea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8013fee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013ff2:	2201      	movs	r2, #1
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	2005      	movs	r0, #5
 8013ff8:	f003 fb36 	bl	8017668 <LoRaMacCommandsAddCmd>
                break;
 8013ffc:	bf00      	nop
 8013ffe:	e2ed      	b.n	80145dc <ProcessMacCommands+0x98c>
 8014000:	2000092c 	.word	0x2000092c
 8014004:	20000e48 	.word	0x20000e48
 8014008:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801400c:	23ff      	movs	r3, #255	; 0xff
 801400e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8014012:	4bb7      	ldr	r3, [pc, #732]	; (80142f0 <ProcessMacCommands+0x6a0>)
 8014014:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00d      	beq.n	8014038 <ProcessMacCommands+0x3e8>
 801401c:	4bb4      	ldr	r3, [pc, #720]	; (80142f0 <ProcessMacCommands+0x6a0>)
 801401e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d007      	beq.n	8014038 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8014028:	4bb1      	ldr	r3, [pc, #708]	; (80142f0 <ProcessMacCommands+0x6a0>)
 801402a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	4798      	blx	r3
 8014032:	4603      	mov	r3, r0
 8014034:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8014038:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801403c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8014040:	787b      	ldrb	r3, [r7, #1]
 8014042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014046:	b2db      	uxtb	r3, r3
 8014048:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801404c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014050:	2202      	movs	r2, #2
 8014052:	4619      	mov	r1, r3
 8014054:	2006      	movs	r0, #6
 8014056:	f003 fb07 	bl	8017668 <LoRaMacCommandsAddCmd>
                break;
 801405a:	e2bf      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801405c:	2303      	movs	r3, #3
 801405e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8014062:	78fb      	ldrb	r3, [r7, #3]
 8014064:	1c5a      	adds	r2, r3, #1
 8014066:	70fa      	strb	r2, [r7, #3]
 8014068:	461a      	mov	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	4413      	add	r3, r2
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	b25b      	sxtb	r3, r3
 8014072:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8014076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801407a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801407c:	78fb      	ldrb	r3, [r7, #3]
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	70fa      	strb	r2, [r7, #3]
 8014082:	461a      	mov	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	4413      	add	r3, r2
 8014088:	781b      	ldrb	r3, [r3, #0]
 801408a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801408c:	78fb      	ldrb	r3, [r7, #3]
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	70fa      	strb	r2, [r7, #3]
 8014092:	461a      	mov	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	4413      	add	r3, r2
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	021a      	lsls	r2, r3, #8
 801409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409e:	4313      	orrs	r3, r2
 80140a0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80140a2:	78fb      	ldrb	r3, [r7, #3]
 80140a4:	1c5a      	adds	r2, r3, #1
 80140a6:	70fa      	strb	r2, [r7, #3]
 80140a8:	461a      	mov	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	4413      	add	r3, r2
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	041a      	lsls	r2, r3, #16
 80140b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b4:	4313      	orrs	r3, r2
 80140b6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80140b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ba:	2264      	movs	r2, #100	; 0x64
 80140bc:	fb02 f303 	mul.w	r3, r2, r3
 80140c0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80140c6:	78fb      	ldrb	r3, [r7, #3]
 80140c8:	1c5a      	adds	r2, r3, #1
 80140ca:	70fa      	strb	r2, [r7, #3]
 80140cc:	461a      	mov	r2, r3
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	4413      	add	r3, r2
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	b25b      	sxtb	r3, r3
 80140d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80140da:	4b86      	ldr	r3, [pc, #536]	; (80142f4 <ProcessMacCommands+0x6a4>)
 80140dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80140e4:	4611      	mov	r1, r2
 80140e6:	4618      	mov	r0, r3
 80140e8:	f005 f955 	bl	8019396 <RegionNewChannelReq>
 80140ec:	4603      	mov	r3, r0
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80140f4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80140f8:	b25b      	sxtb	r3, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	db0a      	blt.n	8014114 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 80140fe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8014102:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8014106:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801410a:	2201      	movs	r2, #1
 801410c:	4619      	mov	r1, r3
 801410e:	2007      	movs	r0, #7
 8014110:	f003 faaa 	bl	8017668 <LoRaMacCommandsAddCmd>
                }
                break;
 8014114:	bf00      	nop
 8014116:	e261      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8014118:	78fb      	ldrb	r3, [r7, #3]
 801411a:	1c5a      	adds	r2, r3, #1
 801411c:	70fa      	strb	r2, [r7, #3]
 801411e:	461a      	mov	r2, r3
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	4413      	add	r3, r2
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	f003 030f 	and.w	r3, r3, #15
 801412a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801412e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8014132:	2b00      	cmp	r3, #0
 8014134:	d104      	bne.n	8014140 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8014136:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801413a:	3301      	adds	r3, #1
 801413c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8014140:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8014144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014148:	fb02 f303 	mul.w	r3, r2, r3
 801414c:	461a      	mov	r2, r3
 801414e:	4b69      	ldr	r3, [pc, #420]	; (80142f4 <ProcessMacCommands+0x6a4>)
 8014150:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8014152:	4b68      	ldr	r3, [pc, #416]	; (80142f4 <ProcessMacCommands+0x6a4>)
 8014154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014156:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801415a:	4a66      	ldr	r2, [pc, #408]	; (80142f4 <ProcessMacCommands+0x6a4>)
 801415c:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801415e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014162:	2200      	movs	r2, #0
 8014164:	4619      	mov	r1, r3
 8014166:	2008      	movs	r0, #8
 8014168:	f003 fa7e 	bl	8017668 <LoRaMacCommandsAddCmd>
                break;
 801416c:	e236      	b.n	80145dc <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801416e:	78fb      	ldrb	r3, [r7, #3]
 8014170:	1c5a      	adds	r2, r3, #1
 8014172:	70fa      	strb	r2, [r7, #3]
 8014174:	461a      	mov	r2, r3
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	4413      	add	r3, r2
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8014180:	2300      	movs	r3, #0
 8014182:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8014186:	2300      	movs	r3, #0
 8014188:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801418c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8014190:	f003 0320 	and.w	r3, r3, #32
 8014194:	2b00      	cmp	r3, #0
 8014196:	d002      	beq.n	801419e <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8014198:	2301      	movs	r3, #1
 801419a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801419e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80141a2:	f003 0310 	and.w	r3, r3, #16
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d002      	beq.n	80141b0 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80141aa:	2301      	movs	r3, #1
 80141ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80141b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80141b4:	f003 030f 	and.w	r3, r3, #15
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80141be:	4b4d      	ldr	r3, [pc, #308]	; (80142f4 <ProcessMacCommands+0x6a4>)
 80141c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80141c8:	4611      	mov	r1, r2
 80141ca:	4618      	mov	r0, r3
 80141cc:	f005 f8f6 	bl	80193bc <RegionTxParamSetupReq>
 80141d0:	4603      	mov	r3, r0
 80141d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141d6:	d03b      	beq.n	8014250 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80141d8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80141dc:	4b45      	ldr	r3, [pc, #276]	; (80142f4 <ProcessMacCommands+0x6a4>)
 80141de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80141e2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80141e6:	4b43      	ldr	r3, [pc, #268]	; (80142f4 <ProcessMacCommands+0x6a4>)
 80141e8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80141ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80141f0:	461a      	mov	r2, r3
 80141f2:	4b41      	ldr	r3, [pc, #260]	; (80142f8 <ProcessMacCommands+0x6a8>)
 80141f4:	5c9b      	ldrb	r3, [r3, r2]
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7ec fd9e 	bl	8000d38 <__aeabi_ui2f>
 80141fc:	4603      	mov	r3, r0
 80141fe:	4a3d      	ldr	r2, [pc, #244]	; (80142f4 <ProcessMacCommands+0x6a4>)
 8014200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8014204:	2302      	movs	r3, #2
 8014206:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801420a:	4b3a      	ldr	r3, [pc, #232]	; (80142f4 <ProcessMacCommands+0x6a4>)
 801420c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014210:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014214:	4b37      	ldr	r3, [pc, #220]	; (80142f4 <ProcessMacCommands+0x6a4>)
 8014216:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801421a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801421e:	4611      	mov	r1, r2
 8014220:	4618      	mov	r0, r3
 8014222:	f004 ffce 	bl	80191c2 <RegionGetPhyParam>
 8014226:	4603      	mov	r3, r0
 8014228:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 801422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801422c:	b25a      	sxtb	r2, r3
 801422e:	4b31      	ldr	r3, [pc, #196]	; (80142f4 <ProcessMacCommands+0x6a4>)
 8014230:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014234:	4293      	cmp	r3, r2
 8014236:	bfb8      	it	lt
 8014238:	4613      	movlt	r3, r2
 801423a:	b25a      	sxtb	r2, r3
 801423c:	4b2d      	ldr	r3, [pc, #180]	; (80142f4 <ProcessMacCommands+0x6a4>)
 801423e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8014242:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014246:	2200      	movs	r2, #0
 8014248:	4619      	mov	r1, r3
 801424a:	2009      	movs	r0, #9
 801424c:	f003 fa0c 	bl	8017668 <LoRaMacCommandsAddCmd>
                }
                break;
 8014250:	bf00      	nop
 8014252:	e1c3      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8014254:	2303      	movs	r3, #3
 8014256:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801425a:	78fb      	ldrb	r3, [r7, #3]
 801425c:	1c5a      	adds	r2, r3, #1
 801425e:	70fa      	strb	r2, [r7, #3]
 8014260:	461a      	mov	r2, r3
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	4413      	add	r3, r2
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801426c:	78fb      	ldrb	r3, [r7, #3]
 801426e:	1c5a      	adds	r2, r3, #1
 8014270:	70fa      	strb	r2, [r7, #3]
 8014272:	461a      	mov	r2, r3
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	4413      	add	r3, r2
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801427c:	78fb      	ldrb	r3, [r7, #3]
 801427e:	1c5a      	adds	r2, r3, #1
 8014280:	70fa      	strb	r2, [r7, #3]
 8014282:	461a      	mov	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	4413      	add	r3, r2
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	021a      	lsls	r2, r3, #8
 801428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428e:	4313      	orrs	r3, r2
 8014290:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8014292:	78fb      	ldrb	r3, [r7, #3]
 8014294:	1c5a      	adds	r2, r3, #1
 8014296:	70fa      	strb	r2, [r7, #3]
 8014298:	461a      	mov	r2, r3
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	4413      	add	r3, r2
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	041a      	lsls	r2, r3, #16
 80142a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a4:	4313      	orrs	r3, r2
 80142a6:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80142a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142aa:	2264      	movs	r2, #100	; 0x64
 80142ac:	fb02 f303 	mul.w	r3, r2, r3
 80142b0:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80142b2:	4b10      	ldr	r3, [pc, #64]	; (80142f4 <ProcessMacCommands+0x6a4>)
 80142b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142b8:	f107 0220 	add.w	r2, r7, #32
 80142bc:	4611      	mov	r1, r2
 80142be:	4618      	mov	r0, r3
 80142c0:	f005 f88f 	bl	80193e2 <RegionDlChannelReq>
 80142c4:	4603      	mov	r3, r0
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80142cc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80142d0:	b25b      	sxtb	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	db0a      	blt.n	80142ec <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 80142d6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80142da:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80142de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80142e2:	2201      	movs	r2, #1
 80142e4:	4619      	mov	r1, r3
 80142e6:	200a      	movs	r0, #10
 80142e8:	f003 f9be 	bl	8017668 <LoRaMacCommandsAddCmd>
                }
                break;
 80142ec:	bf00      	nop
 80142ee:	e175      	b.n	80145dc <ProcessMacCommands+0x98c>
 80142f0:	2000092c 	.word	0x2000092c
 80142f4:	20000e48 	.word	0x20000e48
 80142f8:	08021e80 	.word	0x08021e80
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80142fc:	2009      	movs	r0, #9
 80142fe:	f003 fceb 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	f000 8084 	beq.w	8014412 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801430a:	2109      	movs	r1, #9
 801430c:	2000      	movs	r0, #0
 801430e:	f003 fc57 	bl	8017bc0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8014312:	f107 0318 	add.w	r3, r7, #24
 8014316:	2200      	movs	r2, #0
 8014318:	601a      	str	r2, [r3, #0]
 801431a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 801431c:	f107 0310 	add.w	r3, r7, #16
 8014320:	2200      	movs	r2, #0
 8014322:	601a      	str	r2, [r3, #0]
 8014324:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8014326:	f107 0308 	add.w	r3, r7, #8
 801432a:	2200      	movs	r2, #0
 801432c:	601a      	str	r2, [r3, #0]
 801432e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8014330:	78fb      	ldrb	r3, [r7, #3]
 8014332:	1c5a      	adds	r2, r3, #1
 8014334:	70fa      	strb	r2, [r7, #3]
 8014336:	461a      	mov	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4413      	add	r3, r2
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8014340:	78fb      	ldrb	r3, [r7, #3]
 8014342:	1c5a      	adds	r2, r3, #1
 8014344:	70fa      	strb	r2, [r7, #3]
 8014346:	461a      	mov	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	4413      	add	r3, r2
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	021a      	lsls	r2, r3, #8
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	4313      	orrs	r3, r2
 8014354:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8014356:	78fb      	ldrb	r3, [r7, #3]
 8014358:	1c5a      	adds	r2, r3, #1
 801435a:	70fa      	strb	r2, [r7, #3]
 801435c:	461a      	mov	r2, r3
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	4413      	add	r3, r2
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	041a      	lsls	r2, r3, #16
 8014366:	69bb      	ldr	r3, [r7, #24]
 8014368:	4313      	orrs	r3, r2
 801436a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801436c:	78fb      	ldrb	r3, [r7, #3]
 801436e:	1c5a      	adds	r2, r3, #1
 8014370:	70fa      	strb	r2, [r7, #3]
 8014372:	461a      	mov	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	4413      	add	r3, r2
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	061a      	lsls	r2, r3, #24
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	4313      	orrs	r3, r2
 8014380:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8014382:	78fb      	ldrb	r3, [r7, #3]
 8014384:	1c5a      	adds	r2, r3, #1
 8014386:	70fa      	strb	r2, [r7, #3]
 8014388:	461a      	mov	r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	4413      	add	r3, r2
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	b21b      	sxth	r3, r3
 8014392:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8014394:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8014398:	461a      	mov	r2, r3
 801439a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801439e:	fb02 f303 	mul.w	r3, r2, r3
 80143a2:	121b      	asrs	r3, r3, #8
 80143a4:	b21b      	sxth	r3, r3
 80143a6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80143a8:	f107 0310 	add.w	r3, r7, #16
 80143ac:	f107 0218 	add.w	r2, r7, #24
 80143b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143b4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80143b8:	693a      	ldr	r2, [r7, #16]
 80143ba:	4b8f      	ldr	r3, [pc, #572]	; (80145f8 <ProcessMacCommands+0x9a8>)
 80143bc:	4413      	add	r3, r2
 80143be:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80143c0:	f107 0308 	add.w	r3, r7, #8
 80143c4:	4618      	mov	r0, r3
 80143c6:	f00a fee5 	bl	801f194 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80143ca:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80143ce:	4b8b      	ldr	r3, [pc, #556]	; (80145fc <ProcessMacCommands+0x9ac>)
 80143d0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80143d4:	9200      	str	r2, [sp, #0]
 80143d6:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80143da:	f107 0210 	add.w	r2, r7, #16
 80143de:	ca06      	ldmia	r2, {r1, r2}
 80143e0:	f00a fe71 	bl	801f0c6 <SysTimeSub>
 80143e4:	f107 0010 	add.w	r0, r7, #16
 80143e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143ee:	f107 0208 	add.w	r2, r7, #8
 80143f2:	ca06      	ldmia	r2, {r1, r2}
 80143f4:	f00a fe2e 	bl	801f054 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80143f8:	f107 0310 	add.w	r3, r7, #16
 80143fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014400:	f00a fe9a 	bl	801f138 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8014404:	f002 ffd0 	bl	80173a8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8014408:	4b7c      	ldr	r3, [pc, #496]	; (80145fc <ProcessMacCommands+0x9ac>)
 801440a:	2201      	movs	r2, #1
 801440c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8014410:	e0e4      	b.n	80145dc <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8014412:	4b7a      	ldr	r3, [pc, #488]	; (80145fc <ProcessMacCommands+0x9ac>)
 8014414:	2200      	movs	r2, #0
 8014416:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 801441a:	e0df      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801441c:	200c      	movs	r0, #12
 801441e:	f003 fc5b 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	f000 80d9 	beq.w	80145dc <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801442a:	210c      	movs	r1, #12
 801442c:	2000      	movs	r0, #0
 801442e:	f003 fbc7 	bl	8017bc0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8014432:	4b72      	ldr	r3, [pc, #456]	; (80145fc <ProcessMacCommands+0x9ac>)
 8014434:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8014438:	2b04      	cmp	r3, #4
 801443a:	f000 80cf 	beq.w	80145dc <ProcessMacCommands+0x98c>
 801443e:	4b6f      	ldr	r3, [pc, #444]	; (80145fc <ProcessMacCommands+0x9ac>)
 8014440:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8014444:	2b05      	cmp	r3, #5
 8014446:	f000 80c9 	beq.w	80145dc <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801444a:	f002 ff8e 	bl	801736a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801444e:	e0c5      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8014450:	2303      	movs	r3, #3
 8014452:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8014456:	2300      	movs	r3, #0
 8014458:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801445a:	78fb      	ldrb	r3, [r7, #3]
 801445c:	1c5a      	adds	r2, r3, #1
 801445e:	70fa      	strb	r2, [r7, #3]
 8014460:	461a      	mov	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	4413      	add	r3, r2
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801446a:	78fb      	ldrb	r3, [r7, #3]
 801446c:	1c5a      	adds	r2, r3, #1
 801446e:	70fa      	strb	r2, [r7, #3]
 8014470:	461a      	mov	r2, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	4413      	add	r3, r2
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	021b      	lsls	r3, r3, #8
 801447a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801447c:	4313      	orrs	r3, r2
 801447e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014480:	78fb      	ldrb	r3, [r7, #3]
 8014482:	1c5a      	adds	r2, r3, #1
 8014484:	70fa      	strb	r2, [r7, #3]
 8014486:	461a      	mov	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	4413      	add	r3, r2
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	041b      	lsls	r3, r3, #16
 8014490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014492:	4313      	orrs	r3, r2
 8014494:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8014496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014498:	2264      	movs	r2, #100	; 0x64
 801449a:	fb02 f303 	mul.w	r3, r2, r3
 801449e:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80144a0:	78fb      	ldrb	r3, [r7, #3]
 80144a2:	1c5a      	adds	r2, r3, #1
 80144a4:	70fa      	strb	r2, [r7, #3]
 80144a6:	461a      	mov	r2, r3
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	4413      	add	r3, r2
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	f003 030f 	and.w	r3, r3, #15
 80144b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80144b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80144bc:	4618      	mov	r0, r3
 80144be:	f002 ff5a 	bl	8017376 <LoRaMacClassBPingSlotChannelReq>
 80144c2:	4603      	mov	r3, r0
 80144c4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80144c8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80144cc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80144d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80144d4:	2201      	movs	r2, #1
 80144d6:	4619      	mov	r1, r3
 80144d8:	2011      	movs	r0, #17
 80144da:	f003 f8c5 	bl	8017668 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80144de:	e07d      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80144e0:	200d      	movs	r0, #13
 80144e2:	f003 fbf9 	bl	8017cd8 <LoRaMacConfirmQueueIsCmdActive>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d077      	beq.n	80145dc <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80144ec:	210d      	movs	r1, #13
 80144ee:	2000      	movs	r0, #0
 80144f0:	f003 fb66 	bl	8017bc0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80144f4:	2300      	movs	r3, #0
 80144f6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80144fa:	2300      	movs	r3, #0
 80144fc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8014500:	78fb      	ldrb	r3, [r7, #3]
 8014502:	1c5a      	adds	r2, r3, #1
 8014504:	70fa      	strb	r2, [r7, #3]
 8014506:	461a      	mov	r2, r3
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	4413      	add	r3, r2
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8014512:	78fb      	ldrb	r3, [r7, #3]
 8014514:	1c5a      	adds	r2, r3, #1
 8014516:	70fa      	strb	r2, [r7, #3]
 8014518:	461a      	mov	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	4413      	add	r3, r2
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	021b      	lsls	r3, r3, #8
 8014522:	b21a      	sxth	r2, r3
 8014524:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8014528:	4313      	orrs	r3, r2
 801452a:	b21b      	sxth	r3, r3
 801452c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8014530:	78fb      	ldrb	r3, [r7, #3]
 8014532:	1c5a      	adds	r2, r3, #1
 8014534:	70fa      	strb	r2, [r7, #3]
 8014536:	461a      	mov	r2, r3
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	4413      	add	r3, r2
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8014542:	4b2f      	ldr	r3, [pc, #188]	; (8014600 <ProcessMacCommands+0x9b0>)
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801454a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801454e:	4618      	mov	r0, r3
 8014550:	f002 ff1d 	bl	801738e <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8014554:	e042      	b.n	80145dc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8014556:	2300      	movs	r3, #0
 8014558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801455c:	78fb      	ldrb	r3, [r7, #3]
 801455e:	1c5a      	adds	r2, r3, #1
 8014560:	70fa      	strb	r2, [r7, #3]
 8014562:	461a      	mov	r2, r3
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	4413      	add	r3, r2
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801456e:	78fb      	ldrb	r3, [r7, #3]
 8014570:	1c5a      	adds	r2, r3, #1
 8014572:	70fa      	strb	r2, [r7, #3]
 8014574:	461a      	mov	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	4413      	add	r3, r2
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	021b      	lsls	r3, r3, #8
 801457e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014582:	4313      	orrs	r3, r2
 8014584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014588:	78fb      	ldrb	r3, [r7, #3]
 801458a:	1c5a      	adds	r2, r3, #1
 801458c:	70fa      	strb	r2, [r7, #3]
 801458e:	461a      	mov	r2, r3
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	4413      	add	r3, r2
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	041b      	lsls	r3, r3, #16
 8014598:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801459c:	4313      	orrs	r3, r2
 801459e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80145a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80145a6:	2264      	movs	r2, #100	; 0x64
 80145a8:	fb02 f303 	mul.w	r3, r2, r3
 80145ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80145b0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80145b4:	f002 fefe 	bl	80173b4 <LoRaMacClassBBeaconFreqReq>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d003      	beq.n	80145c6 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 80145be:	2301      	movs	r3, #1
 80145c0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80145c4:	e002      	b.n	80145cc <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80145c6:	2300      	movs	r3, #0
 80145c8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80145cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80145d0:	2201      	movs	r2, #1
 80145d2:	4619      	mov	r1, r3
 80145d4:	2013      	movs	r0, #19
 80145d6:	f003 f847 	bl	8017668 <LoRaMacCommandsAddCmd>
                }
                break;
 80145da:	bf00      	nop
    while( macIndex < commandsSize )
 80145dc:	78fa      	ldrb	r2, [r7, #3]
 80145de:	78bb      	ldrb	r3, [r7, #2]
 80145e0:	429a      	cmp	r2, r3
 80145e2:	f4ff ab57 	bcc.w	8013c94 <ProcessMacCommands+0x44>
 80145e6:	e004      	b.n	80145f2 <ProcessMacCommands+0x9a2>
        return;
 80145e8:	bf00      	nop
 80145ea:	e002      	b.n	80145f2 <ProcessMacCommands+0x9a2>
            return;
 80145ec:	bf00      	nop
 80145ee:	e000      	b.n	80145f2 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80145f0:	bf00      	nop
        }
    }
}
 80145f2:	378c      	adds	r7, #140	; 0x8c
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd90      	pop	{r4, r7, pc}
 80145f8:	12d53d80 	.word	0x12d53d80
 80145fc:	2000092c 	.word	0x2000092c
 8014600:	20001a78 	.word	0x20001a78

08014604 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b08e      	sub	sp, #56	; 0x38
 8014608:	af02      	add	r7, sp, #8
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	607a      	str	r2, [r7, #4]
 801460e:	461a      	mov	r2, r3
 8014610:	460b      	mov	r3, r1
 8014612:	72fb      	strb	r3, [r7, #11]
 8014614:	4613      	mov	r3, r2
 8014616:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014618:	2303      	movs	r3, #3
 801461a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801461e:	4b66      	ldr	r3, [pc, #408]	; (80147b8 <Send+0x1b4>)
 8014620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014624:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8014628:	4b63      	ldr	r3, [pc, #396]	; (80147b8 <Send+0x1b4>)
 801462a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801462e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014632:	4b61      	ldr	r3, [pc, #388]	; (80147b8 <Send+0x1b4>)
 8014634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014636:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8014638:	4b5f      	ldr	r3, [pc, #380]	; (80147b8 <Send+0x1b4>)
 801463a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801463e:	2b00      	cmp	r3, #0
 8014640:	d101      	bne.n	8014646 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8014642:	2307      	movs	r3, #7
 8014644:	e0b4      	b.n	80147b0 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8014646:	4b5c      	ldr	r3, [pc, #368]	; (80147b8 <Send+0x1b4>)
 8014648:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801464c:	2b00      	cmp	r3, #0
 801464e:	d102      	bne.n	8014656 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014650:	4b59      	ldr	r3, [pc, #356]	; (80147b8 <Send+0x1b4>)
 8014652:	2200      	movs	r2, #0
 8014654:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8014656:	2300      	movs	r3, #0
 8014658:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801465c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014660:	f36f 0303 	bfc	r3, #0, #4
 8014664:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8014668:	4b53      	ldr	r3, [pc, #332]	; (80147b8 <Send+0x1b4>)
 801466a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801466e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014672:	f362 13c7 	bfi	r3, r2, #7, #1
 8014676:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801467a:	4b4f      	ldr	r3, [pc, #316]	; (80147b8 <Send+0x1b4>)
 801467c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014680:	2b01      	cmp	r3, #1
 8014682:	d106      	bne.n	8014692 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8014684:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014688:	f043 0310 	orr.w	r3, r3, #16
 801468c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8014690:	e005      	b.n	801469e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8014692:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014696:	f36f 1304 	bfc	r3, #4, #1
 801469a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801469e:	4b46      	ldr	r3, [pc, #280]	; (80147b8 <Send+0x1b4>)
 80146a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d005      	beq.n	80146b4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80146a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80146ac:	f043 0320 	orr.w	r3, r3, #32
 80146b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80146b4:	2301      	movs	r3, #1
 80146b6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80146b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80146bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80146c0:	b2db      	uxtb	r3, r3
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	bf14      	ite	ne
 80146c6:	2301      	movne	r3, #1
 80146c8:	2300      	moveq	r3, #0
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80146ce:	4b3a      	ldr	r3, [pc, #232]	; (80147b8 <Send+0x1b4>)
 80146d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146d2:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80146d4:	4b38      	ldr	r3, [pc, #224]	; (80147b8 <Send+0x1b4>)
 80146d6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80146da:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80146dc:	4b36      	ldr	r3, [pc, #216]	; (80147b8 <Send+0x1b4>)
 80146de:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80146e2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80146e4:	4b34      	ldr	r3, [pc, #208]	; (80147b8 <Send+0x1b4>)
 80146e6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80146ea:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80146ee:	4b32      	ldr	r3, [pc, #200]	; (80147b8 <Send+0x1b4>)
 80146f0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80146f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80146f8:	4b2f      	ldr	r3, [pc, #188]	; (80147b8 <Send+0x1b4>)
 80146fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80146fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8014702:	4b2d      	ldr	r3, [pc, #180]	; (80147b8 <Send+0x1b4>)
 8014704:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014708:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801470c:	4b2a      	ldr	r3, [pc, #168]	; (80147b8 <Send+0x1b4>)
 801470e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8014712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8014716:	f107 0014 	add.w	r0, r7, #20
 801471a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801471e:	9300      	str	r3, [sp, #0]
 8014720:	4b26      	ldr	r3, [pc, #152]	; (80147bc <Send+0x1b8>)
 8014722:	4a27      	ldr	r2, [pc, #156]	; (80147c0 <Send+0x1bc>)
 8014724:	4927      	ldr	r1, [pc, #156]	; (80147c4 <Send+0x1c0>)
 8014726:	f002 fcbf 	bl	80170a8 <LoRaMacAdrCalcNext>
 801472a:	4603      	mov	r3, r0
 801472c:	461a      	mov	r2, r3
 801472e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014732:	f362 1386 	bfi	r3, r2, #6, #1
 8014736:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801473a:	7afa      	ldrb	r2, [r7, #11]
 801473c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8014740:	893b      	ldrh	r3, [r7, #8]
 8014742:	9300      	str	r3, [sp, #0]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	68f8      	ldr	r0, [r7, #12]
 8014748:	f000 fc72 	bl	8015030 <PrepareFrame>
 801474c:	4603      	mov	r3, r0
 801474e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8014752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014756:	2b00      	cmp	r3, #0
 8014758:	d003      	beq.n	8014762 <Send+0x15e>
 801475a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801475e:	2b0a      	cmp	r3, #10
 8014760:	d107      	bne.n	8014772 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8014762:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014766:	4618      	mov	r0, r3
 8014768:	f000 f962 	bl	8014a30 <ScheduleTx>
 801476c:	4603      	mov	r3, r0
 801476e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8014772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00a      	beq.n	8014790 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801477a:	4a0f      	ldr	r2, [pc, #60]	; (80147b8 <Send+0x1b4>)
 801477c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014780:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8014784:	4a0c      	ldr	r2, [pc, #48]	; (80147b8 <Send+0x1b4>)
 8014786:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801478a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 801478e:	e00d      	b.n	80147ac <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8014790:	4b09      	ldr	r3, [pc, #36]	; (80147b8 <Send+0x1b4>)
 8014792:	2200      	movs	r2, #0
 8014794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8014798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479a:	4a07      	ldr	r2, [pc, #28]	; (80147b8 <Send+0x1b4>)
 801479c:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801479e:	f003 f809 	bl	80177b4 <LoRaMacCommandsRemoveNoneStickyCmds>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d001      	beq.n	80147ac <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80147a8:	2313      	movs	r3, #19
 80147aa:	e001      	b.n	80147b0 <Send+0x1ac>
        }
    }
    return status;
 80147ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3730      	adds	r7, #48	; 0x30
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	20000e48 	.word	0x20000e48
 80147bc:	20000eb0 	.word	0x20000eb0
 80147c0:	20000e80 	.word	0x20000e80
 80147c4:	20000e81 	.word	0x20000e81

080147c8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b084      	sub	sp, #16
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	4603      	mov	r3, r0
 80147d0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80147d2:	2300      	movs	r3, #0
 80147d4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80147da:	2301      	movs	r3, #1
 80147dc:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80147de:	79fb      	ldrb	r3, [r7, #7]
 80147e0:	2bff      	cmp	r3, #255	; 0xff
 80147e2:	d11f      	bne.n	8014824 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80147e4:	2000      	movs	r0, #0
 80147e6:	f7ff f8f9 	bl	80139dc <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80147ea:	4b15      	ldr	r3, [pc, #84]	; (8014840 <SendReJoinReq+0x78>)
 80147ec:	2200      	movs	r2, #0
 80147ee:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80147f2:	4b13      	ldr	r3, [pc, #76]	; (8014840 <SendReJoinReq+0x78>)
 80147f4:	4a13      	ldr	r2, [pc, #76]	; (8014844 <SendReJoinReq+0x7c>)
 80147f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80147fa:	4b11      	ldr	r3, [pc, #68]	; (8014840 <SendReJoinReq+0x78>)
 80147fc:	22ff      	movs	r2, #255	; 0xff
 80147fe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8014802:	7b3b      	ldrb	r3, [r7, #12]
 8014804:	f36f 1347 	bfc	r3, #5, #3
 8014808:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801480a:	7b3a      	ldrb	r2, [r7, #12]
 801480c:	4b0c      	ldr	r3, [pc, #48]	; (8014840 <SendReJoinReq+0x78>)
 801480e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8014812:	480d      	ldr	r0, [pc, #52]	; (8014848 <SendReJoinReq+0x80>)
 8014814:	f7fb ff34 	bl	8010680 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8014818:	480c      	ldr	r0, [pc, #48]	; (801484c <SendReJoinReq+0x84>)
 801481a:	f7fb ff01 	bl	8010620 <SecureElementGetDevEui>

            allowDelayedTx = false;
 801481e:	2300      	movs	r3, #0
 8014820:	73fb      	strb	r3, [r7, #15]

            break;
 8014822:	e002      	b.n	801482a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014824:	2302      	movs	r3, #2
 8014826:	73bb      	strb	r3, [r7, #14]
            break;
 8014828:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801482a:	7bfb      	ldrb	r3, [r7, #15]
 801482c:	4618      	mov	r0, r3
 801482e:	f000 f8ff 	bl	8014a30 <ScheduleTx>
 8014832:	4603      	mov	r3, r0
 8014834:	73bb      	strb	r3, [r7, #14]
    return status;
 8014836:	7bbb      	ldrb	r3, [r7, #14]
}
 8014838:	4618      	mov	r0, r3
 801483a:	3710      	adds	r7, #16
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	2000092c 	.word	0x2000092c
 8014844:	2000092e 	.word	0x2000092e
 8014848:	20000a3a 	.word	0x20000a3a
 801484c:	20000a42 	.word	0x20000a42

08014850 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8014850:	b580      	push	{r7, lr}
 8014852:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8014854:	f002 fd38 	bl	80172c8 <LoRaMacClassBIsBeaconExpected>
 8014858:	4603      	mov	r3, r0
 801485a:	2b00      	cmp	r3, #0
 801485c:	d001      	beq.n	8014862 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801485e:	230e      	movs	r3, #14
 8014860:	e013      	b.n	801488a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8014862:	4b0b      	ldr	r3, [pc, #44]	; (8014890 <CheckForClassBCollision+0x40>)
 8014864:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014868:	2b01      	cmp	r3, #1
 801486a:	d10d      	bne.n	8014888 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801486c:	f002 fd33 	bl	80172d6 <LoRaMacClassBIsPingExpected>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d001      	beq.n	801487a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8014876:	230f      	movs	r3, #15
 8014878:	e007      	b.n	801488a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801487a:	f002 fd33 	bl	80172e4 <LoRaMacClassBIsMulticastExpected>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d001      	beq.n	8014888 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8014884:	230f      	movs	r3, #15
 8014886:	e000      	b.n	801488a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8014888:	2300      	movs	r3, #0
}
 801488a:	4618      	mov	r0, r3
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	20000e48 	.word	0x20000e48

08014894 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8014894:	b590      	push	{r4, r7, lr}
 8014896:	b083      	sub	sp, #12
 8014898:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801489a:	4b2d      	ldr	r3, [pc, #180]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 801489c:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80148a0:	4b2b      	ldr	r3, [pc, #172]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148a2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80148a6:	4b2a      	ldr	r3, [pc, #168]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148a8:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 80148ac:	4b28      	ldr	r3, [pc, #160]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148ae:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80148b2:	4b27      	ldr	r3, [pc, #156]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148b4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80148b8:	b25b      	sxtb	r3, r3
 80148ba:	f004 fdd7 	bl	801946c <RegionApplyDrOffset>
 80148be:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80148c0:	b259      	sxtb	r1, r3
 80148c2:	4b23      	ldr	r3, [pc, #140]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148c4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80148c8:	4b21      	ldr	r3, [pc, #132]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148cc:	4821      	ldr	r0, [pc, #132]	; (8014954 <ComputeRxWindowParameters+0xc0>)
 80148ce:	9000      	str	r0, [sp, #0]
 80148d0:	4620      	mov	r0, r4
 80148d2:	f004 fced 	bl	80192b0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80148d6:	4b1e      	ldr	r3, [pc, #120]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148d8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80148dc:	4b1c      	ldr	r3, [pc, #112]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80148e2:	b259      	sxtb	r1, r3
 80148e4:	4b1a      	ldr	r3, [pc, #104]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148e6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80148ea:	4b19      	ldr	r3, [pc, #100]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148ee:	4c1a      	ldr	r4, [pc, #104]	; (8014958 <ComputeRxWindowParameters+0xc4>)
 80148f0:	9400      	str	r4, [sp, #0]
 80148f2:	f004 fcdd 	bl	80192b0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80148f6:	4b16      	ldr	r3, [pc, #88]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 80148f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148fa:	4a18      	ldr	r2, [pc, #96]	; (801495c <ComputeRxWindowParameters+0xc8>)
 80148fc:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8014900:	4413      	add	r3, r2
 8014902:	4a16      	ldr	r2, [pc, #88]	; (801495c <ComputeRxWindowParameters+0xc8>)
 8014904:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8014908:	4b11      	ldr	r3, [pc, #68]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 801490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801490c:	4a13      	ldr	r2, [pc, #76]	; (801495c <ComputeRxWindowParameters+0xc8>)
 801490e:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8014912:	4413      	add	r3, r2
 8014914:	4a11      	ldr	r2, [pc, #68]	; (801495c <ComputeRxWindowParameters+0xc8>)
 8014916:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 801491a:	4b10      	ldr	r3, [pc, #64]	; (801495c <ComputeRxWindowParameters+0xc8>)
 801491c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014920:	2b04      	cmp	r3, #4
 8014922:	d011      	beq.n	8014948 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8014924:	4b0a      	ldr	r3, [pc, #40]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 8014926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014928:	4a0c      	ldr	r2, [pc, #48]	; (801495c <ComputeRxWindowParameters+0xc8>)
 801492a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801492e:	4413      	add	r3, r2
 8014930:	4a0a      	ldr	r2, [pc, #40]	; (801495c <ComputeRxWindowParameters+0xc8>)
 8014932:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8014936:	4b06      	ldr	r3, [pc, #24]	; (8014950 <ComputeRxWindowParameters+0xbc>)
 8014938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801493a:	4a08      	ldr	r2, [pc, #32]	; (801495c <ComputeRxWindowParameters+0xc8>)
 801493c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8014940:	4413      	add	r3, r2
 8014942:	4a06      	ldr	r2, [pc, #24]	; (801495c <ComputeRxWindowParameters+0xc8>)
 8014944:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8014948:	bf00      	nop
 801494a:	3704      	adds	r7, #4
 801494c:	46bd      	mov	sp, r7
 801494e:	bd90      	pop	{r4, r7, pc}
 8014950:	20000e48 	.word	0x20000e48
 8014954:	20000ce4 	.word	0x20000ce4
 8014958:	20000cfc 	.word	0x20000cfc
 801495c:	2000092c 	.word	0x2000092c

08014960 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8014966:	2300      	movs	r3, #0
 8014968:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801496a:	4b13      	ldr	r3, [pc, #76]	; (80149b8 <VerifyTxFrame+0x58>)
 801496c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014970:	2b00      	cmp	r3, #0
 8014972:	d01b      	beq.n	80149ac <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014974:	1d3b      	adds	r3, r7, #4
 8014976:	4618      	mov	r0, r3
 8014978:	f002 ff6c 	bl	8017854 <LoRaMacCommandsGetSizeSerializedCmds>
 801497c:	4603      	mov	r3, r0
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014982:	2313      	movs	r3, #19
 8014984:	e013      	b.n	80149ae <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8014986:	4b0d      	ldr	r3, [pc, #52]	; (80149bc <VerifyTxFrame+0x5c>)
 8014988:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801498c:	4a0a      	ldr	r2, [pc, #40]	; (80149b8 <VerifyTxFrame+0x58>)
 801498e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	b2d2      	uxtb	r2, r2
 8014996:	4618      	mov	r0, r3
 8014998:	f7ff f932 	bl	8013c00 <ValidatePayloadLength>
 801499c:	4603      	mov	r3, r0
 801499e:	f083 0301 	eor.w	r3, r3, #1
 80149a2:	b2db      	uxtb	r3, r3
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d001      	beq.n	80149ac <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80149a8:	2308      	movs	r3, #8
 80149aa:	e000      	b.n	80149ae <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	20000e48 	.word	0x20000e48
 80149bc:	2000092c 	.word	0x2000092c

080149c0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80149c6:	4b18      	ldr	r3, [pc, #96]	; (8014a28 <SerializeTxFrame+0x68>)
 80149c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d002      	beq.n	80149d6 <SerializeTxFrame+0x16>
 80149d0:	2b04      	cmp	r3, #4
 80149d2:	d011      	beq.n	80149f8 <SerializeTxFrame+0x38>
 80149d4:	e021      	b.n	8014a1a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80149d6:	4815      	ldr	r0, [pc, #84]	; (8014a2c <SerializeTxFrame+0x6c>)
 80149d8:	f004 fa6a 	bl	8018eb0 <LoRaMacSerializerJoinRequest>
 80149dc:	4603      	mov	r3, r0
 80149de:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80149e0:	79fb      	ldrb	r3, [r7, #7]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d001      	beq.n	80149ea <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80149e6:	2311      	movs	r3, #17
 80149e8:	e01a      	b.n	8014a20 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80149ea:	4b0f      	ldr	r3, [pc, #60]	; (8014a28 <SerializeTxFrame+0x68>)
 80149ec:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	4b0d      	ldr	r3, [pc, #52]	; (8014a28 <SerializeTxFrame+0x68>)
 80149f4:	801a      	strh	r2, [r3, #0]
            break;
 80149f6:	e012      	b.n	8014a1e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80149f8:	480c      	ldr	r0, [pc, #48]	; (8014a2c <SerializeTxFrame+0x6c>)
 80149fa:	f004 fadb 	bl	8018fb4 <LoRaMacSerializerData>
 80149fe:	4603      	mov	r3, r0
 8014a00:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8014a02:	79fb      	ldrb	r3, [r7, #7]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d001      	beq.n	8014a0c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8014a08:	2311      	movs	r3, #17
 8014a0a:	e009      	b.n	8014a20 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8014a0c:	4b06      	ldr	r3, [pc, #24]	; (8014a28 <SerializeTxFrame+0x68>)
 8014a0e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8014a12:	b29a      	uxth	r2, r3
 8014a14:	4b04      	ldr	r3, [pc, #16]	; (8014a28 <SerializeTxFrame+0x68>)
 8014a16:	801a      	strh	r2, [r3, #0]
            break;
 8014a18:	e001      	b.n	8014a1e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a1a:	2303      	movs	r3, #3
 8014a1c:	e000      	b.n	8014a20 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8014a1e:	2300      	movs	r3, #0
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3708      	adds	r7, #8
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	2000092c 	.word	0x2000092c
 8014a2c:	20000a34 	.word	0x20000a34

08014a30 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b090      	sub	sp, #64	; 0x40
 8014a34:	af02      	add	r7, sp, #8
 8014a36:	4603      	mov	r3, r0
 8014a38:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a3a:	2303      	movs	r3, #3
 8014a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8014a40:	f7ff ff06 	bl	8014850 <CheckForClassBCollision>
 8014a44:	4603      	mov	r3, r0
 8014a46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8014a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d002      	beq.n	8014a58 <ScheduleTx+0x28>
    {
        return status;
 8014a52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a56:	e092      	b.n	8014b7e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8014a58:	f000 f8f8 	bl	8014c4c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8014a5c:	f7ff ffb0 	bl	80149c0 <SerializeTxFrame>
 8014a60:	4603      	mov	r3, r0
 8014a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8014a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d002      	beq.n	8014a74 <ScheduleTx+0x44>
    {
        return status;
 8014a6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a72:	e084      	b.n	8014b7e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8014a74:	4b44      	ldr	r3, [pc, #272]	; (8014b88 <ScheduleTx+0x158>)
 8014a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a78:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014a7a:	4b43      	ldr	r3, [pc, #268]	; (8014b88 <ScheduleTx+0x158>)
 8014a7c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014a80:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8014a82:	4b41      	ldr	r3, [pc, #260]	; (8014b88 <ScheduleTx+0x158>)
 8014a84:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8014a88:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8014a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f00a fbb8 	bl	801f204 <SysTimeGetMcuTime>
 8014a94:	4638      	mov	r0, r7
 8014a96:	4b3c      	ldr	r3, [pc, #240]	; (8014b88 <ScheduleTx+0x158>)
 8014a98:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8014a9c:	9200      	str	r2, [sp, #0]
 8014a9e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8014aa2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014aa6:	ca06      	ldmia	r2, {r1, r2}
 8014aa8:	f00a fb0d 	bl	801f0c6 <SysTimeSub>
 8014aac:	f107 0320 	add.w	r3, r7, #32
 8014ab0:	463a      	mov	r2, r7
 8014ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ab6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8014aba:	4b33      	ldr	r3, [pc, #204]	; (8014b88 <ScheduleTx+0x158>)
 8014abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014abe:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8014aca:	4b30      	ldr	r3, [pc, #192]	; (8014b8c <ScheduleTx+0x15c>)
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8014ad0:	4b2d      	ldr	r3, [pc, #180]	; (8014b88 <ScheduleTx+0x158>)
 8014ad2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d104      	bne.n	8014ae4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8014ada:	2301      	movs	r3, #1
 8014adc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8014ae4:	4b28      	ldr	r3, [pc, #160]	; (8014b88 <ScheduleTx+0x158>)
 8014ae6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014aea:	f107 0114 	add.w	r1, r7, #20
 8014aee:	4b28      	ldr	r3, [pc, #160]	; (8014b90 <ScheduleTx+0x160>)
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	4b28      	ldr	r3, [pc, #160]	; (8014b94 <ScheduleTx+0x164>)
 8014af4:	4a28      	ldr	r2, [pc, #160]	; (8014b98 <ScheduleTx+0x168>)
 8014af6:	f004 fca1 	bl	801943c <RegionNextChannel>
 8014afa:	4603      	mov	r3, r0
 8014afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8014b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d025      	beq.n	8014b54 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8014b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b0c:	2b0b      	cmp	r3, #11
 8014b0e:	d11e      	bne.n	8014b4e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8014b10:	4b1e      	ldr	r3, [pc, #120]	; (8014b8c <ScheduleTx+0x15c>)
 8014b12:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d01c      	beq.n	8014b54 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8014b1a:	7bfb      	ldrb	r3, [r7, #15]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d013      	beq.n	8014b48 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8014b20:	4b1a      	ldr	r3, [pc, #104]	; (8014b8c <ScheduleTx+0x15c>)
 8014b22:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014b26:	f043 0320 	orr.w	r3, r3, #32
 8014b2a:	4a18      	ldr	r2, [pc, #96]	; (8014b8c <ScheduleTx+0x15c>)
 8014b2c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8014b30:	4b16      	ldr	r3, [pc, #88]	; (8014b8c <ScheduleTx+0x15c>)
 8014b32:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8014b36:	4619      	mov	r1, r3
 8014b38:	4818      	ldr	r0, [pc, #96]	; (8014b9c <ScheduleTx+0x16c>)
 8014b3a:	f00b f927 	bl	801fd8c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8014b3e:	4817      	ldr	r0, [pc, #92]	; (8014b9c <ScheduleTx+0x16c>)
 8014b40:	f00b f846 	bl	801fbd0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8014b44:	2300      	movs	r3, #0
 8014b46:	e01a      	b.n	8014b7e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8014b48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b4c:	e017      	b.n	8014b7e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8014b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b52:	e014      	b.n	8014b7e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8014b54:	f7ff fe9e 	bl	8014894 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8014b58:	f7ff ff02 	bl	8014960 <VerifyTxFrame>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8014b62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d002      	beq.n	8014b70 <ScheduleTx+0x140>
    {
        return status;
 8014b6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b6e:	e006      	b.n	8014b7e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8014b70:	4b06      	ldr	r3, [pc, #24]	; (8014b8c <ScheduleTx+0x15c>)
 8014b72:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8014b76:	4618      	mov	r0, r3
 8014b78:	f000 fb76 	bl	8015268 <SendFrameOnChannel>
 8014b7c:	4603      	mov	r3, r0
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3738      	adds	r7, #56	; 0x38
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
 8014b86:	bf00      	nop
 8014b88:	20000e48 	.word	0x20000e48
 8014b8c:	2000092c 	.word	0x2000092c
 8014b90:	20000e78 	.word	0x20000e78
 8014b94:	20000dc0 	.word	0x20000dc0
 8014b98:	20000d47 	.word	0x20000d47
 8014b9c:	20000c94 	.word	0x20000c94

08014ba0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	460a      	mov	r2, r1
 8014baa:	71fb      	strb	r3, [r7, #7]
 8014bac:	4613      	mov	r3, r2
 8014bae:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014bb0:	2312      	movs	r3, #18
 8014bb2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8014bb8:	4b22      	ldr	r3, [pc, #136]	; (8014c44 <SecureFrame+0xa4>)
 8014bba:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d002      	beq.n	8014bc8 <SecureFrame+0x28>
 8014bc2:	2b04      	cmp	r3, #4
 8014bc4:	d011      	beq.n	8014bea <SecureFrame+0x4a>
 8014bc6:	e036      	b.n	8014c36 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8014bc8:	481f      	ldr	r0, [pc, #124]	; (8014c48 <SecureFrame+0xa8>)
 8014bca:	f003 fd3d 	bl	8018648 <LoRaMacCryptoPrepareJoinRequest>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8014bd2:	7bfb      	ldrb	r3, [r7, #15]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d001      	beq.n	8014bdc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bd8:	2311      	movs	r3, #17
 8014bda:	e02f      	b.n	8014c3c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8014bdc:	4b19      	ldr	r3, [pc, #100]	; (8014c44 <SecureFrame+0xa4>)
 8014bde:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8014be2:	b29a      	uxth	r2, r3
 8014be4:	4b17      	ldr	r3, [pc, #92]	; (8014c44 <SecureFrame+0xa4>)
 8014be6:	801a      	strh	r2, [r3, #0]
            break;
 8014be8:	e027      	b.n	8014c3a <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8014bea:	f107 0308 	add.w	r3, r7, #8
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f003 fc64 	bl	80184bc <LoRaMacCryptoGetFCntUp>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d001      	beq.n	8014bfe <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8014bfa:	2312      	movs	r3, #18
 8014bfc:	e01e      	b.n	8014c3c <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8014bfe:	4b11      	ldr	r3, [pc, #68]	; (8014c44 <SecureFrame+0xa4>)
 8014c00:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d002      	beq.n	8014c0e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8014c0e:	68b8      	ldr	r0, [r7, #8]
 8014c10:	79ba      	ldrb	r2, [r7, #6]
 8014c12:	79f9      	ldrb	r1, [r7, #7]
 8014c14:	4b0c      	ldr	r3, [pc, #48]	; (8014c48 <SecureFrame+0xa8>)
 8014c16:	f003 fe3f 	bl	8018898 <LoRaMacCryptoSecureMessage>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8014c1e:	7bfb      	ldrb	r3, [r7, #15]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d001      	beq.n	8014c28 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c24:	2311      	movs	r3, #17
 8014c26:	e009      	b.n	8014c3c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8014c28:	4b06      	ldr	r3, [pc, #24]	; (8014c44 <SecureFrame+0xa4>)
 8014c2a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8014c2e:	b29a      	uxth	r2, r3
 8014c30:	4b04      	ldr	r3, [pc, #16]	; (8014c44 <SecureFrame+0xa4>)
 8014c32:	801a      	strh	r2, [r3, #0]
            break;
 8014c34:	e001      	b.n	8014c3a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014c36:	2303      	movs	r3, #3
 8014c38:	e000      	b.n	8014c3c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8014c3a:	2300      	movs	r3, #0
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3710      	adds	r7, #16
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}
 8014c44:	2000092c 	.word	0x2000092c
 8014c48:	20000a34 	.word	0x20000a34

08014c4c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8014c50:	4b09      	ldr	r3, [pc, #36]	; (8014c78 <CalculateBackOff+0x2c>)
 8014c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d10a      	bne.n	8014c6e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8014c58:	4b07      	ldr	r3, [pc, #28]	; (8014c78 <CalculateBackOff+0x2c>)
 8014c5a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8014c5e:	3b01      	subs	r3, #1
 8014c60:	4a06      	ldr	r2, [pc, #24]	; (8014c7c <CalculateBackOff+0x30>)
 8014c62:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8014c66:	fb02 f303 	mul.w	r3, r2, r3
 8014c6a:	4a03      	ldr	r2, [pc, #12]	; (8014c78 <CalculateBackOff+0x2c>)
 8014c6c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8014c6e:	bf00      	nop
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bc80      	pop	{r7}
 8014c74:	4770      	bx	lr
 8014c76:	bf00      	nop
 8014c78:	20000e48 	.word	0x20000e48
 8014c7c:	2000092c 	.word	0x2000092c

08014c80 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	4603      	mov	r3, r0
 8014c88:	7139      	strb	r1, [r7, #4]
 8014c8a:	71fb      	strb	r3, [r7, #7]
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8014c90:	79fb      	ldrb	r3, [r7, #7]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d002      	beq.n	8014c9c <RemoveMacCommands+0x1c>
 8014c96:	79fb      	ldrb	r3, [r7, #7]
 8014c98:	2b01      	cmp	r3, #1
 8014c9a:	d10d      	bne.n	8014cb8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8014c9c:	79bb      	ldrb	r3, [r7, #6]
 8014c9e:	2b01      	cmp	r3, #1
 8014ca0:	d108      	bne.n	8014cb4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8014ca2:	793b      	ldrb	r3, [r7, #4]
 8014ca4:	f003 0320 	and.w	r3, r3, #32
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d004      	beq.n	8014cb8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8014cae:	f002 fda5 	bl	80177fc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8014cb2:	e001      	b.n	8014cb8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8014cb4:	f002 fda2 	bl	80177fc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8014cb8:	bf00      	nop
 8014cba:	3708      	adds	r7, #8
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8014cc0:	b5b0      	push	{r4, r5, r7, lr}
 8014cc2:	b092      	sub	sp, #72	; 0x48
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8014cca:	79fb      	ldrb	r3, [r7, #7]
 8014ccc:	f083 0301 	eor.w	r3, r3, #1
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d003      	beq.n	8014cde <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8014cd6:	4b88      	ldr	r3, [pc, #544]	; (8014ef8 <ResetMacParameters+0x238>)
 8014cd8:	2200      	movs	r2, #0
 8014cda:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8014cde:	4b86      	ldr	r3, [pc, #536]	; (8014ef8 <ResetMacParameters+0x238>)
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8014ce4:	4b85      	ldr	r3, [pc, #532]	; (8014efc <ResetMacParameters+0x23c>)
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8014cec:	4b83      	ldr	r3, [pc, #524]	; (8014efc <ResetMacParameters+0x23c>)
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8014cf4:	4b81      	ldr	r3, [pc, #516]	; (8014efc <ResetMacParameters+0x23c>)
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8014cfc:	4b7e      	ldr	r3, [pc, #504]	; (8014ef8 <ResetMacParameters+0x238>)
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8014d04:	4b7c      	ldr	r3, [pc, #496]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d06:	2201      	movs	r2, #1
 8014d08:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014d0c:	4b7a      	ldr	r3, [pc, #488]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d0e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014d12:	4b79      	ldr	r3, [pc, #484]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014d18:	4b77      	ldr	r3, [pc, #476]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d1a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8014d1e:	4b76      	ldr	r3, [pc, #472]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8014d24:	4b74      	ldr	r3, [pc, #464]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d26:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8014d2a:	4b73      	ldr	r3, [pc, #460]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d2c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014d30:	4b71      	ldr	r3, [pc, #452]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d32:	4a71      	ldr	r2, [pc, #452]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d34:	336c      	adds	r3, #108	; 0x6c
 8014d36:	32b4      	adds	r2, #180	; 0xb4
 8014d38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d3c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014d40:	4b6d      	ldr	r3, [pc, #436]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d42:	4a6d      	ldr	r2, [pc, #436]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d44:	3374      	adds	r3, #116	; 0x74
 8014d46:	32bc      	adds	r2, #188	; 0xbc
 8014d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d4c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8014d50:	4b69      	ldr	r3, [pc, #420]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d52:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8014d56:	4b68      	ldr	r3, [pc, #416]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8014d5c:	4b66      	ldr	r3, [pc, #408]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d5e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8014d62:	4b65      	ldr	r3, [pc, #404]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d64:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8014d68:	4b63      	ldr	r3, [pc, #396]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014d6e:	4a62      	ldr	r2, [pc, #392]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014d74:	4b60      	ldr	r3, [pc, #384]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d76:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014d7a:	4a5f      	ldr	r2, [pc, #380]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014d80:	4b5d      	ldr	r3, [pc, #372]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d82:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014d86:	4b5c      	ldr	r3, [pc, #368]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d88:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8014d8c:	4b5a      	ldr	r3, [pc, #360]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d8e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014d92:	4b59      	ldr	r3, [pc, #356]	; (8014ef8 <ResetMacParameters+0x238>)
 8014d94:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8014d98:	4b58      	ldr	r3, [pc, #352]	; (8014efc <ResetMacParameters+0x23c>)
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8014da0:	4b55      	ldr	r3, [pc, #340]	; (8014ef8 <ResetMacParameters+0x238>)
 8014da2:	2200      	movs	r2, #0
 8014da4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8014da8:	4b53      	ldr	r3, [pc, #332]	; (8014ef8 <ResetMacParameters+0x238>)
 8014daa:	2200      	movs	r2, #0
 8014dac:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8014db0:	4b51      	ldr	r3, [pc, #324]	; (8014ef8 <ResetMacParameters+0x238>)
 8014db2:	2200      	movs	r2, #0
 8014db4:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8014db8:	4b4f      	ldr	r3, [pc, #316]	; (8014ef8 <ResetMacParameters+0x238>)
 8014dba:	2200      	movs	r2, #0
 8014dbc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8014dc0:	4b4d      	ldr	r3, [pc, #308]	; (8014ef8 <ResetMacParameters+0x238>)
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8014dc8:	4b4b      	ldr	r3, [pc, #300]	; (8014ef8 <ResetMacParameters+0x238>)
 8014dca:	2200      	movs	r2, #0
 8014dcc:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8014dd0:	4b49      	ldr	r3, [pc, #292]	; (8014ef8 <ResetMacParameters+0x238>)
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8014dd8:	4b47      	ldr	r3, [pc, #284]	; (8014ef8 <ResetMacParameters+0x238>)
 8014dda:	2200      	movs	r2, #0
 8014ddc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8014de0:	4b45      	ldr	r3, [pc, #276]	; (8014ef8 <ResetMacParameters+0x238>)
 8014de2:	2200      	movs	r2, #0
 8014de4:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8014de8:	4b43      	ldr	r3, [pc, #268]	; (8014ef8 <ResetMacParameters+0x238>)
 8014dea:	2200      	movs	r2, #0
 8014dec:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8014df0:	4b41      	ldr	r3, [pc, #260]	; (8014ef8 <ResetMacParameters+0x238>)
 8014df2:	2200      	movs	r2, #0
 8014df4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014dfc:	4b40      	ldr	r3, [pc, #256]	; (8014f00 <ResetMacParameters+0x240>)
 8014dfe:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014e00:	4b40      	ldr	r3, [pc, #256]	; (8014f04 <ResetMacParameters+0x244>)
 8014e02:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8014e04:	4b40      	ldr	r3, [pc, #256]	; (8014f08 <ResetMacParameters+0x248>)
 8014e06:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014e08:	4b3b      	ldr	r3, [pc, #236]	; (8014ef8 <ResetMacParameters+0x238>)
 8014e0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e0e:	f107 020c 	add.w	r2, r7, #12
 8014e12:	4611      	mov	r1, r2
 8014e14:	4618      	mov	r0, r3
 8014e16:	f004 f9fd 	bl	8019214 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8014e1a:	4b38      	ldr	r3, [pc, #224]	; (8014efc <ResetMacParameters+0x23c>)
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8014e22:	4b36      	ldr	r3, [pc, #216]	; (8014efc <ResetMacParameters+0x23c>)
 8014e24:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8014e28:	4b34      	ldr	r3, [pc, #208]	; (8014efc <ResetMacParameters+0x23c>)
 8014e2a:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8014e2e:	4b32      	ldr	r3, [pc, #200]	; (8014ef8 <ResetMacParameters+0x238>)
 8014e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e32:	4a32      	ldr	r2, [pc, #200]	; (8014efc <ResetMacParameters+0x23c>)
 8014e34:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e38:	4b2f      	ldr	r3, [pc, #188]	; (8014ef8 <ResetMacParameters+0x238>)
 8014e3a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8014e3e:	4b2f      	ldr	r3, [pc, #188]	; (8014efc <ResetMacParameters+0x23c>)
 8014e40:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014e44:	4b2c      	ldr	r3, [pc, #176]	; (8014ef8 <ResetMacParameters+0x238>)
 8014e46:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014e4a:	4b2c      	ldr	r3, [pc, #176]	; (8014efc <ResetMacParameters+0x23c>)
 8014e4c:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8014e50:	4b2a      	ldr	r3, [pc, #168]	; (8014efc <ResetMacParameters+0x23c>)
 8014e52:	2200      	movs	r2, #0
 8014e54:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8014e58:	4b28      	ldr	r3, [pc, #160]	; (8014efc <ResetMacParameters+0x23c>)
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014e60:	4b25      	ldr	r3, [pc, #148]	; (8014ef8 <ResetMacParameters+0x238>)
 8014e62:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014e66:	4b25      	ldr	r3, [pc, #148]	; (8014efc <ResetMacParameters+0x23c>)
 8014e68:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8014e6c:	4a23      	ldr	r2, [pc, #140]	; (8014efc <ResetMacParameters+0x23c>)
 8014e6e:	4b23      	ldr	r3, [pc, #140]	; (8014efc <ResetMacParameters+0x23c>)
 8014e70:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8014e74:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8014e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014e80:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014e84:	4b1d      	ldr	r3, [pc, #116]	; (8014efc <ResetMacParameters+0x23c>)
 8014e86:	2201      	movs	r2, #1
 8014e88:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014e8c:	4b1b      	ldr	r3, [pc, #108]	; (8014efc <ResetMacParameters+0x23c>)
 8014e8e:	2202      	movs	r2, #2
 8014e90:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8014e94:	2300      	movs	r3, #0
 8014e96:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8014e9c:	4b17      	ldr	r3, [pc, #92]	; (8014efc <ResetMacParameters+0x23c>)
 8014e9e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d009      	beq.n	8014eba <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8014ea6:	4b15      	ldr	r3, [pc, #84]	; (8014efc <ResetMacParameters+0x23c>)
 8014ea8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8014eb0:	4b12      	ldr	r3, [pc, #72]	; (8014efc <ResetMacParameters+0x23c>)
 8014eb2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014eb6:	695b      	ldr	r3, [r3, #20]
 8014eb8:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8014eba:	4b14      	ldr	r3, [pc, #80]	; (8014f0c <ResetMacParameters+0x24c>)
 8014ebc:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8014ebe:	4b14      	ldr	r3, [pc, #80]	; (8014f10 <ResetMacParameters+0x250>)
 8014ec0:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8014ec2:	4b14      	ldr	r3, [pc, #80]	; (8014f14 <ResetMacParameters+0x254>)
 8014ec4:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8014ec6:	4b14      	ldr	r3, [pc, #80]	; (8014f18 <ResetMacParameters+0x258>)
 8014ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8014eca:	4b14      	ldr	r3, [pc, #80]	; (8014f1c <ResetMacParameters+0x25c>)
 8014ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8014ece:	4b14      	ldr	r3, [pc, #80]	; (8014f20 <ResetMacParameters+0x260>)
 8014ed0:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8014ed2:	4b14      	ldr	r3, [pc, #80]	; (8014f24 <ResetMacParameters+0x264>)
 8014ed4:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8014ed6:	4b14      	ldr	r3, [pc, #80]	; (8014f28 <ResetMacParameters+0x268>)
 8014ed8:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8014eda:	4b14      	ldr	r3, [pc, #80]	; (8014f2c <ResetMacParameters+0x26c>)
 8014edc:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8014ede:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014ee2:	f107 031c 	add.w	r3, r7, #28
 8014ee6:	4a12      	ldr	r2, [pc, #72]	; (8014f30 <ResetMacParameters+0x270>)
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f002 f996 	bl	801721a <LoRaMacClassBInit>
}
 8014eee:	bf00      	nop
 8014ef0:	3748      	adds	r7, #72	; 0x48
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8014ef6:	bf00      	nop
 8014ef8:	20000e48 	.word	0x20000e48
 8014efc:	2000092c 	.word	0x2000092c
 8014f00:	2000106c 	.word	0x2000106c
 8014f04:	20001080 	.word	0x20001080
 8014f08:	200019e0 	.word	0x200019e0
 8014f0c:	20000d94 	.word	0x20000d94
 8014f10:	20000d4c 	.word	0x20000d4c
 8014f14:	20000d80 	.word	0x20000d80
 8014f18:	20000dbd 	.word	0x20000dbd
 8014f1c:	20000f2c 	.word	0x20000f2c
 8014f20:	20000e90 	.word	0x20000e90
 8014f24:	20000e94 	.word	0x20000e94
 8014f28:	20000f30 	.word	0x20000f30
 8014f2c:	20000f78 	.word	0x20000f78
 8014f30:	200013fc 	.word	0x200013fc

08014f34 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f00a feb4 	bl	801fcac <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8014f44:	4b11      	ldr	r3, [pc, #68]	; (8014f8c <RxWindowSetup+0x58>)
 8014f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f48:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8014f4a:	4b11      	ldr	r3, [pc, #68]	; (8014f90 <RxWindowSetup+0x5c>)
 8014f4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f50:	4a10      	ldr	r2, [pc, #64]	; (8014f94 <RxWindowSetup+0x60>)
 8014f52:	6839      	ldr	r1, [r7, #0]
 8014f54:	4618      	mov	r0, r3
 8014f56:	f004 f9c5 	bl	80192e4 <RegionRxConfig>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d010      	beq.n	8014f82 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8014f60:	4b0d      	ldr	r3, [pc, #52]	; (8014f98 <RxWindowSetup+0x64>)
 8014f62:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8014f66:	4b0c      	ldr	r3, [pc, #48]	; (8014f98 <RxWindowSetup+0x64>)
 8014f68:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8014f6c:	4b07      	ldr	r3, [pc, #28]	; (8014f8c <RxWindowSetup+0x58>)
 8014f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f70:	4a07      	ldr	r2, [pc, #28]	; (8014f90 <RxWindowSetup+0x5c>)
 8014f72:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8014f74:	4610      	mov	r0, r2
 8014f76:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	7cda      	ldrb	r2, [r3, #19]
 8014f7c:	4b06      	ldr	r3, [pc, #24]	; (8014f98 <RxWindowSetup+0x64>)
 8014f7e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8014f82:	bf00      	nop
 8014f84:	3708      	adds	r7, #8
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	08021f14 	.word	0x08021f14
 8014f90:	20000e48 	.word	0x20000e48
 8014f94:	20000d50 	.word	0x20000d50
 8014f98:	2000092c 	.word	0x2000092c

08014f9c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8014f9c:	b590      	push	{r4, r7, lr}
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014fa2:	4b1e      	ldr	r3, [pc, #120]	; (801501c <OpenContinuousRxCWindow+0x80>)
 8014fa4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8014fa8:	4b1c      	ldr	r3, [pc, #112]	; (801501c <OpenContinuousRxCWindow+0x80>)
 8014faa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014fae:	b259      	sxtb	r1, r3
 8014fb0:	4b1a      	ldr	r3, [pc, #104]	; (801501c <OpenContinuousRxCWindow+0x80>)
 8014fb2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014fb6:	4b19      	ldr	r3, [pc, #100]	; (801501c <OpenContinuousRxCWindow+0x80>)
 8014fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014fba:	4c19      	ldr	r4, [pc, #100]	; (8015020 <OpenContinuousRxCWindow+0x84>)
 8014fbc:	9400      	str	r4, [sp, #0]
 8014fbe:	f004 f977 	bl	80192b0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014fc2:	4b18      	ldr	r3, [pc, #96]	; (8015024 <OpenContinuousRxCWindow+0x88>)
 8014fc4:	2202      	movs	r2, #2
 8014fc6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014fca:	4b14      	ldr	r3, [pc, #80]	; (801501c <OpenContinuousRxCWindow+0x80>)
 8014fcc:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014fd0:	4b14      	ldr	r3, [pc, #80]	; (8015024 <OpenContinuousRxCWindow+0x88>)
 8014fd2:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014fd6:	4b13      	ldr	r3, [pc, #76]	; (8015024 <OpenContinuousRxCWindow+0x88>)
 8014fd8:	2201      	movs	r2, #1
 8014fda:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8014fde:	4b0f      	ldr	r3, [pc, #60]	; (801501c <OpenContinuousRxCWindow+0x80>)
 8014fe0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fe4:	4a10      	ldr	r2, [pc, #64]	; (8015028 <OpenContinuousRxCWindow+0x8c>)
 8014fe6:	490e      	ldr	r1, [pc, #56]	; (8015020 <OpenContinuousRxCWindow+0x84>)
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f004 f97b 	bl	80192e4 <RegionRxConfig>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d00f      	beq.n	8015014 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8014ff4:	4b0b      	ldr	r3, [pc, #44]	; (8015024 <OpenContinuousRxCWindow+0x88>)
 8014ff6:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8014ffa:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <OpenContinuousRxCWindow+0x88>)
 8014ffc:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8015000:	4b0a      	ldr	r3, [pc, #40]	; (801502c <OpenContinuousRxCWindow+0x90>)
 8015002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015004:	2000      	movs	r0, #0
 8015006:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8015008:	4b06      	ldr	r3, [pc, #24]	; (8015024 <OpenContinuousRxCWindow+0x88>)
 801500a:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 801500e:	4b05      	ldr	r3, [pc, #20]	; (8015024 <OpenContinuousRxCWindow+0x88>)
 8015010:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8015014:	bf00      	nop
 8015016:	3704      	adds	r7, #4
 8015018:	46bd      	mov	sp, r7
 801501a:	bd90      	pop	{r4, r7, pc}
 801501c:	20000e48 	.word	0x20000e48
 8015020:	20000d14 	.word	0x20000d14
 8015024:	2000092c 	.word	0x2000092c
 8015028:	20000d50 	.word	0x20000d50
 801502c:	08021f14 	.word	0x08021f14

08015030 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b088      	sub	sp, #32
 8015034:	af00      	add	r7, sp, #0
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	603b      	str	r3, [r7, #0]
 801503c:	4613      	mov	r3, r2
 801503e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8015040:	4b82      	ldr	r3, [pc, #520]	; (801524c <PrepareFrame+0x21c>)
 8015042:	2200      	movs	r2, #0
 8015044:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8015046:	4b81      	ldr	r3, [pc, #516]	; (801524c <PrepareFrame+0x21c>)
 8015048:	2200      	movs	r2, #0
 801504a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 801504e:	2300      	movs	r3, #0
 8015050:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8015052:	2300      	movs	r3, #0
 8015054:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d101      	bne.n	8015064 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8015060:	2300      	movs	r3, #0
 8015062:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8015064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015066:	461a      	mov	r2, r3
 8015068:	6839      	ldr	r1, [r7, #0]
 801506a:	4879      	ldr	r0, [pc, #484]	; (8015250 <PrepareFrame+0x220>)
 801506c:	f006 fc61 	bl	801b932 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8015070:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015072:	b2da      	uxtb	r2, r3
 8015074:	4b75      	ldr	r3, [pc, #468]	; (801524c <PrepareFrame+0x21c>)
 8015076:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	781a      	ldrb	r2, [r3, #0]
 801507e:	4b73      	ldr	r3, [pc, #460]	; (801524c <PrepareFrame+0x21c>)
 8015080:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801508a:	b2db      	uxtb	r3, r3
 801508c:	2b07      	cmp	r3, #7
 801508e:	f000 80b9 	beq.w	8015204 <PrepareFrame+0x1d4>
 8015092:	2b07      	cmp	r3, #7
 8015094:	f300 80d0 	bgt.w	8015238 <PrepareFrame+0x208>
 8015098:	2b02      	cmp	r3, #2
 801509a:	d006      	beq.n	80150aa <PrepareFrame+0x7a>
 801509c:	2b04      	cmp	r3, #4
 801509e:	f040 80cb 	bne.w	8015238 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80150a2:	4b6a      	ldr	r3, [pc, #424]	; (801524c <PrepareFrame+0x21c>)
 80150a4:	2201      	movs	r2, #1
 80150a6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80150aa:	4b68      	ldr	r3, [pc, #416]	; (801524c <PrepareFrame+0x21c>)
 80150ac:	2204      	movs	r2, #4
 80150ae:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80150b2:	4b66      	ldr	r3, [pc, #408]	; (801524c <PrepareFrame+0x21c>)
 80150b4:	4a67      	ldr	r2, [pc, #412]	; (8015254 <PrepareFrame+0x224>)
 80150b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80150ba:	4b64      	ldr	r3, [pc, #400]	; (801524c <PrepareFrame+0x21c>)
 80150bc:	22ff      	movs	r2, #255	; 0xff
 80150be:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	781a      	ldrb	r2, [r3, #0]
 80150c6:	4b61      	ldr	r3, [pc, #388]	; (801524c <PrepareFrame+0x21c>)
 80150c8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80150cc:	4a5f      	ldr	r2, [pc, #380]	; (801524c <PrepareFrame+0x21c>)
 80150ce:	79fb      	ldrb	r3, [r7, #7]
 80150d0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80150d4:	4b60      	ldr	r3, [pc, #384]	; (8015258 <PrepareFrame+0x228>)
 80150d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80150da:	4a5c      	ldr	r2, [pc, #368]	; (801524c <PrepareFrame+0x21c>)
 80150dc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	781a      	ldrb	r2, [r3, #0]
 80150e4:	4b59      	ldr	r3, [pc, #356]	; (801524c <PrepareFrame+0x21c>)
 80150e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80150ea:	4b58      	ldr	r3, [pc, #352]	; (801524c <PrepareFrame+0x21c>)
 80150ec:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80150f0:	4b56      	ldr	r3, [pc, #344]	; (801524c <PrepareFrame+0x21c>)
 80150f2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80150f6:	4b55      	ldr	r3, [pc, #340]	; (801524c <PrepareFrame+0x21c>)
 80150f8:	4a55      	ldr	r2, [pc, #340]	; (8015250 <PrepareFrame+0x220>)
 80150fa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80150fe:	f107 0318 	add.w	r3, r7, #24
 8015102:	4618      	mov	r0, r3
 8015104:	f003 f9da 	bl	80184bc <LoRaMacCryptoGetFCntUp>
 8015108:	4603      	mov	r3, r0
 801510a:	2b00      	cmp	r3, #0
 801510c:	d001      	beq.n	8015112 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801510e:	2312      	movs	r3, #18
 8015110:	e098      	b.n	8015244 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8015112:	69bb      	ldr	r3, [r7, #24]
 8015114:	b29a      	uxth	r2, r3
 8015116:	4b4d      	ldr	r3, [pc, #308]	; (801524c <PrepareFrame+0x21c>)
 8015118:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 801511c:	4b4b      	ldr	r3, [pc, #300]	; (801524c <PrepareFrame+0x21c>)
 801511e:	2200      	movs	r2, #0
 8015120:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8015124:	4b49      	ldr	r3, [pc, #292]	; (801524c <PrepareFrame+0x21c>)
 8015126:	2200      	movs	r2, #0
 8015128:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	4a47      	ldr	r2, [pc, #284]	; (801524c <PrepareFrame+0x21c>)
 8015130:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015134:	f107 0314 	add.w	r3, r7, #20
 8015138:	4618      	mov	r0, r3
 801513a:	f002 fb8b 	bl	8017854 <LoRaMacCommandsGetSizeSerializedCmds>
 801513e:	4603      	mov	r3, r0
 8015140:	2b00      	cmp	r3, #0
 8015142:	d001      	beq.n	8015148 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015144:	2313      	movs	r3, #19
 8015146:	e07d      	b.n	8015244 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d076      	beq.n	801523c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801514e:	4b42      	ldr	r3, [pc, #264]	; (8015258 <PrepareFrame+0x228>)
 8015150:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015154:	4618      	mov	r0, r3
 8015156:	f7fe fd2b 	bl	8013bb0 <GetMaxAppPayloadWithoutFOptsLength>
 801515a:	4603      	mov	r3, r0
 801515c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801515e:	4b3b      	ldr	r3, [pc, #236]	; (801524c <PrepareFrame+0x21c>)
 8015160:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8015164:	2b00      	cmp	r3, #0
 8015166:	d01d      	beq.n	80151a4 <PrepareFrame+0x174>
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	2b0f      	cmp	r3, #15
 801516c:	d81a      	bhi.n	80151a4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801516e:	f107 0314 	add.w	r3, r7, #20
 8015172:	4a3a      	ldr	r2, [pc, #232]	; (801525c <PrepareFrame+0x22c>)
 8015174:	4619      	mov	r1, r3
 8015176:	200f      	movs	r0, #15
 8015178:	f002 fb82 	bl	8017880 <LoRaMacCommandsSerializeCmds>
 801517c:	4603      	mov	r3, r0
 801517e:	2b00      	cmp	r3, #0
 8015180:	d001      	beq.n	8015186 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015182:	2313      	movs	r3, #19
 8015184:	e05e      	b.n	8015244 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	f003 030f 	and.w	r3, r3, #15
 801518c:	b2d9      	uxtb	r1, r3
 801518e:	68ba      	ldr	r2, [r7, #8]
 8015190:	7813      	ldrb	r3, [r2, #0]
 8015192:	f361 0303 	bfi	r3, r1, #0, #4
 8015196:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	781a      	ldrb	r2, [r3, #0]
 801519c:	4b2b      	ldr	r3, [pc, #172]	; (801524c <PrepareFrame+0x21c>)
 801519e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80151a2:	e04b      	b.n	801523c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80151a4:	4b29      	ldr	r3, [pc, #164]	; (801524c <PrepareFrame+0x21c>)
 80151a6:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d010      	beq.n	80151d0 <PrepareFrame+0x1a0>
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	2b0f      	cmp	r3, #15
 80151b2:	d90d      	bls.n	80151d0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80151b4:	7ffb      	ldrb	r3, [r7, #31]
 80151b6:	f107 0114 	add.w	r1, r7, #20
 80151ba:	4a29      	ldr	r2, [pc, #164]	; (8015260 <PrepareFrame+0x230>)
 80151bc:	4618      	mov	r0, r3
 80151be:	f002 fb5f 	bl	8017880 <LoRaMacCommandsSerializeCmds>
 80151c2:	4603      	mov	r3, r0
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d001      	beq.n	80151cc <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80151c8:	2313      	movs	r3, #19
 80151ca:	e03b      	b.n	8015244 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80151cc:	230a      	movs	r3, #10
 80151ce:	e039      	b.n	8015244 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80151d0:	7ffb      	ldrb	r3, [r7, #31]
 80151d2:	f107 0114 	add.w	r1, r7, #20
 80151d6:	4a22      	ldr	r2, [pc, #136]	; (8015260 <PrepareFrame+0x230>)
 80151d8:	4618      	mov	r0, r3
 80151da:	f002 fb51 	bl	8017880 <LoRaMacCommandsSerializeCmds>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d001      	beq.n	80151e8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80151e4:	2313      	movs	r3, #19
 80151e6:	e02d      	b.n	8015244 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80151e8:	4b18      	ldr	r3, [pc, #96]	; (801524c <PrepareFrame+0x21c>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80151f0:	4b16      	ldr	r3, [pc, #88]	; (801524c <PrepareFrame+0x21c>)
 80151f2:	4a1b      	ldr	r2, [pc, #108]	; (8015260 <PrepareFrame+0x230>)
 80151f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	b2da      	uxtb	r2, r3
 80151fc:	4b13      	ldr	r3, [pc, #76]	; (801524c <PrepareFrame+0x21c>)
 80151fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8015202:	e01b      	b.n	801523c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d01a      	beq.n	8015240 <PrepareFrame+0x210>
 801520a:	4b10      	ldr	r3, [pc, #64]	; (801524c <PrepareFrame+0x21c>)
 801520c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8015210:	2b00      	cmp	r3, #0
 8015212:	d015      	beq.n	8015240 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8015214:	4813      	ldr	r0, [pc, #76]	; (8015264 <PrepareFrame+0x234>)
 8015216:	4b0d      	ldr	r3, [pc, #52]	; (801524c <PrepareFrame+0x21c>)
 8015218:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801521c:	b29b      	uxth	r3, r3
 801521e:	461a      	mov	r2, r3
 8015220:	6839      	ldr	r1, [r7, #0]
 8015222:	f006 fb86 	bl	801b932 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8015226:	4b09      	ldr	r3, [pc, #36]	; (801524c <PrepareFrame+0x21c>)
 8015228:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801522c:	b29b      	uxth	r3, r3
 801522e:	3301      	adds	r3, #1
 8015230:	b29a      	uxth	r2, r3
 8015232:	4b06      	ldr	r3, [pc, #24]	; (801524c <PrepareFrame+0x21c>)
 8015234:	801a      	strh	r2, [r3, #0]
            }
            break;
 8015236:	e003      	b.n	8015240 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015238:	2302      	movs	r3, #2
 801523a:	e003      	b.n	8015244 <PrepareFrame+0x214>
            break;
 801523c:	bf00      	nop
 801523e:	e000      	b.n	8015242 <PrepareFrame+0x212>
            break;
 8015240:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8015242:	2300      	movs	r3, #0
}
 8015244:	4618      	mov	r0, r3
 8015246:	3720      	adds	r7, #32
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	2000092c 	.word	0x2000092c
 8015250:	20000a64 	.word	0x20000a64
 8015254:	2000092e 	.word	0x2000092e
 8015258:	20000e48 	.word	0x20000e48
 801525c:	20000a44 	.word	0x20000a44
 8015260:	20000dc8 	.word	0x20000dc8
 8015264:	2000092f 	.word	0x2000092f

08015268 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b08a      	sub	sp, #40	; 0x28
 801526c:	af00      	add	r7, sp, #0
 801526e:	4603      	mov	r3, r0
 8015270:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015272:	2303      	movs	r3, #3
 8015274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8015278:	2300      	movs	r3, #0
 801527a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801527c:	79fb      	ldrb	r3, [r7, #7]
 801527e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015280:	4b4b      	ldr	r3, [pc, #300]	; (80153b0 <SendFrameOnChannel+0x148>)
 8015282:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015286:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015288:	4b49      	ldr	r3, [pc, #292]	; (80153b0 <SendFrameOnChannel+0x148>)
 801528a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801528e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8015290:	4b47      	ldr	r3, [pc, #284]	; (80153b0 <SendFrameOnChannel+0x148>)
 8015292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015296:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015298:	4b45      	ldr	r3, [pc, #276]	; (80153b0 <SendFrameOnChannel+0x148>)
 801529a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801529e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80152a0:	4b44      	ldr	r3, [pc, #272]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152a2:	881b      	ldrh	r3, [r3, #0]
 80152a4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80152a6:	4b42      	ldr	r3, [pc, #264]	; (80153b0 <SendFrameOnChannel+0x148>)
 80152a8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80152ac:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80152ae:	4b40      	ldr	r3, [pc, #256]	; (80153b0 <SendFrameOnChannel+0x148>)
 80152b0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80152b4:	f107 020f 	add.w	r2, r7, #15
 80152b8:	f107 0110 	add.w	r1, r7, #16
 80152bc:	4b3e      	ldr	r3, [pc, #248]	; (80153b8 <SendFrameOnChannel+0x150>)
 80152be:	f004 f826 	bl	801930e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80152c2:	4b3c      	ldr	r3, [pc, #240]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152c4:	2201      	movs	r2, #1
 80152c6:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80152ca:	4b39      	ldr	r3, [pc, #228]	; (80153b0 <SendFrameOnChannel+0x148>)
 80152cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80152d0:	b2da      	uxtb	r2, r3
 80152d2:	4b38      	ldr	r3, [pc, #224]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152d4:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 80152d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80152dc:	4b35      	ldr	r3, [pc, #212]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152de:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	4a33      	ldr	r2, [pc, #204]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152e6:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80152ea:	4b32      	ldr	r3, [pc, #200]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152ec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80152f0:	4a30      	ldr	r2, [pc, #192]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152f2:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80152f6:	4b2f      	ldr	r3, [pc, #188]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152f8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80152fc:	4a2d      	ldr	r2, [pc, #180]	; (80153b4 <SendFrameOnChannel+0x14c>)
 80152fe:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8015302:	f001 fff6 	bl	80172f2 <LoRaMacClassBIsBeaconModeActive>
 8015306:	4603      	mov	r3, r0
 8015308:	2b00      	cmp	r3, #0
 801530a:	d00b      	beq.n	8015324 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801530c:	4b29      	ldr	r3, [pc, #164]	; (80153b4 <SendFrameOnChannel+0x14c>)
 801530e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8015312:	4618      	mov	r0, r3
 8015314:	f002 f858 	bl	80173c8 <LoRaMacClassBIsUplinkCollision>
 8015318:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801531a:	6a3b      	ldr	r3, [r7, #32]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d001      	beq.n	8015324 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8015320:	2310      	movs	r3, #16
 8015322:	e040      	b.n	80153a6 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8015324:	4b22      	ldr	r3, [pc, #136]	; (80153b0 <SendFrameOnChannel+0x148>)
 8015326:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801532a:	2b01      	cmp	r3, #1
 801532c:	d101      	bne.n	8015332 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801532e:	f002 f855 	bl	80173dc <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8015332:	f001 ffef 	bl	8017314 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8015336:	4b1e      	ldr	r3, [pc, #120]	; (80153b0 <SendFrameOnChannel+0x148>)
 8015338:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801533c:	b2db      	uxtb	r3, r3
 801533e:	4a1d      	ldr	r2, [pc, #116]	; (80153b4 <SendFrameOnChannel+0x14c>)
 8015340:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8015344:	4611      	mov	r1, r2
 8015346:	4618      	mov	r0, r3
 8015348:	f7ff fc2a 	bl	8014ba0 <SecureFrame>
 801534c:	4603      	mov	r3, r0
 801534e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8015352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015356:	2b00      	cmp	r3, #0
 8015358:	d002      	beq.n	8015360 <SendFrameOnChannel+0xf8>
    {
        return status;
 801535a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801535e:	e022      	b.n	80153a6 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8015360:	4b14      	ldr	r3, [pc, #80]	; (80153b4 <SendFrameOnChannel+0x14c>)
 8015362:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015366:	f043 0302 	orr.w	r3, r3, #2
 801536a:	4a12      	ldr	r2, [pc, #72]	; (80153b4 <SendFrameOnChannel+0x14c>)
 801536c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8015370:	4b10      	ldr	r3, [pc, #64]	; (80153b4 <SendFrameOnChannel+0x14c>)
 8015372:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015376:	3301      	adds	r3, #1
 8015378:	b2da      	uxtb	r2, r3
 801537a:	4b0e      	ldr	r3, [pc, #56]	; (80153b4 <SendFrameOnChannel+0x14c>)
 801537c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8015380:	4b0c      	ldr	r3, [pc, #48]	; (80153b4 <SendFrameOnChannel+0x14c>)
 8015382:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015386:	4b0b      	ldr	r3, [pc, #44]	; (80153b4 <SendFrameOnChannel+0x14c>)
 8015388:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 801538c:	4b09      	ldr	r3, [pc, #36]	; (80153b4 <SendFrameOnChannel+0x14c>)
 801538e:	2200      	movs	r2, #0
 8015390:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8015394:	4b09      	ldr	r3, [pc, #36]	; (80153bc <SendFrameOnChannel+0x154>)
 8015396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015398:	4a06      	ldr	r2, [pc, #24]	; (80153b4 <SendFrameOnChannel+0x14c>)
 801539a:	8812      	ldrh	r2, [r2, #0]
 801539c:	b2d2      	uxtb	r2, r2
 801539e:	4611      	mov	r1, r2
 80153a0:	4807      	ldr	r0, [pc, #28]	; (80153c0 <SendFrameOnChannel+0x158>)
 80153a2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3728      	adds	r7, #40	; 0x28
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	20000e48 	.word	0x20000e48
 80153b4:	2000092c 	.word	0x2000092c
 80153b8:	20000d48 	.word	0x20000d48
 80153bc:	08021f14 	.word	0x08021f14
 80153c0:	2000092e 	.word	0x2000092e

080153c4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	4603      	mov	r3, r0
 80153cc:	6039      	str	r1, [r7, #0]
 80153ce:	80fb      	strh	r3, [r7, #6]
 80153d0:	4613      	mov	r3, r2
 80153d2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80153d4:	4b09      	ldr	r3, [pc, #36]	; (80153fc <SetTxContinuousWave+0x38>)
 80153d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153d8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80153dc:	88fa      	ldrh	r2, [r7, #6]
 80153de:	6838      	ldr	r0, [r7, #0]
 80153e0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80153e2:	4b07      	ldr	r3, [pc, #28]	; (8015400 <SetTxContinuousWave+0x3c>)
 80153e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80153e8:	f043 0302 	orr.w	r3, r3, #2
 80153ec:	4a04      	ldr	r2, [pc, #16]	; (8015400 <SetTxContinuousWave+0x3c>)
 80153ee:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80153f2:	2300      	movs	r3, #0
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	08021f14 	.word	0x08021f14
 8015400:	2000092c 	.word	0x2000092c

08015404 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 801540a:	2300      	movs	r3, #0
 801540c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801540e:	4b49      	ldr	r3, [pc, #292]	; (8015534 <RestoreNvmData+0x130>)
 8015410:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015414:	2b01      	cmp	r3, #1
 8015416:	d001      	beq.n	801541c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8015418:	2301      	movs	r3, #1
 801541a:	e087      	b.n	801552c <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801541c:	2124      	movs	r1, #36	; 0x24
 801541e:	4846      	ldr	r0, [pc, #280]	; (8015538 <RestoreNvmData+0x134>)
 8015420:	f006 fadc 	bl	801b9dc <Crc32>
 8015424:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8015426:	4b44      	ldr	r3, [pc, #272]	; (8015538 <RestoreNvmData+0x134>)
 8015428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	429a      	cmp	r2, r3
 801542e:	d001      	beq.n	8015434 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015430:	2317      	movs	r3, #23
 8015432:	e07b      	b.n	801552c <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8015434:	211c      	movs	r1, #28
 8015436:	4841      	ldr	r0, [pc, #260]	; (801553c <RestoreNvmData+0x138>)
 8015438:	f006 fad0 	bl	801b9dc <Crc32>
 801543c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801543e:	4b3e      	ldr	r3, [pc, #248]	; (8015538 <RestoreNvmData+0x134>)
 8015440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	429a      	cmp	r2, r3
 8015446:	d001      	beq.n	801544c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015448:	2317      	movs	r3, #23
 801544a:	e06f      	b.n	801552c <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 801544c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015450:	483b      	ldr	r0, [pc, #236]	; (8015540 <RestoreNvmData+0x13c>)
 8015452:	f006 fac3 	bl	801b9dc <Crc32>
 8015456:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8015458:	4b37      	ldr	r3, [pc, #220]	; (8015538 <RestoreNvmData+0x134>)
 801545a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	429a      	cmp	r2, r3
 8015462:	d001      	beq.n	8015468 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015464:	2317      	movs	r3, #23
 8015466:	e061      	b.n	801552c <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8015468:	21d4      	movs	r1, #212	; 0xd4
 801546a:	4836      	ldr	r0, [pc, #216]	; (8015544 <RestoreNvmData+0x140>)
 801546c:	f006 fab6 	bl	801b9dc <Crc32>
 8015470:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8015472:	4b31      	ldr	r3, [pc, #196]	; (8015538 <RestoreNvmData+0x134>)
 8015474:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015478:	687a      	ldr	r2, [r7, #4]
 801547a:	429a      	cmp	r2, r3
 801547c:	d001      	beq.n	8015482 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801547e:	2317      	movs	r3, #23
 8015480:	e054      	b.n	801552c <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8015482:	2110      	movs	r1, #16
 8015484:	4830      	ldr	r0, [pc, #192]	; (8015548 <RestoreNvmData+0x144>)
 8015486:	f006 faa9 	bl	801b9dc <Crc32>
 801548a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801548c:	4b2a      	ldr	r3, [pc, #168]	; (8015538 <RestoreNvmData+0x134>)
 801548e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	429a      	cmp	r2, r3
 8015496:	d001      	beq.n	801549c <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015498:	2317      	movs	r3, #23
 801549a:	e047      	b.n	801552c <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 801549c:	f44f 715e 	mov.w	r1, #888	; 0x378
 80154a0:	482a      	ldr	r0, [pc, #168]	; (801554c <RestoreNvmData+0x148>)
 80154a2:	f006 fa9b 	bl	801b9dc <Crc32>
 80154a6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80154a8:	4b23      	ldr	r3, [pc, #140]	; (8015538 <RestoreNvmData+0x134>)
 80154aa:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80154ae:	687a      	ldr	r2, [r7, #4]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d001      	beq.n	80154b8 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80154b4:	2317      	movs	r3, #23
 80154b6:	e039      	b.n	801552c <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80154b8:	2114      	movs	r1, #20
 80154ba:	4825      	ldr	r0, [pc, #148]	; (8015550 <RestoreNvmData+0x14c>)
 80154bc:	f006 fa8e 	bl	801b9dc <Crc32>
 80154c0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80154c2:	4b1d      	ldr	r3, [pc, #116]	; (8015538 <RestoreNvmData+0x134>)
 80154c4:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80154c8:	687a      	ldr	r2, [r7, #4]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d001      	beq.n	80154d2 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80154ce:	2317      	movs	r3, #23
 80154d0:	e02c      	b.n	801552c <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80154d2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80154d6:	4918      	ldr	r1, [pc, #96]	; (8015538 <RestoreNvmData+0x134>)
 80154d8:	481e      	ldr	r0, [pc, #120]	; (8015554 <RestoreNvmData+0x150>)
 80154da:	f006 fa2a 	bl	801b932 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80154de:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80154e2:	2100      	movs	r1, #0
 80154e4:	4814      	ldr	r0, [pc, #80]	; (8015538 <RestoreNvmData+0x134>)
 80154e6:	f006 fa5f 	bl	801b9a8 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80154ea:	4b12      	ldr	r3, [pc, #72]	; (8015534 <RestoreNvmData+0x130>)
 80154ec:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80154f0:	4b10      	ldr	r3, [pc, #64]	; (8015534 <RestoreNvmData+0x130>)
 80154f2:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80154f6:	4b17      	ldr	r3, [pc, #92]	; (8015554 <RestoreNvmData+0x150>)
 80154f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154fa:	4a0e      	ldr	r2, [pc, #56]	; (8015534 <RestoreNvmData+0x130>)
 80154fc:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015500:	4b14      	ldr	r3, [pc, #80]	; (8015554 <RestoreNvmData+0x150>)
 8015502:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8015506:	4b0b      	ldr	r3, [pc, #44]	; (8015534 <RestoreNvmData+0x130>)
 8015508:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801550c:	4b09      	ldr	r3, [pc, #36]	; (8015534 <RestoreNvmData+0x130>)
 801550e:	2201      	movs	r2, #1
 8015510:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8015514:	4b07      	ldr	r3, [pc, #28]	; (8015534 <RestoreNvmData+0x130>)
 8015516:	2202      	movs	r2, #2
 8015518:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801551c:	4b0e      	ldr	r3, [pc, #56]	; (8015558 <RestoreNvmData+0x154>)
 801551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015520:	4a0c      	ldr	r2, [pc, #48]	; (8015554 <RestoreNvmData+0x150>)
 8015522:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8015526:	4610      	mov	r0, r2
 8015528:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801552a:	2300      	movs	r3, #0
}
 801552c:	4618      	mov	r0, r3
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}
 8015534:	2000092c 	.word	0x2000092c
 8015538:	20001414 	.word	0x20001414
 801553c:	2000143c 	.word	0x2000143c
 8015540:	2000145c 	.word	0x2000145c
 8015544:	20001560 	.word	0x20001560
 8015548:	20001638 	.word	0x20001638
 801554c:	2000164c 	.word	0x2000164c
 8015550:	200019c8 	.word	0x200019c8
 8015554:	20000e48 	.word	0x20000e48
 8015558:	08021f14 	.word	0x08021f14

0801555c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801555c:	b480      	push	{r7}
 801555e:	b083      	sub	sp, #12
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d002      	beq.n	8015572 <DetermineFrameType+0x16>
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d101      	bne.n	8015576 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015572:	2303      	movs	r3, #3
 8015574:	e03b      	b.n	80155ee <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	7b1b      	ldrb	r3, [r3, #12]
 801557a:	f003 030f 	and.w	r3, r3, #15
 801557e:	b2db      	uxtb	r3, r3
 8015580:	2b00      	cmp	r3, #0
 8015582:	d008      	beq.n	8015596 <DetermineFrameType+0x3a>
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f893 3020 	ldrb.w	r3, [r3, #32]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d003      	beq.n	8015596 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	2200      	movs	r2, #0
 8015592:	701a      	strb	r2, [r3, #0]
 8015594:	e02a      	b.n	80155ec <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801559c:	2b00      	cmp	r3, #0
 801559e:	d103      	bne.n	80155a8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80155a0:	683b      	ldr	r3, [r7, #0]
 80155a2:	2201      	movs	r2, #1
 80155a4:	701a      	strb	r2, [r3, #0]
 80155a6:	e021      	b.n	80155ec <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	7b1b      	ldrb	r3, [r3, #12]
 80155ac:	f003 030f 	and.w	r3, r3, #15
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d108      	bne.n	80155c8 <DetermineFrameType+0x6c>
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d103      	bne.n	80155c8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	2202      	movs	r2, #2
 80155c4:	701a      	strb	r2, [r3, #0]
 80155c6:	e011      	b.n	80155ec <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	7b1b      	ldrb	r3, [r3, #12]
 80155cc:	f003 030f 	and.w	r3, r3, #15
 80155d0:	b2db      	uxtb	r3, r3
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d108      	bne.n	80155e8 <DetermineFrameType+0x8c>
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d003      	beq.n	80155e8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	2203      	movs	r2, #3
 80155e4:	701a      	strb	r2, [r3, #0]
 80155e6:	e001      	b.n	80155ec <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80155e8:	2318      	movs	r3, #24
 80155ea:	e000      	b.n	80155ee <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80155ec:	2300      	movs	r3, #0
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	370c      	adds	r7, #12
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bc80      	pop	{r7}
 80155f6:	4770      	bx	lr

080155f8 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80155f8:	b480      	push	{r7}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	4603      	mov	r3, r0
 8015600:	460a      	mov	r2, r1
 8015602:	71fb      	strb	r3, [r7, #7]
 8015604:	4613      	mov	r3, r2
 8015606:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8015608:	79fa      	ldrb	r2, [r7, #7]
 801560a:	79bb      	ldrb	r3, [r7, #6]
 801560c:	429a      	cmp	r2, r3
 801560e:	d301      	bcc.n	8015614 <CheckRetrans+0x1c>
    {
        return true;
 8015610:	2301      	movs	r3, #1
 8015612:	e000      	b.n	8015616 <CheckRetrans+0x1e>
    }
    return false;
 8015614:	2300      	movs	r3, #0
}
 8015616:	4618      	mov	r0, r3
 8015618:	370c      	adds	r7, #12
 801561a:	46bd      	mov	sp, r7
 801561c:	bc80      	pop	{r7}
 801561e:	4770      	bx	lr

08015620 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8015620:	b580      	push	{r7, lr}
 8015622:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8015624:	4b12      	ldr	r3, [pc, #72]	; (8015670 <CheckRetransUnconfirmedUplink+0x50>)
 8015626:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801562a:	4a12      	ldr	r2, [pc, #72]	; (8015674 <CheckRetransUnconfirmedUplink+0x54>)
 801562c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8015630:	4611      	mov	r1, r2
 8015632:	4618      	mov	r0, r3
 8015634:	f7ff ffe0 	bl	80155f8 <CheckRetrans>
 8015638:	4603      	mov	r3, r0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d001      	beq.n	8015642 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801563e:	2301      	movs	r3, #1
 8015640:	e014      	b.n	801566c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8015642:	4b0b      	ldr	r3, [pc, #44]	; (8015670 <CheckRetransUnconfirmedUplink+0x50>)
 8015644:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8015648:	f003 0302 	and.w	r3, r3, #2
 801564c:	b2db      	uxtb	r3, r3
 801564e:	2b00      	cmp	r3, #0
 8015650:	d00b      	beq.n	801566a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8015652:	4b07      	ldr	r3, [pc, #28]	; (8015670 <CheckRetransUnconfirmedUplink+0x50>)
 8015654:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8015658:	2b00      	cmp	r3, #0
 801565a:	d004      	beq.n	8015666 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801565c:	4b04      	ldr	r3, [pc, #16]	; (8015670 <CheckRetransUnconfirmedUplink+0x50>)
 801565e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8015662:	2b01      	cmp	r3, #1
 8015664:	d101      	bne.n	801566a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8015666:	2301      	movs	r3, #1
 8015668:	e000      	b.n	801566c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801566a:	2300      	movs	r3, #0
}
 801566c:	4618      	mov	r0, r3
 801566e:	bd80      	pop	{r7, pc}
 8015670:	2000092c 	.word	0x2000092c
 8015674:	20000e48 	.word	0x20000e48

08015678 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8015678:	b580      	push	{r7, lr}
 801567a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801567c:	4b10      	ldr	r3, [pc, #64]	; (80156c0 <CheckRetransConfirmedUplink+0x48>)
 801567e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015682:	4a10      	ldr	r2, [pc, #64]	; (80156c4 <CheckRetransConfirmedUplink+0x4c>)
 8015684:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8015688:	4611      	mov	r1, r2
 801568a:	4618      	mov	r0, r3
 801568c:	f7ff ffb4 	bl	80155f8 <CheckRetrans>
 8015690:	4603      	mov	r3, r0
 8015692:	2b00      	cmp	r3, #0
 8015694:	d001      	beq.n	801569a <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8015696:	2301      	movs	r3, #1
 8015698:	e00f      	b.n	80156ba <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801569a:	4b09      	ldr	r3, [pc, #36]	; (80156c0 <CheckRetransConfirmedUplink+0x48>)
 801569c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80156a0:	f003 0302 	and.w	r3, r3, #2
 80156a4:	b2db      	uxtb	r3, r3
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d006      	beq.n	80156b8 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80156aa:	4b05      	ldr	r3, [pc, #20]	; (80156c0 <CheckRetransConfirmedUplink+0x48>)
 80156ac:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d001      	beq.n	80156b8 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80156b4:	2301      	movs	r3, #1
 80156b6:	e000      	b.n	80156ba <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80156b8:	2300      	movs	r3, #0
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	2000092c 	.word	0x2000092c
 80156c4:	20000e48 	.word	0x20000e48

080156c8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80156c8:	b480      	push	{r7}
 80156ca:	b083      	sub	sp, #12
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156d6:	d002      	beq.n	80156de <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	3301      	adds	r3, #1
 80156dc:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80156de:	687b      	ldr	r3, [r7, #4]
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	370c      	adds	r7, #12
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bc80      	pop	{r7}
 80156e8:	4770      	bx	lr
	...

080156ec <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80156f0:	4b1a      	ldr	r3, [pc, #104]	; (801575c <StopRetransmission+0x70>)
 80156f2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80156f6:	f003 0302 	and.w	r3, r3, #2
 80156fa:	b2db      	uxtb	r3, r3
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d009      	beq.n	8015714 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8015700:	4b16      	ldr	r3, [pc, #88]	; (801575c <StopRetransmission+0x70>)
 8015702:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8015706:	2b00      	cmp	r3, #0
 8015708:	d011      	beq.n	801572e <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801570a:	4b14      	ldr	r3, [pc, #80]	; (801575c <StopRetransmission+0x70>)
 801570c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8015710:	2b01      	cmp	r3, #1
 8015712:	d00c      	beq.n	801572e <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8015714:	4b12      	ldr	r3, [pc, #72]	; (8015760 <StopRetransmission+0x74>)
 8015716:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801571a:	2b00      	cmp	r3, #0
 801571c:	d007      	beq.n	801572e <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 801571e:	4b10      	ldr	r3, [pc, #64]	; (8015760 <StopRetransmission+0x74>)
 8015720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015722:	4618      	mov	r0, r3
 8015724:	f7ff ffd0 	bl	80156c8 <IncreaseAdrAckCounter>
 8015728:	4603      	mov	r3, r0
 801572a:	4a0d      	ldr	r2, [pc, #52]	; (8015760 <StopRetransmission+0x74>)
 801572c:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801572e:	4b0b      	ldr	r3, [pc, #44]	; (801575c <StopRetransmission+0x70>)
 8015730:	2200      	movs	r2, #0
 8015732:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8015736:	4b09      	ldr	r3, [pc, #36]	; (801575c <StopRetransmission+0x70>)
 8015738:	2200      	movs	r2, #0
 801573a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 801573e:	4b07      	ldr	r3, [pc, #28]	; (801575c <StopRetransmission+0x70>)
 8015740:	2200      	movs	r2, #0
 8015742:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8015746:	4b05      	ldr	r3, [pc, #20]	; (801575c <StopRetransmission+0x70>)
 8015748:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801574c:	f023 0302 	bic.w	r3, r3, #2
 8015750:	4a02      	ldr	r2, [pc, #8]	; (801575c <StopRetransmission+0x70>)
 8015752:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8015756:	2301      	movs	r3, #1
}
 8015758:	4618      	mov	r0, r3
 801575a:	bd80      	pop	{r7, pc}
 801575c:	2000092c 	.word	0x2000092c
 8015760:	20000e48 	.word	0x20000e48

08015764 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8015768:	4b08      	ldr	r3, [pc, #32]	; (801578c <OnMacProcessNotify+0x28>)
 801576a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801576e:	2b00      	cmp	r3, #0
 8015770:	d00a      	beq.n	8015788 <OnMacProcessNotify+0x24>
 8015772:	4b06      	ldr	r3, [pc, #24]	; (801578c <OnMacProcessNotify+0x28>)
 8015774:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015778:	695b      	ldr	r3, [r3, #20]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d004      	beq.n	8015788 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801577e:	4b03      	ldr	r3, [pc, #12]	; (801578c <OnMacProcessNotify+0x28>)
 8015780:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015784:	695b      	ldr	r3, [r3, #20]
 8015786:	4798      	blx	r3
    }
}
 8015788:	bf00      	nop
 801578a:	bd80      	pop	{r7, pc}
 801578c:	2000092c 	.word	0x2000092c

08015790 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	4603      	mov	r3, r0
 8015798:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801579a:	4b0b      	ldr	r3, [pc, #44]	; (80157c8 <CallNvmDataChangeCallback+0x38>)
 801579c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d00c      	beq.n	80157be <CallNvmDataChangeCallback+0x2e>
 80157a4:	4b08      	ldr	r3, [pc, #32]	; (80157c8 <CallNvmDataChangeCallback+0x38>)
 80157a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80157aa:	691b      	ldr	r3, [r3, #16]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d006      	beq.n	80157be <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80157b0:	4b05      	ldr	r3, [pc, #20]	; (80157c8 <CallNvmDataChangeCallback+0x38>)
 80157b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80157b6:	691b      	ldr	r3, [r3, #16]
 80157b8:	88fa      	ldrh	r2, [r7, #6]
 80157ba:	4610      	mov	r0, r2
 80157bc:	4798      	blx	r3
    }
}
 80157be:	bf00      	nop
 80157c0:	3708      	adds	r7, #8
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}
 80157c6:	bf00      	nop
 80157c8:	2000092c 	.word	0x2000092c

080157cc <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80157cc:	b480      	push	{r7}
 80157ce:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80157d0:	4b0b      	ldr	r3, [pc, #44]	; (8015800 <IsRequestPending+0x34>)
 80157d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80157d6:	f003 0304 	and.w	r3, r3, #4
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d107      	bne.n	80157f0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80157e0:	4b07      	ldr	r3, [pc, #28]	; (8015800 <IsRequestPending+0x34>)
 80157e2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80157e6:	f003 0301 	and.w	r3, r3, #1
 80157ea:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d001      	beq.n	80157f4 <IsRequestPending+0x28>
    {
        return 1;
 80157f0:	2301      	movs	r3, #1
 80157f2:	e000      	b.n	80157f6 <IsRequestPending+0x2a>
    }
    return 0;
 80157f4:	2300      	movs	r3, #0
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bc80      	pop	{r7}
 80157fc:	4770      	bx	lr
 80157fe:	bf00      	nop
 8015800:	2000092c 	.word	0x2000092c

08015804 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8015804:	b590      	push	{r4, r7, lr}
 8015806:	b091      	sub	sp, #68	; 0x44
 8015808:	af02      	add	r7, sp, #8
 801580a:	6178      	str	r0, [r7, #20]
 801580c:	6139      	str	r1, [r7, #16]
 801580e:	4613      	mov	r3, r2
 8015810:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d002      	beq.n	801581e <LoRaMacInitialization+0x1a>
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d101      	bne.n	8015822 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801581e:	2303      	movs	r3, #3
 8015820:	e27a      	b.n	8015d18 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d00b      	beq.n	8015842 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801582e:	2b00      	cmp	r3, #0
 8015830:	d007      	beq.n	8015842 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8015836:	2b00      	cmp	r3, #0
 8015838:	d003      	beq.n	8015842 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801583e:	2b00      	cmp	r3, #0
 8015840:	d101      	bne.n	8015846 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015842:	2303      	movs	r3, #3
 8015844:	e268      	b.n	8015d18 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8015846:	7bfb      	ldrb	r3, [r7, #15]
 8015848:	4618      	mov	r0, r3
 801584a:	f003 fcaa 	bl	80191a2 <RegionIsActive>
 801584e:	4603      	mov	r3, r0
 8015850:	f083 0301 	eor.w	r3, r3, #1
 8015854:	b2db      	uxtb	r3, r3
 8015856:	2b00      	cmp	r3, #0
 8015858:	d001      	beq.n	801585e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801585a:	2309      	movs	r3, #9
 801585c:	e25c      	b.n	8015d18 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801585e:	6978      	ldr	r0, [r7, #20]
 8015860:	f002 f930 	bl	8017ac4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8015864:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8015868:	2100      	movs	r1, #0
 801586a:	48c7      	ldr	r0, [pc, #796]	; (8015b88 <LoRaMacInitialization+0x384>)
 801586c:	f006 f89c 	bl	801b9a8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8015870:	f240 521c 	movw	r2, #1308	; 0x51c
 8015874:	2100      	movs	r1, #0
 8015876:	48c5      	ldr	r0, [pc, #788]	; (8015b8c <LoRaMacInitialization+0x388>)
 8015878:	f006 f896 	bl	801b9a8 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801587c:	4ac2      	ldr	r2, [pc, #776]	; (8015b88 <LoRaMacInitialization+0x384>)
 801587e:	7bfb      	ldrb	r3, [r7, #15]
 8015880:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8015884:	4bc0      	ldr	r3, [pc, #768]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015886:	2200      	movs	r2, #0
 8015888:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 801588c:	4bbe      	ldr	r3, [pc, #760]	; (8015b88 <LoRaMacInitialization+0x384>)
 801588e:	2200      	movs	r2, #0
 8015890:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8015894:	4bbc      	ldr	r3, [pc, #752]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015896:	4abe      	ldr	r2, [pc, #760]	; (8015b90 <LoRaMacInitialization+0x38c>)
 8015898:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801589c:	2300      	movs	r3, #0
 801589e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80158a2:	4bbc      	ldr	r3, [pc, #752]	; (8015b94 <LoRaMacInitialization+0x390>)
 80158a4:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80158a6:	4bbc      	ldr	r3, [pc, #752]	; (8015b98 <LoRaMacInitialization+0x394>)
 80158a8:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80158aa:	4bbc      	ldr	r3, [pc, #752]	; (8015b9c <LoRaMacInitialization+0x398>)
 80158ac:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80158ae:	4bb6      	ldr	r3, [pc, #728]	; (8015b88 <LoRaMacInitialization+0x384>)
 80158b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158b4:	f107 021c 	add.w	r2, r7, #28
 80158b8:	4611      	mov	r1, r2
 80158ba:	4618      	mov	r0, r3
 80158bc:	f003 fcaa 	bl	8019214 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80158c0:	230f      	movs	r3, #15
 80158c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158c6:	4bb0      	ldr	r3, [pc, #704]	; (8015b88 <LoRaMacInitialization+0x384>)
 80158c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80158d0:	4611      	mov	r1, r2
 80158d2:	4618      	mov	r0, r3
 80158d4:	f003 fc75 	bl	80191c2 <RegionGetPhyParam>
 80158d8:	4603      	mov	r3, r0
 80158da:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80158dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158de:	2b00      	cmp	r3, #0
 80158e0:	bf14      	ite	ne
 80158e2:	2301      	movne	r3, #1
 80158e4:	2300      	moveq	r3, #0
 80158e6:	b2da      	uxtb	r2, r3
 80158e8:	4ba7      	ldr	r3, [pc, #668]	; (8015b88 <LoRaMacInitialization+0x384>)
 80158ea:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80158ee:	230a      	movs	r3, #10
 80158f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158f4:	4ba4      	ldr	r3, [pc, #656]	; (8015b88 <LoRaMacInitialization+0x384>)
 80158f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80158fe:	4611      	mov	r1, r2
 8015900:	4618      	mov	r0, r3
 8015902:	f003 fc5e 	bl	80191c2 <RegionGetPhyParam>
 8015906:	4603      	mov	r3, r0
 8015908:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590c:	b25a      	sxtb	r2, r3
 801590e:	4b9e      	ldr	r3, [pc, #632]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015910:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8015914:	2306      	movs	r3, #6
 8015916:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801591a:	4b9b      	ldr	r3, [pc, #620]	; (8015b88 <LoRaMacInitialization+0x384>)
 801591c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015920:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015924:	4611      	mov	r1, r2
 8015926:	4618      	mov	r0, r3
 8015928:	f003 fc4b 	bl	80191c2 <RegionGetPhyParam>
 801592c:	4603      	mov	r3, r0
 801592e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8015930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015932:	b25a      	sxtb	r2, r3
 8015934:	4b94      	ldr	r3, [pc, #592]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015936:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801593a:	2310      	movs	r3, #16
 801593c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015940:	4b91      	ldr	r3, [pc, #580]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015942:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015946:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801594a:	4611      	mov	r1, r2
 801594c:	4618      	mov	r0, r3
 801594e:	f003 fc38 	bl	80191c2 <RegionGetPhyParam>
 8015952:	4603      	mov	r3, r0
 8015954:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8015956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015958:	4a8b      	ldr	r2, [pc, #556]	; (8015b88 <LoRaMacInitialization+0x384>)
 801595a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801595e:	2311      	movs	r3, #17
 8015960:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015964:	4b88      	ldr	r3, [pc, #544]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015966:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801596a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801596e:	4611      	mov	r1, r2
 8015970:	4618      	mov	r0, r3
 8015972:	f003 fc26 	bl	80191c2 <RegionGetPhyParam>
 8015976:	4603      	mov	r3, r0
 8015978:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801597c:	4a82      	ldr	r2, [pc, #520]	; (8015b88 <LoRaMacInitialization+0x384>)
 801597e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8015982:	2312      	movs	r3, #18
 8015984:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015988:	4b7f      	ldr	r3, [pc, #508]	; (8015b88 <LoRaMacInitialization+0x384>)
 801598a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801598e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015992:	4611      	mov	r1, r2
 8015994:	4618      	mov	r0, r3
 8015996:	f003 fc14 	bl	80191c2 <RegionGetPhyParam>
 801599a:	4603      	mov	r3, r0
 801599c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a0:	4a79      	ldr	r2, [pc, #484]	; (8015b88 <LoRaMacInitialization+0x384>)
 80159a2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80159a6:	2313      	movs	r3, #19
 80159a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159ac:	4b76      	ldr	r3, [pc, #472]	; (8015b88 <LoRaMacInitialization+0x384>)
 80159ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159b6:	4611      	mov	r1, r2
 80159b8:	4618      	mov	r0, r3
 80159ba:	f003 fc02 	bl	80191c2 <RegionGetPhyParam>
 80159be:	4603      	mov	r3, r0
 80159c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80159c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c4:	4a70      	ldr	r2, [pc, #448]	; (8015b88 <LoRaMacInitialization+0x384>)
 80159c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80159ca:	2314      	movs	r3, #20
 80159cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159d0:	4b6d      	ldr	r3, [pc, #436]	; (8015b88 <LoRaMacInitialization+0x384>)
 80159d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159da:	4611      	mov	r1, r2
 80159dc:	4618      	mov	r0, r3
 80159de:	f003 fbf0 	bl	80191c2 <RegionGetPhyParam>
 80159e2:	4603      	mov	r3, r0
 80159e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80159e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e8:	4a67      	ldr	r2, [pc, #412]	; (8015b88 <LoRaMacInitialization+0x384>)
 80159ea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80159ee:	2316      	movs	r3, #22
 80159f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159f4:	4b64      	ldr	r3, [pc, #400]	; (8015b88 <LoRaMacInitialization+0x384>)
 80159f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159fe:	4611      	mov	r1, r2
 8015a00:	4618      	mov	r0, r3
 8015a02:	f003 fbde 	bl	80191c2 <RegionGetPhyParam>
 8015a06:	4603      	mov	r3, r0
 8015a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8015a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0c:	b2da      	uxtb	r2, r3
 8015a0e:	4b5e      	ldr	r3, [pc, #376]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a10:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8015a14:	2317      	movs	r3, #23
 8015a16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015a1a:	4b5b      	ldr	r3, [pc, #364]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015a24:	4611      	mov	r1, r2
 8015a26:	4618      	mov	r0, r3
 8015a28:	f003 fbcb 	bl	80191c2 <RegionGetPhyParam>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8015a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a32:	4a55      	ldr	r2, [pc, #340]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a34:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8015a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3a:	4a53      	ldr	r2, [pc, #332]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a3c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8015a40:	2318      	movs	r3, #24
 8015a42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015a46:	4b50      	ldr	r3, [pc, #320]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015a50:	4611      	mov	r1, r2
 8015a52:	4618      	mov	r0, r3
 8015a54:	f003 fbb5 	bl	80191c2 <RegionGetPhyParam>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8015a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5e:	b2da      	uxtb	r2, r3
 8015a60:	4b49      	ldr	r3, [pc, #292]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a62:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8015a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a68:	b2da      	uxtb	r2, r3
 8015a6a:	4b47      	ldr	r3, [pc, #284]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a6c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8015a70:	231d      	movs	r3, #29
 8015a72:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015a76:	4b44      	ldr	r3, [pc, #272]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015a80:	4611      	mov	r1, r2
 8015a82:	4618      	mov	r0, r3
 8015a84:	f003 fb9d 	bl	80191c2 <RegionGetPhyParam>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8015a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8e:	b2da      	uxtb	r2, r3
 8015a90:	4b3d      	ldr	r3, [pc, #244]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a92:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8015a96:	231e      	movs	r3, #30
 8015a98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015a9c:	4b3a      	ldr	r3, [pc, #232]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015a9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015aa2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015aa6:	4611      	mov	r1, r2
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f003 fb8a 	bl	80191c2 <RegionGetPhyParam>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8015ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab4:	b2da      	uxtb	r2, r3
 8015ab6:	4b34      	ldr	r3, [pc, #208]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015ab8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8015abc:	231f      	movs	r3, #31
 8015abe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015ac2:	4b31      	ldr	r3, [pc, #196]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015ac4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015ac8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015acc:	4611      	mov	r1, r2
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f003 fb77 	bl	80191c2 <RegionGetPhyParam>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8015ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ada:	4a2b      	ldr	r2, [pc, #172]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015adc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8015ae0:	2320      	movs	r3, #32
 8015ae2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015ae6:	4b28      	ldr	r3, [pc, #160]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015ae8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015aec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015af0:	4611      	mov	r1, r2
 8015af2:	4618      	mov	r0, r3
 8015af4:	f003 fb65 	bl	80191c2 <RegionGetPhyParam>
 8015af8:	4603      	mov	r3, r0
 8015afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8015afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015afe:	4a22      	ldr	r2, [pc, #136]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b00:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8015b04:	230b      	movs	r3, #11
 8015b06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015b0a:	4b1f      	ldr	r3, [pc, #124]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015b10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015b14:	4611      	mov	r1, r2
 8015b16:	4618      	mov	r0, r3
 8015b18:	f003 fb53 	bl	80191c2 <RegionGetPhyParam>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8015b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	4b18      	ldr	r3, [pc, #96]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b26:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8015b2a:	230c      	movs	r3, #12
 8015b2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015b30:	4b15      	ldr	r3, [pc, #84]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015b36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015b3a:	4611      	mov	r1, r2
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f003 fb40 	bl	80191c2 <RegionGetPhyParam>
 8015b42:	4603      	mov	r3, r0
 8015b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8015b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b48:	b29a      	uxth	r2, r3
 8015b4a:	4b0f      	ldr	r3, [pc, #60]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b4c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8015b50:	4b0d      	ldr	r3, [pc, #52]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b52:	2201      	movs	r2, #1
 8015b54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8015b58:	4b0b      	ldr	r3, [pc, #44]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b5a:	220a      	movs	r2, #10
 8015b5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8015b60:	4b09      	ldr	r3, [pc, #36]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b62:	2206      	movs	r2, #6
 8015b64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8015b68:	4b07      	ldr	r3, [pc, #28]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015b6e:	4a06      	ldr	r2, [pc, #24]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b70:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8015b72:	4b05      	ldr	r3, [pc, #20]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b74:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015b78:	4b03      	ldr	r3, [pc, #12]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8015b7e:	4b02      	ldr	r3, [pc, #8]	; (8015b88 <LoRaMacInitialization+0x384>)
 8015b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015b84:	e00c      	b.n	8015ba0 <LoRaMacInitialization+0x39c>
 8015b86:	bf00      	nop
 8015b88:	20000e48 	.word	0x20000e48
 8015b8c:	2000092c 	.word	0x2000092c
 8015b90:	01000400 	.word	0x01000400
 8015b94:	2000106c 	.word	0x2000106c
 8015b98:	20001080 	.word	0x20001080
 8015b9c:	200019e0 	.word	0x200019e0
 8015ba0:	4a5f      	ldr	r2, [pc, #380]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015ba2:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8015ba4:	4b5e      	ldr	r3, [pc, #376]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015ba6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015baa:	4a5d      	ldr	r2, [pc, #372]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bac:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8015bae:	4b5c      	ldr	r3, [pc, #368]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015bb4:	4a5a      	ldr	r2, [pc, #360]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bb6:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8015bb8:	4b59      	ldr	r3, [pc, #356]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015bbe:	4a58      	ldr	r2, [pc, #352]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bc0:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8015bc2:	4b57      	ldr	r3, [pc, #348]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015bc8:	4a55      	ldr	r2, [pc, #340]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bca:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8015bcc:	4b54      	ldr	r3, [pc, #336]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bce:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8015bd2:	4b53      	ldr	r3, [pc, #332]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bd4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8015bd8:	4b51      	ldr	r3, [pc, #324]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bda:	2201      	movs	r2, #1
 8015bdc:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8015be0:	4a50      	ldr	r2, [pc, #320]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8015be8:	2000      	movs	r0, #0
 8015bea:	f7ff f869 	bl	8014cc0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8015bee:	4b4c      	ldr	r3, [pc, #304]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015bf0:	2201      	movs	r2, #1
 8015bf2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8015bf6:	4a4b      	ldr	r2, [pc, #300]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8015bfe:	4b49      	ldr	r3, [pc, #292]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015c00:	2200      	movs	r2, #0
 8015c02:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8015c06:	4b47      	ldr	r3, [pc, #284]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015c08:	2201      	movs	r2, #1
 8015c0a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8015c0e:	4b44      	ldr	r3, [pc, #272]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015c10:	2200      	movs	r2, #0
 8015c12:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8015c14:	4b42      	ldr	r3, [pc, #264]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015c16:	2200      	movs	r2, #0
 8015c18:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	9300      	str	r3, [sp, #0]
 8015c1e:	4b42      	ldr	r3, [pc, #264]	; (8015d28 <LoRaMacInitialization+0x524>)
 8015c20:	2200      	movs	r2, #0
 8015c22:	f04f 31ff 	mov.w	r1, #4294967295
 8015c26:	4841      	ldr	r0, [pc, #260]	; (8015d2c <LoRaMacInitialization+0x528>)
 8015c28:	f009 ff9c 	bl	801fb64 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	4b3f      	ldr	r3, [pc, #252]	; (8015d30 <LoRaMacInitialization+0x52c>)
 8015c32:	2200      	movs	r2, #0
 8015c34:	f04f 31ff 	mov.w	r1, #4294967295
 8015c38:	483e      	ldr	r0, [pc, #248]	; (8015d34 <LoRaMacInitialization+0x530>)
 8015c3a:	f009 ff93 	bl	801fb64 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8015c3e:	2300      	movs	r3, #0
 8015c40:	9300      	str	r3, [sp, #0]
 8015c42:	4b3d      	ldr	r3, [pc, #244]	; (8015d38 <LoRaMacInitialization+0x534>)
 8015c44:	2200      	movs	r2, #0
 8015c46:	f04f 31ff 	mov.w	r1, #4294967295
 8015c4a:	483c      	ldr	r0, [pc, #240]	; (8015d3c <LoRaMacInitialization+0x538>)
 8015c4c:	f009 ff8a 	bl	801fb64 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8015c50:	2300      	movs	r3, #0
 8015c52:	9300      	str	r3, [sp, #0]
 8015c54:	4b3a      	ldr	r3, [pc, #232]	; (8015d40 <LoRaMacInitialization+0x53c>)
 8015c56:	2200      	movs	r2, #0
 8015c58:	f04f 31ff 	mov.w	r1, #4294967295
 8015c5c:	4839      	ldr	r0, [pc, #228]	; (8015d44 <LoRaMacInitialization+0x540>)
 8015c5e:	f009 ff81 	bl	801fb64 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8015c62:	4c2f      	ldr	r4, [pc, #188]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015c64:	463b      	mov	r3, r7
 8015c66:	4618      	mov	r0, r3
 8015c68:	f009 facc 	bl	801f204 <SysTimeGetMcuTime>
 8015c6c:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8015c70:	463a      	mov	r2, r7
 8015c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015c76:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8015c7a:	4b33      	ldr	r3, [pc, #204]	; (8015d48 <LoRaMacInitialization+0x544>)
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8015c80:	4b28      	ldr	r3, [pc, #160]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015c82:	4a32      	ldr	r2, [pc, #200]	; (8015d4c <LoRaMacInitialization+0x548>)
 8015c84:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8015c88:	4b26      	ldr	r3, [pc, #152]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015c8a:	4a31      	ldr	r2, [pc, #196]	; (8015d50 <LoRaMacInitialization+0x54c>)
 8015c8c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8015c90:	4b24      	ldr	r3, [pc, #144]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015c92:	4a30      	ldr	r2, [pc, #192]	; (8015d54 <LoRaMacInitialization+0x550>)
 8015c94:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8015c98:	4b22      	ldr	r3, [pc, #136]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015c9a:	4a2f      	ldr	r2, [pc, #188]	; (8015d58 <LoRaMacInitialization+0x554>)
 8015c9c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8015ca0:	4b20      	ldr	r3, [pc, #128]	; (8015d24 <LoRaMacInitialization+0x520>)
 8015ca2:	4a2e      	ldr	r2, [pc, #184]	; (8015d5c <LoRaMacInitialization+0x558>)
 8015ca4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8015ca8:	4b2d      	ldr	r3, [pc, #180]	; (8015d60 <LoRaMacInitialization+0x55c>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	482d      	ldr	r0, [pc, #180]	; (8015d64 <LoRaMacInitialization+0x560>)
 8015cae:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8015cb0:	482d      	ldr	r0, [pc, #180]	; (8015d68 <LoRaMacInitialization+0x564>)
 8015cb2:	f7fa f9f5 	bl	80100a0 <SecureElementInit>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d001      	beq.n	8015cc0 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015cbc:	2311      	movs	r3, #17
 8015cbe:	e02b      	b.n	8015d18 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8015cc0:	4817      	ldr	r0, [pc, #92]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015cc2:	f002 fbbf 	bl	8018444 <LoRaMacCryptoInit>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d001      	beq.n	8015cd0 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015ccc:	2311      	movs	r3, #17
 8015cce:	e023      	b.n	8015d18 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8015cd0:	f001 fcba 	bl	8017648 <LoRaMacCommandsInit>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d001      	beq.n	8015cde <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015cda:	2313      	movs	r3, #19
 8015cdc:	e01c      	b.n	8015d18 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8015cde:	4823      	ldr	r0, [pc, #140]	; (8015d6c <LoRaMacInitialization+0x568>)
 8015ce0:	f002 fc50 	bl	8018584 <LoRaMacCryptoSetMulticastReference>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d001      	beq.n	8015cee <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015cea:	2311      	movs	r3, #17
 8015cec:	e014      	b.n	8015d18 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8015cee:	4b1c      	ldr	r3, [pc, #112]	; (8015d60 <LoRaMacInitialization+0x55c>)
 8015cf0:	695b      	ldr	r3, [r3, #20]
 8015cf2:	4798      	blx	r3
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f005 fdf6 	bl	801b8e8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8015cfc:	4b18      	ldr	r3, [pc, #96]	; (8015d60 <LoRaMacInitialization+0x55c>)
 8015cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d00:	4a07      	ldr	r2, [pc, #28]	; (8015d20 <LoRaMacInitialization+0x51c>)
 8015d02:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8015d06:	4610      	mov	r0, r2
 8015d08:	4798      	blx	r3
    Radio.Sleep( );
 8015d0a:	4b15      	ldr	r3, [pc, #84]	; (8015d60 <LoRaMacInitialization+0x55c>)
 8015d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d0e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8015d10:	2001      	movs	r0, #1
 8015d12:	f7fd fa7d 	bl	8013210 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8015d16:	2300      	movs	r3, #0
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	373c      	adds	r7, #60	; 0x3c
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd90      	pop	{r4, r7, pc}
 8015d20:	20000e48 	.word	0x20000e48
 8015d24:	2000092c 	.word	0x2000092c
 8015d28:	0801379d 	.word	0x0801379d
 8015d2c:	20000c94 	.word	0x20000c94
 8015d30:	0801382d 	.word	0x0801382d
 8015d34:	20000cac 	.word	0x20000cac
 8015d38:	080138a5 	.word	0x080138a5
 8015d3c:	20000cc4 	.word	0x20000cc4
 8015d40:	08013925 	.word	0x08013925
 8015d44:	20000d2c 	.word	0x20000d2c
 8015d48:	20001a70 	.word	0x20001a70
 8015d4c:	0801224d 	.word	0x0801224d
 8015d50:	080122a9 	.word	0x080122a9
 8015d54:	08012349 	.word	0x08012349
 8015d58:	0801231d 	.word	0x0801231d
 8015d5c:	08012365 	.word	0x08012365
 8015d60:	08021f14 	.word	0x08021f14
 8015d64:	20000c78 	.word	0x20000c78
 8015d68:	20000f94 	.word	0x20000f94
 8015d6c:	20000f30 	.word	0x20000f30

08015d70 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8015d74:	4b04      	ldr	r3, [pc, #16]	; (8015d88 <LoRaMacStart+0x18>)
 8015d76:	2200      	movs	r2, #0
 8015d78:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8015d7c:	f7fc fb08 	bl	8012390 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8015d80:	2300      	movs	r3, #0
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	2000092c 	.word	0x2000092c

08015d8c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8015d90:	f7fd fa06 	bl	80131a0 <LoRaMacIsBusy>
 8015d94:	4603      	mov	r3, r0
 8015d96:	f083 0301 	eor.w	r3, r3, #1
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d00d      	beq.n	8015dbc <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8015da0:	4b0b      	ldr	r3, [pc, #44]	; (8015dd0 <LoRaMacStop+0x44>)
 8015da2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015da6:	2b02      	cmp	r3, #2
 8015da8:	d102      	bne.n	8015db0 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8015daa:	4b0a      	ldr	r3, [pc, #40]	; (8015dd4 <LoRaMacStop+0x48>)
 8015dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dae:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8015db0:	4b09      	ldr	r3, [pc, #36]	; (8015dd8 <LoRaMacStop+0x4c>)
 8015db2:	2201      	movs	r2, #1
 8015db4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8015db8:	2300      	movs	r3, #0
 8015dba:	e007      	b.n	8015dcc <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8015dbc:	4b06      	ldr	r3, [pc, #24]	; (8015dd8 <LoRaMacStop+0x4c>)
 8015dbe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d101      	bne.n	8015dca <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	e000      	b.n	8015dcc <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8015dca:	2301      	movs	r3, #1
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	20000e48 	.word	0x20000e48
 8015dd4:	08021f14 	.word	0x08021f14
 8015dd8:	2000092c 	.word	0x2000092c

08015ddc <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8015de0:	4812      	ldr	r0, [pc, #72]	; (8015e2c <LoRaMacHalt+0x50>)
 8015de2:	f009 ff63 	bl	801fcac <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8015de6:	4812      	ldr	r0, [pc, #72]	; (8015e30 <LoRaMacHalt+0x54>)
 8015de8:	f009 ff60 	bl	801fcac <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8015dec:	4811      	ldr	r0, [pc, #68]	; (8015e34 <LoRaMacHalt+0x58>)
 8015dee:	f009 ff5d 	bl	801fcac <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8015df2:	4811      	ldr	r0, [pc, #68]	; (8015e38 <LoRaMacHalt+0x5c>)
 8015df4:	f009 ff5a 	bl	801fcac <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8015df8:	f001 fa8c 	bl	8017314 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8015dfc:	4b0f      	ldr	r3, [pc, #60]	; (8015e3c <LoRaMacHalt+0x60>)
 8015dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e00:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8015e02:	4b0f      	ldr	r3, [pc, #60]	; (8015e40 <LoRaMacHalt+0x64>)
 8015e04:	2200      	movs	r2, #0
 8015e06:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8015e0a:	480e      	ldr	r0, [pc, #56]	; (8015e44 <LoRaMacHalt+0x68>)
 8015e0c:	f7fd fba2 	bl	8013554 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8015e10:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8015e14:	490b      	ldr	r1, [pc, #44]	; (8015e44 <LoRaMacHalt+0x68>)
 8015e16:	480c      	ldr	r0, [pc, #48]	; (8015e48 <LoRaMacHalt+0x6c>)
 8015e18:	f005 fd8b 	bl	801b932 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8015e1c:	4b08      	ldr	r3, [pc, #32]	; (8015e40 <LoRaMacHalt+0x64>)
 8015e1e:	2201      	movs	r2, #1
 8015e20:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8015e24:	2300      	movs	r3, #0
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	20000c94 	.word	0x20000c94
 8015e30:	20000cac 	.word	0x20000cac
 8015e34:	20000cc4 	.word	0x20000cc4
 8015e38:	20000d2c 	.word	0x20000d2c
 8015e3c:	08021f14 	.word	0x08021f14
 8015e40:	2000092c 	.word	0x2000092c
 8015e44:	20000e48 	.word	0x20000e48
 8015e48:	20001414 	.word	0x20001414

08015e4c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8015e4c:	b590      	push	{r4, r7, lr}
 8015e4e:	b08d      	sub	sp, #52	; 0x34
 8015e50:	af02      	add	r7, sp, #8
 8015e52:	4603      	mov	r3, r0
 8015e54:	6039      	str	r1, [r7, #0]
 8015e56:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8015e58:	4b42      	ldr	r3, [pc, #264]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e5c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8015e5e:	4b41      	ldr	r3, [pc, #260]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015e60:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8015e64:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015e66:	4b3f      	ldr	r3, [pc, #252]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015e68:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8015e6c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8015e6e:	4b3e      	ldr	r3, [pc, #248]	; (8015f68 <LoRaMacQueryTxPossible+0x11c>)
 8015e70:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015e74:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8015e76:	2300      	movs	r3, #0
 8015e78:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d101      	bne.n	8015e84 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e80:	2303      	movs	r3, #3
 8015e82:	e06b      	b.n	8015f5c <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8015e84:	2300      	movs	r3, #0
 8015e86:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8015e88:	4b36      	ldr	r3, [pc, #216]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015e8a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015e8e:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8015e90:	4b34      	ldr	r3, [pc, #208]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e94:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8015e96:	4b33      	ldr	r3, [pc, #204]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015e98:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8015e9c:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8015e9e:	4b31      	ldr	r3, [pc, #196]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015ea0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8015ea4:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015ea6:	4b2f      	ldr	r3, [pc, #188]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015ea8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015eac:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015eb0:	4b2c      	ldr	r3, [pc, #176]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015eb2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8015eb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8015eba:	4b2b      	ldr	r3, [pc, #172]	; (8015f68 <LoRaMacQueryTxPossible+0x11c>)
 8015ebc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015ec4:	4b27      	ldr	r3, [pc, #156]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015ec6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8015ece:	4b25      	ldr	r3, [pc, #148]	; (8015f64 <LoRaMacQueryTxPossible+0x118>)
 8015ed0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015ed4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8015ed8:	f107 040d 	add.w	r4, r7, #13
 8015edc:	f107 020e 	add.w	r2, r7, #14
 8015ee0:	f107 010f 	add.w	r1, r7, #15
 8015ee4:	f107 0014 	add.w	r0, r7, #20
 8015ee8:	f107 0310 	add.w	r3, r7, #16
 8015eec:	9300      	str	r3, [sp, #0]
 8015eee:	4623      	mov	r3, r4
 8015ef0:	f001 f8da 	bl	80170a8 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8015ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7fd fe59 	bl	8013bb0 <GetMaxAppPayloadWithoutFOptsLength>
 8015efe:	4603      	mov	r3, r0
 8015f00:	461a      	mov	r2, r3
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015f06:	f107 0308 	add.w	r3, r7, #8
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f001 fca2 	bl	8017854 <LoRaMacCommandsGetSizeSerializedCmds>
 8015f10:	4603      	mov	r3, r0
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d001      	beq.n	8015f1a <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015f16:	2313      	movs	r3, #19
 8015f18:	e020      	b.n	8015f5c <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	2b0f      	cmp	r3, #15
 8015f1e:	d819      	bhi.n	8015f54 <LoRaMacQueryTxPossible+0x108>
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	785b      	ldrb	r3, [r3, #1]
 8015f24:	461a      	mov	r2, r3
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d313      	bcc.n	8015f54 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	785a      	ldrb	r2, [r3, #1]
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	1ad3      	subs	r3, r2, r3
 8015f36:	b2da      	uxtb	r2, r3
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	785b      	ldrb	r3, [r3, #1]
 8015f40:	4619      	mov	r1, r3
 8015f42:	79fa      	ldrb	r2, [r7, #7]
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	4413      	add	r3, r2
 8015f48:	4299      	cmp	r1, r3
 8015f4a:	d301      	bcc.n	8015f50 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	e005      	b.n	8015f5c <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8015f50:	2308      	movs	r3, #8
 8015f52:	e003      	b.n	8015f5c <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	2200      	movs	r2, #0
 8015f58:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8015f5a:	2308      	movs	r3, #8
    }
}
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	372c      	adds	r7, #44	; 0x2c
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd90      	pop	{r4, r7, pc}
 8015f64:	20000e48 	.word	0x20000e48
 8015f68:	2000092c 	.word	0x2000092c

08015f6c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8015f6c:	b590      	push	{r4, r7, lr}
 8015f6e:	b087      	sub	sp, #28
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8015f74:	2300      	movs	r3, #0
 8015f76:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d101      	bne.n	8015f82 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015f7e:	2303      	movs	r3, #3
 8015f80:	e1c4      	b.n	801630c <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	2b41      	cmp	r3, #65	; 0x41
 8015f88:	f200 81b9 	bhi.w	80162fe <LoRaMacMibGetRequestConfirm+0x392>
 8015f8c:	a201      	add	r2, pc, #4	; (adr r2, 8015f94 <LoRaMacMibGetRequestConfirm+0x28>)
 8015f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f92:	bf00      	nop
 8015f94:	0801609d 	.word	0x0801609d
 8015f98:	080160a9 	.word	0x080160a9
 8015f9c:	080160b5 	.word	0x080160b5
 8015fa0:	080160c1 	.word	0x080160c1
 8015fa4:	080160cd 	.word	0x080160cd
 8015fa8:	080160d9 	.word	0x080160d9
 8015fac:	080160e5 	.word	0x080160e5
 8015fb0:	080162ff 	.word	0x080162ff
 8015fb4:	080162ff 	.word	0x080162ff
 8015fb8:	080162ff 	.word	0x080162ff
 8015fbc:	080162ff 	.word	0x080162ff
 8015fc0:	080162ff 	.word	0x080162ff
 8015fc4:	080162ff 	.word	0x080162ff
 8015fc8:	080162ff 	.word	0x080162ff
 8015fcc:	080162ff 	.word	0x080162ff
 8015fd0:	080160f9 	.word	0x080160f9
 8015fd4:	08016105 	.word	0x08016105
 8015fd8:	08016111 	.word	0x08016111
 8015fdc:	08016133 	.word	0x08016133
 8015fe0:	08016145 	.word	0x08016145
 8015fe4:	08016157 	.word	0x08016157
 8015fe8:	08016169 	.word	0x08016169
 8015fec:	0801619d 	.word	0x0801619d
 8015ff0:	0801617b 	.word	0x0801617b
 8015ff4:	080161bf 	.word	0x080161bf
 8015ff8:	080161cb 	.word	0x080161cb
 8015ffc:	080161d5 	.word	0x080161d5
 8016000:	080161df 	.word	0x080161df
 8016004:	080161e9 	.word	0x080161e9
 8016008:	080161f3 	.word	0x080161f3
 801600c:	080161fd 	.word	0x080161fd
 8016010:	08016229 	.word	0x08016229
 8016014:	08016235 	.word	0x08016235
 8016018:	0801624d 	.word	0x0801624d
 801601c:	08016241 	.word	0x08016241
 8016020:	08016259 	.word	0x08016259
 8016024:	08016263 	.word	0x08016263
 8016028:	0801626f 	.word	0x0801626f
 801602c:	0801628b 	.word	0x0801628b
 8016030:	0801627b 	.word	0x0801627b
 8016034:	08016283 	.word	0x08016283
 8016038:	080162ff 	.word	0x080162ff
 801603c:	08016297 	.word	0x08016297
 8016040:	080162ff 	.word	0x080162ff
 8016044:	080162ff 	.word	0x080162ff
 8016048:	080162ff 	.word	0x080162ff
 801604c:	080162ff 	.word	0x080162ff
 8016050:	080162ff 	.word	0x080162ff
 8016054:	080162ff 	.word	0x080162ff
 8016058:	080162ff 	.word	0x080162ff
 801605c:	080162ff 	.word	0x080162ff
 8016060:	080162ff 	.word	0x080162ff
 8016064:	080162ff 	.word	0x080162ff
 8016068:	080162ff 	.word	0x080162ff
 801606c:	080162ff 	.word	0x080162ff
 8016070:	080162ff 	.word	0x080162ff
 8016074:	080162ff 	.word	0x080162ff
 8016078:	080162ff 	.word	0x080162ff
 801607c:	080162ab 	.word	0x080162ab
 8016080:	080162b7 	.word	0x080162b7
 8016084:	080162c3 	.word	0x080162c3
 8016088:	080162cf 	.word	0x080162cf
 801608c:	080162db 	.word	0x080162db
 8016090:	080162e7 	.word	0x080162e7
 8016094:	080162f3 	.word	0x080162f3
 8016098:	080162f9 	.word	0x080162f9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 801609c:	4b9d      	ldr	r3, [pc, #628]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801609e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	711a      	strb	r2, [r3, #4]
            break;
 80160a6:	e130      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80160a8:	4b9a      	ldr	r3, [pc, #616]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160aa:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	711a      	strb	r2, [r3, #4]
            break;
 80160b2:	e12a      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7fa fab1 	bl	8010620 <SecureElementGetDevEui>
            break;
 80160be:	e124      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7fa fadb 	bl	8010680 <SecureElementGetJoinEui>
            break;
 80160ca:	e11e      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80160cc:	4b91      	ldr	r3, [pc, #580]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160ce:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	711a      	strb	r2, [r3, #4]
            break;
 80160d6:	e118      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80160d8:	4b8e      	ldr	r3, [pc, #568]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	605a      	str	r2, [r3, #4]
            break;
 80160e2:	e112      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80160e4:	4b8b      	ldr	r3, [pc, #556]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160e6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	3304      	adds	r3, #4
 80160ee:	4619      	mov	r1, r3
 80160f0:	4610      	mov	r0, r2
 80160f2:	f7fa faf7 	bl	80106e4 <SecureElementGetDevAddr>
            break;
 80160f6:	e108      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80160f8:	4b86      	ldr	r3, [pc, #536]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160fa:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	711a      	strb	r2, [r3, #4]
            break;
 8016102:	e102      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8016104:	4b83      	ldr	r3, [pc, #524]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016106:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	711a      	strb	r2, [r3, #4]
            break;
 801610e:	e0fc      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8016110:	231c      	movs	r3, #28
 8016112:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016114:	4b7f      	ldr	r3, [pc, #508]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016116:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801611a:	f107 0210 	add.w	r2, r7, #16
 801611e:	4611      	mov	r1, r2
 8016120:	4618      	mov	r0, r3
 8016122:	f003 f84e 	bl	80191c2 <RegionGetPhyParam>
 8016126:	4603      	mov	r3, r0
 8016128:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801612a:	68fa      	ldr	r2, [r7, #12]
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	605a      	str	r2, [r3, #4]
            break;
 8016130:	e0eb      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	4a77      	ldr	r2, [pc, #476]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016136:	3304      	adds	r3, #4
 8016138:	326c      	adds	r2, #108	; 0x6c
 801613a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801613e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016142:	e0e2      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	4a73      	ldr	r2, [pc, #460]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016148:	3304      	adds	r3, #4
 801614a:	32b4      	adds	r2, #180	; 0xb4
 801614c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016150:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016154:	e0d9      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	4a6e      	ldr	r2, [pc, #440]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801615a:	3304      	adds	r3, #4
 801615c:	3274      	adds	r2, #116	; 0x74
 801615e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016162:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016166:	e0d0      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	4a6a      	ldr	r2, [pc, #424]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801616c:	3304      	adds	r3, #4
 801616e:	32bc      	adds	r2, #188	; 0xbc
 8016170:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016174:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016178:	e0c7      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801617a:	231a      	movs	r3, #26
 801617c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801617e:	4b65      	ldr	r3, [pc, #404]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016180:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016184:	f107 0210 	add.w	r2, r7, #16
 8016188:	4611      	mov	r1, r2
 801618a:	4618      	mov	r0, r3
 801618c:	f003 f819 	bl	80191c2 <RegionGetPhyParam>
 8016190:	4603      	mov	r3, r0
 8016192:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8016194:	68fa      	ldr	r2, [r7, #12]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	605a      	str	r2, [r3, #4]
            break;
 801619a:	e0b6      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801619c:	2319      	movs	r3, #25
 801619e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80161a0:	4b5c      	ldr	r3, [pc, #368]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80161a6:	f107 0210 	add.w	r2, r7, #16
 80161aa:	4611      	mov	r1, r2
 80161ac:	4618      	mov	r0, r3
 80161ae:	f003 f808 	bl	80191c2 <RegionGetPhyParam>
 80161b2:	4603      	mov	r3, r0
 80161b4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80161b6:	68fa      	ldr	r2, [r7, #12]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	605a      	str	r2, [r3, #4]
            break;
 80161bc:	e0a5      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80161be:	4b55      	ldr	r3, [pc, #340]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161c0:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	711a      	strb	r2, [r3, #4]
            break;
 80161c8:	e09f      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80161ca:	4b52      	ldr	r3, [pc, #328]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	605a      	str	r2, [r3, #4]
            break;
 80161d2:	e09a      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80161d4:	4b4f      	ldr	r3, [pc, #316]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	605a      	str	r2, [r3, #4]
            break;
 80161dc:	e095      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80161de:	4b4d      	ldr	r3, [pc, #308]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	605a      	str	r2, [r3, #4]
            break;
 80161e6:	e090      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80161e8:	4b4a      	ldr	r3, [pc, #296]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	605a      	str	r2, [r3, #4]
            break;
 80161f0:	e08b      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80161f2:	4b48      	ldr	r3, [pc, #288]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	605a      	str	r2, [r3, #4]
            break;
 80161fa:	e086      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80161fc:	2302      	movs	r3, #2
 80161fe:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016200:	4b44      	ldr	r3, [pc, #272]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016202:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016206:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016208:	4b42      	ldr	r3, [pc, #264]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801620a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801620e:	f107 0210 	add.w	r2, r7, #16
 8016212:	4611      	mov	r1, r2
 8016214:	4618      	mov	r0, r3
 8016216:	f002 ffd4 	bl	80191c2 <RegionGetPhyParam>
 801621a:	4603      	mov	r3, r0
 801621c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	b25a      	sxtb	r2, r3
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	711a      	strb	r2, [r3, #4]
            break;
 8016226:	e070      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8016228:	4b3a      	ldr	r3, [pc, #232]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801622a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	711a      	strb	r2, [r3, #4]
            break;
 8016232:	e06a      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8016234:	4b37      	ldr	r3, [pc, #220]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016236:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	711a      	strb	r2, [r3, #4]
            break;
 801623e:	e064      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8016240:	4b34      	ldr	r3, [pc, #208]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016242:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	711a      	strb	r2, [r3, #4]
            break;
 801624a:	e05e      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801624c:	4b31      	ldr	r3, [pc, #196]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801624e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	711a      	strb	r2, [r3, #4]
            break;
 8016256:	e058      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8016258:	4b2e      	ldr	r3, [pc, #184]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801625a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	605a      	str	r2, [r3, #4]
            break;
 8016260:	e053      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8016262:	4b2c      	ldr	r3, [pc, #176]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016264:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	711a      	strb	r2, [r3, #4]
            break;
 801626c:	e04d      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801626e:	4b29      	ldr	r3, [pc, #164]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016270:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	605a      	str	r2, [r3, #4]
            break;
 8016278:	e047      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	4a25      	ldr	r2, [pc, #148]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801627e:	605a      	str	r2, [r3, #4]
            break;
 8016280:	e043      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	4a24      	ldr	r2, [pc, #144]	; (8016318 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8016286:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8016288:	e03f      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801628a:	4b22      	ldr	r3, [pc, #136]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801628c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	605a      	str	r2, [r3, #4]
            break;
 8016294:	e039      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	4a1e      	ldr	r2, [pc, #120]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801629a:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 801629e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80162a0:	687c      	ldr	r4, [r7, #4]
 80162a2:	f003 f905 	bl	80194b0 <RegionGetVersion>
 80162a6:	60a0      	str	r0, [r4, #8]
            break;
 80162a8:	e02f      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80162aa:	4b1a      	ldr	r3, [pc, #104]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80162ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	605a      	str	r2, [r3, #4]
            break;
 80162b4:	e029      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80162b6:	4b17      	ldr	r3, [pc, #92]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80162b8:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	711a      	strb	r2, [r3, #4]
            break;
 80162c0:	e023      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80162c2:	4b14      	ldr	r3, [pc, #80]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80162c4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	809a      	strh	r2, [r3, #4]
            break;
 80162cc:	e01d      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80162ce:	4b11      	ldr	r3, [pc, #68]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80162d0:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	809a      	strh	r2, [r3, #4]
            break;
 80162d8:	e017      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80162da:	4b0e      	ldr	r3, [pc, #56]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80162dc:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	809a      	strh	r2, [r3, #4]
            break;
 80162e4:	e011      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80162e6:	4b0b      	ldr	r3, [pc, #44]	; (8016314 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80162e8:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	809a      	strh	r2, [r3, #4]
            break;
 80162f0:	e00b      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80162f2:	2318      	movs	r3, #24
 80162f4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80162f6:	e008      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80162f8:	2318      	movs	r3, #24
 80162fa:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80162fc:	e005      	b.n	801630a <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f001 f81f 	bl	8017342 <LoRaMacClassBMibGetRequestConfirm>
 8016304:	4603      	mov	r3, r0
 8016306:	75fb      	strb	r3, [r7, #23]
            break;
 8016308:	bf00      	nop
        }
    }
    return status;
 801630a:	7dfb      	ldrb	r3, [r7, #23]
}
 801630c:	4618      	mov	r0, r3
 801630e:	371c      	adds	r7, #28
 8016310:	46bd      	mov	sp, r7
 8016312:	bd90      	pop	{r4, r7, pc}
 8016314:	20000e48 	.word	0x20000e48
 8016318:	20001414 	.word	0x20001414

0801631c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b086      	sub	sp, #24
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016324:	2300      	movs	r3, #0
 8016326:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d101      	bne.n	8016332 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801632e:	2303      	movs	r3, #3
 8016330:	e396      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8016332:	4bbd      	ldr	r3, [pc, #756]	; (8016628 <LoRaMacMibSetRequestConfirm+0x30c>)
 8016334:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8016338:	f003 0302 	and.w	r3, r3, #2
 801633c:	2b00      	cmp	r3, #0
 801633e:	d001      	beq.n	8016344 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8016340:	2301      	movs	r3, #1
 8016342:	e38d      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	781b      	ldrb	r3, [r3, #0]
 8016348:	2b41      	cmp	r3, #65	; 0x41
 801634a:	f200 835d 	bhi.w	8016a08 <LoRaMacMibSetRequestConfirm+0x6ec>
 801634e:	a201      	add	r2, pc, #4	; (adr r2, 8016354 <LoRaMacMibSetRequestConfirm+0x38>)
 8016350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016354:	0801645d 	.word	0x0801645d
 8016358:	0801646d 	.word	0x0801646d
 801635c:	08016487 	.word	0x08016487
 8016360:	0801649f 	.word	0x0801649f
 8016364:	080164b7 	.word	0x080164b7
 8016368:	080164c3 	.word	0x080164c3
 801636c:	080164cf 	.word	0x080164cf
 8016370:	080164f9 	.word	0x080164f9
 8016374:	0801651f 	.word	0x0801651f
 8016378:	08016545 	.word	0x08016545
 801637c:	0801656b 	.word	0x0801656b
 8016380:	08016591 	.word	0x08016591
 8016384:	080165b7 	.word	0x080165b7
 8016388:	080165dd 	.word	0x080165dd
 801638c:	08016603 	.word	0x08016603
 8016390:	08016631 	.word	0x08016631
 8016394:	08016651 	.word	0x08016651
 8016398:	08016a09 	.word	0x08016a09
 801639c:	0801665d 	.word	0x0801665d
 80163a0:	080166cd 	.word	0x080166cd
 80163a4:	0801670d 	.word	0x0801670d
 80163a8:	0801676f 	.word	0x0801676f
 80163ac:	080167df 	.word	0x080167df
 80163b0:	080167af 	.word	0x080167af
 80163b4:	0801680f 	.word	0x0801680f
 80163b8:	08016831 	.word	0x08016831
 80163bc:	0801683b 	.word	0x0801683b
 80163c0:	08016845 	.word	0x08016845
 80163c4:	0801684f 	.word	0x0801684f
 80163c8:	08016859 	.word	0x08016859
 80163cc:	08016a09 	.word	0x08016a09
 80163d0:	08016863 	.word	0x08016863
 80163d4:	08016895 	.word	0x08016895
 80163d8:	08016909 	.word	0x08016909
 80163dc:	080168cf 	.word	0x080168cf
 80163e0:	0801693b 	.word	0x0801693b
 80163e4:	08016951 	.word	0x08016951
 80163e8:	08016969 	.word	0x08016969
 80163ec:	08016975 	.word	0x08016975
 80163f0:	08016981 	.word	0x08016981
 80163f4:	08016a09 	.word	0x08016a09
 80163f8:	0801698b 	.word	0x0801698b
 80163fc:	08016a09 	.word	0x08016a09
 8016400:	08016a09 	.word	0x08016a09
 8016404:	08016a09 	.word	0x08016a09
 8016408:	08016a09 	.word	0x08016a09
 801640c:	08016a09 	.word	0x08016a09
 8016410:	08016a09 	.word	0x08016a09
 8016414:	08016a09 	.word	0x08016a09
 8016418:	08016a09 	.word	0x08016a09
 801641c:	08016a09 	.word	0x08016a09
 8016420:	08016a09 	.word	0x08016a09
 8016424:	08016a09 	.word	0x08016a09
 8016428:	08016a09 	.word	0x08016a09
 801642c:	08016a09 	.word	0x08016a09
 8016430:	08016a09 	.word	0x08016a09
 8016434:	08016a09 	.word	0x08016a09
 8016438:	08016a09 	.word	0x08016a09
 801643c:	080169b5 	.word	0x080169b5
 8016440:	080169c1 	.word	0x080169c1
 8016444:	080169cd 	.word	0x080169cd
 8016448:	080169d9 	.word	0x080169d9
 801644c:	080169e5 	.word	0x080169e5
 8016450:	080169f1 	.word	0x080169f1
 8016454:	080169fd 	.word	0x080169fd
 8016458:	08016a03 	.word	0x08016a03
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	791b      	ldrb	r3, [r3, #4]
 8016460:	4618      	mov	r0, r3
 8016462:	f7fd fabb 	bl	80139dc <SwitchClass>
 8016466:	4603      	mov	r3, r0
 8016468:	75fb      	strb	r3, [r7, #23]
            break;
 801646a:	e2ee      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	791b      	ldrb	r3, [r3, #4]
 8016470:	2b02      	cmp	r3, #2
 8016472:	d005      	beq.n	8016480 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	791a      	ldrb	r2, [r3, #4]
 8016478:	4b6c      	ldr	r3, [pc, #432]	; (801662c <LoRaMacMibSetRequestConfirm+0x310>)
 801647a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801647e:	e2e4      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016480:	2303      	movs	r3, #3
 8016482:	75fb      	strb	r3, [r7, #23]
            break;
 8016484:	e2e1      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	685b      	ldr	r3, [r3, #4]
 801648a:	4618      	mov	r0, r3
 801648c:	f7fa f8b0 	bl	80105f0 <SecureElementSetDevEui>
 8016490:	4603      	mov	r3, r0
 8016492:	2b00      	cmp	r3, #0
 8016494:	f000 82be 	beq.w	8016a14 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016498:	2303      	movs	r3, #3
 801649a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801649c:	e2ba      	b.n	8016a14 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7fa f8d4 	bl	8010650 <SecureElementSetJoinEui>
 80164a8:	4603      	mov	r3, r0
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	f000 82b4 	beq.w	8016a18 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80164b0:	2303      	movs	r3, #3
 80164b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80164b4:	e2b0      	b.n	8016a18 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	791a      	ldrb	r2, [r3, #4]
 80164ba:	4b5c      	ldr	r3, [pc, #368]	; (801662c <LoRaMacMibSetRequestConfirm+0x310>)
 80164bc:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 80164c0:	e2c3      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	4a59      	ldr	r2, [pc, #356]	; (801662c <LoRaMacMibSetRequestConfirm+0x310>)
 80164c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80164cc:	e2bd      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80164ce:	4b57      	ldr	r3, [pc, #348]	; (801662c <LoRaMacMibSetRequestConfirm+0x310>)
 80164d0:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	4619      	mov	r1, r3
 80164da:	4610      	mov	r0, r2
 80164dc:	f7fa f8e8 	bl	80106b0 <SecureElementSetDevAddr>
 80164e0:	4603      	mov	r3, r0
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d002      	beq.n	80164ec <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80164e6:	2303      	movs	r3, #3
 80164e8:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80164ea:	e2ae      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	685b      	ldr	r3, [r3, #4]
 80164f0:	4a4e      	ldr	r2, [pc, #312]	; (801662c <LoRaMacMibSetRequestConfirm+0x310>)
 80164f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80164f6:	e2a8      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	685b      	ldr	r3, [r3, #4]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d00b      	beq.n	8016518 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	685b      	ldr	r3, [r3, #4]
 8016504:	4619      	mov	r1, r3
 8016506:	2000      	movs	r0, #0
 8016508:	f002 f866 	bl	80185d8 <LoRaMacCryptoSetKey>
 801650c:	4603      	mov	r3, r0
 801650e:	2b00      	cmp	r3, #0
 8016510:	f000 8284 	beq.w	8016a1c <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016514:	2311      	movs	r3, #17
 8016516:	e2a3      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016518:	2303      	movs	r3, #3
 801651a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801651c:	e27e      	b.n	8016a1c <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	685b      	ldr	r3, [r3, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d00b      	beq.n	801653e <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	4619      	mov	r1, r3
 801652c:	2001      	movs	r0, #1
 801652e:	f002 f853 	bl	80185d8 <LoRaMacCryptoSetKey>
 8016532:	4603      	mov	r3, r0
 8016534:	2b00      	cmp	r3, #0
 8016536:	f000 8273 	beq.w	8016a20 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801653a:	2311      	movs	r3, #17
 801653c:	e290      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801653e:	2303      	movs	r3, #3
 8016540:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016542:	e26d      	b.n	8016a20 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d00b      	beq.n	8016564 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	4619      	mov	r1, r3
 8016552:	2008      	movs	r0, #8
 8016554:	f002 f840 	bl	80185d8 <LoRaMacCryptoSetKey>
 8016558:	4603      	mov	r3, r0
 801655a:	2b00      	cmp	r3, #0
 801655c:	f000 8262 	beq.w	8016a24 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016560:	2311      	movs	r3, #17
 8016562:	e27d      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016564:	2303      	movs	r3, #3
 8016566:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016568:	e25c      	b.n	8016a24 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d00b      	beq.n	801658a <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	685b      	ldr	r3, [r3, #4]
 8016576:	4619      	mov	r1, r3
 8016578:	2009      	movs	r0, #9
 801657a:	f002 f82d 	bl	80185d8 <LoRaMacCryptoSetKey>
 801657e:	4603      	mov	r3, r0
 8016580:	2b00      	cmp	r3, #0
 8016582:	f000 8251 	beq.w	8016a28 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016586:	2311      	movs	r3, #17
 8016588:	e26a      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801658a:	2303      	movs	r3, #3
 801658c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801658e:	e24b      	b.n	8016a28 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d00b      	beq.n	80165b0 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	4619      	mov	r1, r3
 801659e:	200c      	movs	r0, #12
 80165a0:	f002 f81a 	bl	80185d8 <LoRaMacCryptoSetKey>
 80165a4:	4603      	mov	r3, r0
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 8240 	beq.w	8016a2c <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80165ac:	2311      	movs	r3, #17
 80165ae:	e257      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80165b0:	2303      	movs	r3, #3
 80165b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80165b4:	e23a      	b.n	8016a2c <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	685b      	ldr	r3, [r3, #4]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d00b      	beq.n	80165d6 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	4619      	mov	r1, r3
 80165c4:	200d      	movs	r0, #13
 80165c6:	f002 f807 	bl	80185d8 <LoRaMacCryptoSetKey>
 80165ca:	4603      	mov	r3, r0
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	f000 822f 	beq.w	8016a30 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80165d2:	2311      	movs	r3, #17
 80165d4:	e244      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80165d6:	2303      	movs	r3, #3
 80165d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80165da:	e229      	b.n	8016a30 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d00b      	beq.n	80165fc <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	685b      	ldr	r3, [r3, #4]
 80165e8:	4619      	mov	r1, r3
 80165ea:	200e      	movs	r0, #14
 80165ec:	f001 fff4 	bl	80185d8 <LoRaMacCryptoSetKey>
 80165f0:	4603      	mov	r3, r0
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	f000 821e 	beq.w	8016a34 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80165f8:	2311      	movs	r3, #17
 80165fa:	e231      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80165fc:	2303      	movs	r3, #3
 80165fe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016600:	e218      	b.n	8016a34 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00b      	beq.n	8016622 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	4619      	mov	r1, r3
 8016610:	200f      	movs	r0, #15
 8016612:	f001 ffe1 	bl	80185d8 <LoRaMacCryptoSetKey>
 8016616:	4603      	mov	r3, r0
 8016618:	2b00      	cmp	r3, #0
 801661a:	f000 820d 	beq.w	8016a38 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801661e:	2311      	movs	r3, #17
 8016620:	e21e      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016622:	2303      	movs	r3, #3
 8016624:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016626:	e207      	b.n	8016a38 <LoRaMacMibSetRequestConfirm+0x71c>
 8016628:	2000092c 	.word	0x2000092c
 801662c:	20000e48 	.word	0x20000e48
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	791a      	ldrb	r2, [r3, #4]
 8016634:	4bb2      	ldr	r3, [pc, #712]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016636:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801663a:	4bb2      	ldr	r3, [pc, #712]	; (8016904 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801663c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801663e:	4ab0      	ldr	r2, [pc, #704]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016640:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8016644:	4610      	mov	r0, r2
 8016646:	4798      	blx	r3
            Radio.Sleep( );
 8016648:	4bae      	ldr	r3, [pc, #696]	; (8016904 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801664c:	4798      	blx	r3
            break;
 801664e:	e1fc      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	791a      	ldrb	r2, [r3, #4]
 8016654:	4baa      	ldr	r3, [pc, #680]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016656:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 801665a:	e1f6      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	7a1b      	ldrb	r3, [r3, #8]
 8016660:	b25b      	sxtb	r3, r3
 8016662:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016664:	4ba6      	ldr	r3, [pc, #664]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016666:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801666a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801666c:	4ba4      	ldr	r3, [pc, #656]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801666e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016672:	f107 0108 	add.w	r1, r7, #8
 8016676:	2207      	movs	r2, #7
 8016678:	4618      	mov	r0, r3
 801667a:	f002 fddd 	bl	8019238 <RegionVerify>
 801667e:	4603      	mov	r3, r0
 8016680:	f083 0301 	eor.w	r3, r3, #1
 8016684:	b2db      	uxtb	r3, r3
 8016686:	2b00      	cmp	r3, #0
 8016688:	d002      	beq.n	8016690 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801668a:	2303      	movs	r3, #3
 801668c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801668e:	e1dc      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	685b      	ldr	r3, [r3, #4]
 8016694:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8016696:	4b9a      	ldr	r3, [pc, #616]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016698:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801669c:	f107 0108 	add.w	r1, r7, #8
 80166a0:	2200      	movs	r2, #0
 80166a2:	4618      	mov	r0, r3
 80166a4:	f002 fdc8 	bl	8019238 <RegionVerify>
 80166a8:	4603      	mov	r3, r0
 80166aa:	f083 0301 	eor.w	r3, r3, #1
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d002      	beq.n	80166ba <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80166b4:	2303      	movs	r3, #3
 80166b6:	75fb      	strb	r3, [r7, #23]
            break;
 80166b8:	e1c7      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80166ba:	4b91      	ldr	r3, [pc, #580]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	336c      	adds	r3, #108	; 0x6c
 80166c0:	3204      	adds	r2, #4
 80166c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166c6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80166ca:	e1be      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	7a1b      	ldrb	r3, [r3, #8]
 80166d0:	b25b      	sxtb	r3, r3
 80166d2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80166d4:	4b8a      	ldr	r3, [pc, #552]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80166d6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80166da:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80166dc:	4b88      	ldr	r3, [pc, #544]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80166de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80166e2:	f107 0108 	add.w	r1, r7, #8
 80166e6:	2207      	movs	r2, #7
 80166e8:	4618      	mov	r0, r3
 80166ea:	f002 fda5 	bl	8019238 <RegionVerify>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d008      	beq.n	8016706 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80166f4:	4b82      	ldr	r3, [pc, #520]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80166f6:	687a      	ldr	r2, [r7, #4]
 80166f8:	33b4      	adds	r3, #180	; 0xb4
 80166fa:	3204      	adds	r2, #4
 80166fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016700:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016704:	e1a1      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016706:	2303      	movs	r3, #3
 8016708:	75fb      	strb	r3, [r7, #23]
            break;
 801670a:	e19e      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	7a1b      	ldrb	r3, [r3, #8]
 8016710:	b25b      	sxtb	r3, r3
 8016712:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016714:	4b7a      	ldr	r3, [pc, #488]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016716:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801671a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801671c:	4b78      	ldr	r3, [pc, #480]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801671e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016722:	f107 0108 	add.w	r1, r7, #8
 8016726:	2207      	movs	r2, #7
 8016728:	4618      	mov	r0, r3
 801672a:	f002 fd85 	bl	8019238 <RegionVerify>
 801672e:	4603      	mov	r3, r0
 8016730:	2b00      	cmp	r3, #0
 8016732:	d019      	beq.n	8016768 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8016734:	4b72      	ldr	r3, [pc, #456]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	3374      	adds	r3, #116	; 0x74
 801673a:	3204      	adds	r2, #4
 801673c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016740:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8016744:	4b6e      	ldr	r3, [pc, #440]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016746:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801674a:	2b02      	cmp	r3, #2
 801674c:	f040 8176 	bne.w	8016a3c <LoRaMacMibSetRequestConfirm+0x720>
 8016750:	4b6b      	ldr	r3, [pc, #428]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016752:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8016756:	2b00      	cmp	r3, #0
 8016758:	f000 8170 	beq.w	8016a3c <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801675c:	4b69      	ldr	r3, [pc, #420]	; (8016904 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016760:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8016762:	f7fe fc1b 	bl	8014f9c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016766:	e169      	b.n	8016a3c <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016768:	2303      	movs	r3, #3
 801676a:	75fb      	strb	r3, [r7, #23]
            break;
 801676c:	e166      	b.n	8016a3c <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	7a1b      	ldrb	r3, [r3, #8]
 8016772:	b25b      	sxtb	r3, r3
 8016774:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016776:	4b62      	ldr	r3, [pc, #392]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016778:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801677c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801677e:	4b60      	ldr	r3, [pc, #384]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016780:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016784:	f107 0108 	add.w	r1, r7, #8
 8016788:	2207      	movs	r2, #7
 801678a:	4618      	mov	r0, r3
 801678c:	f002 fd54 	bl	8019238 <RegionVerify>
 8016790:	4603      	mov	r3, r0
 8016792:	2b00      	cmp	r3, #0
 8016794:	d008      	beq.n	80167a8 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8016796:	4b5a      	ldr	r3, [pc, #360]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016798:	687a      	ldr	r2, [r7, #4]
 801679a:	33bc      	adds	r3, #188	; 0xbc
 801679c:	3204      	adds	r2, #4
 801679e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167a2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80167a6:	e150      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80167a8:	2303      	movs	r3, #3
 80167aa:	75fb      	strb	r3, [r7, #23]
            break;
 80167ac:	e14d      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80167b4:	2301      	movs	r3, #1
 80167b6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80167b8:	4b51      	ldr	r3, [pc, #324]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80167ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80167be:	f107 020c 	add.w	r2, r7, #12
 80167c2:	4611      	mov	r1, r2
 80167c4:	4618      	mov	r0, r3
 80167c6:	f002 fd60 	bl	801928a <RegionChanMaskSet>
 80167ca:	4603      	mov	r3, r0
 80167cc:	f083 0301 	eor.w	r3, r3, #1
 80167d0:	b2db      	uxtb	r3, r3
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	f000 8134 	beq.w	8016a40 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80167d8:	2303      	movs	r3, #3
 80167da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80167dc:	e130      	b.n	8016a40 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80167e4:	2300      	movs	r3, #0
 80167e6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80167e8:	4b45      	ldr	r3, [pc, #276]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80167ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80167ee:	f107 020c 	add.w	r2, r7, #12
 80167f2:	4611      	mov	r1, r2
 80167f4:	4618      	mov	r0, r3
 80167f6:	f002 fd48 	bl	801928a <RegionChanMaskSet>
 80167fa:	4603      	mov	r3, r0
 80167fc:	f083 0301 	eor.w	r3, r3, #1
 8016800:	b2db      	uxtb	r3, r3
 8016802:	2b00      	cmp	r3, #0
 8016804:	f000 811e 	beq.w	8016a44 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016808:	2303      	movs	r3, #3
 801680a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801680c:	e11a      	b.n	8016a44 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	791b      	ldrb	r3, [r3, #4]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d009      	beq.n	801682a <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801681a:	2b0f      	cmp	r3, #15
 801681c:	d805      	bhi.n	801682a <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	791a      	ldrb	r2, [r3, #4]
 8016822:	4b37      	ldr	r3, [pc, #220]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016824:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016828:	e10f      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801682a:	2303      	movs	r3, #3
 801682c:	75fb      	strb	r3, [r7, #23]
            break;
 801682e:	e10c      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	4a32      	ldr	r2, [pc, #200]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016836:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8016838:	e107      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	685b      	ldr	r3, [r3, #4]
 801683e:	4a30      	ldr	r2, [pc, #192]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016840:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8016842:	e102      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	685b      	ldr	r3, [r3, #4]
 8016848:	4a2d      	ldr	r2, [pc, #180]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801684a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801684c:	e0fd      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	4a2b      	ldr	r2, [pc, #172]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016854:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8016856:	e0f8      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	4a28      	ldr	r2, [pc, #160]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801685e:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8016860:	e0f3      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016868:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801686a:	4b25      	ldr	r3, [pc, #148]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801686c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016870:	f107 0108 	add.w	r1, r7, #8
 8016874:	2206      	movs	r2, #6
 8016876:	4618      	mov	r0, r3
 8016878:	f002 fcde 	bl	8019238 <RegionVerify>
 801687c:	4603      	mov	r3, r0
 801687e:	2b00      	cmp	r3, #0
 8016880:	d005      	beq.n	801688e <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8016882:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8016886:	4b1e      	ldr	r3, [pc, #120]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016888:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801688c:	e0dd      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801688e:	2303      	movs	r3, #3
 8016890:	75fb      	strb	r3, [r7, #23]
            break;
 8016892:	e0da      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801689a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801689c:	4b18      	ldr	r3, [pc, #96]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801689e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80168a2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80168a4:	4b16      	ldr	r3, [pc, #88]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80168a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80168aa:	f107 0108 	add.w	r1, r7, #8
 80168ae:	2205      	movs	r2, #5
 80168b0:	4618      	mov	r0, r3
 80168b2:	f002 fcc1 	bl	8019238 <RegionVerify>
 80168b6:	4603      	mov	r3, r0
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d005      	beq.n	80168c8 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80168bc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80168c0:	4b0f      	ldr	r3, [pc, #60]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80168c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80168c6:	e0c0      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80168c8:	2303      	movs	r3, #3
 80168ca:	75fb      	strb	r3, [r7, #23]
            break;
 80168cc:	e0bd      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80168d4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80168d6:	4b0a      	ldr	r3, [pc, #40]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80168d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80168dc:	f107 0108 	add.w	r1, r7, #8
 80168e0:	220a      	movs	r2, #10
 80168e2:	4618      	mov	r0, r3
 80168e4:	f002 fca8 	bl	8019238 <RegionVerify>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d005      	beq.n	80168fa <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80168ee:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80168f2:	4b03      	ldr	r3, [pc, #12]	; (8016900 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80168f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80168f8:	e0a7      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80168fa:	2303      	movs	r3, #3
 80168fc:	75fb      	strb	r3, [r7, #23]
            break;
 80168fe:	e0a4      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
 8016900:	20000e48 	.word	0x20000e48
 8016904:	08021f14 	.word	0x08021f14
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801690e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8016910:	4b55      	ldr	r3, [pc, #340]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016912:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016916:	f107 0108 	add.w	r1, r7, #8
 801691a:	2209      	movs	r2, #9
 801691c:	4618      	mov	r0, r3
 801691e:	f002 fc8b 	bl	8019238 <RegionVerify>
 8016922:	4603      	mov	r3, r0
 8016924:	2b00      	cmp	r3, #0
 8016926:	d005      	beq.n	8016934 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8016928:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801692c:	4b4e      	ldr	r3, [pc, #312]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 801692e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016932:	e08a      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016934:	2303      	movs	r3, #3
 8016936:	75fb      	strb	r3, [r7, #23]
            break;
 8016938:	e087      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	685b      	ldr	r3, [r3, #4]
 801693e:	4a4a      	ldr	r2, [pc, #296]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016944:	4b48      	ldr	r3, [pc, #288]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801694a:	4a47      	ldr	r2, [pc, #284]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 801694c:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 801694e:	e07c      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	791a      	ldrb	r2, [r3, #4]
 8016954:	4b44      	ldr	r3, [pc, #272]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016956:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801695a:	4b43      	ldr	r3, [pc, #268]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 801695c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8016960:	4b41      	ldr	r3, [pc, #260]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8016966:	e070      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	4a3e      	ldr	r2, [pc, #248]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 801696e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8016972:	e06a      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	685b      	ldr	r3, [r3, #4]
 8016978:	4a3b      	ldr	r2, [pc, #236]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 801697a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801697e:	e064      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8016980:	f7fe fd40 	bl	8015404 <RestoreNvmData>
 8016984:	4603      	mov	r3, r0
 8016986:	75fb      	strb	r3, [r7, #23]
            break;
 8016988:	e05f      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	799b      	ldrb	r3, [r3, #6]
 801698e:	2b01      	cmp	r3, #1
 8016990:	d80d      	bhi.n	80169ae <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8016992:	4a35      	ldr	r2, [pc, #212]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	685b      	ldr	r3, [r3, #4]
 8016998:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6858      	ldr	r0, [r3, #4]
 80169a0:	f001 fd7c 	bl	801849c <LoRaMacCryptoSetLrWanVersion>
 80169a4:	4603      	mov	r3, r0
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d04e      	beq.n	8016a48 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80169aa:	2311      	movs	r3, #17
 80169ac:	e058      	b.n	8016a60 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80169ae:	2303      	movs	r3, #3
 80169b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80169b2:	e049      	b.n	8016a48 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	4a2b      	ldr	r2, [pc, #172]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 80169ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 80169be:	e044      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	791a      	ldrb	r2, [r3, #4]
 80169c4:	4b28      	ldr	r3, [pc, #160]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 80169c6:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 80169ca:	e03e      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	889a      	ldrh	r2, [r3, #4]
 80169d0:	4b25      	ldr	r3, [pc, #148]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 80169d2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80169d6:	e038      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	889a      	ldrh	r2, [r3, #4]
 80169dc:	4b22      	ldr	r3, [pc, #136]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 80169de:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80169e2:	e032      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	889a      	ldrh	r2, [r3, #4]
 80169e8:	4b1f      	ldr	r3, [pc, #124]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 80169ea:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80169ee:	e02c      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	889a      	ldrh	r2, [r3, #4]
 80169f4:	4b1c      	ldr	r3, [pc, #112]	; (8016a68 <LoRaMacMibSetRequestConfirm+0x74c>)
 80169f6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80169fa:	e026      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80169fc:	2318      	movs	r3, #24
 80169fe:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8016a00:	e023      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8016a02:	2318      	movs	r3, #24
 8016a04:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8016a06:	e020      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	f000 fca4 	bl	8017356 <LoRaMacMibClassBSetRequestConfirm>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	75fb      	strb	r3, [r7, #23]
            break;
 8016a12:	e01a      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a14:	bf00      	nop
 8016a16:	e018      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a18:	bf00      	nop
 8016a1a:	e016      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a1c:	bf00      	nop
 8016a1e:	e014      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a20:	bf00      	nop
 8016a22:	e012      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a24:	bf00      	nop
 8016a26:	e010      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a28:	bf00      	nop
 8016a2a:	e00e      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a2c:	bf00      	nop
 8016a2e:	e00c      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a30:	bf00      	nop
 8016a32:	e00a      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a34:	bf00      	nop
 8016a36:	e008      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a38:	bf00      	nop
 8016a3a:	e006      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a3c:	bf00      	nop
 8016a3e:	e004      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a40:	bf00      	nop
 8016a42:	e002      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a44:	bf00      	nop
 8016a46:	e000      	b.n	8016a4a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016a48:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8016a4a:	7dfb      	ldrb	r3, [r7, #23]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d106      	bne.n	8016a5e <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8016a50:	4a06      	ldr	r2, [pc, #24]	; (8016a6c <LoRaMacMibSetRequestConfirm+0x750>)
 8016a52:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016a56:	f043 0320 	orr.w	r3, r3, #32
 8016a5a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8016a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	3718      	adds	r7, #24
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	20000e48 	.word	0x20000e48
 8016a6c:	2000092c 	.word	0x2000092c

08016a70 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b08a      	sub	sp, #40	; 0x28
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016a78:	2302      	movs	r3, #2
 8016a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8016a7e:	2300      	movs	r3, #0
 8016a80:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d101      	bne.n	8016a8c <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016a88:	2303      	movs	r3, #3
 8016a8a:	e17e      	b.n	8016d8a <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2200      	movs	r2, #0
 8016a90:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8016a92:	f7fc fb85 	bl	80131a0 <LoRaMacIsBusy>
 8016a96:	4603      	mov	r3, r0
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d001      	beq.n	8016aa0 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	e174      	b.n	8016d8a <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8016aa0:	f001 f992 	bl	8017dc8 <LoRaMacConfirmQueueIsFull>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d001      	beq.n	8016aae <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8016aaa:	2301      	movs	r3, #1
 8016aac:	e16d      	b.n	8016d8a <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8016aae:	f001 f97f 	bl	8017db0 <LoRaMacConfirmQueueGetCnt>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d104      	bne.n	8016ac2 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8016ab8:	2214      	movs	r2, #20
 8016aba:	2100      	movs	r1, #0
 8016abc:	48b5      	ldr	r0, [pc, #724]	; (8016d94 <LoRaMacMlmeRequest+0x324>)
 8016abe:	f004 ff73 	bl	801b9a8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016ac2:	4bb5      	ldr	r3, [pc, #724]	; (8016d98 <LoRaMacMlmeRequest+0x328>)
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8016aca:	4ab3      	ldr	r2, [pc, #716]	; (8016d98 <LoRaMacMlmeRequest+0x328>)
 8016acc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016ad0:	f043 0304 	orr.w	r3, r3, #4
 8016ad4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	781b      	ldrb	r3, [r3, #0]
 8016adc:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8016aec:	2300      	movs	r3, #0
 8016aee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	781b      	ldrb	r3, [r3, #0]
 8016af6:	3b01      	subs	r3, #1
 8016af8:	2b0c      	cmp	r3, #12
 8016afa:	f200 811a 	bhi.w	8016d32 <LoRaMacMlmeRequest+0x2c2>
 8016afe:	a201      	add	r2, pc, #4	; (adr r2, 8016b04 <LoRaMacMlmeRequest+0x94>)
 8016b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b04:	08016b39 	.word	0x08016b39
 8016b08:	08016d33 	.word	0x08016d33
 8016b0c:	08016d33 	.word	0x08016d33
 8016b10:	08016d33 	.word	0x08016d33
 8016b14:	08016c17 	.word	0x08016c17
 8016b18:	08016c3b 	.word	0x08016c3b
 8016b1c:	08016d33 	.word	0x08016d33
 8016b20:	08016d33 	.word	0x08016d33
 8016b24:	08016c59 	.word	0x08016c59
 8016b28:	08016d33 	.word	0x08016d33
 8016b2c:	08016d01 	.word	0x08016d01
 8016b30:	08016c95 	.word	0x08016c95
 8016b34:	08016cdf 	.word	0x08016cdf
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8016b38:	4b97      	ldr	r3, [pc, #604]	; (8016d98 <LoRaMacMlmeRequest+0x328>)
 8016b3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8016b3e:	f003 0320 	and.w	r3, r3, #32
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d001      	beq.n	8016b4a <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8016b46:	2301      	movs	r3, #1
 8016b48:	e11f      	b.n	8016d8a <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	791b      	ldrb	r3, [r3, #4]
 8016b4e:	2b02      	cmp	r3, #2
 8016b50:	d135      	bne.n	8016bbe <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8016b52:	2000      	movs	r0, #0
 8016b54:	f7fe f8b4 	bl	8014cc0 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8016b58:	4b90      	ldr	r3, [pc, #576]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016b5a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	795b      	ldrb	r3, [r3, #5]
 8016b62:	b25b      	sxtb	r3, r3
 8016b64:	2200      	movs	r2, #0
 8016b66:	4619      	mov	r1, r3
 8016b68:	f002 fc4e 	bl	8019408 <RegionAlternateDr>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	461a      	mov	r2, r3
 8016b70:	4b8a      	ldr	r3, [pc, #552]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8016b7c:	4b87      	ldr	r3, [pc, #540]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8016b82:	2307      	movs	r3, #7
 8016b84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8016b88:	20ff      	movs	r0, #255	; 0xff
 8016b8a:	f7fd fe1d 	bl	80147c8 <SendReJoinReq>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8016b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	f000 80cc 	beq.w	8016d36 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8016b9e:	4b7f      	ldr	r3, [pc, #508]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016ba0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	795b      	ldrb	r3, [r3, #5]
 8016ba8:	b25b      	sxtb	r3, r3
 8016baa:	2201      	movs	r2, #1
 8016bac:	4619      	mov	r1, r3
 8016bae:	f002 fc2b 	bl	8019408 <RegionAlternateDr>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	4b79      	ldr	r3, [pc, #484]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8016bbc:	e0bb      	b.n	8016d36 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	791b      	ldrb	r3, [r3, #4]
 8016bc2:	2b01      	cmp	r3, #1
 8016bc4:	f040 80b7 	bne.w	8016d36 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8016bc8:	4b74      	ldr	r3, [pc, #464]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016bca:	2200      	movs	r2, #0
 8016bcc:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8016bd0:	2302      	movs	r3, #2
 8016bd2:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8016bd4:	4b71      	ldr	r3, [pc, #452]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016bd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016bda:	f107 020c 	add.w	r2, r7, #12
 8016bde:	4611      	mov	r1, r2
 8016be0:	4618      	mov	r0, r3
 8016be2:	f002 fb17 	bl	8019214 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	791a      	ldrb	r2, [r3, #4]
 8016bea:	4b6c      	ldr	r3, [pc, #432]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016bec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8016bfc:	f7fe fdb2 	bl	8015764 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8016c00:	4a65      	ldr	r2, [pc, #404]	; (8016d98 <LoRaMacMlmeRequest+0x328>)
 8016c02:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016c06:	f043 0310 	orr.w	r3, r3, #16
 8016c0a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016c14:	e08f      	b.n	8016d36 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016c16:	2300      	movs	r3, #0
 8016c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016c1c:	f107 031c 	add.w	r3, r7, #28
 8016c20:	2200      	movs	r2, #0
 8016c22:	4619      	mov	r1, r3
 8016c24:	2002      	movs	r0, #2
 8016c26:	f000 fd1f 	bl	8017668 <LoRaMacCommandsAddCmd>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	f000 8084 	beq.w	8016d3a <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016c32:	2313      	movs	r3, #19
 8016c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8016c38:	e07f      	b.n	8016d3a <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	8898      	ldrh	r0, [r3, #4]
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	6899      	ldr	r1, [r3, #8]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016c48:	b2db      	uxtb	r3, r3
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	f7fe fbba 	bl	80153c4 <SetTxContinuousWave>
 8016c50:	4603      	mov	r3, r0
 8016c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016c56:	e077      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8016c5e:	f107 0308 	add.w	r3, r7, #8
 8016c62:	4619      	mov	r1, r3
 8016c64:	200d      	movs	r0, #13
 8016c66:	f000 fd7f 	bl	8017768 <LoRaMacCommandsGetCmd>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d103      	bne.n	8016c78 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8016c70:	2300      	movs	r3, #0
 8016c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8016c76:	e062      	b.n	8016d3e <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016c78:	f107 031c 	add.w	r3, r7, #28
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	4619      	mov	r1, r3
 8016c80:	200d      	movs	r0, #13
 8016c82:	f000 fcf1 	bl	8017668 <LoRaMacCommandsAddCmd>
 8016c86:	4603      	mov	r3, r0
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d058      	beq.n	8016d3e <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016c8c:	2313      	movs	r3, #19
 8016c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016c92:	e054      	b.n	8016d3e <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8016c94:	4b41      	ldr	r3, [pc, #260]	; (8016d9c <LoRaMacMlmeRequest+0x32c>)
 8016c96:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d151      	bne.n	8016d42 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	791b      	ldrb	r3, [r3, #4]
 8016ca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	791b      	ldrb	r3, [r3, #4]
 8016caa:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016cae:	b2db      	uxtb	r3, r3
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f000 fb25 	bl	8017300 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8016cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cba:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8016cc2:	f107 031c 	add.w	r3, r7, #28
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	4619      	mov	r1, r3
 8016cca:	2010      	movs	r0, #16
 8016ccc:	f000 fccc 	bl	8017668 <LoRaMacCommandsAddCmd>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d035      	beq.n	8016d42 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016cd6:	2313      	movs	r3, #19
 8016cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8016cdc:	e031      	b.n	8016d42 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016ce4:	f107 031c 	add.w	r3, r7, #28
 8016ce8:	2200      	movs	r2, #0
 8016cea:	4619      	mov	r1, r3
 8016cec:	2012      	movs	r0, #18
 8016cee:	f000 fcbb 	bl	8017668 <LoRaMacCommandsAddCmd>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d026      	beq.n	8016d46 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016cf8:	2313      	movs	r3, #19
 8016cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8016cfe:	e022      	b.n	8016d46 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8016d00:	2301      	movs	r3, #1
 8016d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8016d06:	f000 fab1 	bl	801726c <LoRaMacClassBIsAcquisitionInProgress>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	f083 0301 	eor.w	r3, r3, #1
 8016d10:	b2db      	uxtb	r3, r3
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d009      	beq.n	8016d2a <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8016d16:	2000      	movs	r0, #0
 8016d18:	f000 fa8a 	bl	8017230 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8016d1c:	2000      	movs	r0, #0
 8016d1e:	f000 faac 	bl	801727a <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8016d22:	2300      	movs	r3, #0
 8016d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8016d28:	e00e      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016d30:	e00a      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8016d32:	bf00      	nop
 8016d34:	e008      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016d36:	bf00      	nop
 8016d38:	e006      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016d3a:	bf00      	nop
 8016d3c:	e004      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016d3e:	bf00      	nop
 8016d40:	e002      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016d42:	bf00      	nop
 8016d44:	e000      	b.n	8016d48 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016d46:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8016d48:	4b13      	ldr	r3, [pc, #76]	; (8016d98 <LoRaMacMlmeRequest+0x328>)
 8016d4a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8016d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d010      	beq.n	8016d7c <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8016d5a:	f001 f829 	bl	8017db0 <LoRaMacConfirmQueueGetCnt>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d110      	bne.n	8016d86 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8016d64:	4b0c      	ldr	r3, [pc, #48]	; (8016d98 <LoRaMacMlmeRequest+0x328>)
 8016d66:	2200      	movs	r2, #0
 8016d68:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8016d6c:	4a0a      	ldr	r2, [pc, #40]	; (8016d98 <LoRaMacMlmeRequest+0x328>)
 8016d6e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016d72:	f36f 0382 	bfc	r3, #2, #1
 8016d76:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8016d7a:	e004      	b.n	8016d86 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8016d7c:	f107 0320 	add.w	r3, r7, #32
 8016d80:	4618      	mov	r0, r3
 8016d82:	f000 fec1 	bl	8017b08 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8016d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3728      	adds	r7, #40	; 0x28
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	20000d80 	.word	0x20000d80
 8016d98:	2000092c 	.word	0x2000092c
 8016d9c:	20000e48 	.word	0x20000e48

08016da0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8016da0:	b5b0      	push	{r4, r5, r7, lr}
 8016da2:	b092      	sub	sp, #72	; 0x48
 8016da4:	af02      	add	r7, sp, #8
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	460b      	mov	r3, r1
 8016daa:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016dac:	2302      	movs	r3, #2
 8016dae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8016db2:	2300      	movs	r3, #0
 8016db4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8016db8:	2300      	movs	r3, #0
 8016dba:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d101      	bne.n	8016dd2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016dce:	2303      	movs	r3, #3
 8016dd0:	e113      	b.n	8016ffa <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8016dd8:	f7fc f9e2 	bl	80131a0 <LoRaMacIsBusy>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d001      	beq.n	8016de6 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8016de2:	2301      	movs	r3, #1
 8016de4:	e109      	b.n	8016ffa <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	f107 040c 	add.w	r4, r7, #12
 8016dec:	461d      	mov	r5, r3
 8016dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016df2:	682b      	ldr	r3, [r5, #0]
 8016df4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8016dfc:	2214      	movs	r2, #20
 8016dfe:	2100      	movs	r1, #0
 8016e00:	4880      	ldr	r0, [pc, #512]	; (8017004 <LoRaMacMcpsRequest+0x264>)
 8016e02:	f004 fdd1 	bl	801b9a8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016e06:	4b80      	ldr	r3, [pc, #512]	; (8017008 <LoRaMacMcpsRequest+0x268>)
 8016e08:	2201      	movs	r2, #1
 8016e0a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8016e0e:	4b7f      	ldr	r3, [pc, #508]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016e10:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8016e14:	2b02      	cmp	r3, #2
 8016e16:	d111      	bne.n	8016e3c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8016e18:	4b7c      	ldr	r3, [pc, #496]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016e1a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8016e1e:	2b02      	cmp	r3, #2
 8016e20:	d10c      	bne.n	8016e3c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8016e22:	4b7a      	ldr	r3, [pc, #488]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016e24:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8016e28:	f083 0301 	eor.w	r3, r3, #1
 8016e2c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d004      	beq.n	8016e3c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8016e32:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d101      	bne.n	8016e3c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8016e3c:	7b3b      	ldrb	r3, [r7, #12]
 8016e3e:	2b03      	cmp	r3, #3
 8016e40:	d030      	beq.n	8016ea4 <LoRaMacMcpsRequest+0x104>
 8016e42:	2b03      	cmp	r3, #3
 8016e44:	dc3f      	bgt.n	8016ec6 <LoRaMacMcpsRequest+0x126>
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d002      	beq.n	8016e50 <LoRaMacMcpsRequest+0xb0>
 8016e4a:	2b01      	cmp	r3, #1
 8016e4c:	d015      	beq.n	8016e7a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8016e4e:	e03a      	b.n	8016ec6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8016e50:	2301      	movs	r3, #1
 8016e52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8016e56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016e5a:	2202      	movs	r2, #2
 8016e5c:	f362 1347 	bfi	r3, r2, #5, #3
 8016e60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8016e64:	7c3b      	ldrb	r3, [r7, #16]
 8016e66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8016e6a:	697b      	ldr	r3, [r7, #20]
 8016e6c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8016e6e:	8b3b      	ldrh	r3, [r7, #24]
 8016e70:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8016e72:	7ebb      	ldrb	r3, [r7, #26]
 8016e74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016e78:	e026      	b.n	8016ec8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8016e80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016e84:	2204      	movs	r2, #4
 8016e86:	f362 1347 	bfi	r3, r2, #5, #3
 8016e8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8016e8e:	7c3b      	ldrb	r3, [r7, #16]
 8016e90:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8016e94:	697b      	ldr	r3, [r7, #20]
 8016e96:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8016e98:	8b3b      	ldrh	r3, [r7, #24]
 8016e9a:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8016e9c:	7ebb      	ldrb	r3, [r7, #26]
 8016e9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016ea2:	e011      	b.n	8016ec8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8016eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016eae:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8016eb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8016eba:	8abb      	ldrh	r3, [r7, #20]
 8016ebc:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8016ebe:	7dbb      	ldrb	r3, [r7, #22]
 8016ec0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016ec4:	e000      	b.n	8016ec8 <LoRaMacMcpsRequest+0x128>
            break;
 8016ec6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016ec8:	2302      	movs	r3, #2
 8016eca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016ece:	4b4f      	ldr	r3, [pc, #316]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016ed0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016ed4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016ed8:	4b4c      	ldr	r3, [pc, #304]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016eda:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016ede:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016ee2:	4611      	mov	r1, r2
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f002 f96c 	bl	80191c2 <RegionGetPhyParam>
 8016eea:	4603      	mov	r3, r0
 8016eec:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8016eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef0:	b25b      	sxtb	r3, r3
 8016ef2:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8016ef6:	4293      	cmp	r3, r2
 8016ef8:	bfb8      	it	lt
 8016efa:	4613      	movlt	r3, r2
 8016efc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8016f00:	4b42      	ldr	r3, [pc, #264]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f02:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016f06:	4a41      	ldr	r2, [pc, #260]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f08:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8016f0c:	4a3f      	ldr	r2, [pc, #252]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f0e:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7fc fae0 	bl	80134d8 <CheckForMinimumAbpDatarate>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d002      	beq.n	8016f24 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8016f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8016f24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d05f      	beq.n	8016fec <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8016f2c:	4b37      	ldr	r3, [pc, #220]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f2e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016f32:	f083 0301 	eor.w	r3, r3, #1
 8016f36:	b2db      	uxtb	r3, r3
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d10e      	bne.n	8016f5a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8016f3c:	4b33      	ldr	r3, [pc, #204]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f3e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016f42:	4a32      	ldr	r2, [pc, #200]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f44:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8016f48:	4a30      	ldr	r2, [pc, #192]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f4a:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f7fc fac2 	bl	80134d8 <CheckForMinimumAbpDatarate>
 8016f54:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d01c      	beq.n	8016f94 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8016f5a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016f5e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016f62:	4b2a      	ldr	r3, [pc, #168]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8016f6c:	4b27      	ldr	r3, [pc, #156]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016f72:	f107 0120 	add.w	r1, r7, #32
 8016f76:	2205      	movs	r2, #5
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f002 f95d 	bl	8019238 <RegionVerify>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d005      	beq.n	8016f90 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8016f84:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8016f88:	4b20      	ldr	r3, [pc, #128]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8016f8e:	e001      	b.n	8016f94 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8016f90:	2303      	movs	r3, #3
 8016f92:	e032      	b.n	8016ffa <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8016f94:	4b1d      	ldr	r3, [pc, #116]	; (801700c <LoRaMacMcpsRequest+0x26c>)
 8016f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f9a:	4a1b      	ldr	r2, [pc, #108]	; (8017008 <LoRaMacMcpsRequest+0x268>)
 8016f9c:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8016fa0:	4611      	mov	r1, r2
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7fc fb84 	bl	80136b0 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8016fa8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016faa:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8016fae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016fb2:	78fb      	ldrb	r3, [r7, #3]
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	4613      	mov	r3, r2
 8016fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016fba:	f7fd fb23 	bl	8014604 <Send>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8016fc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d10b      	bne.n	8016fe4 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8016fcc:	7b3a      	ldrb	r2, [r7, #12]
 8016fce:	4b0e      	ldr	r3, [pc, #56]	; (8017008 <LoRaMacMcpsRequest+0x268>)
 8016fd0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8016fd4:	4a0c      	ldr	r2, [pc, #48]	; (8017008 <LoRaMacMcpsRequest+0x268>)
 8016fd6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016fda:	f043 0301 	orr.w	r3, r3, #1
 8016fde:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8016fe2:	e003      	b.n	8016fec <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8016fe4:	4b08      	ldr	r3, [pc, #32]	; (8017008 <LoRaMacMcpsRequest+0x268>)
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8016fec:	4b06      	ldr	r3, [pc, #24]	; (8017008 <LoRaMacMcpsRequest+0x268>)
 8016fee:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	611a      	str	r2, [r3, #16]

    return status;
 8016ff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3740      	adds	r7, #64	; 0x40
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bdb0      	pop	{r4, r5, r7, pc}
 8017002:	bf00      	nop
 8017004:	20000d6c 	.word	0x20000d6c
 8017008:	2000092c 	.word	0x2000092c
 801700c:	20000e48 	.word	0x20000e48

08017010 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	4603      	mov	r3, r0
 8017018:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801701a:	79fb      	ldrb	r3, [r7, #7]
 801701c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801701e:	4b0d      	ldr	r3, [pc, #52]	; (8017054 <LoRaMacTestSetDutyCycleOn+0x44>)
 8017020:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017024:	f107 010c 	add.w	r1, r7, #12
 8017028:	220f      	movs	r2, #15
 801702a:	4618      	mov	r0, r3
 801702c:	f002 f904 	bl	8019238 <RegionVerify>
 8017030:	4603      	mov	r3, r0
 8017032:	2b00      	cmp	r3, #0
 8017034:	d00a      	beq.n	801704c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8017036:	4a07      	ldr	r2, [pc, #28]	; (8017054 <LoRaMacTestSetDutyCycleOn+0x44>)
 8017038:	79fb      	ldrb	r3, [r7, #7]
 801703a:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801703e:	4a06      	ldr	r2, [pc, #24]	; (8017058 <LoRaMacTestSetDutyCycleOn+0x48>)
 8017040:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8017044:	f043 0320 	orr.w	r3, r3, #32
 8017048:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 801704c:	bf00      	nop
 801704e:	3710      	adds	r7, #16
 8017050:	46bd      	mov	sp, r7
 8017052:	bd80      	pop	{r7, pc}
 8017054:	20000e48 	.word	0x20000e48
 8017058:	2000092c 	.word	0x2000092c

0801705c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801705c:	b580      	push	{r7, lr}
 801705e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8017060:	f7fe fe94 	bl	8015d8c <LoRaMacStop>
 8017064:	4603      	mov	r3, r0
 8017066:	2b00      	cmp	r3, #0
 8017068:	d112      	bne.n	8017090 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801706a:	480b      	ldr	r0, [pc, #44]	; (8017098 <LoRaMacDeInitialization+0x3c>)
 801706c:	f008 fe1e 	bl	801fcac <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8017070:	480a      	ldr	r0, [pc, #40]	; (801709c <LoRaMacDeInitialization+0x40>)
 8017072:	f008 fe1b 	bl	801fcac <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8017076:	480a      	ldr	r0, [pc, #40]	; (80170a0 <LoRaMacDeInitialization+0x44>)
 8017078:	f008 fe18 	bl	801fcac <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801707c:	f000 f94a 	bl	8017314 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8017080:	2000      	movs	r0, #0
 8017082:	f7fd fe1d 	bl	8014cc0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8017086:	4b07      	ldr	r3, [pc, #28]	; (80170a4 <LoRaMacDeInitialization+0x48>)
 8017088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801708a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801708c:	2300      	movs	r3, #0
 801708e:	e000      	b.n	8017092 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8017090:	2301      	movs	r3, #1
    }
}
 8017092:	4618      	mov	r0, r3
 8017094:	bd80      	pop	{r7, pc}
 8017096:	bf00      	nop
 8017098:	20000c94 	.word	0x20000c94
 801709c:	20000cac 	.word	0x20000cac
 80170a0:	20000cc4 	.word	0x20000cc4
 80170a4:	08021f14 	.word	0x08021f14

080170a8 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b08c      	sub	sp, #48	; 0x30
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
 80170b4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80170b6:	2300      	movs	r3, #0
 80170b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	7b1b      	ldrb	r3, [r3, #12]
 80170c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	7b5b      	ldrb	r3, [r3, #13]
 80170c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	7b9b      	ldrb	r3, [r3, #14]
 80170d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	685a      	ldr	r2, [r3, #4]
 80170d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170da:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	785b      	ldrb	r3, [r3, #1]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f000 8088 	beq.w	80171f6 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80170e6:	2302      	movs	r3, #2
 80170e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	7bdb      	ldrb	r3, [r3, #15]
 80170f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	7c1b      	ldrb	r3, [r3, #16]
 80170f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80170fc:	4611      	mov	r1, r2
 80170fe:	4618      	mov	r0, r3
 8017100:	f002 f85f 	bl	80191c2 <RegionGetPhyParam>
 8017104:	4603      	mov	r3, r0
 8017106:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8017108:	6a3b      	ldr	r3, [r7, #32]
 801710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801710e:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8017112:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8017116:	4293      	cmp	r3, r2
 8017118:	bfb8      	it	lt
 801711a:	4613      	movlt	r3, r2
 801711c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	685b      	ldr	r3, [r3, #4]
 8017124:	68fa      	ldr	r2, [r7, #12]
 8017126:	8912      	ldrh	r2, [r2, #8]
 8017128:	4293      	cmp	r3, r2
 801712a:	d302      	bcc.n	8017132 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 801712c:	2301      	movs	r3, #1
 801712e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	68fa      	ldr	r2, [r7, #12]
 8017138:	8912      	ldrh	r2, [r2, #8]
 801713a:	4611      	mov	r1, r2
 801713c:	68fa      	ldr	r2, [r7, #12]
 801713e:	8952      	ldrh	r2, [r2, #10]
 8017140:	440a      	add	r2, r1
 8017142:	4293      	cmp	r3, r2
 8017144:	d30f      	bcc.n	8017166 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8017146:	230a      	movs	r3, #10
 8017148:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	7c1b      	ldrb	r3, [r3, #16]
 8017150:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017154:	4611      	mov	r1, r2
 8017156:	4618      	mov	r0, r3
 8017158:	f002 f833 	bl	80191c2 <RegionGetPhyParam>
 801715c:	4603      	mov	r3, r0
 801715e:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8017160:	6a3b      	ldr	r3, [r7, #32]
 8017162:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	68fa      	ldr	r2, [r7, #12]
 801716c:	8912      	ldrh	r2, [r2, #8]
 801716e:	4611      	mov	r1, r2
 8017170:	68fa      	ldr	r2, [r7, #12]
 8017172:	8952      	ldrh	r2, [r2, #10]
 8017174:	0052      	lsls	r2, r2, #1
 8017176:	440a      	add	r2, r1
 8017178:	4293      	cmp	r3, r2
 801717a:	d33c      	bcc.n	80171f6 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	68fa      	ldr	r2, [r7, #12]
 8017182:	8912      	ldrh	r2, [r2, #8]
 8017184:	1a9b      	subs	r3, r3, r2
 8017186:	68fa      	ldr	r2, [r7, #12]
 8017188:	8952      	ldrh	r2, [r2, #10]
 801718a:	fbb3 f1f2 	udiv	r1, r3, r2
 801718e:	fb01 f202 	mul.w	r2, r1, r2
 8017192:	1a9b      	subs	r3, r3, r2
 8017194:	2b00      	cmp	r3, #0
 8017196:	d12e      	bne.n	80171f6 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8017198:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801719c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d110      	bne.n	80171c6 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d009      	beq.n	80171c0 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80171ac:	2302      	movs	r3, #2
 80171ae:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	7c1b      	ldrb	r3, [r3, #16]
 80171b4:	f107 0210 	add.w	r2, r7, #16
 80171b8:	4611      	mov	r1, r2
 80171ba:	4618      	mov	r0, r3
 80171bc:	f002 f82a 	bl	8019214 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80171c0:	2301      	movs	r3, #1
 80171c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80171c6:	2321      	movs	r3, #33	; 0x21
 80171c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80171cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80171d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	7bdb      	ldrb	r3, [r3, #15]
 80171d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	7c1b      	ldrb	r3, [r3, #16]
 80171e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80171e4:	4611      	mov	r1, r2
 80171e6:	4618      	mov	r0, r3
 80171e8:	f001 ffeb 	bl	80191c2 <RegionGetPhyParam>
 80171ec:	4603      	mov	r3, r0
 80171ee:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80171f0:	6a3b      	ldr	r3, [r7, #32]
 80171f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80171f6:	68bb      	ldr	r3, [r7, #8]
 80171f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80171fc:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8017204:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8017206:	683b      	ldr	r3, [r7, #0]
 8017208:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801720c:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801720e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8017212:	4618      	mov	r0, r3
 8017214:	3730      	adds	r7, #48	; 0x30
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}

0801721a <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801721a:	b480      	push	{r7}
 801721c:	b085      	sub	sp, #20
 801721e:	af00      	add	r7, sp, #0
 8017220:	60f8      	str	r0, [r7, #12]
 8017222:	60b9      	str	r1, [r7, #8]
 8017224:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017226:	bf00      	nop
 8017228:	3714      	adds	r7, #20
 801722a:	46bd      	mov	sp, r7
 801722c:	bc80      	pop	{r7}
 801722e:	4770      	bx	lr

08017230 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8017230:	b480      	push	{r7}
 8017232:	b083      	sub	sp, #12
 8017234:	af00      	add	r7, sp, #0
 8017236:	4603      	mov	r3, r0
 8017238:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801723a:	bf00      	nop
 801723c:	370c      	adds	r7, #12
 801723e:	46bd      	mov	sp, r7
 8017240:	bc80      	pop	{r7}
 8017242:	4770      	bx	lr

08017244 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
 801724a:	4603      	mov	r3, r0
 801724c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801724e:	bf00      	nop
 8017250:	370c      	adds	r7, #12
 8017252:	46bd      	mov	sp, r7
 8017254:	bc80      	pop	{r7}
 8017256:	4770      	bx	lr

08017258 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
 801725e:	4603      	mov	r3, r0
 8017260:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017262:	bf00      	nop
 8017264:	370c      	adds	r7, #12
 8017266:	46bd      	mov	sp, r7
 8017268:	bc80      	pop	{r7}
 801726a:	4770      	bx	lr

0801726c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801726c:	b480      	push	{r7}
 801726e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8017270:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017272:	4618      	mov	r0, r3
 8017274:	46bd      	mov	sp, r7
 8017276:	bc80      	pop	{r7}
 8017278:	4770      	bx	lr

0801727a <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801727a:	b480      	push	{r7}
 801727c:	b083      	sub	sp, #12
 801727e:	af00      	add	r7, sp, #0
 8017280:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017282:	bf00      	nop
 8017284:	370c      	adds	r7, #12
 8017286:	46bd      	mov	sp, r7
 8017288:	bc80      	pop	{r7}
 801728a:	4770      	bx	lr

0801728c <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801728c:	b480      	push	{r7}
 801728e:	b083      	sub	sp, #12
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017294:	bf00      	nop
 8017296:	370c      	adds	r7, #12
 8017298:	46bd      	mov	sp, r7
 801729a:	bc80      	pop	{r7}
 801729c:	4770      	bx	lr

0801729e <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801729e:	b480      	push	{r7}
 80172a0:	b083      	sub	sp, #12
 80172a2:	af00      	add	r7, sp, #0
 80172a4:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172a6:	bf00      	nop
 80172a8:	370c      	adds	r7, #12
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bc80      	pop	{r7}
 80172ae:	4770      	bx	lr

080172b0 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80172b0:	b480      	push	{r7}
 80172b2:	b083      	sub	sp, #12
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	460b      	mov	r3, r1
 80172ba:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80172bc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172be:	4618      	mov	r0, r3
 80172c0:	370c      	adds	r7, #12
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bc80      	pop	{r7}
 80172c6:	4770      	bx	lr

080172c8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80172c8:	b480      	push	{r7}
 80172ca:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80172cc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172ce:	4618      	mov	r0, r3
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bc80      	pop	{r7}
 80172d4:	4770      	bx	lr

080172d6 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80172d6:	b480      	push	{r7}
 80172d8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80172da:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172dc:	4618      	mov	r0, r3
 80172de:	46bd      	mov	sp, r7
 80172e0:	bc80      	pop	{r7}
 80172e2:	4770      	bx	lr

080172e4 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80172e4:	b480      	push	{r7}
 80172e6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80172e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172ea:	4618      	mov	r0, r3
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bc80      	pop	{r7}
 80172f0:	4770      	bx	lr

080172f2 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80172f2:	b480      	push	{r7}
 80172f4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80172f6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bc80      	pop	{r7}
 80172fe:	4770      	bx	lr

08017300 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8017300:	b480      	push	{r7}
 8017302:	b083      	sub	sp, #12
 8017304:	af00      	add	r7, sp, #0
 8017306:	4603      	mov	r3, r0
 8017308:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801730a:	bf00      	nop
 801730c:	370c      	adds	r7, #12
 801730e:	46bd      	mov	sp, r7
 8017310:	bc80      	pop	{r7}
 8017312:	4770      	bx	lr

08017314 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8017314:	b480      	push	{r7}
 8017316:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017318:	bf00      	nop
 801731a:	46bd      	mov	sp, r7
 801731c:	bc80      	pop	{r7}
 801731e:	4770      	bx	lr

08017320 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8017320:	b480      	push	{r7}
 8017322:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017324:	bf00      	nop
 8017326:	46bd      	mov	sp, r7
 8017328:	bc80      	pop	{r7}
 801732a:	4770      	bx	lr

0801732c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801732c:	b480      	push	{r7}
 801732e:	b083      	sub	sp, #12
 8017330:	af00      	add	r7, sp, #0
 8017332:	4603      	mov	r3, r0
 8017334:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017336:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017338:	4618      	mov	r0, r3
 801733a:	370c      	adds	r7, #12
 801733c:	46bd      	mov	sp, r7
 801733e:	bc80      	pop	{r7}
 8017340:	4770      	bx	lr

08017342 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8017342:	b480      	push	{r7}
 8017344:	b083      	sub	sp, #12
 8017346:	af00      	add	r7, sp, #0
 8017348:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801734a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801734c:	4618      	mov	r0, r3
 801734e:	370c      	adds	r7, #12
 8017350:	46bd      	mov	sp, r7
 8017352:	bc80      	pop	{r7}
 8017354:	4770      	bx	lr

08017356 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8017356:	b480      	push	{r7}
 8017358:	b083      	sub	sp, #12
 801735a:	af00      	add	r7, sp, #0
 801735c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801735e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017360:	4618      	mov	r0, r3
 8017362:	370c      	adds	r7, #12
 8017364:	46bd      	mov	sp, r7
 8017366:	bc80      	pop	{r7}
 8017368:	4770      	bx	lr

0801736a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801736a:	b480      	push	{r7}
 801736c:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801736e:	bf00      	nop
 8017370:	46bd      	mov	sp, r7
 8017372:	bc80      	pop	{r7}
 8017374:	4770      	bx	lr

08017376 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8017376:	b480      	push	{r7}
 8017378:	b083      	sub	sp, #12
 801737a:	af00      	add	r7, sp, #0
 801737c:	4603      	mov	r3, r0
 801737e:	6039      	str	r1, [r7, #0]
 8017380:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8017382:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017384:	4618      	mov	r0, r3
 8017386:	370c      	adds	r7, #12
 8017388:	46bd      	mov	sp, r7
 801738a:	bc80      	pop	{r7}
 801738c:	4770      	bx	lr

0801738e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801738e:	b480      	push	{r7}
 8017390:	b083      	sub	sp, #12
 8017392:	af00      	add	r7, sp, #0
 8017394:	4603      	mov	r3, r0
 8017396:	603a      	str	r2, [r7, #0]
 8017398:	80fb      	strh	r3, [r7, #6]
 801739a:	460b      	mov	r3, r1
 801739c:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801739e:	bf00      	nop
 80173a0:	370c      	adds	r7, #12
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bc80      	pop	{r7}
 80173a6:	4770      	bx	lr

080173a8 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80173a8:	b480      	push	{r7}
 80173aa:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80173ac:	bf00      	nop
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bc80      	pop	{r7}
 80173b2:	4770      	bx	lr

080173b4 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80173bc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80173be:	4618      	mov	r0, r3
 80173c0:	370c      	adds	r7, #12
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bc80      	pop	{r7}
 80173c6:	4770      	bx	lr

080173c8 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80173c8:	b480      	push	{r7}
 80173ca:	b083      	sub	sp, #12
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80173d0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	370c      	adds	r7, #12
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bc80      	pop	{r7}
 80173da:	4770      	bx	lr

080173dc <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80173dc:	b480      	push	{r7}
 80173de:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80173e0:	bf00      	nop
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bc80      	pop	{r7}
 80173e6:	4770      	bx	lr

080173e8 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80173e8:	b480      	push	{r7}
 80173ea:	b083      	sub	sp, #12
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	460b      	mov	r3, r1
 80173f2:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80173f4:	bf00      	nop
 80173f6:	370c      	adds	r7, #12
 80173f8:	46bd      	mov	sp, r7
 80173fa:	bc80      	pop	{r7}
 80173fc:	4770      	bx	lr

080173fe <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80173fe:	b480      	push	{r7}
 8017400:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017402:	bf00      	nop
 8017404:	46bd      	mov	sp, r7
 8017406:	bc80      	pop	{r7}
 8017408:	4770      	bx	lr

0801740a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801740a:	b480      	push	{r7}
 801740c:	b085      	sub	sp, #20
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8017416:	2300      	movs	r3, #0
 8017418:	81fb      	strh	r3, [r7, #14]
 801741a:	e00a      	b.n	8017432 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801741c:	89fb      	ldrh	r3, [r7, #14]
 801741e:	68ba      	ldr	r2, [r7, #8]
 8017420:	4413      	add	r3, r2
 8017422:	781b      	ldrb	r3, [r3, #0]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d001      	beq.n	801742c <IsSlotFree+0x22>
        {
            return false;
 8017428:	2300      	movs	r3, #0
 801742a:	e006      	b.n	801743a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801742c:	89fb      	ldrh	r3, [r7, #14]
 801742e:	3301      	adds	r3, #1
 8017430:	81fb      	strh	r3, [r7, #14]
 8017432:	89fb      	ldrh	r3, [r7, #14]
 8017434:	2b0f      	cmp	r3, #15
 8017436:	d9f1      	bls.n	801741c <IsSlotFree+0x12>
        }
    }
    return true;
 8017438:	2301      	movs	r3, #1
}
 801743a:	4618      	mov	r0, r3
 801743c:	3714      	adds	r7, #20
 801743e:	46bd      	mov	sp, r7
 8017440:	bc80      	pop	{r7}
 8017442:	4770      	bx	lr

08017444 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801744a:	2300      	movs	r3, #0
 801744c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801744e:	e007      	b.n	8017460 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8017450:	79fb      	ldrb	r3, [r7, #7]
 8017452:	3301      	adds	r3, #1
 8017454:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8017456:	79fb      	ldrb	r3, [r7, #7]
 8017458:	2b20      	cmp	r3, #32
 801745a:	d101      	bne.n	8017460 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801745c:	2300      	movs	r3, #0
 801745e:	e012      	b.n	8017486 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017460:	79fb      	ldrb	r3, [r7, #7]
 8017462:	011b      	lsls	r3, r3, #4
 8017464:	3308      	adds	r3, #8
 8017466:	4a0a      	ldr	r2, [pc, #40]	; (8017490 <MallocNewMacCommandSlot+0x4c>)
 8017468:	4413      	add	r3, r2
 801746a:	4618      	mov	r0, r3
 801746c:	f7ff ffcd 	bl	801740a <IsSlotFree>
 8017470:	4603      	mov	r3, r0
 8017472:	f083 0301 	eor.w	r3, r3, #1
 8017476:	b2db      	uxtb	r3, r3
 8017478:	2b00      	cmp	r3, #0
 801747a:	d1e9      	bne.n	8017450 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801747c:	79fb      	ldrb	r3, [r7, #7]
 801747e:	011b      	lsls	r3, r3, #4
 8017480:	3308      	adds	r3, #8
 8017482:	4a03      	ldr	r2, [pc, #12]	; (8017490 <MallocNewMacCommandSlot+0x4c>)
 8017484:	4413      	add	r3, r2
}
 8017486:	4618      	mov	r0, r3
 8017488:	3708      	adds	r7, #8
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	20001a88 	.word	0x20001a88

08017494 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d101      	bne.n	80174a6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80174a2:	2300      	movs	r3, #0
 80174a4:	e005      	b.n	80174b2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80174a6:	2210      	movs	r2, #16
 80174a8:	2100      	movs	r1, #0
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f004 fa7c 	bl	801b9a8 <memset1>

    return true;
 80174b0:	2301      	movs	r3, #1
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	3708      	adds	r7, #8
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}

080174ba <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80174ba:	b480      	push	{r7}
 80174bc:	b083      	sub	sp, #12
 80174be:	af00      	add	r7, sp, #0
 80174c0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d101      	bne.n	80174cc <LinkedListInit+0x12>
    {
        return false;
 80174c8:	2300      	movs	r3, #0
 80174ca:	e006      	b.n	80174da <LinkedListInit+0x20>
    }

    list->First = NULL;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2200      	movs	r2, #0
 80174d0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	2200      	movs	r2, #0
 80174d6:	605a      	str	r2, [r3, #4]

    return true;
 80174d8:	2301      	movs	r3, #1
}
 80174da:	4618      	mov	r0, r3
 80174dc:	370c      	adds	r7, #12
 80174de:	46bd      	mov	sp, r7
 80174e0:	bc80      	pop	{r7}
 80174e2:	4770      	bx	lr

080174e4 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d002      	beq.n	80174fa <LinkedListAdd+0x16>
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d101      	bne.n	80174fe <LinkedListAdd+0x1a>
    {
        return false;
 80174fa:	2300      	movs	r3, #0
 80174fc:	e015      	b.n	801752a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d102      	bne.n	801750c <LinkedListAdd+0x28>
    {
        list->First = element;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	683a      	ldr	r2, [r7, #0]
 801750a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	685b      	ldr	r3, [r3, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d003      	beq.n	801751c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	685b      	ldr	r3, [r3, #4]
 8017518:	683a      	ldr	r2, [r7, #0]
 801751a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801751c:	683b      	ldr	r3, [r7, #0]
 801751e:	2200      	movs	r2, #0
 8017520:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	683a      	ldr	r2, [r7, #0]
 8017526:	605a      	str	r2, [r3, #4]

    return true;
 8017528:	2301      	movs	r3, #1
}
 801752a:	4618      	mov	r0, r3
 801752c:	370c      	adds	r7, #12
 801752e:	46bd      	mov	sp, r7
 8017530:	bc80      	pop	{r7}
 8017532:	4770      	bx	lr

08017534 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8017534:	b480      	push	{r7}
 8017536:	b085      	sub	sp, #20
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d002      	beq.n	801754a <LinkedListGetPrevious+0x16>
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d101      	bne.n	801754e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801754a:	2300      	movs	r3, #0
 801754c:	e016      	b.n	801757c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8017554:	683a      	ldr	r2, [r7, #0]
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	429a      	cmp	r2, r3
 801755a:	d00c      	beq.n	8017576 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801755c:	e002      	b.n	8017564 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d007      	beq.n	801757a <LinkedListGetPrevious+0x46>
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	683a      	ldr	r2, [r7, #0]
 8017570:	429a      	cmp	r2, r3
 8017572:	d1f4      	bne.n	801755e <LinkedListGetPrevious+0x2a>
 8017574:	e001      	b.n	801757a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8017576:	2300      	movs	r3, #0
 8017578:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801757a:	68fb      	ldr	r3, [r7, #12]
}
 801757c:	4618      	mov	r0, r3
 801757e:	3714      	adds	r7, #20
 8017580:	46bd      	mov	sp, r7
 8017582:	bc80      	pop	{r7}
 8017584:	4770      	bx	lr

08017586 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8017586:	b580      	push	{r7, lr}
 8017588:	b084      	sub	sp, #16
 801758a:	af00      	add	r7, sp, #0
 801758c:	6078      	str	r0, [r7, #4]
 801758e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d002      	beq.n	801759c <LinkedListRemove+0x16>
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d101      	bne.n	80175a0 <LinkedListRemove+0x1a>
    {
        return false;
 801759c:	2300      	movs	r3, #0
 801759e:	e020      	b.n	80175e2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80175a0:	6839      	ldr	r1, [r7, #0]
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f7ff ffc6 	bl	8017534 <LinkedListGetPrevious>
 80175a8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	683a      	ldr	r2, [r7, #0]
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d103      	bne.n	80175bc <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	681a      	ldr	r2, [r3, #0]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	685b      	ldr	r3, [r3, #4]
 80175c0:	683a      	ldr	r2, [r7, #0]
 80175c2:	429a      	cmp	r2, r3
 80175c4:	d102      	bne.n	80175cc <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	68fa      	ldr	r2, [r7, #12]
 80175ca:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d003      	beq.n	80175da <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	681a      	ldr	r2, [r3, #0]
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	2200      	movs	r2, #0
 80175de:	601a      	str	r2, [r3, #0]

    return true;
 80175e0:	2301      	movs	r3, #1
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3710      	adds	r7, #16
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}
	...

080175ec <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80175ec:	b480      	push	{r7}
 80175ee:	b083      	sub	sp, #12
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	4603      	mov	r3, r0
 80175f4:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80175f6:	79fb      	ldrb	r3, [r7, #7]
 80175f8:	2b11      	cmp	r3, #17
 80175fa:	bf8c      	ite	hi
 80175fc:	2201      	movhi	r2, #1
 80175fe:	2200      	movls	r2, #0
 8017600:	b2d2      	uxtb	r2, r2
 8017602:	2a00      	cmp	r2, #0
 8017604:	d10c      	bne.n	8017620 <IsSticky+0x34>
 8017606:	2201      	movs	r2, #1
 8017608:	409a      	lsls	r2, r3
 801760a:	4b08      	ldr	r3, [pc, #32]	; (801762c <IsSticky+0x40>)
 801760c:	4013      	ands	r3, r2
 801760e:	2b00      	cmp	r3, #0
 8017610:	bf14      	ite	ne
 8017612:	2301      	movne	r3, #1
 8017614:	2300      	moveq	r3, #0
 8017616:	b2db      	uxtb	r3, r3
 8017618:	2b00      	cmp	r3, #0
 801761a:	d001      	beq.n	8017620 <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801761c:	2301      	movs	r3, #1
 801761e:	e000      	b.n	8017622 <IsSticky+0x36>
        default:
            return false;
 8017620:	2300      	movs	r3, #0
    }
}
 8017622:	4618      	mov	r0, r3
 8017624:	370c      	adds	r7, #12
 8017626:	46bd      	mov	sp, r7
 8017628:	bc80      	pop	{r7}
 801762a:	4770      	bx	lr
 801762c:	00020720 	.word	0x00020720

08017630 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8017630:	b480      	push	{r7}
 8017632:	b083      	sub	sp, #12
 8017634:	af00      	add	r7, sp, #0
 8017636:	4603      	mov	r3, r0
 8017638:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801763a:	2300      	movs	r3, #0
    }
}
 801763c:	4618      	mov	r0, r3
 801763e:	370c      	adds	r7, #12
 8017640:	46bd      	mov	sp, r7
 8017642:	bc80      	pop	{r7}
 8017644:	4770      	bx	lr
	...

08017648 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8017648:	b580      	push	{r7, lr}
 801764a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801764c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8017650:	2100      	movs	r1, #0
 8017652:	4804      	ldr	r0, [pc, #16]	; (8017664 <LoRaMacCommandsInit+0x1c>)
 8017654:	f004 f9a8 	bl	801b9a8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8017658:	4802      	ldr	r0, [pc, #8]	; (8017664 <LoRaMacCommandsInit+0x1c>)
 801765a:	f7ff ff2e 	bl	80174ba <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801765e:	2300      	movs	r3, #0
}
 8017660:	4618      	mov	r0, r3
 8017662:	bd80      	pop	{r7, pc}
 8017664:	20001a88 	.word	0x20001a88

08017668 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b086      	sub	sp, #24
 801766c:	af00      	add	r7, sp, #0
 801766e:	4603      	mov	r3, r0
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
 8017674:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d101      	bne.n	8017680 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801767c:	2301      	movs	r3, #1
 801767e:	e03b      	b.n	80176f8 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8017680:	f7ff fee0 	bl	8017444 <MallocNewMacCommandSlot>
 8017684:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d101      	bne.n	8017690 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801768c:	2302      	movs	r3, #2
 801768e:	e033      	b.n	80176f8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8017690:	6979      	ldr	r1, [r7, #20]
 8017692:	481b      	ldr	r0, [pc, #108]	; (8017700 <LoRaMacCommandsAddCmd+0x98>)
 8017694:	f7ff ff26 	bl	80174e4 <LinkedListAdd>
 8017698:	4603      	mov	r3, r0
 801769a:	f083 0301 	eor.w	r3, r3, #1
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d001      	beq.n	80176a8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80176a4:	2305      	movs	r3, #5
 80176a6:	e027      	b.n	80176f8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80176a8:	697b      	ldr	r3, [r7, #20]
 80176aa:	7bfa      	ldrb	r2, [r7, #15]
 80176ac:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	687a      	ldr	r2, [r7, #4]
 80176b2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80176b4:	697b      	ldr	r3, [r7, #20]
 80176b6:	3305      	adds	r3, #5
 80176b8:	687a      	ldr	r2, [r7, #4]
 80176ba:	b292      	uxth	r2, r2
 80176bc:	68b9      	ldr	r1, [r7, #8]
 80176be:	4618      	mov	r0, r3
 80176c0:	f004 f937 	bl	801b932 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80176c4:	7bfb      	ldrb	r3, [r7, #15]
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7ff ff90 	bl	80175ec <IsSticky>
 80176cc:	4603      	mov	r3, r0
 80176ce:	461a      	mov	r2, r3
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80176d4:	7bfb      	ldrb	r3, [r7, #15]
 80176d6:	4618      	mov	r0, r3
 80176d8:	f7ff ffaa 	bl	8017630 <IsConfirmationRequired>
 80176dc:	4603      	mov	r3, r0
 80176de:	461a      	mov	r2, r3
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80176e4:	4b06      	ldr	r3, [pc, #24]	; (8017700 <LoRaMacCommandsAddCmd+0x98>)
 80176e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	4413      	add	r3, r2
 80176ee:	3301      	adds	r3, #1
 80176f0:	4a03      	ldr	r2, [pc, #12]	; (8017700 <LoRaMacCommandsAddCmd+0x98>)
 80176f2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80176f6:	2300      	movs	r3, #0
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	3718      	adds	r7, #24
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}
 8017700:	20001a88 	.word	0x20001a88

08017704 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017712:	2301      	movs	r3, #1
 8017714:	e021      	b.n	801775a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8017716:	6879      	ldr	r1, [r7, #4]
 8017718:	4812      	ldr	r0, [pc, #72]	; (8017764 <LoRaMacCommandsRemoveCmd+0x60>)
 801771a:	f7ff ff34 	bl	8017586 <LinkedListRemove>
 801771e:	4603      	mov	r3, r0
 8017720:	f083 0301 	eor.w	r3, r3, #1
 8017724:	b2db      	uxtb	r3, r3
 8017726:	2b00      	cmp	r3, #0
 8017728:	d001      	beq.n	801772e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801772a:	2303      	movs	r3, #3
 801772c:	e015      	b.n	801775a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801772e:	4b0d      	ldr	r3, [pc, #52]	; (8017764 <LoRaMacCommandsRemoveCmd+0x60>)
 8017730:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	689b      	ldr	r3, [r3, #8]
 8017738:	1ad3      	subs	r3, r2, r3
 801773a:	3b01      	subs	r3, #1
 801773c:	4a09      	ldr	r2, [pc, #36]	; (8017764 <LoRaMacCommandsRemoveCmd+0x60>)
 801773e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f7ff fea6 	bl	8017494 <FreeMacCommandSlot>
 8017748:	4603      	mov	r3, r0
 801774a:	f083 0301 	eor.w	r3, r3, #1
 801774e:	b2db      	uxtb	r3, r3
 8017750:	2b00      	cmp	r3, #0
 8017752:	d001      	beq.n	8017758 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8017754:	2305      	movs	r3, #5
 8017756:	e000      	b.n	801775a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8017758:	2300      	movs	r3, #0
}
 801775a:	4618      	mov	r0, r3
 801775c:	3708      	adds	r7, #8
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}
 8017762:	bf00      	nop
 8017764:	20001a88 	.word	0x20001a88

08017768 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8017768:	b480      	push	{r7}
 801776a:	b085      	sub	sp, #20
 801776c:	af00      	add	r7, sp, #0
 801776e:	4603      	mov	r3, r0
 8017770:	6039      	str	r1, [r7, #0]
 8017772:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8017774:	4b0e      	ldr	r3, [pc, #56]	; (80177b0 <LoRaMacCommandsGetCmd+0x48>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801777a:	e002      	b.n	8017782 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d004      	beq.n	8017792 <LoRaMacCommandsGetCmd+0x2a>
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	791b      	ldrb	r3, [r3, #4]
 801778c:	79fa      	ldrb	r2, [r7, #7]
 801778e:	429a      	cmp	r2, r3
 8017790:	d1f4      	bne.n	801777c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8017792:	683b      	ldr	r3, [r7, #0]
 8017794:	68fa      	ldr	r2, [r7, #12]
 8017796:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d101      	bne.n	80177a2 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801779e:	2303      	movs	r3, #3
 80177a0:	e000      	b.n	80177a4 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80177a2:	2300      	movs	r3, #0
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	3714      	adds	r7, #20
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bc80      	pop	{r7}
 80177ac:	4770      	bx	lr
 80177ae:	bf00      	nop
 80177b0:	20001a88 	.word	0x20001a88

080177b4 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80177ba:	4b0f      	ldr	r3, [pc, #60]	; (80177f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80177c0:	e012      	b.n	80177e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	7b1b      	ldrb	r3, [r3, #12]
 80177c6:	f083 0301 	eor.w	r3, r3, #1
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d008      	beq.n	80177e2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f7ff ff94 	bl	8017704 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	607b      	str	r3, [r7, #4]
 80177e0:	e002      	b.n	80177e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d1e9      	bne.n	80177c2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80177ee:	2300      	movs	r3, #0
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	3708      	adds	r7, #8
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	20001a88 	.word	0x20001a88

080177fc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b082      	sub	sp, #8
 8017800:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8017802:	4b13      	ldr	r3, [pc, #76]	; (8017850 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8017808:	e01a      	b.n	8017840 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	791b      	ldrb	r3, [r3, #4]
 8017814:	4618      	mov	r0, r3
 8017816:	f7ff fee9 	bl	80175ec <IsSticky>
 801781a:	4603      	mov	r3, r0
 801781c:	2b00      	cmp	r3, #0
 801781e:	d00d      	beq.n	801783c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	791b      	ldrb	r3, [r3, #4]
 8017824:	4618      	mov	r0, r3
 8017826:	f7ff ff03 	bl	8017630 <IsConfirmationRequired>
 801782a:	4603      	mov	r3, r0
 801782c:	f083 0301 	eor.w	r3, r3, #1
 8017830:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8017832:	2b00      	cmp	r3, #0
 8017834:	d002      	beq.n	801783c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f7ff ff64 	bl	8017704 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d1e1      	bne.n	801780a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8017846:	2300      	movs	r3, #0
}
 8017848:	4618      	mov	r0, r3
 801784a:	3708      	adds	r7, #8
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}
 8017850:	20001a88 	.word	0x20001a88

08017854 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8017854:	b480      	push	{r7}
 8017856:	b083      	sub	sp, #12
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d101      	bne.n	8017866 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017862:	2301      	movs	r3, #1
 8017864:	e005      	b.n	8017872 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8017866:	4b05      	ldr	r3, [pc, #20]	; (801787c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8017868:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8017870:	2300      	movs	r3, #0
}
 8017872:	4618      	mov	r0, r3
 8017874:	370c      	adds	r7, #12
 8017876:	46bd      	mov	sp, r7
 8017878:	bc80      	pop	{r7}
 801787a:	4770      	bx	lr
 801787c:	20001a88 	.word	0x20001a88

08017880 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b088      	sub	sp, #32
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801788c:	4b25      	ldr	r3, [pc, #148]	; (8017924 <LoRaMacCommandsSerializeCmds+0xa4>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8017892:	2300      	movs	r3, #0
 8017894:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d002      	beq.n	80178a2 <LoRaMacCommandsSerializeCmds+0x22>
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d126      	bne.n	80178f0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80178a2:	2301      	movs	r3, #1
 80178a4:	e039      	b.n	801791a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80178a6:	7efb      	ldrb	r3, [r7, #27]
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	1ad2      	subs	r2, r2, r3
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	689b      	ldr	r3, [r3, #8]
 80178b0:	3301      	adds	r3, #1
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d320      	bcc.n	80178f8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80178b6:	7efb      	ldrb	r3, [r7, #27]
 80178b8:	1c5a      	adds	r2, r3, #1
 80178ba:	76fa      	strb	r2, [r7, #27]
 80178bc:	461a      	mov	r2, r3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	4413      	add	r3, r2
 80178c2:	69fa      	ldr	r2, [r7, #28]
 80178c4:	7912      	ldrb	r2, [r2, #4]
 80178c6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80178c8:	7efb      	ldrb	r3, [r7, #27]
 80178ca:	687a      	ldr	r2, [r7, #4]
 80178cc:	18d0      	adds	r0, r2, r3
 80178ce:	69fb      	ldr	r3, [r7, #28]
 80178d0:	1d59      	adds	r1, r3, #5
 80178d2:	69fb      	ldr	r3, [r7, #28]
 80178d4:	689b      	ldr	r3, [r3, #8]
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	461a      	mov	r2, r3
 80178da:	f004 f82a 	bl	801b932 <memcpy1>
            itr += curElement->PayloadSize;
 80178de:	69fb      	ldr	r3, [r7, #28]
 80178e0:	689b      	ldr	r3, [r3, #8]
 80178e2:	b2da      	uxtb	r2, r3
 80178e4:	7efb      	ldrb	r3, [r7, #27]
 80178e6:	4413      	add	r3, r2
 80178e8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80178ea:	69fb      	ldr	r3, [r7, #28]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80178f0:	69fb      	ldr	r3, [r7, #28]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d1d7      	bne.n	80178a6 <LoRaMacCommandsSerializeCmds+0x26>
 80178f6:	e009      	b.n	801790c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80178f8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80178fa:	e007      	b.n	801790c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80178fc:	69fb      	ldr	r3, [r7, #28]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8017902:	69f8      	ldr	r0, [r7, #28]
 8017904:	f7ff fefe 	bl	8017704 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801790c:	69fb      	ldr	r3, [r7, #28]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d1f4      	bne.n	80178fc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8017912:	68b8      	ldr	r0, [r7, #8]
 8017914:	f7ff ff9e 	bl	8017854 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8017918:	2300      	movs	r3, #0
}
 801791a:	4618      	mov	r0, r3
 801791c:	3720      	adds	r7, #32
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
 8017922:	bf00      	nop
 8017924:	20001a88 	.word	0x20001a88

08017928 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8017928:	b480      	push	{r7}
 801792a:	b085      	sub	sp, #20
 801792c:	af00      	add	r7, sp, #0
 801792e:	4603      	mov	r3, r0
 8017930:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8017932:	2300      	movs	r3, #0
 8017934:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8017936:	79fb      	ldrb	r3, [r7, #7]
 8017938:	3b02      	subs	r3, #2
 801793a:	2b11      	cmp	r3, #17
 801793c:	d850      	bhi.n	80179e0 <LoRaMacCommandsGetCmdSize+0xb8>
 801793e:	a201      	add	r2, pc, #4	; (adr r2, 8017944 <LoRaMacCommandsGetCmdSize+0x1c>)
 8017940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017944:	0801798d 	.word	0x0801798d
 8017948:	08017993 	.word	0x08017993
 801794c:	08017999 	.word	0x08017999
 8017950:	0801799f 	.word	0x0801799f
 8017954:	080179a5 	.word	0x080179a5
 8017958:	080179ab 	.word	0x080179ab
 801795c:	080179b1 	.word	0x080179b1
 8017960:	080179b7 	.word	0x080179b7
 8017964:	080179bd 	.word	0x080179bd
 8017968:	080179e1 	.word	0x080179e1
 801796c:	080179e1 	.word	0x080179e1
 8017970:	080179c3 	.word	0x080179c3
 8017974:	080179e1 	.word	0x080179e1
 8017978:	080179e1 	.word	0x080179e1
 801797c:	080179c9 	.word	0x080179c9
 8017980:	080179cf 	.word	0x080179cf
 8017984:	080179d5 	.word	0x080179d5
 8017988:	080179db 	.word	0x080179db
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801798c:	2303      	movs	r3, #3
 801798e:	73fb      	strb	r3, [r7, #15]
            break;
 8017990:	e027      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8017992:	2305      	movs	r3, #5
 8017994:	73fb      	strb	r3, [r7, #15]
            break;
 8017996:	e024      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8017998:	2302      	movs	r3, #2
 801799a:	73fb      	strb	r3, [r7, #15]
            break;
 801799c:	e021      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801799e:	2305      	movs	r3, #5
 80179a0:	73fb      	strb	r3, [r7, #15]
            break;
 80179a2:	e01e      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80179a4:	2301      	movs	r3, #1
 80179a6:	73fb      	strb	r3, [r7, #15]
            break;
 80179a8:	e01b      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80179aa:	2306      	movs	r3, #6
 80179ac:	73fb      	strb	r3, [r7, #15]
            break;
 80179ae:	e018      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80179b0:	2302      	movs	r3, #2
 80179b2:	73fb      	strb	r3, [r7, #15]
            break;
 80179b4:	e015      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80179b6:	2302      	movs	r3, #2
 80179b8:	73fb      	strb	r3, [r7, #15]
            break;
 80179ba:	e012      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80179bc:	2305      	movs	r3, #5
 80179be:	73fb      	strb	r3, [r7, #15]
            break;
 80179c0:	e00f      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80179c2:	2306      	movs	r3, #6
 80179c4:	73fb      	strb	r3, [r7, #15]
            break;
 80179c6:	e00c      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80179c8:	2301      	movs	r3, #1
 80179ca:	73fb      	strb	r3, [r7, #15]
            break;
 80179cc:	e009      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80179ce:	2305      	movs	r3, #5
 80179d0:	73fb      	strb	r3, [r7, #15]
            break;
 80179d2:	e006      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80179d4:	2304      	movs	r3, #4
 80179d6:	73fb      	strb	r3, [r7, #15]
            break;
 80179d8:	e003      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80179da:	2304      	movs	r3, #4
 80179dc:	73fb      	strb	r3, [r7, #15]
            break;
 80179de:	e000      	b.n	80179e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80179e0:	bf00      	nop
        }
    }
    return cidSize;
 80179e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3714      	adds	r7, #20
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bc80      	pop	{r7}
 80179ec:	4770      	bx	lr
 80179ee:	bf00      	nop

080179f0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80179f0:	b480      	push	{r7}
 80179f2:	b083      	sub	sp, #12
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	4a07      	ldr	r2, [pc, #28]	; (8017a18 <IncreaseBufferPointer+0x28>)
 80179fc:	4293      	cmp	r3, r2
 80179fe:	d102      	bne.n	8017a06 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8017a00:	4b06      	ldr	r3, [pc, #24]	; (8017a1c <IncreaseBufferPointer+0x2c>)
 8017a02:	607b      	str	r3, [r7, #4]
 8017a04:	e002      	b.n	8017a0c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	3304      	adds	r3, #4
 8017a0a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8017a0c:	687b      	ldr	r3, [r7, #4]
}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	370c      	adds	r7, #12
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bc80      	pop	{r7}
 8017a16:	4770      	bx	lr
 8017a18:	20001cb0 	.word	0x20001cb0
 8017a1c:	20001ca0 	.word	0x20001ca0

08017a20 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8017a20:	b480      	push	{r7}
 8017a22:	b083      	sub	sp, #12
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	4603      	mov	r3, r0
 8017a28:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8017a2a:	79fb      	ldrb	r3, [r7, #7]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d101      	bne.n	8017a34 <IsListEmpty+0x14>
    {
        return true;
 8017a30:	2301      	movs	r3, #1
 8017a32:	e000      	b.n	8017a36 <IsListEmpty+0x16>
    }
    return false;
 8017a34:	2300      	movs	r3, #0
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	370c      	adds	r7, #12
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bc80      	pop	{r7}
 8017a3e:	4770      	bx	lr

08017a40 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8017a40:	b480      	push	{r7}
 8017a42:	b083      	sub	sp, #12
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	4603      	mov	r3, r0
 8017a48:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8017a4a:	79fb      	ldrb	r3, [r7, #7]
 8017a4c:	2b04      	cmp	r3, #4
 8017a4e:	d901      	bls.n	8017a54 <IsListFull+0x14>
    {
        return true;
 8017a50:	2301      	movs	r3, #1
 8017a52:	e000      	b.n	8017a56 <IsListFull+0x16>
    }
    return false;
 8017a54:	2300      	movs	r3, #0
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	370c      	adds	r7, #12
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bc80      	pop	{r7}
 8017a5e:	4770      	bx	lr

08017a60 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b086      	sub	sp, #24
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	4603      	mov	r3, r0
 8017a68:	60b9      	str	r1, [r7, #8]
 8017a6a:	607a      	str	r2, [r7, #4]
 8017a6c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8017a6e:	68bb      	ldr	r3, [r7, #8]
 8017a70:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017a72:	4b13      	ldr	r3, [pc, #76]	; (8017ac0 <GetElement+0x60>)
 8017a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a78:	4618      	mov	r0, r3
 8017a7a:	f7ff ffd1 	bl	8017a20 <IsListEmpty>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d001      	beq.n	8017a88 <GetElement+0x28>
    {
        return NULL;
 8017a84:	2300      	movs	r3, #0
 8017a86:	e017      	b.n	8017ab8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8017a88:	2300      	movs	r3, #0
 8017a8a:	74fb      	strb	r3, [r7, #19]
 8017a8c:	e00d      	b.n	8017aaa <GetElement+0x4a>
    {
        if( element->Request == request )
 8017a8e:	697b      	ldr	r3, [r7, #20]
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	7bfa      	ldrb	r2, [r7, #15]
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d101      	bne.n	8017a9c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	e00d      	b.n	8017ab8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8017a9c:	6978      	ldr	r0, [r7, #20]
 8017a9e:	f7ff ffa7 	bl	80179f0 <IncreaseBufferPointer>
 8017aa2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8017aa4:	7cfb      	ldrb	r3, [r7, #19]
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	74fb      	strb	r3, [r7, #19]
 8017aaa:	4b05      	ldr	r3, [pc, #20]	; (8017ac0 <GetElement+0x60>)
 8017aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017ab0:	7cfa      	ldrb	r2, [r7, #19]
 8017ab2:	429a      	cmp	r2, r3
 8017ab4:	d3eb      	bcc.n	8017a8e <GetElement+0x2e>
    }

    return NULL;
 8017ab6:	2300      	movs	r3, #0
}
 8017ab8:	4618      	mov	r0, r3
 8017aba:	3718      	adds	r7, #24
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	20001c94 	.word	0x20001c94

08017ac4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8017acc:	4a0c      	ldr	r2, [pc, #48]	; (8017b00 <LoRaMacConfirmQueueInit+0x3c>)
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8017ad2:	4b0b      	ldr	r3, [pc, #44]	; (8017b00 <LoRaMacConfirmQueueInit+0x3c>)
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8017ada:	4b09      	ldr	r3, [pc, #36]	; (8017b00 <LoRaMacConfirmQueueInit+0x3c>)
 8017adc:	4a09      	ldr	r2, [pc, #36]	; (8017b04 <LoRaMacConfirmQueueInit+0x40>)
 8017ade:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8017ae0:	4b07      	ldr	r3, [pc, #28]	; (8017b00 <LoRaMacConfirmQueueInit+0x3c>)
 8017ae2:	4a08      	ldr	r2, [pc, #32]	; (8017b04 <LoRaMacConfirmQueueInit+0x40>)
 8017ae4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8017ae6:	2214      	movs	r2, #20
 8017ae8:	21ff      	movs	r1, #255	; 0xff
 8017aea:	4806      	ldr	r0, [pc, #24]	; (8017b04 <LoRaMacConfirmQueueInit+0x40>)
 8017aec:	f003 ff5c 	bl	801b9a8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8017af0:	4b03      	ldr	r3, [pc, #12]	; (8017b00 <LoRaMacConfirmQueueInit+0x3c>)
 8017af2:	2201      	movs	r2, #1
 8017af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8017af8:	bf00      	nop
 8017afa:	3708      	adds	r7, #8
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	20001c94 	.word	0x20001c94
 8017b04:	20001ca0 	.word	0x20001ca0

08017b08 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017b10:	4b19      	ldr	r3, [pc, #100]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b16:	4618      	mov	r0, r3
 8017b18:	f7ff ff92 	bl	8017a40 <IsListFull>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d001      	beq.n	8017b26 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8017b22:	2300      	movs	r3, #0
 8017b24:	e024      	b.n	8017b70 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8017b26:	4b14      	ldr	r3, [pc, #80]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b28:	689b      	ldr	r3, [r3, #8]
 8017b2a:	687a      	ldr	r2, [r7, #4]
 8017b2c:	7812      	ldrb	r2, [r2, #0]
 8017b2e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8017b30:	4b11      	ldr	r3, [pc, #68]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b32:	689b      	ldr	r3, [r3, #8]
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	7852      	ldrb	r2, [r2, #1]
 8017b38:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8017b3a:	4b0f      	ldr	r3, [pc, #60]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b3c:	689b      	ldr	r3, [r3, #8]
 8017b3e:	687a      	ldr	r2, [r7, #4]
 8017b40:	78d2      	ldrb	r2, [r2, #3]
 8017b42:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8017b44:	4b0c      	ldr	r3, [pc, #48]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b46:	689b      	ldr	r3, [r3, #8]
 8017b48:	687a      	ldr	r2, [r7, #4]
 8017b4a:	7892      	ldrb	r2, [r2, #2]
 8017b4c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8017b4e:	4b0a      	ldr	r3, [pc, #40]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b54:	3301      	adds	r3, #1
 8017b56:	b2da      	uxtb	r2, r3
 8017b58:	4b07      	ldr	r3, [pc, #28]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b5a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8017b5e:	4b06      	ldr	r3, [pc, #24]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b60:	689b      	ldr	r3, [r3, #8]
 8017b62:	4618      	mov	r0, r3
 8017b64:	f7ff ff44 	bl	80179f0 <IncreaseBufferPointer>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	4a03      	ldr	r2, [pc, #12]	; (8017b78 <LoRaMacConfirmQueueAdd+0x70>)
 8017b6c:	6093      	str	r3, [r2, #8]

    return true;
 8017b6e:	2301      	movs	r3, #1
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	3708      	adds	r7, #8
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	20001c94 	.word	0x20001c94

08017b7c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017b80:	4b0e      	ldr	r3, [pc, #56]	; (8017bbc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7ff ff4a 	bl	8017a20 <IsListEmpty>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d001      	beq.n	8017b96 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8017b92:	2300      	movs	r3, #0
 8017b94:	e010      	b.n	8017bb8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8017b96:	4b09      	ldr	r3, [pc, #36]	; (8017bbc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b9c:	3b01      	subs	r3, #1
 8017b9e:	b2da      	uxtb	r2, r3
 8017ba0:	4b06      	ldr	r3, [pc, #24]	; (8017bbc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017ba2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8017ba6:	4b05      	ldr	r3, [pc, #20]	; (8017bbc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017ba8:	685b      	ldr	r3, [r3, #4]
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7ff ff20 	bl	80179f0 <IncreaseBufferPointer>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	4a02      	ldr	r2, [pc, #8]	; (8017bbc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017bb4:	6053      	str	r3, [r2, #4]

    return true;
 8017bb6:	2301      	movs	r3, #1
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	20001c94 	.word	0x20001c94

08017bc0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	460a      	mov	r2, r1
 8017bca:	71fb      	strb	r3, [r7, #7]
 8017bcc:	4613      	mov	r3, r2
 8017bce:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017bd4:	4b10      	ldr	r3, [pc, #64]	; (8017c18 <LoRaMacConfirmQueueSetStatus+0x58>)
 8017bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7ff ff20 	bl	8017a20 <IsListEmpty>
 8017be0:	4603      	mov	r3, r0
 8017be2:	f083 0301 	eor.w	r3, r3, #1
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d011      	beq.n	8017c10 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8017bec:	4b0a      	ldr	r3, [pc, #40]	; (8017c18 <LoRaMacConfirmQueueSetStatus+0x58>)
 8017bee:	6859      	ldr	r1, [r3, #4]
 8017bf0:	4b09      	ldr	r3, [pc, #36]	; (8017c18 <LoRaMacConfirmQueueSetStatus+0x58>)
 8017bf2:	689a      	ldr	r2, [r3, #8]
 8017bf4:	79bb      	ldrb	r3, [r7, #6]
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7ff ff32 	bl	8017a60 <GetElement>
 8017bfc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d005      	beq.n	8017c10 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	79fa      	ldrb	r2, [r7, #7]
 8017c08:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	2201      	movs	r2, #1
 8017c0e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8017c10:	bf00      	nop
 8017c12:	3710      	adds	r7, #16
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	20001c94 	.word	0x20001c94

08017c1c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b084      	sub	sp, #16
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	4603      	mov	r3, r0
 8017c24:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8017c26:	2300      	movs	r3, #0
 8017c28:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017c2a:	4b10      	ldr	r3, [pc, #64]	; (8017c6c <LoRaMacConfirmQueueGetStatus+0x50>)
 8017c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7ff fef5 	bl	8017a20 <IsListEmpty>
 8017c36:	4603      	mov	r3, r0
 8017c38:	f083 0301 	eor.w	r3, r3, #1
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d00e      	beq.n	8017c60 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8017c42:	4b0a      	ldr	r3, [pc, #40]	; (8017c6c <LoRaMacConfirmQueueGetStatus+0x50>)
 8017c44:	6859      	ldr	r1, [r3, #4]
 8017c46:	4b09      	ldr	r3, [pc, #36]	; (8017c6c <LoRaMacConfirmQueueGetStatus+0x50>)
 8017c48:	689a      	ldr	r2, [r3, #8]
 8017c4a:	79fb      	ldrb	r3, [r7, #7]
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f7ff ff07 	bl	8017a60 <GetElement>
 8017c52:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d002      	beq.n	8017c60 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	785b      	ldrb	r3, [r3, #1]
 8017c5e:	e000      	b.n	8017c62 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8017c60:	2301      	movs	r3, #1
}
 8017c62:	4618      	mov	r0, r3
 8017c64:	3710      	adds	r7, #16
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	20001c94 	.word	0x20001c94

08017c70 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	4603      	mov	r3, r0
 8017c78:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8017c7a:	4b16      	ldr	r3, [pc, #88]	; (8017cd4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8017c80:	4a14      	ldr	r2, [pc, #80]	; (8017cd4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017c82:	79fb      	ldrb	r3, [r7, #7]
 8017c84:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017c88:	4b12      	ldr	r3, [pc, #72]	; (8017cd4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7ff fec6 	bl	8017a20 <IsListEmpty>
 8017c94:	4603      	mov	r3, r0
 8017c96:	f083 0301 	eor.w	r3, r3, #1
 8017c9a:	b2db      	uxtb	r3, r3
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d015      	beq.n	8017ccc <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	79fa      	ldrb	r2, [r7, #7]
 8017ca4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	78db      	ldrb	r3, [r3, #3]
 8017caa:	f083 0301 	eor.w	r3, r3, #1
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d002      	beq.n	8017cba <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	2201      	movs	r2, #1
 8017cb8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8017cba:	68f8      	ldr	r0, [r7, #12]
 8017cbc:	f7ff fe98 	bl	80179f0 <IncreaseBufferPointer>
 8017cc0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8017cc2:	4b04      	ldr	r3, [pc, #16]	; (8017cd4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017cc4:	689b      	ldr	r3, [r3, #8]
 8017cc6:	68fa      	ldr	r2, [r7, #12]
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d1e9      	bne.n	8017ca0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8017ccc:	bf00      	nop
 8017cce:	3710      	adds	r7, #16
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}
 8017cd4:	20001c94 	.word	0x20001c94

08017cd8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	4603      	mov	r3, r0
 8017ce0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8017ce2:	4b09      	ldr	r3, [pc, #36]	; (8017d08 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8017ce4:	6859      	ldr	r1, [r3, #4]
 8017ce6:	4b08      	ldr	r3, [pc, #32]	; (8017d08 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8017ce8:	689a      	ldr	r2, [r3, #8]
 8017cea:	79fb      	ldrb	r3, [r7, #7]
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7ff feb7 	bl	8017a60 <GetElement>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d001      	beq.n	8017cfc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	e000      	b.n	8017cfe <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8017cfc:	2300      	movs	r3, #0
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	3708      	adds	r7, #8
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}
 8017d06:	bf00      	nop
 8017d08:	20001c94 	.word	0x20001c94

08017d0c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b084      	sub	sp, #16
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8017d14:	4b25      	ldr	r3, [pc, #148]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017d1a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8017d20:	f107 0308 	add.w	r3, r7, #8
 8017d24:	2204      	movs	r2, #4
 8017d26:	2100      	movs	r1, #0
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f003 fe3d 	bl	801b9a8 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8017d2e:	2300      	movs	r3, #0
 8017d30:	73fb      	strb	r3, [r7, #15]
 8017d32:	e032      	b.n	8017d9a <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8017d34:	4b1d      	ldr	r3, [pc, #116]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d36:	685b      	ldr	r3, [r3, #4]
 8017d38:	781a      	ldrb	r2, [r3, #0]
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8017d3e:	4b1b      	ldr	r3, [pc, #108]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d40:	685b      	ldr	r3, [r3, #4]
 8017d42:	785a      	ldrb	r2, [r3, #1]
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8017d48:	4b18      	ldr	r3, [pc, #96]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d4a:	685b      	ldr	r3, [r3, #4]
 8017d4c:	789b      	ldrb	r3, [r3, #2]
 8017d4e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8017d50:	7b7b      	ldrb	r3, [r7, #13]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d005      	beq.n	8017d62 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8017d56:	4b15      	ldr	r3, [pc, #84]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	689b      	ldr	r3, [r3, #8]
 8017d5c:	6878      	ldr	r0, [r7, #4]
 8017d5e:	4798      	blx	r3
 8017d60:	e00b      	b.n	8017d7a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8017d62:	4b12      	ldr	r3, [pc, #72]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	781b      	ldrb	r3, [r3, #0]
 8017d68:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8017d6a:	4b10      	ldr	r3, [pc, #64]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	785b      	ldrb	r3, [r3, #1]
 8017d70:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8017d72:	4b0e      	ldr	r3, [pc, #56]	; (8017dac <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	78db      	ldrb	r3, [r3, #3]
 8017d78:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8017d7a:	f7ff feff 	bl	8017b7c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8017d7e:	7b7b      	ldrb	r3, [r7, #13]
 8017d80:	f083 0301 	eor.w	r3, r3, #1
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d004      	beq.n	8017d94 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8017d8a:	f107 0308 	add.w	r3, r7, #8
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f7ff feba 	bl	8017b08 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8017d94:	7bfb      	ldrb	r3, [r7, #15]
 8017d96:	3301      	adds	r3, #1
 8017d98:	73fb      	strb	r3, [r7, #15]
 8017d9a:	7bfa      	ldrb	r2, [r7, #15]
 8017d9c:	7bbb      	ldrb	r3, [r7, #14]
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d3c8      	bcc.n	8017d34 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8017da2:	bf00      	nop
 8017da4:	bf00      	nop
 8017da6:	3710      	adds	r7, #16
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	20001c94 	.word	0x20001c94

08017db0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8017db0:	b480      	push	{r7}
 8017db2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8017db4:	4b03      	ldr	r3, [pc, #12]	; (8017dc4 <LoRaMacConfirmQueueGetCnt+0x14>)
 8017db6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8017dba:	4618      	mov	r0, r3
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bc80      	pop	{r7}
 8017dc0:	4770      	bx	lr
 8017dc2:	bf00      	nop
 8017dc4:	20001c94 	.word	0x20001c94

08017dc8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017dcc:	4b06      	ldr	r3, [pc, #24]	; (8017de8 <LoRaMacConfirmQueueIsFull+0x20>)
 8017dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f7ff fe34 	bl	8017a40 <IsListFull>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d001      	beq.n	8017de2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8017dde:	2301      	movs	r3, #1
 8017de0:	e000      	b.n	8017de4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8017de2:	2300      	movs	r3, #0
    }
}
 8017de4:	4618      	mov	r0, r3
 8017de6:	bd80      	pop	{r7, pc}
 8017de8:	20001c94 	.word	0x20001c94

08017dec <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b08e      	sub	sp, #56	; 0x38
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	60f8      	str	r0, [r7, #12]
 8017df4:	607b      	str	r3, [r7, #4]
 8017df6:	460b      	mov	r3, r1
 8017df8:	817b      	strh	r3, [r7, #10]
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d101      	bne.n	8017e08 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017e04:	2309      	movs	r3, #9
 8017e06:	e086      	b.n	8017f16 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8017e08:	2300      	movs	r3, #0
 8017e0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8017e0e:	2301      	movs	r3, #1
 8017e10:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8017e12:	2300      	movs	r3, #0
 8017e14:	623b      	str	r3, [r7, #32]
 8017e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	601a      	str	r2, [r3, #0]
 8017e1e:	605a      	str	r2, [r3, #4]
 8017e20:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8017e22:	2300      	movs	r3, #0
 8017e24:	613b      	str	r3, [r7, #16]
 8017e26:	f107 0314 	add.w	r3, r7, #20
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	601a      	str	r2, [r3, #0]
 8017e2e:	605a      	str	r2, [r3, #4]
 8017e30:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8017e32:	2301      	movs	r3, #1
 8017e34:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8017e36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017e3a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	b2db      	uxtb	r3, r3
 8017e40:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	0a1b      	lsrs	r3, r3, #8
 8017e46:	b2db      	uxtb	r3, r3
 8017e48:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	0c1b      	lsrs	r3, r3, #16
 8017e4e:	b2db      	uxtb	r3, r3
 8017e50:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	0e1b      	lsrs	r3, r3, #24
 8017e56:	b2db      	uxtb	r3, r3
 8017e58:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8017e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8017e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e62:	0a1b      	lsrs	r3, r3, #8
 8017e64:	b2db      	uxtb	r3, r3
 8017e66:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8017e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e6a:	0c1b      	lsrs	r3, r3, #16
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8017e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e72:	0e1b      	lsrs	r3, r3, #24
 8017e74:	b2db      	uxtb	r3, r3
 8017e76:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8017e78:	e048      	b.n	8017f0c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8017e7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8017e80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017e82:	3301      	adds	r3, #1
 8017e84:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8017e86:	f107 0320 	add.w	r3, r7, #32
 8017e8a:	7a7a      	ldrb	r2, [r7, #9]
 8017e8c:	f107 0010 	add.w	r0, r7, #16
 8017e90:	2110      	movs	r1, #16
 8017e92:	f7f8 fa77 	bl	8010384 <SecureElementAesEncrypt>
 8017e96:	4603      	mov	r3, r0
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d001      	beq.n	8017ea0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017e9c:	230e      	movs	r3, #14
 8017e9e:	e03a      	b.n	8017f16 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8017ea6:	e01e      	b.n	8017ee6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8017ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8017eac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017eb0:	4413      	add	r3, r2
 8017eb2:	461a      	mov	r2, r3
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	4413      	add	r3, r2
 8017eb8:	7819      	ldrb	r1, [r3, #0]
 8017eba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017ebe:	3338      	adds	r3, #56	; 0x38
 8017ec0:	443b      	add	r3, r7
 8017ec2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8017ec6:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8017eca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017ece:	4403      	add	r3, r0
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	4403      	add	r3, r0
 8017ed6:	404a      	eors	r2, r1
 8017ed8:	b2d2      	uxtb	r2, r2
 8017eda:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8017edc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8017ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017eea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017eee:	2a10      	cmp	r2, #16
 8017ef0:	bfa8      	it	ge
 8017ef2:	2210      	movge	r2, #16
 8017ef4:	b212      	sxth	r2, r2
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	dbd6      	blt.n	8017ea8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8017efa:	897b      	ldrh	r3, [r7, #10]
 8017efc:	3b10      	subs	r3, #16
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8017f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017f06:	3310      	adds	r3, #16
 8017f08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8017f0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	dcb2      	bgt.n	8017e7a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017f14:	2300      	movs	r3, #0
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3738      	adds	r7, #56	; 0x38
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}

08017f1e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8017f1e:	b490      	push	{r4, r7}
 8017f20:	b082      	sub	sp, #8
 8017f22:	af00      	add	r7, sp, #0
 8017f24:	4604      	mov	r4, r0
 8017f26:	4608      	mov	r0, r1
 8017f28:	4611      	mov	r1, r2
 8017f2a:	461a      	mov	r2, r3
 8017f2c:	4623      	mov	r3, r4
 8017f2e:	80fb      	strh	r3, [r7, #6]
 8017f30:	4603      	mov	r3, r0
 8017f32:	717b      	strb	r3, [r7, #5]
 8017f34:	460b      	mov	r3, r1
 8017f36:	713b      	strb	r3, [r7, #4]
 8017f38:	4613      	mov	r3, r2
 8017f3a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8017f3c:	69bb      	ldr	r3, [r7, #24]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d101      	bne.n	8017f46 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017f42:	2309      	movs	r3, #9
 8017f44:	e04e      	b.n	8017fe4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8017f46:	69bb      	ldr	r3, [r7, #24]
 8017f48:	2249      	movs	r2, #73	; 0x49
 8017f4a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8017f4c:	69bb      	ldr	r3, [r7, #24]
 8017f4e:	3301      	adds	r3, #1
 8017f50:	2200      	movs	r2, #0
 8017f52:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8017f54:	69bb      	ldr	r3, [r7, #24]
 8017f56:	3302      	adds	r3, #2
 8017f58:	2200      	movs	r2, #0
 8017f5a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8017f5c:	69bb      	ldr	r3, [r7, #24]
 8017f5e:	3303      	adds	r3, #3
 8017f60:	2200      	movs	r2, #0
 8017f62:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8017f64:	69bb      	ldr	r3, [r7, #24]
 8017f66:	3304      	adds	r3, #4
 8017f68:	2200      	movs	r2, #0
 8017f6a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8017f6c:	69bb      	ldr	r3, [r7, #24]
 8017f6e:	3305      	adds	r3, #5
 8017f70:	78fa      	ldrb	r2, [r7, #3]
 8017f72:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8017f74:	69bb      	ldr	r3, [r7, #24]
 8017f76:	3306      	adds	r3, #6
 8017f78:	693a      	ldr	r2, [r7, #16]
 8017f7a:	b2d2      	uxtb	r2, r2
 8017f7c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8017f7e:	693b      	ldr	r3, [r7, #16]
 8017f80:	0a1a      	lsrs	r2, r3, #8
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	3307      	adds	r3, #7
 8017f86:	b2d2      	uxtb	r2, r2
 8017f88:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8017f8a:	693b      	ldr	r3, [r7, #16]
 8017f8c:	0c1a      	lsrs	r2, r3, #16
 8017f8e:	69bb      	ldr	r3, [r7, #24]
 8017f90:	3308      	adds	r3, #8
 8017f92:	b2d2      	uxtb	r2, r2
 8017f94:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8017f96:	693b      	ldr	r3, [r7, #16]
 8017f98:	0e1a      	lsrs	r2, r3, #24
 8017f9a:	69bb      	ldr	r3, [r7, #24]
 8017f9c:	3309      	adds	r3, #9
 8017f9e:	b2d2      	uxtb	r2, r2
 8017fa0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8017fa2:	69bb      	ldr	r3, [r7, #24]
 8017fa4:	330a      	adds	r3, #10
 8017fa6:	697a      	ldr	r2, [r7, #20]
 8017fa8:	b2d2      	uxtb	r2, r2
 8017faa:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8017fac:	697b      	ldr	r3, [r7, #20]
 8017fae:	0a1a      	lsrs	r2, r3, #8
 8017fb0:	69bb      	ldr	r3, [r7, #24]
 8017fb2:	330b      	adds	r3, #11
 8017fb4:	b2d2      	uxtb	r2, r2
 8017fb6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	0c1a      	lsrs	r2, r3, #16
 8017fbc:	69bb      	ldr	r3, [r7, #24]
 8017fbe:	330c      	adds	r3, #12
 8017fc0:	b2d2      	uxtb	r2, r2
 8017fc2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8017fc4:	697b      	ldr	r3, [r7, #20]
 8017fc6:	0e1a      	lsrs	r2, r3, #24
 8017fc8:	69bb      	ldr	r3, [r7, #24]
 8017fca:	330d      	adds	r3, #13
 8017fcc:	b2d2      	uxtb	r2, r2
 8017fce:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8017fd0:	69bb      	ldr	r3, [r7, #24]
 8017fd2:	330e      	adds	r3, #14
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8017fd8:	69bb      	ldr	r3, [r7, #24]
 8017fda:	330f      	adds	r3, #15
 8017fdc:	88fa      	ldrh	r2, [r7, #6]
 8017fde:	b2d2      	uxtb	r2, r2
 8017fe0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8017fe2:	2300      	movs	r3, #0
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	3708      	adds	r7, #8
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bc90      	pop	{r4, r7}
 8017fec:	4770      	bx	lr

08017fee <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8017fee:	b590      	push	{r4, r7, lr}
 8017ff0:	b08b      	sub	sp, #44	; 0x2c
 8017ff2:	af04      	add	r7, sp, #16
 8017ff4:	6078      	str	r0, [r7, #4]
 8017ff6:	4608      	mov	r0, r1
 8017ff8:	4611      	mov	r1, r2
 8017ffa:	461a      	mov	r2, r3
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	807b      	strh	r3, [r7, #2]
 8018000:	460b      	mov	r3, r1
 8018002:	707b      	strb	r3, [r7, #1]
 8018004:	4613      	mov	r3, r2
 8018006:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d002      	beq.n	8018014 <ComputeCmacB0+0x26>
 801800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018010:	2b00      	cmp	r3, #0
 8018012:	d101      	bne.n	8018018 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018014:	2309      	movs	r3, #9
 8018016:	e024      	b.n	8018062 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8018018:	887b      	ldrh	r3, [r7, #2]
 801801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801801e:	d901      	bls.n	8018024 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8018020:	230d      	movs	r3, #13
 8018022:	e01e      	b.n	8018062 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8018024:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8018028:	783a      	ldrb	r2, [r7, #0]
 801802a:	7879      	ldrb	r1, [r7, #1]
 801802c:	8878      	ldrh	r0, [r7, #2]
 801802e:	f107 0308 	add.w	r3, r7, #8
 8018032:	9302      	str	r3, [sp, #8]
 8018034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018036:	9301      	str	r3, [sp, #4]
 8018038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803a:	9300      	str	r3, [sp, #0]
 801803c:	4623      	mov	r3, r4
 801803e:	f7ff ff6e 	bl	8017f1e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8018042:	887a      	ldrh	r2, [r7, #2]
 8018044:	7879      	ldrb	r1, [r7, #1]
 8018046:	f107 0008 	add.w	r0, r7, #8
 801804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801804c:	9300      	str	r3, [sp, #0]
 801804e:	460b      	mov	r3, r1
 8018050:	6879      	ldr	r1, [r7, #4]
 8018052:	f7f8 f951 	bl	80102f8 <SecureElementComputeAesCmac>
 8018056:	4603      	mov	r3, r0
 8018058:	2b00      	cmp	r3, #0
 801805a:	d001      	beq.n	8018060 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801805c:	230e      	movs	r3, #14
 801805e:	e000      	b.n	8018062 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8018060:	2300      	movs	r3, #0
}
 8018062:	4618      	mov	r0, r3
 8018064:	371c      	adds	r7, #28
 8018066:	46bd      	mov	sp, r7
 8018068:	bd90      	pop	{r4, r7, pc}

0801806a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801806a:	b590      	push	{r4, r7, lr}
 801806c:	b0cd      	sub	sp, #308	; 0x134
 801806e:	af04      	add	r7, sp, #16
 8018070:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8018074:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8018078:	6020      	str	r0, [r4, #0]
 801807a:	460c      	mov	r4, r1
 801807c:	4610      	mov	r0, r2
 801807e:	4619      	mov	r1, r3
 8018080:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018084:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8018088:	4622      	mov	r2, r4
 801808a:	801a      	strh	r2, [r3, #0]
 801808c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018090:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8018094:	4602      	mov	r2, r0
 8018096:	701a      	strb	r2, [r3, #0]
 8018098:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801809c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80180a0:	460a      	mov	r2, r1
 80180a2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80180a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80180a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d101      	bne.n	80180b6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80180b2:	2309      	movs	r3, #9
 80180b4:	e063      	b.n	801817e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80180b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80180ba:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80180be:	881b      	ldrh	r3, [r3, #0]
 80180c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80180c4:	d901      	bls.n	80180ca <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80180c6:	230d      	movs	r3, #13
 80180c8:	e059      	b.n	801817e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80180ca:	f107 030c 	add.w	r3, r7, #12
 80180ce:	f44f 7288 	mov.w	r2, #272	; 0x110
 80180d2:	2100      	movs	r1, #0
 80180d4:	4618      	mov	r0, r3
 80180d6:	f003 fc67 	bl	801b9a8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80180da:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80180de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80180e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80180e6:	781a      	ldrb	r2, [r3, #0]
 80180e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80180ec:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80180f0:	7819      	ldrb	r1, [r3, #0]
 80180f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80180f6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80180fa:	8818      	ldrh	r0, [r3, #0]
 80180fc:	f107 030c 	add.w	r3, r7, #12
 8018100:	9302      	str	r3, [sp, #8]
 8018102:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8018106:	9301      	str	r3, [sp, #4]
 8018108:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801810c:	9300      	str	r3, [sp, #0]
 801810e:	4623      	mov	r3, r4
 8018110:	f7ff ff05 	bl	8017f1e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8018114:	f107 030c 	add.w	r3, r7, #12
 8018118:	3310      	adds	r3, #16
 801811a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801811e:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8018122:	8812      	ldrh	r2, [r2, #0]
 8018124:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8018128:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801812c:	6809      	ldr	r1, [r1, #0]
 801812e:	4618      	mov	r0, r3
 8018130:	f003 fbff 	bl	801b932 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8018134:	2306      	movs	r3, #6
 8018136:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801813a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801813e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8018142:	881b      	ldrh	r3, [r3, #0]
 8018144:	3310      	adds	r3, #16
 8018146:	4619      	mov	r1, r3
 8018148:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801814c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8018150:	781b      	ldrb	r3, [r3, #0]
 8018152:	f107 000c 	add.w	r0, r7, #12
 8018156:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801815a:	f7f8 f8e7 	bl	801032c <SecureElementVerifyAesCmac>
 801815e:	4603      	mov	r3, r0
 8018160:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8018164:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8018168:	2b00      	cmp	r3, #0
 801816a:	d101      	bne.n	8018170 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801816c:	2300      	movs	r3, #0
 801816e:	e006      	b.n	801817e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8018170:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8018174:	2b01      	cmp	r3, #1
 8018176:	d101      	bne.n	801817c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8018178:	2301      	movs	r3, #1
 801817a:	e000      	b.n	801817e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801817c:	230e      	movs	r3, #14
}
 801817e:	4618      	mov	r0, r3
 8018180:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8018184:	46bd      	mov	sp, r7
 8018186:	bd90      	pop	{r4, r7, pc}

08018188 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8018188:	b480      	push	{r7}
 801818a:	b085      	sub	sp, #20
 801818c:	af00      	add	r7, sp, #0
 801818e:	4603      	mov	r3, r0
 8018190:	6039      	str	r1, [r7, #0]
 8018192:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8018194:	2300      	movs	r3, #0
 8018196:	73fb      	strb	r3, [r7, #15]
 8018198:	e011      	b.n	80181be <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801819a:	7bfb      	ldrb	r3, [r7, #15]
 801819c:	4a0c      	ldr	r2, [pc, #48]	; (80181d0 <GetKeyAddrItem+0x48>)
 801819e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80181a2:	79fa      	ldrb	r2, [r7, #7]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d107      	bne.n	80181b8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80181a8:	7bfb      	ldrb	r3, [r7, #15]
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	4a08      	ldr	r2, [pc, #32]	; (80181d0 <GetKeyAddrItem+0x48>)
 80181ae:	441a      	add	r2, r3
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80181b4:	2300      	movs	r3, #0
 80181b6:	e006      	b.n	80181c6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80181b8:	7bfb      	ldrb	r3, [r7, #15]
 80181ba:	3301      	adds	r3, #1
 80181bc:	73fb      	strb	r3, [r7, #15]
 80181be:	7bfb      	ldrb	r3, [r7, #15]
 80181c0:	2b01      	cmp	r3, #1
 80181c2:	d9ea      	bls.n	801819a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80181c4:	230b      	movs	r3, #11
}
 80181c6:	4618      	mov	r0, r3
 80181c8:	3714      	adds	r7, #20
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bc80      	pop	{r7}
 80181ce:	4770      	bx	lr
 80181d0:	20000110 	.word	0x20000110

080181d4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b088      	sub	sp, #32
 80181d8:	af00      	add	r7, sp, #0
 80181da:	60b9      	str	r1, [r7, #8]
 80181dc:	607a      	str	r2, [r7, #4]
 80181de:	461a      	mov	r2, r3
 80181e0:	4603      	mov	r3, r0
 80181e2:	73fb      	strb	r3, [r7, #15]
 80181e4:	4613      	mov	r3, r2
 80181e6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80181e8:	2300      	movs	r3, #0
 80181ea:	613b      	str	r3, [r7, #16]
 80181ec:	f107 0314 	add.w	r3, r7, #20
 80181f0:	2200      	movs	r2, #0
 80181f2:	601a      	str	r2, [r3, #0]
 80181f4:	605a      	str	r2, [r3, #4]
 80181f6:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80181f8:	7bfb      	ldrb	r3, [r7, #15]
 80181fa:	2b08      	cmp	r3, #8
 80181fc:	d002      	beq.n	8018204 <DeriveSessionKey10x+0x30>
 80181fe:	2b09      	cmp	r3, #9
 8018200:	d003      	beq.n	801820a <DeriveSessionKey10x+0x36>
 8018202:	e005      	b.n	8018210 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8018204:	2301      	movs	r3, #1
 8018206:	743b      	strb	r3, [r7, #16]
            break;
 8018208:	e004      	b.n	8018214 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801820a:	2302      	movs	r3, #2
 801820c:	743b      	strb	r3, [r7, #16]
            break;
 801820e:	e001      	b.n	8018214 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8018210:	230a      	movs	r3, #10
 8018212:	e02a      	b.n	801826a <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8018214:	68bb      	ldr	r3, [r7, #8]
 8018216:	b2db      	uxtb	r3, r3
 8018218:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801821a:	68bb      	ldr	r3, [r7, #8]
 801821c:	0a1b      	lsrs	r3, r3, #8
 801821e:	b2db      	uxtb	r3, r3
 8018220:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8018222:	68bb      	ldr	r3, [r7, #8]
 8018224:	0c1b      	lsrs	r3, r3, #16
 8018226:	b2db      	uxtb	r3, r3
 8018228:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	b2db      	uxtb	r3, r3
 801822e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	0a1b      	lsrs	r3, r3, #8
 8018234:	b2db      	uxtb	r3, r3
 8018236:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	0c1b      	lsrs	r3, r3, #16
 801823c:	b2db      	uxtb	r3, r3
 801823e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8018240:	89bb      	ldrh	r3, [r7, #12]
 8018242:	b2db      	uxtb	r3, r3
 8018244:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8018246:	89bb      	ldrh	r3, [r7, #12]
 8018248:	0a1b      	lsrs	r3, r3, #8
 801824a:	b29b      	uxth	r3, r3
 801824c:	b2db      	uxtb	r3, r3
 801824e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8018250:	7bfa      	ldrb	r2, [r7, #15]
 8018252:	f107 0310 	add.w	r3, r7, #16
 8018256:	2101      	movs	r1, #1
 8018258:	4618      	mov	r0, r3
 801825a:	f7f8 f913 	bl	8010484 <SecureElementDeriveAndStoreKey>
 801825e:	4603      	mov	r3, r0
 8018260:	2b00      	cmp	r3, #0
 8018262:	d001      	beq.n	8018268 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018264:	230e      	movs	r3, #14
 8018266:	e000      	b.n	801826a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018268:	2300      	movs	r3, #0
}
 801826a:	4618      	mov	r0, r3
 801826c:	3720      	adds	r7, #32
 801826e:	46bd      	mov	sp, r7
 8018270:	bd80      	pop	{r7, pc}
	...

08018274 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8018274:	b480      	push	{r7}
 8018276:	b083      	sub	sp, #12
 8018278:	af00      	add	r7, sp, #0
 801827a:	4603      	mov	r3, r0
 801827c:	6039      	str	r1, [r7, #0]
 801827e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d101      	bne.n	801828a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018286:	2309      	movs	r3, #9
 8018288:	e029      	b.n	80182de <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801828a:	79fb      	ldrb	r3, [r7, #7]
 801828c:	3b01      	subs	r3, #1
 801828e:	2b03      	cmp	r3, #3
 8018290:	d822      	bhi.n	80182d8 <GetLastFcntDown+0x64>
 8018292:	a201      	add	r2, pc, #4	; (adr r2, 8018298 <GetLastFcntDown+0x24>)
 8018294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018298:	080182a9 	.word	0x080182a9
 801829c:	080182b5 	.word	0x080182b5
 80182a0:	080182c1 	.word	0x080182c1
 80182a4:	080182cd 	.word	0x080182cd
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80182a8:	4b0f      	ldr	r3, [pc, #60]	; (80182e8 <GetLastFcntDown+0x74>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	691a      	ldr	r2, [r3, #16]
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	601a      	str	r2, [r3, #0]
            break;
 80182b2:	e013      	b.n	80182dc <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80182b4:	4b0c      	ldr	r3, [pc, #48]	; (80182e8 <GetLastFcntDown+0x74>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	695a      	ldr	r2, [r3, #20]
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	601a      	str	r2, [r3, #0]
            break;
 80182be:	e00d      	b.n	80182dc <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80182c0:	4b09      	ldr	r3, [pc, #36]	; (80182e8 <GetLastFcntDown+0x74>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	699a      	ldr	r2, [r3, #24]
 80182c6:	683b      	ldr	r3, [r7, #0]
 80182c8:	601a      	str	r2, [r3, #0]
            break;
 80182ca:	e007      	b.n	80182dc <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80182cc:	4b06      	ldr	r3, [pc, #24]	; (80182e8 <GetLastFcntDown+0x74>)
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	69da      	ldr	r2, [r3, #28]
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	601a      	str	r2, [r3, #0]
            break;
 80182d6:	e001      	b.n	80182dc <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80182d8:	2305      	movs	r3, #5
 80182da:	e000      	b.n	80182de <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80182dc:	2300      	movs	r3, #0
}
 80182de:	4618      	mov	r0, r3
 80182e0:	370c      	adds	r7, #12
 80182e2:	46bd      	mov	sp, r7
 80182e4:	bc80      	pop	{r7}
 80182e6:	4770      	bx	lr
 80182e8:	20001cb8 	.word	0x20001cb8

080182ec <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	4603      	mov	r3, r0
 80182f4:	6039      	str	r1, [r7, #0]
 80182f6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80182f8:	2300      	movs	r3, #0
 80182fa:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80182fc:	f107 020c 	add.w	r2, r7, #12
 8018300:	79fb      	ldrb	r3, [r7, #7]
 8018302:	4611      	mov	r1, r2
 8018304:	4618      	mov	r0, r3
 8018306:	f7ff ffb5 	bl	8018274 <GetLastFcntDown>
 801830a:	4603      	mov	r3, r0
 801830c:	2b00      	cmp	r3, #0
 801830e:	d001      	beq.n	8018314 <CheckFCntDown+0x28>
    {
        return false;
 8018310:	2300      	movs	r3, #0
 8018312:	e00a      	b.n	801832a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	683a      	ldr	r2, [r7, #0]
 8018318:	429a      	cmp	r2, r3
 801831a:	d803      	bhi.n	8018324 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 801831c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018322:	d101      	bne.n	8018328 <CheckFCntDown+0x3c>
    {
        return true;
 8018324:	2301      	movs	r3, #1
 8018326:	e000      	b.n	801832a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8018328:	2300      	movs	r3, #0
    }
}
 801832a:	4618      	mov	r0, r3
 801832c:	3710      	adds	r7, #16
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}
	...

08018334 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8018334:	b480      	push	{r7}
 8018336:	b083      	sub	sp, #12
 8018338:	af00      	add	r7, sp, #0
 801833a:	4603      	mov	r3, r0
 801833c:	6039      	str	r1, [r7, #0]
 801833e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8018340:	79fb      	ldrb	r3, [r7, #7]
 8018342:	3b01      	subs	r3, #1
 8018344:	2b03      	cmp	r3, #3
 8018346:	d82b      	bhi.n	80183a0 <UpdateFCntDown+0x6c>
 8018348:	a201      	add	r2, pc, #4	; (adr r2, 8018350 <UpdateFCntDown+0x1c>)
 801834a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801834e:	bf00      	nop
 8018350:	08018361 	.word	0x08018361
 8018354:	08018373 	.word	0x08018373
 8018358:	08018385 	.word	0x08018385
 801835c:	08018397 	.word	0x08018397
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8018360:	4b12      	ldr	r3, [pc, #72]	; (80183ac <UpdateFCntDown+0x78>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	683a      	ldr	r2, [r7, #0]
 8018366:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8018368:	4b10      	ldr	r3, [pc, #64]	; (80183ac <UpdateFCntDown+0x78>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	683a      	ldr	r2, [r7, #0]
 801836e:	621a      	str	r2, [r3, #32]
            break;
 8018370:	e017      	b.n	80183a2 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8018372:	4b0e      	ldr	r3, [pc, #56]	; (80183ac <UpdateFCntDown+0x78>)
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	683a      	ldr	r2, [r7, #0]
 8018378:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801837a:	4b0c      	ldr	r3, [pc, #48]	; (80183ac <UpdateFCntDown+0x78>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	683a      	ldr	r2, [r7, #0]
 8018380:	621a      	str	r2, [r3, #32]
            break;
 8018382:	e00e      	b.n	80183a2 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8018384:	4b09      	ldr	r3, [pc, #36]	; (80183ac <UpdateFCntDown+0x78>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	683a      	ldr	r2, [r7, #0]
 801838a:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 801838c:	4b07      	ldr	r3, [pc, #28]	; (80183ac <UpdateFCntDown+0x78>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	683a      	ldr	r2, [r7, #0]
 8018392:	621a      	str	r2, [r3, #32]
            break;
 8018394:	e005      	b.n	80183a2 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8018396:	4b05      	ldr	r3, [pc, #20]	; (80183ac <UpdateFCntDown+0x78>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	683a      	ldr	r2, [r7, #0]
 801839c:	61da      	str	r2, [r3, #28]
            break;
 801839e:	e000      	b.n	80183a2 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80183a0:	bf00      	nop
    }
}
 80183a2:	bf00      	nop
 80183a4:	370c      	adds	r7, #12
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bc80      	pop	{r7}
 80183aa:	4770      	bx	lr
 80183ac:	20001cb8 	.word	0x20001cb8

080183b0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80183b0:	b480      	push	{r7}
 80183b2:	b083      	sub	sp, #12
 80183b4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80183b6:	4b18      	ldr	r3, [pc, #96]	; (8018418 <ResetFCnts+0x68>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2200      	movs	r2, #0
 80183bc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80183be:	4b16      	ldr	r3, [pc, #88]	; (8018418 <ResetFCnts+0x68>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f04f 32ff 	mov.w	r2, #4294967295
 80183c6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80183c8:	4b13      	ldr	r3, [pc, #76]	; (8018418 <ResetFCnts+0x68>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	f04f 32ff 	mov.w	r2, #4294967295
 80183d0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80183d2:	4b11      	ldr	r3, [pc, #68]	; (8018418 <ResetFCnts+0x68>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	f04f 32ff 	mov.w	r2, #4294967295
 80183da:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80183dc:	4b0e      	ldr	r3, [pc, #56]	; (8018418 <ResetFCnts+0x68>)
 80183de:	681a      	ldr	r2, [r3, #0]
 80183e0:	4b0d      	ldr	r3, [pc, #52]	; (8018418 <ResetFCnts+0x68>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	6992      	ldr	r2, [r2, #24]
 80183e6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80183e8:	2300      	movs	r3, #0
 80183ea:	607b      	str	r3, [r7, #4]
 80183ec:	e00b      	b.n	8018406 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80183ee:	4b0a      	ldr	r3, [pc, #40]	; (8018418 <ResetFCnts+0x68>)
 80183f0:	681a      	ldr	r2, [r3, #0]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	3306      	adds	r3, #6
 80183f6:	009b      	lsls	r3, r3, #2
 80183f8:	4413      	add	r3, r2
 80183fa:	f04f 32ff 	mov.w	r2, #4294967295
 80183fe:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	3301      	adds	r3, #1
 8018404:	607b      	str	r3, [r7, #4]
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	2b00      	cmp	r3, #0
 801840a:	ddf0      	ble.n	80183ee <ResetFCnts+0x3e>
    }
}
 801840c:	bf00      	nop
 801840e:	bf00      	nop
 8018410:	370c      	adds	r7, #12
 8018412:	46bd      	mov	sp, r7
 8018414:	bc80      	pop	{r7}
 8018416:	4770      	bx	lr
 8018418:	20001cb8 	.word	0x20001cb8

0801841c <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 801841c:	b480      	push	{r7}
 801841e:	b083      	sub	sp, #12
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8018424:	4b06      	ldr	r3, [pc, #24]	; (8018440 <IsJoinNonce10xOk+0x24>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	689b      	ldr	r3, [r3, #8]
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	429a      	cmp	r2, r3
 801842e:	bf8c      	ite	hi
 8018430:	2301      	movhi	r3, #1
 8018432:	2300      	movls	r3, #0
 8018434:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8018436:	4618      	mov	r0, r3
 8018438:	370c      	adds	r7, #12
 801843a:	46bd      	mov	sp, r7
 801843c:	bc80      	pop	{r7}
 801843e:	4770      	bx	lr
 8018440:	20001cb8 	.word	0x20001cb8

08018444 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b082      	sub	sp, #8
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d101      	bne.n	8018456 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8018452:	2308      	movs	r3, #8
 8018454:	e01c      	b.n	8018490 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8018456:	4a10      	ldr	r2, [pc, #64]	; (8018498 <LoRaMacCryptoInit+0x54>)
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801845c:	4b0e      	ldr	r3, [pc, #56]	; (8018498 <LoRaMacCryptoInit+0x54>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	2228      	movs	r2, #40	; 0x28
 8018462:	2100      	movs	r1, #0
 8018464:	4618      	mov	r0, r3
 8018466:	f003 fa9f 	bl	801b9a8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801846a:	4b0b      	ldr	r3, [pc, #44]	; (8018498 <LoRaMacCryptoInit+0x54>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2201      	movs	r2, #1
 8018470:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8018472:	4b09      	ldr	r3, [pc, #36]	; (8018498 <LoRaMacCryptoInit+0x54>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	2201      	movs	r2, #1
 8018478:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801847a:	4b07      	ldr	r3, [pc, #28]	; (8018498 <LoRaMacCryptoInit+0x54>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	2201      	movs	r2, #1
 8018480:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8018482:	4b05      	ldr	r3, [pc, #20]	; (8018498 <LoRaMacCryptoInit+0x54>)
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	2200      	movs	r2, #0
 8018488:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801848a:	f7ff ff91 	bl	80183b0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801848e:	2300      	movs	r3, #0
}
 8018490:	4618      	mov	r0, r3
 8018492:	3708      	adds	r7, #8
 8018494:	46bd      	mov	sp, r7
 8018496:	bd80      	pop	{r7, pc}
 8018498:	20001cb8 	.word	0x20001cb8

0801849c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801849c:	b480      	push	{r7}
 801849e:	b083      	sub	sp, #12
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80184a4:	4b04      	ldr	r3, [pc, #16]	; (80184b8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	687a      	ldr	r2, [r7, #4]
 80184aa:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80184ac:	2300      	movs	r3, #0
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	370c      	adds	r7, #12
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bc80      	pop	{r7}
 80184b6:	4770      	bx	lr
 80184b8:	20001cb8 	.word	0x20001cb8

080184bc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80184bc:	b480      	push	{r7}
 80184be:	b083      	sub	sp, #12
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d101      	bne.n	80184ce <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80184ca:	2309      	movs	r3, #9
 80184cc:	e006      	b.n	80184dc <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80184ce:	4b06      	ldr	r3, [pc, #24]	; (80184e8 <LoRaMacCryptoGetFCntUp+0x2c>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	68db      	ldr	r3, [r3, #12]
 80184d4:	1c5a      	adds	r2, r3, #1
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80184da:	2300      	movs	r3, #0
}
 80184dc:	4618      	mov	r0, r3
 80184de:	370c      	adds	r7, #12
 80184e0:	46bd      	mov	sp, r7
 80184e2:	bc80      	pop	{r7}
 80184e4:	4770      	bx	lr
 80184e6:	bf00      	nop
 80184e8:	20001cb8 	.word	0x20001cb8

080184ec <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b088      	sub	sp, #32
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	4603      	mov	r3, r0
 80184f4:	60b9      	str	r1, [r7, #8]
 80184f6:	607a      	str	r2, [r7, #4]
 80184f8:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80184fa:	2300      	movs	r3, #0
 80184fc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80184fe:	2300      	movs	r3, #0
 8018500:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8018502:	2312      	movs	r3, #18
 8018504:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d101      	bne.n	8018510 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801850c:	2309      	movs	r3, #9
 801850e:	e035      	b.n	801857c <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8018510:	f107 0214 	add.w	r2, r7, #20
 8018514:	7bfb      	ldrb	r3, [r7, #15]
 8018516:	4611      	mov	r1, r2
 8018518:	4618      	mov	r0, r3
 801851a:	f7ff feab 	bl	8018274 <GetLastFcntDown>
 801851e:	4603      	mov	r3, r0
 8018520:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8018522:	7efb      	ldrb	r3, [r7, #27]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d001      	beq.n	801852c <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8018528:	7efb      	ldrb	r3, [r7, #27]
 801852a:	e027      	b.n	801857c <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 801852c:	697b      	ldr	r3, [r7, #20]
 801852e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018532:	d103      	bne.n	801853c <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	68ba      	ldr	r2, [r7, #8]
 8018538:	601a      	str	r2, [r3, #0]
 801853a:	e01e      	b.n	801857a <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801853c:	697b      	ldr	r3, [r7, #20]
 801853e:	b29b      	uxth	r3, r3
 8018540:	68ba      	ldr	r2, [r7, #8]
 8018542:	1ad3      	subs	r3, r2, r3
 8018544:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8018546:	69fb      	ldr	r3, [r7, #28]
 8018548:	2b00      	cmp	r3, #0
 801854a:	dd05      	ble.n	8018558 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801854c:	697a      	ldr	r2, [r7, #20]
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	441a      	add	r2, r3
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	601a      	str	r2, [r3, #0]
 8018556:	e010      	b.n	801857a <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8018558:	69fb      	ldr	r3, [r7, #28]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d104      	bne.n	8018568 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801855e:	697a      	ldr	r2, [r7, #20]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8018564:	2307      	movs	r3, #7
 8018566:	e009      	b.n	801857c <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	0c1b      	lsrs	r3, r3, #16
 801856c:	041b      	lsls	r3, r3, #16
 801856e:	68ba      	ldr	r2, [r7, #8]
 8018570:	4413      	add	r3, r2
 8018572:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801857a:	2300      	movs	r3, #0
}
 801857c:	4618      	mov	r0, r3
 801857e:	3720      	adds	r7, #32
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8018584:	b480      	push	{r7}
 8018586:	b085      	sub	sp, #20
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d101      	bne.n	8018596 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018592:	2309      	movs	r3, #9
 8018594:	e019      	b.n	80185ca <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8018596:	2300      	movs	r3, #0
 8018598:	60fb      	str	r3, [r7, #12]
 801859a:	e012      	b.n	80185c2 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801859c:	4b0d      	ldr	r3, [pc, #52]	; (80185d4 <LoRaMacCryptoSetMulticastReference+0x50>)
 801859e:	6819      	ldr	r1, [r3, #0]
 80185a0:	68fa      	ldr	r2, [r7, #12]
 80185a2:	4613      	mov	r3, r2
 80185a4:	005b      	lsls	r3, r3, #1
 80185a6:	4413      	add	r3, r2
 80185a8:	011b      	lsls	r3, r3, #4
 80185aa:	461a      	mov	r2, r3
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	4413      	add	r3, r2
 80185b0:	68fa      	ldr	r2, [r7, #12]
 80185b2:	3206      	adds	r2, #6
 80185b4:	0092      	lsls	r2, r2, #2
 80185b6:	440a      	add	r2, r1
 80185b8:	3204      	adds	r2, #4
 80185ba:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	3301      	adds	r3, #1
 80185c0:	60fb      	str	r3, [r7, #12]
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	dde9      	ble.n	801859c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80185c8:	2300      	movs	r3, #0
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	3714      	adds	r7, #20
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bc80      	pop	{r7}
 80185d2:	4770      	bx	lr
 80185d4:	20001cb8 	.word	0x20001cb8

080185d8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b082      	sub	sp, #8
 80185dc:	af00      	add	r7, sp, #0
 80185de:	4603      	mov	r3, r0
 80185e0:	6039      	str	r1, [r7, #0]
 80185e2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80185e4:	79fb      	ldrb	r3, [r7, #7]
 80185e6:	6839      	ldr	r1, [r7, #0]
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7f7 fe27 	bl	801023c <SecureElementSetKey>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d001      	beq.n	80185f8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80185f4:	230e      	movs	r3, #14
 80185f6:	e021      	b.n	801863c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80185f8:	79fb      	ldrb	r3, [r7, #7]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d11d      	bne.n	801863a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80185fe:	4b11      	ldr	r3, [pc, #68]	; (8018644 <LoRaMacCryptoSetKey+0x6c>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	789b      	ldrb	r3, [r3, #2]
 8018604:	210b      	movs	r1, #11
 8018606:	4618      	mov	r0, r3
 8018608:	f000 fa58 	bl	8018abc <LoRaMacCryptoDeriveLifeTimeKey>
 801860c:	4603      	mov	r3, r0
 801860e:	2b00      	cmp	r3, #0
 8018610:	d001      	beq.n	8018616 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018612:	230e      	movs	r3, #14
 8018614:	e012      	b.n	801863c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8018616:	210c      	movs	r1, #12
 8018618:	2000      	movs	r0, #0
 801861a:	f000 fa4f 	bl	8018abc <LoRaMacCryptoDeriveLifeTimeKey>
 801861e:	4603      	mov	r3, r0
 8018620:	2b00      	cmp	r3, #0
 8018622:	d001      	beq.n	8018628 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018624:	230e      	movs	r3, #14
 8018626:	e009      	b.n	801863c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8018628:	210a      	movs	r1, #10
 801862a:	2000      	movs	r0, #0
 801862c:	f000 fa46 	bl	8018abc <LoRaMacCryptoDeriveLifeTimeKey>
 8018630:	4603      	mov	r3, r0
 8018632:	2b00      	cmp	r3, #0
 8018634:	d001      	beq.n	801863a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018636:	230e      	movs	r3, #14
 8018638:	e000      	b.n	801863c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801863a:	2300      	movs	r3, #0
}
 801863c:	4618      	mov	r0, r3
 801863e:	3708      	adds	r7, #8
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	20001cb8 	.word	0x20001cb8

08018648 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b086      	sub	sp, #24
 801864c:	af02      	add	r7, sp, #8
 801864e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d101      	bne.n	801865a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018656:	2309      	movs	r3, #9
 8018658:	e02d      	b.n	80186b6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801865a:	2301      	movs	r3, #1
 801865c:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801865e:	4b18      	ldr	r3, [pc, #96]	; (80186c0 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	889a      	ldrh	r2, [r3, #4]
 8018664:	3201      	adds	r2, #1
 8018666:	b292      	uxth	r2, r2
 8018668:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801866a:	4b15      	ldr	r3, [pc, #84]	; (80186c0 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	889a      	ldrh	r2, [r3, #4]
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f000 fc1b 	bl	8018eb0 <LoRaMacSerializerJoinRequest>
 801867a:	4603      	mov	r3, r0
 801867c:	2b00      	cmp	r3, #0
 801867e:	d001      	beq.n	8018684 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018680:	2310      	movs	r3, #16
 8018682:	e018      	b.n	80186b6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6819      	ldr	r1, [r3, #0]
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	3318      	adds	r3, #24
 801868c:	7bfa      	ldrb	r2, [r7, #15]
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	4613      	mov	r3, r2
 8018692:	2213      	movs	r2, #19
 8018694:	2000      	movs	r0, #0
 8018696:	f7f7 fe2f 	bl	80102f8 <SecureElementComputeAesCmac>
 801869a:	4603      	mov	r3, r0
 801869c:	2b00      	cmp	r3, #0
 801869e:	d001      	beq.n	80186a4 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80186a0:	230e      	movs	r3, #14
 80186a2:	e008      	b.n	80186b6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80186a4:	6878      	ldr	r0, [r7, #4]
 80186a6:	f000 fc03 	bl	8018eb0 <LoRaMacSerializerJoinRequest>
 80186aa:	4603      	mov	r3, r0
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d001      	beq.n	80186b4 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80186b0:	2310      	movs	r3, #16
 80186b2:	e000      	b.n	80186b6 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80186b4:	2300      	movs	r3, #0
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	20001cb8 	.word	0x20001cb8

080186c4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80186c4:	b590      	push	{r4, r7, lr}
 80186c6:	b097      	sub	sp, #92	; 0x5c
 80186c8:	af04      	add	r7, sp, #16
 80186ca:	4603      	mov	r3, r0
 80186cc:	60b9      	str	r1, [r7, #8]
 80186ce:	607a      	str	r2, [r7, #4]
 80186d0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d002      	beq.n	80186de <LoRaMacCryptoHandleJoinAccept+0x1a>
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d101      	bne.n	80186e2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80186de:	2309      	movs	r3, #9
 80186e0:	e0d3      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80186e2:	2312      	movs	r3, #18
 80186e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80186e8:	2300      	movs	r3, #0
 80186ea:	617b      	str	r3, [r7, #20]
 80186ec:	f107 0318 	add.w	r3, r7, #24
 80186f0:	221d      	movs	r2, #29
 80186f2:	2100      	movs	r1, #0
 80186f4:	4618      	mov	r0, r3
 80186f6:	f008 f813 	bl	8020720 <memset>
    uint8_t versionMinor         = 0;
 80186fa:	2300      	movs	r3, #0
 80186fc:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80186fe:	4b65      	ldr	r3, [pc, #404]	; (8018894 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	889b      	ldrh	r3, [r3, #4]
 8018704:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681c      	ldr	r4, [r3, #0]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	791b      	ldrb	r3, [r3, #4]
 8018710:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8018714:	7bf8      	ldrb	r0, [r7, #15]
 8018716:	f107 0213 	add.w	r2, r7, #19
 801871a:	9202      	str	r2, [sp, #8]
 801871c:	f107 0214 	add.w	r2, r7, #20
 8018720:	9201      	str	r2, [sp, #4]
 8018722:	9300      	str	r3, [sp, #0]
 8018724:	4623      	mov	r3, r4
 8018726:	460a      	mov	r2, r1
 8018728:	68b9      	ldr	r1, [r7, #8]
 801872a:	f7f7 feeb 	bl	8010504 <SecureElementProcessJoinAccept>
 801872e:	4603      	mov	r3, r0
 8018730:	2b00      	cmp	r3, #0
 8018732:	d001      	beq.n	8018738 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018734:	230e      	movs	r3, #14
 8018736:	e0a8      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	6818      	ldr	r0, [r3, #0]
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	791b      	ldrb	r3, [r3, #4]
 8018740:	b29a      	uxth	r2, r3
 8018742:	f107 0314 	add.w	r3, r7, #20
 8018746:	4619      	mov	r1, r3
 8018748:	f003 f8f3 	bl	801b932 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f000 f9f0 	bl	8018b32 <LoRaMacParserJoinAccept>
 8018752:	4603      	mov	r3, r0
 8018754:	2b00      	cmp	r3, #0
 8018756:	d001      	beq.n	801875c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8018758:	230f      	movs	r3, #15
 801875a:	e096      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 801875c:	2300      	movs	r3, #0
 801875e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	799b      	ldrb	r3, [r3, #6]
 8018766:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	79db      	ldrb	r3, [r3, #7]
 801876c:	021b      	lsls	r3, r3, #8
 801876e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018770:	4313      	orrs	r3, r2
 8018772:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	7a1b      	ldrb	r3, [r3, #8]
 8018778:	041b      	lsls	r3, r3, #16
 801877a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801877c:	4313      	orrs	r3, r2
 801877e:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8018780:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018782:	f7ff fe4b 	bl	801841c <IsJoinNonce10xOk>
 8018786:	4603      	mov	r3, r0
 8018788:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 801878c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018790:	2b00      	cmp	r3, #0
 8018792:	d010      	beq.n	80187b6 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8018794:	4b3f      	ldr	r3, [pc, #252]	; (8018894 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801879a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 801879c:	7cfb      	ldrb	r3, [r7, #19]
 801879e:	210b      	movs	r1, #11
 80187a0:	4618      	mov	r0, r3
 80187a2:	f000 f98b 	bl	8018abc <LoRaMacCryptoDeriveLifeTimeKey>
 80187a6:	4603      	mov	r3, r0
 80187a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80187ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d005      	beq.n	80187c0 <LoRaMacCryptoHandleJoinAccept+0xfc>
 80187b4:	e001      	b.n	80187ba <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80187b6:	2303      	movs	r3, #3
 80187b8:	e067      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 80187ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80187be:	e064      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80187c0:	210c      	movs	r1, #12
 80187c2:	2000      	movs	r0, #0
 80187c4:	f000 f97a 	bl	8018abc <LoRaMacCryptoDeriveLifeTimeKey>
 80187c8:	4603      	mov	r3, r0
 80187ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80187ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d002      	beq.n	80187dc <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80187d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80187da:	e056      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80187dc:	210a      	movs	r1, #10
 80187de:	2000      	movs	r0, #0
 80187e0:	f000 f96c 	bl	8018abc <LoRaMacCryptoDeriveLifeTimeKey>
 80187e4:	4603      	mov	r3, r0
 80187e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80187ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d002      	beq.n	80187f8 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80187f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80187f6:	e048      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	7a5b      	ldrb	r3, [r3, #9]
 80187fc:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	7a9b      	ldrb	r3, [r3, #10]
 8018802:	021b      	lsls	r3, r3, #8
 8018804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018806:	4313      	orrs	r3, r2
 8018808:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	7adb      	ldrb	r3, [r3, #11]
 801880e:	041b      	lsls	r3, r3, #16
 8018810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018812:	4313      	orrs	r3, r2
 8018814:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8018816:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801881a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801881c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801881e:	2009      	movs	r0, #9
 8018820:	f7ff fcd8 	bl	80181d4 <DeriveSessionKey10x>
 8018824:	4603      	mov	r3, r0
 8018826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801882a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801882e:	2b00      	cmp	r3, #0
 8018830:	d002      	beq.n	8018838 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8018832:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018836:	e028      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8018838:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801883c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801883e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018840:	2008      	movs	r0, #8
 8018842:	f7ff fcc7 	bl	80181d4 <DeriveSessionKey10x>
 8018846:	4603      	mov	r3, r0
 8018848:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801884c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018850:	2b00      	cmp	r3, #0
 8018852:	d002      	beq.n	801885a <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8018854:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018858:	e017      	b.n	801888a <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801885a:	4b0e      	ldr	r3, [pc, #56]	; (8018894 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	7cfa      	ldrb	r2, [r7, #19]
 8018860:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8018862:	4b0c      	ldr	r3, [pc, #48]	; (8018894 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	2200      	movs	r2, #0
 8018868:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801886a:	4b0a      	ldr	r3, [pc, #40]	; (8018894 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	f04f 32ff 	mov.w	r2, #4294967295
 8018872:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8018874:	4b07      	ldr	r3, [pc, #28]	; (8018894 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	f04f 32ff 	mov.w	r2, #4294967295
 801887c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801887e:	4b05      	ldr	r3, [pc, #20]	; (8018894 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	f04f 32ff 	mov.w	r2, #4294967295
 8018886:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8018888:	2300      	movs	r3, #0
}
 801888a:	4618      	mov	r0, r3
 801888c:	374c      	adds	r7, #76	; 0x4c
 801888e:	46bd      	mov	sp, r7
 8018890:	bd90      	pop	{r4, r7, pc}
 8018892:	bf00      	nop
 8018894:	20001cb8 	.word	0x20001cb8

08018898 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8018898:	b590      	push	{r4, r7, lr}
 801889a:	b08b      	sub	sp, #44	; 0x2c
 801889c:	af04      	add	r7, sp, #16
 801889e:	60f8      	str	r0, [r7, #12]
 80188a0:	607b      	str	r3, [r7, #4]
 80188a2:	460b      	mov	r3, r1
 80188a4:	72fb      	strb	r3, [r7, #11]
 80188a6:	4613      	mov	r3, r2
 80188a8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80188aa:	2312      	movs	r3, #18
 80188ac:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80188ae:	2309      	movs	r3, #9
 80188b0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d101      	bne.n	80188bc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80188b8:	2309      	movs	r3, #9
 80188ba:	e05f      	b.n	801897c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80188bc:	4b31      	ldr	r3, [pc, #196]	; (8018984 <LoRaMacCryptoSecureMessage+0xec>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	68db      	ldr	r3, [r3, #12]
 80188c2:	68fa      	ldr	r2, [r7, #12]
 80188c4:	429a      	cmp	r2, r3
 80188c6:	d201      	bcs.n	80188cc <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80188c8:	2306      	movs	r3, #6
 80188ca:	e057      	b.n	801897c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d101      	bne.n	80188da <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80188d6:	2308      	movs	r3, #8
 80188d8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80188da:	4b2a      	ldr	r3, [pc, #168]	; (8018984 <LoRaMacCryptoSecureMessage+0xec>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	68db      	ldr	r3, [r3, #12]
 80188e0:	68fa      	ldr	r2, [r7, #12]
 80188e2:	429a      	cmp	r2, r3
 80188e4:	d916      	bls.n	8018914 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188f0:	b219      	sxth	r1, r3
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	689c      	ldr	r4, [r3, #8]
 80188f6:	7dfa      	ldrb	r2, [r7, #23]
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	9301      	str	r3, [sp, #4]
 80188fc:	2300      	movs	r3, #0
 80188fe:	9300      	str	r3, [sp, #0]
 8018900:	4623      	mov	r3, r4
 8018902:	f7ff fa73 	bl	8017dec <PayloadEncrypt>
 8018906:	4603      	mov	r3, r0
 8018908:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801890a:	7dbb      	ldrb	r3, [r7, #22]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d001      	beq.n	8018914 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8018910:	7dbb      	ldrb	r3, [r7, #22]
 8018912:	e033      	b.n	801897c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f000 fb4d 	bl	8018fb4 <LoRaMacSerializerData>
 801891a:	4603      	mov	r3, r0
 801891c:	2b00      	cmp	r3, #0
 801891e:	d001      	beq.n	8018924 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018920:	2310      	movs	r3, #16
 8018922:	e02b      	b.n	801897c <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8018924:	2308      	movs	r3, #8
 8018926:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	6818      	ldr	r0, [r3, #0]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	791b      	ldrb	r3, [r3, #4]
 8018930:	b29b      	uxth	r3, r3
 8018932:	3b04      	subs	r3, #4
 8018934:	b299      	uxth	r1, r3
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	689b      	ldr	r3, [r3, #8]
 801893a:	687a      	ldr	r2, [r7, #4]
 801893c:	322c      	adds	r2, #44	; 0x2c
 801893e:	7dfc      	ldrb	r4, [r7, #23]
 8018940:	9203      	str	r2, [sp, #12]
 8018942:	68fa      	ldr	r2, [r7, #12]
 8018944:	9202      	str	r2, [sp, #8]
 8018946:	9301      	str	r3, [sp, #4]
 8018948:	2300      	movs	r3, #0
 801894a:	9300      	str	r3, [sp, #0]
 801894c:	2300      	movs	r3, #0
 801894e:	4622      	mov	r2, r4
 8018950:	f7ff fb4d 	bl	8017fee <ComputeCmacB0>
 8018954:	4603      	mov	r3, r0
 8018956:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018958:	7dbb      	ldrb	r3, [r7, #22]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d001      	beq.n	8018962 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801895e:	7dbb      	ldrb	r3, [r7, #22]
 8018960:	e00c      	b.n	801897c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	f000 fb26 	bl	8018fb4 <LoRaMacSerializerData>
 8018968:	4603      	mov	r3, r0
 801896a:	2b00      	cmp	r3, #0
 801896c:	d001      	beq.n	8018972 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801896e:	2310      	movs	r3, #16
 8018970:	e004      	b.n	801897c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8018972:	4b04      	ldr	r3, [pc, #16]	; (8018984 <LoRaMacCryptoSecureMessage+0xec>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	68fa      	ldr	r2, [r7, #12]
 8018978:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801897a:	2300      	movs	r3, #0
}
 801897c:	4618      	mov	r0, r3
 801897e:	371c      	adds	r7, #28
 8018980:	46bd      	mov	sp, r7
 8018982:	bd90      	pop	{r4, r7, pc}
 8018984:	20001cb8 	.word	0x20001cb8

08018988 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8018988:	b590      	push	{r4, r7, lr}
 801898a:	b08b      	sub	sp, #44	; 0x2c
 801898c:	af04      	add	r7, sp, #16
 801898e:	60b9      	str	r1, [r7, #8]
 8018990:	607b      	str	r3, [r7, #4]
 8018992:	4603      	mov	r3, r0
 8018994:	73fb      	strb	r3, [r7, #15]
 8018996:	4613      	mov	r3, r2
 8018998:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801899c:	2b00      	cmp	r3, #0
 801899e:	d101      	bne.n	80189a4 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80189a0:	2309      	movs	r3, #9
 80189a2:	e084      	b.n	8018aae <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80189a4:	7bbb      	ldrb	r3, [r7, #14]
 80189a6:	6879      	ldr	r1, [r7, #4]
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7ff fc9f 	bl	80182ec <CheckFCntDown>
 80189ae:	4603      	mov	r3, r0
 80189b0:	f083 0301 	eor.w	r3, r3, #1
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d001      	beq.n	80189be <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80189ba:	2306      	movs	r3, #6
 80189bc:	e077      	b.n	8018aae <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80189be:	2312      	movs	r3, #18
 80189c0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80189c2:	2309      	movs	r3, #9
 80189c4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80189c6:	2308      	movs	r3, #8
 80189c8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80189ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189cc:	f000 f97c 	bl	8018cc8 <LoRaMacParserData>
 80189d0:	4603      	mov	r3, r0
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d001      	beq.n	80189da <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80189d6:	230f      	movs	r3, #15
 80189d8:	e069      	b.n	8018aae <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80189da:	f107 0210 	add.w	r2, r7, #16
 80189de:	7bfb      	ldrb	r3, [r7, #15]
 80189e0:	4611      	mov	r1, r2
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7ff fbd0 	bl	8018188 <GetKeyAddrItem>
 80189e8:	4603      	mov	r3, r0
 80189ea:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80189ec:	7d7b      	ldrb	r3, [r7, #21]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d001      	beq.n	80189f6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80189f2:	7d7b      	ldrb	r3, [r7, #21]
 80189f4:	e05b      	b.n	8018aae <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	785b      	ldrb	r3, [r3, #1]
 80189fa:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80189fc:	693b      	ldr	r3, [r7, #16]
 80189fe:	789b      	ldrb	r3, [r3, #2]
 8018a00:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8018a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a04:	689b      	ldr	r3, [r3, #8]
 8018a06:	68ba      	ldr	r2, [r7, #8]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d001      	beq.n	8018a10 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8018a0c:	2302      	movs	r3, #2
 8018a0e:	e04e      	b.n	8018aae <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8018a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a12:	7b1b      	ldrb	r3, [r3, #12]
 8018a14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018a18:	b2db      	uxtb	r3, r3
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	bf14      	ite	ne
 8018a1e:	2301      	movne	r3, #1
 8018a20:	2300      	moveq	r3, #0
 8018a22:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8018a24:	4b24      	ldr	r3, [pc, #144]	; (8018ab8 <LoRaMacCryptoUnsecureMessage+0x130>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	789b      	ldrb	r3, [r3, #2]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d101      	bne.n	8018a32 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8018a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a34:	6818      	ldr	r0, [r3, #0]
 8018a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a38:	791b      	ldrb	r3, [r3, #4]
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	3b04      	subs	r3, #4
 8018a3e:	b299      	uxth	r1, r3
 8018a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a44:	7dbc      	ldrb	r4, [r7, #22]
 8018a46:	7d3a      	ldrb	r2, [r7, #20]
 8018a48:	9303      	str	r3, [sp, #12]
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	9302      	str	r3, [sp, #8]
 8018a4e:	68bb      	ldr	r3, [r7, #8]
 8018a50:	9301      	str	r3, [sp, #4]
 8018a52:	2301      	movs	r3, #1
 8018a54:	9300      	str	r3, [sp, #0]
 8018a56:	4623      	mov	r3, r4
 8018a58:	f7ff fb07 	bl	801806a <VerifyCmacB0>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018a60:	7d7b      	ldrb	r3, [r7, #21]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d001      	beq.n	8018a6a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8018a66:	7d7b      	ldrb	r3, [r7, #21]
 8018a68:	e021      	b.n	8018aae <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8018a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d101      	bne.n	8018a78 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8018a74:	2308      	movs	r3, #8
 8018a76:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8018a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a82:	b219      	sxth	r1, r3
 8018a84:	7dfa      	ldrb	r2, [r7, #23]
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	9301      	str	r3, [sp, #4]
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	9300      	str	r3, [sp, #0]
 8018a8e:	68bb      	ldr	r3, [r7, #8]
 8018a90:	f7ff f9ac 	bl	8017dec <PayloadEncrypt>
 8018a94:	4603      	mov	r3, r0
 8018a96:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018a98:	7d7b      	ldrb	r3, [r7, #21]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d001      	beq.n	8018aa2 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8018a9e:	7d7b      	ldrb	r3, [r7, #21]
 8018aa0:	e005      	b.n	8018aae <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8018aa2:	7bbb      	ldrb	r3, [r7, #14]
 8018aa4:	6879      	ldr	r1, [r7, #4]
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f7ff fc44 	bl	8018334 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8018aac:	2300      	movs	r3, #0
}
 8018aae:	4618      	mov	r0, r3
 8018ab0:	371c      	adds	r7, #28
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd90      	pop	{r4, r7, pc}
 8018ab6:	bf00      	nop
 8018ab8:	20001cb8 	.word	0x20001cb8

08018abc <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b088      	sub	sp, #32
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	460a      	mov	r2, r1
 8018ac6:	71fb      	strb	r3, [r7, #7]
 8018ac8:	4613      	mov	r3, r2
 8018aca:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8018acc:	2300      	movs	r3, #0
 8018ace:	60fb      	str	r3, [r7, #12]
 8018ad0:	f107 0310 	add.w	r3, r7, #16
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	601a      	str	r2, [r3, #0]
 8018ad8:	605a      	str	r2, [r3, #4]
 8018ada:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8018adc:	2300      	movs	r3, #0
 8018ade:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8018ae0:	79bb      	ldrb	r3, [r7, #6]
 8018ae2:	2b0c      	cmp	r3, #12
 8018ae4:	d00b      	beq.n	8018afe <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8018ae6:	2b0c      	cmp	r3, #12
 8018ae8:	dc0f      	bgt.n	8018b0a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8018aea:	2b0a      	cmp	r3, #10
 8018aec:	d00a      	beq.n	8018b04 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8018aee:	2b0b      	cmp	r3, #11
 8018af0:	d10b      	bne.n	8018b0a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8018af2:	79fb      	ldrb	r3, [r7, #7]
 8018af4:	2b01      	cmp	r3, #1
 8018af6:	d10a      	bne.n	8018b0e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8018af8:	2320      	movs	r3, #32
 8018afa:	733b      	strb	r3, [r7, #12]
            }
            break;
 8018afc:	e007      	b.n	8018b0e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8018afe:	230b      	movs	r3, #11
 8018b00:	77fb      	strb	r3, [r7, #31]
            break;
 8018b02:	e005      	b.n	8018b10 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8018b04:	2330      	movs	r3, #48	; 0x30
 8018b06:	733b      	strb	r3, [r7, #12]
            break;
 8018b08:	e002      	b.n	8018b10 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8018b0a:	230a      	movs	r3, #10
 8018b0c:	e00d      	b.n	8018b2a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8018b0e:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8018b10:	79ba      	ldrb	r2, [r7, #6]
 8018b12:	7ff9      	ldrb	r1, [r7, #31]
 8018b14:	f107 030c 	add.w	r3, r7, #12
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7f7 fcb3 	bl	8010484 <SecureElementDeriveAndStoreKey>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d001      	beq.n	8018b28 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018b24:	230e      	movs	r3, #14
 8018b26:	e000      	b.n	8018b2a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018b28:	2300      	movs	r3, #0
}
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	3720      	adds	r7, #32
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bd80      	pop	{r7, pc}

08018b32 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8018b32:	b580      	push	{r7, lr}
 8018b34:	b084      	sub	sp, #16
 8018b36:	af00      	add	r7, sp, #0
 8018b38:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d003      	beq.n	8018b48 <LoRaMacParserJoinAccept+0x16>
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d101      	bne.n	8018b4c <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8018b48:	2302      	movs	r3, #2
 8018b4a:	e0b9      	b.n	8018cc0 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681a      	ldr	r2, [r3, #0]
 8018b54:	89fb      	ldrh	r3, [r7, #14]
 8018b56:	1c59      	adds	r1, r3, #1
 8018b58:	81f9      	strh	r1, [r7, #14]
 8018b5a:	4413      	add	r3, r2
 8018b5c:	781a      	ldrb	r2, [r3, #0]
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	1d98      	adds	r0, r3, #6
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681a      	ldr	r2, [r3, #0]
 8018b6a:	89fb      	ldrh	r3, [r7, #14]
 8018b6c:	4413      	add	r3, r2
 8018b6e:	2203      	movs	r2, #3
 8018b70:	4619      	mov	r1, r3
 8018b72:	f002 fede 	bl	801b932 <memcpy1>
    bufItr = bufItr + 3;
 8018b76:	89fb      	ldrh	r3, [r7, #14]
 8018b78:	3303      	adds	r3, #3
 8018b7a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f103 0009 	add.w	r0, r3, #9
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	681a      	ldr	r2, [r3, #0]
 8018b86:	89fb      	ldrh	r3, [r7, #14]
 8018b88:	4413      	add	r3, r2
 8018b8a:	2203      	movs	r2, #3
 8018b8c:	4619      	mov	r1, r3
 8018b8e:	f002 fed0 	bl	801b932 <memcpy1>
    bufItr = bufItr + 3;
 8018b92:	89fb      	ldrh	r3, [r7, #14]
 8018b94:	3303      	adds	r3, #3
 8018b96:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681a      	ldr	r2, [r3, #0]
 8018b9c:	89fb      	ldrh	r3, [r7, #14]
 8018b9e:	1c59      	adds	r1, r3, #1
 8018ba0:	81f9      	strh	r1, [r7, #14]
 8018ba2:	4413      	add	r3, r2
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	89fb      	ldrh	r3, [r7, #14]
 8018bb2:	1c59      	adds	r1, r3, #1
 8018bb4:	81f9      	strh	r1, [r7, #14]
 8018bb6:	4413      	add	r3, r2
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	021a      	lsls	r2, r3, #8
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	68db      	ldr	r3, [r3, #12]
 8018bc0:	431a      	orrs	r2, r3
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681a      	ldr	r2, [r3, #0]
 8018bca:	89fb      	ldrh	r3, [r7, #14]
 8018bcc:	1c59      	adds	r1, r3, #1
 8018bce:	81f9      	strh	r1, [r7, #14]
 8018bd0:	4413      	add	r3, r2
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	041a      	lsls	r2, r3, #16
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	68db      	ldr	r3, [r3, #12]
 8018bda:	431a      	orrs	r2, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	89fb      	ldrh	r3, [r7, #14]
 8018be6:	1c59      	adds	r1, r3, #1
 8018be8:	81f9      	strh	r1, [r7, #14]
 8018bea:	4413      	add	r3, r2
 8018bec:	781b      	ldrb	r3, [r3, #0]
 8018bee:	061a      	lsls	r2, r3, #24
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	68db      	ldr	r3, [r3, #12]
 8018bf4:	431a      	orrs	r2, r3
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	89fb      	ldrh	r3, [r7, #14]
 8018c00:	1c59      	adds	r1, r3, #1
 8018c02:	81f9      	strh	r1, [r7, #14]
 8018c04:	4413      	add	r3, r2
 8018c06:	781a      	ldrb	r2, [r3, #0]
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681a      	ldr	r2, [r3, #0]
 8018c10:	89fb      	ldrh	r3, [r7, #14]
 8018c12:	1c59      	adds	r1, r3, #1
 8018c14:	81f9      	strh	r1, [r7, #14]
 8018c16:	4413      	add	r3, r2
 8018c18:	781a      	ldrb	r2, [r3, #0]
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	791b      	ldrb	r3, [r3, #4]
 8018c22:	1f1a      	subs	r2, r3, #4
 8018c24:	89fb      	ldrh	r3, [r7, #14]
 8018c26:	1ad3      	subs	r3, r2, r3
 8018c28:	2b10      	cmp	r3, #16
 8018c2a:	d10e      	bne.n	8018c4a <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f103 0012 	add.w	r0, r3, #18
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681a      	ldr	r2, [r3, #0]
 8018c36:	89fb      	ldrh	r3, [r7, #14]
 8018c38:	4413      	add	r3, r2
 8018c3a:	2210      	movs	r2, #16
 8018c3c:	4619      	mov	r1, r3
 8018c3e:	f002 fe78 	bl	801b932 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8018c42:	89fb      	ldrh	r3, [r7, #14]
 8018c44:	3310      	adds	r3, #16
 8018c46:	81fb      	strh	r3, [r7, #14]
 8018c48:	e008      	b.n	8018c5c <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	791b      	ldrb	r3, [r3, #4]
 8018c4e:	1f1a      	subs	r2, r3, #4
 8018c50:	89fb      	ldrh	r3, [r7, #14]
 8018c52:	1ad3      	subs	r3, r2, r3
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	dd01      	ble.n	8018c5c <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8018c58:	2301      	movs	r3, #1
 8018c5a:	e031      	b.n	8018cc0 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	681a      	ldr	r2, [r3, #0]
 8018c60:	89fb      	ldrh	r3, [r7, #14]
 8018c62:	1c59      	adds	r1, r3, #1
 8018c64:	81f9      	strh	r1, [r7, #14]
 8018c66:	4413      	add	r3, r2
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	461a      	mov	r2, r3
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681a      	ldr	r2, [r3, #0]
 8018c74:	89fb      	ldrh	r3, [r7, #14]
 8018c76:	1c59      	adds	r1, r3, #1
 8018c78:	81f9      	strh	r1, [r7, #14]
 8018c7a:	4413      	add	r3, r2
 8018c7c:	781b      	ldrb	r3, [r3, #0]
 8018c7e:	021a      	lsls	r2, r3, #8
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c84:	431a      	orrs	r2, r3
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681a      	ldr	r2, [r3, #0]
 8018c8e:	89fb      	ldrh	r3, [r7, #14]
 8018c90:	1c59      	adds	r1, r3, #1
 8018c92:	81f9      	strh	r1, [r7, #14]
 8018c94:	4413      	add	r3, r2
 8018c96:	781b      	ldrb	r3, [r3, #0]
 8018c98:	041a      	lsls	r2, r3, #16
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c9e:	431a      	orrs	r2, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	89fb      	ldrh	r3, [r7, #14]
 8018caa:	1c59      	adds	r1, r3, #1
 8018cac:	81f9      	strh	r1, [r7, #14]
 8018cae:	4413      	add	r3, r2
 8018cb0:	781b      	ldrb	r3, [r3, #0]
 8018cb2:	061a      	lsls	r2, r3, #24
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb8:	431a      	orrs	r2, r3
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8018cbe:	2300      	movs	r3, #0
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	3710      	adds	r7, #16
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd80      	pop	{r7, pc}

08018cc8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b084      	sub	sp, #16
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d003      	beq.n	8018cde <LoRaMacParserData+0x16>
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d101      	bne.n	8018ce2 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8018cde:	2302      	movs	r3, #2
 8018ce0:	e0e2      	b.n	8018ea8 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681a      	ldr	r2, [r3, #0]
 8018cea:	89fb      	ldrh	r3, [r7, #14]
 8018cec:	1c59      	adds	r1, r3, #1
 8018cee:	81f9      	strh	r1, [r7, #14]
 8018cf0:	4413      	add	r3, r2
 8018cf2:	781a      	ldrb	r2, [r3, #0]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	89fb      	ldrh	r3, [r7, #14]
 8018cfe:	1c59      	adds	r1, r3, #1
 8018d00:	81f9      	strh	r1, [r7, #14]
 8018d02:	4413      	add	r3, r2
 8018d04:	781b      	ldrb	r3, [r3, #0]
 8018d06:	461a      	mov	r2, r3
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681a      	ldr	r2, [r3, #0]
 8018d10:	89fb      	ldrh	r3, [r7, #14]
 8018d12:	1c59      	adds	r1, r3, #1
 8018d14:	81f9      	strh	r1, [r7, #14]
 8018d16:	4413      	add	r3, r2
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	021a      	lsls	r2, r3, #8
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	689b      	ldr	r3, [r3, #8]
 8018d20:	431a      	orrs	r2, r3
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681a      	ldr	r2, [r3, #0]
 8018d2a:	89fb      	ldrh	r3, [r7, #14]
 8018d2c:	1c59      	adds	r1, r3, #1
 8018d2e:	81f9      	strh	r1, [r7, #14]
 8018d30:	4413      	add	r3, r2
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	041a      	lsls	r2, r3, #16
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	689b      	ldr	r3, [r3, #8]
 8018d3a:	431a      	orrs	r2, r3
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681a      	ldr	r2, [r3, #0]
 8018d44:	89fb      	ldrh	r3, [r7, #14]
 8018d46:	1c59      	adds	r1, r3, #1
 8018d48:	81f9      	strh	r1, [r7, #14]
 8018d4a:	4413      	add	r3, r2
 8018d4c:	781b      	ldrb	r3, [r3, #0]
 8018d4e:	061a      	lsls	r2, r3, #24
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	689b      	ldr	r3, [r3, #8]
 8018d54:	431a      	orrs	r2, r3
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	681a      	ldr	r2, [r3, #0]
 8018d5e:	89fb      	ldrh	r3, [r7, #14]
 8018d60:	1c59      	adds	r1, r3, #1
 8018d62:	81f9      	strh	r1, [r7, #14]
 8018d64:	4413      	add	r3, r2
 8018d66:	781a      	ldrb	r2, [r3, #0]
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681a      	ldr	r2, [r3, #0]
 8018d70:	89fb      	ldrh	r3, [r7, #14]
 8018d72:	1c59      	adds	r1, r3, #1
 8018d74:	81f9      	strh	r1, [r7, #14]
 8018d76:	4413      	add	r3, r2
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	b29a      	uxth	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681a      	ldr	r2, [r3, #0]
 8018d84:	89fb      	ldrh	r3, [r7, #14]
 8018d86:	1c59      	adds	r1, r3, #1
 8018d88:	81f9      	strh	r1, [r7, #14]
 8018d8a:	4413      	add	r3, r2
 8018d8c:	781b      	ldrb	r3, [r3, #0]
 8018d8e:	0219      	lsls	r1, r3, #8
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	89db      	ldrh	r3, [r3, #14]
 8018d94:	b21a      	sxth	r2, r3
 8018d96:	b20b      	sxth	r3, r1
 8018d98:	4313      	orrs	r3, r2
 8018d9a:	b21b      	sxth	r3, r3
 8018d9c:	b29a      	uxth	r2, r3
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	f103 0010 	add.w	r0, r3, #16
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681a      	ldr	r2, [r3, #0]
 8018dac:	89fb      	ldrh	r3, [r7, #14]
 8018dae:	18d1      	adds	r1, r2, r3
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	7b1b      	ldrb	r3, [r3, #12]
 8018db4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	b29b      	uxth	r3, r3
 8018dbc:	461a      	mov	r2, r3
 8018dbe:	f002 fdb8 	bl	801b932 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	7b1b      	ldrb	r3, [r3, #12]
 8018dc6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	b29a      	uxth	r2, r3
 8018dce:	89fb      	ldrh	r3, [r7, #14]
 8018dd0:	4413      	add	r3, r2
 8018dd2:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2200      	movs	r2, #0
 8018de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	791b      	ldrb	r3, [r3, #4]
 8018de8:	461a      	mov	r2, r3
 8018dea:	89fb      	ldrh	r3, [r7, #14]
 8018dec:	1ad3      	subs	r3, r2, r3
 8018dee:	2b04      	cmp	r3, #4
 8018df0:	dd28      	ble.n	8018e44 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	681a      	ldr	r2, [r3, #0]
 8018df6:	89fb      	ldrh	r3, [r7, #14]
 8018df8:	1c59      	adds	r1, r3, #1
 8018dfa:	81f9      	strh	r1, [r7, #14]
 8018dfc:	4413      	add	r3, r2
 8018dfe:	781a      	ldrb	r2, [r3, #0]
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	791a      	ldrb	r2, [r3, #4]
 8018e0a:	89fb      	ldrh	r3, [r7, #14]
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	1ad3      	subs	r3, r2, r3
 8018e10:	b2db      	uxtb	r3, r3
 8018e12:	3b04      	subs	r3, #4
 8018e14:	b2da      	uxtb	r2, r3
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681a      	ldr	r2, [r3, #0]
 8018e24:	89fb      	ldrh	r3, [r7, #14]
 8018e26:	18d1      	adds	r1, r2, r3
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e2e:	b29b      	uxth	r3, r3
 8018e30:	461a      	mov	r2, r3
 8018e32:	f002 fd7e 	bl	801b932 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e3c:	b29a      	uxth	r2, r3
 8018e3e:	89fb      	ldrh	r3, [r7, #14]
 8018e40:	4413      	add	r3, r2
 8018e42:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	791b      	ldrb	r3, [r3, #4]
 8018e4c:	3b04      	subs	r3, #4
 8018e4e:	4413      	add	r3, r2
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	461a      	mov	r2, r3
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6819      	ldr	r1, [r3, #0]
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	791b      	ldrb	r3, [r3, #4]
 8018e64:	3b03      	subs	r3, #3
 8018e66:	440b      	add	r3, r1
 8018e68:	781b      	ldrb	r3, [r3, #0]
 8018e6a:	021b      	lsls	r3, r3, #8
 8018e6c:	431a      	orrs	r2, r3
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	6819      	ldr	r1, [r3, #0]
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	791b      	ldrb	r3, [r3, #4]
 8018e7e:	3b02      	subs	r3, #2
 8018e80:	440b      	add	r3, r1
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	041b      	lsls	r3, r3, #16
 8018e86:	431a      	orrs	r2, r3
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6819      	ldr	r1, [r3, #0]
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	791b      	ldrb	r3, [r3, #4]
 8018e98:	3b01      	subs	r3, #1
 8018e9a:	440b      	add	r3, r1
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	061b      	lsls	r3, r3, #24
 8018ea0:	431a      	orrs	r2, r3
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8018ea6:	2300      	movs	r3, #0
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	3710      	adds	r7, #16
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}

08018eb0 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b084      	sub	sp, #16
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d003      	beq.n	8018ec6 <LoRaMacSerializerJoinRequest+0x16>
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d101      	bne.n	8018eca <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8018ec6:	2301      	movs	r3, #1
 8018ec8:	e070      	b.n	8018fac <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8018eca:	2300      	movs	r3, #0
 8018ecc:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	791b      	ldrb	r3, [r3, #4]
 8018ed2:	2b16      	cmp	r3, #22
 8018ed4:	d801      	bhi.n	8018eda <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8018ed6:	2302      	movs	r3, #2
 8018ed8:	e068      	b.n	8018fac <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681a      	ldr	r2, [r3, #0]
 8018ede:	89fb      	ldrh	r3, [r7, #14]
 8018ee0:	1c59      	adds	r1, r3, #1
 8018ee2:	81f9      	strh	r1, [r7, #14]
 8018ee4:	4413      	add	r3, r2
 8018ee6:	687a      	ldr	r2, [r7, #4]
 8018ee8:	7952      	ldrb	r2, [r2, #5]
 8018eea:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681a      	ldr	r2, [r3, #0]
 8018ef0:	89fb      	ldrh	r3, [r7, #14]
 8018ef2:	18d0      	adds	r0, r2, r3
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	3306      	adds	r3, #6
 8018ef8:	2208      	movs	r2, #8
 8018efa:	4619      	mov	r1, r3
 8018efc:	f002 fd34 	bl	801b968 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8018f00:	89fb      	ldrh	r3, [r7, #14]
 8018f02:	3308      	adds	r3, #8
 8018f04:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	681a      	ldr	r2, [r3, #0]
 8018f0a:	89fb      	ldrh	r3, [r7, #14]
 8018f0c:	18d0      	adds	r0, r2, r3
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	330e      	adds	r3, #14
 8018f12:	2208      	movs	r2, #8
 8018f14:	4619      	mov	r1, r3
 8018f16:	f002 fd27 	bl	801b968 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8018f1a:	89fb      	ldrh	r3, [r7, #14]
 8018f1c:	3308      	adds	r3, #8
 8018f1e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	8ad9      	ldrh	r1, [r3, #22]
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	681a      	ldr	r2, [r3, #0]
 8018f28:	89fb      	ldrh	r3, [r7, #14]
 8018f2a:	1c58      	adds	r0, r3, #1
 8018f2c:	81f8      	strh	r0, [r7, #14]
 8018f2e:	4413      	add	r3, r2
 8018f30:	b2ca      	uxtb	r2, r1
 8018f32:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	8adb      	ldrh	r3, [r3, #22]
 8018f38:	0a1b      	lsrs	r3, r3, #8
 8018f3a:	b299      	uxth	r1, r3
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	681a      	ldr	r2, [r3, #0]
 8018f40:	89fb      	ldrh	r3, [r7, #14]
 8018f42:	1c58      	adds	r0, r3, #1
 8018f44:	81f8      	strh	r0, [r7, #14]
 8018f46:	4413      	add	r3, r2
 8018f48:	b2ca      	uxtb	r2, r1
 8018f4a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6999      	ldr	r1, [r3, #24]
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681a      	ldr	r2, [r3, #0]
 8018f54:	89fb      	ldrh	r3, [r7, #14]
 8018f56:	1c58      	adds	r0, r3, #1
 8018f58:	81f8      	strh	r0, [r7, #14]
 8018f5a:	4413      	add	r3, r2
 8018f5c:	b2ca      	uxtb	r2, r1
 8018f5e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	699b      	ldr	r3, [r3, #24]
 8018f64:	0a19      	lsrs	r1, r3, #8
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681a      	ldr	r2, [r3, #0]
 8018f6a:	89fb      	ldrh	r3, [r7, #14]
 8018f6c:	1c58      	adds	r0, r3, #1
 8018f6e:	81f8      	strh	r0, [r7, #14]
 8018f70:	4413      	add	r3, r2
 8018f72:	b2ca      	uxtb	r2, r1
 8018f74:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	699b      	ldr	r3, [r3, #24]
 8018f7a:	0c19      	lsrs	r1, r3, #16
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681a      	ldr	r2, [r3, #0]
 8018f80:	89fb      	ldrh	r3, [r7, #14]
 8018f82:	1c58      	adds	r0, r3, #1
 8018f84:	81f8      	strh	r0, [r7, #14]
 8018f86:	4413      	add	r3, r2
 8018f88:	b2ca      	uxtb	r2, r1
 8018f8a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	699b      	ldr	r3, [r3, #24]
 8018f90:	0e19      	lsrs	r1, r3, #24
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	89fb      	ldrh	r3, [r7, #14]
 8018f98:	1c58      	adds	r0, r3, #1
 8018f9a:	81f8      	strh	r0, [r7, #14]
 8018f9c:	4413      	add	r3, r2
 8018f9e:	b2ca      	uxtb	r2, r1
 8018fa0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8018fa2:	89fb      	ldrh	r3, [r7, #14]
 8018fa4:	b2da      	uxtb	r2, r3
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8018faa:	2300      	movs	r3, #0
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3710      	adds	r7, #16
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b084      	sub	sp, #16
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d003      	beq.n	8018fca <LoRaMacSerializerData+0x16>
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d101      	bne.n	8018fce <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8018fca:	2301      	movs	r3, #1
 8018fcc:	e0e5      	b.n	801919a <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8018fd2:	2308      	movs	r3, #8
 8018fd4:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	7b1b      	ldrb	r3, [r3, #12]
 8018fda:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	b29a      	uxth	r2, r3
 8018fe2:	89bb      	ldrh	r3, [r7, #12]
 8018fe4:	4413      	add	r3, r2
 8018fe6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d002      	beq.n	8018ff8 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8018ff2:	89bb      	ldrh	r3, [r7, #12]
 8018ff4:	3301      	adds	r3, #1
 8018ff6:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ffe:	b29a      	uxth	r2, r3
 8019000:	89bb      	ldrh	r3, [r7, #12]
 8019002:	4413      	add	r3, r2
 8019004:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8019006:	89bb      	ldrh	r3, [r7, #12]
 8019008:	3304      	adds	r3, #4
 801900a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	791b      	ldrb	r3, [r3, #4]
 8019010:	b29b      	uxth	r3, r3
 8019012:	89ba      	ldrh	r2, [r7, #12]
 8019014:	429a      	cmp	r2, r3
 8019016:	d901      	bls.n	801901c <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8019018:	2302      	movs	r3, #2
 801901a:	e0be      	b.n	801919a <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	681a      	ldr	r2, [r3, #0]
 8019020:	89fb      	ldrh	r3, [r7, #14]
 8019022:	1c59      	adds	r1, r3, #1
 8019024:	81f9      	strh	r1, [r7, #14]
 8019026:	4413      	add	r3, r2
 8019028:	687a      	ldr	r2, [r7, #4]
 801902a:	7952      	ldrb	r2, [r2, #5]
 801902c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	6899      	ldr	r1, [r3, #8]
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	681a      	ldr	r2, [r3, #0]
 8019036:	89fb      	ldrh	r3, [r7, #14]
 8019038:	1c58      	adds	r0, r3, #1
 801903a:	81f8      	strh	r0, [r7, #14]
 801903c:	4413      	add	r3, r2
 801903e:	b2ca      	uxtb	r2, r1
 8019040:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	689b      	ldr	r3, [r3, #8]
 8019046:	0a19      	lsrs	r1, r3, #8
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681a      	ldr	r2, [r3, #0]
 801904c:	89fb      	ldrh	r3, [r7, #14]
 801904e:	1c58      	adds	r0, r3, #1
 8019050:	81f8      	strh	r0, [r7, #14]
 8019052:	4413      	add	r3, r2
 8019054:	b2ca      	uxtb	r2, r1
 8019056:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	689b      	ldr	r3, [r3, #8]
 801905c:	0c19      	lsrs	r1, r3, #16
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681a      	ldr	r2, [r3, #0]
 8019062:	89fb      	ldrh	r3, [r7, #14]
 8019064:	1c58      	adds	r0, r3, #1
 8019066:	81f8      	strh	r0, [r7, #14]
 8019068:	4413      	add	r3, r2
 801906a:	b2ca      	uxtb	r2, r1
 801906c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	689b      	ldr	r3, [r3, #8]
 8019072:	0e19      	lsrs	r1, r3, #24
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681a      	ldr	r2, [r3, #0]
 8019078:	89fb      	ldrh	r3, [r7, #14]
 801907a:	1c58      	adds	r0, r3, #1
 801907c:	81f8      	strh	r0, [r7, #14]
 801907e:	4413      	add	r3, r2
 8019080:	b2ca      	uxtb	r2, r1
 8019082:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681a      	ldr	r2, [r3, #0]
 8019088:	89fb      	ldrh	r3, [r7, #14]
 801908a:	1c59      	adds	r1, r3, #1
 801908c:	81f9      	strh	r1, [r7, #14]
 801908e:	4413      	add	r3, r2
 8019090:	687a      	ldr	r2, [r7, #4]
 8019092:	7b12      	ldrb	r2, [r2, #12]
 8019094:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	89d9      	ldrh	r1, [r3, #14]
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681a      	ldr	r2, [r3, #0]
 801909e:	89fb      	ldrh	r3, [r7, #14]
 80190a0:	1c58      	adds	r0, r3, #1
 80190a2:	81f8      	strh	r0, [r7, #14]
 80190a4:	4413      	add	r3, r2
 80190a6:	b2ca      	uxtb	r2, r1
 80190a8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	89db      	ldrh	r3, [r3, #14]
 80190ae:	0a1b      	lsrs	r3, r3, #8
 80190b0:	b299      	uxth	r1, r3
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	681a      	ldr	r2, [r3, #0]
 80190b6:	89fb      	ldrh	r3, [r7, #14]
 80190b8:	1c58      	adds	r0, r3, #1
 80190ba:	81f8      	strh	r0, [r7, #14]
 80190bc:	4413      	add	r3, r2
 80190be:	b2ca      	uxtb	r2, r1
 80190c0:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	681a      	ldr	r2, [r3, #0]
 80190c6:	89fb      	ldrh	r3, [r7, #14]
 80190c8:	18d0      	adds	r0, r2, r3
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	f103 0110 	add.w	r1, r3, #16
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	7b1b      	ldrb	r3, [r3, #12]
 80190d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80190d8:	b2db      	uxtb	r3, r3
 80190da:	b29b      	uxth	r3, r3
 80190dc:	461a      	mov	r2, r3
 80190de:	f002 fc28 	bl	801b932 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	7b1b      	ldrb	r3, [r3, #12]
 80190e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	b29a      	uxth	r2, r3
 80190ee:	89fb      	ldrh	r3, [r7, #14]
 80190f0:	4413      	add	r3, r2
 80190f2:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d009      	beq.n	8019112 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	681a      	ldr	r2, [r3, #0]
 8019102:	89fb      	ldrh	r3, [r7, #14]
 8019104:	1c59      	adds	r1, r3, #1
 8019106:	81f9      	strh	r1, [r7, #14]
 8019108:	4413      	add	r3, r2
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019110:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	681a      	ldr	r2, [r3, #0]
 8019116:	89fb      	ldrh	r3, [r7, #14]
 8019118:	18d0      	adds	r0, r2, r3
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019124:	b29b      	uxth	r3, r3
 8019126:	461a      	mov	r2, r3
 8019128:	f002 fc03 	bl	801b932 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019132:	b29a      	uxth	r2, r3
 8019134:	89fb      	ldrh	r3, [r7, #14]
 8019136:	4413      	add	r3, r2
 8019138:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681a      	ldr	r2, [r3, #0]
 8019142:	89fb      	ldrh	r3, [r7, #14]
 8019144:	1c58      	adds	r0, r3, #1
 8019146:	81f8      	strh	r0, [r7, #14]
 8019148:	4413      	add	r3, r2
 801914a:	b2ca      	uxtb	r2, r1
 801914c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019152:	0a19      	lsrs	r1, r3, #8
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681a      	ldr	r2, [r3, #0]
 8019158:	89fb      	ldrh	r3, [r7, #14]
 801915a:	1c58      	adds	r0, r3, #1
 801915c:	81f8      	strh	r0, [r7, #14]
 801915e:	4413      	add	r3, r2
 8019160:	b2ca      	uxtb	r2, r1
 8019162:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019168:	0c19      	lsrs	r1, r3, #16
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	681a      	ldr	r2, [r3, #0]
 801916e:	89fb      	ldrh	r3, [r7, #14]
 8019170:	1c58      	adds	r0, r3, #1
 8019172:	81f8      	strh	r0, [r7, #14]
 8019174:	4413      	add	r3, r2
 8019176:	b2ca      	uxtb	r2, r1
 8019178:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801917e:	0e19      	lsrs	r1, r3, #24
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	681a      	ldr	r2, [r3, #0]
 8019184:	89fb      	ldrh	r3, [r7, #14]
 8019186:	1c58      	adds	r0, r3, #1
 8019188:	81f8      	strh	r0, [r7, #14]
 801918a:	4413      	add	r3, r2
 801918c:	b2ca      	uxtb	r2, r1
 801918e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8019190:	89fb      	ldrh	r3, [r7, #14]
 8019192:	b2da      	uxtb	r2, r3
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8019198:	2300      	movs	r3, #0
}
 801919a:	4618      	mov	r0, r3
 801919c:	3710      	adds	r7, #16
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd80      	pop	{r7, pc}

080191a2 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80191a2:	b480      	push	{r7}
 80191a4:	b083      	sub	sp, #12
 80191a6:	af00      	add	r7, sp, #0
 80191a8:	4603      	mov	r3, r0
 80191aa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80191ac:	79fb      	ldrb	r3, [r7, #7]
 80191ae:	2b08      	cmp	r3, #8
 80191b0:	d101      	bne.n	80191b6 <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80191b2:	2301      	movs	r3, #1
 80191b4:	e000      	b.n	80191b8 <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80191b6:	2300      	movs	r3, #0
        }
    }
}
 80191b8:	4618      	mov	r0, r3
 80191ba:	370c      	adds	r7, #12
 80191bc:	46bd      	mov	sp, r7
 80191be:	bc80      	pop	{r7}
 80191c0:	4770      	bx	lr

080191c2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80191c2:	b580      	push	{r7, lr}
 80191c4:	b084      	sub	sp, #16
 80191c6:	af00      	add	r7, sp, #0
 80191c8:	4603      	mov	r3, r0
 80191ca:	6039      	str	r1, [r7, #0]
 80191cc:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80191ce:	2300      	movs	r3, #0
 80191d0:	60bb      	str	r3, [r7, #8]
    switch( region )
 80191d2:	79fb      	ldrb	r3, [r7, #7]
 80191d4:	2b08      	cmp	r3, #8
 80191d6:	d105      	bne.n	80191e4 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80191d8:	6838      	ldr	r0, [r7, #0]
 80191da:	f001 fa11 	bl	801a600 <RegionUS915GetPhyParam>
 80191de:	4603      	mov	r3, r0
 80191e0:	60fb      	str	r3, [r7, #12]
 80191e2:	e001      	b.n	80191e8 <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80191e4:	68bb      	ldr	r3, [r7, #8]
 80191e6:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	4618      	mov	r0, r3
 80191ec:	3710      	adds	r7, #16
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}

080191f2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80191f2:	b580      	push	{r7, lr}
 80191f4:	b082      	sub	sp, #8
 80191f6:	af00      	add	r7, sp, #0
 80191f8:	4603      	mov	r3, r0
 80191fa:	6039      	str	r1, [r7, #0]
 80191fc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80191fe:	79fb      	ldrb	r3, [r7, #7]
 8019200:	2b08      	cmp	r3, #8
 8019202:	d103      	bne.n	801920c <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 8019204:	6838      	ldr	r0, [r7, #0]
 8019206:	f001 fb57 	bl	801a8b8 <RegionUS915SetBandTxDone>
 801920a:	e000      	b.n	801920e <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801920c:	bf00      	nop
        }
    }
}
 801920e:	3708      	adds	r7, #8
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}

08019214 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b082      	sub	sp, #8
 8019218:	af00      	add	r7, sp, #0
 801921a:	4603      	mov	r3, r0
 801921c:	6039      	str	r1, [r7, #0]
 801921e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019220:	79fb      	ldrb	r3, [r7, #7]
 8019222:	2b08      	cmp	r3, #8
 8019224:	d103      	bne.n	801922e <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 8019226:	6838      	ldr	r0, [r7, #0]
 8019228:	f001 fb72 	bl	801a910 <RegionUS915InitDefaults>
 801922c:	e000      	b.n	8019230 <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801922e:	bf00      	nop
        }
    }
}
 8019230:	bf00      	nop
 8019232:	3708      	adds	r7, #8
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}

08019238 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b082      	sub	sp, #8
 801923c:	af00      	add	r7, sp, #0
 801923e:	4603      	mov	r3, r0
 8019240:	6039      	str	r1, [r7, #0]
 8019242:	71fb      	strb	r3, [r7, #7]
 8019244:	4613      	mov	r3, r2
 8019246:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8019248:	79fb      	ldrb	r3, [r7, #7]
 801924a:	2b08      	cmp	r3, #8
 801924c:	d106      	bne.n	801925c <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801924e:	79bb      	ldrb	r3, [r7, #6]
 8019250:	4619      	mov	r1, r3
 8019252:	6838      	ldr	r0, [r7, #0]
 8019254:	f001 fc8e 	bl	801ab74 <RegionUS915Verify>
 8019258:	4603      	mov	r3, r0
 801925a:	e000      	b.n	801925e <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 801925c:	2300      	movs	r3, #0
        }
    }
}
 801925e:	4618      	mov	r0, r3
 8019260:	3708      	adds	r7, #8
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}

08019266 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8019266:	b580      	push	{r7, lr}
 8019268:	b082      	sub	sp, #8
 801926a:	af00      	add	r7, sp, #0
 801926c:	4603      	mov	r3, r0
 801926e:	6039      	str	r1, [r7, #0]
 8019270:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019272:	79fb      	ldrb	r3, [r7, #7]
 8019274:	2b08      	cmp	r3, #8
 8019276:	d103      	bne.n	8019280 <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 8019278:	6838      	ldr	r0, [r7, #0]
 801927a:	f001 fcf1 	bl	801ac60 <RegionUS915ApplyCFList>
 801927e:	e000      	b.n	8019282 <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8019280:	bf00      	nop
        }
    }
}
 8019282:	bf00      	nop
 8019284:	3708      	adds	r7, #8
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}

0801928a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801928a:	b580      	push	{r7, lr}
 801928c:	b082      	sub	sp, #8
 801928e:	af00      	add	r7, sp, #0
 8019290:	4603      	mov	r3, r0
 8019292:	6039      	str	r1, [r7, #0]
 8019294:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019296:	79fb      	ldrb	r3, [r7, #7]
 8019298:	2b08      	cmp	r3, #8
 801929a:	d104      	bne.n	80192a6 <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 801929c:	6838      	ldr	r0, [r7, #0]
 801929e:	f001 fd53 	bl	801ad48 <RegionUS915ChanMaskSet>
 80192a2:	4603      	mov	r3, r0
 80192a4:	e000      	b.n	80192a8 <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80192a6:	2300      	movs	r3, #0
        }
    }
}
 80192a8:	4618      	mov	r0, r3
 80192aa:	3708      	adds	r7, #8
 80192ac:	46bd      	mov	sp, r7
 80192ae:	bd80      	pop	{r7, pc}

080192b0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	603b      	str	r3, [r7, #0]
 80192b8:	4603      	mov	r3, r0
 80192ba:	71fb      	strb	r3, [r7, #7]
 80192bc:	460b      	mov	r3, r1
 80192be:	71bb      	strb	r3, [r7, #6]
 80192c0:	4613      	mov	r3, r2
 80192c2:	717b      	strb	r3, [r7, #5]
    switch( region )
 80192c4:	79fb      	ldrb	r3, [r7, #7]
 80192c6:	2b08      	cmp	r3, #8
 80192c8:	d107      	bne.n	80192da <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80192ca:	7979      	ldrb	r1, [r7, #5]
 80192cc:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80192d0:	693b      	ldr	r3, [r7, #16]
 80192d2:	683a      	ldr	r2, [r7, #0]
 80192d4:	f001 fda0 	bl	801ae18 <RegionUS915ComputeRxWindowParameters>
 80192d8:	e000      	b.n	80192dc <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80192da:	bf00      	nop
        }
    }
}
 80192dc:	bf00      	nop
 80192de:	3708      	adds	r7, #8
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}

080192e4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b084      	sub	sp, #16
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	4603      	mov	r3, r0
 80192ec:	60b9      	str	r1, [r7, #8]
 80192ee:	607a      	str	r2, [r7, #4]
 80192f0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80192f2:	7bfb      	ldrb	r3, [r7, #15]
 80192f4:	2b08      	cmp	r3, #8
 80192f6:	d105      	bne.n	8019304 <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80192f8:	6879      	ldr	r1, [r7, #4]
 80192fa:	68b8      	ldr	r0, [r7, #8]
 80192fc:	f001 fdd6 	bl	801aeac <RegionUS915RxConfig>
 8019300:	4603      	mov	r3, r0
 8019302:	e000      	b.n	8019306 <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8019304:	2300      	movs	r3, #0
        }
    }
}
 8019306:	4618      	mov	r0, r3
 8019308:	3710      	adds	r7, #16
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}

0801930e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801930e:	b580      	push	{r7, lr}
 8019310:	b084      	sub	sp, #16
 8019312:	af00      	add	r7, sp, #0
 8019314:	60b9      	str	r1, [r7, #8]
 8019316:	607a      	str	r2, [r7, #4]
 8019318:	603b      	str	r3, [r7, #0]
 801931a:	4603      	mov	r3, r0
 801931c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801931e:	7bfb      	ldrb	r3, [r7, #15]
 8019320:	2b08      	cmp	r3, #8
 8019322:	d106      	bne.n	8019332 <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8019324:	683a      	ldr	r2, [r7, #0]
 8019326:	6879      	ldr	r1, [r7, #4]
 8019328:	68b8      	ldr	r0, [r7, #8]
 801932a:	f001 fe43 	bl	801afb4 <RegionUS915TxConfig>
 801932e:	4603      	mov	r3, r0
 8019330:	e000      	b.n	8019334 <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8019332:	2300      	movs	r3, #0
        }
    }
}
 8019334:	4618      	mov	r0, r3
 8019336:	3710      	adds	r7, #16
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}

0801933c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b086      	sub	sp, #24
 8019340:	af02      	add	r7, sp, #8
 8019342:	60b9      	str	r1, [r7, #8]
 8019344:	607a      	str	r2, [r7, #4]
 8019346:	603b      	str	r3, [r7, #0]
 8019348:	4603      	mov	r3, r0
 801934a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801934c:	7bfb      	ldrb	r3, [r7, #15]
 801934e:	2b08      	cmp	r3, #8
 8019350:	d109      	bne.n	8019366 <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8019352:	69fb      	ldr	r3, [r7, #28]
 8019354:	9300      	str	r3, [sp, #0]
 8019356:	69bb      	ldr	r3, [r7, #24]
 8019358:	683a      	ldr	r2, [r7, #0]
 801935a:	6879      	ldr	r1, [r7, #4]
 801935c:	68b8      	ldr	r0, [r7, #8]
 801935e:	f001 fed3 	bl	801b108 <RegionUS915LinkAdrReq>
 8019362:	4603      	mov	r3, r0
 8019364:	e000      	b.n	8019368 <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8019366:	2300      	movs	r3, #0
        }
    }
}
 8019368:	4618      	mov	r0, r3
 801936a:	3710      	adds	r7, #16
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}

08019370 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b082      	sub	sp, #8
 8019374:	af00      	add	r7, sp, #0
 8019376:	4603      	mov	r3, r0
 8019378:	6039      	str	r1, [r7, #0]
 801937a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801937c:	79fb      	ldrb	r3, [r7, #7]
 801937e:	2b08      	cmp	r3, #8
 8019380:	d104      	bne.n	801938c <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8019382:	6838      	ldr	r0, [r7, #0]
 8019384:	f002 f8da 	bl	801b53c <RegionUS915RxParamSetupReq>
 8019388:	4603      	mov	r3, r0
 801938a:	e000      	b.n	801938e <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801938c:	2300      	movs	r3, #0
        }
    }
}
 801938e:	4618      	mov	r0, r3
 8019390:	3708      	adds	r7, #8
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}

08019396 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8019396:	b580      	push	{r7, lr}
 8019398:	b082      	sub	sp, #8
 801939a:	af00      	add	r7, sp, #0
 801939c:	4603      	mov	r3, r0
 801939e:	6039      	str	r1, [r7, #0]
 80193a0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80193a2:	79fb      	ldrb	r3, [r7, #7]
 80193a4:	2b08      	cmp	r3, #8
 80193a6:	d104      	bne.n	80193b2 <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80193a8:	6838      	ldr	r0, [r7, #0]
 80193aa:	f002 f913 	bl	801b5d4 <RegionUS915NewChannelReq>
 80193ae:	4603      	mov	r3, r0
 80193b0:	e000      	b.n	80193b4 <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80193b2:	2300      	movs	r3, #0
        }
    }
}
 80193b4:	4618      	mov	r0, r3
 80193b6:	3708      	adds	r7, #8
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}

080193bc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	4603      	mov	r3, r0
 80193c4:	6039      	str	r1, [r7, #0]
 80193c6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80193c8:	79fb      	ldrb	r3, [r7, #7]
 80193ca:	2b08      	cmp	r3, #8
 80193cc:	d104      	bne.n	80193d8 <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80193ce:	6838      	ldr	r0, [r7, #0]
 80193d0:	f002 f90b 	bl	801b5ea <RegionUS915TxParamSetupReq>
 80193d4:	4603      	mov	r3, r0
 80193d6:	e000      	b.n	80193da <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80193d8:	2300      	movs	r3, #0
        }
    }
}
 80193da:	4618      	mov	r0, r3
 80193dc:	3708      	adds	r7, #8
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}

080193e2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80193e2:	b580      	push	{r7, lr}
 80193e4:	b082      	sub	sp, #8
 80193e6:	af00      	add	r7, sp, #0
 80193e8:	4603      	mov	r3, r0
 80193ea:	6039      	str	r1, [r7, #0]
 80193ec:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80193ee:	79fb      	ldrb	r3, [r7, #7]
 80193f0:	2b08      	cmp	r3, #8
 80193f2:	d104      	bne.n	80193fe <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80193f4:	6838      	ldr	r0, [r7, #0]
 80193f6:	f002 f903 	bl	801b600 <RegionUS915DlChannelReq>
 80193fa:	4603      	mov	r3, r0
 80193fc:	e000      	b.n	8019400 <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80193fe:	2300      	movs	r3, #0
        }
    }
}
 8019400:	4618      	mov	r0, r3
 8019402:	3708      	adds	r7, #8
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}

08019408 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
 801940e:	4603      	mov	r3, r0
 8019410:	71fb      	strb	r3, [r7, #7]
 8019412:	460b      	mov	r3, r1
 8019414:	71bb      	strb	r3, [r7, #6]
 8019416:	4613      	mov	r3, r2
 8019418:	717b      	strb	r3, [r7, #5]
    switch( region )
 801941a:	79fb      	ldrb	r3, [r7, #7]
 801941c:	2b08      	cmp	r3, #8
 801941e:	d108      	bne.n	8019432 <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8019420:	797a      	ldrb	r2, [r7, #5]
 8019422:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019426:	4611      	mov	r1, r2
 8019428:	4618      	mov	r0, r3
 801942a:	f002 f8f5 	bl	801b618 <RegionUS915AlternateDr>
 801942e:	4603      	mov	r3, r0
 8019430:	e000      	b.n	8019434 <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8019432:	2300      	movs	r3, #0
        }
    }
}
 8019434:	4618      	mov	r0, r3
 8019436:	3708      	adds	r7, #8
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}

0801943c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b084      	sub	sp, #16
 8019440:	af00      	add	r7, sp, #0
 8019442:	60b9      	str	r1, [r7, #8]
 8019444:	607a      	str	r2, [r7, #4]
 8019446:	603b      	str	r3, [r7, #0]
 8019448:	4603      	mov	r3, r0
 801944a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801944c:	7bfb      	ldrb	r3, [r7, #15]
 801944e:	2b08      	cmp	r3, #8
 8019450:	d107      	bne.n	8019462 <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8019452:	69bb      	ldr	r3, [r7, #24]
 8019454:	683a      	ldr	r2, [r7, #0]
 8019456:	6879      	ldr	r1, [r7, #4]
 8019458:	68b8      	ldr	r0, [r7, #8]
 801945a:	f002 f913 	bl	801b684 <RegionUS915NextChannel>
 801945e:	4603      	mov	r3, r0
 8019460:	e000      	b.n	8019464 <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8019462:	2309      	movs	r3, #9
        }
    }
}
 8019464:	4618      	mov	r0, r3
 8019466:	3710      	adds	r7, #16
 8019468:	46bd      	mov	sp, r7
 801946a:	bd80      	pop	{r7, pc}

0801946c <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801946c:	b590      	push	{r4, r7, lr}
 801946e:	b083      	sub	sp, #12
 8019470:	af00      	add	r7, sp, #0
 8019472:	4604      	mov	r4, r0
 8019474:	4608      	mov	r0, r1
 8019476:	4611      	mov	r1, r2
 8019478:	461a      	mov	r2, r3
 801947a:	4623      	mov	r3, r4
 801947c:	71fb      	strb	r3, [r7, #7]
 801947e:	4603      	mov	r3, r0
 8019480:	71bb      	strb	r3, [r7, #6]
 8019482:	460b      	mov	r3, r1
 8019484:	717b      	strb	r3, [r7, #5]
 8019486:	4613      	mov	r3, r2
 8019488:	713b      	strb	r3, [r7, #4]
    switch( region )
 801948a:	79fb      	ldrb	r3, [r7, #7]
 801948c:	2b08      	cmp	r3, #8
 801948e:	d109      	bne.n	80194a4 <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8019490:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8019494:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8019498:	79bb      	ldrb	r3, [r7, #6]
 801949a:	4618      	mov	r0, r3
 801949c:	f002 f9e0 	bl	801b860 <RegionUS915ApplyDrOffset>
 80194a0:	4603      	mov	r3, r0
 80194a2:	e000      	b.n	80194a6 <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80194a4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	370c      	adds	r7, #12
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd90      	pop	{r4, r7, pc}
	...

080194b0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80194b0:	b480      	push	{r7}
 80194b2:	b083      	sub	sp, #12
 80194b4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80194b6:	4b04      	ldr	r3, [pc, #16]	; (80194c8 <RegionGetVersion+0x18>)
 80194b8:	607b      	str	r3, [r7, #4]

    return version;
 80194ba:	687b      	ldr	r3, [r7, #4]
}
 80194bc:	4618      	mov	r0, r3
 80194be:	370c      	adds	r7, #12
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bc80      	pop	{r7}
 80194c4:	4770      	bx	lr
 80194c6:	bf00      	nop
 80194c8:	02010001 	.word	0x02010001

080194cc <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80194cc:	b480      	push	{r7}
 80194ce:	b087      	sub	sp, #28
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	4603      	mov	r3, r0
 80194d4:	60b9      	str	r1, [r7, #8]
 80194d6:	607a      	str	r2, [r7, #4]
 80194d8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80194da:	68bb      	ldr	r3, [r7, #8]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d002      	beq.n	80194e6 <FindAvailable125kHzChannels+0x1a>
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d101      	bne.n	80194ea <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80194e6:	2303      	movs	r3, #3
 80194e8:	e021      	b.n	801952e <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	2200      	movs	r2, #0
 80194ee:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80194f0:	2300      	movs	r3, #0
 80194f2:	75fb      	strb	r3, [r7, #23]
 80194f4:	e017      	b.n	8019526 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80194f6:	89fa      	ldrh	r2, [r7, #14]
 80194f8:	7dfb      	ldrb	r3, [r7, #23]
 80194fa:	fa42 f303 	asr.w	r3, r2, r3
 80194fe:	f003 0301 	and.w	r3, r3, #1
 8019502:	2b00      	cmp	r3, #0
 8019504:	d00c      	beq.n	8019520 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	781b      	ldrb	r3, [r3, #0]
 801950a:	461a      	mov	r2, r3
 801950c:	68bb      	ldr	r3, [r7, #8]
 801950e:	4413      	add	r3, r2
 8019510:	7dfa      	ldrb	r2, [r7, #23]
 8019512:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	781b      	ldrb	r3, [r3, #0]
 8019518:	3301      	adds	r3, #1
 801951a:	b2da      	uxtb	r2, r3
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8019520:	7dfb      	ldrb	r3, [r7, #23]
 8019522:	3301      	adds	r3, #1
 8019524:	75fb      	strb	r3, [r7, #23]
 8019526:	7dfb      	ldrb	r3, [r7, #23]
 8019528:	2b07      	cmp	r3, #7
 801952a:	d9e4      	bls.n	80194f6 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 801952c:	2300      	movs	r3, #0
}
 801952e:	4618      	mov	r0, r3
 8019530:	371c      	adds	r7, #28
 8019532:	46bd      	mov	sp, r7
 8019534:	bc80      	pop	{r7}
 8019536:	4770      	bx	lr

08019538 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8019538:	b590      	push	{r4, r7, lr}
 801953a:	b089      	sub	sp, #36	; 0x24
 801953c:	af00      	add	r7, sp, #0
 801953e:	60f8      	str	r0, [r7, #12]
 8019540:	60b9      	str	r1, [r7, #8]
 8019542:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8019544:	2300      	movs	r3, #0
 8019546:	617b      	str	r3, [r7, #20]
 8019548:	2300      	movs	r3, #0
 801954a:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 801954c:	2300      	movs	r3, #0
 801954e:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d005      	beq.n	8019562 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d002      	beq.n	8019562 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d101      	bne.n	8019566 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019562:	2303      	movs	r3, #3
 8019564:	e055      	b.n	8019612 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	781b      	ldrb	r3, [r3, #0]
 801956a:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801956c:	7f7b      	ldrb	r3, [r7, #29]
 801956e:	085b      	lsrs	r3, r3, #1
 8019570:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8019572:	7f7b      	ldrb	r3, [r7, #29]
 8019574:	f003 0301 	and.w	r3, r3, #1
 8019578:	b2db      	uxtb	r3, r3
 801957a:	2b00      	cmp	r3, #0
 801957c:	d107      	bne.n	801958e <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801957e:	7f3b      	ldrb	r3, [r7, #28]
 8019580:	005b      	lsls	r3, r3, #1
 8019582:	68fa      	ldr	r2, [r7, #12]
 8019584:	4413      	add	r3, r2
 8019586:	881b      	ldrh	r3, [r3, #0]
 8019588:	b2db      	uxtb	r3, r3
 801958a:	83fb      	strh	r3, [r7, #30]
 801958c:	e006      	b.n	801959c <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801958e:	7f3b      	ldrb	r3, [r7, #28]
 8019590:	005b      	lsls	r3, r3, #1
 8019592:	68fa      	ldr	r2, [r7, #12]
 8019594:	4413      	add	r3, r2
 8019596:	881b      	ldrh	r3, [r3, #0]
 8019598:	0a1b      	lsrs	r3, r3, #8
 801959a:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801959c:	f107 0213 	add.w	r2, r7, #19
 80195a0:	f107 0114 	add.w	r1, r7, #20
 80195a4:	8bfb      	ldrh	r3, [r7, #30]
 80195a6:	4618      	mov	r0, r3
 80195a8:	f7ff ff90 	bl	80194cc <FindAvailable125kHzChannels>
 80195ac:	4603      	mov	r3, r0
 80195ae:	2b03      	cmp	r3, #3
 80195b0:	d101      	bne.n	80195b6 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80195b2:	2303      	movs	r3, #3
 80195b4:	e02d      	b.n	8019612 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80195b6:	7cfb      	ldrb	r3, [r7, #19]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d011      	beq.n	80195e0 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80195bc:	7f7b      	ldrb	r3, [r7, #29]
 80195be:	00db      	lsls	r3, r3, #3
 80195c0:	b2dc      	uxtb	r4, r3
 80195c2:	7cfb      	ldrb	r3, [r7, #19]
 80195c4:	3b01      	subs	r3, #1
 80195c6:	4619      	mov	r1, r3
 80195c8:	2000      	movs	r0, #0
 80195ca:	f002 f99b 	bl	801b904 <randr>
 80195ce:	4603      	mov	r3, r0
 80195d0:	3320      	adds	r3, #32
 80195d2:	443b      	add	r3, r7
 80195d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80195d8:	4423      	add	r3, r4
 80195da:	b2da      	uxtb	r2, r3
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80195e0:	7f7b      	ldrb	r3, [r7, #29]
 80195e2:	3301      	adds	r3, #1
 80195e4:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80195e6:	7f7b      	ldrb	r3, [r7, #29]
 80195e8:	2b07      	cmp	r3, #7
 80195ea:	d901      	bls.n	80195f0 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80195ec:	2300      	movs	r3, #0
 80195ee:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80195f0:	7cfb      	ldrb	r3, [r7, #19]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d104      	bne.n	8019600 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80195f6:	68bb      	ldr	r3, [r7, #8]
 80195f8:	781b      	ldrb	r3, [r3, #0]
 80195fa:	7f7a      	ldrb	r2, [r7, #29]
 80195fc:	429a      	cmp	r2, r3
 80195fe:	d1b5      	bne.n	801956c <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8019600:	7cfb      	ldrb	r3, [r7, #19]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d004      	beq.n	8019610 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8019606:	68bb      	ldr	r3, [r7, #8]
 8019608:	7f7a      	ldrb	r2, [r7, #29]
 801960a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801960c:	2300      	movs	r3, #0
 801960e:	e000      	b.n	8019612 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8019610:	2303      	movs	r3, #3
}
 8019612:	4618      	mov	r0, r3
 8019614:	3724      	adds	r7, #36	; 0x24
 8019616:	46bd      	mov	sp, r7
 8019618:	bd90      	pop	{r4, r7, pc}

0801961a <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801961a:	b480      	push	{r7}
 801961c:	b085      	sub	sp, #20
 801961e:	af00      	add	r7, sp, #0
 8019620:	4603      	mov	r3, r0
 8019622:	60b9      	str	r1, [r7, #8]
 8019624:	607a      	str	r2, [r7, #4]
 8019626:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8019628:	7bfb      	ldrb	r3, [r7, #15]
 801962a:	687a      	ldr	r2, [r7, #4]
 801962c:	fb03 f202 	mul.w	r2, r3, r2
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	4413      	add	r3, r2
}
 8019634:	4618      	mov	r0, r3
 8019636:	3714      	adds	r7, #20
 8019638:	46bd      	mov	sp, r7
 801963a:	bc80      	pop	{r7}
 801963c:	4770      	bx	lr

0801963e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801963e:	b480      	push	{r7}
 8019640:	b087      	sub	sp, #28
 8019642:	af00      	add	r7, sp, #0
 8019644:	60f8      	str	r0, [r7, #12]
 8019646:	4608      	mov	r0, r1
 8019648:	4639      	mov	r1, r7
 801964a:	e881 000c 	stmia.w	r1, {r2, r3}
 801964e:	4603      	mov	r3, r0
 8019650:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	881b      	ldrh	r3, [r3, #0]
 8019656:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8019658:	7afb      	ldrb	r3, [r7, #11]
 801965a:	f083 0301 	eor.w	r3, r3, #1
 801965e:	b2db      	uxtb	r3, r3
 8019660:	2b00      	cmp	r3, #0
 8019662:	d01b      	beq.n	801969c <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019664:	f242 7310 	movw	r3, #10000	; 0x2710
 8019668:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8019670:	d202      	bcs.n	8019678 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8019672:	2364      	movs	r3, #100	; 0x64
 8019674:	82bb      	strh	r3, [r7, #20]
 8019676:	e00b      	b.n	8019690 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801967e:	4293      	cmp	r3, r2
 8019680:	d803      	bhi.n	801968a <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8019682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019686:	82bb      	strh	r3, [r7, #20]
 8019688:	e002      	b.n	8019690 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801968a:	f242 7310 	movw	r3, #10000	; 0x2710
 801968e:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8019690:	8aba      	ldrh	r2, [r7, #20]
 8019692:	8afb      	ldrh	r3, [r7, #22]
 8019694:	4293      	cmp	r3, r2
 8019696:	bf38      	it	cc
 8019698:	4613      	movcc	r3, r2
 801969a:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801969c:	8afb      	ldrh	r3, [r7, #22]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d101      	bne.n	80196a6 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80196a2:	2301      	movs	r3, #1
 80196a4:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80196a6:	8afb      	ldrh	r3, [r7, #22]
}
 80196a8:	4618      	mov	r0, r3
 80196aa:	371c      	adds	r7, #28
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bc80      	pop	{r7}
 80196b0:	4770      	bx	lr
	...

080196b4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b08e      	sub	sp, #56	; 0x38
 80196b8:	af02      	add	r7, sp, #8
 80196ba:	60f8      	str	r0, [r7, #12]
 80196bc:	4608      	mov	r0, r1
 80196be:	4639      	mov	r1, r7
 80196c0:	e881 000c 	stmia.w	r1, {r2, r3}
 80196c4:	4603      	mov	r3, r0
 80196c6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	881b      	ldrh	r3, [r3, #0]
 80196cc:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80196ce:	4b4b      	ldr	r3, [pc, #300]	; (80197fc <SetMaxTimeCredits+0x148>)
 80196d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80196d2:	463b      	mov	r3, r7
 80196d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80196d8:	f005 fdb4 	bl	801f244 <SysTimeToMs>
 80196dc:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80196de:	f107 0314 	add.w	r3, r7, #20
 80196e2:	2200      	movs	r2, #0
 80196e4:	601a      	str	r2, [r3, #0]
 80196e6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80196e8:	7af9      	ldrb	r1, [r7, #11]
 80196ea:	463b      	mov	r3, r7
 80196ec:	cb0c      	ldmia	r3, {r2, r3}
 80196ee:	68f8      	ldr	r0, [r7, #12]
 80196f0:	f7ff ffa5 	bl	801963e <GetDutyCycle>
 80196f4:	4603      	mov	r3, r0
 80196f6:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80196f8:	7afb      	ldrb	r3, [r7, #11]
 80196fa:	f083 0301 	eor.w	r3, r3, #1
 80196fe:	b2db      	uxtb	r3, r3
 8019700:	2b00      	cmp	r3, #0
 8019702:	d062      	beq.n	80197ca <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8019704:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019706:	2b64      	cmp	r3, #100	; 0x64
 8019708:	d105      	bne.n	8019716 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801970a:	4b3c      	ldr	r3, [pc, #240]	; (80197fc <SetMaxTimeCredits+0x148>)
 801970c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019712:	609a      	str	r2, [r3, #8]
 8019714:	e00b      	b.n	801972e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8019716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801971c:	d105      	bne.n	801972a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801971e:	4b38      	ldr	r3, [pc, #224]	; (8019800 <SetMaxTimeCredits+0x14c>)
 8019720:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019726:	609a      	str	r2, [r3, #8]
 8019728:	e001      	b.n	801972e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801972a:	4b36      	ldr	r3, [pc, #216]	; (8019804 <SetMaxTimeCredits+0x150>)
 801972c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	689a      	ldr	r2, [r3, #8]
 8019732:	f107 031c 	add.w	r3, r7, #28
 8019736:	4611      	mov	r1, r2
 8019738:	4618      	mov	r0, r3
 801973a:	f005 fdab 	bl	801f294 <SysTimeFromMs>
 801973e:	f107 0014 	add.w	r0, r7, #20
 8019742:	6a3b      	ldr	r3, [r7, #32]
 8019744:	9300      	str	r3, [sp, #0]
 8019746:	69fb      	ldr	r3, [r7, #28]
 8019748:	463a      	mov	r2, r7
 801974a:	ca06      	ldmia	r2, {r1, r2}
 801974c:	f005 fcbb 	bl	801f0c6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019750:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8019754:	f083 0301 	eor.w	r3, r3, #1
 8019758:	b2db      	uxtb	r3, r3
 801975a:	2b00      	cmp	r3, #0
 801975c:	d006      	beq.n	801976c <SetMaxTimeCredits+0xb8>
 801975e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019762:	f083 0301 	eor.w	r3, r3, #1
 8019766:	b2db      	uxtb	r3, r3
 8019768:	2b00      	cmp	r3, #0
 801976a:	d108      	bne.n	801977e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019772:	429a      	cmp	r2, r3
 8019774:	d103      	bne.n	801977e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8019776:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8019778:	4a23      	ldr	r2, [pc, #140]	; (8019808 <SetMaxTimeCredits+0x154>)
 801977a:	4293      	cmp	r3, r2
 801977c:	d92f      	bls.n	80197de <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019782:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019784:	683b      	ldr	r3, [r7, #0]
 8019786:	4a21      	ldr	r2, [pc, #132]	; (801980c <SetMaxTimeCredits+0x158>)
 8019788:	4293      	cmp	r3, r2
 801978a:	d928      	bls.n	80197de <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8019792:	3b30      	subs	r3, #48	; 0x30
 8019794:	4a1e      	ldr	r2, [pc, #120]	; (8019810 <SetMaxTimeCredits+0x15c>)
 8019796:	fba2 2303 	umull	r2, r3, r2, r3
 801979a:	0c1b      	lsrs	r3, r3, #16
 801979c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801979e:	697b      	ldr	r3, [r7, #20]
 80197a0:	4a1c      	ldr	r2, [pc, #112]	; (8019814 <SetMaxTimeCredits+0x160>)
 80197a2:	fb02 f303 	mul.w	r3, r2, r3
 80197a6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80197a8:	697b      	ldr	r3, [r7, #20]
 80197aa:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80197ae:	3330      	adds	r3, #48	; 0x30
 80197b0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80197b2:	2300      	movs	r3, #0
 80197b4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80197b6:	f107 0314 	add.w	r3, r7, #20
 80197ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80197be:	f005 fd41 	bl	801f244 <SysTimeToMs>
 80197c2:	4602      	mov	r2, r0
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	609a      	str	r2, [r3, #8]
 80197c8:	e009      	b.n	80197de <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80197ca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80197ce:	f083 0301 	eor.w	r3, r3, #1
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d002      	beq.n	80197de <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197dc:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d102      	bne.n	80197ec <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197ea:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197f0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80197f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80197f4:	4618      	mov	r0, r3
 80197f6:	3730      	adds	r7, #48	; 0x30
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd80      	pop	{r7, pc}
 80197fc:	001b7740 	.word	0x001b7740
 8019800:	0112a880 	.word	0x0112a880
 8019804:	02932e00 	.word	0x02932e00
 8019808:	0001517f 	.word	0x0001517f
 801980c:	0001ec2f 	.word	0x0001ec2f
 8019810:	c22e4507 	.word	0xc22e4507
 8019814:	00015180 	.word	0x00015180

08019818 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b086      	sub	sp, #24
 801981c:	af02      	add	r7, sp, #8
 801981e:	6078      	str	r0, [r7, #4]
 8019820:	4608      	mov	r0, r1
 8019822:	4611      	mov	r1, r2
 8019824:	461a      	mov	r2, r3
 8019826:	4603      	mov	r3, r0
 8019828:	70fb      	strb	r3, [r7, #3]
 801982a:	460b      	mov	r3, r1
 801982c:	70bb      	strb	r3, [r7, #2]
 801982e:	4613      	mov	r3, r2
 8019830:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8019832:	78f9      	ldrb	r1, [r7, #3]
 8019834:	787b      	ldrb	r3, [r7, #1]
 8019836:	9301      	str	r3, [sp, #4]
 8019838:	78bb      	ldrb	r3, [r7, #2]
 801983a:	9300      	str	r3, [sp, #0]
 801983c:	f107 0318 	add.w	r3, r7, #24
 8019840:	cb0c      	ldmia	r3, {r2, r3}
 8019842:	6878      	ldr	r0, [r7, #4]
 8019844:	f7ff ff36 	bl	80196b4 <SetMaxTimeCredits>
 8019848:	4603      	mov	r3, r0
 801984a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801984c:	78fb      	ldrb	r3, [r7, #3]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d00a      	beq.n	8019868 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	4618      	mov	r0, r3
 8019858:	f006 fb54 	bl	801ff04 <UTIL_TIMER_GetElapsedTime>
 801985c:	4602      	mov	r2, r0
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	68db      	ldr	r3, [r3, #12]
 8019862:	441a      	add	r2, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	68da      	ldr	r2, [r3, #12]
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	691b      	ldr	r3, [r3, #16]
 8019870:	429a      	cmp	r2, r3
 8019872:	d903      	bls.n	801987c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	691a      	ldr	r2, [r3, #16]
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	6a3a      	ldr	r2, [r7, #32]
 8019880:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8019882:	89fb      	ldrh	r3, [r7, #14]
}
 8019884:	4618      	mov	r0, r3
 8019886:	3710      	adds	r7, #16
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}

0801988c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801988c:	b480      	push	{r7}
 801988e:	b085      	sub	sp, #20
 8019890:	af00      	add	r7, sp, #0
 8019892:	4603      	mov	r3, r0
 8019894:	460a      	mov	r2, r1
 8019896:	80fb      	strh	r3, [r7, #6]
 8019898:	4613      	mov	r3, r2
 801989a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801989c:	2300      	movs	r3, #0
 801989e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80198a0:	2300      	movs	r3, #0
 80198a2:	73bb      	strb	r3, [r7, #14]
 80198a4:	e011      	b.n	80198ca <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80198a6:	88fa      	ldrh	r2, [r7, #6]
 80198a8:	7bbb      	ldrb	r3, [r7, #14]
 80198aa:	2101      	movs	r1, #1
 80198ac:	fa01 f303 	lsl.w	r3, r1, r3
 80198b0:	401a      	ands	r2, r3
 80198b2:	7bbb      	ldrb	r3, [r7, #14]
 80198b4:	2101      	movs	r1, #1
 80198b6:	fa01 f303 	lsl.w	r3, r1, r3
 80198ba:	429a      	cmp	r2, r3
 80198bc:	d102      	bne.n	80198c4 <CountChannels+0x38>
        {
            nbActiveBits++;
 80198be:	7bfb      	ldrb	r3, [r7, #15]
 80198c0:	3301      	adds	r3, #1
 80198c2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80198c4:	7bbb      	ldrb	r3, [r7, #14]
 80198c6:	3301      	adds	r3, #1
 80198c8:	73bb      	strb	r3, [r7, #14]
 80198ca:	7bba      	ldrb	r2, [r7, #14]
 80198cc:	797b      	ldrb	r3, [r7, #5]
 80198ce:	429a      	cmp	r2, r3
 80198d0:	d3e9      	bcc.n	80198a6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80198d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	3714      	adds	r7, #20
 80198d8:	46bd      	mov	sp, r7
 80198da:	bc80      	pop	{r7}
 80198dc:	4770      	bx	lr

080198de <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80198de:	b580      	push	{r7, lr}
 80198e0:	b084      	sub	sp, #16
 80198e2:	af00      	add	r7, sp, #0
 80198e4:	6039      	str	r1, [r7, #0]
 80198e6:	4611      	mov	r1, r2
 80198e8:	461a      	mov	r2, r3
 80198ea:	4603      	mov	r3, r0
 80198ec:	71fb      	strb	r3, [r7, #7]
 80198ee:	460b      	mov	r3, r1
 80198f0:	71bb      	strb	r3, [r7, #6]
 80198f2:	4613      	mov	r3, r2
 80198f4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80198f6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80198fa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80198fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019902:	4618      	mov	r0, r3
 8019904:	f000 f85d 	bl	80199c2 <RegionCommonValueInRange>
 8019908:	4603      	mov	r3, r0
 801990a:	2b00      	cmp	r3, #0
 801990c:	d101      	bne.n	8019912 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801990e:	2300      	movs	r3, #0
 8019910:	e053      	b.n	80199ba <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8019912:	2300      	movs	r3, #0
 8019914:	73fb      	strb	r3, [r7, #15]
 8019916:	2300      	movs	r3, #0
 8019918:	73bb      	strb	r3, [r7, #14]
 801991a:	e049      	b.n	80199b0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801991c:	2300      	movs	r3, #0
 801991e:	737b      	strb	r3, [r7, #13]
 8019920:	e03d      	b.n	801999e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8019922:	7bbb      	ldrb	r3, [r7, #14]
 8019924:	005b      	lsls	r3, r3, #1
 8019926:	683a      	ldr	r2, [r7, #0]
 8019928:	4413      	add	r3, r2
 801992a:	881b      	ldrh	r3, [r3, #0]
 801992c:	461a      	mov	r2, r3
 801992e:	7b7b      	ldrb	r3, [r7, #13]
 8019930:	fa42 f303 	asr.w	r3, r2, r3
 8019934:	f003 0301 	and.w	r3, r3, #1
 8019938:	2b00      	cmp	r3, #0
 801993a:	d02d      	beq.n	8019998 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801993c:	7bfa      	ldrb	r2, [r7, #15]
 801993e:	7b7b      	ldrb	r3, [r7, #13]
 8019940:	4413      	add	r3, r2
 8019942:	461a      	mov	r2, r3
 8019944:	4613      	mov	r3, r2
 8019946:	005b      	lsls	r3, r3, #1
 8019948:	4413      	add	r3, r2
 801994a:	009b      	lsls	r3, r3, #2
 801994c:	461a      	mov	r2, r3
 801994e:	69fb      	ldr	r3, [r7, #28]
 8019950:	4413      	add	r3, r2
 8019952:	7a1b      	ldrb	r3, [r3, #8]
 8019954:	f343 0303 	sbfx	r3, r3, #0, #4
 8019958:	b25b      	sxtb	r3, r3
 801995a:	f003 030f 	and.w	r3, r3, #15
 801995e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8019960:	7bfa      	ldrb	r2, [r7, #15]
 8019962:	7b7b      	ldrb	r3, [r7, #13]
 8019964:	4413      	add	r3, r2
 8019966:	461a      	mov	r2, r3
 8019968:	4613      	mov	r3, r2
 801996a:	005b      	lsls	r3, r3, #1
 801996c:	4413      	add	r3, r2
 801996e:	009b      	lsls	r3, r3, #2
 8019970:	461a      	mov	r2, r3
 8019972:	69fb      	ldr	r3, [r7, #28]
 8019974:	4413      	add	r3, r2
 8019976:	7a1b      	ldrb	r3, [r3, #8]
 8019978:	f343 1303 	sbfx	r3, r3, #4, #4
 801997c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801997e:	f003 030f 	and.w	r3, r3, #15
 8019982:	b25a      	sxtb	r2, r3
 8019984:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019988:	4618      	mov	r0, r3
 801998a:	f000 f81a 	bl	80199c2 <RegionCommonValueInRange>
 801998e:	4603      	mov	r3, r0
 8019990:	2b01      	cmp	r3, #1
 8019992:	d101      	bne.n	8019998 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8019994:	2301      	movs	r3, #1
 8019996:	e010      	b.n	80199ba <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8019998:	7b7b      	ldrb	r3, [r7, #13]
 801999a:	3301      	adds	r3, #1
 801999c:	737b      	strb	r3, [r7, #13]
 801999e:	7b7b      	ldrb	r3, [r7, #13]
 80199a0:	2b0f      	cmp	r3, #15
 80199a2:	d9be      	bls.n	8019922 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80199a4:	7bfb      	ldrb	r3, [r7, #15]
 80199a6:	3310      	adds	r3, #16
 80199a8:	73fb      	strb	r3, [r7, #15]
 80199aa:	7bbb      	ldrb	r3, [r7, #14]
 80199ac:	3301      	adds	r3, #1
 80199ae:	73bb      	strb	r3, [r7, #14]
 80199b0:	7bfa      	ldrb	r2, [r7, #15]
 80199b2:	79fb      	ldrb	r3, [r7, #7]
 80199b4:	429a      	cmp	r2, r3
 80199b6:	d3b1      	bcc.n	801991c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80199b8:	2300      	movs	r3, #0
}
 80199ba:	4618      	mov	r0, r3
 80199bc:	3710      	adds	r7, #16
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}

080199c2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80199c2:	b480      	push	{r7}
 80199c4:	b083      	sub	sp, #12
 80199c6:	af00      	add	r7, sp, #0
 80199c8:	4603      	mov	r3, r0
 80199ca:	71fb      	strb	r3, [r7, #7]
 80199cc:	460b      	mov	r3, r1
 80199ce:	71bb      	strb	r3, [r7, #6]
 80199d0:	4613      	mov	r3, r2
 80199d2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80199d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80199d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80199dc:	429a      	cmp	r2, r3
 80199de:	db07      	blt.n	80199f0 <RegionCommonValueInRange+0x2e>
 80199e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80199e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80199e8:	429a      	cmp	r2, r3
 80199ea:	dc01      	bgt.n	80199f0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80199ec:	2301      	movs	r3, #1
 80199ee:	e000      	b.n	80199f2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80199f0:	2300      	movs	r3, #0
}
 80199f2:	4618      	mov	r0, r3
 80199f4:	370c      	adds	r7, #12
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bc80      	pop	{r7}
 80199fa:	4770      	bx	lr

080199fc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80199fc:	b480      	push	{r7}
 80199fe:	b085      	sub	sp, #20
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
 8019a04:	460b      	mov	r3, r1
 8019a06:	70fb      	strb	r3, [r7, #3]
 8019a08:	4613      	mov	r3, r2
 8019a0a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8019a0c:	78fb      	ldrb	r3, [r7, #3]
 8019a0e:	091b      	lsrs	r3, r3, #4
 8019a10:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8019a12:	78bb      	ldrb	r3, [r7, #2]
 8019a14:	091b      	lsrs	r3, r3, #4
 8019a16:	b2db      	uxtb	r3, r3
 8019a18:	7bfa      	ldrb	r2, [r7, #15]
 8019a1a:	429a      	cmp	r2, r3
 8019a1c:	d803      	bhi.n	8019a26 <RegionCommonChanDisable+0x2a>
 8019a1e:	78fa      	ldrb	r2, [r7, #3]
 8019a20:	78bb      	ldrb	r3, [r7, #2]
 8019a22:	429a      	cmp	r2, r3
 8019a24:	d301      	bcc.n	8019a2a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8019a26:	2300      	movs	r3, #0
 8019a28:	e017      	b.n	8019a5a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8019a2a:	7bfb      	ldrb	r3, [r7, #15]
 8019a2c:	005b      	lsls	r3, r3, #1
 8019a2e:	687a      	ldr	r2, [r7, #4]
 8019a30:	4413      	add	r3, r2
 8019a32:	881b      	ldrh	r3, [r3, #0]
 8019a34:	b21a      	sxth	r2, r3
 8019a36:	78fb      	ldrb	r3, [r7, #3]
 8019a38:	f003 030f 	and.w	r3, r3, #15
 8019a3c:	2101      	movs	r1, #1
 8019a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8019a42:	b21b      	sxth	r3, r3
 8019a44:	43db      	mvns	r3, r3
 8019a46:	b21b      	sxth	r3, r3
 8019a48:	4013      	ands	r3, r2
 8019a4a:	b219      	sxth	r1, r3
 8019a4c:	7bfb      	ldrb	r3, [r7, #15]
 8019a4e:	005b      	lsls	r3, r3, #1
 8019a50:	687a      	ldr	r2, [r7, #4]
 8019a52:	4413      	add	r3, r2
 8019a54:	b28a      	uxth	r2, r1
 8019a56:	801a      	strh	r2, [r3, #0]

    return true;
 8019a58:	2301      	movs	r3, #1
}
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	3714      	adds	r7, #20
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bc80      	pop	{r7}
 8019a62:	4770      	bx	lr

08019a64 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b084      	sub	sp, #16
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	6078      	str	r0, [r7, #4]
 8019a6c:	460b      	mov	r3, r1
 8019a6e:	70fb      	strb	r3, [r7, #3]
 8019a70:	4613      	mov	r3, r2
 8019a72:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8019a74:	2300      	movs	r3, #0
 8019a76:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d101      	bne.n	8019a82 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8019a7e:	2300      	movs	r3, #0
 8019a80:	e018      	b.n	8019ab4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8019a82:	78fb      	ldrb	r3, [r7, #3]
 8019a84:	73bb      	strb	r3, [r7, #14]
 8019a86:	e010      	b.n	8019aaa <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8019a88:	7bbb      	ldrb	r3, [r7, #14]
 8019a8a:	005b      	lsls	r3, r3, #1
 8019a8c:	687a      	ldr	r2, [r7, #4]
 8019a8e:	4413      	add	r3, r2
 8019a90:	881b      	ldrh	r3, [r3, #0]
 8019a92:	2110      	movs	r1, #16
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7ff fef9 	bl	801988c <CountChannels>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	7bfb      	ldrb	r3, [r7, #15]
 8019aa0:	4413      	add	r3, r2
 8019aa2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8019aa4:	7bbb      	ldrb	r3, [r7, #14]
 8019aa6:	3301      	adds	r3, #1
 8019aa8:	73bb      	strb	r3, [r7, #14]
 8019aaa:	7bba      	ldrb	r2, [r7, #14]
 8019aac:	78bb      	ldrb	r3, [r7, #2]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d3ea      	bcc.n	8019a88 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8019ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3710      	adds	r7, #16
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}

08019abc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8019abc:	b480      	push	{r7}
 8019abe:	b087      	sub	sp, #28
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	60f8      	str	r0, [r7, #12]
 8019ac4:	60b9      	str	r1, [r7, #8]
 8019ac6:	4613      	mov	r3, r2
 8019ac8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d016      	beq.n	8019afe <RegionCommonChanMaskCopy+0x42>
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d013      	beq.n	8019afe <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	75fb      	strb	r3, [r7, #23]
 8019ada:	e00c      	b.n	8019af6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8019adc:	7dfb      	ldrb	r3, [r7, #23]
 8019ade:	005b      	lsls	r3, r3, #1
 8019ae0:	68ba      	ldr	r2, [r7, #8]
 8019ae2:	441a      	add	r2, r3
 8019ae4:	7dfb      	ldrb	r3, [r7, #23]
 8019ae6:	005b      	lsls	r3, r3, #1
 8019ae8:	68f9      	ldr	r1, [r7, #12]
 8019aea:	440b      	add	r3, r1
 8019aec:	8812      	ldrh	r2, [r2, #0]
 8019aee:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8019af0:	7dfb      	ldrb	r3, [r7, #23]
 8019af2:	3301      	adds	r3, #1
 8019af4:	75fb      	strb	r3, [r7, #23]
 8019af6:	7dfa      	ldrb	r2, [r7, #23]
 8019af8:	79fb      	ldrb	r3, [r7, #7]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d3ee      	bcc.n	8019adc <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8019afe:	bf00      	nop
 8019b00:	371c      	adds	r7, #28
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bc80      	pop	{r7}
 8019b06:	4770      	bx	lr

08019b08 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8019b08:	b082      	sub	sp, #8
 8019b0a:	b580      	push	{r7, lr}
 8019b0c:	b086      	sub	sp, #24
 8019b0e:	af00      	add	r7, sp, #0
 8019b10:	60f8      	str	r0, [r7, #12]
 8019b12:	60b9      	str	r1, [r7, #8]
 8019b14:	627b      	str	r3, [r7, #36]	; 0x24
 8019b16:	4613      	mov	r3, r2
 8019b18:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8019b1a:	79f9      	ldrb	r1, [r7, #7]
 8019b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019b20:	cb0c      	ldmia	r3, {r2, r3}
 8019b22:	68f8      	ldr	r0, [r7, #12]
 8019b24:	f7ff fd8b 	bl	801963e <GetDutyCycle>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	68da      	ldr	r2, [r3, #12]
 8019b30:	8afb      	ldrh	r3, [r7, #22]
 8019b32:	68b9      	ldr	r1, [r7, #8]
 8019b34:	fb01 f303 	mul.w	r3, r1, r3
 8019b38:	429a      	cmp	r2, r3
 8019b3a:	d909      	bls.n	8019b50 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	68da      	ldr	r2, [r3, #12]
 8019b40:	8afb      	ldrh	r3, [r7, #22]
 8019b42:	68b9      	ldr	r1, [r7, #8]
 8019b44:	fb01 f303 	mul.w	r3, r1, r3
 8019b48:	1ad2      	subs	r2, r2, r3
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8019b4e:	e002      	b.n	8019b56 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	2200      	movs	r2, #0
 8019b54:	60da      	str	r2, [r3, #12]
}
 8019b56:	bf00      	nop
 8019b58:	3718      	adds	r7, #24
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019b60:	b002      	add	sp, #8
 8019b62:	4770      	bx	lr

08019b64 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8019b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b66:	b08f      	sub	sp, #60	; 0x3c
 8019b68:	af04      	add	r7, sp, #16
 8019b6a:	6039      	str	r1, [r7, #0]
 8019b6c:	4611      	mov	r1, r2
 8019b6e:	461a      	mov	r2, r3
 8019b70:	4603      	mov	r3, r0
 8019b72:	71fb      	strb	r3, [r7, #7]
 8019b74:	460b      	mov	r3, r1
 8019b76:	71bb      	strb	r3, [r7, #6]
 8019b78:	4613      	mov	r3, r2
 8019b7a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8019b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019b80:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8019b82:	f006 f9ad 	bl	801fee0 <UTIL_TIMER_GetCurrentTime>
 8019b86:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8019b88:	2300      	movs	r3, #0
 8019b8a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8019b8c:	2301      	movs	r3, #1
 8019b8e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8019b90:	2300      	movs	r3, #0
 8019b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8019b96:	2300      	movs	r3, #0
 8019b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019b9c:	e0ba      	b.n	8019d14 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8019b9e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019ba2:	4613      	mov	r3, r2
 8019ba4:	005b      	lsls	r3, r3, #1
 8019ba6:	4413      	add	r3, r2
 8019ba8:	00db      	lsls	r3, r3, #3
 8019baa:	461a      	mov	r2, r3
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	189c      	adds	r4, r3, r2
 8019bb0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8019bb4:	797a      	ldrb	r2, [r7, #5]
 8019bb6:	79fd      	ldrb	r5, [r7, #7]
 8019bb8:	69fb      	ldr	r3, [r7, #28]
 8019bba:	9302      	str	r3, [sp, #8]
 8019bbc:	46ec      	mov	ip, sp
 8019bbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019bc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019bc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019bca:	4633      	mov	r3, r6
 8019bcc:	4629      	mov	r1, r5
 8019bce:	4620      	mov	r0, r4
 8019bd0:	f7ff fe22 	bl	8019818 <UpdateTimeCredits>
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8019bd8:	8afa      	ldrh	r2, [r7, #22]
 8019bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019bdc:	fb02 f303 	mul.w	r3, r2, r3
 8019be0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8019be2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019be6:	4613      	mov	r3, r2
 8019be8:	005b      	lsls	r3, r3, #1
 8019bea:	4413      	add	r3, r2
 8019bec:	00db      	lsls	r3, r3, #3
 8019bee:	461a      	mov	r2, r3
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	4413      	add	r3, r2
 8019bf4:	68db      	ldr	r3, [r3, #12]
 8019bf6:	69ba      	ldr	r2, [r7, #24]
 8019bf8:	429a      	cmp	r2, r3
 8019bfa:	d908      	bls.n	8019c0e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8019bfc:	797b      	ldrb	r3, [r7, #5]
 8019bfe:	f083 0301 	eor.w	r3, r3, #1
 8019c02:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d013      	beq.n	8019c30 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8019c08:	79fb      	ldrb	r3, [r7, #7]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d010      	beq.n	8019c30 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8019c0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019c12:	4613      	mov	r3, r2
 8019c14:	005b      	lsls	r3, r3, #1
 8019c16:	4413      	add	r3, r2
 8019c18:	00db      	lsls	r3, r3, #3
 8019c1a:	461a      	mov	r2, r3
 8019c1c:	683b      	ldr	r3, [r7, #0]
 8019c1e:	4413      	add	r3, r2
 8019c20:	2201      	movs	r2, #1
 8019c22:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8019c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c28:	3301      	adds	r3, #1
 8019c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8019c2e:	e06c      	b.n	8019d0a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8019c30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019c34:	4613      	mov	r3, r2
 8019c36:	005b      	lsls	r3, r3, #1
 8019c38:	4413      	add	r3, r2
 8019c3a:	00db      	lsls	r3, r3, #3
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	4413      	add	r3, r2
 8019c42:	2200      	movs	r2, #0
 8019c44:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8019c46:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019c4a:	4613      	mov	r3, r2
 8019c4c:	005b      	lsls	r3, r3, #1
 8019c4e:	4413      	add	r3, r2
 8019c50:	00db      	lsls	r3, r3, #3
 8019c52:	461a      	mov	r2, r3
 8019c54:	683b      	ldr	r3, [r7, #0]
 8019c56:	4413      	add	r3, r2
 8019c58:	691b      	ldr	r3, [r3, #16]
 8019c5a:	69ba      	ldr	r2, [r7, #24]
 8019c5c:	429a      	cmp	r2, r3
 8019c5e:	d815      	bhi.n	8019c8c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8019c60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019c64:	4613      	mov	r3, r2
 8019c66:	005b      	lsls	r3, r3, #1
 8019c68:	4413      	add	r3, r2
 8019c6a:	00db      	lsls	r3, r3, #3
 8019c6c:	461a      	mov	r2, r3
 8019c6e:	683b      	ldr	r3, [r7, #0]
 8019c70:	4413      	add	r3, r2
 8019c72:	68db      	ldr	r3, [r3, #12]
 8019c74:	69ba      	ldr	r2, [r7, #24]
 8019c76:	1ad3      	subs	r3, r2, r3
 8019c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c7a:	4293      	cmp	r3, r2
 8019c7c:	bf28      	it	cs
 8019c7e:	4613      	movcs	r3, r2
 8019c80:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8019c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c86:	3301      	adds	r3, #1
 8019c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8019c8c:	79fb      	ldrb	r3, [r7, #7]
 8019c8e:	f083 0301 	eor.w	r3, r3, #1
 8019c92:	b2db      	uxtb	r3, r3
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d038      	beq.n	8019d0a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8019c98:	2300      	movs	r3, #0
 8019c9a:	60fb      	str	r3, [r7, #12]
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8019ca0:	8afb      	ldrh	r3, [r7, #22]
 8019ca2:	2b64      	cmp	r3, #100	; 0x64
 8019ca4:	d103      	bne.n	8019cae <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8019ca6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8019caa:	60fb      	str	r3, [r7, #12]
 8019cac:	e009      	b.n	8019cc2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8019cae:	8afb      	ldrh	r3, [r7, #22]
 8019cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019cb4:	d103      	bne.n	8019cbe <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8019cb6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8019cba:	60fb      	str	r3, [r7, #12]
 8019cbc:	e001      	b.n	8019cc2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8019cbe:	4b1e      	ldr	r3, [pc, #120]	; (8019d38 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8019cc0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cc4:	4a1c      	ldr	r2, [pc, #112]	; (8019d38 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8019cc6:	4293      	cmp	r3, r2
 8019cc8:	d90e      	bls.n	8019ce8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8019cca:	68fa      	ldr	r2, [r7, #12]
 8019ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cce:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8019cd2:	3b30      	subs	r3, #48	; 0x30
 8019cd4:	4919      	ldr	r1, [pc, #100]	; (8019d3c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8019cd6:	fba1 1303 	umull	r1, r3, r1, r3
 8019cda:	0c1b      	lsrs	r3, r3, #16
 8019cdc:	3301      	adds	r3, #1
 8019cde:	4918      	ldr	r1, [pc, #96]	; (8019d40 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8019ce0:	fb01 f303 	mul.w	r3, r1, r3
 8019ce4:	4413      	add	r3, r2
 8019ce6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8019ce8:	f107 000c 	add.w	r0, r7, #12
 8019cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019cee:	9300      	str	r3, [sp, #0]
 8019cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cf2:	f107 020c 	add.w	r2, r7, #12
 8019cf6:	ca06      	ldmia	r2, {r1, r2}
 8019cf8:	f005 f9e5 	bl	801f0c6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8019cfc:	f107 030c 	add.w	r3, r7, #12
 8019d00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d04:	f005 fa9e 	bl	801f244 <SysTimeToMs>
 8019d08:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8019d0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d0e:	3301      	adds	r3, #1
 8019d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019d14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019d18:	79bb      	ldrb	r3, [r7, #6]
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	f4ff af3f 	bcc.w	8019b9e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8019d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d102      	bne.n	8019d2e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8019d28:	f04f 33ff 	mov.w	r3, #4294967295
 8019d2c:	e000      	b.n	8019d30 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8019d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019d30:	4618      	mov	r0, r3
 8019d32:	372c      	adds	r7, #44	; 0x2c
 8019d34:	46bd      	mov	sp, r7
 8019d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d38:	0001ec30 	.word	0x0001ec30
 8019d3c:	c22e4507 	.word	0xc22e4507
 8019d40:	00015180 	.word	0x00015180

08019d44 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8019d44:	b480      	push	{r7}
 8019d46:	b085      	sub	sp, #20
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
 8019d4c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8019d4e:	2300      	movs	r3, #0
 8019d50:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	2b03      	cmp	r3, #3
 8019d58:	d13f      	bne.n	8019dda <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	3301      	adds	r3, #1
 8019d5e:	781b      	ldrb	r3, [r3, #0]
 8019d60:	b25a      	sxtb	r2, r3
 8019d62:	683b      	ldr	r3, [r7, #0]
 8019d64:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019d6c:	f003 030f 	and.w	r3, r3, #15
 8019d70:	b25a      	sxtb	r2, r3
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019d7c:	b2db      	uxtb	r3, r3
 8019d7e:	091b      	lsrs	r3, r3, #4
 8019d80:	b2db      	uxtb	r3, r3
 8019d82:	b25a      	sxtb	r2, r3
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	3302      	adds	r3, #2
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	b29a      	uxth	r2, r3
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	889b      	ldrh	r3, [r3, #4]
 8019d98:	b21a      	sxth	r2, r3
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	3303      	adds	r3, #3
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	021b      	lsls	r3, r3, #8
 8019da2:	b21b      	sxth	r3, r3
 8019da4:	4313      	orrs	r3, r2
 8019da6:	b21b      	sxth	r3, r3
 8019da8:	b29a      	uxth	r2, r3
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	791a      	ldrb	r2, [r3, #4]
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8019db6:	683b      	ldr	r3, [r7, #0]
 8019db8:	781b      	ldrb	r3, [r3, #0]
 8019dba:	091b      	lsrs	r3, r3, #4
 8019dbc:	b2db      	uxtb	r3, r3
 8019dbe:	f003 0307 	and.w	r3, r3, #7
 8019dc2:	b2da      	uxtb	r2, r3
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	f003 030f 	and.w	r3, r3, #15
 8019dd0:	b2da      	uxtb	r2, r3
 8019dd2:	683b      	ldr	r3, [r7, #0]
 8019dd4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8019dd6:	2305      	movs	r3, #5
 8019dd8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8019dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ddc:	4618      	mov	r0, r3
 8019dde:	3714      	adds	r7, #20
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bc80      	pop	{r7}
 8019de4:	4770      	bx	lr

08019de6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8019de6:	b5b0      	push	{r4, r5, r7, lr}
 8019de8:	b088      	sub	sp, #32
 8019dea:	af02      	add	r7, sp, #8
 8019dec:	60f8      	str	r0, [r7, #12]
 8019dee:	60b9      	str	r1, [r7, #8]
 8019df0:	607a      	str	r2, [r7, #4]
 8019df2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	791b      	ldrb	r3, [r3, #4]
 8019df8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	799b      	ldrb	r3, [r3, #6]
 8019dfe:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	79db      	ldrb	r3, [r3, #7]
 8019e04:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	7a1b      	ldrb	r3, [r3, #8]
 8019e0a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	795b      	ldrb	r3, [r3, #5]
 8019e10:	f083 0301 	eor.w	r3, r3, #1
 8019e14:	b2db      	uxtb	r3, r3
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d008      	beq.n	8019e2c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	7adb      	ldrb	r3, [r3, #11]
 8019e1e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	7a5b      	ldrb	r3, [r3, #9]
 8019e24:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	7a9b      	ldrb	r3, [r3, #10]
 8019e2a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8019e2c:	7dfb      	ldrb	r3, [r7, #23]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d04a      	beq.n	8019ec8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8019e32:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8019e36:	2b0f      	cmp	r3, #15
 8019e38:	d103      	bne.n	8019e42 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	7a5b      	ldrb	r3, [r3, #9]
 8019e3e:	75bb      	strb	r3, [r7, #22]
 8019e40:	e01d      	b.n	8019e7e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	7b18      	ldrb	r0, [r3, #12]
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	6919      	ldr	r1, [r3, #16]
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8019e56:	68fa      	ldr	r2, [r7, #12]
 8019e58:	6992      	ldr	r2, [r2, #24]
 8019e5a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8019e5e:	9201      	str	r2, [sp, #4]
 8019e60:	9300      	str	r3, [sp, #0]
 8019e62:	462b      	mov	r3, r5
 8019e64:	4622      	mov	r2, r4
 8019e66:	f7ff fd3a 	bl	80198de <RegionCommonChanVerifyDr>
 8019e6a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8019e6c:	f083 0301 	eor.w	r3, r3, #1
 8019e70:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d003      	beq.n	8019e7e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8019e76:	7dfb      	ldrb	r3, [r7, #23]
 8019e78:	f023 0302 	bic.w	r3, r3, #2
 8019e7c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8019e7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8019e82:	2b0f      	cmp	r3, #15
 8019e84:	d103      	bne.n	8019e8e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	7a9b      	ldrb	r3, [r3, #10]
 8019e8a:	757b      	strb	r3, [r7, #21]
 8019e8c:	e01c      	b.n	8019ec8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8019e9a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f7ff fd8f 	bl	80199c2 <RegionCommonValueInRange>
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d10e      	bne.n	8019ec8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8019eb0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8019eb4:	429a      	cmp	r2, r3
 8019eb6:	da03      	bge.n	8019ec0 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	7f5b      	ldrb	r3, [r3, #29]
 8019ebc:	757b      	strb	r3, [r7, #21]
 8019ebe:	e003      	b.n	8019ec8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8019ec0:	7dfb      	ldrb	r3, [r7, #23]
 8019ec2:	f023 0304 	bic.w	r3, r3, #4
 8019ec6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8019ec8:	7dfb      	ldrb	r3, [r7, #23]
 8019eca:	2b07      	cmp	r3, #7
 8019ecc:	d105      	bne.n	8019eda <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8019ece:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d101      	bne.n	8019eda <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8019ed6:	2301      	movs	r3, #1
 8019ed8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	7dba      	ldrb	r2, [r7, #22]
 8019ede:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	7d7a      	ldrb	r2, [r7, #21]
 8019ee4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8019ee6:	7d3a      	ldrb	r2, [r7, #20]
 8019ee8:	683b      	ldr	r3, [r7, #0]
 8019eea:	701a      	strb	r2, [r3, #0]

    return status;
 8019eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8019eee:	4618      	mov	r0, r3
 8019ef0:	3718      	adds	r7, #24
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019ef8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8019ef8:	b480      	push	{r7}
 8019efa:	b083      	sub	sp, #12
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	4603      	mov	r3, r0
 8019f00:	6039      	str	r1, [r7, #0]
 8019f02:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8019f04:	79fb      	ldrb	r3, [r7, #7]
 8019f06:	4a06      	ldr	r2, [pc, #24]	; (8019f20 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8019f08:	fa02 f303 	lsl.w	r3, r2, r3
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	370c      	adds	r7, #12
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bc80      	pop	{r7}
 8019f1c:	4770      	bx	lr
 8019f1e:	bf00      	nop
 8019f20:	000f4240 	.word	0x000f4240

08019f24 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8019f24:	b480      	push	{r7}
 8019f26:	b085      	sub	sp, #20
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	60f8      	str	r0, [r7, #12]
 8019f2c:	607a      	str	r2, [r7, #4]
 8019f2e:	603b      	str	r3, [r7, #0]
 8019f30:	460b      	mov	r3, r1
 8019f32:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8019f34:	7afa      	ldrb	r2, [r7, #11]
 8019f36:	7afb      	ldrb	r3, [r7, #11]
 8019f38:	3b04      	subs	r3, #4
 8019f3a:	4619      	mov	r1, r3
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	fb03 f101 	mul.w	r1, r3, r1
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019f48:	fb00 f303 	mul.w	r3, r0, r3
 8019f4c:	440b      	add	r3, r1
 8019f4e:	005b      	lsls	r3, r3, #1
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d013      	beq.n	8019f7c <RegionCommonComputeRxWindowParameters+0x58>
 8019f54:	7afb      	ldrb	r3, [r7, #11]
 8019f56:	3b04      	subs	r3, #4
 8019f58:	4619      	mov	r1, r3
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	fb03 f101 	mul.w	r1, r3, r1
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019f66:	fb00 f303 	mul.w	r3, r0, r3
 8019f6a:	440b      	add	r3, r1
 8019f6c:	0059      	lsls	r1, r3, #1
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	440b      	add	r3, r1
 8019f72:	1e59      	subs	r1, r3, #1
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8019f7a:	e00f      	b.n	8019f9c <RegionCommonComputeRxWindowParameters+0x78>
 8019f7c:	7afb      	ldrb	r3, [r7, #11]
 8019f7e:	3b04      	subs	r3, #4
 8019f80:	4619      	mov	r1, r3
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	fb03 f101 	mul.w	r1, r3, r1
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019f8e:	fb00 f303 	mul.w	r3, r0, r3
 8019f92:	440b      	add	r3, r1
 8019f94:	0059      	lsls	r1, r3, #1
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8019f9c:	429a      	cmp	r2, r3
 8019f9e:	bf38      	it	cc
 8019fa0:	461a      	movcc	r2, r3
 8019fa2:	69bb      	ldr	r3, [r7, #24]
 8019fa4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	009b      	lsls	r3, r3, #2
 8019faa:	4619      	mov	r1, r3
 8019fac:	69bb      	ldr	r3, [r7, #24]
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	68fa      	ldr	r2, [r7, #12]
 8019fb2:	fb02 f303 	mul.w	r3, r2, r3
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d007      	beq.n	8019fca <RegionCommonComputeRxWindowParameters+0xa6>
 8019fba:	69bb      	ldr	r3, [r7, #24]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	68fa      	ldr	r2, [r7, #12]
 8019fc0:	fb02 f303 	mul.w	r3, r2, r3
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	085b      	lsrs	r3, r3, #1
 8019fc8:	e005      	b.n	8019fd6 <RegionCommonComputeRxWindowParameters+0xb2>
 8019fca:	69bb      	ldr	r3, [r7, #24]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	68fa      	ldr	r2, [r7, #12]
 8019fd0:	fb02 f303 	mul.w	r3, r2, r3
 8019fd4:	085b      	lsrs	r3, r3, #1
 8019fd6:	1acb      	subs	r3, r1, r3
 8019fd8:	683a      	ldr	r2, [r7, #0]
 8019fda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019fde:	fb01 f202 	mul.w	r2, r1, r2
 8019fe2:	1a9b      	subs	r3, r3, r2
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	dd27      	ble.n	801a038 <RegionCommonComputeRxWindowParameters+0x114>
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	009b      	lsls	r3, r3, #2
 8019fec:	4619      	mov	r1, r3
 8019fee:	69bb      	ldr	r3, [r7, #24]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	68fa      	ldr	r2, [r7, #12]
 8019ff4:	fb02 f303 	mul.w	r3, r2, r3
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d007      	beq.n	801a00c <RegionCommonComputeRxWindowParameters+0xe8>
 8019ffc:	69bb      	ldr	r3, [r7, #24]
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	68fa      	ldr	r2, [r7, #12]
 801a002:	fb02 f303 	mul.w	r3, r2, r3
 801a006:	3301      	adds	r3, #1
 801a008:	085b      	lsrs	r3, r3, #1
 801a00a:	e005      	b.n	801a018 <RegionCommonComputeRxWindowParameters+0xf4>
 801a00c:	69bb      	ldr	r3, [r7, #24]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	68fa      	ldr	r2, [r7, #12]
 801a012:	fb02 f303 	mul.w	r3, r2, r3
 801a016:	085b      	lsrs	r3, r3, #1
 801a018:	1acb      	subs	r3, r1, r3
 801a01a:	683a      	ldr	r2, [r7, #0]
 801a01c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a020:	fb01 f202 	mul.w	r2, r1, r2
 801a024:	1a9b      	subs	r3, r3, r2
 801a026:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801a02a:	4a19      	ldr	r2, [pc, #100]	; (801a090 <RegionCommonComputeRxWindowParameters+0x16c>)
 801a02c:	fb82 1203 	smull	r1, r2, r2, r3
 801a030:	1192      	asrs	r2, r2, #6
 801a032:	17db      	asrs	r3, r3, #31
 801a034:	1ad3      	subs	r3, r2, r3
 801a036:	e024      	b.n	801a082 <RegionCommonComputeRxWindowParameters+0x15e>
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	009b      	lsls	r3, r3, #2
 801a03c:	4619      	mov	r1, r3
 801a03e:	69bb      	ldr	r3, [r7, #24]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	68fa      	ldr	r2, [r7, #12]
 801a044:	fb02 f303 	mul.w	r3, r2, r3
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d007      	beq.n	801a05c <RegionCommonComputeRxWindowParameters+0x138>
 801a04c:	69bb      	ldr	r3, [r7, #24]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	68fa      	ldr	r2, [r7, #12]
 801a052:	fb02 f303 	mul.w	r3, r2, r3
 801a056:	3301      	adds	r3, #1
 801a058:	085b      	lsrs	r3, r3, #1
 801a05a:	e005      	b.n	801a068 <RegionCommonComputeRxWindowParameters+0x144>
 801a05c:	69bb      	ldr	r3, [r7, #24]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	68fa      	ldr	r2, [r7, #12]
 801a062:	fb02 f303 	mul.w	r3, r2, r3
 801a066:	085b      	lsrs	r3, r3, #1
 801a068:	1acb      	subs	r3, r1, r3
 801a06a:	683a      	ldr	r2, [r7, #0]
 801a06c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a070:	fb01 f202 	mul.w	r2, r1, r2
 801a074:	1a9b      	subs	r3, r3, r2
 801a076:	4a06      	ldr	r2, [pc, #24]	; (801a090 <RegionCommonComputeRxWindowParameters+0x16c>)
 801a078:	fb82 1203 	smull	r1, r2, r2, r3
 801a07c:	1192      	asrs	r2, r2, #6
 801a07e:	17db      	asrs	r3, r3, #31
 801a080:	1ad3      	subs	r3, r2, r3
 801a082:	69fa      	ldr	r2, [r7, #28]
 801a084:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801a086:	bf00      	nop
 801a088:	3714      	adds	r7, #20
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bc80      	pop	{r7}
 801a08e:	4770      	bx	lr
 801a090:	10624dd3 	.word	0x10624dd3

0801a094 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b086      	sub	sp, #24
 801a098:	af00      	add	r7, sp, #0
 801a09a:	4603      	mov	r3, r0
 801a09c:	60b9      	str	r1, [r7, #8]
 801a09e:	607a      	str	r2, [r7, #4]
 801a0a0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801a0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0aa:	005b      	lsls	r3, r3, #1
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f7e6 fe43 	bl	8000d38 <__aeabi_ui2f>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	4619      	mov	r1, r3
 801a0b6:	68b8      	ldr	r0, [r7, #8]
 801a0b8:	f7e6 fd8c 	bl	8000bd4 <__aeabi_fsub>
 801a0bc:	4603      	mov	r3, r0
 801a0be:	6879      	ldr	r1, [r7, #4]
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	f7e6 fd87 	bl	8000bd4 <__aeabi_fsub>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7e6 fa15 	bl	80004f8 <__aeabi_f2d>
 801a0ce:	4602      	mov	r2, r0
 801a0d0:	460b      	mov	r3, r1
 801a0d2:	4610      	mov	r0, r2
 801a0d4:	4619      	mov	r1, r3
 801a0d6:	f006 fa6b 	bl	80205b0 <floor>
 801a0da:	4602      	mov	r2, r0
 801a0dc:	460b      	mov	r3, r1
 801a0de:	4610      	mov	r0, r2
 801a0e0:	4619      	mov	r1, r3
 801a0e2:	f7e6 fcfb 	bl	8000adc <__aeabi_d2iz>
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801a0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	3718      	adds	r7, #24
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bd80      	pop	{r7, pc}

0801a0f6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801a0f6:	b590      	push	{r4, r7, lr}
 801a0f8:	b087      	sub	sp, #28
 801a0fa:	af00      	add	r7, sp, #0
 801a0fc:	60f8      	str	r0, [r7, #12]
 801a0fe:	60b9      	str	r1, [r7, #8]
 801a100:	607a      	str	r2, [r7, #4]
 801a102:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801a104:	2300      	movs	r3, #0
 801a106:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801a108:	2300      	movs	r3, #0
 801a10a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801a10c:	2300      	movs	r3, #0
 801a10e:	757b      	strb	r3, [r7, #21]
 801a110:	2300      	movs	r3, #0
 801a112:	753b      	strb	r3, [r7, #20]
 801a114:	e09c      	b.n	801a250 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801a116:	2300      	movs	r3, #0
 801a118:	74fb      	strb	r3, [r7, #19]
 801a11a:	e08f      	b.n	801a23c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	685a      	ldr	r2, [r3, #4]
 801a120:	7d3b      	ldrb	r3, [r7, #20]
 801a122:	005b      	lsls	r3, r3, #1
 801a124:	4413      	add	r3, r2
 801a126:	881b      	ldrh	r3, [r3, #0]
 801a128:	461a      	mov	r2, r3
 801a12a:	7cfb      	ldrb	r3, [r7, #19]
 801a12c:	fa42 f303 	asr.w	r3, r2, r3
 801a130:	f003 0301 	and.w	r3, r3, #1
 801a134:	2b00      	cmp	r3, #0
 801a136:	d07e      	beq.n	801a236 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	689a      	ldr	r2, [r3, #8]
 801a13c:	7d79      	ldrb	r1, [r7, #21]
 801a13e:	7cfb      	ldrb	r3, [r7, #19]
 801a140:	440b      	add	r3, r1
 801a142:	4619      	mov	r1, r3
 801a144:	460b      	mov	r3, r1
 801a146:	005b      	lsls	r3, r3, #1
 801a148:	440b      	add	r3, r1
 801a14a:	009b      	lsls	r3, r3, #2
 801a14c:	4413      	add	r3, r2
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d06b      	beq.n	801a22c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	781b      	ldrb	r3, [r3, #0]
 801a158:	f083 0301 	eor.w	r3, r3, #1
 801a15c:	b2db      	uxtb	r3, r3
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d011      	beq.n	801a186 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a166:	2b00      	cmp	r3, #0
 801a168:	d00d      	beq.n	801a186 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	695a      	ldr	r2, [r3, #20]
 801a16e:	7d3b      	ldrb	r3, [r7, #20]
 801a170:	005b      	lsls	r3, r3, #1
 801a172:	4413      	add	r3, r2
 801a174:	881b      	ldrh	r3, [r3, #0]
 801a176:	461a      	mov	r2, r3
 801a178:	7cfb      	ldrb	r3, [r7, #19]
 801a17a:	fa42 f303 	asr.w	r3, r2, r3
 801a17e:	f003 0301 	and.w	r3, r3, #1
 801a182:	2b00      	cmp	r3, #0
 801a184:	d054      	beq.n	801a230 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	785b      	ldrb	r3, [r3, #1]
 801a18a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	689a      	ldr	r2, [r3, #8]
 801a190:	7d79      	ldrb	r1, [r7, #21]
 801a192:	7cfb      	ldrb	r3, [r7, #19]
 801a194:	440b      	add	r3, r1
 801a196:	4619      	mov	r1, r3
 801a198:	460b      	mov	r3, r1
 801a19a:	005b      	lsls	r3, r3, #1
 801a19c:	440b      	add	r3, r1
 801a19e:	009b      	lsls	r3, r3, #2
 801a1a0:	4413      	add	r3, r2
 801a1a2:	7a1b      	ldrb	r3, [r3, #8]
 801a1a4:	f343 0303 	sbfx	r3, r3, #0, #4
 801a1a8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a1aa:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	689a      	ldr	r2, [r3, #8]
 801a1b0:	7d79      	ldrb	r1, [r7, #21]
 801a1b2:	7cfb      	ldrb	r3, [r7, #19]
 801a1b4:	440b      	add	r3, r1
 801a1b6:	4619      	mov	r1, r3
 801a1b8:	460b      	mov	r3, r1
 801a1ba:	005b      	lsls	r3, r3, #1
 801a1bc:	440b      	add	r3, r1
 801a1be:	009b      	lsls	r3, r3, #2
 801a1c0:	4413      	add	r3, r2
 801a1c2:	7a1b      	ldrb	r3, [r3, #8]
 801a1c4:	f343 1303 	sbfx	r3, r3, #4, #4
 801a1c8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a1ca:	461a      	mov	r2, r3
 801a1cc:	4621      	mov	r1, r4
 801a1ce:	f7ff fbf8 	bl	80199c2 <RegionCommonValueInRange>
 801a1d2:	4603      	mov	r3, r0
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d02d      	beq.n	801a234 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	68da      	ldr	r2, [r3, #12]
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	6899      	ldr	r1, [r3, #8]
 801a1e0:	7d78      	ldrb	r0, [r7, #21]
 801a1e2:	7cfb      	ldrb	r3, [r7, #19]
 801a1e4:	4403      	add	r3, r0
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	005b      	lsls	r3, r3, #1
 801a1ec:	4403      	add	r3, r0
 801a1ee:	009b      	lsls	r3, r3, #2
 801a1f0:	440b      	add	r3, r1
 801a1f2:	7a5b      	ldrb	r3, [r3, #9]
 801a1f4:	4619      	mov	r1, r3
 801a1f6:	460b      	mov	r3, r1
 801a1f8:	005b      	lsls	r3, r3, #1
 801a1fa:	440b      	add	r3, r1
 801a1fc:	00db      	lsls	r3, r3, #3
 801a1fe:	4413      	add	r3, r2
 801a200:	7d1b      	ldrb	r3, [r3, #20]
 801a202:	f083 0301 	eor.w	r3, r3, #1
 801a206:	b2db      	uxtb	r3, r3
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d003      	beq.n	801a214 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801a20c:	7dbb      	ldrb	r3, [r7, #22]
 801a20e:	3301      	adds	r3, #1
 801a210:	75bb      	strb	r3, [r7, #22]
                    continue;
 801a212:	e010      	b.n	801a236 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801a214:	7dfb      	ldrb	r3, [r7, #23]
 801a216:	1c5a      	adds	r2, r3, #1
 801a218:	75fa      	strb	r2, [r7, #23]
 801a21a:	461a      	mov	r2, r3
 801a21c:	68bb      	ldr	r3, [r7, #8]
 801a21e:	4413      	add	r3, r2
 801a220:	7d79      	ldrb	r1, [r7, #21]
 801a222:	7cfa      	ldrb	r2, [r7, #19]
 801a224:	440a      	add	r2, r1
 801a226:	b2d2      	uxtb	r2, r2
 801a228:	701a      	strb	r2, [r3, #0]
 801a22a:	e004      	b.n	801a236 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801a22c:	bf00      	nop
 801a22e:	e002      	b.n	801a236 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801a230:	bf00      	nop
 801a232:	e000      	b.n	801a236 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801a234:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801a236:	7cfb      	ldrb	r3, [r7, #19]
 801a238:	3301      	adds	r3, #1
 801a23a:	74fb      	strb	r3, [r7, #19]
 801a23c:	7cfb      	ldrb	r3, [r7, #19]
 801a23e:	2b0f      	cmp	r3, #15
 801a240:	f67f af6c 	bls.w	801a11c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801a244:	7d7b      	ldrb	r3, [r7, #21]
 801a246:	3310      	adds	r3, #16
 801a248:	757b      	strb	r3, [r7, #21]
 801a24a:	7d3b      	ldrb	r3, [r7, #20]
 801a24c:	3301      	adds	r3, #1
 801a24e:	753b      	strb	r3, [r7, #20]
 801a250:	7d7b      	ldrb	r3, [r7, #21]
 801a252:	b29a      	uxth	r2, r3
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	8a1b      	ldrh	r3, [r3, #16]
 801a258:	429a      	cmp	r2, r3
 801a25a:	f4ff af5c 	bcc.w	801a116 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	7dfa      	ldrb	r2, [r7, #23]
 801a262:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801a264:	683b      	ldr	r3, [r7, #0]
 801a266:	7dba      	ldrb	r2, [r7, #22]
 801a268:	701a      	strb	r2, [r3, #0]
}
 801a26a:	bf00      	nop
 801a26c:	371c      	adds	r7, #28
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd90      	pop	{r4, r7, pc}

0801a272 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801a272:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a274:	b08b      	sub	sp, #44	; 0x2c
 801a276:	af04      	add	r7, sp, #16
 801a278:	60f8      	str	r0, [r7, #12]
 801a27a:	60b9      	str	r1, [r7, #8]
 801a27c:	607a      	str	r2, [r7, #4]
 801a27e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	685b      	ldr	r3, [r3, #4]
 801a284:	4618      	mov	r0, r3
 801a286:	f005 fe3d 	bl	801ff04 <UTIL_TIMER_GetElapsedTime>
 801a28a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	681a      	ldr	r2, [r3, #0]
 801a290:	697b      	ldr	r3, [r7, #20]
 801a292:	1ad2      	subs	r2, r2, r3
 801a294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a296:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a29a:	2201      	movs	r2, #1
 801a29c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801a29e:	683b      	ldr	r3, [r7, #0]
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d004      	beq.n	801a2b6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801a2b0:	697a      	ldr	r2, [r7, #20]
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d32b      	bcc.n	801a30e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801a2b6:	68bb      	ldr	r3, [r7, #8]
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	69db      	ldr	r3, [r3, #28]
 801a2c0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801a2c6:	68dd      	ldr	r5, [r3, #12]
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	7a5e      	ldrb	r6, [r3, #9]
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	f893 c008 	ldrb.w	ip, [r3, #8]
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	7d1b      	ldrb	r3, [r3, #20]
 801a2d6:	68fa      	ldr	r2, [r7, #12]
 801a2d8:	6992      	ldr	r2, [r2, #24]
 801a2da:	9203      	str	r2, [sp, #12]
 801a2dc:	68fa      	ldr	r2, [r7, #12]
 801a2de:	f10d 0e04 	add.w	lr, sp, #4
 801a2e2:	320c      	adds	r2, #12
 801a2e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a2e8:	e88e 0003 	stmia.w	lr, {r0, r1}
 801a2ec:	9300      	str	r3, [sp, #0]
 801a2ee:	4663      	mov	r3, ip
 801a2f0:	4632      	mov	r2, r6
 801a2f2:	4629      	mov	r1, r5
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	f7ff fc35 	bl	8019b64 <RegionCommonUpdateBandTimeOff>
 801a2fa:	4602      	mov	r2, r0
 801a2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2fe:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	69d8      	ldr	r0, [r3, #28]
 801a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a306:	683a      	ldr	r2, [r7, #0]
 801a308:	6879      	ldr	r1, [r7, #4]
 801a30a:	f7ff fef4 	bl	801a0f6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801a30e:	683b      	ldr	r3, [r7, #0]
 801a310:	781b      	ldrb	r3, [r3, #0]
 801a312:	2b00      	cmp	r3, #0
 801a314:	d004      	beq.n	801a320 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801a316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a318:	2200      	movs	r2, #0
 801a31a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801a31c:	2300      	movs	r3, #0
 801a31e:	e006      	b.n	801a32e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a322:	781b      	ldrb	r3, [r3, #0]
 801a324:	2b00      	cmp	r3, #0
 801a326:	d001      	beq.n	801a32c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801a328:	230b      	movs	r3, #11
 801a32a:	e000      	b.n	801a32e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801a32c:	230c      	movs	r3, #12
    }
}
 801a32e:	4618      	mov	r0, r3
 801a330:	371c      	adds	r7, #28
 801a332:	46bd      	mov	sp, r7
 801a334:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a336 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801a336:	b5b0      	push	{r4, r5, r7, lr}
 801a338:	b086      	sub	sp, #24
 801a33a:	af02      	add	r7, sp, #8
 801a33c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	781b      	ldrb	r3, [r3, #0]
 801a342:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	f993 2000 	ldrsb.w	r2, [r3]
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a350:	429a      	cmp	r2, r3
 801a352:	d103      	bne.n	801a35c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a35a:	e026      	b.n	801a3aa <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801a35c:	7bfb      	ldrb	r3, [r7, #15]
 801a35e:	3b01      	subs	r3, #1
 801a360:	b2db      	uxtb	r3, r3
 801a362:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801a36a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a36e:	429a      	cmp	r2, r3
 801a370:	d019      	beq.n	801a3a6 <RegionCommonGetNextLowerTxDr+0x70>
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	78d8      	ldrb	r0, [r3, #3]
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	6859      	ldr	r1, [r3, #4]
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a386:	687a      	ldr	r2, [r7, #4]
 801a388:	6892      	ldr	r2, [r2, #8]
 801a38a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801a38e:	9201      	str	r2, [sp, #4]
 801a390:	9300      	str	r3, [sp, #0]
 801a392:	462b      	mov	r3, r5
 801a394:	4622      	mov	r2, r4
 801a396:	f7ff faa2 	bl	80198de <RegionCommonChanVerifyDr>
 801a39a:	4603      	mov	r3, r0
 801a39c:	f083 0301 	eor.w	r3, r3, #1
 801a3a0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d1da      	bne.n	801a35c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801a3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	3710      	adds	r7, #16
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	bdb0      	pop	{r4, r5, r7, pc}

0801a3b2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801a3b2:	b480      	push	{r7}
 801a3b4:	b083      	sub	sp, #12
 801a3b6:	af00      	add	r7, sp, #0
 801a3b8:	4603      	mov	r3, r0
 801a3ba:	460a      	mov	r2, r1
 801a3bc:	71fb      	strb	r3, [r7, #7]
 801a3be:	4613      	mov	r3, r2
 801a3c0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801a3c2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a3c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3ca:	4293      	cmp	r3, r2
 801a3cc:	bfb8      	it	lt
 801a3ce:	4613      	movlt	r3, r2
 801a3d0:	b25b      	sxtb	r3, r3
}
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	370c      	adds	r7, #12
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bc80      	pop	{r7}
 801a3da:	4770      	bx	lr

0801a3dc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801a3dc:	b480      	push	{r7}
 801a3de:	b083      	sub	sp, #12
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
 801a3e4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	683a      	ldr	r2, [r7, #0]
 801a3ec:	4413      	add	r3, r2
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	4a07      	ldr	r2, [pc, #28]	; (801a410 <RegionCommonGetBandwidth+0x34>)
 801a3f2:	4293      	cmp	r3, r2
 801a3f4:	d004      	beq.n	801a400 <RegionCommonGetBandwidth+0x24>
 801a3f6:	4a07      	ldr	r2, [pc, #28]	; (801a414 <RegionCommonGetBandwidth+0x38>)
 801a3f8:	4293      	cmp	r3, r2
 801a3fa:	d003      	beq.n	801a404 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	e002      	b.n	801a406 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801a400:	2301      	movs	r3, #1
 801a402:	e000      	b.n	801a406 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801a404:	2302      	movs	r3, #2
    }
}
 801a406:	4618      	mov	r0, r3
 801a408:	370c      	adds	r7, #12
 801a40a:	46bd      	mov	sp, r7
 801a40c:	bc80      	pop	{r7}
 801a40e:	4770      	bx	lr
 801a410:	0003d090 	.word	0x0003d090
 801a414:	0007a120 	.word	0x0007a120

0801a418 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b086      	sub	sp, #24
 801a41c:	af04      	add	r7, sp, #16
 801a41e:	4603      	mov	r3, r0
 801a420:	6039      	str	r1, [r7, #0]
 801a422:	71fb      	strb	r3, [r7, #7]
 801a424:	4613      	mov	r3, r2
 801a426:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801a428:	79fb      	ldrb	r3, [r7, #7]
 801a42a:	2b05      	cmp	r3, #5
 801a42c:	d810      	bhi.n	801a450 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801a42e:	79fb      	ldrb	r3, [r7, #7]
 801a430:	4a0f      	ldr	r2, [pc, #60]	; (801a470 <RegionCommonRxConfigPrint+0x58>)
 801a432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a436:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a43a:	9202      	str	r2, [sp, #8]
 801a43c:	683a      	ldr	r2, [r7, #0]
 801a43e:	9201      	str	r2, [sp, #4]
 801a440:	9300      	str	r3, [sp, #0]
 801a442:	4b0c      	ldr	r3, [pc, #48]	; (801a474 <RegionCommonRxConfigPrint+0x5c>)
 801a444:	2201      	movs	r2, #1
 801a446:	2100      	movs	r1, #0
 801a448:	2002      	movs	r0, #2
 801a44a:	f005 fe39 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801a44e:	e00a      	b.n	801a466 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801a450:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a454:	9301      	str	r3, [sp, #4]
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	9300      	str	r3, [sp, #0]
 801a45a:	4b07      	ldr	r3, [pc, #28]	; (801a478 <RegionCommonRxConfigPrint+0x60>)
 801a45c:	2201      	movs	r2, #1
 801a45e:	2100      	movs	r1, #0
 801a460:	2002      	movs	r0, #2
 801a462:	f005 fe2d 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 801a466:	bf00      	nop
 801a468:	3708      	adds	r7, #8
 801a46a:	46bd      	mov	sp, r7
 801a46c:	bd80      	pop	{r7, pc}
 801a46e:	bf00      	nop
 801a470:	20000118 	.word	0x20000118
 801a474:	0802188c 	.word	0x0802188c
 801a478:	080218ac 	.word	0x080218ac

0801a47c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b084      	sub	sp, #16
 801a480:	af02      	add	r7, sp, #8
 801a482:	6078      	str	r0, [r7, #4]
 801a484:	460b      	mov	r3, r1
 801a486:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801a488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a48c:	9301      	str	r3, [sp, #4]
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	9300      	str	r3, [sp, #0]
 801a492:	4b05      	ldr	r3, [pc, #20]	; (801a4a8 <RegionCommonTxConfigPrint+0x2c>)
 801a494:	2201      	movs	r2, #1
 801a496:	2100      	movs	r1, #0
 801a498:	2002      	movs	r0, #2
 801a49a:	f005 fe11 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
}
 801a49e:	bf00      	nop
 801a4a0:	3708      	adds	r7, #8
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bd80      	pop	{r7, pc}
 801a4a6:	bf00      	nop
 801a4a8:	080218c8 	.word	0x080218c8

0801a4ac <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b084      	sub	sp, #16
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	603b      	str	r3, [r7, #0]
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	71fb      	strb	r3, [r7, #7]
 801a4b8:	460b      	mov	r3, r1
 801a4ba:	71bb      	strb	r3, [r7, #6]
 801a4bc:	4613      	mov	r3, r2
 801a4be:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801a4c0:	79fb      	ldrb	r3, [r7, #7]
 801a4c2:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801a4c4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a4c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4cc:	4611      	mov	r1, r2
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f7ff ff6f 	bl	801a3b2 <RegionCommonLimitTxPower>
 801a4d4:	4603      	mov	r3, r0
 801a4d6:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a4d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a4dc:	2b04      	cmp	r3, #4
 801a4de:	d106      	bne.n	801a4ee <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a4e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4e4:	2b02      	cmp	r3, #2
 801a4e6:	bfb8      	it	lt
 801a4e8:	2302      	movlt	r3, #2
 801a4ea:	73fb      	strb	r3, [r7, #15]
 801a4ec:	e00d      	b.n	801a50a <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a4ee:	2204      	movs	r2, #4
 801a4f0:	2100      	movs	r1, #0
 801a4f2:	6838      	ldr	r0, [r7, #0]
 801a4f4:	f7ff fab6 	bl	8019a64 <RegionCommonCountChannels>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	2b31      	cmp	r3, #49	; 0x31
 801a4fc:	d805      	bhi.n	801a50a <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a4fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a502:	2b05      	cmp	r3, #5
 801a504:	bfb8      	it	lt
 801a506:	2305      	movlt	r3, #5
 801a508:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a50e:	4618      	mov	r0, r3
 801a510:	3710      	adds	r7, #16
 801a512:	46bd      	mov	sp, r7
 801a514:	bd80      	pop	{r7, pc}
	...

0801a518 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b082      	sub	sp, #8
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a520:	4b18      	ldr	r3, [pc, #96]	; (801a584 <VerifyRfFreq+0x6c>)
 801a522:	6a1b      	ldr	r3, [r3, #32]
 801a524:	6878      	ldr	r0, [r7, #4]
 801a526:	4798      	blx	r3
 801a528:	4603      	mov	r3, r0
 801a52a:	f083 0301 	eor.w	r3, r3, #1
 801a52e:	b2db      	uxtb	r3, r3
 801a530:	2b00      	cmp	r3, #0
 801a532:	d001      	beq.n	801a538 <VerifyRfFreq+0x20>
    {
        return false;
 801a534:	2300      	movs	r3, #0
 801a536:	e021      	b.n	801a57c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	4a13      	ldr	r2, [pc, #76]	; (801a588 <VerifyRfFreq+0x70>)
 801a53c:	4293      	cmp	r3, r2
 801a53e:	d910      	bls.n	801a562 <VerifyRfFreq+0x4a>
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	4a12      	ldr	r2, [pc, #72]	; (801a58c <VerifyRfFreq+0x74>)
 801a544:	4293      	cmp	r3, r2
 801a546:	d80c      	bhi.n	801a562 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a548:	687a      	ldr	r2, [r7, #4]
 801a54a:	4b11      	ldr	r3, [pc, #68]	; (801a590 <VerifyRfFreq+0x78>)
 801a54c:	4413      	add	r3, r2
 801a54e:	4a11      	ldr	r2, [pc, #68]	; (801a594 <VerifyRfFreq+0x7c>)
 801a550:	fba2 1203 	umull	r1, r2, r2, r3
 801a554:	0c92      	lsrs	r2, r2, #18
 801a556:	4910      	ldr	r1, [pc, #64]	; (801a598 <VerifyRfFreq+0x80>)
 801a558:	fb01 f202 	mul.w	r2, r1, r2
 801a55c:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a55e:	2a00      	cmp	r2, #0
 801a560:	d001      	beq.n	801a566 <VerifyRfFreq+0x4e>
    {
        return false;
 801a562:	2300      	movs	r3, #0
 801a564:	e00a      	b.n	801a57c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	4a0c      	ldr	r2, [pc, #48]	; (801a59c <VerifyRfFreq+0x84>)
 801a56a:	4293      	cmp	r3, r2
 801a56c:	d903      	bls.n	801a576 <VerifyRfFreq+0x5e>
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	4a06      	ldr	r2, [pc, #24]	; (801a58c <VerifyRfFreq+0x74>)
 801a572:	4293      	cmp	r3, r2
 801a574:	d901      	bls.n	801a57a <VerifyRfFreq+0x62>
    {
        return false;
 801a576:	2300      	movs	r3, #0
 801a578:	e000      	b.n	801a57c <VerifyRfFreq+0x64>
    }
    return true;
 801a57a:	2301      	movs	r3, #1
}
 801a57c:	4618      	mov	r0, r3
 801a57e:	3708      	adds	r7, #8
 801a580:	46bd      	mov	sp, r7
 801a582:	bd80      	pop	{r7, pc}
 801a584:	08021f14 	.word	0x08021f14
 801a588:	3708709f 	.word	0x3708709f
 801a58c:	374886e0 	.word	0x374886e0
 801a590:	c8f78f60 	.word	0xc8f78f60
 801a594:	6fd91d85 	.word	0x6fd91d85
 801a598:	000927c0 	.word	0x000927c0
 801a59c:	35c8015f 	.word	0x35c8015f

0801a5a0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a5a0:	b590      	push	{r4, r7, lr}
 801a5a2:	b089      	sub	sp, #36	; 0x24
 801a5a4:	af04      	add	r7, sp, #16
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	460a      	mov	r2, r1
 801a5aa:	71fb      	strb	r3, [r7, #7]
 801a5ac:	4613      	mov	r3, r2
 801a5ae:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a5b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5b4:	4a0f      	ldr	r2, [pc, #60]	; (801a5f4 <GetTimeOnAir+0x54>)
 801a5b6:	5cd3      	ldrb	r3, [r2, r3]
 801a5b8:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5be:	490e      	ldr	r1, [pc, #56]	; (801a5f8 <GetTimeOnAir+0x58>)
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f7ff ff0b 	bl	801a3dc <RegionCommonGetBandwidth>
 801a5c6:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a5c8:	4b0c      	ldr	r3, [pc, #48]	; (801a5fc <GetTimeOnAir+0x5c>)
 801a5ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a5cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a5d0:	88bb      	ldrh	r3, [r7, #4]
 801a5d2:	b2db      	uxtb	r3, r3
 801a5d4:	2101      	movs	r1, #1
 801a5d6:	9103      	str	r1, [sp, #12]
 801a5d8:	9302      	str	r3, [sp, #8]
 801a5da:	2300      	movs	r3, #0
 801a5dc:	9301      	str	r3, [sp, #4]
 801a5de:	2308      	movs	r3, #8
 801a5e0:	9300      	str	r3, [sp, #0]
 801a5e2:	2301      	movs	r3, #1
 801a5e4:	68b9      	ldr	r1, [r7, #8]
 801a5e6:	2001      	movs	r0, #1
 801a5e8:	47a0      	blx	r4
 801a5ea:	4603      	mov	r3, r0
}
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	3714      	adds	r7, #20
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	bd90      	pop	{r4, r7, pc}
 801a5f4:	08021e90 	.word	0x08021e90
 801a5f8:	08021ea0 	.word	0x08021ea0
 801a5fc:	08021f14 	.word	0x08021f14

0801a600 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b088      	sub	sp, #32
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a608:	2300      	movs	r3, #0
 801a60a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	781b      	ldrb	r3, [r3, #0]
 801a610:	3b01      	subs	r3, #1
 801a612:	2b37      	cmp	r3, #55	; 0x37
 801a614:	f200 8136 	bhi.w	801a884 <RegionUS915GetPhyParam+0x284>
 801a618:	a201      	add	r2, pc, #4	; (adr r2, 801a620 <RegionUS915GetPhyParam+0x20>)
 801a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a61e:	bf00      	nop
 801a620:	0801a701 	.word	0x0801a701
 801a624:	0801a707 	.word	0x0801a707
 801a628:	0801a885 	.word	0x0801a885
 801a62c:	0801a885 	.word	0x0801a885
 801a630:	0801a885 	.word	0x0801a885
 801a634:	0801a70d 	.word	0x0801a70d
 801a638:	0801a885 	.word	0x0801a885
 801a63c:	0801a747 	.word	0x0801a747
 801a640:	0801a885 	.word	0x0801a885
 801a644:	0801a74d 	.word	0x0801a74d
 801a648:	0801a753 	.word	0x0801a753
 801a64c:	0801a759 	.word	0x0801a759
 801a650:	0801a75f 	.word	0x0801a75f
 801a654:	0801a76f 	.word	0x0801a76f
 801a658:	0801a77f 	.word	0x0801a77f
 801a65c:	0801a785 	.word	0x0801a785
 801a660:	0801a78d 	.word	0x0801a78d
 801a664:	0801a795 	.word	0x0801a795
 801a668:	0801a79d 	.word	0x0801a79d
 801a66c:	0801a7a5 	.word	0x0801a7a5
 801a670:	0801a7ad 	.word	0x0801a7ad
 801a674:	0801a7c1 	.word	0x0801a7c1
 801a678:	0801a7c7 	.word	0x0801a7c7
 801a67c:	0801a7cd 	.word	0x0801a7cd
 801a680:	0801a7d3 	.word	0x0801a7d3
 801a684:	0801a7df 	.word	0x0801a7df
 801a688:	0801a7eb 	.word	0x0801a7eb
 801a68c:	0801a7f1 	.word	0x0801a7f1
 801a690:	0801a7f9 	.word	0x0801a7f9
 801a694:	0801a7ff 	.word	0x0801a7ff
 801a698:	0801a805 	.word	0x0801a805
 801a69c:	0801a80b 	.word	0x0801a80b
 801a6a0:	0801a713 	.word	0x0801a713
 801a6a4:	0801a885 	.word	0x0801a885
 801a6a8:	0801a885 	.word	0x0801a885
 801a6ac:	0801a885 	.word	0x0801a885
 801a6b0:	0801a885 	.word	0x0801a885
 801a6b4:	0801a885 	.word	0x0801a885
 801a6b8:	0801a885 	.word	0x0801a885
 801a6bc:	0801a885 	.word	0x0801a885
 801a6c0:	0801a885 	.word	0x0801a885
 801a6c4:	0801a885 	.word	0x0801a885
 801a6c8:	0801a885 	.word	0x0801a885
 801a6cc:	0801a885 	.word	0x0801a885
 801a6d0:	0801a885 	.word	0x0801a885
 801a6d4:	0801a885 	.word	0x0801a885
 801a6d8:	0801a813 	.word	0x0801a813
 801a6dc:	0801a827 	.word	0x0801a827
 801a6e0:	0801a835 	.word	0x0801a835
 801a6e4:	0801a83b 	.word	0x0801a83b
 801a6e8:	0801a885 	.word	0x0801a885
 801a6ec:	0801a841 	.word	0x0801a841
 801a6f0:	0801a855 	.word	0x0801a855
 801a6f4:	0801a85b 	.word	0x0801a85b
 801a6f8:	0801a861 	.word	0x0801a861
 801a6fc:	0801a871 	.word	0x0801a871
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a700:	2308      	movs	r3, #8
 801a702:	61bb      	str	r3, [r7, #24]
            break;
 801a704:	e0bf      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a706:	2300      	movs	r3, #0
 801a708:	61bb      	str	r3, [r7, #24]
            break;
 801a70a:	e0bc      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a70c:	2300      	movs	r3, #0
 801a70e:	61bb      	str	r3, [r7, #24]
            break;
 801a710:	e0b9      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a718:	733b      	strb	r3, [r7, #12]
 801a71a:	2304      	movs	r3, #4
 801a71c:	737b      	strb	r3, [r7, #13]
 801a71e:	2300      	movs	r3, #0
 801a720:	73bb      	strb	r3, [r7, #14]
 801a722:	2348      	movs	r3, #72	; 0x48
 801a724:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a726:	4b5b      	ldr	r3, [pc, #364]	; (801a894 <RegionUS915GetPhyParam+0x294>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a72e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a730:	4b58      	ldr	r3, [pc, #352]	; (801a894 <RegionUS915GetPhyParam+0x294>)
 801a732:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a734:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a736:	f107 030c 	add.w	r3, r7, #12
 801a73a:	4618      	mov	r0, r3
 801a73c:	f7ff fdfb 	bl	801a336 <RegionCommonGetNextLowerTxDr>
 801a740:	4603      	mov	r3, r0
 801a742:	61bb      	str	r3, [r7, #24]
            break;
 801a744:	e09f      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a746:	2300      	movs	r3, #0
 801a748:	61bb      	str	r3, [r7, #24]
            break;
 801a74a:	e09c      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a74c:	2300      	movs	r3, #0
 801a74e:	61bb      	str	r3, [r7, #24]
            break;
 801a750:	e099      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a752:	2340      	movs	r3, #64	; 0x40
 801a754:	61bb      	str	r3, [r7, #24]
            break;
 801a756:	e096      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a758:	2320      	movs	r3, #32
 801a75a:	61bb      	str	r3, [r7, #24]
            break;
 801a75c:	e093      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a764:	461a      	mov	r2, r3
 801a766:	4b4c      	ldr	r3, [pc, #304]	; (801a898 <RegionUS915GetPhyParam+0x298>)
 801a768:	5c9b      	ldrb	r3, [r3, r2]
 801a76a:	61bb      	str	r3, [r7, #24]
            break;
 801a76c:	e08b      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a774:	461a      	mov	r2, r3
 801a776:	4b49      	ldr	r3, [pc, #292]	; (801a89c <RegionUS915GetPhyParam+0x29c>)
 801a778:	5c9b      	ldrb	r3, [r3, r2]
 801a77a:	61bb      	str	r3, [r7, #24]
            break;
 801a77c:	e083      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a77e:	2300      	movs	r3, #0
 801a780:	61bb      	str	r3, [r7, #24]
            break;
 801a782:	e080      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a784:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a788:	61bb      	str	r3, [r7, #24]
            break;
 801a78a:	e07c      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a78c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a790:	61bb      	str	r3, [r7, #24]
            break;
 801a792:	e078      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a794:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a798:	61bb      	str	r3, [r7, #24]
            break;
 801a79a:	e074      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a79c:	f241 3388 	movw	r3, #5000	; 0x1388
 801a7a0:	61bb      	str	r3, [r7, #24]
            break;
 801a7a2:	e070      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a7a4:	f241 7370 	movw	r3, #6000	; 0x1770
 801a7a8:	61bb      	str	r3, [r7, #24]
            break;
 801a7aa:	e06c      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801a7ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a7b0:	483b      	ldr	r0, [pc, #236]	; (801a8a0 <RegionUS915GetPhyParam+0x2a0>)
 801a7b2:	f001 f8a7 	bl	801b904 <randr>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a7bc:	61bb      	str	r3, [r7, #24]
            break;
 801a7be:	e062      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	61bb      	str	r3, [r7, #24]
            break;
 801a7c4:	e05f      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a7c6:	4b37      	ldr	r3, [pc, #220]	; (801a8a4 <RegionUS915GetPhyParam+0x2a4>)
 801a7c8:	61bb      	str	r3, [r7, #24]
            break;
 801a7ca:	e05c      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a7cc:	2308      	movs	r3, #8
 801a7ce:	61bb      	str	r3, [r7, #24]
            break;
 801a7d0:	e059      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a7d2:	4b30      	ldr	r3, [pc, #192]	; (801a894 <RegionUS915GetPhyParam+0x294>)
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a7da:	61bb      	str	r3, [r7, #24]
            break;
 801a7dc:	e053      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a7de:	4b2d      	ldr	r3, [pc, #180]	; (801a894 <RegionUS915GetPhyParam+0x294>)
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a7e6:	61bb      	str	r3, [r7, #24]
            break;
 801a7e8:	e04d      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a7ea:	2348      	movs	r3, #72	; 0x48
 801a7ec:	61bb      	str	r3, [r7, #24]
            break;
 801a7ee:	e04a      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a7f0:	4b28      	ldr	r3, [pc, #160]	; (801a894 <RegionUS915GetPhyParam+0x294>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	61bb      	str	r3, [r7, #24]
            break;
 801a7f6:	e046      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	61bb      	str	r3, [r7, #24]
            break;
 801a7fc:	e043      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a7fe:	2300      	movs	r3, #0
 801a800:	61bb      	str	r3, [r7, #24]
            break;
 801a802:	e040      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a804:	4b28      	ldr	r3, [pc, #160]	; (801a8a8 <RegionUS915GetPhyParam+0x2a8>)
 801a806:	61bb      	str	r3, [r7, #24]
            break;
 801a808:	e03d      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a80a:	f04f 0300 	mov.w	r3, #0
 801a80e:	61bb      	str	r3, [r7, #24]
            break;
 801a810:	e039      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	791b      	ldrb	r3, [r3, #4]
 801a816:	4a25      	ldr	r2, [pc, #148]	; (801a8ac <RegionUS915GetPhyParam+0x2ac>)
 801a818:	4922      	ldr	r1, [pc, #136]	; (801a8a4 <RegionUS915GetPhyParam+0x2a4>)
 801a81a:	4618      	mov	r0, r3
 801a81c:	f7fe fefd 	bl	801961a <RegionBaseUSCalcDownlinkFrequency>
 801a820:	4603      	mov	r3, r0
 801a822:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a824:	e02f      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a826:	2317      	movs	r3, #23
 801a828:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a82a:	2304      	movs	r3, #4
 801a82c:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a82e:	2303      	movs	r3, #3
 801a830:	76bb      	strb	r3, [r7, #26]
            break;
 801a832:	e028      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a834:	2308      	movs	r3, #8
 801a836:	61bb      	str	r3, [r7, #24]
            break;
 801a838:	e025      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a83a:	2308      	movs	r3, #8
 801a83c:	61bb      	str	r3, [r7, #24]
            break;
 801a83e:	e022      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	791b      	ldrb	r3, [r3, #4]
 801a844:	4a19      	ldr	r2, [pc, #100]	; (801a8ac <RegionUS915GetPhyParam+0x2ac>)
 801a846:	4917      	ldr	r1, [pc, #92]	; (801a8a4 <RegionUS915GetPhyParam+0x2a4>)
 801a848:	4618      	mov	r0, r3
 801a84a:	f7fe fee6 	bl	801961a <RegionBaseUSCalcDownlinkFrequency>
 801a84e:	4603      	mov	r3, r0
 801a850:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a852:	e018      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a854:	2308      	movs	r3, #8
 801a856:	61bb      	str	r3, [r7, #24]
            break;
 801a858:	e015      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a85a:	2308      	movs	r3, #8
 801a85c:	61bb      	str	r3, [r7, #24]
            break;
 801a85e:	e012      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a866:	461a      	mov	r2, r3
 801a868:	4b11      	ldr	r3, [pc, #68]	; (801a8b0 <RegionUS915GetPhyParam+0x2b0>)
 801a86a:	5c9b      	ldrb	r3, [r3, r2]
 801a86c:	61bb      	str	r3, [r7, #24]
            break;
 801a86e:	e00a      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a876:	490f      	ldr	r1, [pc, #60]	; (801a8b4 <RegionUS915GetPhyParam+0x2b4>)
 801a878:	4618      	mov	r0, r3
 801a87a:	f7ff fdaf 	bl	801a3dc <RegionCommonGetBandwidth>
 801a87e:	4603      	mov	r3, r0
 801a880:	61bb      	str	r3, [r7, #24]
            break;
 801a882:	e000      	b.n	801a886 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801a884:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a886:	69bb      	ldr	r3, [r7, #24]
 801a888:	61fb      	str	r3, [r7, #28]
 801a88a:	69fb      	ldr	r3, [r7, #28]
}
 801a88c:	4618      	mov	r0, r3
 801a88e:	3720      	adds	r7, #32
 801a890:	46bd      	mov	sp, r7
 801a892:	bd80      	pop	{r7, pc}
 801a894:	20001cc0 	.word	0x20001cc0
 801a898:	08021ef4 	.word	0x08021ef4
 801a89c:	08021f04 	.word	0x08021f04
 801a8a0:	fffffc18 	.word	0xfffffc18
 801a8a4:	370870a0 	.word	0x370870a0
 801a8a8:	4200999a 	.word	0x4200999a
 801a8ac:	000927c0 	.word	0x000927c0
 801a8b0:	08021e90 	.word	0x08021e90
 801a8b4:	08021ea0 	.word	0x08021ea0

0801a8b8 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a8b8:	b590      	push	{r4, r7, lr}
 801a8ba:	b085      	sub	sp, #20
 801a8bc:	af02      	add	r7, sp, #8
 801a8be:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a8c0:	4b11      	ldr	r3, [pc, #68]	; (801a908 <RegionUS915SetBandTxDone+0x50>)
 801a8c2:	681a      	ldr	r2, [r3, #0]
 801a8c4:	4b11      	ldr	r3, [pc, #68]	; (801a90c <RegionUS915SetBandTxDone+0x54>)
 801a8c6:	6819      	ldr	r1, [r3, #0]
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	781b      	ldrb	r3, [r3, #0]
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	005b      	lsls	r3, r3, #1
 801a8d2:	4403      	add	r3, r0
 801a8d4:	009b      	lsls	r3, r3, #2
 801a8d6:	440b      	add	r3, r1
 801a8d8:	3309      	adds	r3, #9
 801a8da:	781b      	ldrb	r3, [r3, #0]
 801a8dc:	4619      	mov	r1, r3
 801a8de:	460b      	mov	r3, r1
 801a8e0:	005b      	lsls	r3, r3, #1
 801a8e2:	440b      	add	r3, r1
 801a8e4:	00db      	lsls	r3, r3, #3
 801a8e6:	18d0      	adds	r0, r2, r3
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	6899      	ldr	r1, [r3, #8]
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	785c      	ldrb	r4, [r3, #1]
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	691a      	ldr	r2, [r3, #16]
 801a8f4:	9200      	str	r2, [sp, #0]
 801a8f6:	68db      	ldr	r3, [r3, #12]
 801a8f8:	4622      	mov	r2, r4
 801a8fa:	f7ff f905 	bl	8019b08 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801a8fe:	bf00      	nop
 801a900:	370c      	adds	r7, #12
 801a902:	46bd      	mov	sp, r7
 801a904:	bd90      	pop	{r4, r7, pc}
 801a906:	bf00      	nop
 801a908:	20001cc4 	.word	0x20001cc4
 801a90c:	20001cc0 	.word	0x20001cc0

0801a910 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b08a      	sub	sp, #40	; 0x28
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a918:	2301      	movs	r3, #1
 801a91a:	81bb      	strh	r3, [r7, #12]
 801a91c:	2300      	movs	r3, #0
 801a91e:	73bb      	strb	r3, [r7, #14]
 801a920:	2300      	movs	r3, #0
 801a922:	613b      	str	r3, [r7, #16]
 801a924:	2300      	movs	r3, #0
 801a926:	617b      	str	r3, [r7, #20]
 801a928:	2300      	movs	r3, #0
 801a92a:	61bb      	str	r3, [r7, #24]
 801a92c:	2300      	movs	r3, #0
 801a92e:	61fb      	str	r3, [r7, #28]
 801a930:	2300      	movs	r3, #0
 801a932:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	7b1b      	ldrb	r3, [r3, #12]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d007      	beq.n	801a94e <RegionUS915InitDefaults+0x3e>
 801a93e:	2b00      	cmp	r3, #0
 801a940:	f2c0 8104 	blt.w	801ab4c <RegionUS915InitDefaults+0x23c>
 801a944:	3b01      	subs	r3, #1
 801a946:	2b01      	cmp	r3, #1
 801a948:	f200 8100 	bhi.w	801ab4c <RegionUS915InitDefaults+0x23c>
 801a94c:	e0ce      	b.n	801aaec <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	2b00      	cmp	r3, #0
 801a954:	f000 80fc 	beq.w	801ab50 <RegionUS915InitDefaults+0x240>
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	685b      	ldr	r3, [r3, #4]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	f000 80f7 	beq.w	801ab50 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	4a7c      	ldr	r2, [pc, #496]	; (801ab58 <RegionUS915InitDefaults+0x248>)
 801a968:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	685b      	ldr	r3, [r3, #4]
 801a96e:	4a7b      	ldr	r2, [pc, #492]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801a970:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	689b      	ldr	r3, [r3, #8]
 801a976:	4a7a      	ldr	r2, [pc, #488]	; (801ab60 <RegionUS915InitDefaults+0x250>)
 801a978:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a97a:	4b77      	ldr	r3, [pc, #476]	; (801ab58 <RegionUS915InitDefaults+0x248>)
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	2200      	movs	r2, #0
 801a980:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a982:	4b75      	ldr	r3, [pc, #468]	; (801ab58 <RegionUS915InitDefaults+0x248>)
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	2200      	movs	r2, #0
 801a988:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a98a:	4b75      	ldr	r3, [pc, #468]	; (801ab60 <RegionUS915InitDefaults+0x250>)
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	f107 010c 	add.w	r1, r7, #12
 801a992:	2218      	movs	r2, #24
 801a994:	4618      	mov	r0, r3
 801a996:	f000 ffcc 	bl	801b932 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a99a:	2300      	movs	r3, #0
 801a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a9a0:	e02e      	b.n	801aa00 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a9a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9a6:	4a6f      	ldr	r2, [pc, #444]	; (801ab64 <RegionUS915InitDefaults+0x254>)
 801a9a8:	fb03 f202 	mul.w	r2, r3, r2
 801a9ac:	4b6e      	ldr	r3, [pc, #440]	; (801ab68 <RegionUS915InitDefaults+0x258>)
 801a9ae:	4413      	add	r3, r2
 801a9b0:	4a6a      	ldr	r2, [pc, #424]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801a9b2:	6811      	ldr	r1, [r2, #0]
 801a9b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	4613      	mov	r3, r2
 801a9bc:	005b      	lsls	r3, r3, #1
 801a9be:	4413      	add	r3, r2
 801a9c0:	009b      	lsls	r3, r3, #2
 801a9c2:	440b      	add	r3, r1
 801a9c4:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a9c6:	4b65      	ldr	r3, [pc, #404]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801a9c8:	6819      	ldr	r1, [r3, #0]
 801a9ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a9ce:	4613      	mov	r3, r2
 801a9d0:	005b      	lsls	r3, r3, #1
 801a9d2:	4413      	add	r3, r2
 801a9d4:	009b      	lsls	r3, r3, #2
 801a9d6:	440b      	add	r3, r1
 801a9d8:	3308      	adds	r3, #8
 801a9da:	2230      	movs	r2, #48	; 0x30
 801a9dc:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a9de:	4b5f      	ldr	r3, [pc, #380]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801a9e0:	6819      	ldr	r1, [r3, #0]
 801a9e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a9e6:	4613      	mov	r3, r2
 801a9e8:	005b      	lsls	r3, r3, #1
 801a9ea:	4413      	add	r3, r2
 801a9ec:	009b      	lsls	r3, r3, #2
 801a9ee:	440b      	add	r3, r1
 801a9f0:	3309      	adds	r3, #9
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9fa:	3301      	adds	r3, #1
 801a9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa04:	2b3f      	cmp	r3, #63	; 0x3f
 801aa06:	d9cc      	bls.n	801a9a2 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801aa08:	2340      	movs	r3, #64	; 0x40
 801aa0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801aa0e:	e02f      	b.n	801aa70 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801aa10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa14:	3b40      	subs	r3, #64	; 0x40
 801aa16:	4a55      	ldr	r2, [pc, #340]	; (801ab6c <RegionUS915InitDefaults+0x25c>)
 801aa18:	fb03 f202 	mul.w	r2, r3, r2
 801aa1c:	4b54      	ldr	r3, [pc, #336]	; (801ab70 <RegionUS915InitDefaults+0x260>)
 801aa1e:	4413      	add	r3, r2
 801aa20:	4a4e      	ldr	r2, [pc, #312]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aa22:	6811      	ldr	r1, [r2, #0]
 801aa24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801aa28:	4618      	mov	r0, r3
 801aa2a:	4613      	mov	r3, r2
 801aa2c:	005b      	lsls	r3, r3, #1
 801aa2e:	4413      	add	r3, r2
 801aa30:	009b      	lsls	r3, r3, #2
 801aa32:	440b      	add	r3, r1
 801aa34:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801aa36:	4b49      	ldr	r3, [pc, #292]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aa38:	6819      	ldr	r1, [r3, #0]
 801aa3a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801aa3e:	4613      	mov	r3, r2
 801aa40:	005b      	lsls	r3, r3, #1
 801aa42:	4413      	add	r3, r2
 801aa44:	009b      	lsls	r3, r3, #2
 801aa46:	440b      	add	r3, r1
 801aa48:	3308      	adds	r3, #8
 801aa4a:	2244      	movs	r2, #68	; 0x44
 801aa4c:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801aa4e:	4b43      	ldr	r3, [pc, #268]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aa50:	6819      	ldr	r1, [r3, #0]
 801aa52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801aa56:	4613      	mov	r3, r2
 801aa58:	005b      	lsls	r3, r3, #1
 801aa5a:	4413      	add	r3, r2
 801aa5c:	009b      	lsls	r3, r3, #2
 801aa5e:	440b      	add	r3, r1
 801aa60:	3309      	adds	r3, #9
 801aa62:	2200      	movs	r2, #0
 801aa64:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801aa66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa6a:	3301      	adds	r3, #1
 801aa6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801aa70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa74:	2b47      	cmp	r3, #71	; 0x47
 801aa76:	d9cb      	bls.n	801aa10 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801aa78:	4b38      	ldr	r3, [pc, #224]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa80:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801aa84:	4b35      	ldr	r3, [pc, #212]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa8c:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801aa90:	4b32      	ldr	r3, [pc, #200]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa98:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801aa9c:	4b2f      	ldr	r3, [pc, #188]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aaa4:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801aaa8:	4b2c      	ldr	r3, [pc, #176]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	22ff      	movs	r2, #255	; 0xff
 801aaae:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801aab2:	4b2a      	ldr	r3, [pc, #168]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	2200      	movs	r2, #0
 801aab8:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801aabc:	4b27      	ldr	r3, [pc, #156]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801aac4:	4b25      	ldr	r3, [pc, #148]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801aacc:	2206      	movs	r2, #6
 801aace:	4619      	mov	r1, r3
 801aad0:	f7fe fff4 	bl	8019abc <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801aad4:	4b20      	ldr	r3, [pc, #128]	; (801ab58 <RegionUS915InitDefaults+0x248>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	4618      	mov	r0, r3
 801aada:	4b20      	ldr	r3, [pc, #128]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801aae2:	2206      	movs	r2, #6
 801aae4:	4619      	mov	r1, r3
 801aae6:	f7fe ffe9 	bl	8019abc <RegionCommonChanMaskCopy>
            break;
 801aaea:	e032      	b.n	801ab52 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801aaec:	4b1b      	ldr	r3, [pc, #108]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801aaf4:	4b19      	ldr	r3, [pc, #100]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801aafc:	2206      	movs	r2, #6
 801aafe:	4619      	mov	r1, r3
 801ab00:	f7fe ffdc 	bl	8019abc <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801ab04:	2300      	movs	r3, #0
 801ab06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ab0a:	e01a      	b.n	801ab42 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801ab0c:	4b12      	ldr	r3, [pc, #72]	; (801ab58 <RegionUS915InitDefaults+0x248>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801ab14:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ab18:	4b10      	ldr	r3, [pc, #64]	; (801ab5c <RegionUS915InitDefaults+0x24c>)
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801ab20:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab24:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ab28:	4b0b      	ldr	r3, [pc, #44]	; (801ab58 <RegionUS915InitDefaults+0x248>)
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801ab30:	4001      	ands	r1, r0
 801ab32:	b289      	uxth	r1, r1
 801ab34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801ab38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ab42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ab46:	2b05      	cmp	r3, #5
 801ab48:	d9e0      	bls.n	801ab0c <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801ab4a:	e002      	b.n	801ab52 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801ab4c:	bf00      	nop
 801ab4e:	e000      	b.n	801ab52 <RegionUS915InitDefaults+0x242>
                return;
 801ab50:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801ab52:	3728      	adds	r7, #40	; 0x28
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}
 801ab58:	20001cbc 	.word	0x20001cbc
 801ab5c:	20001cc0 	.word	0x20001cc0
 801ab60:	20001cc4 	.word	0x20001cc4
 801ab64:	00030d40 	.word	0x00030d40
 801ab68:	35c80160 	.word	0x35c80160
 801ab6c:	00186a00 	.word	0x00186a00
 801ab70:	35d2afc0 	.word	0x35d2afc0

0801ab74 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b082      	sub	sp, #8
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	460b      	mov	r3, r1
 801ab7e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801ab80:	78fb      	ldrb	r3, [r7, #3]
 801ab82:	2b0f      	cmp	r3, #15
 801ab84:	d867      	bhi.n	801ac56 <RegionUS915Verify+0xe2>
 801ab86:	a201      	add	r2, pc, #4	; (adr r2, 801ab8c <RegionUS915Verify+0x18>)
 801ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab8c:	0801abcd 	.word	0x0801abcd
 801ab90:	0801ac57 	.word	0x0801ac57
 801ab94:	0801ac57 	.word	0x0801ac57
 801ab98:	0801ac57 	.word	0x0801ac57
 801ab9c:	0801ac57 	.word	0x0801ac57
 801aba0:	0801abdb 	.word	0x0801abdb
 801aba4:	0801abf9 	.word	0x0801abf9
 801aba8:	0801ac17 	.word	0x0801ac17
 801abac:	0801ac57 	.word	0x0801ac57
 801abb0:	0801ac35 	.word	0x0801ac35
 801abb4:	0801ac35 	.word	0x0801ac35
 801abb8:	0801ac57 	.word	0x0801ac57
 801abbc:	0801ac57 	.word	0x0801ac57
 801abc0:	0801ac57 	.word	0x0801ac57
 801abc4:	0801ac57 	.word	0x0801ac57
 801abc8:	0801ac53 	.word	0x0801ac53
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	4618      	mov	r0, r3
 801abd2:	f7ff fca1 	bl	801a518 <VerifyRfFreq>
 801abd6:	4603      	mov	r3, r0
 801abd8:	e03e      	b.n	801ac58 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	f993 3000 	ldrsb.w	r3, [r3]
 801abe0:	2204      	movs	r2, #4
 801abe2:	2100      	movs	r1, #0
 801abe4:	4618      	mov	r0, r3
 801abe6:	f7fe feec 	bl	80199c2 <RegionCommonValueInRange>
 801abea:	4603      	mov	r3, r0
 801abec:	2b00      	cmp	r3, #0
 801abee:	bf14      	ite	ne
 801abf0:	2301      	movne	r3, #1
 801abf2:	2300      	moveq	r3, #0
 801abf4:	b2db      	uxtb	r3, r3
 801abf6:	e02f      	b.n	801ac58 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	f993 3000 	ldrsb.w	r3, [r3]
 801abfe:	2205      	movs	r2, #5
 801ac00:	2100      	movs	r1, #0
 801ac02:	4618      	mov	r0, r3
 801ac04:	f7fe fedd 	bl	80199c2 <RegionCommonValueInRange>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	bf14      	ite	ne
 801ac0e:	2301      	movne	r3, #1
 801ac10:	2300      	moveq	r3, #0
 801ac12:	b2db      	uxtb	r3, r3
 801ac14:	e020      	b.n	801ac58 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	f993 3000 	ldrsb.w	r3, [r3]
 801ac1c:	220d      	movs	r2, #13
 801ac1e:	2108      	movs	r1, #8
 801ac20:	4618      	mov	r0, r3
 801ac22:	f7fe fece 	bl	80199c2 <RegionCommonValueInRange>
 801ac26:	4603      	mov	r3, r0
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	bf14      	ite	ne
 801ac2c:	2301      	movne	r3, #1
 801ac2e:	2300      	moveq	r3, #0
 801ac30:	b2db      	uxtb	r3, r3
 801ac32:	e011      	b.n	801ac58 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	f993 3000 	ldrsb.w	r3, [r3]
 801ac3a:	220e      	movs	r2, #14
 801ac3c:	2100      	movs	r1, #0
 801ac3e:	4618      	mov	r0, r3
 801ac40:	f7fe febf 	bl	80199c2 <RegionCommonValueInRange>
 801ac44:	4603      	mov	r3, r0
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	bf14      	ite	ne
 801ac4a:	2301      	movne	r3, #1
 801ac4c:	2300      	moveq	r3, #0
 801ac4e:	b2db      	uxtb	r3, r3
 801ac50:	e002      	b.n	801ac58 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801ac52:	2300      	movs	r3, #0
 801ac54:	e000      	b.n	801ac58 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801ac56:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3708      	adds	r7, #8
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	bd80      	pop	{r7, pc}

0801ac60 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801ac60:	b480      	push	{r7}
 801ac62:	b085      	sub	sp, #20
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	7a1b      	ldrb	r3, [r3, #8]
 801ac6c:	2b10      	cmp	r3, #16
 801ac6e:	d160      	bne.n	801ad32 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	685b      	ldr	r3, [r3, #4]
 801ac74:	330f      	adds	r3, #15
 801ac76:	781b      	ldrb	r3, [r3, #0]
 801ac78:	2b01      	cmp	r3, #1
 801ac7a:	d15c      	bne.n	801ad36 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	73fb      	strb	r3, [r7, #15]
 801ac80:	2300      	movs	r3, #0
 801ac82:	73bb      	strb	r3, [r7, #14]
 801ac84:	e051      	b.n	801ad2a <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	685a      	ldr	r2, [r3, #4]
 801ac8a:	7bbb      	ldrb	r3, [r7, #14]
 801ac8c:	4413      	add	r3, r2
 801ac8e:	7819      	ldrb	r1, [r3, #0]
 801ac90:	4b2b      	ldr	r3, [pc, #172]	; (801ad40 <RegionUS915ApplyCFList+0xe0>)
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	7bfa      	ldrb	r2, [r7, #15]
 801ac96:	b289      	uxth	r1, r1
 801ac98:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ac9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801aca0:	4b27      	ldr	r3, [pc, #156]	; (801ad40 <RegionUS915ApplyCFList+0xe0>)
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	7bfa      	ldrb	r2, [r7, #15]
 801aca6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801acaa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	685a      	ldr	r2, [r3, #4]
 801acb2:	7bbb      	ldrb	r3, [r7, #14]
 801acb4:	3301      	adds	r3, #1
 801acb6:	4413      	add	r3, r2
 801acb8:	781b      	ldrb	r3, [r3, #0]
 801acba:	b29b      	uxth	r3, r3
 801acbc:	021b      	lsls	r3, r3, #8
 801acbe:	b299      	uxth	r1, r3
 801acc0:	4b1f      	ldr	r3, [pc, #124]	; (801ad40 <RegionUS915ApplyCFList+0xe0>)
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	7bfa      	ldrb	r2, [r7, #15]
 801acc6:	4301      	orrs	r1, r0
 801acc8:	b289      	uxth	r1, r1
 801acca:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801acce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801acd2:	7bfb      	ldrb	r3, [r7, #15]
 801acd4:	2b04      	cmp	r3, #4
 801acd6:	d10f      	bne.n	801acf8 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801acd8:	4b19      	ldr	r3, [pc, #100]	; (801ad40 <RegionUS915ApplyCFList+0xe0>)
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	7bfa      	ldrb	r2, [r7, #15]
 801acde:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ace2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ace6:	4b16      	ldr	r3, [pc, #88]	; (801ad40 <RegionUS915ApplyCFList+0xe0>)
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	7bfa      	ldrb	r2, [r7, #15]
 801acec:	b2c9      	uxtb	r1, r1
 801acee:	b289      	uxth	r1, r1
 801acf0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801acf4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801acf8:	4b12      	ldr	r3, [pc, #72]	; (801ad44 <RegionUS915ApplyCFList+0xe4>)
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	7bfa      	ldrb	r2, [r7, #15]
 801acfe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ad02:	4b0f      	ldr	r3, [pc, #60]	; (801ad40 <RegionUS915ApplyCFList+0xe0>)
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	7bfa      	ldrb	r2, [r7, #15]
 801ad08:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ad0c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ad10:	4b0c      	ldr	r3, [pc, #48]	; (801ad44 <RegionUS915ApplyCFList+0xe4>)
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	7bfa      	ldrb	r2, [r7, #15]
 801ad16:	4001      	ands	r1, r0
 801ad18:	b289      	uxth	r1, r1
 801ad1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ad1e:	7bfb      	ldrb	r3, [r7, #15]
 801ad20:	3301      	adds	r3, #1
 801ad22:	73fb      	strb	r3, [r7, #15]
 801ad24:	7bbb      	ldrb	r3, [r7, #14]
 801ad26:	3302      	adds	r3, #2
 801ad28:	73bb      	strb	r3, [r7, #14]
 801ad2a:	7bfb      	ldrb	r3, [r7, #15]
 801ad2c:	2b04      	cmp	r3, #4
 801ad2e:	d9aa      	bls.n	801ac86 <RegionUS915ApplyCFList+0x26>
 801ad30:	e002      	b.n	801ad38 <RegionUS915ApplyCFList+0xd8>
        return;
 801ad32:	bf00      	nop
 801ad34:	e000      	b.n	801ad38 <RegionUS915ApplyCFList+0xd8>
        return;
 801ad36:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801ad38:	3714      	adds	r7, #20
 801ad3a:	46bd      	mov	sp, r7
 801ad3c:	bc80      	pop	{r7}
 801ad3e:	4770      	bx	lr
 801ad40:	20001cc0 	.word	0x20001cc0
 801ad44:	20001cbc 	.word	0x20001cbc

0801ad48 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b084      	sub	sp, #16
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2204      	movs	r2, #4
 801ad56:	2100      	movs	r1, #0
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f7fe fe83 	bl	8019a64 <RegionCommonCountChannels>
 801ad5e:	4603      	mov	r3, r0
 801ad60:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801ad62:	7bbb      	ldrb	r3, [r7, #14]
 801ad64:	2b01      	cmp	r3, #1
 801ad66:	d804      	bhi.n	801ad72 <RegionUS915ChanMaskSet+0x2a>
 801ad68:	7bbb      	ldrb	r3, [r7, #14]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d001      	beq.n	801ad72 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801ad6e:	2300      	movs	r3, #0
 801ad70:	e04a      	b.n	801ae08 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	791b      	ldrb	r3, [r3, #4]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d002      	beq.n	801ad80 <RegionUS915ChanMaskSet+0x38>
 801ad7a:	2b01      	cmp	r3, #1
 801ad7c:	d036      	beq.n	801adec <RegionUS915ChanMaskSet+0xa4>
 801ad7e:	e040      	b.n	801ae02 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ad80:	4b23      	ldr	r3, [pc, #140]	; (801ae10 <RegionUS915ChanMaskSet+0xc8>)
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	2206      	movs	r2, #6
 801ad8e:	4619      	mov	r1, r3
 801ad90:	f7fe fe94 	bl	8019abc <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801ad94:	4b1e      	ldr	r3, [pc, #120]	; (801ae10 <RegionUS915ChanMaskSet+0xc8>)
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801ad9c:	4b1c      	ldr	r3, [pc, #112]	; (801ae10 <RegionUS915ChanMaskSet+0xc8>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	b2d2      	uxtb	r2, r2
 801ada2:	b292      	uxth	r2, r2
 801ada4:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801ada8:	4b19      	ldr	r3, [pc, #100]	; (801ae10 <RegionUS915ChanMaskSet+0xc8>)
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	2200      	movs	r2, #0
 801adae:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801adb2:	2300      	movs	r3, #0
 801adb4:	73fb      	strb	r3, [r7, #15]
 801adb6:	e015      	b.n	801ade4 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801adb8:	4b16      	ldr	r3, [pc, #88]	; (801ae14 <RegionUS915ChanMaskSet+0xcc>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	7bfa      	ldrb	r2, [r7, #15]
 801adbe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801adc2:	4b13      	ldr	r3, [pc, #76]	; (801ae10 <RegionUS915ChanMaskSet+0xc8>)
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	7bfa      	ldrb	r2, [r7, #15]
 801adc8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801adcc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801add0:	4b10      	ldr	r3, [pc, #64]	; (801ae14 <RegionUS915ChanMaskSet+0xcc>)
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	7bfa      	ldrb	r2, [r7, #15]
 801add6:	4001      	ands	r1, r0
 801add8:	b289      	uxth	r1, r1
 801adda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801adde:	7bfb      	ldrb	r3, [r7, #15]
 801ade0:	3301      	adds	r3, #1
 801ade2:	73fb      	strb	r3, [r7, #15]
 801ade4:	7bfb      	ldrb	r3, [r7, #15]
 801ade6:	2b05      	cmp	r3, #5
 801ade8:	d9e6      	bls.n	801adb8 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801adea:	e00c      	b.n	801ae06 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801adec:	4b08      	ldr	r3, [pc, #32]	; (801ae10 <RegionUS915ChanMaskSet+0xc8>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	2206      	movs	r2, #6
 801adfa:	4619      	mov	r1, r3
 801adfc:	f7fe fe5e 	bl	8019abc <RegionCommonChanMaskCopy>
            break;
 801ae00:	e001      	b.n	801ae06 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801ae02:	2300      	movs	r3, #0
 801ae04:	e000      	b.n	801ae08 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801ae06:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ae08:	4618      	mov	r0, r3
 801ae0a:	3710      	adds	r7, #16
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}
 801ae10:	20001cc0 	.word	0x20001cc0
 801ae14:	20001cbc 	.word	0x20001cbc

0801ae18 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b088      	sub	sp, #32
 801ae1c:	af02      	add	r7, sp, #8
 801ae1e:	60ba      	str	r2, [r7, #8]
 801ae20:	607b      	str	r3, [r7, #4]
 801ae22:	4603      	mov	r3, r0
 801ae24:	73fb      	strb	r3, [r7, #15]
 801ae26:	460b      	mov	r3, r1
 801ae28:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801ae2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae32:	2b0d      	cmp	r3, #13
 801ae34:	bfa8      	it	ge
 801ae36:	230d      	movge	r3, #13
 801ae38:	b25a      	sxtb	r2, r3
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ae44:	4916      	ldr	r1, [pc, #88]	; (801aea0 <RegionUS915ComputeRxWindowParameters+0x88>)
 801ae46:	4618      	mov	r0, r3
 801ae48:	f7ff fac8 	bl	801a3dc <RegionCommonGetBandwidth>
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	b2da      	uxtb	r2, r3
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ae5a:	461a      	mov	r2, r3
 801ae5c:	4b11      	ldr	r3, [pc, #68]	; (801aea4 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801ae5e:	5c9a      	ldrb	r2, [r3, r2]
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ae66:	4619      	mov	r1, r3
 801ae68:	4b0d      	ldr	r3, [pc, #52]	; (801aea0 <RegionUS915ComputeRxWindowParameters+0x88>)
 801ae6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ae6e:	4619      	mov	r1, r3
 801ae70:	4610      	mov	r0, r2
 801ae72:	f7ff f841 	bl	8019ef8 <RegionCommonComputeSymbolTimeLoRa>
 801ae76:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801ae78:	4b0b      	ldr	r3, [pc, #44]	; (801aea8 <RegionUS915ComputeRxWindowParameters+0x90>)
 801ae7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae7c:	4798      	blx	r3
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	3308      	adds	r3, #8
 801ae82:	687a      	ldr	r2, [r7, #4]
 801ae84:	320c      	adds	r2, #12
 801ae86:	7bb9      	ldrb	r1, [r7, #14]
 801ae88:	9201      	str	r2, [sp, #4]
 801ae8a:	9300      	str	r3, [sp, #0]
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	68ba      	ldr	r2, [r7, #8]
 801ae90:	6978      	ldr	r0, [r7, #20]
 801ae92:	f7ff f847 	bl	8019f24 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801ae96:	bf00      	nop
 801ae98:	3718      	adds	r7, #24
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	bd80      	pop	{r7, pc}
 801ae9e:	bf00      	nop
 801aea0:	08021ea0 	.word	0x08021ea0
 801aea4:	08021e90 	.word	0x08021e90
 801aea8:	08021f14 	.word	0x08021f14

0801aeac <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801aeac:	b590      	push	{r4, r7, lr}
 801aeae:	b091      	sub	sp, #68	; 0x44
 801aeb0:	af0a      	add	r7, sp, #40	; 0x28
 801aeb2:	6078      	str	r0, [r7, #4]
 801aeb4:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	785b      	ldrb	r3, [r3, #1]
 801aeba:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801aebc:	2300      	movs	r3, #0
 801aebe:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801aec0:	2300      	movs	r3, #0
 801aec2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	685b      	ldr	r3, [r3, #4]
 801aec8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801aeca:	4b34      	ldr	r3, [pc, #208]	; (801af9c <RegionUS915RxConfig+0xf0>)
 801aecc:	685b      	ldr	r3, [r3, #4]
 801aece:	4798      	blx	r3
 801aed0:	4603      	mov	r3, r0
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d001      	beq.n	801aeda <RegionUS915RxConfig+0x2e>
    {
        return false;
 801aed6:	2300      	movs	r3, #0
 801aed8:	e05c      	b.n	801af94 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	7cdb      	ldrb	r3, [r3, #19]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d109      	bne.n	801aef6 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	781b      	ldrb	r3, [r3, #0]
 801aee6:	f003 0307 	and.w	r3, r3, #7
 801aeea:	4a2d      	ldr	r2, [pc, #180]	; (801afa0 <RegionUS915RxConfig+0xf4>)
 801aeec:	fb03 f202 	mul.w	r2, r3, r2
 801aef0:	4b2c      	ldr	r3, [pc, #176]	; (801afa4 <RegionUS915RxConfig+0xf8>)
 801aef2:	4413      	add	r3, r2
 801aef4:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801aef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aefa:	4a2b      	ldr	r2, [pc, #172]	; (801afa8 <RegionUS915RxConfig+0xfc>)
 801aefc:	5cd3      	ldrb	r3, [r2, r3]
 801aefe:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801af00:	4b26      	ldr	r3, [pc, #152]	; (801af9c <RegionUS915RxConfig+0xf0>)
 801af02:	68db      	ldr	r3, [r3, #12]
 801af04:	6938      	ldr	r0, [r7, #16]
 801af06:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801af08:	4b24      	ldr	r3, [pc, #144]	; (801af9c <RegionUS915RxConfig+0xf0>)
 801af0a:	699c      	ldr	r4, [r3, #24]
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	789b      	ldrb	r3, [r3, #2]
 801af10:	4618      	mov	r0, r3
 801af12:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	689b      	ldr	r3, [r3, #8]
 801af1a:	b29b      	uxth	r3, r3
 801af1c:	687a      	ldr	r2, [r7, #4]
 801af1e:	7c92      	ldrb	r2, [r2, #18]
 801af20:	9209      	str	r2, [sp, #36]	; 0x24
 801af22:	2201      	movs	r2, #1
 801af24:	9208      	str	r2, [sp, #32]
 801af26:	2200      	movs	r2, #0
 801af28:	9207      	str	r2, [sp, #28]
 801af2a:	2200      	movs	r2, #0
 801af2c:	9206      	str	r2, [sp, #24]
 801af2e:	2200      	movs	r2, #0
 801af30:	9205      	str	r2, [sp, #20]
 801af32:	2200      	movs	r2, #0
 801af34:	9204      	str	r2, [sp, #16]
 801af36:	2200      	movs	r2, #0
 801af38:	9203      	str	r2, [sp, #12]
 801af3a:	9302      	str	r3, [sp, #8]
 801af3c:	2308      	movs	r3, #8
 801af3e:	9301      	str	r3, [sp, #4]
 801af40:	2300      	movs	r3, #0
 801af42:	9300      	str	r3, [sp, #0]
 801af44:	2301      	movs	r3, #1
 801af46:	460a      	mov	r2, r1
 801af48:	4601      	mov	r1, r0
 801af4a:	2001      	movs	r0, #1
 801af4c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	7c5b      	ldrb	r3, [r3, #17]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d005      	beq.n	801af62 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801af56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af5a:	4a14      	ldr	r2, [pc, #80]	; (801afac <RegionUS915RxConfig+0x100>)
 801af5c:	5cd3      	ldrb	r3, [r2, r3]
 801af5e:	75fb      	strb	r3, [r7, #23]
 801af60:	e004      	b.n	801af6c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801af62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af66:	4a12      	ldr	r2, [pc, #72]	; (801afb0 <RegionUS915RxConfig+0x104>)
 801af68:	5cd3      	ldrb	r3, [r2, r3]
 801af6a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801af6c:	4b0b      	ldr	r3, [pc, #44]	; (801af9c <RegionUS915RxConfig+0xf0>)
 801af6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801af70:	7dfa      	ldrb	r2, [r7, #23]
 801af72:	320d      	adds	r2, #13
 801af74:	b2d2      	uxtb	r2, r2
 801af76:	4611      	mov	r1, r2
 801af78:	2001      	movs	r0, #1
 801af7a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	7cdb      	ldrb	r3, [r3, #19]
 801af80:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801af84:	6939      	ldr	r1, [r7, #16]
 801af86:	4618      	mov	r0, r3
 801af88:	f7ff fa46 	bl	801a418 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801af8c:	683b      	ldr	r3, [r7, #0]
 801af8e:	7bfa      	ldrb	r2, [r7, #15]
 801af90:	701a      	strb	r2, [r3, #0]
    return true;
 801af92:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801af94:	4618      	mov	r0, r3
 801af96:	371c      	adds	r7, #28
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd90      	pop	{r4, r7, pc}
 801af9c:	08021f14 	.word	0x08021f14
 801afa0:	000927c0 	.word	0x000927c0
 801afa4:	370870a0 	.word	0x370870a0
 801afa8:	08021e90 	.word	0x08021e90
 801afac:	08021f04 	.word	0x08021f04
 801afb0:	08021ef4 	.word	0x08021ef4

0801afb4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801afb4:	b590      	push	{r4, r7, lr}
 801afb6:	b093      	sub	sp, #76	; 0x4c
 801afb8:	af0a      	add	r7, sp, #40	; 0x28
 801afba:	60f8      	str	r0, [r7, #12]
 801afbc:	60b9      	str	r1, [r7, #8]
 801afbe:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801afc6:	461a      	mov	r2, r3
 801afc8:	4b49      	ldr	r3, [pc, #292]	; (801b0f0 <RegionUS915TxConfig+0x13c>)
 801afca:	5c9b      	ldrb	r3, [r3, r2]
 801afcc:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801afd4:	4b47      	ldr	r3, [pc, #284]	; (801b0f4 <RegionUS915TxConfig+0x140>)
 801afd6:	681a      	ldr	r2, [r3, #0]
 801afd8:	4b47      	ldr	r3, [pc, #284]	; (801b0f8 <RegionUS915TxConfig+0x144>)
 801afda:	6819      	ldr	r1, [r3, #0]
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	781b      	ldrb	r3, [r3, #0]
 801afe0:	461c      	mov	r4, r3
 801afe2:	4623      	mov	r3, r4
 801afe4:	005b      	lsls	r3, r3, #1
 801afe6:	4423      	add	r3, r4
 801afe8:	009b      	lsls	r3, r3, #2
 801afea:	440b      	add	r3, r1
 801afec:	3309      	adds	r3, #9
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	4619      	mov	r1, r3
 801aff2:	460b      	mov	r3, r1
 801aff4:	005b      	lsls	r3, r3, #1
 801aff6:	440b      	add	r3, r1
 801aff8:	00db      	lsls	r3, r3, #3
 801affa:	4413      	add	r3, r2
 801affc:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801b006:	4b3c      	ldr	r3, [pc, #240]	; (801b0f8 <RegionUS915TxConfig+0x144>)
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b00e:	f7ff fa4d 	bl	801a4ac <LimitTxPower>
 801b012:	4603      	mov	r3, r0
 801b014:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b01c:	4937      	ldr	r1, [pc, #220]	; (801b0fc <RegionUS915TxConfig+0x148>)
 801b01e:	4618      	mov	r0, r3
 801b020:	f7ff f9dc 	bl	801a3dc <RegionCommonGetBandwidth>
 801b024:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801b026:	2300      	movs	r3, #0
 801b028:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801b02a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b02e:	f04f 0200 	mov.w	r2, #0
 801b032:	4933      	ldr	r1, [pc, #204]	; (801b100 <RegionUS915TxConfig+0x14c>)
 801b034:	4618      	mov	r0, r3
 801b036:	f7ff f82d 	bl	801a094 <RegionCommonComputeTxPower>
 801b03a:	4603      	mov	r3, r0
 801b03c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801b03e:	4b31      	ldr	r3, [pc, #196]	; (801b104 <RegionUS915TxConfig+0x150>)
 801b040:	68da      	ldr	r2, [r3, #12]
 801b042:	4b2d      	ldr	r3, [pc, #180]	; (801b0f8 <RegionUS915TxConfig+0x144>)
 801b044:	6819      	ldr	r1, [r3, #0]
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	781b      	ldrb	r3, [r3, #0]
 801b04a:	4618      	mov	r0, r3
 801b04c:	4603      	mov	r3, r0
 801b04e:	005b      	lsls	r3, r3, #1
 801b050:	4403      	add	r3, r0
 801b052:	009b      	lsls	r3, r3, #2
 801b054:	440b      	add	r3, r1
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	4618      	mov	r0, r3
 801b05a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801b05c:	4b29      	ldr	r3, [pc, #164]	; (801b104 <RegionUS915TxConfig+0x150>)
 801b05e:	69dc      	ldr	r4, [r3, #28]
 801b060:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b064:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801b068:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801b06c:	9208      	str	r2, [sp, #32]
 801b06e:	2200      	movs	r2, #0
 801b070:	9207      	str	r2, [sp, #28]
 801b072:	2200      	movs	r2, #0
 801b074:	9206      	str	r2, [sp, #24]
 801b076:	2200      	movs	r2, #0
 801b078:	9205      	str	r2, [sp, #20]
 801b07a:	2201      	movs	r2, #1
 801b07c:	9204      	str	r2, [sp, #16]
 801b07e:	2200      	movs	r2, #0
 801b080:	9203      	str	r2, [sp, #12]
 801b082:	2208      	movs	r2, #8
 801b084:	9202      	str	r2, [sp, #8]
 801b086:	2201      	movs	r2, #1
 801b088:	9201      	str	r2, [sp, #4]
 801b08a:	9300      	str	r3, [sp, #0]
 801b08c:	69bb      	ldr	r3, [r7, #24]
 801b08e:	2200      	movs	r2, #0
 801b090:	2001      	movs	r0, #1
 801b092:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801b094:	4b18      	ldr	r3, [pc, #96]	; (801b0f8 <RegionUS915TxConfig+0x144>)
 801b096:	681a      	ldr	r2, [r3, #0]
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	781b      	ldrb	r3, [r3, #0]
 801b09c:	4619      	mov	r1, r3
 801b09e:	460b      	mov	r3, r1
 801b0a0:	005b      	lsls	r3, r3, #1
 801b0a2:	440b      	add	r3, r1
 801b0a4:	009b      	lsls	r3, r3, #2
 801b0a6:	4413      	add	r3, r2
 801b0a8:	681a      	ldr	r2, [r3, #0]
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b0b0:	4619      	mov	r1, r3
 801b0b2:	4610      	mov	r0, r2
 801b0b4:	f7ff f9e2 	bl	801a47c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801b0b8:	4b12      	ldr	r3, [pc, #72]	; (801b104 <RegionUS915TxConfig+0x150>)
 801b0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b0bc:	68fa      	ldr	r2, [r7, #12]
 801b0be:	8992      	ldrh	r2, [r2, #12]
 801b0c0:	b2d2      	uxtb	r2, r2
 801b0c2:	4611      	mov	r1, r2
 801b0c4:	2001      	movs	r0, #1
 801b0c6:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	899b      	ldrh	r3, [r3, #12]
 801b0d2:	4619      	mov	r1, r3
 801b0d4:	4610      	mov	r0, r2
 801b0d6:	f7ff fa63 	bl	801a5a0 <GetTimeOnAir>
 801b0da:	4602      	mov	r2, r0
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	7fba      	ldrb	r2, [r7, #30]
 801b0e4:	701a      	strb	r2, [r3, #0]
    return true;
 801b0e6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801b0e8:	4618      	mov	r0, r3
 801b0ea:	3724      	adds	r7, #36	; 0x24
 801b0ec:	46bd      	mov	sp, r7
 801b0ee:	bd90      	pop	{r4, r7, pc}
 801b0f0:	08021e90 	.word	0x08021e90
 801b0f4:	20001cc4 	.word	0x20001cc4
 801b0f8:	20001cc0 	.word	0x20001cc0
 801b0fc:	08021ea0 	.word	0x08021ea0
 801b100:	41f00000 	.word	0x41f00000
 801b104:	08021f14 	.word	0x08021f14

0801b108 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801b108:	b590      	push	{r4, r7, lr}
 801b10a:	b097      	sub	sp, #92	; 0x5c
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	60f8      	str	r0, [r7, #12]
 801b110:	60b9      	str	r1, [r7, #8]
 801b112:	607a      	str	r2, [r7, #4]
 801b114:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801b116:	2307      	movs	r3, #7
 801b118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801b11c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b120:	2200      	movs	r2, #0
 801b122:	601a      	str	r2, [r3, #0]
 801b124:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801b126:	2300      	movs	r3, #0
 801b128:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801b12c:	2300      	movs	r3, #0
 801b12e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801b132:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b136:	2200      	movs	r2, #0
 801b138:	601a      	str	r2, [r3, #0]
 801b13a:	605a      	str	r2, [r3, #4]
 801b13c:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801b13e:	4b97      	ldr	r3, [pc, #604]	; (801b39c <RegionUS915LinkAdrReq+0x294>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801b146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b14a:	2206      	movs	r2, #6
 801b14c:	4618      	mov	r0, r3
 801b14e:	f7fe fcb5 	bl	8019abc <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b152:	e11b      	b.n	801b38c <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	685a      	ldr	r2, [r3, #4]
 801b158:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801b15c:	4413      	add	r3, r2
 801b15e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b162:	4611      	mov	r1, r2
 801b164:	4618      	mov	r0, r3
 801b166:	f7fe fded 	bl	8019d44 <RegionCommonParseLinkAdrReq>
 801b16a:	4603      	mov	r3, r0
 801b16c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801b170:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801b174:	2b00      	cmp	r3, #0
 801b176:	f000 8113 	beq.w	801b3a0 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801b17a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b17e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801b182:	4413      	add	r3, r2
 801b184:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801b188:	2307      	movs	r3, #7
 801b18a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801b18e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b192:	2b06      	cmp	r3, #6
 801b194:	d116      	bne.n	801b1c4 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801b196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b19a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801b19e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b1a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801b1a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b1aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801b1ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b1b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b1b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b1ba:	b2db      	uxtb	r3, r3
 801b1bc:	b29b      	uxth	r3, r3
 801b1be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b1c2:	e0e3      	b.n	801b38c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801b1c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b1c8:	2b07      	cmp	r3, #7
 801b1ca:	d112      	bne.n	801b1f2 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801b1d8:	2300      	movs	r3, #0
 801b1da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801b1de:	2300      	movs	r3, #0
 801b1e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b1e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b1e8:	b2db      	uxtb	r3, r3
 801b1ea:	b29b      	uxth	r3, r3
 801b1ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b1f0:	e0cc      	b.n	801b38c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801b1f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b1f6:	2b05      	cmp	r3, #5
 801b1f8:	f040 80bf 	bne.w	801b37a <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801b1fc:	2301      	movs	r3, #1
 801b1fe:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801b202:	2300      	movs	r3, #0
 801b204:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801b208:	2300      	movs	r3, #0
 801b20a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b20e:	e0ae      	b.n	801b36e <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801b210:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b214:	b2da      	uxtb	r2, r3
 801b216:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b21a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b21e:	fa01 f303 	lsl.w	r3, r1, r3
 801b222:	4013      	ands	r3, r2
 801b224:	2b00      	cmp	r3, #0
 801b226:	d04d      	beq.n	801b2c4 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801b228:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b22c:	f003 0301 	and.w	r3, r3, #1
 801b230:	b2db      	uxtb	r3, r3
 801b232:	2b00      	cmp	r3, #0
 801b234:	d120      	bne.n	801b278 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801b236:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b23a:	005b      	lsls	r3, r3, #1
 801b23c:	3358      	adds	r3, #88	; 0x58
 801b23e:	443b      	add	r3, r7
 801b240:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b244:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b248:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801b24c:	b292      	uxth	r2, r2
 801b24e:	005b      	lsls	r3, r3, #1
 801b250:	3358      	adds	r3, #88	; 0x58
 801b252:	443b      	add	r3, r7
 801b254:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b258:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b25c:	b21a      	sxth	r2, r3
 801b25e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b262:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b266:	fa01 f303 	lsl.w	r3, r1, r3
 801b26a:	b21b      	sxth	r3, r3
 801b26c:	4313      	orrs	r3, r2
 801b26e:	b21b      	sxth	r3, r3
 801b270:	b29b      	uxth	r3, r3
 801b272:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b276:	e075      	b.n	801b364 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801b278:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b27c:	005b      	lsls	r3, r3, #1
 801b27e:	3358      	adds	r3, #88	; 0x58
 801b280:	443b      	add	r3, r7
 801b282:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b286:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b28a:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801b28e:	b292      	uxth	r2, r2
 801b290:	005b      	lsls	r3, r3, #1
 801b292:	3358      	adds	r3, #88	; 0x58
 801b294:	443b      	add	r3, r7
 801b296:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b29a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b29e:	b21a      	sxth	r2, r3
 801b2a0:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b2a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b2a8:	fa01 f303 	lsl.w	r3, r1, r3
 801b2ac:	b21b      	sxth	r3, r3
 801b2ae:	4313      	orrs	r3, r2
 801b2b0:	b21b      	sxth	r3, r3
 801b2b2:	b29b      	uxth	r3, r3
 801b2b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b2b8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b2bc:	3301      	adds	r3, #1
 801b2be:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801b2c2:	e04f      	b.n	801b364 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801b2c4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b2c8:	f003 0301 	and.w	r3, r3, #1
 801b2cc:	b2db      	uxtb	r3, r3
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d122      	bne.n	801b318 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801b2d2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b2d6:	005b      	lsls	r3, r3, #1
 801b2d8:	3358      	adds	r3, #88	; 0x58
 801b2da:	443b      	add	r3, r7
 801b2dc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b2e0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b2e4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801b2e8:	b292      	uxth	r2, r2
 801b2ea:	005b      	lsls	r3, r3, #1
 801b2ec:	3358      	adds	r3, #88	; 0x58
 801b2ee:	443b      	add	r3, r7
 801b2f0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b2f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b2f8:	b21a      	sxth	r2, r3
 801b2fa:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b2fe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b302:	fa01 f303 	lsl.w	r3, r1, r3
 801b306:	b21b      	sxth	r3, r3
 801b308:	43db      	mvns	r3, r3
 801b30a:	b21b      	sxth	r3, r3
 801b30c:	4013      	ands	r3, r2
 801b30e:	b21b      	sxth	r3, r3
 801b310:	b29b      	uxth	r3, r3
 801b312:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b316:	e025      	b.n	801b364 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801b318:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b31c:	005b      	lsls	r3, r3, #1
 801b31e:	3358      	adds	r3, #88	; 0x58
 801b320:	443b      	add	r3, r7
 801b322:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b326:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b32a:	b2d2      	uxtb	r2, r2
 801b32c:	b292      	uxth	r2, r2
 801b32e:	005b      	lsls	r3, r3, #1
 801b330:	3358      	adds	r3, #88	; 0x58
 801b332:	443b      	add	r3, r7
 801b334:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b338:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b33c:	b21a      	sxth	r2, r3
 801b33e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b342:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b346:	fa01 f303 	lsl.w	r3, r1, r3
 801b34a:	b21b      	sxth	r3, r3
 801b34c:	43db      	mvns	r3, r3
 801b34e:	b21b      	sxth	r3, r3
 801b350:	4013      	ands	r3, r2
 801b352:	b21b      	sxth	r3, r3
 801b354:	b29b      	uxth	r3, r3
 801b356:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b35a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b35e:	3301      	adds	r3, #1
 801b360:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801b364:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b368:	3301      	adds	r3, #1
 801b36a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b36e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b372:	2b07      	cmp	r3, #7
 801b374:	f67f af4c 	bls.w	801b210 <RegionUS915LinkAdrReq+0x108>
 801b378:	e008      	b.n	801b38c <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801b37a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b37e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801b382:	005b      	lsls	r3, r3, #1
 801b384:	3358      	adds	r3, #88	; 0x58
 801b386:	443b      	add	r3, r7
 801b388:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	7a1b      	ldrb	r3, [r3, #8]
 801b390:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b394:	429a      	cmp	r2, r3
 801b396:	f4ff aedd 	bcc.w	801b154 <RegionUS915LinkAdrReq+0x4c>
 801b39a:	e002      	b.n	801b3a2 <RegionUS915LinkAdrReq+0x29a>
 801b39c:	20001cc0 	.word	0x20001cc0
            break; // break loop, since no more request has been found
 801b3a0:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801b3a2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b3a6:	2b03      	cmp	r3, #3
 801b3a8:	dc0f      	bgt.n	801b3ca <RegionUS915LinkAdrReq+0x2c2>
 801b3aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b3ae:	2204      	movs	r2, #4
 801b3b0:	2100      	movs	r1, #0
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	f7fe fb56 	bl	8019a64 <RegionCommonCountChannels>
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	2b01      	cmp	r3, #1
 801b3bc:	d805      	bhi.n	801b3ca <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801b3be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b3c2:	f023 0301 	bic.w	r3, r3, #1
 801b3c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801b3ca:	2302      	movs	r3, #2
 801b3cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	7a5b      	ldrb	r3, [r3, #9]
 801b3d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801b3d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f7ff f90f 	bl	801a600 <RegionUS915GetPhyParam>
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801b3e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b3ea:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	7a9b      	ldrb	r3, [r3, #10]
 801b3f0:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801b3f2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b3f6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801b3f8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801b3fc:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801b3fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801b402:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801b40a:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801b412:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	7b5b      	ldrb	r3, [r3, #13]
 801b418:	b25b      	sxtb	r3, r3
 801b41a:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801b41c:	2348      	movs	r3, #72	; 0x48
 801b41e:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801b422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b426:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801b428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b42a:	b25b      	sxtb	r3, r3
 801b42c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801b430:	2304      	movs	r3, #4
 801b432:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801b436:	4b3f      	ldr	r3, [pc, #252]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801b43c:	230e      	movs	r3, #14
 801b43e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801b442:	2300      	movs	r3, #0
 801b444:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801b44e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801b452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b456:	1c9a      	adds	r2, r3, #2
 801b458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b45c:	1c59      	adds	r1, r3, #1
 801b45e:	f107 0014 	add.w	r0, r7, #20
 801b462:	4623      	mov	r3, r4
 801b464:	f7fe fcbf 	bl	8019de6 <RegionCommonLinkAdrReqVerifyParams>
 801b468:	4603      	mov	r3, r0
 801b46a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801b46e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b472:	2b07      	cmp	r3, #7
 801b474:	d147      	bne.n	801b506 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801b476:	4b2f      	ldr	r3, [pc, #188]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b47e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b482:	2206      	movs	r2, #6
 801b484:	4618      	mov	r0, r3
 801b486:	f7fe fb19 	bl	8019abc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801b48a:	4b2b      	ldr	r3, [pc, #172]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	8819      	ldrh	r1, [r3, #0]
 801b490:	4b28      	ldr	r3, [pc, #160]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801b498:	4b27      	ldr	r3, [pc, #156]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	400a      	ands	r2, r1
 801b49e:	b292      	uxth	r2, r2
 801b4a0:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801b4a2:	4b25      	ldr	r3, [pc, #148]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	8859      	ldrh	r1, [r3, #2]
 801b4a8:	4b22      	ldr	r3, [pc, #136]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801b4b0:	4b21      	ldr	r3, [pc, #132]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	400a      	ands	r2, r1
 801b4b6:	b292      	uxth	r2, r2
 801b4b8:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801b4ba:	4b1f      	ldr	r3, [pc, #124]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	8899      	ldrh	r1, [r3, #4]
 801b4c0:	4b1c      	ldr	r3, [pc, #112]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801b4c8:	4b1b      	ldr	r3, [pc, #108]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	400a      	ands	r2, r1
 801b4ce:	b292      	uxth	r2, r2
 801b4d0:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b4d2:	4b19      	ldr	r3, [pc, #100]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	88d9      	ldrh	r1, [r3, #6]
 801b4d8:	4b16      	ldr	r3, [pc, #88]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b4e0:	4b15      	ldr	r3, [pc, #84]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	400a      	ands	r2, r1
 801b4e6:	b292      	uxth	r2, r2
 801b4e8:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b4ea:	4b12      	ldr	r3, [pc, #72]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b4ec:	681a      	ldr	r2, [r3, #0]
 801b4ee:	4b12      	ldr	r3, [pc, #72]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b4f6:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b4f8:	4b0e      	ldr	r3, [pc, #56]	; (801b534 <RegionUS915LinkAdrReq+0x42c>)
 801b4fa:	681a      	ldr	r2, [r3, #0]
 801b4fc:	4b0e      	ldr	r3, [pc, #56]	; (801b538 <RegionUS915LinkAdrReq+0x430>)
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b504:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b506:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b50a:	68bb      	ldr	r3, [r7, #8]
 801b50c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b50e:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b516:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b51a:	683b      	ldr	r3, [r7, #0]
 801b51c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b51e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b520:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b524:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b52a:	4618      	mov	r0, r3
 801b52c:	375c      	adds	r7, #92	; 0x5c
 801b52e:	46bd      	mov	sp, r7
 801b530:	bd90      	pop	{r4, r7, pc}
 801b532:	bf00      	nop
 801b534:	20001cc0 	.word	0x20001cc0
 801b538:	20001cbc 	.word	0x20001cbc

0801b53c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b084      	sub	sp, #16
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b544:	2307      	movs	r3, #7
 801b546:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	685b      	ldr	r3, [r3, #4]
 801b54c:	4618      	mov	r0, r3
 801b54e:	f7fe ffe3 	bl	801a518 <VerifyRfFreq>
 801b552:	4603      	mov	r3, r0
 801b554:	f083 0301 	eor.w	r3, r3, #1
 801b558:	b2db      	uxtb	r3, r3
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d003      	beq.n	801b566 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b55e:	7bfb      	ldrb	r3, [r7, #15]
 801b560:	f023 0301 	bic.w	r3, r3, #1
 801b564:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	f993 3000 	ldrsb.w	r3, [r3]
 801b56c:	220d      	movs	r2, #13
 801b56e:	2108      	movs	r1, #8
 801b570:	4618      	mov	r0, r3
 801b572:	f7fe fa26 	bl	80199c2 <RegionCommonValueInRange>
 801b576:	4603      	mov	r3, r0
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d103      	bne.n	801b584 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b57c:	7bfb      	ldrb	r3, [r7, #15]
 801b57e:	f023 0302 	bic.w	r3, r3, #2
 801b582:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	f993 3000 	ldrsb.w	r3, [r3]
 801b58a:	2207      	movs	r2, #7
 801b58c:	2105      	movs	r1, #5
 801b58e:	4618      	mov	r0, r3
 801b590:	f7fe fa17 	bl	80199c2 <RegionCommonValueInRange>
 801b594:	4603      	mov	r3, r0
 801b596:	2b01      	cmp	r3, #1
 801b598:	d004      	beq.n	801b5a4 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b5a0:	2b0d      	cmp	r3, #13
 801b5a2:	dd03      	ble.n	801b5ac <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b5a4:	7bfb      	ldrb	r3, [r7, #15]
 801b5a6:	f023 0302 	bic.w	r3, r3, #2
 801b5aa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b5b2:	2203      	movs	r2, #3
 801b5b4:	2100      	movs	r1, #0
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	f7fe fa03 	bl	80199c2 <RegionCommonValueInRange>
 801b5bc:	4603      	mov	r3, r0
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d103      	bne.n	801b5ca <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b5c2:	7bfb      	ldrb	r3, [r7, #15]
 801b5c4:	f023 0304 	bic.w	r3, r3, #4
 801b5c8:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	3710      	adds	r7, #16
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	bd80      	pop	{r7, pc}

0801b5d4 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b5d4:	b480      	push	{r7}
 801b5d6:	b083      	sub	sp, #12
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b5dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	370c      	adds	r7, #12
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	bc80      	pop	{r7}
 801b5e8:	4770      	bx	lr

0801b5ea <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b5ea:	b480      	push	{r7}
 801b5ec:	b083      	sub	sp, #12
 801b5ee:	af00      	add	r7, sp, #0
 801b5f0:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b5f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	370c      	adds	r7, #12
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bc80      	pop	{r7}
 801b5fe:	4770      	bx	lr

0801b600 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b600:	b480      	push	{r7}
 801b602:	b083      	sub	sp, #12
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b608:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b60c:	4618      	mov	r0, r3
 801b60e:	370c      	adds	r7, #12
 801b610:	46bd      	mov	sp, r7
 801b612:	bc80      	pop	{r7}
 801b614:	4770      	bx	lr
	...

0801b618 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b618:	b480      	push	{r7}
 801b61a:	b083      	sub	sp, #12
 801b61c:	af00      	add	r7, sp, #0
 801b61e:	4603      	mov	r3, r0
 801b620:	460a      	mov	r2, r1
 801b622:	71fb      	strb	r3, [r7, #7]
 801b624:	4613      	mov	r3, r2
 801b626:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b628:	79bb      	ldrb	r3, [r7, #6]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d106      	bne.n	801b63c <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b62e:	4b13      	ldr	r3, [pc, #76]	; (801b67c <RegionUS915AlternateDr+0x64>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	7b5a      	ldrb	r2, [r3, #13]
 801b634:	3201      	adds	r2, #1
 801b636:	b2d2      	uxtb	r2, r2
 801b638:	735a      	strb	r2, [r3, #13]
 801b63a:	e005      	b.n	801b648 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b63c:	4b0f      	ldr	r3, [pc, #60]	; (801b67c <RegionUS915AlternateDr+0x64>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	7b5a      	ldrb	r2, [r3, #13]
 801b642:	3a01      	subs	r2, #1
 801b644:	b2d2      	uxtb	r2, r2
 801b646:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b648:	4b0c      	ldr	r3, [pc, #48]	; (801b67c <RegionUS915AlternateDr+0x64>)
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	7b5a      	ldrb	r2, [r3, #13]
 801b64e:	4b0c      	ldr	r3, [pc, #48]	; (801b680 <RegionUS915AlternateDr+0x68>)
 801b650:	fba3 1302 	umull	r1, r3, r3, r2
 801b654:	0859      	lsrs	r1, r3, #1
 801b656:	460b      	mov	r3, r1
 801b658:	00db      	lsls	r3, r3, #3
 801b65a:	440b      	add	r3, r1
 801b65c:	1ad3      	subs	r3, r2, r3
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	2b00      	cmp	r3, #0
 801b662:	d102      	bne.n	801b66a <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b664:	2304      	movs	r3, #4
 801b666:	71fb      	strb	r3, [r7, #7]
 801b668:	e001      	b.n	801b66e <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801b66a:	2300      	movs	r3, #0
 801b66c:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b672:	4618      	mov	r0, r3
 801b674:	370c      	adds	r7, #12
 801b676:	46bd      	mov	sp, r7
 801b678:	bc80      	pop	{r7}
 801b67a:	4770      	bx	lr
 801b67c:	20001cbc 	.word	0x20001cbc
 801b680:	38e38e39 	.word	0x38e38e39

0801b684 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b684:	b580      	push	{r7, lr}
 801b686:	b0a8      	sub	sp, #160	; 0xa0
 801b688:	af02      	add	r7, sp, #8
 801b68a:	60f8      	str	r0, [r7, #12]
 801b68c:	60b9      	str	r1, [r7, #8]
 801b68e:	607a      	str	r2, [r7, #4]
 801b690:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b692:	2300      	movs	r3, #0
 801b694:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b698:	2300      	movs	r3, #0
 801b69a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b69e:	2300      	movs	r3, #0
 801b6a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b6a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b6a6:	2244      	movs	r2, #68	; 0x44
 801b6a8:	2100      	movs	r1, #0
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	f005 f838 	bl	8020720 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b6b0:	230c      	movs	r3, #12
 801b6b2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b6b6:	4b67      	ldr	r3, [pc, #412]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	2204      	movs	r2, #4
 801b6bc:	2100      	movs	r1, #0
 801b6be:	4618      	mov	r0, r3
 801b6c0:	f7fe f9d0 	bl	8019a64 <RegionCommonCountChannels>
 801b6c4:	4603      	mov	r3, r0
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d10e      	bne.n	801b6e8 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b6ca:	4b62      	ldr	r3, [pc, #392]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	4b61      	ldr	r3, [pc, #388]	; (801b858 <RegionUS915NextChannel+0x1d4>)
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b6d8:	2204      	movs	r2, #4
 801b6da:	4619      	mov	r1, r3
 801b6dc:	f7fe f9ee 	bl	8019abc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b6e0:	4b5c      	ldr	r3, [pc, #368]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b6ee:	2b03      	cmp	r3, #3
 801b6f0:	dd0c      	ble.n	801b70c <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b6f2:	4b58      	ldr	r3, [pc, #352]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	891b      	ldrh	r3, [r3, #8]
 801b6f8:	b2db      	uxtb	r3, r3
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d106      	bne.n	801b70c <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b6fe:	4b56      	ldr	r3, [pc, #344]	; (801b858 <RegionUS915NextChannel+0x1d4>)
 801b700:	681a      	ldr	r2, [r3, #0]
 801b702:	4b54      	ldr	r3, [pc, #336]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b70a:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	7a5b      	ldrb	r3, [r3, #9]
 801b710:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b718:	b2db      	uxtb	r3, r3
 801b71a:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b71c:	4b4d      	ldr	r3, [pc, #308]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b722:	4b4d      	ldr	r3, [pc, #308]	; (801b858 <RegionUS915NextChannel+0x1d4>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801b728:	4b4c      	ldr	r3, [pc, #304]	; (801b85c <RegionUS915NextChannel+0x1d8>)
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b72e:	2348      	movs	r3, #72	; 0x48
 801b730:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b732:	2300      	movs	r3, #0
 801b734:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	685b      	ldr	r3, [r3, #4]
 801b740:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	7a9b      	ldrb	r3, [r3, #10]
 801b746:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b74a:	2301      	movs	r3, #1
 801b74c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b750:	f107 0314 	add.w	r3, r7, #20
 801b754:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b756:	68fa      	ldr	r2, [r7, #12]
 801b758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b75c:	320c      	adds	r2, #12
 801b75e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b762:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	7d1b      	ldrb	r3, [r3, #20]
 801b76a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	8adb      	ldrh	r3, [r3, #22]
 801b778:	4619      	mov	r1, r3
 801b77a:	4610      	mov	r0, r2
 801b77c:	f7fe ff10 	bl	801a5a0 <GetTimeOnAir>
 801b780:	4603      	mov	r3, r0
 801b782:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b784:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b788:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b78c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	9301      	str	r3, [sp, #4]
 801b794:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b798:	9300      	str	r3, [sp, #0]
 801b79a:	460b      	mov	r3, r1
 801b79c:	6839      	ldr	r1, [r7, #0]
 801b79e:	f7fe fd68 	bl	801a272 <RegionCommonIdentifyChannels>
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b7a8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d14a      	bne.n	801b846 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	7a5b      	ldrb	r3, [r3, #9]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d00e      	beq.n	801b7d6 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b7b8:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b7bc:	3b01      	subs	r3, #1
 801b7be:	4619      	mov	r1, r3
 801b7c0:	2000      	movs	r0, #0
 801b7c2:	f000 f89f 	bl	801b904 <randr>
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	3398      	adds	r3, #152	; 0x98
 801b7ca:	443b      	add	r3, r7
 801b7cc:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	701a      	strb	r2, [r3, #0]
 801b7d4:	e02e      	b.n	801b834 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d10e      	bne.n	801b7fe <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b7e0:	4b1c      	ldr	r3, [pc, #112]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b7e6:	4b1b      	ldr	r3, [pc, #108]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b7e8:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b7ea:	330c      	adds	r3, #12
 801b7ec:	68ba      	ldr	r2, [r7, #8]
 801b7ee:	4619      	mov	r1, r3
 801b7f0:	f7fd fea2 	bl	8019538 <RegionBaseUSComputeNext125kHzJoinChannel>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	2b03      	cmp	r3, #3
 801b7f8:	d11c      	bne.n	801b834 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b7fa:	2303      	movs	r3, #3
 801b7fc:	e025      	b.n	801b84a <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b7fe:	2300      	movs	r3, #0
 801b800:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b804:	e004      	b.n	801b810 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801b806:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b80a:	3301      	adds	r3, #1
 801b80c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b810:	4b10      	ldr	r3, [pc, #64]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	891b      	ldrh	r3, [r3, #8]
 801b816:	b2da      	uxtb	r2, r3
 801b818:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b81c:	fa42 f303 	asr.w	r3, r2, r3
 801b820:	f003 0301 	and.w	r3, r3, #1
 801b824:	2b00      	cmp	r3, #0
 801b826:	d0ee      	beq.n	801b806 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801b828:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b82c:	3340      	adds	r3, #64	; 0x40
 801b82e:	b2da      	uxtb	r2, r3
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b834:	4b07      	ldr	r3, [pc, #28]	; (801b854 <RegionUS915NextChannel+0x1d0>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	4618      	mov	r0, r3
 801b83a:	68bb      	ldr	r3, [r7, #8]
 801b83c:	781b      	ldrb	r3, [r3, #0]
 801b83e:	2248      	movs	r2, #72	; 0x48
 801b840:	4619      	mov	r1, r3
 801b842:	f7fe f8db 	bl	80199fc <RegionCommonChanDisable>
    }
    return status;
 801b846:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b84a:	4618      	mov	r0, r3
 801b84c:	3798      	adds	r7, #152	; 0x98
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}
 801b852:	bf00      	nop
 801b854:	20001cbc 	.word	0x20001cbc
 801b858:	20001cc0 	.word	0x20001cc0
 801b85c:	20001cc4 	.word	0x20001cc4

0801b860 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b860:	b480      	push	{r7}
 801b862:	b085      	sub	sp, #20
 801b864:	af00      	add	r7, sp, #0
 801b866:	4603      	mov	r3, r0
 801b868:	71fb      	strb	r3, [r7, #7]
 801b86a:	460b      	mov	r3, r1
 801b86c:	71bb      	strb	r3, [r7, #6]
 801b86e:	4613      	mov	r3, r2
 801b870:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b872:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b876:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b87a:	4909      	ldr	r1, [pc, #36]	; (801b8a0 <RegionUS915ApplyDrOffset+0x40>)
 801b87c:	0092      	lsls	r2, r2, #2
 801b87e:	440a      	add	r2, r1
 801b880:	4413      	add	r3, r2
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	da01      	bge.n	801b892 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b88e:	2300      	movs	r3, #0
 801b890:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b892:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b894:	4618      	mov	r0, r3
 801b896:	3714      	adds	r7, #20
 801b898:	46bd      	mov	sp, r7
 801b89a:	bc80      	pop	{r7}
 801b89c:	4770      	bx	lr
 801b89e:	bf00      	nop
 801b8a0:	08021ee0 	.word	0x08021ee0

0801b8a4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b8a4:	b480      	push	{r7}
 801b8a6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b8a8:	4b0d      	ldr	r3, [pc, #52]	; (801b8e0 <rand1+0x3c>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	4a0d      	ldr	r2, [pc, #52]	; (801b8e4 <rand1+0x40>)
 801b8ae:	fb02 f303 	mul.w	r3, r2, r3
 801b8b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b8b6:	3339      	adds	r3, #57	; 0x39
 801b8b8:	4a09      	ldr	r2, [pc, #36]	; (801b8e0 <rand1+0x3c>)
 801b8ba:	6013      	str	r3, [r2, #0]
 801b8bc:	4b08      	ldr	r3, [pc, #32]	; (801b8e0 <rand1+0x3c>)
 801b8be:	681a      	ldr	r2, [r3, #0]
 801b8c0:	2303      	movs	r3, #3
 801b8c2:	fba3 1302 	umull	r1, r3, r3, r2
 801b8c6:	1ad1      	subs	r1, r2, r3
 801b8c8:	0849      	lsrs	r1, r1, #1
 801b8ca:	440b      	add	r3, r1
 801b8cc:	0f99      	lsrs	r1, r3, #30
 801b8ce:	460b      	mov	r3, r1
 801b8d0:	07db      	lsls	r3, r3, #31
 801b8d2:	1a5b      	subs	r3, r3, r1
 801b8d4:	1ad1      	subs	r1, r2, r3
 801b8d6:	460b      	mov	r3, r1
}
 801b8d8:	4618      	mov	r0, r3
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	bc80      	pop	{r7}
 801b8de:	4770      	bx	lr
 801b8e0:	20000130 	.word	0x20000130
 801b8e4:	41c64e6d 	.word	0x41c64e6d

0801b8e8 <srand1>:

void srand1( uint32_t seed )
{
 801b8e8:	b480      	push	{r7}
 801b8ea:	b083      	sub	sp, #12
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
    next = seed;
 801b8f0:	4a03      	ldr	r2, [pc, #12]	; (801b900 <srand1+0x18>)
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	6013      	str	r3, [r2, #0]
}
 801b8f6:	bf00      	nop
 801b8f8:	370c      	adds	r7, #12
 801b8fa:	46bd      	mov	sp, r7
 801b8fc:	bc80      	pop	{r7}
 801b8fe:	4770      	bx	lr
 801b900:	20000130 	.word	0x20000130

0801b904 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
 801b90c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b90e:	f7ff ffc9 	bl	801b8a4 <rand1>
 801b912:	4602      	mov	r2, r0
 801b914:	6839      	ldr	r1, [r7, #0]
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	1acb      	subs	r3, r1, r3
 801b91a:	3301      	adds	r3, #1
 801b91c:	fb92 f1f3 	sdiv	r1, r2, r3
 801b920:	fb01 f303 	mul.w	r3, r1, r3
 801b924:	1ad2      	subs	r2, r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	4413      	add	r3, r2
}
 801b92a:	4618      	mov	r0, r3
 801b92c:	3708      	adds	r7, #8
 801b92e:	46bd      	mov	sp, r7
 801b930:	bd80      	pop	{r7, pc}

0801b932 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b932:	b480      	push	{r7}
 801b934:	b085      	sub	sp, #20
 801b936:	af00      	add	r7, sp, #0
 801b938:	60f8      	str	r0, [r7, #12]
 801b93a:	60b9      	str	r1, [r7, #8]
 801b93c:	4613      	mov	r3, r2
 801b93e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b940:	e007      	b.n	801b952 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b942:	68ba      	ldr	r2, [r7, #8]
 801b944:	1c53      	adds	r3, r2, #1
 801b946:	60bb      	str	r3, [r7, #8]
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	1c59      	adds	r1, r3, #1
 801b94c:	60f9      	str	r1, [r7, #12]
 801b94e:	7812      	ldrb	r2, [r2, #0]
 801b950:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b952:	88fb      	ldrh	r3, [r7, #6]
 801b954:	1e5a      	subs	r2, r3, #1
 801b956:	80fa      	strh	r2, [r7, #6]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d1f2      	bne.n	801b942 <memcpy1+0x10>
    }
}
 801b95c:	bf00      	nop
 801b95e:	bf00      	nop
 801b960:	3714      	adds	r7, #20
 801b962:	46bd      	mov	sp, r7
 801b964:	bc80      	pop	{r7}
 801b966:	4770      	bx	lr

0801b968 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b968:	b480      	push	{r7}
 801b96a:	b085      	sub	sp, #20
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	60f8      	str	r0, [r7, #12]
 801b970:	60b9      	str	r1, [r7, #8]
 801b972:	4613      	mov	r3, r2
 801b974:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b976:	88fb      	ldrh	r3, [r7, #6]
 801b978:	3b01      	subs	r3, #1
 801b97a:	68fa      	ldr	r2, [r7, #12]
 801b97c:	4413      	add	r3, r2
 801b97e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b980:	e007      	b.n	801b992 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b982:	68ba      	ldr	r2, [r7, #8]
 801b984:	1c53      	adds	r3, r2, #1
 801b986:	60bb      	str	r3, [r7, #8]
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	1e59      	subs	r1, r3, #1
 801b98c:	60f9      	str	r1, [r7, #12]
 801b98e:	7812      	ldrb	r2, [r2, #0]
 801b990:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b992:	88fb      	ldrh	r3, [r7, #6]
 801b994:	1e5a      	subs	r2, r3, #1
 801b996:	80fa      	strh	r2, [r7, #6]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d1f2      	bne.n	801b982 <memcpyr+0x1a>
    }
}
 801b99c:	bf00      	nop
 801b99e:	bf00      	nop
 801b9a0:	3714      	adds	r7, #20
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	bc80      	pop	{r7}
 801b9a6:	4770      	bx	lr

0801b9a8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b9a8:	b480      	push	{r7}
 801b9aa:	b083      	sub	sp, #12
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
 801b9b0:	460b      	mov	r3, r1
 801b9b2:	70fb      	strb	r3, [r7, #3]
 801b9b4:	4613      	mov	r3, r2
 801b9b6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b9b8:	e004      	b.n	801b9c4 <memset1+0x1c>
    {
        *dst++ = value;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	1c5a      	adds	r2, r3, #1
 801b9be:	607a      	str	r2, [r7, #4]
 801b9c0:	78fa      	ldrb	r2, [r7, #3]
 801b9c2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b9c4:	883b      	ldrh	r3, [r7, #0]
 801b9c6:	1e5a      	subs	r2, r3, #1
 801b9c8:	803a      	strh	r2, [r7, #0]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d1f5      	bne.n	801b9ba <memset1+0x12>
    }
}
 801b9ce:	bf00      	nop
 801b9d0:	bf00      	nop
 801b9d2:	370c      	adds	r7, #12
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	bc80      	pop	{r7}
 801b9d8:	4770      	bx	lr
	...

0801b9dc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b9dc:	b480      	push	{r7}
 801b9de:	b085      	sub	sp, #20
 801b9e0:	af00      	add	r7, sp, #0
 801b9e2:	6078      	str	r0, [r7, #4]
 801b9e4:	460b      	mov	r3, r1
 801b9e6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b9e8:	f04f 33ff 	mov.w	r3, #4294967295
 801b9ec:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d101      	bne.n	801b9f8 <Crc32+0x1c>
    {
        return 0;
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	e026      	b.n	801ba46 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	817b      	strh	r3, [r7, #10]
 801b9fc:	e01d      	b.n	801ba3a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801b9fe:	897b      	ldrh	r3, [r7, #10]
 801ba00:	687a      	ldr	r2, [r7, #4]
 801ba02:	4413      	add	r3, r2
 801ba04:	781b      	ldrb	r3, [r3, #0]
 801ba06:	461a      	mov	r2, r3
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	4053      	eors	r3, r2
 801ba0c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801ba0e:	2300      	movs	r3, #0
 801ba10:	813b      	strh	r3, [r7, #8]
 801ba12:	e00c      	b.n	801ba2e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	085a      	lsrs	r2, r3, #1
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	f003 0301 	and.w	r3, r3, #1
 801ba1e:	425b      	negs	r3, r3
 801ba20:	490b      	ldr	r1, [pc, #44]	; (801ba50 <Crc32+0x74>)
 801ba22:	400b      	ands	r3, r1
 801ba24:	4053      	eors	r3, r2
 801ba26:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801ba28:	893b      	ldrh	r3, [r7, #8]
 801ba2a:	3301      	adds	r3, #1
 801ba2c:	813b      	strh	r3, [r7, #8]
 801ba2e:	893b      	ldrh	r3, [r7, #8]
 801ba30:	2b07      	cmp	r3, #7
 801ba32:	d9ef      	bls.n	801ba14 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801ba34:	897b      	ldrh	r3, [r7, #10]
 801ba36:	3301      	adds	r3, #1
 801ba38:	817b      	strh	r3, [r7, #10]
 801ba3a:	897a      	ldrh	r2, [r7, #10]
 801ba3c:	887b      	ldrh	r3, [r7, #2]
 801ba3e:	429a      	cmp	r2, r3
 801ba40:	d3dd      	bcc.n	801b9fe <Crc32+0x22>
        }
    }

    return ~crc;
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	43db      	mvns	r3, r3
}
 801ba46:	4618      	mov	r0, r3
 801ba48:	3714      	adds	r7, #20
 801ba4a:	46bd      	mov	sp, r7
 801ba4c:	bc80      	pop	{r7}
 801ba4e:	4770      	bx	lr
 801ba50:	edb88320 	.word	0xedb88320

0801ba54 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b084      	sub	sp, #16
 801ba58:	af02      	add	r7, sp, #8
 801ba5a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801ba5c:	4a24      	ldr	r2, [pc, #144]	; (801baf0 <RadioInit+0x9c>)
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801ba62:	4b24      	ldr	r3, [pc, #144]	; (801baf4 <RadioInit+0xa0>)
 801ba64:	2200      	movs	r2, #0
 801ba66:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801ba68:	4b22      	ldr	r3, [pc, #136]	; (801baf4 <RadioInit+0xa0>)
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801ba6e:	4b21      	ldr	r3, [pc, #132]	; (801baf4 <RadioInit+0xa0>)
 801ba70:	2200      	movs	r2, #0
 801ba72:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ba74:	4b1f      	ldr	r3, [pc, #124]	; (801baf4 <RadioInit+0xa0>)
 801ba76:	2200      	movs	r2, #0
 801ba78:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801ba7a:	481f      	ldr	r0, [pc, #124]	; (801baf8 <RadioInit+0xa4>)
 801ba7c:	f001 ffc0 	bl	801da00 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801ba80:	4b1c      	ldr	r3, [pc, #112]	; (801baf4 <RadioInit+0xa0>)
 801ba82:	2200      	movs	r2, #0
 801ba84:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801ba86:	4b1b      	ldr	r3, [pc, #108]	; (801baf4 <RadioInit+0xa0>)
 801ba88:	2200      	movs	r2, #0
 801ba8a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801ba8c:	f002 fa54 	bl	801df38 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801ba90:	2100      	movs	r1, #0
 801ba92:	2000      	movs	r0, #0
 801ba94:	f002 fe20 	bl	801e6d8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801ba98:	2204      	movs	r2, #4
 801ba9a:	2100      	movs	r1, #0
 801ba9c:	2001      	movs	r0, #1
 801ba9e:	f002 fbdd 	bl	801e25c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801baa2:	2300      	movs	r3, #0
 801baa4:	2200      	movs	r2, #0
 801baa6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801baaa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801baae:	f002 fb0d 	bl	801e0cc <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801bab2:	f000 fe99 	bl	801c7e8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801bab6:	2300      	movs	r3, #0
 801bab8:	9300      	str	r3, [sp, #0]
 801baba:	4b10      	ldr	r3, [pc, #64]	; (801bafc <RadioInit+0xa8>)
 801babc:	2200      	movs	r2, #0
 801babe:	f04f 31ff 	mov.w	r1, #4294967295
 801bac2:	480f      	ldr	r0, [pc, #60]	; (801bb00 <RadioInit+0xac>)
 801bac4:	f004 f84e 	bl	801fb64 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801bac8:	2300      	movs	r3, #0
 801baca:	9300      	str	r3, [sp, #0]
 801bacc:	4b0d      	ldr	r3, [pc, #52]	; (801bb04 <RadioInit+0xb0>)
 801bace:	2200      	movs	r2, #0
 801bad0:	f04f 31ff 	mov.w	r1, #4294967295
 801bad4:	480c      	ldr	r0, [pc, #48]	; (801bb08 <RadioInit+0xb4>)
 801bad6:	f004 f845 	bl	801fb64 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801bada:	4809      	ldr	r0, [pc, #36]	; (801bb00 <RadioInit+0xac>)
 801badc:	f004 f8e6 	bl	801fcac <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801bae0:	4809      	ldr	r0, [pc, #36]	; (801bb08 <RadioInit+0xb4>)
 801bae2:	f004 f8e3 	bl	801fcac <UTIL_TIMER_Stop>
}
 801bae6:	bf00      	nop
 801bae8:	3708      	adds	r7, #8
 801baea:	46bd      	mov	sp, r7
 801baec:	bd80      	pop	{r7, pc}
 801baee:	bf00      	nop
 801baf0:	20001dc8 	.word	0x20001dc8
 801baf4:	20001dcc 	.word	0x20001dcc
 801baf8:	0801cbe1 	.word	0x0801cbe1
 801bafc:	0801cb69 	.word	0x0801cb69
 801bb00:	20001e28 	.word	0x20001e28
 801bb04:	0801cb7d 	.word	0x0801cb7d
 801bb08:	20001e40 	.word	0x20001e40

0801bb0c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801bb10:	f001 ffbe 	bl	801da90 <SUBGRF_GetOperatingMode>
 801bb14:	4603      	mov	r3, r0
 801bb16:	2b07      	cmp	r3, #7
 801bb18:	d00a      	beq.n	801bb30 <RadioGetStatus+0x24>
 801bb1a:	2b07      	cmp	r3, #7
 801bb1c:	dc0a      	bgt.n	801bb34 <RadioGetStatus+0x28>
 801bb1e:	2b04      	cmp	r3, #4
 801bb20:	d002      	beq.n	801bb28 <RadioGetStatus+0x1c>
 801bb22:	2b05      	cmp	r3, #5
 801bb24:	d002      	beq.n	801bb2c <RadioGetStatus+0x20>
 801bb26:	e005      	b.n	801bb34 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801bb28:	2302      	movs	r3, #2
 801bb2a:	e004      	b.n	801bb36 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801bb2c:	2301      	movs	r3, #1
 801bb2e:	e002      	b.n	801bb36 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801bb30:	2303      	movs	r3, #3
 801bb32:	e000      	b.n	801bb36 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801bb34:	2300      	movs	r3, #0
    }
}
 801bb36:	4618      	mov	r0, r3
 801bb38:	bd80      	pop	{r7, pc}
	...

0801bb3c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b082      	sub	sp, #8
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	4603      	mov	r3, r0
 801bb44:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801bb46:	4a2a      	ldr	r2, [pc, #168]	; (801bbf0 <RadioSetModem+0xb4>)
 801bb48:	79fb      	ldrb	r3, [r7, #7]
 801bb4a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801bb4c:	79fb      	ldrb	r3, [r7, #7]
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f003 f995 	bl	801ee7e <RFW_SetRadioModem>
    switch( modem )
 801bb54:	79fb      	ldrb	r3, [r7, #7]
 801bb56:	2b05      	cmp	r3, #5
 801bb58:	d80e      	bhi.n	801bb78 <RadioSetModem+0x3c>
 801bb5a:	a201      	add	r2, pc, #4	; (adr r2, 801bb60 <RadioSetModem+0x24>)
 801bb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb60:	0801bb87 	.word	0x0801bb87
 801bb64:	0801bb95 	.word	0x0801bb95
 801bb68:	0801bb79 	.word	0x0801bb79
 801bb6c:	0801bbbb 	.word	0x0801bbbb
 801bb70:	0801bbc9 	.word	0x0801bbc9
 801bb74:	0801bbd7 	.word	0x0801bbd7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801bb78:	2003      	movs	r0, #3
 801bb7a:	f002 fb49 	bl	801e210 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bb7e:	4b1c      	ldr	r3, [pc, #112]	; (801bbf0 <RadioSetModem+0xb4>)
 801bb80:	2200      	movs	r2, #0
 801bb82:	735a      	strb	r2, [r3, #13]
        break;
 801bb84:	e02f      	b.n	801bbe6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801bb86:	2000      	movs	r0, #0
 801bb88:	f002 fb42 	bl	801e210 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bb8c:	4b18      	ldr	r3, [pc, #96]	; (801bbf0 <RadioSetModem+0xb4>)
 801bb8e:	2200      	movs	r2, #0
 801bb90:	735a      	strb	r2, [r3, #13]
        break;
 801bb92:	e028      	b.n	801bbe6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801bb94:	2001      	movs	r0, #1
 801bb96:	f002 fb3b 	bl	801e210 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801bb9a:	4b15      	ldr	r3, [pc, #84]	; (801bbf0 <RadioSetModem+0xb4>)
 801bb9c:	7b5a      	ldrb	r2, [r3, #13]
 801bb9e:	4b14      	ldr	r3, [pc, #80]	; (801bbf0 <RadioSetModem+0xb4>)
 801bba0:	7b1b      	ldrb	r3, [r3, #12]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d01e      	beq.n	801bbe4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801bba6:	4b12      	ldr	r3, [pc, #72]	; (801bbf0 <RadioSetModem+0xb4>)
 801bba8:	7b1a      	ldrb	r2, [r3, #12]
 801bbaa:	4b11      	ldr	r3, [pc, #68]	; (801bbf0 <RadioSetModem+0xb4>)
 801bbac:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801bbae:	4b10      	ldr	r3, [pc, #64]	; (801bbf0 <RadioSetModem+0xb4>)
 801bbb0:	7b5b      	ldrb	r3, [r3, #13]
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f000 ffa2 	bl	801cafc <RadioSetPublicNetwork>
        }
        break;
 801bbb8:	e014      	b.n	801bbe4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801bbba:	2002      	movs	r0, #2
 801bbbc:	f002 fb28 	bl	801e210 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bbc0:	4b0b      	ldr	r3, [pc, #44]	; (801bbf0 <RadioSetModem+0xb4>)
 801bbc2:	2200      	movs	r2, #0
 801bbc4:	735a      	strb	r2, [r3, #13]
        break;
 801bbc6:	e00e      	b.n	801bbe6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801bbc8:	2002      	movs	r0, #2
 801bbca:	f002 fb21 	bl	801e210 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bbce:	4b08      	ldr	r3, [pc, #32]	; (801bbf0 <RadioSetModem+0xb4>)
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	735a      	strb	r2, [r3, #13]
        break;
 801bbd4:	e007      	b.n	801bbe6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801bbd6:	2000      	movs	r0, #0
 801bbd8:	f002 fb1a 	bl	801e210 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bbdc:	4b04      	ldr	r3, [pc, #16]	; (801bbf0 <RadioSetModem+0xb4>)
 801bbde:	2200      	movs	r2, #0
 801bbe0:	735a      	strb	r2, [r3, #13]
        break;
 801bbe2:	e000      	b.n	801bbe6 <RadioSetModem+0xaa>
        break;
 801bbe4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801bbe6:	bf00      	nop
 801bbe8:	3708      	adds	r7, #8
 801bbea:	46bd      	mov	sp, r7
 801bbec:	bd80      	pop	{r7, pc}
 801bbee:	bf00      	nop
 801bbf0:	20001dcc 	.word	0x20001dcc

0801bbf4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801bbfc:	6878      	ldr	r0, [r7, #4]
 801bbfe:	f002 fac1 	bl	801e184 <SUBGRF_SetRfFrequency>
}
 801bc02:	bf00      	nop
 801bc04:	3708      	adds	r7, #8
 801bc06:	46bd      	mov	sp, r7
 801bc08:	bd80      	pop	{r7, pc}

0801bc0a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801bc0a:	b580      	push	{r7, lr}
 801bc0c:	b090      	sub	sp, #64	; 0x40
 801bc0e:	af0a      	add	r7, sp, #40	; 0x28
 801bc10:	60f8      	str	r0, [r7, #12]
 801bc12:	60b9      	str	r1, [r7, #8]
 801bc14:	603b      	str	r3, [r7, #0]
 801bc16:	4613      	mov	r3, r2
 801bc18:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801bc1e:	2300      	movs	r3, #0
 801bc20:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801bc22:	2300      	movs	r3, #0
 801bc24:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801bc26:	f000 fdf2 	bl	801c80e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801bc2a:	2000      	movs	r0, #0
 801bc2c:	f7ff ff86 	bl	801bb3c <RadioSetModem>

    RadioSetChannel( freq );
 801bc30:	68f8      	ldr	r0, [r7, #12]
 801bc32:	f7ff ffdf 	bl	801bbf4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801bc36:	2301      	movs	r3, #1
 801bc38:	9309      	str	r3, [sp, #36]	; 0x24
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	9308      	str	r3, [sp, #32]
 801bc3e:	2300      	movs	r3, #0
 801bc40:	9307      	str	r3, [sp, #28]
 801bc42:	2300      	movs	r3, #0
 801bc44:	9306      	str	r3, [sp, #24]
 801bc46:	2300      	movs	r3, #0
 801bc48:	9305      	str	r3, [sp, #20]
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	9304      	str	r3, [sp, #16]
 801bc4e:	2300      	movs	r3, #0
 801bc50:	9303      	str	r3, [sp, #12]
 801bc52:	2300      	movs	r3, #0
 801bc54:	9302      	str	r3, [sp, #8]
 801bc56:	2303      	movs	r3, #3
 801bc58:	9301      	str	r3, [sp, #4]
 801bc5a:	68bb      	ldr	r3, [r7, #8]
 801bc5c:	9300      	str	r3, [sp, #0]
 801bc5e:	2300      	movs	r3, #0
 801bc60:	f44f 7216 	mov.w	r2, #600	; 0x258
 801bc64:	68b9      	ldr	r1, [r7, #8]
 801bc66:	2000      	movs	r0, #0
 801bc68:	f000 f83c 	bl	801bce4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801bc6c:	2000      	movs	r0, #0
 801bc6e:	f000 fdd5 	bl	801c81c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801bc72:	f000 ff71 	bl	801cb58 <RadioGetWakeupTime>
 801bc76:	4603      	mov	r3, r0
 801bc78:	4618      	mov	r0, r3
 801bc7a:	f7e6 fe11 	bl	80028a0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801bc7e:	f004 f92f 	bl	801fee0 <UTIL_TIMER_GetCurrentTime>
 801bc82:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bc84:	e00d      	b.n	801bca2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801bc86:	2000      	movs	r0, #0
 801bc88:	f000 feb6 	bl	801c9f8 <RadioRssi>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801bc90:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bc94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc98:	429a      	cmp	r2, r3
 801bc9a:	dd02      	ble.n	801bca2 <RadioIsChannelFree+0x98>
        {
            status = false;
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	75fb      	strb	r3, [r7, #23]
            break;
 801bca0:	e006      	b.n	801bcb0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bca2:	6938      	ldr	r0, [r7, #16]
 801bca4:	f004 f92e 	bl	801ff04 <UTIL_TIMER_GetElapsedTime>
 801bca8:	4602      	mov	r2, r0
 801bcaa:	683b      	ldr	r3, [r7, #0]
 801bcac:	4293      	cmp	r3, r2
 801bcae:	d8ea      	bhi.n	801bc86 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801bcb0:	f000 fdad 	bl	801c80e <RadioStandby>

    return status;
 801bcb4:	7dfb      	ldrb	r3, [r7, #23]
}
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	3718      	adds	r7, #24
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	bd80      	pop	{r7, pc}

0801bcbe <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801bcbe:	b580      	push	{r7, lr}
 801bcc0:	b082      	sub	sp, #8
 801bcc2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801bcc8:	2300      	movs	r3, #0
 801bcca:	2200      	movs	r2, #0
 801bccc:	2100      	movs	r1, #0
 801bcce:	2000      	movs	r0, #0
 801bcd0:	f002 f9fc 	bl	801e0cc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801bcd4:	f001 ffad 	bl	801dc32 <SUBGRF_GetRandom>
 801bcd8:	6078      	str	r0, [r7, #4]

    return rnd;
 801bcda:	687b      	ldr	r3, [r7, #4]
}
 801bcdc:	4618      	mov	r0, r3
 801bcde:	3708      	adds	r7, #8
 801bce0:	46bd      	mov	sp, r7
 801bce2:	bd80      	pop	{r7, pc}

0801bce4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b08a      	sub	sp, #40	; 0x28
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	60b9      	str	r1, [r7, #8]
 801bcec:	607a      	str	r2, [r7, #4]
 801bcee:	461a      	mov	r2, r3
 801bcf0:	4603      	mov	r3, r0
 801bcf2:	73fb      	strb	r3, [r7, #15]
 801bcf4:	4613      	mov	r3, r2
 801bcf6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801bcf8:	4ab9      	ldr	r2, [pc, #740]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bcfa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bcfe:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801bd00:	f003 f87b 	bl	801edfa <RFW_DeInit>
    if( rxContinuous == true )
 801bd04:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d001      	beq.n	801bd10 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801bd10:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d004      	beq.n	801bd22 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801bd18:	4ab2      	ldr	r2, [pc, #712]	; (801bfe4 <RadioSetRxConfig+0x300>)
 801bd1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801bd1e:	7013      	strb	r3, [r2, #0]
 801bd20:	e002      	b.n	801bd28 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801bd22:	4bb0      	ldr	r3, [pc, #704]	; (801bfe4 <RadioSetRxConfig+0x300>)
 801bd24:	22ff      	movs	r2, #255	; 0xff
 801bd26:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801bd28:	7bfb      	ldrb	r3, [r7, #15]
 801bd2a:	2b05      	cmp	r3, #5
 801bd2c:	d009      	beq.n	801bd42 <RadioSetRxConfig+0x5e>
 801bd2e:	2b05      	cmp	r3, #5
 801bd30:	f300 81d7 	bgt.w	801c0e2 <RadioSetRxConfig+0x3fe>
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	f000 80bf 	beq.w	801beb8 <RadioSetRxConfig+0x1d4>
 801bd3a:	2b01      	cmp	r3, #1
 801bd3c:	f000 8124 	beq.w	801bf88 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801bd40:	e1cf      	b.n	801c0e2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801bd42:	2001      	movs	r0, #1
 801bd44:	f002 f8ba 	bl	801debc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd48:	4ba5      	ldr	r3, [pc, #660]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd4a:	2200      	movs	r2, #0
 801bd4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bd50:	4aa3      	ldr	r2, [pc, #652]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801bd56:	4ba2      	ldr	r3, [pc, #648]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd58:	2209      	movs	r2, #9
 801bd5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801bd5e:	4ba0      	ldr	r3, [pc, #640]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd60:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bd64:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bd66:	68b8      	ldr	r0, [r7, #8]
 801bd68:	f002 ff7a 	bl	801ec60 <SUBGRF_GetFskBandwidthRegValue>
 801bd6c:	4603      	mov	r3, r0
 801bd6e:	461a      	mov	r2, r3
 801bd70:	4b9b      	ldr	r3, [pc, #620]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bd76:	4b9a      	ldr	r3, [pc, #616]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd78:	2200      	movs	r2, #0
 801bd7a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bd7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bd7e:	00db      	lsls	r3, r3, #3
 801bd80:	b29a      	uxth	r2, r3
 801bd82:	4b97      	ldr	r3, [pc, #604]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd84:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801bd86:	4b96      	ldr	r3, [pc, #600]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd88:	2200      	movs	r2, #0
 801bd8a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801bd8c:	4b94      	ldr	r3, [pc, #592]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd8e:	2210      	movs	r2, #16
 801bd90:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bd92:	4b93      	ldr	r3, [pc, #588]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd94:	2200      	movs	r2, #0
 801bd96:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801bd98:	4b91      	ldr	r3, [pc, #580]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bd9a:	2200      	movs	r2, #0
 801bd9c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bd9e:	4b91      	ldr	r3, [pc, #580]	; (801bfe4 <RadioSetRxConfig+0x300>)
 801bda0:	781a      	ldrb	r2, [r3, #0]
 801bda2:	4b8f      	ldr	r3, [pc, #572]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bda4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bda6:	4b8e      	ldr	r3, [pc, #568]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bda8:	2201      	movs	r2, #1
 801bdaa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801bdac:	4b8c      	ldr	r3, [pc, #560]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bdae:	2200      	movs	r2, #0
 801bdb0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801bdb2:	2005      	movs	r0, #5
 801bdb4:	f7ff fec2 	bl	801bb3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdb8:	488b      	ldr	r0, [pc, #556]	; (801bfe8 <RadioSetRxConfig+0x304>)
 801bdba:	f002 fb1d 	bl	801e3f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bdbe:	488b      	ldr	r0, [pc, #556]	; (801bfec <RadioSetRxConfig+0x308>)
 801bdc0:	f002 fbec 	bl	801e59c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bdc4:	4a8a      	ldr	r2, [pc, #552]	; (801bff0 <RadioSetRxConfig+0x30c>)
 801bdc6:	f107 031c 	add.w	r3, r7, #28
 801bdca:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bdce:	e883 0003 	stmia.w	r3, {r0, r1}
 801bdd2:	f107 031c 	add.w	r3, r7, #28
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	f001 fea9 	bl	801db2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bddc:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bde0:	f001 fef4 	bl	801dbcc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801bde4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bde8:	f000 fe25 	bl	801ca36 <RadioRead>
 801bdec:	4603      	mov	r3, r0
 801bdee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801bdf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bdf6:	f023 0310 	bic.w	r3, r3, #16
 801bdfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801bdfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be02:	4619      	mov	r1, r3
 801be04:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801be08:	f000 fe03 	bl	801ca12 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801be0c:	2104      	movs	r1, #4
 801be0e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801be12:	f000 fdfe 	bl	801ca12 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801be16:	f640 009b 	movw	r0, #2203	; 0x89b
 801be1a:	f000 fe0c 	bl	801ca36 <RadioRead>
 801be1e:	4603      	mov	r3, r0
 801be20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801be24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be28:	f023 031c 	bic.w	r3, r3, #28
 801be2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801be30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be34:	f043 0308 	orr.w	r3, r3, #8
 801be38:	b2db      	uxtb	r3, r3
 801be3a:	4619      	mov	r1, r3
 801be3c:	f640 009b 	movw	r0, #2203	; 0x89b
 801be40:	f000 fde7 	bl	801ca12 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801be44:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801be48:	f000 fdf5 	bl	801ca36 <RadioRead>
 801be4c:	4603      	mov	r3, r0
 801be4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801be52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be56:	f023 0318 	bic.w	r3, r3, #24
 801be5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801be5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be62:	f043 0318 	orr.w	r3, r3, #24
 801be66:	b2db      	uxtb	r3, r3
 801be68:	4619      	mov	r1, r3
 801be6a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801be6e:	f000 fdd0 	bl	801ca12 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801be72:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801be76:	f000 fdde 	bl	801ca36 <RadioRead>
 801be7a:	4603      	mov	r3, r0
 801be7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801be80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801be88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801be8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be90:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801be94:	b2db      	uxtb	r3, r3
 801be96:	4619      	mov	r1, r3
 801be98:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801be9c:	f000 fdb9 	bl	801ca12 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bea0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bea2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bea6:	fb02 f303 	mul.w	r3, r2, r3
 801beaa:	461a      	mov	r2, r3
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	fbb2 f3f3 	udiv	r3, r2, r3
 801beb2:	4a4b      	ldr	r2, [pc, #300]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801beb4:	6093      	str	r3, [r2, #8]
            break;
 801beb6:	e115      	b.n	801c0e4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801beb8:	2000      	movs	r0, #0
 801beba:	f001 ffff 	bl	801debc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bebe:	4b48      	ldr	r3, [pc, #288]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bec0:	2200      	movs	r2, #0
 801bec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bec6:	4a46      	ldr	r2, [pc, #280]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801becc:	4b44      	ldr	r3, [pc, #272]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bece:	220b      	movs	r2, #11
 801bed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bed4:	68b8      	ldr	r0, [r7, #8]
 801bed6:	f002 fec3 	bl	801ec60 <SUBGRF_GetFskBandwidthRegValue>
 801beda:	4603      	mov	r3, r0
 801bedc:	461a      	mov	r2, r3
 801bede:	4b40      	ldr	r3, [pc, #256]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bee4:	4b3e      	ldr	r3, [pc, #248]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bee6:	2200      	movs	r2, #0
 801bee8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801beea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801beec:	00db      	lsls	r3, r3, #3
 801beee:	b29a      	uxth	r2, r3
 801bef0:	4b3b      	ldr	r3, [pc, #236]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bef2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bef4:	4b3a      	ldr	r3, [pc, #232]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bef6:	2204      	movs	r2, #4
 801bef8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801befa:	4b39      	ldr	r3, [pc, #228]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801befc:	2218      	movs	r2, #24
 801befe:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bf00:	4b37      	ldr	r3, [pc, #220]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf02:	2200      	movs	r2, #0
 801bf04:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bf06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bf0a:	f083 0301 	eor.w	r3, r3, #1
 801bf0e:	b2db      	uxtb	r3, r3
 801bf10:	461a      	mov	r2, r3
 801bf12:	4b33      	ldr	r3, [pc, #204]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf14:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bf16:	4b33      	ldr	r3, [pc, #204]	; (801bfe4 <RadioSetRxConfig+0x300>)
 801bf18:	781a      	ldrb	r2, [r3, #0]
 801bf1a:	4b31      	ldr	r3, [pc, #196]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf1c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801bf1e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d003      	beq.n	801bf2e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bf26:	4b2e      	ldr	r3, [pc, #184]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf28:	22f2      	movs	r2, #242	; 0xf2
 801bf2a:	75da      	strb	r2, [r3, #23]
 801bf2c:	e002      	b.n	801bf34 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bf2e:	4b2c      	ldr	r3, [pc, #176]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf30:	2201      	movs	r2, #1
 801bf32:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bf34:	4b2a      	ldr	r3, [pc, #168]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf36:	2201      	movs	r2, #1
 801bf38:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bf3a:	f000 fc68 	bl	801c80e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801bf3e:	2000      	movs	r0, #0
 801bf40:	f7ff fdfc 	bl	801bb3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf44:	4828      	ldr	r0, [pc, #160]	; (801bfe8 <RadioSetRxConfig+0x304>)
 801bf46:	f002 fa57 	bl	801e3f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bf4a:	4828      	ldr	r0, [pc, #160]	; (801bfec <RadioSetRxConfig+0x308>)
 801bf4c:	f002 fb26 	bl	801e59c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bf50:	4a28      	ldr	r2, [pc, #160]	; (801bff4 <RadioSetRxConfig+0x310>)
 801bf52:	f107 0314 	add.w	r3, r7, #20
 801bf56:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bf5a:	e883 0003 	stmia.w	r3, {r0, r1}
 801bf5e:	f107 0314 	add.w	r3, r7, #20
 801bf62:	4618      	mov	r0, r3
 801bf64:	f001 fde3 	bl	801db2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bf68:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bf6c:	f001 fe2e 	bl	801dbcc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bf70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bf72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bf76:	fb02 f303 	mul.w	r3, r2, r3
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf82:	4a17      	ldr	r2, [pc, #92]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf84:	6093      	str	r3, [r2, #8]
            break;
 801bf86:	e0ad      	b.n	801c0e4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bf88:	2000      	movs	r0, #0
 801bf8a:	f001 ff97 	bl	801debc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bf8e:	4b14      	ldr	r3, [pc, #80]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf90:	2201      	movs	r2, #1
 801bf92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	b2da      	uxtb	r2, r3
 801bf9a:	4b11      	ldr	r3, [pc, #68]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bf9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801bfa0:	4a15      	ldr	r2, [pc, #84]	; (801bff8 <RadioSetRxConfig+0x314>)
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	4413      	add	r3, r2
 801bfa6:	781a      	ldrb	r2, [r3, #0]
 801bfa8:	4b0d      	ldr	r3, [pc, #52]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bfaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801bfae:	4a0c      	ldr	r2, [pc, #48]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bfb0:	7bbb      	ldrb	r3, [r7, #14]
 801bfb2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bfb6:	68bb      	ldr	r3, [r7, #8]
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d105      	bne.n	801bfc8 <RadioSetRxConfig+0x2e4>
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	2b0b      	cmp	r3, #11
 801bfc0:	d008      	beq.n	801bfd4 <RadioSetRxConfig+0x2f0>
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	2b0c      	cmp	r3, #12
 801bfc6:	d005      	beq.n	801bfd4 <RadioSetRxConfig+0x2f0>
 801bfc8:	68bb      	ldr	r3, [r7, #8]
 801bfca:	2b01      	cmp	r3, #1
 801bfcc:	d116      	bne.n	801bffc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	2b0c      	cmp	r3, #12
 801bfd2:	d113      	bne.n	801bffc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801bfd4:	4b02      	ldr	r3, [pc, #8]	; (801bfe0 <RadioSetRxConfig+0x2fc>)
 801bfd6:	2201      	movs	r2, #1
 801bfd8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bfdc:	e012      	b.n	801c004 <RadioSetRxConfig+0x320>
 801bfde:	bf00      	nop
 801bfe0:	20001dcc 	.word	0x20001dcc
 801bfe4:	20000134 	.word	0x20000134
 801bfe8:	20001e04 	.word	0x20001e04
 801bfec:	20001dda 	.word	0x20001dda
 801bff0:	080218e4 	.word	0x080218e4
 801bff4:	080218ec 	.word	0x080218ec
 801bff8:	08021fa0 	.word	0x08021fa0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bffc:	4b3b      	ldr	r3, [pc, #236]	; (801c0ec <RadioSetRxConfig+0x408>)
 801bffe:	2200      	movs	r2, #0
 801c000:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c004:	4b39      	ldr	r3, [pc, #228]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c006:	2201      	movs	r2, #1
 801c008:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c00a:	4b38      	ldr	r3, [pc, #224]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c00c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c010:	2b05      	cmp	r3, #5
 801c012:	d004      	beq.n	801c01e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c014:	4b35      	ldr	r3, [pc, #212]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c01a:	2b06      	cmp	r3, #6
 801c01c:	d10a      	bne.n	801c034 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801c01e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c020:	2b0b      	cmp	r3, #11
 801c022:	d803      	bhi.n	801c02c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c024:	4b31      	ldr	r3, [pc, #196]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c026:	220c      	movs	r2, #12
 801c028:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c02a:	e006      	b.n	801c03a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c02c:	4a2f      	ldr	r2, [pc, #188]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c02e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c030:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c032:	e002      	b.n	801c03a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c034:	4a2d      	ldr	r2, [pc, #180]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c036:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c038:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c03a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c03e:	4b2b      	ldr	r3, [pc, #172]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c040:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c042:	4b2b      	ldr	r3, [pc, #172]	; (801c0f0 <RadioSetRxConfig+0x40c>)
 801c044:	781a      	ldrb	r2, [r3, #0]
 801c046:	4b29      	ldr	r3, [pc, #164]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c048:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c04a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801c04e:	4b27      	ldr	r3, [pc, #156]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c050:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c054:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801c058:	4b24      	ldr	r3, [pc, #144]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c05a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c05e:	f000 fbd6 	bl	801c80e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c062:	2001      	movs	r0, #1
 801c064:	f7ff fd6a 	bl	801bb3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c068:	4822      	ldr	r0, [pc, #136]	; (801c0f4 <RadioSetRxConfig+0x410>)
 801c06a:	f002 f9c5 	bl	801e3f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c06e:	4822      	ldr	r0, [pc, #136]	; (801c0f8 <RadioSetRxConfig+0x414>)
 801c070:	f002 fa94 	bl	801e59c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801c074:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801c076:	b2db      	uxtb	r3, r3
 801c078:	4618      	mov	r0, r3
 801c07a:	f001 ff2e 	bl	801deda <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801c07e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801c082:	f002 fbe7 	bl	801e854 <SUBGRF_ReadRegister>
 801c086:	4603      	mov	r3, r0
 801c088:	f003 0301 	and.w	r3, r3, #1
 801c08c:	b2db      	uxtb	r3, r3
 801c08e:	4619      	mov	r1, r3
 801c090:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801c094:	f002 fbca 	bl	801e82c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801c098:	4b14      	ldr	r3, [pc, #80]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c09a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801c09e:	2b01      	cmp	r3, #1
 801c0a0:	d10d      	bne.n	801c0be <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801c0a2:	f240 7036 	movw	r0, #1846	; 0x736
 801c0a6:	f002 fbd5 	bl	801e854 <SUBGRF_ReadRegister>
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	f023 0304 	bic.w	r3, r3, #4
 801c0b0:	b2db      	uxtb	r3, r3
 801c0b2:	4619      	mov	r1, r3
 801c0b4:	f240 7036 	movw	r0, #1846	; 0x736
 801c0b8:	f002 fbb8 	bl	801e82c <SUBGRF_WriteRegister>
 801c0bc:	e00c      	b.n	801c0d8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801c0be:	f240 7036 	movw	r0, #1846	; 0x736
 801c0c2:	f002 fbc7 	bl	801e854 <SUBGRF_ReadRegister>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	f043 0304 	orr.w	r3, r3, #4
 801c0cc:	b2db      	uxtb	r3, r3
 801c0ce:	4619      	mov	r1, r3
 801c0d0:	f240 7036 	movw	r0, #1846	; 0x736
 801c0d4:	f002 fbaa 	bl	801e82c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801c0d8:	4b04      	ldr	r3, [pc, #16]	; (801c0ec <RadioSetRxConfig+0x408>)
 801c0da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c0de:	609a      	str	r2, [r3, #8]
            break;
 801c0e0:	e000      	b.n	801c0e4 <RadioSetRxConfig+0x400>
            break;
 801c0e2:	bf00      	nop
    }
}
 801c0e4:	bf00      	nop
 801c0e6:	3728      	adds	r7, #40	; 0x28
 801c0e8:	46bd      	mov	sp, r7
 801c0ea:	bd80      	pop	{r7, pc}
 801c0ec:	20001dcc 	.word	0x20001dcc
 801c0f0:	20000134 	.word	0x20000134
 801c0f4:	20001e04 	.word	0x20001e04
 801c0f8:	20001dda 	.word	0x20001dda

0801c0fc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801c0fc:	b580      	push	{r7, lr}
 801c0fe:	b086      	sub	sp, #24
 801c100:	af00      	add	r7, sp, #0
 801c102:	60ba      	str	r2, [r7, #8]
 801c104:	607b      	str	r3, [r7, #4]
 801c106:	4603      	mov	r3, r0
 801c108:	73fb      	strb	r3, [r7, #15]
 801c10a:	460b      	mov	r3, r1
 801c10c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801c10e:	f002 fe74 	bl	801edfa <RFW_DeInit>
    switch( modem )
 801c112:	7bfb      	ldrb	r3, [r7, #15]
 801c114:	2b04      	cmp	r3, #4
 801c116:	f000 80c7 	beq.w	801c2a8 <RadioSetTxConfig+0x1ac>
 801c11a:	2b04      	cmp	r3, #4
 801c11c:	f300 80d6 	bgt.w	801c2cc <RadioSetTxConfig+0x1d0>
 801c120:	2b00      	cmp	r3, #0
 801c122:	d002      	beq.n	801c12a <RadioSetTxConfig+0x2e>
 801c124:	2b01      	cmp	r3, #1
 801c126:	d059      	beq.n	801c1dc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c128:	e0d0      	b.n	801c2cc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c12a:	4b77      	ldr	r3, [pc, #476]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c12c:	2200      	movs	r2, #0
 801c12e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c132:	4a75      	ldr	r2, [pc, #468]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c134:	6a3b      	ldr	r3, [r7, #32]
 801c136:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801c138:	4b73      	ldr	r3, [pc, #460]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c13a:	220b      	movs	r2, #11
 801c13c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c140:	6878      	ldr	r0, [r7, #4]
 801c142:	f002 fd8d 	bl	801ec60 <SUBGRF_GetFskBandwidthRegValue>
 801c146:	4603      	mov	r3, r0
 801c148:	461a      	mov	r2, r3
 801c14a:	4b6f      	ldr	r3, [pc, #444]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801c150:	4a6d      	ldr	r2, [pc, #436]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c152:	68bb      	ldr	r3, [r7, #8]
 801c154:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c156:	4b6c      	ldr	r3, [pc, #432]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c158:	2200      	movs	r2, #0
 801c15a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c15c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c15e:	00db      	lsls	r3, r3, #3
 801c160:	b29a      	uxth	r2, r3
 801c162:	4b69      	ldr	r3, [pc, #420]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c164:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801c166:	4b68      	ldr	r3, [pc, #416]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c168:	2204      	movs	r2, #4
 801c16a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801c16c:	4b66      	ldr	r3, [pc, #408]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c16e:	2218      	movs	r2, #24
 801c170:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c172:	4b65      	ldr	r3, [pc, #404]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c174:	2200      	movs	r2, #0
 801c176:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801c178:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c17c:	f083 0301 	eor.w	r3, r3, #1
 801c180:	b2db      	uxtb	r3, r3
 801c182:	461a      	mov	r2, r3
 801c184:	4b60      	ldr	r3, [pc, #384]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c186:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801c188:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d003      	beq.n	801c198 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801c190:	4b5d      	ldr	r3, [pc, #372]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c192:	22f2      	movs	r2, #242	; 0xf2
 801c194:	75da      	strb	r2, [r3, #23]
 801c196:	e002      	b.n	801c19e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c198:	4b5b      	ldr	r3, [pc, #364]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c19a:	2201      	movs	r2, #1
 801c19c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801c19e:	4b5a      	ldr	r3, [pc, #360]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c1a0:	2201      	movs	r2, #1
 801c1a2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801c1a4:	f000 fb33 	bl	801c80e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801c1a8:	2000      	movs	r0, #0
 801c1aa:	f7ff fcc7 	bl	801bb3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c1ae:	4857      	ldr	r0, [pc, #348]	; (801c30c <RadioSetTxConfig+0x210>)
 801c1b0:	f002 f922 	bl	801e3f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c1b4:	4856      	ldr	r0, [pc, #344]	; (801c310 <RadioSetTxConfig+0x214>)
 801c1b6:	f002 f9f1 	bl	801e59c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c1ba:	4a56      	ldr	r2, [pc, #344]	; (801c314 <RadioSetTxConfig+0x218>)
 801c1bc:	f107 0310 	add.w	r3, r7, #16
 801c1c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c1c4:	e883 0003 	stmia.w	r3, {r0, r1}
 801c1c8:	f107 0310 	add.w	r3, r7, #16
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	f001 fcae 	bl	801db2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c1d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c1d6:	f001 fcf9 	bl	801dbcc <SUBGRF_SetWhiteningSeed>
            break;
 801c1da:	e078      	b.n	801c2ce <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c1dc:	4b4a      	ldr	r3, [pc, #296]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c1de:	2201      	movs	r2, #1
 801c1e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801c1e4:	6a3b      	ldr	r3, [r7, #32]
 801c1e6:	b2da      	uxtb	r2, r3
 801c1e8:	4b47      	ldr	r3, [pc, #284]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c1ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801c1ee:	4a4a      	ldr	r2, [pc, #296]	; (801c318 <RadioSetTxConfig+0x21c>)
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	4413      	add	r3, r2
 801c1f4:	781a      	ldrb	r2, [r3, #0]
 801c1f6:	4b44      	ldr	r3, [pc, #272]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c1f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801c1fc:	4a42      	ldr	r2, [pc, #264]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c1fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c202:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d105      	bne.n	801c218 <RadioSetTxConfig+0x11c>
 801c20c:	6a3b      	ldr	r3, [r7, #32]
 801c20e:	2b0b      	cmp	r3, #11
 801c210:	d008      	beq.n	801c224 <RadioSetTxConfig+0x128>
 801c212:	6a3b      	ldr	r3, [r7, #32]
 801c214:	2b0c      	cmp	r3, #12
 801c216:	d005      	beq.n	801c224 <RadioSetTxConfig+0x128>
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	2b01      	cmp	r3, #1
 801c21c:	d107      	bne.n	801c22e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c21e:	6a3b      	ldr	r3, [r7, #32]
 801c220:	2b0c      	cmp	r3, #12
 801c222:	d104      	bne.n	801c22e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801c224:	4b38      	ldr	r3, [pc, #224]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c226:	2201      	movs	r2, #1
 801c228:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801c22c:	e003      	b.n	801c236 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801c22e:	4b36      	ldr	r3, [pc, #216]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c230:	2200      	movs	r2, #0
 801c232:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c236:	4b34      	ldr	r3, [pc, #208]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c238:	2201      	movs	r2, #1
 801c23a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c23c:	4b32      	ldr	r3, [pc, #200]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c23e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c242:	2b05      	cmp	r3, #5
 801c244:	d004      	beq.n	801c250 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c246:	4b30      	ldr	r3, [pc, #192]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c24c:	2b06      	cmp	r3, #6
 801c24e:	d10a      	bne.n	801c266 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801c250:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c252:	2b0b      	cmp	r3, #11
 801c254:	d803      	bhi.n	801c25e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c256:	4b2c      	ldr	r3, [pc, #176]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c258:	220c      	movs	r2, #12
 801c25a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c25c:	e006      	b.n	801c26c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c25e:	4a2a      	ldr	r2, [pc, #168]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c260:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c262:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c264:	e002      	b.n	801c26c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c266:	4a28      	ldr	r2, [pc, #160]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c268:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c26a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c26c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c270:	4b25      	ldr	r3, [pc, #148]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c272:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c274:	4b29      	ldr	r3, [pc, #164]	; (801c31c <RadioSetTxConfig+0x220>)
 801c276:	781a      	ldrb	r2, [r3, #0]
 801c278:	4b23      	ldr	r3, [pc, #140]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c27a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c27c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c280:	4b21      	ldr	r3, [pc, #132]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c282:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c286:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c28a:	4b1f      	ldr	r3, [pc, #124]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c28c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c290:	f000 fabd 	bl	801c80e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c294:	2001      	movs	r0, #1
 801c296:	f7ff fc51 	bl	801bb3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c29a:	481c      	ldr	r0, [pc, #112]	; (801c30c <RadioSetTxConfig+0x210>)
 801c29c:	f002 f8ac 	bl	801e3f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c2a0:	481b      	ldr	r0, [pc, #108]	; (801c310 <RadioSetTxConfig+0x214>)
 801c2a2:	f002 f97b 	bl	801e59c <SUBGRF_SetPacketParams>
            break;
 801c2a6:	e012      	b.n	801c2ce <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801c2a8:	2004      	movs	r0, #4
 801c2aa:	f7ff fc47 	bl	801bb3c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c2ae:	4b16      	ldr	r3, [pc, #88]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c2b0:	2202      	movs	r2, #2
 801c2b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801c2b6:	4a14      	ldr	r2, [pc, #80]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c2b8:	6a3b      	ldr	r3, [r7, #32]
 801c2ba:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c2bc:	4b12      	ldr	r3, [pc, #72]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c2be:	2216      	movs	r2, #22
 801c2c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c2c4:	4811      	ldr	r0, [pc, #68]	; (801c30c <RadioSetTxConfig+0x210>)
 801c2c6:	f002 f897 	bl	801e3f8 <SUBGRF_SetModulationParams>
            break;
 801c2ca:	e000      	b.n	801c2ce <RadioSetTxConfig+0x1d2>
            break;
 801c2cc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c2ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c2d2:	4618      	mov	r0, r3
 801c2d4:	f002 fbc6 	bl	801ea64 <SUBGRF_SetRfTxPower>
 801c2d8:	4603      	mov	r3, r0
 801c2da:	461a      	mov	r2, r3
 801c2dc:	4b0a      	ldr	r3, [pc, #40]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c2de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c2e2:	210e      	movs	r1, #14
 801c2e4:	f640 101f 	movw	r0, #2335	; 0x91f
 801c2e8:	f002 faa0 	bl	801e82c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c2ec:	4b06      	ldr	r3, [pc, #24]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c2ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c2f2:	4618      	mov	r0, r3
 801c2f4:	f002 fd95 	bl	801ee22 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c2f8:	4a03      	ldr	r2, [pc, #12]	; (801c308 <RadioSetTxConfig+0x20c>)
 801c2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2fc:	6053      	str	r3, [r2, #4]
}
 801c2fe:	bf00      	nop
 801c300:	3718      	adds	r7, #24
 801c302:	46bd      	mov	sp, r7
 801c304:	bd80      	pop	{r7, pc}
 801c306:	bf00      	nop
 801c308:	20001dcc 	.word	0x20001dcc
 801c30c:	20001e04 	.word	0x20001e04
 801c310:	20001dda 	.word	0x20001dda
 801c314:	080218ec 	.word	0x080218ec
 801c318:	08021fa0 	.word	0x08021fa0
 801c31c:	20000134 	.word	0x20000134

0801c320 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801c320:	b480      	push	{r7}
 801c322:	b083      	sub	sp, #12
 801c324:	af00      	add	r7, sp, #0
 801c326:	6078      	str	r0, [r7, #4]
    return true;
 801c328:	2301      	movs	r3, #1
}
 801c32a:	4618      	mov	r0, r3
 801c32c:	370c      	adds	r7, #12
 801c32e:	46bd      	mov	sp, r7
 801c330:	bc80      	pop	{r7}
 801c332:	4770      	bx	lr

0801c334 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801c334:	b480      	push	{r7}
 801c336:	b085      	sub	sp, #20
 801c338:	af00      	add	r7, sp, #0
 801c33a:	4603      	mov	r3, r0
 801c33c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801c33e:	2300      	movs	r3, #0
 801c340:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801c342:	79fb      	ldrb	r3, [r7, #7]
 801c344:	2b0a      	cmp	r3, #10
 801c346:	d83e      	bhi.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
 801c348:	a201      	add	r2, pc, #4	; (adr r2, 801c350 <RadioGetLoRaBandwidthInHz+0x1c>)
 801c34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c34e:	bf00      	nop
 801c350:	0801c37d 	.word	0x0801c37d
 801c354:	0801c38d 	.word	0x0801c38d
 801c358:	0801c39d 	.word	0x0801c39d
 801c35c:	0801c3ad 	.word	0x0801c3ad
 801c360:	0801c3b5 	.word	0x0801c3b5
 801c364:	0801c3bb 	.word	0x0801c3bb
 801c368:	0801c3c1 	.word	0x0801c3c1
 801c36c:	0801c3c7 	.word	0x0801c3c7
 801c370:	0801c385 	.word	0x0801c385
 801c374:	0801c395 	.word	0x0801c395
 801c378:	0801c3a5 	.word	0x0801c3a5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801c37c:	f641 6384 	movw	r3, #7812	; 0x1e84
 801c380:	60fb      	str	r3, [r7, #12]
        break;
 801c382:	e020      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801c384:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801c388:	60fb      	str	r3, [r7, #12]
        break;
 801c38a:	e01c      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801c38c:	f643 5309 	movw	r3, #15625	; 0x3d09
 801c390:	60fb      	str	r3, [r7, #12]
        break;
 801c392:	e018      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801c394:	f245 1361 	movw	r3, #20833	; 0x5161
 801c398:	60fb      	str	r3, [r7, #12]
        break;
 801c39a:	e014      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801c39c:	f647 2312 	movw	r3, #31250	; 0x7a12
 801c3a0:	60fb      	str	r3, [r7, #12]
        break;
 801c3a2:	e010      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801c3a4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801c3a8:	60fb      	str	r3, [r7, #12]
        break;
 801c3aa:	e00c      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801c3ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 801c3b0:	60fb      	str	r3, [r7, #12]
        break;
 801c3b2:	e008      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801c3b4:	4b07      	ldr	r3, [pc, #28]	; (801c3d4 <RadioGetLoRaBandwidthInHz+0xa0>)
 801c3b6:	60fb      	str	r3, [r7, #12]
        break;
 801c3b8:	e005      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801c3ba:	4b07      	ldr	r3, [pc, #28]	; (801c3d8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801c3bc:	60fb      	str	r3, [r7, #12]
        break;
 801c3be:	e002      	b.n	801c3c6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801c3c0:	4b06      	ldr	r3, [pc, #24]	; (801c3dc <RadioGetLoRaBandwidthInHz+0xa8>)
 801c3c2:	60fb      	str	r3, [r7, #12]
        break;
 801c3c4:	bf00      	nop
    }

    return bandwidthInHz;
 801c3c6:	68fb      	ldr	r3, [r7, #12]
}
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	3714      	adds	r7, #20
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bc80      	pop	{r7}
 801c3d0:	4770      	bx	lr
 801c3d2:	bf00      	nop
 801c3d4:	0001e848 	.word	0x0001e848
 801c3d8:	0003d090 	.word	0x0003d090
 801c3dc:	0007a120 	.word	0x0007a120

0801c3e0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c3e0:	b480      	push	{r7}
 801c3e2:	b083      	sub	sp, #12
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
 801c3e8:	4608      	mov	r0, r1
 801c3ea:	4611      	mov	r1, r2
 801c3ec:	461a      	mov	r2, r3
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	70fb      	strb	r3, [r7, #3]
 801c3f2:	460b      	mov	r3, r1
 801c3f4:	803b      	strh	r3, [r7, #0]
 801c3f6:	4613      	mov	r3, r2
 801c3f8:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801c3fa:	883b      	ldrh	r3, [r7, #0]
 801c3fc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c3fe:	78ba      	ldrb	r2, [r7, #2]
 801c400:	f082 0201 	eor.w	r2, r2, #1
 801c404:	b2d2      	uxtb	r2, r2
 801c406:	2a00      	cmp	r2, #0
 801c408:	d001      	beq.n	801c40e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801c40a:	2208      	movs	r2, #8
 801c40c:	e000      	b.n	801c410 <RadioGetGfskTimeOnAirNumerator+0x30>
 801c40e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801c410:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c412:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801c416:	7c3b      	ldrb	r3, [r7, #16]
 801c418:	7d39      	ldrb	r1, [r7, #20]
 801c41a:	2900      	cmp	r1, #0
 801c41c:	d001      	beq.n	801c422 <RadioGetGfskTimeOnAirNumerator+0x42>
 801c41e:	2102      	movs	r1, #2
 801c420:	e000      	b.n	801c424 <RadioGetGfskTimeOnAirNumerator+0x44>
 801c422:	2100      	movs	r1, #0
 801c424:	440b      	add	r3, r1
 801c426:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c428:	4413      	add	r3, r2
}
 801c42a:	4618      	mov	r0, r3
 801c42c:	370c      	adds	r7, #12
 801c42e:	46bd      	mov	sp, r7
 801c430:	bc80      	pop	{r7}
 801c432:	4770      	bx	lr

0801c434 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c434:	b480      	push	{r7}
 801c436:	b08b      	sub	sp, #44	; 0x2c
 801c438:	af00      	add	r7, sp, #0
 801c43a:	60f8      	str	r0, [r7, #12]
 801c43c:	60b9      	str	r1, [r7, #8]
 801c43e:	4611      	mov	r1, r2
 801c440:	461a      	mov	r2, r3
 801c442:	460b      	mov	r3, r1
 801c444:	71fb      	strb	r3, [r7, #7]
 801c446:	4613      	mov	r3, r2
 801c448:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801c44a:	79fb      	ldrb	r3, [r7, #7]
 801c44c:	3304      	adds	r3, #4
 801c44e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801c450:	2300      	movs	r3, #0
 801c452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801c456:	68bb      	ldr	r3, [r7, #8]
 801c458:	2b05      	cmp	r3, #5
 801c45a:	d002      	beq.n	801c462 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801c45c:	68bb      	ldr	r3, [r7, #8]
 801c45e:	2b06      	cmp	r3, #6
 801c460:	d104      	bne.n	801c46c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801c462:	88bb      	ldrh	r3, [r7, #4]
 801c464:	2b0b      	cmp	r3, #11
 801c466:	d801      	bhi.n	801c46c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801c468:	230c      	movs	r3, #12
 801c46a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d105      	bne.n	801c47e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801c472:	68bb      	ldr	r3, [r7, #8]
 801c474:	2b0b      	cmp	r3, #11
 801c476:	d008      	beq.n	801c48a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c478:	68bb      	ldr	r3, [r7, #8]
 801c47a:	2b0c      	cmp	r3, #12
 801c47c:	d005      	beq.n	801c48a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	2b01      	cmp	r3, #1
 801c482:	d105      	bne.n	801c490 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c484:	68bb      	ldr	r3, [r7, #8]
 801c486:	2b0c      	cmp	r3, #12
 801c488:	d102      	bne.n	801c490 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801c48a:	2301      	movs	r3, #1
 801c48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c490:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801c494:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801c496:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c49a:	2a00      	cmp	r2, #0
 801c49c:	d001      	beq.n	801c4a2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801c49e:	2210      	movs	r2, #16
 801c4a0:	e000      	b.n	801c4a4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801c4a2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c4a4:	4413      	add	r3, r2
 801c4a6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801c4a8:	68bb      	ldr	r3, [r7, #8]
 801c4aa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801c4ac:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801c4ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c4b2:	2a00      	cmp	r2, #0
 801c4b4:	d001      	beq.n	801c4ba <RadioGetLoRaTimeOnAirNumerator+0x86>
 801c4b6:	2200      	movs	r2, #0
 801c4b8:	e000      	b.n	801c4bc <RadioGetLoRaTimeOnAirNumerator+0x88>
 801c4ba:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801c4bc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c4be:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801c4c0:	68bb      	ldr	r3, [r7, #8]
 801c4c2:	2b06      	cmp	r3, #6
 801c4c4:	d803      	bhi.n	801c4ce <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801c4c6:	68bb      	ldr	r3, [r7, #8]
 801c4c8:	009b      	lsls	r3, r3, #2
 801c4ca:	623b      	str	r3, [r7, #32]
 801c4cc:	e00e      	b.n	801c4ec <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c4ce:	69fb      	ldr	r3, [r7, #28]
 801c4d0:	3308      	adds	r3, #8
 801c4d2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d004      	beq.n	801c4e6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c4dc:	68bb      	ldr	r3, [r7, #8]
 801c4de:	3b02      	subs	r3, #2
 801c4e0:	009b      	lsls	r3, r3, #2
 801c4e2:	623b      	str	r3, [r7, #32]
 801c4e4:	e002      	b.n	801c4ec <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c4e6:	68bb      	ldr	r3, [r7, #8]
 801c4e8:	009b      	lsls	r3, r3, #2
 801c4ea:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c4ec:	69fb      	ldr	r3, [r7, #28]
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	da01      	bge.n	801c4f6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c4f2:	2300      	movs	r3, #0
 801c4f4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c4f6:	69fa      	ldr	r2, [r7, #28]
 801c4f8:	6a3b      	ldr	r3, [r7, #32]
 801c4fa:	4413      	add	r3, r2
 801c4fc:	1e5a      	subs	r2, r3, #1
 801c4fe:	6a3b      	ldr	r3, [r7, #32]
 801c500:	fb92 f3f3 	sdiv	r3, r2, r3
 801c504:	697a      	ldr	r2, [r7, #20]
 801c506:	fb03 f202 	mul.w	r2, r3, r2
 801c50a:	88bb      	ldrh	r3, [r7, #4]
 801c50c:	4413      	add	r3, r2
    int32_t intermediate =
 801c50e:	330c      	adds	r3, #12
 801c510:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c512:	68bb      	ldr	r3, [r7, #8]
 801c514:	2b06      	cmp	r3, #6
 801c516:	d802      	bhi.n	801c51e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c518:	69bb      	ldr	r3, [r7, #24]
 801c51a:	3302      	adds	r3, #2
 801c51c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	009b      	lsls	r3, r3, #2
 801c522:	1c5a      	adds	r2, r3, #1
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	3b02      	subs	r3, #2
 801c528:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c52c:	4618      	mov	r0, r3
 801c52e:	372c      	adds	r7, #44	; 0x2c
 801c530:	46bd      	mov	sp, r7
 801c532:	bc80      	pop	{r7}
 801c534:	4770      	bx	lr
	...

0801c538 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c538:	b580      	push	{r7, lr}
 801c53a:	b08a      	sub	sp, #40	; 0x28
 801c53c:	af04      	add	r7, sp, #16
 801c53e:	60b9      	str	r1, [r7, #8]
 801c540:	607a      	str	r2, [r7, #4]
 801c542:	461a      	mov	r2, r3
 801c544:	4603      	mov	r3, r0
 801c546:	73fb      	strb	r3, [r7, #15]
 801c548:	4613      	mov	r3, r2
 801c54a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c54c:	2300      	movs	r3, #0
 801c54e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c550:	2301      	movs	r3, #1
 801c552:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c554:	7bfb      	ldrb	r3, [r7, #15]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d002      	beq.n	801c560 <RadioTimeOnAir+0x28>
 801c55a:	2b01      	cmp	r3, #1
 801c55c:	d017      	beq.n	801c58e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c55e:	e035      	b.n	801c5cc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c560:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c564:	8c3a      	ldrh	r2, [r7, #32]
 801c566:	7bb9      	ldrb	r1, [r7, #14]
 801c568:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c56c:	9301      	str	r3, [sp, #4]
 801c56e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c572:	9300      	str	r3, [sp, #0]
 801c574:	4603      	mov	r3, r0
 801c576:	6878      	ldr	r0, [r7, #4]
 801c578:	f7ff ff32 	bl	801c3e0 <RadioGetGfskTimeOnAirNumerator>
 801c57c:	4603      	mov	r3, r0
 801c57e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c582:	fb02 f303 	mul.w	r3, r2, r3
 801c586:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	613b      	str	r3, [r7, #16]
        break;
 801c58c:	e01e      	b.n	801c5cc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c58e:	8c39      	ldrh	r1, [r7, #32]
 801c590:	7bba      	ldrb	r2, [r7, #14]
 801c592:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c596:	9302      	str	r3, [sp, #8]
 801c598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c59c:	9301      	str	r3, [sp, #4]
 801c59e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c5a2:	9300      	str	r3, [sp, #0]
 801c5a4:	460b      	mov	r3, r1
 801c5a6:	6879      	ldr	r1, [r7, #4]
 801c5a8:	68b8      	ldr	r0, [r7, #8]
 801c5aa:	f7ff ff43 	bl	801c434 <RadioGetLoRaTimeOnAirNumerator>
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c5b4:	fb02 f303 	mul.w	r3, r2, r3
 801c5b8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c5ba:	4a0a      	ldr	r2, [pc, #40]	; (801c5e4 <RadioTimeOnAir+0xac>)
 801c5bc:	68bb      	ldr	r3, [r7, #8]
 801c5be:	4413      	add	r3, r2
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7ff feb6 	bl	801c334 <RadioGetLoRaBandwidthInHz>
 801c5c8:	6138      	str	r0, [r7, #16]
        break;
 801c5ca:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801c5cc:	697a      	ldr	r2, [r7, #20]
 801c5ce:	693b      	ldr	r3, [r7, #16]
 801c5d0:	4413      	add	r3, r2
 801c5d2:	1e5a      	subs	r2, r3, #1
 801c5d4:	693b      	ldr	r3, [r7, #16]
 801c5d6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c5da:	4618      	mov	r0, r3
 801c5dc:	3718      	adds	r7, #24
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	bd80      	pop	{r7, pc}
 801c5e2:	bf00      	nop
 801c5e4:	08021fa0 	.word	0x08021fa0

0801c5e8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b084      	sub	sp, #16
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	6078      	str	r0, [r7, #4]
 801c5f0:	460b      	mov	r3, r1
 801c5f2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	f240 2101 	movw	r1, #513	; 0x201
 801c5fc:	f240 2001 	movw	r0, #513	; 0x201
 801c600:	f001 fd64 	bl	801e0cc <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801c604:	4b73      	ldr	r3, [pc, #460]	; (801c7d4 <RadioSend+0x1ec>)
 801c606:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c60a:	2101      	movs	r1, #1
 801c60c:	4618      	mov	r0, r3
 801c60e:	f002 fa01 	bl	801ea14 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801c612:	4b70      	ldr	r3, [pc, #448]	; (801c7d4 <RadioSend+0x1ec>)
 801c614:	781b      	ldrb	r3, [r3, #0]
 801c616:	2b01      	cmp	r3, #1
 801c618:	d112      	bne.n	801c640 <RadioSend+0x58>
 801c61a:	4b6e      	ldr	r3, [pc, #440]	; (801c7d4 <RadioSend+0x1ec>)
 801c61c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c620:	2b06      	cmp	r3, #6
 801c622:	d10d      	bne.n	801c640 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c624:	f640 0089 	movw	r0, #2185	; 0x889
 801c628:	f002 f914 	bl	801e854 <SUBGRF_ReadRegister>
 801c62c:	4603      	mov	r3, r0
 801c62e:	f023 0304 	bic.w	r3, r3, #4
 801c632:	b2db      	uxtb	r3, r3
 801c634:	4619      	mov	r1, r3
 801c636:	f640 0089 	movw	r0, #2185	; 0x889
 801c63a:	f002 f8f7 	bl	801e82c <SUBGRF_WriteRegister>
 801c63e:	e00c      	b.n	801c65a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c640:	f640 0089 	movw	r0, #2185	; 0x889
 801c644:	f002 f906 	bl	801e854 <SUBGRF_ReadRegister>
 801c648:	4603      	mov	r3, r0
 801c64a:	f043 0304 	orr.w	r3, r3, #4
 801c64e:	b2db      	uxtb	r3, r3
 801c650:	4619      	mov	r1, r3
 801c652:	f640 0089 	movw	r0, #2185	; 0x889
 801c656:	f002 f8e9 	bl	801e82c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801c65a:	4b5e      	ldr	r3, [pc, #376]	; (801c7d4 <RadioSend+0x1ec>)
 801c65c:	781b      	ldrb	r3, [r3, #0]
 801c65e:	2b04      	cmp	r3, #4
 801c660:	f200 80a8 	bhi.w	801c7b4 <RadioSend+0x1cc>
 801c664:	a201      	add	r2, pc, #4	; (adr r2, 801c66c <RadioSend+0x84>)
 801c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c66a:	bf00      	nop
 801c66c:	0801c69b 	.word	0x0801c69b
 801c670:	0801c681 	.word	0x0801c681
 801c674:	0801c69b 	.word	0x0801c69b
 801c678:	0801c6fd 	.word	0x0801c6fd
 801c67c:	0801c71d 	.word	0x0801c71d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c680:	4a54      	ldr	r2, [pc, #336]	; (801c7d4 <RadioSend+0x1ec>)
 801c682:	78fb      	ldrb	r3, [r7, #3]
 801c684:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c686:	4854      	ldr	r0, [pc, #336]	; (801c7d8 <RadioSend+0x1f0>)
 801c688:	f001 ff88 	bl	801e59c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c68c:	78fb      	ldrb	r3, [r7, #3]
 801c68e:	2200      	movs	r2, #0
 801c690:	4619      	mov	r1, r3
 801c692:	6878      	ldr	r0, [r7, #4]
 801c694:	f001 fa38 	bl	801db08 <SUBGRF_SendPayload>
            break;
 801c698:	e08d      	b.n	801c7b6 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c69a:	f002 fbb4 	bl	801ee06 <RFW_Is_Init>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	2b01      	cmp	r3, #1
 801c6a2:	d11e      	bne.n	801c6e2 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c6a4:	f107 020d 	add.w	r2, r7, #13
 801c6a8:	78fb      	ldrb	r3, [r7, #3]
 801c6aa:	4619      	mov	r1, r3
 801c6ac:	6878      	ldr	r0, [r7, #4]
 801c6ae:	f002 fbc2 	bl	801ee36 <RFW_TransmitInit>
 801c6b2:	4603      	mov	r3, r0
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d10c      	bne.n	801c6d2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c6b8:	7b7a      	ldrb	r2, [r7, #13]
 801c6ba:	4b46      	ldr	r3, [pc, #280]	; (801c7d4 <RadioSend+0x1ec>)
 801c6bc:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c6be:	4846      	ldr	r0, [pc, #280]	; (801c7d8 <RadioSend+0x1f0>)
 801c6c0:	f001 ff6c 	bl	801e59c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801c6c4:	7b7b      	ldrb	r3, [r7, #13]
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	4619      	mov	r1, r3
 801c6ca:	6878      	ldr	r0, [r7, #4]
 801c6cc:	f001 fa1c 	bl	801db08 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c6d0:	e071      	b.n	801c7b6 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801c6d2:	4b42      	ldr	r3, [pc, #264]	; (801c7dc <RadioSend+0x1f4>)
 801c6d4:	2201      	movs	r2, #1
 801c6d6:	2100      	movs	r1, #0
 801c6d8:	2002      	movs	r0, #2
 801c6da:	f003 fcf1 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801c6de:	2303      	movs	r3, #3
 801c6e0:	e073      	b.n	801c7ca <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c6e2:	4a3c      	ldr	r2, [pc, #240]	; (801c7d4 <RadioSend+0x1ec>)
 801c6e4:	78fb      	ldrb	r3, [r7, #3]
 801c6e6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c6e8:	483b      	ldr	r0, [pc, #236]	; (801c7d8 <RadioSend+0x1f0>)
 801c6ea:	f001 ff57 	bl	801e59c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801c6ee:	78fb      	ldrb	r3, [r7, #3]
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	4619      	mov	r1, r3
 801c6f4:	6878      	ldr	r0, [r7, #4]
 801c6f6:	f001 fa07 	bl	801db08 <SUBGRF_SendPayload>
            break;
 801c6fa:	e05c      	b.n	801c7b6 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c6fc:	4b35      	ldr	r3, [pc, #212]	; (801c7d4 <RadioSend+0x1ec>)
 801c6fe:	2202      	movs	r2, #2
 801c700:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c702:	4a34      	ldr	r2, [pc, #208]	; (801c7d4 <RadioSend+0x1ec>)
 801c704:	78fb      	ldrb	r3, [r7, #3]
 801c706:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c708:	4833      	ldr	r0, [pc, #204]	; (801c7d8 <RadioSend+0x1f0>)
 801c70a:	f001 ff47 	bl	801e59c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c70e:	78fb      	ldrb	r3, [r7, #3]
 801c710:	2200      	movs	r2, #0
 801c712:	4619      	mov	r1, r3
 801c714:	6878      	ldr	r0, [r7, #4]
 801c716:	f001 f9f7 	bl	801db08 <SUBGRF_SendPayload>
            break;
 801c71a:	e04c      	b.n	801c7b6 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c71c:	78fb      	ldrb	r3, [r7, #3]
 801c71e:	461a      	mov	r2, r3
 801c720:	6879      	ldr	r1, [r7, #4]
 801c722:	482f      	ldr	r0, [pc, #188]	; (801c7e0 <RadioSend+0x1f8>)
 801c724:	f000 fcca 	bl	801d0bc <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c728:	4b2a      	ldr	r3, [pc, #168]	; (801c7d4 <RadioSend+0x1ec>)
 801c72a:	2202      	movs	r2, #2
 801c72c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c72e:	78fb      	ldrb	r3, [r7, #3]
 801c730:	3301      	adds	r3, #1
 801c732:	b2da      	uxtb	r2, r3
 801c734:	4b27      	ldr	r3, [pc, #156]	; (801c7d4 <RadioSend+0x1ec>)
 801c736:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c738:	4827      	ldr	r0, [pc, #156]	; (801c7d8 <RadioSend+0x1f0>)
 801c73a:	f001 ff2f 	bl	801e59c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801c73e:	2100      	movs	r1, #0
 801c740:	20f1      	movs	r0, #241	; 0xf1
 801c742:	f000 f966 	bl	801ca12 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801c746:	2100      	movs	r1, #0
 801c748:	20f0      	movs	r0, #240	; 0xf0
 801c74a:	f000 f962 	bl	801ca12 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c74e:	4b21      	ldr	r3, [pc, #132]	; (801c7d4 <RadioSend+0x1ec>)
 801c750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c752:	2b64      	cmp	r3, #100	; 0x64
 801c754:	d108      	bne.n	801c768 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801c756:	2170      	movs	r1, #112	; 0x70
 801c758:	20f3      	movs	r0, #243	; 0xf3
 801c75a:	f000 f95a 	bl	801ca12 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801c75e:	211d      	movs	r1, #29
 801c760:	20f2      	movs	r0, #242	; 0xf2
 801c762:	f000 f956 	bl	801ca12 <RadioWrite>
 801c766:	e007      	b.n	801c778 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801c768:	21e1      	movs	r1, #225	; 0xe1
 801c76a:	20f3      	movs	r0, #243	; 0xf3
 801c76c:	f000 f951 	bl	801ca12 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801c770:	2104      	movs	r1, #4
 801c772:	20f2      	movs	r0, #242	; 0xf2
 801c774:	f000 f94d 	bl	801ca12 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c778:	78fb      	ldrb	r3, [r7, #3]
 801c77a:	b29b      	uxth	r3, r3
 801c77c:	00db      	lsls	r3, r3, #3
 801c77e:	b29b      	uxth	r3, r3
 801c780:	3302      	adds	r3, #2
 801c782:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c784:	89fb      	ldrh	r3, [r7, #14]
 801c786:	0a1b      	lsrs	r3, r3, #8
 801c788:	b29b      	uxth	r3, r3
 801c78a:	b2db      	uxtb	r3, r3
 801c78c:	4619      	mov	r1, r3
 801c78e:	20f4      	movs	r0, #244	; 0xf4
 801c790:	f000 f93f 	bl	801ca12 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801c794:	89fb      	ldrh	r3, [r7, #14]
 801c796:	b2db      	uxtb	r3, r3
 801c798:	4619      	mov	r1, r3
 801c79a:	20f5      	movs	r0, #245	; 0xf5
 801c79c:	f000 f939 	bl	801ca12 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801c7a0:	78fb      	ldrb	r3, [r7, #3]
 801c7a2:	3301      	adds	r3, #1
 801c7a4:	b2db      	uxtb	r3, r3
 801c7a6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c7aa:	4619      	mov	r1, r3
 801c7ac:	480c      	ldr	r0, [pc, #48]	; (801c7e0 <RadioSend+0x1f8>)
 801c7ae:	f001 f9ab 	bl	801db08 <SUBGRF_SendPayload>
            break;
 801c7b2:	e000      	b.n	801c7b6 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c7b4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c7b6:	4b07      	ldr	r3, [pc, #28]	; (801c7d4 <RadioSend+0x1ec>)
 801c7b8:	685b      	ldr	r3, [r3, #4]
 801c7ba:	4619      	mov	r1, r3
 801c7bc:	4809      	ldr	r0, [pc, #36]	; (801c7e4 <RadioSend+0x1fc>)
 801c7be:	f003 fae5 	bl	801fd8c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801c7c2:	4808      	ldr	r0, [pc, #32]	; (801c7e4 <RadioSend+0x1fc>)
 801c7c4:	f003 fa04 	bl	801fbd0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801c7c8:	2300      	movs	r3, #0
}
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	3710      	adds	r7, #16
 801c7ce:	46bd      	mov	sp, r7
 801c7d0:	bd80      	pop	{r7, pc}
 801c7d2:	bf00      	nop
 801c7d4:	20001dcc 	.word	0x20001dcc
 801c7d8:	20001dda 	.word	0x20001dda
 801c7dc:	080218f4 	.word	0x080218f4
 801c7e0:	20001cc8 	.word	0x20001cc8
 801c7e4:	20001e28 	.word	0x20001e28

0801c7e8 <RadioSleep>:

static void RadioSleep( void )
{
 801c7e8:	b580      	push	{r7, lr}
 801c7ea:	b082      	sub	sp, #8
 801c7ec:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c7f2:	793b      	ldrb	r3, [r7, #4]
 801c7f4:	f043 0304 	orr.w	r3, r3, #4
 801c7f8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c7fa:	7938      	ldrb	r0, [r7, #4]
 801c7fc:	f001 fa60 	bl	801dcc0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c800:	2002      	movs	r0, #2
 801c802:	f7e6 f84d 	bl	80028a0 <HAL_Delay>
}
 801c806:	bf00      	nop
 801c808:	3708      	adds	r7, #8
 801c80a:	46bd      	mov	sp, r7
 801c80c:	bd80      	pop	{r7, pc}

0801c80e <RadioStandby>:

static void RadioStandby( void )
{
 801c80e:	b580      	push	{r7, lr}
 801c810:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c812:	2000      	movs	r0, #0
 801c814:	f001 fa86 	bl	801dd24 <SUBGRF_SetStandby>
}
 801c818:	bf00      	nop
 801c81a:	bd80      	pop	{r7, pc}

0801c81c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b082      	sub	sp, #8
 801c820:	af00      	add	r7, sp, #0
 801c822:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801c824:	f002 faef 	bl	801ee06 <RFW_Is_Init>
 801c828:	4603      	mov	r3, r0
 801c82a:	2b01      	cmp	r3, #1
 801c82c:	d102      	bne.n	801c834 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801c82e:	f002 fb12 	bl	801ee56 <RFW_ReceiveInit>
 801c832:	e007      	b.n	801c844 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c834:	2300      	movs	r3, #0
 801c836:	2200      	movs	r2, #0
 801c838:	f240 2162 	movw	r1, #610	; 0x262
 801c83c:	f240 2062 	movw	r0, #610	; 0x262
 801c840:	f001 fc44 	bl	801e0cc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d006      	beq.n	801c858 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c84a:	6879      	ldr	r1, [r7, #4]
 801c84c:	4811      	ldr	r0, [pc, #68]	; (801c894 <RadioRx+0x78>)
 801c84e:	f003 fa9d 	bl	801fd8c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c852:	4810      	ldr	r0, [pc, #64]	; (801c894 <RadioRx+0x78>)
 801c854:	f003 f9bc 	bl	801fbd0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c858:	4b0f      	ldr	r3, [pc, #60]	; (801c898 <RadioRx+0x7c>)
 801c85a:	2200      	movs	r2, #0
 801c85c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c85e:	4b0e      	ldr	r3, [pc, #56]	; (801c898 <RadioRx+0x7c>)
 801c860:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c864:	2100      	movs	r1, #0
 801c866:	4618      	mov	r0, r3
 801c868:	f002 f8d4 	bl	801ea14 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c86c:	4b0a      	ldr	r3, [pc, #40]	; (801c898 <RadioRx+0x7c>)
 801c86e:	785b      	ldrb	r3, [r3, #1]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d004      	beq.n	801c87e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c874:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c878:	f001 fa90 	bl	801dd9c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c87c:	e005      	b.n	801c88a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c87e:	4b06      	ldr	r3, [pc, #24]	; (801c898 <RadioRx+0x7c>)
 801c880:	689b      	ldr	r3, [r3, #8]
 801c882:	019b      	lsls	r3, r3, #6
 801c884:	4618      	mov	r0, r3
 801c886:	f001 fa89 	bl	801dd9c <SUBGRF_SetRx>
}
 801c88a:	bf00      	nop
 801c88c:	3708      	adds	r7, #8
 801c88e:	46bd      	mov	sp, r7
 801c890:	bd80      	pop	{r7, pc}
 801c892:	bf00      	nop
 801c894:	20001e40 	.word	0x20001e40
 801c898:	20001dcc 	.word	0x20001dcc

0801c89c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b082      	sub	sp, #8
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801c8a4:	f002 faaf 	bl	801ee06 <RFW_Is_Init>
 801c8a8:	4603      	mov	r3, r0
 801c8aa:	2b01      	cmp	r3, #1
 801c8ac:	d102      	bne.n	801c8b4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801c8ae:	f002 fad2 	bl	801ee56 <RFW_ReceiveInit>
 801c8b2:	e007      	b.n	801c8c4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	f240 2162 	movw	r1, #610	; 0x262
 801c8bc:	f240 2062 	movw	r0, #610	; 0x262
 801c8c0:	f001 fc04 	bl	801e0cc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d006      	beq.n	801c8d8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c8ca:	6879      	ldr	r1, [r7, #4]
 801c8cc:	4811      	ldr	r0, [pc, #68]	; (801c914 <RadioRxBoosted+0x78>)
 801c8ce:	f003 fa5d 	bl	801fd8c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c8d2:	4810      	ldr	r0, [pc, #64]	; (801c914 <RadioRxBoosted+0x78>)
 801c8d4:	f003 f97c 	bl	801fbd0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c8d8:	4b0f      	ldr	r3, [pc, #60]	; (801c918 <RadioRxBoosted+0x7c>)
 801c8da:	2200      	movs	r2, #0
 801c8dc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c8de:	4b0e      	ldr	r3, [pc, #56]	; (801c918 <RadioRxBoosted+0x7c>)
 801c8e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c8e4:	2100      	movs	r1, #0
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f002 f894 	bl	801ea14 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c8ec:	4b0a      	ldr	r3, [pc, #40]	; (801c918 <RadioRxBoosted+0x7c>)
 801c8ee:	785b      	ldrb	r3, [r3, #1]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d004      	beq.n	801c8fe <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c8f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c8f8:	f001 fa70 	bl	801dddc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c8fc:	e005      	b.n	801c90a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c8fe:	4b06      	ldr	r3, [pc, #24]	; (801c918 <RadioRxBoosted+0x7c>)
 801c900:	689b      	ldr	r3, [r3, #8]
 801c902:	019b      	lsls	r3, r3, #6
 801c904:	4618      	mov	r0, r3
 801c906:	f001 fa69 	bl	801dddc <SUBGRF_SetRxBoosted>
}
 801c90a:	bf00      	nop
 801c90c:	3708      	adds	r7, #8
 801c90e:	46bd      	mov	sp, r7
 801c910:	bd80      	pop	{r7, pc}
 801c912:	bf00      	nop
 801c914:	20001e40 	.word	0x20001e40
 801c918:	20001dcc 	.word	0x20001dcc

0801c91c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b082      	sub	sp, #8
 801c920:	af00      	add	r7, sp, #0
 801c922:	6078      	str	r0, [r7, #4]
 801c924:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	005a      	lsls	r2, r3, #1
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	4413      	add	r3, r2
 801c92e:	4a0c      	ldr	r2, [pc, #48]	; (801c960 <RadioSetRxDutyCycle+0x44>)
 801c930:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c932:	2300      	movs	r3, #0
 801c934:	2200      	movs	r2, #0
 801c936:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c93a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c93e:	f001 fbc5 	bl	801e0cc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c942:	4b07      	ldr	r3, [pc, #28]	; (801c960 <RadioSetRxDutyCycle+0x44>)
 801c944:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c948:	2100      	movs	r1, #0
 801c94a:	4618      	mov	r0, r3
 801c94c:	f002 f862 	bl	801ea14 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c950:	6839      	ldr	r1, [r7, #0]
 801c952:	6878      	ldr	r0, [r7, #4]
 801c954:	f001 fa66 	bl	801de24 <SUBGRF_SetRxDutyCycle>
}
 801c958:	bf00      	nop
 801c95a:	3708      	adds	r7, #8
 801c95c:	46bd      	mov	sp, r7
 801c95e:	bd80      	pop	{r7, pc}
 801c960:	20001dcc 	.word	0x20001dcc

0801c964 <RadioStartCad>:

static void RadioStartCad( void )
{
 801c964:	b580      	push	{r7, lr}
 801c966:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c968:	4b09      	ldr	r3, [pc, #36]	; (801c990 <RadioStartCad+0x2c>)
 801c96a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c96e:	2100      	movs	r1, #0
 801c970:	4618      	mov	r0, r3
 801c972:	f002 f84f 	bl	801ea14 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c976:	2300      	movs	r3, #0
 801c978:	2200      	movs	r2, #0
 801c97a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c97e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c982:	f001 fba3 	bl	801e0cc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c986:	f001 fa79 	bl	801de7c <SUBGRF_SetCad>
}
 801c98a:	bf00      	nop
 801c98c:	bd80      	pop	{r7, pc}
 801c98e:	bf00      	nop
 801c990:	20001dcc 	.word	0x20001dcc

0801c994 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c994:	b580      	push	{r7, lr}
 801c996:	b084      	sub	sp, #16
 801c998:	af00      	add	r7, sp, #0
 801c99a:	6078      	str	r0, [r7, #4]
 801c99c:	460b      	mov	r3, r1
 801c99e:	70fb      	strb	r3, [r7, #3]
 801c9a0:	4613      	mov	r3, r2
 801c9a2:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801c9a4:	883b      	ldrh	r3, [r7, #0]
 801c9a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c9aa:	fb02 f303 	mul.w	r3, r2, r3
 801c9ae:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	f001 fbe7 	bl	801e184 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c9b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	f002 f852 	bl	801ea64 <SUBGRF_SetRfTxPower>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c9c4:	210e      	movs	r1, #14
 801c9c6:	f640 101f 	movw	r0, #2335	; 0x91f
 801c9ca:	f001 ff2f 	bl	801e82c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801c9ce:	7afb      	ldrb	r3, [r7, #11]
 801c9d0:	2101      	movs	r1, #1
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f002 f81e 	bl	801ea14 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c9d8:	f001 fa5e 	bl	801de98 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c9dc:	68f9      	ldr	r1, [r7, #12]
 801c9de:	4805      	ldr	r0, [pc, #20]	; (801c9f4 <RadioSetTxContinuousWave+0x60>)
 801c9e0:	f003 f9d4 	bl	801fd8c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c9e4:	4803      	ldr	r0, [pc, #12]	; (801c9f4 <RadioSetTxContinuousWave+0x60>)
 801c9e6:	f003 f8f3 	bl	801fbd0 <UTIL_TIMER_Start>
}
 801c9ea:	bf00      	nop
 801c9ec:	3710      	adds	r7, #16
 801c9ee:	46bd      	mov	sp, r7
 801c9f0:	bd80      	pop	{r7, pc}
 801c9f2:	bf00      	nop
 801c9f4:	20001e28 	.word	0x20001e28

0801c9f8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b082      	sub	sp, #8
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	4603      	mov	r3, r0
 801ca00:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801ca02:	f001 fe80 	bl	801e706 <SUBGRF_GetRssiInst>
 801ca06:	4603      	mov	r3, r0
 801ca08:	b21b      	sxth	r3, r3
}
 801ca0a:	4618      	mov	r0, r3
 801ca0c:	3708      	adds	r7, #8
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	bd80      	pop	{r7, pc}

0801ca12 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801ca12:	b580      	push	{r7, lr}
 801ca14:	b082      	sub	sp, #8
 801ca16:	af00      	add	r7, sp, #0
 801ca18:	4603      	mov	r3, r0
 801ca1a:	460a      	mov	r2, r1
 801ca1c:	80fb      	strh	r3, [r7, #6]
 801ca1e:	4613      	mov	r3, r2
 801ca20:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801ca22:	797a      	ldrb	r2, [r7, #5]
 801ca24:	88fb      	ldrh	r3, [r7, #6]
 801ca26:	4611      	mov	r1, r2
 801ca28:	4618      	mov	r0, r3
 801ca2a:	f001 feff 	bl	801e82c <SUBGRF_WriteRegister>
}
 801ca2e:	bf00      	nop
 801ca30:	3708      	adds	r7, #8
 801ca32:	46bd      	mov	sp, r7
 801ca34:	bd80      	pop	{r7, pc}

0801ca36 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801ca36:	b580      	push	{r7, lr}
 801ca38:	b082      	sub	sp, #8
 801ca3a:	af00      	add	r7, sp, #0
 801ca3c:	4603      	mov	r3, r0
 801ca3e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801ca40:	88fb      	ldrh	r3, [r7, #6]
 801ca42:	4618      	mov	r0, r3
 801ca44:	f001 ff06 	bl	801e854 <SUBGRF_ReadRegister>
 801ca48:	4603      	mov	r3, r0
}
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	3708      	adds	r7, #8
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	bd80      	pop	{r7, pc}

0801ca52 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801ca52:	b580      	push	{r7, lr}
 801ca54:	b082      	sub	sp, #8
 801ca56:	af00      	add	r7, sp, #0
 801ca58:	4603      	mov	r3, r0
 801ca5a:	6039      	str	r1, [r7, #0]
 801ca5c:	80fb      	strh	r3, [r7, #6]
 801ca5e:	4613      	mov	r3, r2
 801ca60:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801ca62:	797b      	ldrb	r3, [r7, #5]
 801ca64:	b29a      	uxth	r2, r3
 801ca66:	88fb      	ldrh	r3, [r7, #6]
 801ca68:	6839      	ldr	r1, [r7, #0]
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	f001 ff06 	bl	801e87c <SUBGRF_WriteRegisters>
}
 801ca70:	bf00      	nop
 801ca72:	3708      	adds	r7, #8
 801ca74:	46bd      	mov	sp, r7
 801ca76:	bd80      	pop	{r7, pc}

0801ca78 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801ca78:	b580      	push	{r7, lr}
 801ca7a:	b082      	sub	sp, #8
 801ca7c:	af00      	add	r7, sp, #0
 801ca7e:	4603      	mov	r3, r0
 801ca80:	6039      	str	r1, [r7, #0]
 801ca82:	80fb      	strh	r3, [r7, #6]
 801ca84:	4613      	mov	r3, r2
 801ca86:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801ca88:	797b      	ldrb	r3, [r7, #5]
 801ca8a:	b29a      	uxth	r2, r3
 801ca8c:	88fb      	ldrh	r3, [r7, #6]
 801ca8e:	6839      	ldr	r1, [r7, #0]
 801ca90:	4618      	mov	r0, r3
 801ca92:	f001 ff15 	bl	801e8c0 <SUBGRF_ReadRegisters>
}
 801ca96:	bf00      	nop
 801ca98:	3708      	adds	r7, #8
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	bd80      	pop	{r7, pc}
	...

0801caa0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b082      	sub	sp, #8
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	4603      	mov	r3, r0
 801caa8:	460a      	mov	r2, r1
 801caaa:	71fb      	strb	r3, [r7, #7]
 801caac:	4613      	mov	r3, r2
 801caae:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801cab0:	79fb      	ldrb	r3, [r7, #7]
 801cab2:	2b01      	cmp	r3, #1
 801cab4:	d10a      	bne.n	801cacc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801cab6:	4a0e      	ldr	r2, [pc, #56]	; (801caf0 <RadioSetMaxPayloadLength+0x50>)
 801cab8:	79bb      	ldrb	r3, [r7, #6]
 801caba:	7013      	strb	r3, [r2, #0]
 801cabc:	4b0c      	ldr	r3, [pc, #48]	; (801caf0 <RadioSetMaxPayloadLength+0x50>)
 801cabe:	781a      	ldrb	r2, [r3, #0]
 801cac0:	4b0c      	ldr	r3, [pc, #48]	; (801caf4 <RadioSetMaxPayloadLength+0x54>)
 801cac2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cac4:	480c      	ldr	r0, [pc, #48]	; (801caf8 <RadioSetMaxPayloadLength+0x58>)
 801cac6:	f001 fd69 	bl	801e59c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801caca:	e00d      	b.n	801cae8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801cacc:	4b09      	ldr	r3, [pc, #36]	; (801caf4 <RadioSetMaxPayloadLength+0x54>)
 801cace:	7d5b      	ldrb	r3, [r3, #21]
 801cad0:	2b01      	cmp	r3, #1
 801cad2:	d109      	bne.n	801cae8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801cad4:	4a06      	ldr	r2, [pc, #24]	; (801caf0 <RadioSetMaxPayloadLength+0x50>)
 801cad6:	79bb      	ldrb	r3, [r7, #6]
 801cad8:	7013      	strb	r3, [r2, #0]
 801cada:	4b05      	ldr	r3, [pc, #20]	; (801caf0 <RadioSetMaxPayloadLength+0x50>)
 801cadc:	781a      	ldrb	r2, [r3, #0]
 801cade:	4b05      	ldr	r3, [pc, #20]	; (801caf4 <RadioSetMaxPayloadLength+0x54>)
 801cae0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cae2:	4805      	ldr	r0, [pc, #20]	; (801caf8 <RadioSetMaxPayloadLength+0x58>)
 801cae4:	f001 fd5a 	bl	801e59c <SUBGRF_SetPacketParams>
}
 801cae8:	bf00      	nop
 801caea:	3708      	adds	r7, #8
 801caec:	46bd      	mov	sp, r7
 801caee:	bd80      	pop	{r7, pc}
 801caf0:	20000134 	.word	0x20000134
 801caf4:	20001dcc 	.word	0x20001dcc
 801caf8:	20001dda 	.word	0x20001dda

0801cafc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801cafc:	b580      	push	{r7, lr}
 801cafe:	b082      	sub	sp, #8
 801cb00:	af00      	add	r7, sp, #0
 801cb02:	4603      	mov	r3, r0
 801cb04:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801cb06:	4a13      	ldr	r2, [pc, #76]	; (801cb54 <RadioSetPublicNetwork+0x58>)
 801cb08:	79fb      	ldrb	r3, [r7, #7]
 801cb0a:	7313      	strb	r3, [r2, #12]
 801cb0c:	4b11      	ldr	r3, [pc, #68]	; (801cb54 <RadioSetPublicNetwork+0x58>)
 801cb0e:	7b1a      	ldrb	r2, [r3, #12]
 801cb10:	4b10      	ldr	r3, [pc, #64]	; (801cb54 <RadioSetPublicNetwork+0x58>)
 801cb12:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801cb14:	2001      	movs	r0, #1
 801cb16:	f7ff f811 	bl	801bb3c <RadioSetModem>
    if( enable == true )
 801cb1a:	79fb      	ldrb	r3, [r7, #7]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d00a      	beq.n	801cb36 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801cb20:	2134      	movs	r1, #52	; 0x34
 801cb22:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801cb26:	f001 fe81 	bl	801e82c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801cb2a:	2144      	movs	r1, #68	; 0x44
 801cb2c:	f240 7041 	movw	r0, #1857	; 0x741
 801cb30:	f001 fe7c 	bl	801e82c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801cb34:	e009      	b.n	801cb4a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801cb36:	2114      	movs	r1, #20
 801cb38:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801cb3c:	f001 fe76 	bl	801e82c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801cb40:	2124      	movs	r1, #36	; 0x24
 801cb42:	f240 7041 	movw	r0, #1857	; 0x741
 801cb46:	f001 fe71 	bl	801e82c <SUBGRF_WriteRegister>
}
 801cb4a:	bf00      	nop
 801cb4c:	3708      	adds	r7, #8
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	bd80      	pop	{r7, pc}
 801cb52:	bf00      	nop
 801cb54:	20001dcc 	.word	0x20001dcc

0801cb58 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801cb58:	b580      	push	{r7, lr}
 801cb5a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801cb5c:	f001 ffb6 	bl	801eacc <SUBGRF_GetRadioWakeUpTime>
 801cb60:	4603      	mov	r3, r0
 801cb62:	3303      	adds	r3, #3
}
 801cb64:	4618      	mov	r0, r3
 801cb66:	bd80      	pop	{r7, pc}

0801cb68 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b082      	sub	sp, #8
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801cb70:	f000 f80e 	bl	801cb90 <RadioOnTxTimeoutProcess>
}
 801cb74:	bf00      	nop
 801cb76:	3708      	adds	r7, #8
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd80      	pop	{r7, pc}

0801cb7c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b082      	sub	sp, #8
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801cb84:	f000 f818 	bl	801cbb8 <RadioOnRxTimeoutProcess>
}
 801cb88:	bf00      	nop
 801cb8a:	3708      	adds	r7, #8
 801cb8c:	46bd      	mov	sp, r7
 801cb8e:	bd80      	pop	{r7, pc}

0801cb90 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801cb90:	b580      	push	{r7, lr}
 801cb92:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801cb94:	4b07      	ldr	r3, [pc, #28]	; (801cbb4 <RadioOnTxTimeoutProcess+0x24>)
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d008      	beq.n	801cbae <RadioOnTxTimeoutProcess+0x1e>
 801cb9c:	4b05      	ldr	r3, [pc, #20]	; (801cbb4 <RadioOnTxTimeoutProcess+0x24>)
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	685b      	ldr	r3, [r3, #4]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d003      	beq.n	801cbae <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801cba6:	4b03      	ldr	r3, [pc, #12]	; (801cbb4 <RadioOnTxTimeoutProcess+0x24>)
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	685b      	ldr	r3, [r3, #4]
 801cbac:	4798      	blx	r3
    }
}
 801cbae:	bf00      	nop
 801cbb0:	bd80      	pop	{r7, pc}
 801cbb2:	bf00      	nop
 801cbb4:	20001dc8 	.word	0x20001dc8

0801cbb8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cbbc:	4b07      	ldr	r3, [pc, #28]	; (801cbdc <RadioOnRxTimeoutProcess+0x24>)
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d008      	beq.n	801cbd6 <RadioOnRxTimeoutProcess+0x1e>
 801cbc4:	4b05      	ldr	r3, [pc, #20]	; (801cbdc <RadioOnRxTimeoutProcess+0x24>)
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	68db      	ldr	r3, [r3, #12]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d003      	beq.n	801cbd6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801cbce:	4b03      	ldr	r3, [pc, #12]	; (801cbdc <RadioOnRxTimeoutProcess+0x24>)
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	68db      	ldr	r3, [r3, #12]
 801cbd4:	4798      	blx	r3
    }
}
 801cbd6:	bf00      	nop
 801cbd8:	bd80      	pop	{r7, pc}
 801cbda:	bf00      	nop
 801cbdc:	20001dc8 	.word	0x20001dc8

0801cbe0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b082      	sub	sp, #8
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	4603      	mov	r3, r0
 801cbe8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801cbea:	4a05      	ldr	r2, [pc, #20]	; (801cc00 <RadioOnDioIrq+0x20>)
 801cbec:	88fb      	ldrh	r3, [r7, #6]
 801cbee:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801cbf2:	f000 f807 	bl	801cc04 <RadioIrqProcess>
}
 801cbf6:	bf00      	nop
 801cbf8:	3708      	adds	r7, #8
 801cbfa:	46bd      	mov	sp, r7
 801cbfc:	bd80      	pop	{r7, pc}
 801cbfe:	bf00      	nop
 801cc00:	20001dcc 	.word	0x20001dcc

0801cc04 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801cc04:	b590      	push	{r4, r7, lr}
 801cc06:	b083      	sub	sp, #12
 801cc08:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801cc0e:	2300      	movs	r3, #0
 801cc10:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801cc12:	4ba8      	ldr	r3, [pc, #672]	; (801ceb4 <RadioIrqProcess+0x2b0>)
 801cc14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801cc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cc1c:	f000 810c 	beq.w	801ce38 <RadioIrqProcess+0x234>
 801cc20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cc24:	f300 81e8 	bgt.w	801cff8 <RadioIrqProcess+0x3f4>
 801cc28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cc2c:	f000 80f0 	beq.w	801ce10 <RadioIrqProcess+0x20c>
 801cc30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cc34:	f300 81e0 	bgt.w	801cff8 <RadioIrqProcess+0x3f4>
 801cc38:	2b80      	cmp	r3, #128	; 0x80
 801cc3a:	f000 80d5 	beq.w	801cde8 <RadioIrqProcess+0x1e4>
 801cc3e:	2b80      	cmp	r3, #128	; 0x80
 801cc40:	f300 81da 	bgt.w	801cff8 <RadioIrqProcess+0x3f4>
 801cc44:	2b20      	cmp	r3, #32
 801cc46:	dc49      	bgt.n	801ccdc <RadioIrqProcess+0xd8>
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	f340 81d5 	ble.w	801cff8 <RadioIrqProcess+0x3f4>
 801cc4e:	3b01      	subs	r3, #1
 801cc50:	2b1f      	cmp	r3, #31
 801cc52:	f200 81d1 	bhi.w	801cff8 <RadioIrqProcess+0x3f4>
 801cc56:	a201      	add	r2, pc, #4	; (adr r2, 801cc5c <RadioIrqProcess+0x58>)
 801cc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc5c:	0801cce5 	.word	0x0801cce5
 801cc60:	0801cd1f 	.word	0x0801cd1f
 801cc64:	0801cff9 	.word	0x0801cff9
 801cc68:	0801ced5 	.word	0x0801ced5
 801cc6c:	0801cff9 	.word	0x0801cff9
 801cc70:	0801cff9 	.word	0x0801cff9
 801cc74:	0801cff9 	.word	0x0801cff9
 801cc78:	0801cf51 	.word	0x0801cf51
 801cc7c:	0801cff9 	.word	0x0801cff9
 801cc80:	0801cff9 	.word	0x0801cff9
 801cc84:	0801cff9 	.word	0x0801cff9
 801cc88:	0801cff9 	.word	0x0801cff9
 801cc8c:	0801cff9 	.word	0x0801cff9
 801cc90:	0801cff9 	.word	0x0801cff9
 801cc94:	0801cff9 	.word	0x0801cff9
 801cc98:	0801cf6d 	.word	0x0801cf6d
 801cc9c:	0801cff9 	.word	0x0801cff9
 801cca0:	0801cff9 	.word	0x0801cff9
 801cca4:	0801cff9 	.word	0x0801cff9
 801cca8:	0801cff9 	.word	0x0801cff9
 801ccac:	0801cff9 	.word	0x0801cff9
 801ccb0:	0801cff9 	.word	0x0801cff9
 801ccb4:	0801cff9 	.word	0x0801cff9
 801ccb8:	0801cff9 	.word	0x0801cff9
 801ccbc:	0801cff9 	.word	0x0801cff9
 801ccc0:	0801cff9 	.word	0x0801cff9
 801ccc4:	0801cff9 	.word	0x0801cff9
 801ccc8:	0801cff9 	.word	0x0801cff9
 801cccc:	0801cff9 	.word	0x0801cff9
 801ccd0:	0801cff9 	.word	0x0801cff9
 801ccd4:	0801cff9 	.word	0x0801cff9
 801ccd8:	0801cf7b 	.word	0x0801cf7b
 801ccdc:	2b40      	cmp	r3, #64	; 0x40
 801ccde:	f000 816d 	beq.w	801cfbc <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801cce2:	e189      	b.n	801cff8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801cce4:	4874      	ldr	r0, [pc, #464]	; (801ceb8 <RadioIrqProcess+0x2b4>)
 801cce6:	f002 ffe1 	bl	801fcac <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801ccea:	2000      	movs	r0, #0
 801ccec:	f001 f81a 	bl	801dd24 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801ccf0:	f002 f890 	bl	801ee14 <RFW_Is_LongPacketModeEnabled>
 801ccf4:	4603      	mov	r3, r0
 801ccf6:	2b01      	cmp	r3, #1
 801ccf8:	d101      	bne.n	801ccfe <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801ccfa:	f002 f8b4 	bl	801ee66 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801ccfe:	4b6f      	ldr	r3, [pc, #444]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	f000 817a 	beq.w	801cffc <RadioIrqProcess+0x3f8>
 801cd08:	4b6c      	ldr	r3, [pc, #432]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	f000 8174 	beq.w	801cffc <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801cd14:	4b69      	ldr	r3, [pc, #420]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	4798      	blx	r3
        break;
 801cd1c:	e16e      	b.n	801cffc <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801cd1e:	4868      	ldr	r0, [pc, #416]	; (801cec0 <RadioIrqProcess+0x2bc>)
 801cd20:	f002 ffc4 	bl	801fcac <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cd24:	4b63      	ldr	r3, [pc, #396]	; (801ceb4 <RadioIrqProcess+0x2b0>)
 801cd26:	785b      	ldrb	r3, [r3, #1]
 801cd28:	f083 0301 	eor.w	r3, r3, #1
 801cd2c:	b2db      	uxtb	r3, r3
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d014      	beq.n	801cd5c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801cd32:	2000      	movs	r0, #0
 801cd34:	f000 fff6 	bl	801dd24 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801cd38:	2100      	movs	r1, #0
 801cd3a:	f640 1002 	movw	r0, #2306	; 0x902
 801cd3e:	f001 fd75 	bl	801e82c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801cd42:	f640 1044 	movw	r0, #2372	; 0x944
 801cd46:	f001 fd85 	bl	801e854 <SUBGRF_ReadRegister>
 801cd4a:	4603      	mov	r3, r0
 801cd4c:	f043 0302 	orr.w	r3, r3, #2
 801cd50:	b2db      	uxtb	r3, r3
 801cd52:	4619      	mov	r1, r3
 801cd54:	f640 1044 	movw	r0, #2372	; 0x944
 801cd58:	f001 fd68 	bl	801e82c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801cd5c:	1dfb      	adds	r3, r7, #7
 801cd5e:	22ff      	movs	r2, #255	; 0xff
 801cd60:	4619      	mov	r1, r3
 801cd62:	4858      	ldr	r0, [pc, #352]	; (801cec4 <RadioIrqProcess+0x2c0>)
 801cd64:	f000 feae 	bl	801dac4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801cd68:	4857      	ldr	r0, [pc, #348]	; (801cec8 <RadioIrqProcess+0x2c4>)
 801cd6a:	f001 fd0d 	bl	801e788 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801cd6e:	4b53      	ldr	r3, [pc, #332]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d036      	beq.n	801cde4 <RadioIrqProcess+0x1e0>
 801cd76:	4b51      	ldr	r3, [pc, #324]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	689b      	ldr	r3, [r3, #8]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d031      	beq.n	801cde4 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801cd80:	4b4c      	ldr	r3, [pc, #304]	; (801ceb4 <RadioIrqProcess+0x2b0>)
 801cd82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cd86:	2b01      	cmp	r3, #1
 801cd88:	d10e      	bne.n	801cda8 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801cd8a:	4b4c      	ldr	r3, [pc, #304]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	689c      	ldr	r4, [r3, #8]
 801cd90:	79fb      	ldrb	r3, [r7, #7]
 801cd92:	b299      	uxth	r1, r3
 801cd94:	4b47      	ldr	r3, [pc, #284]	; (801ceb4 <RadioIrqProcess+0x2b0>)
 801cd96:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801cd9a:	b21a      	sxth	r2, r3
 801cd9c:	4b45      	ldr	r3, [pc, #276]	; (801ceb4 <RadioIrqProcess+0x2b0>)
 801cd9e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801cda2:	4848      	ldr	r0, [pc, #288]	; (801cec4 <RadioIrqProcess+0x2c0>)
 801cda4:	47a0      	blx	r4
                break;
 801cda6:	e01e      	b.n	801cde6 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801cda8:	4b42      	ldr	r3, [pc, #264]	; (801ceb4 <RadioIrqProcess+0x2b0>)
 801cdaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdac:	463a      	mov	r2, r7
 801cdae:	4611      	mov	r1, r2
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f001 ff7d 	bl	801ecb0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801cdb6:	4b41      	ldr	r3, [pc, #260]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	689c      	ldr	r4, [r3, #8]
 801cdbc:	79fb      	ldrb	r3, [r7, #7]
 801cdbe:	b299      	uxth	r1, r3
 801cdc0:	4b3c      	ldr	r3, [pc, #240]	; (801ceb4 <RadioIrqProcess+0x2b0>)
 801cdc2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801cdc6:	b218      	sxth	r0, r3
 801cdc8:	683b      	ldr	r3, [r7, #0]
 801cdca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801cdce:	4a3f      	ldr	r2, [pc, #252]	; (801cecc <RadioIrqProcess+0x2c8>)
 801cdd0:	fb82 c203 	smull	ip, r2, r2, r3
 801cdd4:	1192      	asrs	r2, r2, #6
 801cdd6:	17db      	asrs	r3, r3, #31
 801cdd8:	1ad3      	subs	r3, r2, r3
 801cdda:	b25b      	sxtb	r3, r3
 801cddc:	4602      	mov	r2, r0
 801cdde:	4839      	ldr	r0, [pc, #228]	; (801cec4 <RadioIrqProcess+0x2c0>)
 801cde0:	47a0      	blx	r4
                break;
 801cde2:	e000      	b.n	801cde6 <RadioIrqProcess+0x1e2>
        }
 801cde4:	bf00      	nop
        break;
 801cde6:	e118      	b.n	801d01a <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801cde8:	2000      	movs	r0, #0
 801cdea:	f000 ff9b 	bl	801dd24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801cdee:	4b33      	ldr	r3, [pc, #204]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	f000 8104 	beq.w	801d000 <RadioIrqProcess+0x3fc>
 801cdf8:	4b30      	ldr	r3, [pc, #192]	; (801cebc <RadioIrqProcess+0x2b8>)
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	699b      	ldr	r3, [r3, #24]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	f000 80fe 	beq.w	801d000 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801ce04:	4b2d      	ldr	r3, [pc, #180]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	699b      	ldr	r3, [r3, #24]
 801ce0a:	2000      	movs	r0, #0
 801ce0c:	4798      	blx	r3
        break;
 801ce0e:	e0f7      	b.n	801d000 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801ce10:	2000      	movs	r0, #0
 801ce12:	f000 ff87 	bl	801dd24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ce16:	4b29      	ldr	r3, [pc, #164]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	f000 80f2 	beq.w	801d004 <RadioIrqProcess+0x400>
 801ce20:	4b26      	ldr	r3, [pc, #152]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	699b      	ldr	r3, [r3, #24]
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	f000 80ec 	beq.w	801d004 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801ce2c:	4b23      	ldr	r3, [pc, #140]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	699b      	ldr	r3, [r3, #24]
 801ce32:	2001      	movs	r0, #1
 801ce34:	4798      	blx	r3
        break;
 801ce36:	e0e5      	b.n	801d004 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801ce38:	4b25      	ldr	r3, [pc, #148]	; (801ced0 <RadioIrqProcess+0x2cc>)
 801ce3a:	2201      	movs	r2, #1
 801ce3c:	2100      	movs	r1, #0
 801ce3e:	2002      	movs	r0, #2
 801ce40:	f003 f93e 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801ce44:	f000 fe24 	bl	801da90 <SUBGRF_GetOperatingMode>
 801ce48:	4603      	mov	r3, r0
 801ce4a:	2b04      	cmp	r3, #4
 801ce4c:	d115      	bne.n	801ce7a <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801ce4e:	481a      	ldr	r0, [pc, #104]	; (801ceb8 <RadioIrqProcess+0x2b4>)
 801ce50:	f002 ff2c 	bl	801fcac <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ce54:	2000      	movs	r0, #0
 801ce56:	f000 ff65 	bl	801dd24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ce5a:	4b18      	ldr	r3, [pc, #96]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	f000 80d2 	beq.w	801d008 <RadioIrqProcess+0x404>
 801ce64:	4b15      	ldr	r3, [pc, #84]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	685b      	ldr	r3, [r3, #4]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	f000 80cc 	beq.w	801d008 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801ce70:	4b12      	ldr	r3, [pc, #72]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	685b      	ldr	r3, [r3, #4]
 801ce76:	4798      	blx	r3
        break;
 801ce78:	e0c6      	b.n	801d008 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801ce7a:	f000 fe09 	bl	801da90 <SUBGRF_GetOperatingMode>
 801ce7e:	4603      	mov	r3, r0
 801ce80:	2b05      	cmp	r3, #5
 801ce82:	f040 80c1 	bne.w	801d008 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801ce86:	480e      	ldr	r0, [pc, #56]	; (801cec0 <RadioIrqProcess+0x2bc>)
 801ce88:	f002 ff10 	bl	801fcac <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ce8c:	2000      	movs	r0, #0
 801ce8e:	f000 ff49 	bl	801dd24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ce92:	4b0a      	ldr	r3, [pc, #40]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	f000 80b6 	beq.w	801d008 <RadioIrqProcess+0x404>
 801ce9c:	4b07      	ldr	r3, [pc, #28]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	68db      	ldr	r3, [r3, #12]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	f000 80b0 	beq.w	801d008 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801cea8:	4b04      	ldr	r3, [pc, #16]	; (801cebc <RadioIrqProcess+0x2b8>)
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	68db      	ldr	r3, [r3, #12]
 801ceae:	4798      	blx	r3
        break;
 801ceb0:	e0aa      	b.n	801d008 <RadioIrqProcess+0x404>
 801ceb2:	bf00      	nop
 801ceb4:	20001dcc 	.word	0x20001dcc
 801ceb8:	20001e28 	.word	0x20001e28
 801cebc:	20001dc8 	.word	0x20001dc8
 801cec0:	20001e40 	.word	0x20001e40
 801cec4:	20001cc8 	.word	0x20001cc8
 801cec8:	20001df0 	.word	0x20001df0
 801cecc:	10624dd3 	.word	0x10624dd3
 801ced0:	0802190c 	.word	0x0802190c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801ced4:	4b53      	ldr	r3, [pc, #332]	; (801d024 <RadioIrqProcess+0x420>)
 801ced6:	2201      	movs	r2, #1
 801ced8:	2100      	movs	r1, #0
 801ceda:	2002      	movs	r0, #2
 801cedc:	f003 f8f0 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801cee0:	4b51      	ldr	r3, [pc, #324]	; (801d028 <RadioIrqProcess+0x424>)
 801cee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	f000 8091 	beq.w	801d00c <RadioIrqProcess+0x408>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801ceea:	4a50      	ldr	r2, [pc, #320]	; (801d02c <RadioIrqProcess+0x428>)
 801ceec:	4b4e      	ldr	r3, [pc, #312]	; (801d028 <RadioIrqProcess+0x424>)
 801ceee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cef0:	0c1b      	lsrs	r3, r3, #16
 801cef2:	b2db      	uxtb	r3, r3
 801cef4:	4619      	mov	r1, r3
 801cef6:	f640 1003 	movw	r0, #2307	; 0x903
 801cefa:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801cefc:	4a4b      	ldr	r2, [pc, #300]	; (801d02c <RadioIrqProcess+0x428>)
 801cefe:	4b4a      	ldr	r3, [pc, #296]	; (801d028 <RadioIrqProcess+0x424>)
 801cf00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cf02:	0a1b      	lsrs	r3, r3, #8
 801cf04:	b2db      	uxtb	r3, r3
 801cf06:	4619      	mov	r1, r3
 801cf08:	f640 1004 	movw	r0, #2308	; 0x904
 801cf0c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801cf0e:	4a47      	ldr	r2, [pc, #284]	; (801d02c <RadioIrqProcess+0x428>)
 801cf10:	4b45      	ldr	r3, [pc, #276]	; (801d028 <RadioIrqProcess+0x424>)
 801cf12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cf14:	b2db      	uxtb	r3, r3
 801cf16:	4619      	mov	r1, r3
 801cf18:	f640 1005 	movw	r0, #2309	; 0x905
 801cf1c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801cf1e:	4c43      	ldr	r4, [pc, #268]	; (801d02c <RadioIrqProcess+0x428>)
 801cf20:	4b43      	ldr	r3, [pc, #268]	; (801d030 <RadioIrqProcess+0x42c>)
 801cf22:	f640 1002 	movw	r0, #2306	; 0x902
 801cf26:	4798      	blx	r3
 801cf28:	4603      	mov	r3, r0
 801cf2a:	f043 0301 	orr.w	r3, r3, #1
 801cf2e:	b2db      	uxtb	r3, r3
 801cf30:	4619      	mov	r1, r3
 801cf32:	f640 1002 	movw	r0, #2306	; 0x902
 801cf36:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801cf38:	4b3b      	ldr	r3, [pc, #236]	; (801d028 <RadioIrqProcess+0x424>)
 801cf3a:	2200      	movs	r2, #0
 801cf3c:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801cf3e:	2300      	movs	r3, #0
 801cf40:	2200      	movs	r2, #0
 801cf42:	f240 2162 	movw	r1, #610	; 0x262
 801cf46:	f240 2062 	movw	r0, #610	; 0x262
 801cf4a:	f001 f8bf 	bl	801e0cc <SUBGRF_SetDioIrqParams>
        break;
 801cf4e:	e05d      	b.n	801d00c <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801cf50:	4b38      	ldr	r3, [pc, #224]	; (801d034 <RadioIrqProcess+0x430>)
 801cf52:	2201      	movs	r2, #1
 801cf54:	2100      	movs	r1, #0
 801cf56:	2002      	movs	r0, #2
 801cf58:	f003 f8b2 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801cf5c:	f001 ff53 	bl	801ee06 <RFW_Is_Init>
 801cf60:	4603      	mov	r3, r0
 801cf62:	2b01      	cmp	r3, #1
 801cf64:	d154      	bne.n	801d010 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801cf66:	f001 ff84 	bl	801ee72 <RFW_ReceivePayload>
        break;
 801cf6a:	e051      	b.n	801d010 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801cf6c:	4b32      	ldr	r3, [pc, #200]	; (801d038 <RadioIrqProcess+0x434>)
 801cf6e:	2201      	movs	r2, #1
 801cf70:	2100      	movs	r1, #0
 801cf72:	2002      	movs	r0, #2
 801cf74:	f003 f8a4 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cf78:	e04f      	b.n	801d01a <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801cf7a:	4830      	ldr	r0, [pc, #192]	; (801d03c <RadioIrqProcess+0x438>)
 801cf7c:	f002 fe96 	bl	801fcac <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cf80:	4b29      	ldr	r3, [pc, #164]	; (801d028 <RadioIrqProcess+0x424>)
 801cf82:	785b      	ldrb	r3, [r3, #1]
 801cf84:	f083 0301 	eor.w	r3, r3, #1
 801cf88:	b2db      	uxtb	r3, r3
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d002      	beq.n	801cf94 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801cf8e:	2000      	movs	r0, #0
 801cf90:	f000 fec8 	bl	801dd24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cf94:	4b2a      	ldr	r3, [pc, #168]	; (801d040 <RadioIrqProcess+0x43c>)
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d03b      	beq.n	801d014 <RadioIrqProcess+0x410>
 801cf9c:	4b28      	ldr	r3, [pc, #160]	; (801d040 <RadioIrqProcess+0x43c>)
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	68db      	ldr	r3, [r3, #12]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d036      	beq.n	801d014 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801cfa6:	4b26      	ldr	r3, [pc, #152]	; (801d040 <RadioIrqProcess+0x43c>)
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	68db      	ldr	r3, [r3, #12]
 801cfac:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801cfae:	4b25      	ldr	r3, [pc, #148]	; (801d044 <RadioIrqProcess+0x440>)
 801cfb0:	2201      	movs	r2, #1
 801cfb2:	2100      	movs	r1, #0
 801cfb4:	2002      	movs	r0, #2
 801cfb6:	f003 f883 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cfba:	e02b      	b.n	801d014 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801cfbc:	4b22      	ldr	r3, [pc, #136]	; (801d048 <RadioIrqProcess+0x444>)
 801cfbe:	2201      	movs	r2, #1
 801cfc0:	2100      	movs	r1, #0
 801cfc2:	2002      	movs	r0, #2
 801cfc4:	f003 f87c 	bl	80200c0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801cfc8:	4b17      	ldr	r3, [pc, #92]	; (801d028 <RadioIrqProcess+0x424>)
 801cfca:	785b      	ldrb	r3, [r3, #1]
 801cfcc:	f083 0301 	eor.w	r3, r3, #1
 801cfd0:	b2db      	uxtb	r3, r3
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d002      	beq.n	801cfdc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801cfd6:	2000      	movs	r0, #0
 801cfd8:	f000 fea4 	bl	801dd24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801cfdc:	4b18      	ldr	r3, [pc, #96]	; (801d040 <RadioIrqProcess+0x43c>)
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d019      	beq.n	801d018 <RadioIrqProcess+0x414>
 801cfe4:	4b16      	ldr	r3, [pc, #88]	; (801d040 <RadioIrqProcess+0x43c>)
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	691b      	ldr	r3, [r3, #16]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d014      	beq.n	801d018 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801cfee:	4b14      	ldr	r3, [pc, #80]	; (801d040 <RadioIrqProcess+0x43c>)
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	691b      	ldr	r3, [r3, #16]
 801cff4:	4798      	blx	r3
        break;
 801cff6:	e00f      	b.n	801d018 <RadioIrqProcess+0x414>
        break;
 801cff8:	bf00      	nop
 801cffa:	e00e      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801cffc:	bf00      	nop
 801cffe:	e00c      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801d000:	bf00      	nop
 801d002:	e00a      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801d004:	bf00      	nop
 801d006:	e008      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801d008:	bf00      	nop
 801d00a:	e006      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801d00c:	bf00      	nop
 801d00e:	e004      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801d010:	bf00      	nop
 801d012:	e002      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801d014:	bf00      	nop
 801d016:	e000      	b.n	801d01a <RadioIrqProcess+0x416>
        break;
 801d018:	bf00      	nop
    }
}
 801d01a:	bf00      	nop
 801d01c:	370c      	adds	r7, #12
 801d01e:	46bd      	mov	sp, r7
 801d020:	bd90      	pop	{r4, r7, pc}
 801d022:	bf00      	nop
 801d024:	08021920 	.word	0x08021920
 801d028:	20001dcc 	.word	0x20001dcc
 801d02c:	0801ca13 	.word	0x0801ca13
 801d030:	0801ca37 	.word	0x0801ca37
 801d034:	0802192c 	.word	0x0802192c
 801d038:	08021938 	.word	0x08021938
 801d03c:	20001e40 	.word	0x20001e40
 801d040:	20001dc8 	.word	0x20001dc8
 801d044:	08021944 	.word	0x08021944
 801d048:	08021950 	.word	0x08021950

0801d04c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801d050:	4b09      	ldr	r3, [pc, #36]	; (801d078 <RadioTxPrbs+0x2c>)
 801d052:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d056:	2101      	movs	r1, #1
 801d058:	4618      	mov	r0, r3
 801d05a:	f001 fcdb 	bl	801ea14 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801d05e:	4b07      	ldr	r3, [pc, #28]	; (801d07c <RadioTxPrbs+0x30>)
 801d060:	212d      	movs	r1, #45	; 0x2d
 801d062:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d066:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801d068:	f000 ff1f 	bl	801deaa <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801d06c:	4804      	ldr	r0, [pc, #16]	; (801d080 <RadioTxPrbs+0x34>)
 801d06e:	f000 fe75 	bl	801dd5c <SUBGRF_SetTx>
}
 801d072:	bf00      	nop
 801d074:	bd80      	pop	{r7, pc}
 801d076:	bf00      	nop
 801d078:	20001dcc 	.word	0x20001dcc
 801d07c:	0801ca13 	.word	0x0801ca13
 801d080:	000fffff 	.word	0x000fffff

0801d084 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b084      	sub	sp, #16
 801d088:	af00      	add	r7, sp, #0
 801d08a:	4603      	mov	r3, r0
 801d08c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801d08e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d092:	4618      	mov	r0, r3
 801d094:	f001 fce6 	bl	801ea64 <SUBGRF_SetRfTxPower>
 801d098:	4603      	mov	r3, r0
 801d09a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801d09c:	210e      	movs	r1, #14
 801d09e:	f640 101f 	movw	r0, #2335	; 0x91f
 801d0a2:	f001 fbc3 	bl	801e82c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801d0a6:	7bfb      	ldrb	r3, [r7, #15]
 801d0a8:	2101      	movs	r1, #1
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f001 fcb2 	bl	801ea14 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801d0b0:	f000 fef2 	bl	801de98 <SUBGRF_SetTxContinuousWave>
}
 801d0b4:	bf00      	nop
 801d0b6:	3710      	adds	r7, #16
 801d0b8:	46bd      	mov	sp, r7
 801d0ba:	bd80      	pop	{r7, pc}

0801d0bc <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801d0bc:	b480      	push	{r7}
 801d0be:	b089      	sub	sp, #36	; 0x24
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	60f8      	str	r0, [r7, #12]
 801d0c4:	60b9      	str	r1, [r7, #8]
 801d0c6:	4613      	mov	r3, r2
 801d0c8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801d0ce:	2300      	movs	r3, #0
 801d0d0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801d0d2:	2300      	movs	r3, #0
 801d0d4:	61bb      	str	r3, [r7, #24]
 801d0d6:	e011      	b.n	801d0fc <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801d0d8:	69bb      	ldr	r3, [r7, #24]
 801d0da:	68ba      	ldr	r2, [r7, #8]
 801d0dc:	4413      	add	r3, r2
 801d0de:	781a      	ldrb	r2, [r3, #0]
 801d0e0:	69bb      	ldr	r3, [r7, #24]
 801d0e2:	68b9      	ldr	r1, [r7, #8]
 801d0e4:	440b      	add	r3, r1
 801d0e6:	43d2      	mvns	r2, r2
 801d0e8:	b2d2      	uxtb	r2, r2
 801d0ea:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801d0ec:	69bb      	ldr	r3, [r7, #24]
 801d0ee:	68fa      	ldr	r2, [r7, #12]
 801d0f0:	4413      	add	r3, r2
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801d0f6:	69bb      	ldr	r3, [r7, #24]
 801d0f8:	3301      	adds	r3, #1
 801d0fa:	61bb      	str	r3, [r7, #24]
 801d0fc:	79fb      	ldrb	r3, [r7, #7]
 801d0fe:	69ba      	ldr	r2, [r7, #24]
 801d100:	429a      	cmp	r2, r3
 801d102:	dbe9      	blt.n	801d0d8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801d104:	2300      	movs	r3, #0
 801d106:	61bb      	str	r3, [r7, #24]
 801d108:	e049      	b.n	801d19e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801d10a:	69bb      	ldr	r3, [r7, #24]
 801d10c:	425a      	negs	r2, r3
 801d10e:	f003 0307 	and.w	r3, r3, #7
 801d112:	f002 0207 	and.w	r2, r2, #7
 801d116:	bf58      	it	pl
 801d118:	4253      	negpl	r3, r2
 801d11a:	b2db      	uxtb	r3, r3
 801d11c:	f1c3 0307 	rsb	r3, r3, #7
 801d120:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801d122:	69bb      	ldr	r3, [r7, #24]
 801d124:	2b00      	cmp	r3, #0
 801d126:	da00      	bge.n	801d12a <payload_integration+0x6e>
 801d128:	3307      	adds	r3, #7
 801d12a:	10db      	asrs	r3, r3, #3
 801d12c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801d12e:	69bb      	ldr	r3, [r7, #24]
 801d130:	3301      	adds	r3, #1
 801d132:	425a      	negs	r2, r3
 801d134:	f003 0307 	and.w	r3, r3, #7
 801d138:	f002 0207 	and.w	r2, r2, #7
 801d13c:	bf58      	it	pl
 801d13e:	4253      	negpl	r3, r2
 801d140:	b2db      	uxtb	r3, r3
 801d142:	f1c3 0307 	rsb	r3, r3, #7
 801d146:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801d148:	69bb      	ldr	r3, [r7, #24]
 801d14a:	3301      	adds	r3, #1
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	da00      	bge.n	801d152 <payload_integration+0x96>
 801d150:	3307      	adds	r3, #7
 801d152:	10db      	asrs	r3, r3, #3
 801d154:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801d156:	7dbb      	ldrb	r3, [r7, #22]
 801d158:	68ba      	ldr	r2, [r7, #8]
 801d15a:	4413      	add	r3, r2
 801d15c:	781b      	ldrb	r3, [r3, #0]
 801d15e:	461a      	mov	r2, r3
 801d160:	7dfb      	ldrb	r3, [r7, #23]
 801d162:	fa42 f303 	asr.w	r3, r2, r3
 801d166:	b2db      	uxtb	r3, r3
 801d168:	f003 0301 	and.w	r3, r3, #1
 801d16c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801d16e:	7ffa      	ldrb	r2, [r7, #31]
 801d170:	7cfb      	ldrb	r3, [r7, #19]
 801d172:	4053      	eors	r3, r2
 801d174:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801d176:	7d3b      	ldrb	r3, [r7, #20]
 801d178:	68fa      	ldr	r2, [r7, #12]
 801d17a:	4413      	add	r3, r2
 801d17c:	781b      	ldrb	r3, [r3, #0]
 801d17e:	b25a      	sxtb	r2, r3
 801d180:	7ff9      	ldrb	r1, [r7, #31]
 801d182:	7d7b      	ldrb	r3, [r7, #21]
 801d184:	fa01 f303 	lsl.w	r3, r1, r3
 801d188:	b25b      	sxtb	r3, r3
 801d18a:	4313      	orrs	r3, r2
 801d18c:	b259      	sxtb	r1, r3
 801d18e:	7d3b      	ldrb	r3, [r7, #20]
 801d190:	68fa      	ldr	r2, [r7, #12]
 801d192:	4413      	add	r3, r2
 801d194:	b2ca      	uxtb	r2, r1
 801d196:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801d198:	69bb      	ldr	r3, [r7, #24]
 801d19a:	3301      	adds	r3, #1
 801d19c:	61bb      	str	r3, [r7, #24]
 801d19e:	79fb      	ldrb	r3, [r7, #7]
 801d1a0:	00db      	lsls	r3, r3, #3
 801d1a2:	69ba      	ldr	r2, [r7, #24]
 801d1a4:	429a      	cmp	r2, r3
 801d1a6:	dbb0      	blt.n	801d10a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801d1a8:	7ffb      	ldrb	r3, [r7, #31]
 801d1aa:	01db      	lsls	r3, r3, #7
 801d1ac:	b25a      	sxtb	r2, r3
 801d1ae:	7ffb      	ldrb	r3, [r7, #31]
 801d1b0:	019b      	lsls	r3, r3, #6
 801d1b2:	b25b      	sxtb	r3, r3
 801d1b4:	4313      	orrs	r3, r2
 801d1b6:	b25b      	sxtb	r3, r3
 801d1b8:	7ffa      	ldrb	r2, [r7, #31]
 801d1ba:	2a00      	cmp	r2, #0
 801d1bc:	d101      	bne.n	801d1c2 <payload_integration+0x106>
 801d1be:	2220      	movs	r2, #32
 801d1c0:	e000      	b.n	801d1c4 <payload_integration+0x108>
 801d1c2:	2200      	movs	r2, #0
 801d1c4:	4313      	orrs	r3, r2
 801d1c6:	b259      	sxtb	r1, r3
 801d1c8:	79fb      	ldrb	r3, [r7, #7]
 801d1ca:	68fa      	ldr	r2, [r7, #12]
 801d1cc:	4413      	add	r3, r2
 801d1ce:	b2ca      	uxtb	r2, r1
 801d1d0:	701a      	strb	r2, [r3, #0]
}
 801d1d2:	bf00      	nop
 801d1d4:	3724      	adds	r7, #36	; 0x24
 801d1d6:	46bd      	mov	sp, r7
 801d1d8:	bc80      	pop	{r7}
 801d1da:	4770      	bx	lr

0801d1dc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801d1dc:	b580      	push	{r7, lr}
 801d1de:	b08c      	sub	sp, #48	; 0x30
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	60b9      	str	r1, [r7, #8]
 801d1e4:	607a      	str	r2, [r7, #4]
 801d1e6:	603b      	str	r3, [r7, #0]
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801d1ec:	2300      	movs	r3, #0
 801d1ee:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	623b      	str	r3, [r7, #32]
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d1f8:	f001 fdff 	bl	801edfa <RFW_DeInit>

    if( rxContinuous != 0 )
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d001      	beq.n	801d206 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801d202:	2300      	movs	r3, #0
 801d204:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	2b00      	cmp	r3, #0
 801d20a:	bf14      	ite	ne
 801d20c:	2301      	movne	r3, #1
 801d20e:	2300      	moveq	r3, #0
 801d210:	b2da      	uxtb	r2, r3
 801d212:	4ba3      	ldr	r3, [pc, #652]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d214:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801d216:	7bfb      	ldrb	r3, [r7, #15]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d003      	beq.n	801d224 <RadioSetRxGenericConfig+0x48>
 801d21c:	2b01      	cmp	r3, #1
 801d21e:	f000 80dc 	beq.w	801d3da <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801d222:	e194      	b.n	801d54e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801d224:	68bb      	ldr	r3, [r7, #8]
 801d226:	689b      	ldr	r3, [r3, #8]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d003      	beq.n	801d234 <RadioSetRxGenericConfig+0x58>
 801d22c:	68bb      	ldr	r3, [r7, #8]
 801d22e:	68db      	ldr	r3, [r3, #12]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d102      	bne.n	801d23a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801d234:	f04f 33ff 	mov.w	r3, #4294967295
 801d238:	e18a      	b.n	801d550 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801d23a:	68bb      	ldr	r3, [r7, #8]
 801d23c:	7f9b      	ldrb	r3, [r3, #30]
 801d23e:	2b08      	cmp	r3, #8
 801d240:	d902      	bls.n	801d248 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801d242:	f04f 33ff 	mov.w	r3, #4294967295
 801d246:	e183      	b.n	801d550 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d248:	68bb      	ldr	r3, [r7, #8]
 801d24a:	6919      	ldr	r1, [r3, #16]
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	7f9b      	ldrb	r3, [r3, #30]
 801d250:	b29a      	uxth	r2, r3
 801d252:	f107 0320 	add.w	r3, r7, #32
 801d256:	4618      	mov	r0, r3
 801d258:	f001 fec2 	bl	801efe0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d25c:	68bb      	ldr	r3, [r7, #8]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	2b00      	cmp	r3, #0
 801d262:	bf14      	ite	ne
 801d264:	2301      	movne	r3, #1
 801d266:	2300      	moveq	r3, #0
 801d268:	b2db      	uxtb	r3, r3
 801d26a:	4618      	mov	r0, r3
 801d26c:	f000 fe26 	bl	801debc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d270:	4b8b      	ldr	r3, [pc, #556]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d272:	2200      	movs	r2, #0
 801d274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d278:	68bb      	ldr	r3, [r7, #8]
 801d27a:	689b      	ldr	r3, [r3, #8]
 801d27c:	4a88      	ldr	r2, [pc, #544]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d27e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d280:	68bb      	ldr	r3, [r7, #8]
 801d282:	f893 2020 	ldrb.w	r2, [r3, #32]
 801d286:	4b86      	ldr	r3, [pc, #536]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801d28c:	68bb      	ldr	r3, [r7, #8]
 801d28e:	685b      	ldr	r3, [r3, #4]
 801d290:	4618      	mov	r0, r3
 801d292:	f001 fce5 	bl	801ec60 <SUBGRF_GetFskBandwidthRegValue>
 801d296:	4603      	mov	r3, r0
 801d298:	461a      	mov	r2, r3
 801d29a:	4b81      	ldr	r3, [pc, #516]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d2a0:	4b7f      	ldr	r3, [pc, #508]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2a2:	2200      	movs	r2, #0
 801d2a4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801d2a6:	68bb      	ldr	r3, [r7, #8]
 801d2a8:	68db      	ldr	r3, [r3, #12]
 801d2aa:	b29b      	uxth	r3, r3
 801d2ac:	00db      	lsls	r3, r3, #3
 801d2ae:	b29a      	uxth	r2, r3
 801d2b0:	4b7b      	ldr	r3, [pc, #492]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2b2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	7fda      	ldrb	r2, [r3, #31]
 801d2b8:	4b79      	ldr	r3, [pc, #484]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2ba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d2bc:	68bb      	ldr	r3, [r7, #8]
 801d2be:	7f9b      	ldrb	r3, [r3, #30]
 801d2c0:	00db      	lsls	r3, r3, #3
 801d2c2:	b2da      	uxtb	r2, r3
 801d2c4:	4b76      	ldr	r3, [pc, #472]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2c6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801d2c8:	68bb      	ldr	r3, [r7, #8]
 801d2ca:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801d2ce:	4b74      	ldr	r3, [pc, #464]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2d0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801d2d2:	68bb      	ldr	r3, [r7, #8]
 801d2d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d105      	bne.n	801d2e8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801d2dc:	68bb      	ldr	r3, [r7, #8]
 801d2de:	695b      	ldr	r3, [r3, #20]
 801d2e0:	b2da      	uxtb	r2, r3
 801d2e2:	4b6f      	ldr	r3, [pc, #444]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2e4:	759a      	strb	r2, [r3, #22]
 801d2e6:	e00b      	b.n	801d300 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801d2e8:	68bb      	ldr	r3, [r7, #8]
 801d2ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d2ee:	2b02      	cmp	r3, #2
 801d2f0:	d103      	bne.n	801d2fa <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d2f2:	4b6b      	ldr	r3, [pc, #428]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2f4:	22ff      	movs	r2, #255	; 0xff
 801d2f6:	759a      	strb	r2, [r3, #22]
 801d2f8:	e002      	b.n	801d300 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d2fa:	4b69      	ldr	r3, [pc, #420]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d2fc:	22ff      	movs	r2, #255	; 0xff
 801d2fe:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d300:	68bb      	ldr	r3, [r7, #8]
 801d302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d306:	2b02      	cmp	r3, #2
 801d308:	d004      	beq.n	801d314 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d30a:	68bb      	ldr	r3, [r7, #8]
 801d30c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d310:	2b02      	cmp	r3, #2
 801d312:	d12d      	bne.n	801d370 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d314:	68bb      	ldr	r3, [r7, #8]
 801d316:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d31a:	2bf1      	cmp	r3, #241	; 0xf1
 801d31c:	d00c      	beq.n	801d338 <RadioSetRxGenericConfig+0x15c>
 801d31e:	68bb      	ldr	r3, [r7, #8]
 801d320:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d324:	2bf2      	cmp	r3, #242	; 0xf2
 801d326:	d007      	beq.n	801d338 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d328:	68bb      	ldr	r3, [r7, #8]
 801d32a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d32e:	2b01      	cmp	r3, #1
 801d330:	d002      	beq.n	801d338 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801d332:	f04f 33ff 	mov.w	r3, #4294967295
 801d336:	e10b      	b.n	801d550 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801d338:	2300      	movs	r3, #0
 801d33a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801d33c:	68bb      	ldr	r3, [r7, #8]
 801d33e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801d340:	4b58      	ldr	r3, [pc, #352]	; (801d4a4 <RadioSetRxGenericConfig+0x2c8>)
 801d342:	6819      	ldr	r1, [r3, #0]
 801d344:	f107 0314 	add.w	r3, r7, #20
 801d348:	4a57      	ldr	r2, [pc, #348]	; (801d4a8 <RadioSetRxGenericConfig+0x2cc>)
 801d34a:	4618      	mov	r0, r3
 801d34c:	f001 fd48 	bl	801ede0 <RFW_Init>
 801d350:	4603      	mov	r3, r0
 801d352:	2b00      	cmp	r3, #0
 801d354:	d002      	beq.n	801d35c <RadioSetRxGenericConfig+0x180>
                return -1;
 801d356:	f04f 33ff 	mov.w	r3, #4294967295
 801d35a:	e0f9      	b.n	801d550 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d35c:	4b50      	ldr	r3, [pc, #320]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d35e:	2200      	movs	r2, #0
 801d360:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d362:	4b4f      	ldr	r3, [pc, #316]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d364:	2201      	movs	r2, #1
 801d366:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d368:	4b4d      	ldr	r3, [pc, #308]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d36a:	2200      	movs	r2, #0
 801d36c:	755a      	strb	r2, [r3, #21]
        {
 801d36e:	e00e      	b.n	801d38e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d370:	68bb      	ldr	r3, [r7, #8]
 801d372:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801d376:	4b4a      	ldr	r3, [pc, #296]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d378:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d37a:	68bb      	ldr	r3, [r7, #8]
 801d37c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801d380:	4b47      	ldr	r3, [pc, #284]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d382:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801d384:	68bb      	ldr	r3, [r7, #8]
 801d386:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801d38a:	4b45      	ldr	r3, [pc, #276]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d38c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801d38e:	f7ff fa3e 	bl	801c80e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d392:	2000      	movs	r0, #0
 801d394:	f7fe fbd2 	bl	801bb3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d398:	4844      	ldr	r0, [pc, #272]	; (801d4ac <RadioSetRxGenericConfig+0x2d0>)
 801d39a:	f001 f82d 	bl	801e3f8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d39e:	4844      	ldr	r0, [pc, #272]	; (801d4b0 <RadioSetRxGenericConfig+0x2d4>)
 801d3a0:	f001 f8fc 	bl	801e59c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d3a4:	f107 0320 	add.w	r3, r7, #32
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	f000 fbc0 	bl	801db2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d3ae:	68bb      	ldr	r3, [r7, #8]
 801d3b0:	8b9b      	ldrh	r3, [r3, #28]
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f000 fc0a 	bl	801dbcc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d3b8:	68bb      	ldr	r3, [r7, #8]
 801d3ba:	8b1b      	ldrh	r3, [r3, #24]
 801d3bc:	4618      	mov	r0, r3
 801d3be:	f000 fbe5 	bl	801db8c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801d3c2:	683b      	ldr	r3, [r7, #0]
 801d3c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801d3c8:	fb03 f202 	mul.w	r2, r3, r2
 801d3cc:	68bb      	ldr	r3, [r7, #8]
 801d3ce:	689b      	ldr	r3, [r3, #8]
 801d3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801d3d4:	4a32      	ldr	r2, [pc, #200]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d3d6:	6093      	str	r3, [r2, #8]
        break;
 801d3d8:	e0b9      	b.n	801d54e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801d3da:	68bb      	ldr	r3, [r7, #8]
 801d3dc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	d102      	bne.n	801d3e8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801d3e2:	f04f 33ff 	mov.w	r3, #4294967295
 801d3e6:	e0b3      	b.n	801d550 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801d3e8:	68bb      	ldr	r3, [r7, #8]
 801d3ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d3ee:	2b01      	cmp	r3, #1
 801d3f0:	d104      	bne.n	801d3fc <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801d3f2:	68bb      	ldr	r3, [r7, #8]
 801d3f4:	695b      	ldr	r3, [r3, #20]
 801d3f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d3fa:	e002      	b.n	801d402 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801d3fc:	23ff      	movs	r3, #255	; 0xff
 801d3fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d402:	68bb      	ldr	r3, [r7, #8]
 801d404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d406:	2b00      	cmp	r3, #0
 801d408:	bf14      	ite	ne
 801d40a:	2301      	movne	r3, #1
 801d40c:	2300      	moveq	r3, #0
 801d40e:	b2db      	uxtb	r3, r3
 801d410:	4618      	mov	r0, r3
 801d412:	f000 fd53 	bl	801debc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801d416:	683b      	ldr	r3, [r7, #0]
 801d418:	b2db      	uxtb	r3, r3
 801d41a:	4618      	mov	r0, r3
 801d41c:	f000 fd5d 	bl	801deda <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d420:	4b1f      	ldr	r3, [pc, #124]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d422:	2201      	movs	r2, #1
 801d424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d428:	68bb      	ldr	r3, [r7, #8]
 801d42a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801d42e:	4b1c      	ldr	r3, [pc, #112]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d434:	68bb      	ldr	r3, [r7, #8]
 801d436:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801d43a:	4b19      	ldr	r3, [pc, #100]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d43c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d440:	68bb      	ldr	r3, [r7, #8]
 801d442:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801d446:	4b16      	ldr	r3, [pc, #88]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d448:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d44c:	68bb      	ldr	r3, [r7, #8]
 801d44e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d452:	2b02      	cmp	r3, #2
 801d454:	d010      	beq.n	801d478 <RadioSetRxGenericConfig+0x29c>
 801d456:	2b02      	cmp	r3, #2
 801d458:	dc2c      	bgt.n	801d4b4 <RadioSetRxGenericConfig+0x2d8>
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d002      	beq.n	801d464 <RadioSetRxGenericConfig+0x288>
 801d45e:	2b01      	cmp	r3, #1
 801d460:	d005      	beq.n	801d46e <RadioSetRxGenericConfig+0x292>
            break;
 801d462:	e027      	b.n	801d4b4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d464:	4b0e      	ldr	r3, [pc, #56]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d466:	2200      	movs	r2, #0
 801d468:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d46c:	e023      	b.n	801d4b6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d46e:	4b0c      	ldr	r3, [pc, #48]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d470:	2201      	movs	r2, #1
 801d472:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d476:	e01e      	b.n	801d4b6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d478:	68bb      	ldr	r3, [r7, #8]
 801d47a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d47e:	2b0b      	cmp	r3, #11
 801d480:	d004      	beq.n	801d48c <RadioSetRxGenericConfig+0x2b0>
 801d482:	68bb      	ldr	r3, [r7, #8]
 801d484:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d488:	2b0c      	cmp	r3, #12
 801d48a:	d104      	bne.n	801d496 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d48c:	4b04      	ldr	r3, [pc, #16]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d48e:	2201      	movs	r2, #1
 801d490:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d494:	e00f      	b.n	801d4b6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d496:	4b02      	ldr	r3, [pc, #8]	; (801d4a0 <RadioSetRxGenericConfig+0x2c4>)
 801d498:	2200      	movs	r2, #0
 801d49a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d49e:	e00a      	b.n	801d4b6 <RadioSetRxGenericConfig+0x2da>
 801d4a0:	20001dcc 	.word	0x20001dcc
 801d4a4:	20001dc8 	.word	0x20001dc8
 801d4a8:	20001e40 	.word	0x20001e40
 801d4ac:	20001e04 	.word	0x20001e04
 801d4b0:	20001dda 	.word	0x20001dda
            break;
 801d4b4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d4b6:	4b28      	ldr	r3, [pc, #160]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d4b8:	2201      	movs	r2, #1
 801d4ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d4bc:	68bb      	ldr	r3, [r7, #8]
 801d4be:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801d4c0:	4b25      	ldr	r3, [pc, #148]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d4c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d4c4:	68bb      	ldr	r3, [r7, #8]
 801d4c6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801d4ca:	4b23      	ldr	r3, [pc, #140]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d4cc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d4ce:	4a22      	ldr	r2, [pc, #136]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d4d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d4d4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d4d6:	68bb      	ldr	r3, [r7, #8]
 801d4d8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801d4dc:	4b1e      	ldr	r3, [pc, #120]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d4de:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d4e2:	68bb      	ldr	r3, [r7, #8]
 801d4e4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801d4e8:	4b1b      	ldr	r3, [pc, #108]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d4ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d4ee:	f7ff f98e 	bl	801c80e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d4f2:	2001      	movs	r0, #1
 801d4f4:	f7fe fb22 	bl	801bb3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d4f8:	4818      	ldr	r0, [pc, #96]	; (801d55c <RadioSetRxGenericConfig+0x380>)
 801d4fa:	f000 ff7d 	bl	801e3f8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d4fe:	4818      	ldr	r0, [pc, #96]	; (801d560 <RadioSetRxGenericConfig+0x384>)
 801d500:	f001 f84c 	bl	801e59c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d504:	4b14      	ldr	r3, [pc, #80]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d506:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d50a:	2b01      	cmp	r3, #1
 801d50c:	d10d      	bne.n	801d52a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801d50e:	f240 7036 	movw	r0, #1846	; 0x736
 801d512:	f001 f99f 	bl	801e854 <SUBGRF_ReadRegister>
 801d516:	4603      	mov	r3, r0
 801d518:	f023 0304 	bic.w	r3, r3, #4
 801d51c:	b2db      	uxtb	r3, r3
 801d51e:	4619      	mov	r1, r3
 801d520:	f240 7036 	movw	r0, #1846	; 0x736
 801d524:	f001 f982 	bl	801e82c <SUBGRF_WriteRegister>
 801d528:	e00c      	b.n	801d544 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801d52a:	f240 7036 	movw	r0, #1846	; 0x736
 801d52e:	f001 f991 	bl	801e854 <SUBGRF_ReadRegister>
 801d532:	4603      	mov	r3, r0
 801d534:	f043 0304 	orr.w	r3, r3, #4
 801d538:	b2db      	uxtb	r3, r3
 801d53a:	4619      	mov	r1, r3
 801d53c:	f240 7036 	movw	r0, #1846	; 0x736
 801d540:	f001 f974 	bl	801e82c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d544:	4b04      	ldr	r3, [pc, #16]	; (801d558 <RadioSetRxGenericConfig+0x37c>)
 801d546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d54a:	609a      	str	r2, [r3, #8]
        break;
 801d54c:	bf00      	nop
    }
    return status;
 801d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d550:	4618      	mov	r0, r3
 801d552:	3730      	adds	r7, #48	; 0x30
 801d554:	46bd      	mov	sp, r7
 801d556:	bd80      	pop	{r7, pc}
 801d558:	20001dcc 	.word	0x20001dcc
 801d55c:	20001e04 	.word	0x20001e04
 801d560:	20001dda 	.word	0x20001dda

0801d564 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b08e      	sub	sp, #56	; 0x38
 801d568:	af00      	add	r7, sp, #0
 801d56a:	60b9      	str	r1, [r7, #8]
 801d56c:	607b      	str	r3, [r7, #4]
 801d56e:	4603      	mov	r3, r0
 801d570:	73fb      	strb	r3, [r7, #15]
 801d572:	4613      	mov	r3, r2
 801d574:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801d576:	2300      	movs	r3, #0
 801d578:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d57a:	2300      	movs	r3, #0
 801d57c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d57e:	f001 fc3c 	bl	801edfa <RFW_DeInit>
    switch( modem )
 801d582:	7bfb      	ldrb	r3, [r7, #15]
 801d584:	2b03      	cmp	r3, #3
 801d586:	f200 8204 	bhi.w	801d992 <RadioSetTxGenericConfig+0x42e>
 801d58a:	a201      	add	r2, pc, #4	; (adr r2, 801d590 <RadioSetTxGenericConfig+0x2c>)
 801d58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d590:	0801d715 	.word	0x0801d715
 801d594:	0801d85d 	.word	0x0801d85d
 801d598:	0801d955 	.word	0x0801d955
 801d59c:	0801d5a1 	.word	0x0801d5a1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801d5a0:	68bb      	ldr	r3, [r7, #8]
 801d5a2:	7c9b      	ldrb	r3, [r3, #18]
 801d5a4:	2b08      	cmp	r3, #8
 801d5a6:	d902      	bls.n	801d5ae <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801d5a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ac:	e206      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801d5ae:	68bb      	ldr	r3, [r7, #8]
 801d5b0:	6899      	ldr	r1, [r3, #8]
 801d5b2:	68bb      	ldr	r3, [r7, #8]
 801d5b4:	7c9b      	ldrb	r3, [r3, #18]
 801d5b6:	b29a      	uxth	r2, r3
 801d5b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5bc:	4618      	mov	r0, r3
 801d5be:	f001 fd0f 	bl	801efe0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801d5c2:	68bb      	ldr	r3, [r7, #8]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d102      	bne.n	801d5d0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801d5ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ce:	e1f5      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801d5d0:	68bb      	ldr	r3, [r7, #8]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	f242 7210 	movw	r2, #10000	; 0x2710
 801d5d8:	4293      	cmp	r3, r2
 801d5da:	d813      	bhi.n	801d604 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801d5dc:	2302      	movs	r3, #2
 801d5de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801d5e2:	4b99      	ldr	r3, [pc, #612]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d5e4:	2203      	movs	r2, #3
 801d5e6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801d5e8:	4b97      	ldr	r3, [pc, #604]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d5ea:	2203      	movs	r2, #3
 801d5ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d5f0:	68bb      	ldr	r3, [r7, #8]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	4a94      	ldr	r2, [pc, #592]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d5f6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d5f8:	68bb      	ldr	r3, [r7, #8]
 801d5fa:	7cda      	ldrb	r2, [r3, #19]
 801d5fc:	4b92      	ldr	r3, [pc, #584]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d602:	e017      	b.n	801d634 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801d604:	2300      	movs	r3, #0
 801d606:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d60a:	4b8f      	ldr	r3, [pc, #572]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d60c:	2200      	movs	r2, #0
 801d60e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d610:	4b8d      	ldr	r3, [pc, #564]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d612:	2200      	movs	r2, #0
 801d614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d618:	68bb      	ldr	r3, [r7, #8]
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	4a8a      	ldr	r2, [pc, #552]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d61e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d620:	68bb      	ldr	r3, [r7, #8]
 801d622:	7cda      	ldrb	r2, [r3, #19]
 801d624:	4b88      	ldr	r3, [pc, #544]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801d62a:	68bb      	ldr	r3, [r7, #8]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	089b      	lsrs	r3, r3, #2
 801d630:	4a85      	ldr	r2, [pc, #532]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d632:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801d634:	68bb      	ldr	r3, [r7, #8]
 801d636:	685b      	ldr	r3, [r3, #4]
 801d638:	b29b      	uxth	r3, r3
 801d63a:	00db      	lsls	r3, r3, #3
 801d63c:	b29a      	uxth	r2, r3
 801d63e:	4b82      	ldr	r3, [pc, #520]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d640:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d642:	4b81      	ldr	r3, [pc, #516]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d644:	2204      	movs	r2, #4
 801d646:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801d648:	68bb      	ldr	r3, [r7, #8]
 801d64a:	7c9b      	ldrb	r3, [r3, #18]
 801d64c:	00db      	lsls	r3, r3, #3
 801d64e:	b2da      	uxtb	r2, r3
 801d650:	4b7d      	ldr	r3, [pc, #500]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d652:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d654:	4b7c      	ldr	r3, [pc, #496]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d656:	2200      	movs	r2, #0
 801d658:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d65a:	68bb      	ldr	r3, [r7, #8]
 801d65c:	7d9b      	ldrb	r3, [r3, #22]
 801d65e:	2b02      	cmp	r3, #2
 801d660:	d003      	beq.n	801d66a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d662:	68bb      	ldr	r3, [r7, #8]
 801d664:	7d1b      	ldrb	r3, [r3, #20]
 801d666:	2b02      	cmp	r3, #2
 801d668:	d12b      	bne.n	801d6c2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d66a:	68bb      	ldr	r3, [r7, #8]
 801d66c:	7d5b      	ldrb	r3, [r3, #21]
 801d66e:	2bf1      	cmp	r3, #241	; 0xf1
 801d670:	d00a      	beq.n	801d688 <RadioSetTxGenericConfig+0x124>
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	7d5b      	ldrb	r3, [r3, #21]
 801d676:	2bf2      	cmp	r3, #242	; 0xf2
 801d678:	d006      	beq.n	801d688 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d67a:	68bb      	ldr	r3, [r7, #8]
 801d67c:	7d5b      	ldrb	r3, [r3, #21]
 801d67e:	2b01      	cmp	r3, #1
 801d680:	d002      	beq.n	801d688 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801d682:	f04f 33ff 	mov.w	r3, #4294967295
 801d686:	e199      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801d688:	68bb      	ldr	r3, [r7, #8]
 801d68a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801d68c:	2301      	movs	r3, #1
 801d68e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d692:	4b6e      	ldr	r3, [pc, #440]	; (801d84c <RadioSetTxGenericConfig+0x2e8>)
 801d694:	6819      	ldr	r1, [r3, #0]
 801d696:	f107 0320 	add.w	r3, r7, #32
 801d69a:	4a6d      	ldr	r2, [pc, #436]	; (801d850 <RadioSetTxGenericConfig+0x2ec>)
 801d69c:	4618      	mov	r0, r3
 801d69e:	f001 fb9f 	bl	801ede0 <RFW_Init>
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d002      	beq.n	801d6ae <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801d6a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ac:	e186      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d6ae:	4b66      	ldr	r3, [pc, #408]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d6b4:	4b64      	ldr	r3, [pc, #400]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d6b6:	2201      	movs	r2, #1
 801d6b8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d6ba:	4b63      	ldr	r3, [pc, #396]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d6bc:	2200      	movs	r2, #0
 801d6be:	755a      	strb	r2, [r3, #21]
        {
 801d6c0:	e00b      	b.n	801d6da <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801d6c2:	68bb      	ldr	r3, [r7, #8]
 801d6c4:	7d5a      	ldrb	r2, [r3, #21]
 801d6c6:	4b60      	ldr	r3, [pc, #384]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d6c8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801d6ca:	68bb      	ldr	r3, [r7, #8]
 801d6cc:	7d9a      	ldrb	r2, [r3, #22]
 801d6ce:	4b5e      	ldr	r3, [pc, #376]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d6d0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801d6d2:	68bb      	ldr	r3, [r7, #8]
 801d6d4:	7d1a      	ldrb	r2, [r3, #20]
 801d6d6:	4b5c      	ldr	r3, [pc, #368]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d6d8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d6da:	f7ff f898 	bl	801c80e <RadioStandby>
        RadioSetModem( radio_modem );
 801d6de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f7fe fa2a 	bl	801bb3c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d6e8:	485a      	ldr	r0, [pc, #360]	; (801d854 <RadioSetTxGenericConfig+0x2f0>)
 801d6ea:	f000 fe85 	bl	801e3f8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d6ee:	485a      	ldr	r0, [pc, #360]	; (801d858 <RadioSetTxGenericConfig+0x2f4>)
 801d6f0:	f000 ff54 	bl	801e59c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d6f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f000 fa18 	bl	801db2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801d6fe:	68bb      	ldr	r3, [r7, #8]
 801d700:	8a1b      	ldrh	r3, [r3, #16]
 801d702:	4618      	mov	r0, r3
 801d704:	f000 fa62 	bl	801dbcc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801d708:	68bb      	ldr	r3, [r7, #8]
 801d70a:	899b      	ldrh	r3, [r3, #12]
 801d70c:	4618      	mov	r0, r3
 801d70e:	f000 fa3d 	bl	801db8c <SUBGRF_SetCrcPolynomial>
        break;
 801d712:	e13f      	b.n	801d994 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801d714:	68bb      	ldr	r3, [r7, #8]
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d102      	bne.n	801d722 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801d71c:	f04f 33ff 	mov.w	r3, #4294967295
 801d720:	e14c      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801d722:	68bb      	ldr	r3, [r7, #8]
 801d724:	7c9b      	ldrb	r3, [r3, #18]
 801d726:	2b08      	cmp	r3, #8
 801d728:	d902      	bls.n	801d730 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801d72a:	f04f 33ff 	mov.w	r3, #4294967295
 801d72e:	e145      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d730:	68bb      	ldr	r3, [r7, #8]
 801d732:	6899      	ldr	r1, [r3, #8]
 801d734:	68bb      	ldr	r3, [r7, #8]
 801d736:	7c9b      	ldrb	r3, [r3, #18]
 801d738:	b29a      	uxth	r2, r3
 801d73a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d73e:	4618      	mov	r0, r3
 801d740:	f001 fc4e 	bl	801efe0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d744:	4b40      	ldr	r3, [pc, #256]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d746:	2200      	movs	r2, #0
 801d748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d74c:	68bb      	ldr	r3, [r7, #8]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	4a3d      	ldr	r2, [pc, #244]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d752:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d754:	68bb      	ldr	r3, [r7, #8]
 801d756:	7cda      	ldrb	r2, [r3, #19]
 801d758:	4b3b      	ldr	r3, [pc, #236]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d75e:	68bb      	ldr	r3, [r7, #8]
 801d760:	699b      	ldr	r3, [r3, #24]
 801d762:	4a39      	ldr	r2, [pc, #228]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d764:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d766:	4b38      	ldr	r3, [pc, #224]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d768:	2200      	movs	r2, #0
 801d76a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d76c:	68bb      	ldr	r3, [r7, #8]
 801d76e:	685b      	ldr	r3, [r3, #4]
 801d770:	b29b      	uxth	r3, r3
 801d772:	00db      	lsls	r3, r3, #3
 801d774:	b29a      	uxth	r2, r3
 801d776:	4b34      	ldr	r3, [pc, #208]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d778:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d77a:	4b33      	ldr	r3, [pc, #204]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d77c:	2204      	movs	r2, #4
 801d77e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d780:	68bb      	ldr	r3, [r7, #8]
 801d782:	7c9b      	ldrb	r3, [r3, #18]
 801d784:	00db      	lsls	r3, r3, #3
 801d786:	b2da      	uxtb	r2, r3
 801d788:	4b2f      	ldr	r3, [pc, #188]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d78a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d78c:	4b2e      	ldr	r3, [pc, #184]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d78e:	2200      	movs	r2, #0
 801d790:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d792:	68bb      	ldr	r3, [r7, #8]
 801d794:	7d9b      	ldrb	r3, [r3, #22]
 801d796:	2b02      	cmp	r3, #2
 801d798:	d003      	beq.n	801d7a2 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d79a:	68bb      	ldr	r3, [r7, #8]
 801d79c:	7d1b      	ldrb	r3, [r3, #20]
 801d79e:	2b02      	cmp	r3, #2
 801d7a0:	d12a      	bne.n	801d7f8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d7a2:	68bb      	ldr	r3, [r7, #8]
 801d7a4:	7d5b      	ldrb	r3, [r3, #21]
 801d7a6:	2bf1      	cmp	r3, #241	; 0xf1
 801d7a8:	d00a      	beq.n	801d7c0 <RadioSetTxGenericConfig+0x25c>
 801d7aa:	68bb      	ldr	r3, [r7, #8]
 801d7ac:	7d5b      	ldrb	r3, [r3, #21]
 801d7ae:	2bf2      	cmp	r3, #242	; 0xf2
 801d7b0:	d006      	beq.n	801d7c0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d7b2:	68bb      	ldr	r3, [r7, #8]
 801d7b4:	7d5b      	ldrb	r3, [r3, #21]
 801d7b6:	2b01      	cmp	r3, #1
 801d7b8:	d002      	beq.n	801d7c0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801d7ba:	f04f 33ff 	mov.w	r3, #4294967295
 801d7be:	e0fd      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801d7c0:	2301      	movs	r3, #1
 801d7c2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801d7c4:	68bb      	ldr	r3, [r7, #8]
 801d7c6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d7c8:	4b20      	ldr	r3, [pc, #128]	; (801d84c <RadioSetTxGenericConfig+0x2e8>)
 801d7ca:	6819      	ldr	r1, [r3, #0]
 801d7cc:	f107 0314 	add.w	r3, r7, #20
 801d7d0:	4a1f      	ldr	r2, [pc, #124]	; (801d850 <RadioSetTxGenericConfig+0x2ec>)
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	f001 fb04 	bl	801ede0 <RFW_Init>
 801d7d8:	4603      	mov	r3, r0
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d002      	beq.n	801d7e4 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801d7de:	f04f 33ff 	mov.w	r3, #4294967295
 801d7e2:	e0eb      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d7e4:	4b18      	ldr	r3, [pc, #96]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d7e6:	2200      	movs	r2, #0
 801d7e8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d7ea:	4b17      	ldr	r3, [pc, #92]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d7ec:	2201      	movs	r2, #1
 801d7ee:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d7f0:	4b15      	ldr	r3, [pc, #84]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d7f2:	2200      	movs	r2, #0
 801d7f4:	755a      	strb	r2, [r3, #21]
        {
 801d7f6:	e00b      	b.n	801d810 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d7f8:	68bb      	ldr	r3, [r7, #8]
 801d7fa:	7d5a      	ldrb	r2, [r3, #21]
 801d7fc:	4b12      	ldr	r3, [pc, #72]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d7fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d800:	68bb      	ldr	r3, [r7, #8]
 801d802:	7d9a      	ldrb	r2, [r3, #22]
 801d804:	4b10      	ldr	r3, [pc, #64]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d806:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d808:	68bb      	ldr	r3, [r7, #8]
 801d80a:	7d1a      	ldrb	r2, [r3, #20]
 801d80c:	4b0e      	ldr	r3, [pc, #56]	; (801d848 <RadioSetTxGenericConfig+0x2e4>)
 801d80e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d810:	f7fe fffd 	bl	801c80e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d814:	2000      	movs	r0, #0
 801d816:	f7fe f991 	bl	801bb3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d81a:	480e      	ldr	r0, [pc, #56]	; (801d854 <RadioSetTxGenericConfig+0x2f0>)
 801d81c:	f000 fdec 	bl	801e3f8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d820:	480d      	ldr	r0, [pc, #52]	; (801d858 <RadioSetTxGenericConfig+0x2f4>)
 801d822:	f000 febb 	bl	801e59c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d82a:	4618      	mov	r0, r3
 801d82c:	f000 f97f 	bl	801db2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d830:	68bb      	ldr	r3, [r7, #8]
 801d832:	8a1b      	ldrh	r3, [r3, #16]
 801d834:	4618      	mov	r0, r3
 801d836:	f000 f9c9 	bl	801dbcc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d83a:	68bb      	ldr	r3, [r7, #8]
 801d83c:	899b      	ldrh	r3, [r3, #12]
 801d83e:	4618      	mov	r0, r3
 801d840:	f000 f9a4 	bl	801db8c <SUBGRF_SetCrcPolynomial>
        break;
 801d844:	e0a6      	b.n	801d994 <RadioSetTxGenericConfig+0x430>
 801d846:	bf00      	nop
 801d848:	20001dcc 	.word	0x20001dcc
 801d84c:	20001dc8 	.word	0x20001dc8
 801d850:	20001e28 	.word	0x20001e28
 801d854:	20001e04 	.word	0x20001e04
 801d858:	20001dda 	.word	0x20001dda
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d85c:	4b59      	ldr	r3, [pc, #356]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d85e:	2201      	movs	r2, #1
 801d860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d864:	68bb      	ldr	r3, [r7, #8]
 801d866:	781a      	ldrb	r2, [r3, #0]
 801d868:	4b56      	ldr	r3, [pc, #344]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d86a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d86e:	68bb      	ldr	r3, [r7, #8]
 801d870:	785a      	ldrb	r2, [r3, #1]
 801d872:	4b54      	ldr	r3, [pc, #336]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d878:	68bb      	ldr	r3, [r7, #8]
 801d87a:	789a      	ldrb	r2, [r3, #2]
 801d87c:	4b51      	ldr	r3, [pc, #324]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d87e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d882:	68bb      	ldr	r3, [r7, #8]
 801d884:	78db      	ldrb	r3, [r3, #3]
 801d886:	2b02      	cmp	r3, #2
 801d888:	d010      	beq.n	801d8ac <RadioSetTxGenericConfig+0x348>
 801d88a:	2b02      	cmp	r3, #2
 801d88c:	dc20      	bgt.n	801d8d0 <RadioSetTxGenericConfig+0x36c>
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d002      	beq.n	801d898 <RadioSetTxGenericConfig+0x334>
 801d892:	2b01      	cmp	r3, #1
 801d894:	d005      	beq.n	801d8a2 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801d896:	e01b      	b.n	801d8d0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d898:	4b4a      	ldr	r3, [pc, #296]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d89a:	2200      	movs	r2, #0
 801d89c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d8a0:	e017      	b.n	801d8d2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d8a2:	4b48      	ldr	r3, [pc, #288]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8a4:	2201      	movs	r2, #1
 801d8a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d8aa:	e012      	b.n	801d8d2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d8ac:	68bb      	ldr	r3, [r7, #8]
 801d8ae:	781b      	ldrb	r3, [r3, #0]
 801d8b0:	2b0b      	cmp	r3, #11
 801d8b2:	d003      	beq.n	801d8bc <RadioSetTxGenericConfig+0x358>
 801d8b4:	68bb      	ldr	r3, [r7, #8]
 801d8b6:	781b      	ldrb	r3, [r3, #0]
 801d8b8:	2b0c      	cmp	r3, #12
 801d8ba:	d104      	bne.n	801d8c6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d8bc:	4b41      	ldr	r3, [pc, #260]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8be:	2201      	movs	r2, #1
 801d8c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d8c4:	e005      	b.n	801d8d2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d8c6:	4b3f      	ldr	r3, [pc, #252]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d8ce:	e000      	b.n	801d8d2 <RadioSetTxGenericConfig+0x36e>
            break;
 801d8d0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d8d2:	4b3c      	ldr	r3, [pc, #240]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8d4:	2201      	movs	r2, #1
 801d8d6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d8d8:	68bb      	ldr	r3, [r7, #8]
 801d8da:	889a      	ldrh	r2, [r3, #4]
 801d8dc:	4b39      	ldr	r3, [pc, #228]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8de:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d8e0:	68bb      	ldr	r3, [r7, #8]
 801d8e2:	799a      	ldrb	r2, [r3, #6]
 801d8e4:	4b37      	ldr	r3, [pc, #220]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8e6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d8e8:	68bb      	ldr	r3, [r7, #8]
 801d8ea:	79da      	ldrb	r2, [r3, #7]
 801d8ec:	4b35      	ldr	r3, [pc, #212]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8ee:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d8f2:	68bb      	ldr	r3, [r7, #8]
 801d8f4:	7a1a      	ldrb	r2, [r3, #8]
 801d8f6:	4b33      	ldr	r3, [pc, #204]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d8f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801d8fc:	f7fe ff87 	bl	801c80e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d900:	2001      	movs	r0, #1
 801d902:	f7fe f91b 	bl	801bb3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d906:	4830      	ldr	r0, [pc, #192]	; (801d9c8 <RadioSetTxGenericConfig+0x464>)
 801d908:	f000 fd76 	bl	801e3f8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d90c:	482f      	ldr	r0, [pc, #188]	; (801d9cc <RadioSetTxGenericConfig+0x468>)
 801d90e:	f000 fe45 	bl	801e59c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d912:	4b2c      	ldr	r3, [pc, #176]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d918:	2b06      	cmp	r3, #6
 801d91a:	d10d      	bne.n	801d938 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801d91c:	f640 0089 	movw	r0, #2185	; 0x889
 801d920:	f000 ff98 	bl	801e854 <SUBGRF_ReadRegister>
 801d924:	4603      	mov	r3, r0
 801d926:	f023 0304 	bic.w	r3, r3, #4
 801d92a:	b2db      	uxtb	r3, r3
 801d92c:	4619      	mov	r1, r3
 801d92e:	f640 0089 	movw	r0, #2185	; 0x889
 801d932:	f000 ff7b 	bl	801e82c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801d936:	e02d      	b.n	801d994 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801d938:	f640 0089 	movw	r0, #2185	; 0x889
 801d93c:	f000 ff8a 	bl	801e854 <SUBGRF_ReadRegister>
 801d940:	4603      	mov	r3, r0
 801d942:	f043 0304 	orr.w	r3, r3, #4
 801d946:	b2db      	uxtb	r3, r3
 801d948:	4619      	mov	r1, r3
 801d94a:	f640 0089 	movw	r0, #2185	; 0x889
 801d94e:	f000 ff6d 	bl	801e82c <SUBGRF_WriteRegister>
        break;
 801d952:	e01f      	b.n	801d994 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d954:	68bb      	ldr	r3, [r7, #8]
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d004      	beq.n	801d966 <RadioSetTxGenericConfig+0x402>
 801d95c:	68bb      	ldr	r3, [r7, #8]
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d964:	d902      	bls.n	801d96c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801d966:	f04f 33ff 	mov.w	r3, #4294967295
 801d96a:	e027      	b.n	801d9bc <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801d96c:	2003      	movs	r0, #3
 801d96e:	f7fe f8e5 	bl	801bb3c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d972:	4b14      	ldr	r3, [pc, #80]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d974:	2202      	movs	r2, #2
 801d976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d97a:	68bb      	ldr	r3, [r7, #8]
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	4a11      	ldr	r2, [pc, #68]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d980:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d982:	4b10      	ldr	r3, [pc, #64]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d984:	2216      	movs	r2, #22
 801d986:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d98a:	480f      	ldr	r0, [pc, #60]	; (801d9c8 <RadioSetTxGenericConfig+0x464>)
 801d98c:	f000 fd34 	bl	801e3f8 <SUBGRF_SetModulationParams>
        break;
 801d990:	e000      	b.n	801d994 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801d992:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d998:	4618      	mov	r0, r3
 801d99a:	f001 f863 	bl	801ea64 <SUBGRF_SetRfTxPower>
 801d99e:	4603      	mov	r3, r0
 801d9a0:	461a      	mov	r2, r3
 801d9a2:	4b08      	ldr	r3, [pc, #32]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d9a4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d9a8:	4b06      	ldr	r3, [pc, #24]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d9aa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d9ae:	4618      	mov	r0, r3
 801d9b0:	f001 fa37 	bl	801ee22 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d9b4:	4a03      	ldr	r2, [pc, #12]	; (801d9c4 <RadioSetTxGenericConfig+0x460>)
 801d9b6:	687b      	ldr	r3, [r7, #4]
 801d9b8:	6053      	str	r3, [r2, #4]
    return 0;
 801d9ba:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d9bc:	4618      	mov	r0, r3
 801d9be:	3738      	adds	r7, #56	; 0x38
 801d9c0:	46bd      	mov	sp, r7
 801d9c2:	bd80      	pop	{r7, pc}
 801d9c4:	20001dcc 	.word	0x20001dcc
 801d9c8:	20001e04 	.word	0x20001e04
 801d9cc:	20001dda 	.word	0x20001dda

0801d9d0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801d9d0:	b480      	push	{r7}
 801d9d2:	b085      	sub	sp, #20
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d9d8:	2301      	movs	r3, #1
 801d9da:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801d9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801d9de:	4618      	mov	r0, r3
 801d9e0:	3714      	adds	r7, #20
 801d9e2:	46bd      	mov	sp, r7
 801d9e4:	bc80      	pop	{r7}
 801d9e6:	4770      	bx	lr

0801d9e8 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801d9e8:	b480      	push	{r7}
 801d9ea:	b083      	sub	sp, #12
 801d9ec:	af00      	add	r7, sp, #0
 801d9ee:	6078      	str	r0, [r7, #4]
 801d9f0:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d9f2:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801d9f4:	4618      	mov	r0, r3
 801d9f6:	370c      	adds	r7, #12
 801d9f8:	46bd      	mov	sp, r7
 801d9fa:	bc80      	pop	{r7}
 801d9fc:	4770      	bx	lr
	...

0801da00 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801da00:	b580      	push	{r7, lr}
 801da02:	b084      	sub	sp, #16
 801da04:	af00      	add	r7, sp, #0
 801da06:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d002      	beq.n	801da14 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801da0e:	4a1d      	ldr	r2, [pc, #116]	; (801da84 <SUBGRF_Init+0x84>)
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801da14:	f7e4 fd76 	bl	8002504 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801da18:	2002      	movs	r0, #2
 801da1a:	f001 f8ff 	bl	801ec1c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801da1e:	4b1a      	ldr	r3, [pc, #104]	; (801da88 <SUBGRF_Init+0x88>)
 801da20:	2200      	movs	r2, #0
 801da22:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801da24:	2000      	movs	r0, #0
 801da26:	f000 f97d 	bl	801dd24 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801da2a:	f7f1 f9c1 	bl	800edb0 <RBI_IsTCXO>
 801da2e:	4603      	mov	r3, r0
 801da30:	2b01      	cmp	r3, #1
 801da32:	d10e      	bne.n	801da52 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801da34:	2140      	movs	r1, #64	; 0x40
 801da36:	2001      	movs	r0, #1
 801da38:	f000 fb82 	bl	801e140 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801da3c:	2100      	movs	r1, #0
 801da3e:	f640 1011 	movw	r0, #2321	; 0x911
 801da42:	f000 fef3 	bl	801e82c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801da46:	237f      	movs	r3, #127	; 0x7f
 801da48:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801da4a:	7b38      	ldrb	r0, [r7, #12]
 801da4c:	f000 fa8b 	bl	801df66 <SUBGRF_Calibrate>
 801da50:	e009      	b.n	801da66 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801da52:	2120      	movs	r1, #32
 801da54:	f640 1011 	movw	r0, #2321	; 0x911
 801da58:	f000 fee8 	bl	801e82c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801da5c:	2120      	movs	r1, #32
 801da5e:	f640 1012 	movw	r0, #2322	; 0x912
 801da62:	f000 fee3 	bl	801e82c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801da66:	210e      	movs	r1, #14
 801da68:	f640 101f 	movw	r0, #2335	; 0x91f
 801da6c:	f000 fede 	bl	801e82c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801da70:	f7f1 f982 	bl	800ed78 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801da74:	4b05      	ldr	r3, [pc, #20]	; (801da8c <SUBGRF_Init+0x8c>)
 801da76:	2201      	movs	r2, #1
 801da78:	701a      	strb	r2, [r3, #0]
}
 801da7a:	bf00      	nop
 801da7c:	3710      	adds	r7, #16
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}
 801da82:	bf00      	nop
 801da84:	20001e64 	.word	0x20001e64
 801da88:	20001e60 	.word	0x20001e60
 801da8c:	20001e58 	.word	0x20001e58

0801da90 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801da90:	b480      	push	{r7}
 801da92:	af00      	add	r7, sp, #0
    return OperatingMode;
 801da94:	4b02      	ldr	r3, [pc, #8]	; (801daa0 <SUBGRF_GetOperatingMode+0x10>)
 801da96:	781b      	ldrb	r3, [r3, #0]
}
 801da98:	4618      	mov	r0, r3
 801da9a:	46bd      	mov	sp, r7
 801da9c:	bc80      	pop	{r7}
 801da9e:	4770      	bx	lr
 801daa0:	20001e58 	.word	0x20001e58

0801daa4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801daa4:	b580      	push	{r7, lr}
 801daa6:	b082      	sub	sp, #8
 801daa8:	af00      	add	r7, sp, #0
 801daaa:	6078      	str	r0, [r7, #4]
 801daac:	460b      	mov	r3, r1
 801daae:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801dab0:	78fb      	ldrb	r3, [r7, #3]
 801dab2:	461a      	mov	r2, r3
 801dab4:	6879      	ldr	r1, [r7, #4]
 801dab6:	2000      	movs	r0, #0
 801dab8:	f000 ff24 	bl	801e904 <SUBGRF_WriteBuffer>
}
 801dabc:	bf00      	nop
 801dabe:	3708      	adds	r7, #8
 801dac0:	46bd      	mov	sp, r7
 801dac2:	bd80      	pop	{r7, pc}

0801dac4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801dac4:	b580      	push	{r7, lr}
 801dac6:	b086      	sub	sp, #24
 801dac8:	af00      	add	r7, sp, #0
 801daca:	60f8      	str	r0, [r7, #12]
 801dacc:	60b9      	str	r1, [r7, #8]
 801dace:	4613      	mov	r3, r2
 801dad0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801dad2:	2300      	movs	r3, #0
 801dad4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801dad6:	f107 0317 	add.w	r3, r7, #23
 801dada:	4619      	mov	r1, r3
 801dadc:	68b8      	ldr	r0, [r7, #8]
 801dade:	f000 fe27 	bl	801e730 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801dae2:	68bb      	ldr	r3, [r7, #8]
 801dae4:	781b      	ldrb	r3, [r3, #0]
 801dae6:	79fa      	ldrb	r2, [r7, #7]
 801dae8:	429a      	cmp	r2, r3
 801daea:	d201      	bcs.n	801daf0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801daec:	2301      	movs	r3, #1
 801daee:	e007      	b.n	801db00 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801daf0:	7df8      	ldrb	r0, [r7, #23]
 801daf2:	68bb      	ldr	r3, [r7, #8]
 801daf4:	781b      	ldrb	r3, [r3, #0]
 801daf6:	461a      	mov	r2, r3
 801daf8:	68f9      	ldr	r1, [r7, #12]
 801dafa:	f000 ff25 	bl	801e948 <SUBGRF_ReadBuffer>

    return 0;
 801dafe:	2300      	movs	r3, #0
}
 801db00:	4618      	mov	r0, r3
 801db02:	3718      	adds	r7, #24
 801db04:	46bd      	mov	sp, r7
 801db06:	bd80      	pop	{r7, pc}

0801db08 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801db08:	b580      	push	{r7, lr}
 801db0a:	b084      	sub	sp, #16
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	60f8      	str	r0, [r7, #12]
 801db10:	460b      	mov	r3, r1
 801db12:	607a      	str	r2, [r7, #4]
 801db14:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801db16:	7afb      	ldrb	r3, [r7, #11]
 801db18:	4619      	mov	r1, r3
 801db1a:	68f8      	ldr	r0, [r7, #12]
 801db1c:	f7ff ffc2 	bl	801daa4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801db20:	6878      	ldr	r0, [r7, #4]
 801db22:	f000 f91b 	bl	801dd5c <SUBGRF_SetTx>
}
 801db26:	bf00      	nop
 801db28:	3710      	adds	r7, #16
 801db2a:	46bd      	mov	sp, r7
 801db2c:	bd80      	pop	{r7, pc}

0801db2e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801db2e:	b580      	push	{r7, lr}
 801db30:	b082      	sub	sp, #8
 801db32:	af00      	add	r7, sp, #0
 801db34:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801db36:	2208      	movs	r2, #8
 801db38:	6879      	ldr	r1, [r7, #4]
 801db3a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801db3e:	f000 fe9d 	bl	801e87c <SUBGRF_WriteRegisters>
    return 0;
 801db42:	2300      	movs	r3, #0
}
 801db44:	4618      	mov	r0, r3
 801db46:	3708      	adds	r7, #8
 801db48:	46bd      	mov	sp, r7
 801db4a:	bd80      	pop	{r7, pc}

0801db4c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801db4c:	b580      	push	{r7, lr}
 801db4e:	b084      	sub	sp, #16
 801db50:	af00      	add	r7, sp, #0
 801db52:	4603      	mov	r3, r0
 801db54:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801db56:	88fb      	ldrh	r3, [r7, #6]
 801db58:	0a1b      	lsrs	r3, r3, #8
 801db5a:	b29b      	uxth	r3, r3
 801db5c:	b2db      	uxtb	r3, r3
 801db5e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801db60:	88fb      	ldrh	r3, [r7, #6]
 801db62:	b2db      	uxtb	r3, r3
 801db64:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801db66:	f000 fb6f 	bl	801e248 <SUBGRF_GetPacketType>
 801db6a:	4603      	mov	r3, r0
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d108      	bne.n	801db82 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801db70:	f107 030c 	add.w	r3, r7, #12
 801db74:	2202      	movs	r2, #2
 801db76:	4619      	mov	r1, r3
 801db78:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801db7c:	f000 fe7e 	bl	801e87c <SUBGRF_WriteRegisters>
            break;
 801db80:	e000      	b.n	801db84 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801db82:	bf00      	nop
    }
}
 801db84:	bf00      	nop
 801db86:	3710      	adds	r7, #16
 801db88:	46bd      	mov	sp, r7
 801db8a:	bd80      	pop	{r7, pc}

0801db8c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b084      	sub	sp, #16
 801db90:	af00      	add	r7, sp, #0
 801db92:	4603      	mov	r3, r0
 801db94:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801db96:	88fb      	ldrh	r3, [r7, #6]
 801db98:	0a1b      	lsrs	r3, r3, #8
 801db9a:	b29b      	uxth	r3, r3
 801db9c:	b2db      	uxtb	r3, r3
 801db9e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801dba0:	88fb      	ldrh	r3, [r7, #6]
 801dba2:	b2db      	uxtb	r3, r3
 801dba4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801dba6:	f000 fb4f 	bl	801e248 <SUBGRF_GetPacketType>
 801dbaa:	4603      	mov	r3, r0
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d108      	bne.n	801dbc2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801dbb0:	f107 030c 	add.w	r3, r7, #12
 801dbb4:	2202      	movs	r2, #2
 801dbb6:	4619      	mov	r1, r3
 801dbb8:	f240 60be 	movw	r0, #1726	; 0x6be
 801dbbc:	f000 fe5e 	bl	801e87c <SUBGRF_WriteRegisters>
            break;
 801dbc0:	e000      	b.n	801dbc4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801dbc2:	bf00      	nop
    }
}
 801dbc4:	bf00      	nop
 801dbc6:	3710      	adds	r7, #16
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	bd80      	pop	{r7, pc}

0801dbcc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801dbcc:	b580      	push	{r7, lr}
 801dbce:	b084      	sub	sp, #16
 801dbd0:	af00      	add	r7, sp, #0
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801dbda:	f000 fb35 	bl	801e248 <SUBGRF_GetPacketType>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d121      	bne.n	801dc28 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801dbe4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801dbe8:	f000 fe34 	bl	801e854 <SUBGRF_ReadRegister>
 801dbec:	4603      	mov	r3, r0
 801dbee:	f023 0301 	bic.w	r3, r3, #1
 801dbf2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801dbf4:	88fb      	ldrh	r3, [r7, #6]
 801dbf6:	0a1b      	lsrs	r3, r3, #8
 801dbf8:	b29b      	uxth	r3, r3
 801dbfa:	b25b      	sxtb	r3, r3
 801dbfc:	f003 0301 	and.w	r3, r3, #1
 801dc00:	b25a      	sxtb	r2, r3
 801dc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dc06:	4313      	orrs	r3, r2
 801dc08:	b25b      	sxtb	r3, r3
 801dc0a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801dc0c:	7bfb      	ldrb	r3, [r7, #15]
 801dc0e:	4619      	mov	r1, r3
 801dc10:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801dc14:	f000 fe0a 	bl	801e82c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801dc18:	88fb      	ldrh	r3, [r7, #6]
 801dc1a:	b2db      	uxtb	r3, r3
 801dc1c:	4619      	mov	r1, r3
 801dc1e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801dc22:	f000 fe03 	bl	801e82c <SUBGRF_WriteRegister>
            break;
 801dc26:	e000      	b.n	801dc2a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801dc28:	bf00      	nop
    }
}
 801dc2a:	bf00      	nop
 801dc2c:	3710      	adds	r7, #16
 801dc2e:	46bd      	mov	sp, r7
 801dc30:	bd80      	pop	{r7, pc}

0801dc32 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801dc32:	b580      	push	{r7, lr}
 801dc34:	b082      	sub	sp, #8
 801dc36:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801dc38:	2300      	movs	r3, #0
 801dc3a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801dc3c:	2300      	movs	r3, #0
 801dc3e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801dc40:	2300      	movs	r3, #0
 801dc42:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801dc44:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801dc48:	f000 fe04 	bl	801e854 <SUBGRF_ReadRegister>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801dc50:	79fb      	ldrb	r3, [r7, #7]
 801dc52:	f023 0301 	bic.w	r3, r3, #1
 801dc56:	b2db      	uxtb	r3, r3
 801dc58:	4619      	mov	r1, r3
 801dc5a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801dc5e:	f000 fde5 	bl	801e82c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801dc62:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801dc66:	f000 fdf5 	bl	801e854 <SUBGRF_ReadRegister>
 801dc6a:	4603      	mov	r3, r0
 801dc6c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801dc6e:	79bb      	ldrb	r3, [r7, #6]
 801dc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dc74:	b2db      	uxtb	r3, r3
 801dc76:	4619      	mov	r1, r3
 801dc78:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801dc7c:	f000 fdd6 	bl	801e82c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801dc80:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801dc84:	f000 f88a 	bl	801dd9c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801dc88:	463b      	mov	r3, r7
 801dc8a:	2204      	movs	r2, #4
 801dc8c:	4619      	mov	r1, r3
 801dc8e:	f640 0019 	movw	r0, #2073	; 0x819
 801dc92:	f000 fe15 	bl	801e8c0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801dc96:	2000      	movs	r0, #0
 801dc98:	f000 f844 	bl	801dd24 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801dc9c:	79fb      	ldrb	r3, [r7, #7]
 801dc9e:	4619      	mov	r1, r3
 801dca0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801dca4:	f000 fdc2 	bl	801e82c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801dca8:	79bb      	ldrb	r3, [r7, #6]
 801dcaa:	4619      	mov	r1, r3
 801dcac:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801dcb0:	f000 fdbc 	bl	801e82c <SUBGRF_WriteRegister>

    return number;
 801dcb4:	683b      	ldr	r3, [r7, #0]
}
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	3708      	adds	r7, #8
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	bd80      	pop	{r7, pc}
	...

0801dcc0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801dcc0:	b580      	push	{r7, lr}
 801dcc2:	b084      	sub	sp, #16
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801dcc8:	2000      	movs	r0, #0
 801dcca:	f7f1 f85c 	bl	800ed86 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801dcce:	2002      	movs	r0, #2
 801dcd0:	f000 ffa4 	bl	801ec1c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dcd4:	793b      	ldrb	r3, [r7, #4]
 801dcd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dcda:	b2db      	uxtb	r3, r3
 801dcdc:	009b      	lsls	r3, r3, #2
 801dcde:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801dce0:	793b      	ldrb	r3, [r7, #4]
 801dce2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dce6:	b2db      	uxtb	r3, r3
 801dce8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dcea:	b25b      	sxtb	r3, r3
 801dcec:	4313      	orrs	r3, r2
 801dcee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801dcf0:	793b      	ldrb	r3, [r7, #4]
 801dcf2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dcf6:	b2db      	uxtb	r3, r3
 801dcf8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801dcfa:	4313      	orrs	r3, r2
 801dcfc:	b25b      	sxtb	r3, r3
 801dcfe:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dd00:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801dd02:	f107 030f 	add.w	r3, r7, #15
 801dd06:	2201      	movs	r2, #1
 801dd08:	4619      	mov	r1, r3
 801dd0a:	2084      	movs	r0, #132	; 0x84
 801dd0c:	f000 fe3e 	bl	801e98c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801dd10:	4b03      	ldr	r3, [pc, #12]	; (801dd20 <SUBGRF_SetSleep+0x60>)
 801dd12:	2200      	movs	r2, #0
 801dd14:	701a      	strb	r2, [r3, #0]
}
 801dd16:	bf00      	nop
 801dd18:	3710      	adds	r7, #16
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	bd80      	pop	{r7, pc}
 801dd1e:	bf00      	nop
 801dd20:	20001e58 	.word	0x20001e58

0801dd24 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b082      	sub	sp, #8
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	4603      	mov	r3, r0
 801dd2c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801dd2e:	1dfb      	adds	r3, r7, #7
 801dd30:	2201      	movs	r2, #1
 801dd32:	4619      	mov	r1, r3
 801dd34:	2080      	movs	r0, #128	; 0x80
 801dd36:	f000 fe29 	bl	801e98c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801dd3a:	79fb      	ldrb	r3, [r7, #7]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d103      	bne.n	801dd48 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801dd40:	4b05      	ldr	r3, [pc, #20]	; (801dd58 <SUBGRF_SetStandby+0x34>)
 801dd42:	2201      	movs	r2, #1
 801dd44:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801dd46:	e002      	b.n	801dd4e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801dd48:	4b03      	ldr	r3, [pc, #12]	; (801dd58 <SUBGRF_SetStandby+0x34>)
 801dd4a:	2202      	movs	r2, #2
 801dd4c:	701a      	strb	r2, [r3, #0]
}
 801dd4e:	bf00      	nop
 801dd50:	3708      	adds	r7, #8
 801dd52:	46bd      	mov	sp, r7
 801dd54:	bd80      	pop	{r7, pc}
 801dd56:	bf00      	nop
 801dd58:	20001e58 	.word	0x20001e58

0801dd5c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	b084      	sub	sp, #16
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801dd64:	4b0c      	ldr	r3, [pc, #48]	; (801dd98 <SUBGRF_SetTx+0x3c>)
 801dd66:	2204      	movs	r2, #4
 801dd68:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	0c1b      	lsrs	r3, r3, #16
 801dd6e:	b2db      	uxtb	r3, r3
 801dd70:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	0a1b      	lsrs	r3, r3, #8
 801dd76:	b2db      	uxtb	r3, r3
 801dd78:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	b2db      	uxtb	r3, r3
 801dd7e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801dd80:	f107 030c 	add.w	r3, r7, #12
 801dd84:	2203      	movs	r2, #3
 801dd86:	4619      	mov	r1, r3
 801dd88:	2083      	movs	r0, #131	; 0x83
 801dd8a:	f000 fdff 	bl	801e98c <SUBGRF_WriteCommand>
}
 801dd8e:	bf00      	nop
 801dd90:	3710      	adds	r7, #16
 801dd92:	46bd      	mov	sp, r7
 801dd94:	bd80      	pop	{r7, pc}
 801dd96:	bf00      	nop
 801dd98:	20001e58 	.word	0x20001e58

0801dd9c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b084      	sub	sp, #16
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dda4:	4b0c      	ldr	r3, [pc, #48]	; (801ddd8 <SUBGRF_SetRx+0x3c>)
 801dda6:	2205      	movs	r2, #5
 801dda8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	0c1b      	lsrs	r3, r3, #16
 801ddae:	b2db      	uxtb	r3, r3
 801ddb0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	0a1b      	lsrs	r3, r3, #8
 801ddb6:	b2db      	uxtb	r3, r3
 801ddb8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	b2db      	uxtb	r3, r3
 801ddbe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801ddc0:	f107 030c 	add.w	r3, r7, #12
 801ddc4:	2203      	movs	r2, #3
 801ddc6:	4619      	mov	r1, r3
 801ddc8:	2082      	movs	r0, #130	; 0x82
 801ddca:	f000 fddf 	bl	801e98c <SUBGRF_WriteCommand>
}
 801ddce:	bf00      	nop
 801ddd0:	3710      	adds	r7, #16
 801ddd2:	46bd      	mov	sp, r7
 801ddd4:	bd80      	pop	{r7, pc}
 801ddd6:	bf00      	nop
 801ddd8:	20001e58 	.word	0x20001e58

0801dddc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b084      	sub	sp, #16
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dde4:	4b0e      	ldr	r3, [pc, #56]	; (801de20 <SUBGRF_SetRxBoosted+0x44>)
 801dde6:	2205      	movs	r2, #5
 801dde8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801ddea:	2197      	movs	r1, #151	; 0x97
 801ddec:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801ddf0:	f000 fd1c 	bl	801e82c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	0c1b      	lsrs	r3, r3, #16
 801ddf8:	b2db      	uxtb	r3, r3
 801ddfa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	0a1b      	lsrs	r3, r3, #8
 801de00:	b2db      	uxtb	r3, r3
 801de02:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	b2db      	uxtb	r3, r3
 801de08:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801de0a:	f107 030c 	add.w	r3, r7, #12
 801de0e:	2203      	movs	r2, #3
 801de10:	4619      	mov	r1, r3
 801de12:	2082      	movs	r0, #130	; 0x82
 801de14:	f000 fdba 	bl	801e98c <SUBGRF_WriteCommand>
}
 801de18:	bf00      	nop
 801de1a:	3710      	adds	r7, #16
 801de1c:	46bd      	mov	sp, r7
 801de1e:	bd80      	pop	{r7, pc}
 801de20:	20001e58 	.word	0x20001e58

0801de24 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801de24:	b580      	push	{r7, lr}
 801de26:	b084      	sub	sp, #16
 801de28:	af00      	add	r7, sp, #0
 801de2a:	6078      	str	r0, [r7, #4]
 801de2c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	0c1b      	lsrs	r3, r3, #16
 801de32:	b2db      	uxtb	r3, r3
 801de34:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	0a1b      	lsrs	r3, r3, #8
 801de3a:	b2db      	uxtb	r3, r3
 801de3c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	b2db      	uxtb	r3, r3
 801de42:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801de44:	683b      	ldr	r3, [r7, #0]
 801de46:	0c1b      	lsrs	r3, r3, #16
 801de48:	b2db      	uxtb	r3, r3
 801de4a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801de4c:	683b      	ldr	r3, [r7, #0]
 801de4e:	0a1b      	lsrs	r3, r3, #8
 801de50:	b2db      	uxtb	r3, r3
 801de52:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801de54:	683b      	ldr	r3, [r7, #0]
 801de56:	b2db      	uxtb	r3, r3
 801de58:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801de5a:	f107 0308 	add.w	r3, r7, #8
 801de5e:	2206      	movs	r2, #6
 801de60:	4619      	mov	r1, r3
 801de62:	2094      	movs	r0, #148	; 0x94
 801de64:	f000 fd92 	bl	801e98c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801de68:	4b03      	ldr	r3, [pc, #12]	; (801de78 <SUBGRF_SetRxDutyCycle+0x54>)
 801de6a:	2206      	movs	r2, #6
 801de6c:	701a      	strb	r2, [r3, #0]
}
 801de6e:	bf00      	nop
 801de70:	3710      	adds	r7, #16
 801de72:	46bd      	mov	sp, r7
 801de74:	bd80      	pop	{r7, pc}
 801de76:	bf00      	nop
 801de78:	20001e58 	.word	0x20001e58

0801de7c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801de7c:	b580      	push	{r7, lr}
 801de7e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801de80:	2200      	movs	r2, #0
 801de82:	2100      	movs	r1, #0
 801de84:	20c5      	movs	r0, #197	; 0xc5
 801de86:	f000 fd81 	bl	801e98c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801de8a:	4b02      	ldr	r3, [pc, #8]	; (801de94 <SUBGRF_SetCad+0x18>)
 801de8c:	2207      	movs	r2, #7
 801de8e:	701a      	strb	r2, [r3, #0]
}
 801de90:	bf00      	nop
 801de92:	bd80      	pop	{r7, pc}
 801de94:	20001e58 	.word	0x20001e58

0801de98 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801de9c:	2200      	movs	r2, #0
 801de9e:	2100      	movs	r1, #0
 801dea0:	20d1      	movs	r0, #209	; 0xd1
 801dea2:	f000 fd73 	bl	801e98c <SUBGRF_WriteCommand>
}
 801dea6:	bf00      	nop
 801dea8:	bd80      	pop	{r7, pc}

0801deaa <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801deaa:	b580      	push	{r7, lr}
 801deac:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801deae:	2200      	movs	r2, #0
 801deb0:	2100      	movs	r1, #0
 801deb2:	20d2      	movs	r0, #210	; 0xd2
 801deb4:	f000 fd6a 	bl	801e98c <SUBGRF_WriteCommand>
}
 801deb8:	bf00      	nop
 801deba:	bd80      	pop	{r7, pc}

0801debc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801debc:	b580      	push	{r7, lr}
 801debe:	b082      	sub	sp, #8
 801dec0:	af00      	add	r7, sp, #0
 801dec2:	4603      	mov	r3, r0
 801dec4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801dec6:	1dfb      	adds	r3, r7, #7
 801dec8:	2201      	movs	r2, #1
 801deca:	4619      	mov	r1, r3
 801decc:	209f      	movs	r0, #159	; 0x9f
 801dece:	f000 fd5d 	bl	801e98c <SUBGRF_WriteCommand>
}
 801ded2:	bf00      	nop
 801ded4:	3708      	adds	r7, #8
 801ded6:	46bd      	mov	sp, r7
 801ded8:	bd80      	pop	{r7, pc}

0801deda <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801deda:	b580      	push	{r7, lr}
 801dedc:	b084      	sub	sp, #16
 801dede:	af00      	add	r7, sp, #0
 801dee0:	4603      	mov	r3, r0
 801dee2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801dee4:	1dfb      	adds	r3, r7, #7
 801dee6:	2201      	movs	r2, #1
 801dee8:	4619      	mov	r1, r3
 801deea:	20a0      	movs	r0, #160	; 0xa0
 801deec:	f000 fd4e 	bl	801e98c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801def0:	79fb      	ldrb	r3, [r7, #7]
 801def2:	2b3f      	cmp	r3, #63	; 0x3f
 801def4:	d91c      	bls.n	801df30 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801def6:	79fb      	ldrb	r3, [r7, #7]
 801def8:	085b      	lsrs	r3, r3, #1
 801defa:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801defc:	2300      	movs	r3, #0
 801defe:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801df00:	2300      	movs	r3, #0
 801df02:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801df04:	e005      	b.n	801df12 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801df06:	7bfb      	ldrb	r3, [r7, #15]
 801df08:	089b      	lsrs	r3, r3, #2
 801df0a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801df0c:	7bbb      	ldrb	r3, [r7, #14]
 801df0e:	3301      	adds	r3, #1
 801df10:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801df12:	7bfb      	ldrb	r3, [r7, #15]
 801df14:	2b1f      	cmp	r3, #31
 801df16:	d8f6      	bhi.n	801df06 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801df18:	7bfb      	ldrb	r3, [r7, #15]
 801df1a:	00db      	lsls	r3, r3, #3
 801df1c:	b2da      	uxtb	r2, r3
 801df1e:	7bbb      	ldrb	r3, [r7, #14]
 801df20:	4413      	add	r3, r2
 801df22:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801df24:	7b7b      	ldrb	r3, [r7, #13]
 801df26:	4619      	mov	r1, r3
 801df28:	f240 7006 	movw	r0, #1798	; 0x706
 801df2c:	f000 fc7e 	bl	801e82c <SUBGRF_WriteRegister>
    }
}
 801df30:	bf00      	nop
 801df32:	3710      	adds	r7, #16
 801df34:	46bd      	mov	sp, r7
 801df36:	bd80      	pop	{r7, pc}

0801df38 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801df38:	b580      	push	{r7, lr}
 801df3a:	b082      	sub	sp, #8
 801df3c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801df3e:	f7f0 ff3e 	bl	800edbe <RBI_IsDCDC>
 801df42:	4603      	mov	r3, r0
 801df44:	2b01      	cmp	r3, #1
 801df46:	d102      	bne.n	801df4e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801df48:	2301      	movs	r3, #1
 801df4a:	71fb      	strb	r3, [r7, #7]
 801df4c:	e001      	b.n	801df52 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801df4e:	2300      	movs	r3, #0
 801df50:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801df52:	1dfb      	adds	r3, r7, #7
 801df54:	2201      	movs	r2, #1
 801df56:	4619      	mov	r1, r3
 801df58:	2096      	movs	r0, #150	; 0x96
 801df5a:	f000 fd17 	bl	801e98c <SUBGRF_WriteCommand>
}
 801df5e:	bf00      	nop
 801df60:	3708      	adds	r7, #8
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}

0801df66 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801df66:	b580      	push	{r7, lr}
 801df68:	b084      	sub	sp, #16
 801df6a:	af00      	add	r7, sp, #0
 801df6c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801df6e:	793b      	ldrb	r3, [r7, #4]
 801df70:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801df74:	b2db      	uxtb	r3, r3
 801df76:	019b      	lsls	r3, r3, #6
 801df78:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801df7a:	793b      	ldrb	r3, [r7, #4]
 801df7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801df80:	b2db      	uxtb	r3, r3
 801df82:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801df84:	b25b      	sxtb	r3, r3
 801df86:	4313      	orrs	r3, r2
 801df88:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801df8a:	793b      	ldrb	r3, [r7, #4]
 801df8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801df90:	b2db      	uxtb	r3, r3
 801df92:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801df94:	b25b      	sxtb	r3, r3
 801df96:	4313      	orrs	r3, r2
 801df98:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801df9a:	793b      	ldrb	r3, [r7, #4]
 801df9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dfa0:	b2db      	uxtb	r3, r3
 801dfa2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801dfa4:	b25b      	sxtb	r3, r3
 801dfa6:	4313      	orrs	r3, r2
 801dfa8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801dfaa:	793b      	ldrb	r3, [r7, #4]
 801dfac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dfb0:	b2db      	uxtb	r3, r3
 801dfb2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801dfb4:	b25b      	sxtb	r3, r3
 801dfb6:	4313      	orrs	r3, r2
 801dfb8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801dfba:	793b      	ldrb	r3, [r7, #4]
 801dfbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dfc0:	b2db      	uxtb	r3, r3
 801dfc2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801dfc4:	b25b      	sxtb	r3, r3
 801dfc6:	4313      	orrs	r3, r2
 801dfc8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801dfca:	793b      	ldrb	r3, [r7, #4]
 801dfcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dfd0:	b2db      	uxtb	r3, r3
 801dfd2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801dfd4:	4313      	orrs	r3, r2
 801dfd6:	b25b      	sxtb	r3, r3
 801dfd8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801dfda:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801dfdc:	f107 030f 	add.w	r3, r7, #15
 801dfe0:	2201      	movs	r2, #1
 801dfe2:	4619      	mov	r1, r3
 801dfe4:	2089      	movs	r0, #137	; 0x89
 801dfe6:	f000 fcd1 	bl	801e98c <SUBGRF_WriteCommand>
}
 801dfea:	bf00      	nop
 801dfec:	3710      	adds	r7, #16
 801dfee:	46bd      	mov	sp, r7
 801dff0:	bd80      	pop	{r7, pc}
	...

0801dff4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801dff4:	b580      	push	{r7, lr}
 801dff6:	b084      	sub	sp, #16
 801dff8:	af00      	add	r7, sp, #0
 801dffa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	4a1d      	ldr	r2, [pc, #116]	; (801e074 <SUBGRF_CalibrateImage+0x80>)
 801e000:	4293      	cmp	r3, r2
 801e002:	d904      	bls.n	801e00e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801e004:	23e1      	movs	r3, #225	; 0xe1
 801e006:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801e008:	23e9      	movs	r3, #233	; 0xe9
 801e00a:	737b      	strb	r3, [r7, #13]
 801e00c:	e027      	b.n	801e05e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	4a19      	ldr	r2, [pc, #100]	; (801e078 <SUBGRF_CalibrateImage+0x84>)
 801e012:	4293      	cmp	r3, r2
 801e014:	d904      	bls.n	801e020 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801e016:	23d7      	movs	r3, #215	; 0xd7
 801e018:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801e01a:	23db      	movs	r3, #219	; 0xdb
 801e01c:	737b      	strb	r3, [r7, #13]
 801e01e:	e01e      	b.n	801e05e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	4a16      	ldr	r2, [pc, #88]	; (801e07c <SUBGRF_CalibrateImage+0x88>)
 801e024:	4293      	cmp	r3, r2
 801e026:	d904      	bls.n	801e032 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801e028:	23c1      	movs	r3, #193	; 0xc1
 801e02a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801e02c:	23c5      	movs	r3, #197	; 0xc5
 801e02e:	737b      	strb	r3, [r7, #13]
 801e030:	e015      	b.n	801e05e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	4a12      	ldr	r2, [pc, #72]	; (801e080 <SUBGRF_CalibrateImage+0x8c>)
 801e036:	4293      	cmp	r3, r2
 801e038:	d904      	bls.n	801e044 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801e03a:	2375      	movs	r3, #117	; 0x75
 801e03c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801e03e:	2381      	movs	r3, #129	; 0x81
 801e040:	737b      	strb	r3, [r7, #13]
 801e042:	e00c      	b.n	801e05e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	4a0f      	ldr	r2, [pc, #60]	; (801e084 <SUBGRF_CalibrateImage+0x90>)
 801e048:	4293      	cmp	r3, r2
 801e04a:	d904      	bls.n	801e056 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801e04c:	236b      	movs	r3, #107	; 0x6b
 801e04e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801e050:	236f      	movs	r3, #111	; 0x6f
 801e052:	737b      	strb	r3, [r7, #13]
 801e054:	e003      	b.n	801e05e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801e056:	2329      	movs	r3, #41	; 0x29
 801e058:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801e05a:	232b      	movs	r3, #43	; 0x2b
 801e05c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801e05e:	f107 030c 	add.w	r3, r7, #12
 801e062:	2202      	movs	r2, #2
 801e064:	4619      	mov	r1, r3
 801e066:	2098      	movs	r0, #152	; 0x98
 801e068:	f000 fc90 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e06c:	bf00      	nop
 801e06e:	3710      	adds	r7, #16
 801e070:	46bd      	mov	sp, r7
 801e072:	bd80      	pop	{r7, pc}
 801e074:	35a4e900 	.word	0x35a4e900
 801e078:	32a9f880 	.word	0x32a9f880
 801e07c:	2de54480 	.word	0x2de54480
 801e080:	1b6b0b00 	.word	0x1b6b0b00
 801e084:	1954fc40 	.word	0x1954fc40

0801e088 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801e088:	b590      	push	{r4, r7, lr}
 801e08a:	b085      	sub	sp, #20
 801e08c:	af00      	add	r7, sp, #0
 801e08e:	4604      	mov	r4, r0
 801e090:	4608      	mov	r0, r1
 801e092:	4611      	mov	r1, r2
 801e094:	461a      	mov	r2, r3
 801e096:	4623      	mov	r3, r4
 801e098:	71fb      	strb	r3, [r7, #7]
 801e09a:	4603      	mov	r3, r0
 801e09c:	71bb      	strb	r3, [r7, #6]
 801e09e:	460b      	mov	r3, r1
 801e0a0:	717b      	strb	r3, [r7, #5]
 801e0a2:	4613      	mov	r3, r2
 801e0a4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801e0a6:	79fb      	ldrb	r3, [r7, #7]
 801e0a8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801e0aa:	79bb      	ldrb	r3, [r7, #6]
 801e0ac:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801e0ae:	797b      	ldrb	r3, [r7, #5]
 801e0b0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801e0b2:	793b      	ldrb	r3, [r7, #4]
 801e0b4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801e0b6:	f107 030c 	add.w	r3, r7, #12
 801e0ba:	2204      	movs	r2, #4
 801e0bc:	4619      	mov	r1, r3
 801e0be:	2095      	movs	r0, #149	; 0x95
 801e0c0:	f000 fc64 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e0c4:	bf00      	nop
 801e0c6:	3714      	adds	r7, #20
 801e0c8:	46bd      	mov	sp, r7
 801e0ca:	bd90      	pop	{r4, r7, pc}

0801e0cc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801e0cc:	b590      	push	{r4, r7, lr}
 801e0ce:	b085      	sub	sp, #20
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	4604      	mov	r4, r0
 801e0d4:	4608      	mov	r0, r1
 801e0d6:	4611      	mov	r1, r2
 801e0d8:	461a      	mov	r2, r3
 801e0da:	4623      	mov	r3, r4
 801e0dc:	80fb      	strh	r3, [r7, #6]
 801e0de:	4603      	mov	r3, r0
 801e0e0:	80bb      	strh	r3, [r7, #4]
 801e0e2:	460b      	mov	r3, r1
 801e0e4:	807b      	strh	r3, [r7, #2]
 801e0e6:	4613      	mov	r3, r2
 801e0e8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801e0ea:	88fb      	ldrh	r3, [r7, #6]
 801e0ec:	0a1b      	lsrs	r3, r3, #8
 801e0ee:	b29b      	uxth	r3, r3
 801e0f0:	b2db      	uxtb	r3, r3
 801e0f2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801e0f4:	88fb      	ldrh	r3, [r7, #6]
 801e0f6:	b2db      	uxtb	r3, r3
 801e0f8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801e0fa:	88bb      	ldrh	r3, [r7, #4]
 801e0fc:	0a1b      	lsrs	r3, r3, #8
 801e0fe:	b29b      	uxth	r3, r3
 801e100:	b2db      	uxtb	r3, r3
 801e102:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801e104:	88bb      	ldrh	r3, [r7, #4]
 801e106:	b2db      	uxtb	r3, r3
 801e108:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801e10a:	887b      	ldrh	r3, [r7, #2]
 801e10c:	0a1b      	lsrs	r3, r3, #8
 801e10e:	b29b      	uxth	r3, r3
 801e110:	b2db      	uxtb	r3, r3
 801e112:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801e114:	887b      	ldrh	r3, [r7, #2]
 801e116:	b2db      	uxtb	r3, r3
 801e118:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801e11a:	883b      	ldrh	r3, [r7, #0]
 801e11c:	0a1b      	lsrs	r3, r3, #8
 801e11e:	b29b      	uxth	r3, r3
 801e120:	b2db      	uxtb	r3, r3
 801e122:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801e124:	883b      	ldrh	r3, [r7, #0]
 801e126:	b2db      	uxtb	r3, r3
 801e128:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801e12a:	f107 0308 	add.w	r3, r7, #8
 801e12e:	2208      	movs	r2, #8
 801e130:	4619      	mov	r1, r3
 801e132:	2008      	movs	r0, #8
 801e134:	f000 fc2a 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e138:	bf00      	nop
 801e13a:	3714      	adds	r7, #20
 801e13c:	46bd      	mov	sp, r7
 801e13e:	bd90      	pop	{r4, r7, pc}

0801e140 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801e140:	b580      	push	{r7, lr}
 801e142:	b084      	sub	sp, #16
 801e144:	af00      	add	r7, sp, #0
 801e146:	4603      	mov	r3, r0
 801e148:	6039      	str	r1, [r7, #0]
 801e14a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801e14c:	79fb      	ldrb	r3, [r7, #7]
 801e14e:	f003 0307 	and.w	r3, r3, #7
 801e152:	b2db      	uxtb	r3, r3
 801e154:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e156:	683b      	ldr	r3, [r7, #0]
 801e158:	0c1b      	lsrs	r3, r3, #16
 801e15a:	b2db      	uxtb	r3, r3
 801e15c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e15e:	683b      	ldr	r3, [r7, #0]
 801e160:	0a1b      	lsrs	r3, r3, #8
 801e162:	b2db      	uxtb	r3, r3
 801e164:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801e166:	683b      	ldr	r3, [r7, #0]
 801e168:	b2db      	uxtb	r3, r3
 801e16a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801e16c:	f107 030c 	add.w	r3, r7, #12
 801e170:	2204      	movs	r2, #4
 801e172:	4619      	mov	r1, r3
 801e174:	2097      	movs	r0, #151	; 0x97
 801e176:	f000 fc09 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e17a:	bf00      	nop
 801e17c:	3710      	adds	r7, #16
 801e17e:	46bd      	mov	sp, r7
 801e180:	bd80      	pop	{r7, pc}
	...

0801e184 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801e184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e188:	b084      	sub	sp, #16
 801e18a:	af00      	add	r7, sp, #0
 801e18c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801e18e:	2300      	movs	r3, #0
 801e190:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801e192:	4b1d      	ldr	r3, [pc, #116]	; (801e208 <SUBGRF_SetRfFrequency+0x84>)
 801e194:	781b      	ldrb	r3, [r3, #0]
 801e196:	f083 0301 	eor.w	r3, r3, #1
 801e19a:	b2db      	uxtb	r3, r3
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d005      	beq.n	801e1ac <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801e1a0:	6878      	ldr	r0, [r7, #4]
 801e1a2:	f7ff ff27 	bl	801dff4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801e1a6:	4b18      	ldr	r3, [pc, #96]	; (801e208 <SUBGRF_SetRfFrequency+0x84>)
 801e1a8:	2201      	movs	r2, #1
 801e1aa:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	2200      	movs	r2, #0
 801e1b0:	461c      	mov	r4, r3
 801e1b2:	4615      	mov	r5, r2
 801e1b4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e1b8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e1bc:	4a13      	ldr	r2, [pc, #76]	; (801e20c <SUBGRF_SetRfFrequency+0x88>)
 801e1be:	f04f 0300 	mov.w	r3, #0
 801e1c2:	4640      	mov	r0, r8
 801e1c4:	4649      	mov	r1, r9
 801e1c6:	f7e2 ffa5 	bl	8001114 <__aeabi_uldivmod>
 801e1ca:	4602      	mov	r2, r0
 801e1cc:	460b      	mov	r3, r1
 801e1ce:	4613      	mov	r3, r2
 801e1d0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801e1d2:	68fb      	ldr	r3, [r7, #12]
 801e1d4:	0e1b      	lsrs	r3, r3, #24
 801e1d6:	b2db      	uxtb	r3, r3
 801e1d8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801e1da:	68fb      	ldr	r3, [r7, #12]
 801e1dc:	0c1b      	lsrs	r3, r3, #16
 801e1de:	b2db      	uxtb	r3, r3
 801e1e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	0a1b      	lsrs	r3, r3, #8
 801e1e6:	b2db      	uxtb	r3, r3
 801e1e8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	b2db      	uxtb	r3, r3
 801e1ee:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801e1f0:	f107 0308 	add.w	r3, r7, #8
 801e1f4:	2204      	movs	r2, #4
 801e1f6:	4619      	mov	r1, r3
 801e1f8:	2086      	movs	r0, #134	; 0x86
 801e1fa:	f000 fbc7 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e1fe:	bf00      	nop
 801e200:	3710      	adds	r7, #16
 801e202:	46bd      	mov	sp, r7
 801e204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e208:	20001e60 	.word	0x20001e60
 801e20c:	01e84800 	.word	0x01e84800

0801e210 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801e210:	b580      	push	{r7, lr}
 801e212:	b082      	sub	sp, #8
 801e214:	af00      	add	r7, sp, #0
 801e216:	4603      	mov	r3, r0
 801e218:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801e21a:	79fa      	ldrb	r2, [r7, #7]
 801e21c:	4b09      	ldr	r3, [pc, #36]	; (801e244 <SUBGRF_SetPacketType+0x34>)
 801e21e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801e220:	79fb      	ldrb	r3, [r7, #7]
 801e222:	2b00      	cmp	r3, #0
 801e224:	d104      	bne.n	801e230 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801e226:	2100      	movs	r1, #0
 801e228:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801e22c:	f000 fafe 	bl	801e82c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801e230:	1dfb      	adds	r3, r7, #7
 801e232:	2201      	movs	r2, #1
 801e234:	4619      	mov	r1, r3
 801e236:	208a      	movs	r0, #138	; 0x8a
 801e238:	f000 fba8 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e23c:	bf00      	nop
 801e23e:	3708      	adds	r7, #8
 801e240:	46bd      	mov	sp, r7
 801e242:	bd80      	pop	{r7, pc}
 801e244:	20001e59 	.word	0x20001e59

0801e248 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801e248:	b480      	push	{r7}
 801e24a:	af00      	add	r7, sp, #0
    return PacketType;
 801e24c:	4b02      	ldr	r3, [pc, #8]	; (801e258 <SUBGRF_GetPacketType+0x10>)
 801e24e:	781b      	ldrb	r3, [r3, #0]
}
 801e250:	4618      	mov	r0, r3
 801e252:	46bd      	mov	sp, r7
 801e254:	bc80      	pop	{r7}
 801e256:	4770      	bx	lr
 801e258:	20001e59 	.word	0x20001e59

0801e25c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801e25c:	b580      	push	{r7, lr}
 801e25e:	b084      	sub	sp, #16
 801e260:	af00      	add	r7, sp, #0
 801e262:	4603      	mov	r3, r0
 801e264:	71fb      	strb	r3, [r7, #7]
 801e266:	460b      	mov	r3, r1
 801e268:	71bb      	strb	r3, [r7, #6]
 801e26a:	4613      	mov	r3, r2
 801e26c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801e26e:	79fb      	ldrb	r3, [r7, #7]
 801e270:	2b01      	cmp	r3, #1
 801e272:	d149      	bne.n	801e308 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801e274:	2000      	movs	r0, #0
 801e276:	f7f0 fda9 	bl	800edcc <RBI_GetRFOMaxPowerConfig>
 801e27a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801e27c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e280:	68fa      	ldr	r2, [r7, #12]
 801e282:	429a      	cmp	r2, r3
 801e284:	da01      	bge.n	801e28a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801e286:	68fb      	ldr	r3, [r7, #12]
 801e288:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	2b0e      	cmp	r3, #14
 801e28e:	d10e      	bne.n	801e2ae <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801e290:	2301      	movs	r3, #1
 801e292:	2201      	movs	r2, #1
 801e294:	2100      	movs	r1, #0
 801e296:	2004      	movs	r0, #4
 801e298:	f7ff fef6 	bl	801e088 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e29c:	79ba      	ldrb	r2, [r7, #6]
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	b2db      	uxtb	r3, r3
 801e2a2:	1ad3      	subs	r3, r2, r3
 801e2a4:	b2db      	uxtb	r3, r3
 801e2a6:	330e      	adds	r3, #14
 801e2a8:	b2db      	uxtb	r3, r3
 801e2aa:	71bb      	strb	r3, [r7, #6]
 801e2ac:	e01f      	b.n	801e2ee <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	2b0a      	cmp	r3, #10
 801e2b2:	d10e      	bne.n	801e2d2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801e2b4:	2301      	movs	r3, #1
 801e2b6:	2201      	movs	r2, #1
 801e2b8:	2100      	movs	r1, #0
 801e2ba:	2001      	movs	r0, #1
 801e2bc:	f7ff fee4 	bl	801e088 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801e2c0:	79ba      	ldrb	r2, [r7, #6]
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	b2db      	uxtb	r3, r3
 801e2c6:	1ad3      	subs	r3, r2, r3
 801e2c8:	b2db      	uxtb	r3, r3
 801e2ca:	330d      	adds	r3, #13
 801e2cc:	b2db      	uxtb	r3, r3
 801e2ce:	71bb      	strb	r3, [r7, #6]
 801e2d0:	e00d      	b.n	801e2ee <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801e2d2:	2301      	movs	r3, #1
 801e2d4:	2201      	movs	r2, #1
 801e2d6:	2100      	movs	r1, #0
 801e2d8:	2007      	movs	r0, #7
 801e2da:	f7ff fed5 	bl	801e088 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e2de:	79ba      	ldrb	r2, [r7, #6]
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	b2db      	uxtb	r3, r3
 801e2e4:	1ad3      	subs	r3, r2, r3
 801e2e6:	b2db      	uxtb	r3, r3
 801e2e8:	330e      	adds	r3, #14
 801e2ea:	b2db      	uxtb	r3, r3
 801e2ec:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801e2ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e2f2:	f113 0f11 	cmn.w	r3, #17
 801e2f6:	da01      	bge.n	801e2fc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801e2f8:	23ef      	movs	r3, #239	; 0xef
 801e2fa:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801e2fc:	2118      	movs	r1, #24
 801e2fe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e302:	f000 fa93 	bl	801e82c <SUBGRF_WriteRegister>
 801e306:	e067      	b.n	801e3d8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801e308:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e30c:	f000 faa2 	bl	801e854 <SUBGRF_ReadRegister>
 801e310:	4603      	mov	r3, r0
 801e312:	f043 031e 	orr.w	r3, r3, #30
 801e316:	b2db      	uxtb	r3, r3
 801e318:	4619      	mov	r1, r3
 801e31a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e31e:	f000 fa85 	bl	801e82c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801e322:	2001      	movs	r0, #1
 801e324:	f7f0 fd52 	bl	800edcc <RBI_GetRFOMaxPowerConfig>
 801e328:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801e32a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e32e:	68fa      	ldr	r2, [r7, #12]
 801e330:	429a      	cmp	r2, r3
 801e332:	da01      	bge.n	801e338 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801e334:	68fb      	ldr	r3, [r7, #12]
 801e336:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	2b14      	cmp	r3, #20
 801e33c:	d10e      	bne.n	801e35c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801e33e:	2301      	movs	r3, #1
 801e340:	2200      	movs	r2, #0
 801e342:	2105      	movs	r1, #5
 801e344:	2003      	movs	r0, #3
 801e346:	f7ff fe9f 	bl	801e088 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e34a:	79ba      	ldrb	r2, [r7, #6]
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	b2db      	uxtb	r3, r3
 801e350:	1ad3      	subs	r3, r2, r3
 801e352:	b2db      	uxtb	r3, r3
 801e354:	3316      	adds	r3, #22
 801e356:	b2db      	uxtb	r3, r3
 801e358:	71bb      	strb	r3, [r7, #6]
 801e35a:	e031      	b.n	801e3c0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801e35c:	68fb      	ldr	r3, [r7, #12]
 801e35e:	2b11      	cmp	r3, #17
 801e360:	d10e      	bne.n	801e380 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801e362:	2301      	movs	r3, #1
 801e364:	2200      	movs	r2, #0
 801e366:	2103      	movs	r1, #3
 801e368:	2002      	movs	r0, #2
 801e36a:	f7ff fe8d 	bl	801e088 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e36e:	79ba      	ldrb	r2, [r7, #6]
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	b2db      	uxtb	r3, r3
 801e374:	1ad3      	subs	r3, r2, r3
 801e376:	b2db      	uxtb	r3, r3
 801e378:	3316      	adds	r3, #22
 801e37a:	b2db      	uxtb	r3, r3
 801e37c:	71bb      	strb	r3, [r7, #6]
 801e37e:	e01f      	b.n	801e3c0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	2b0e      	cmp	r3, #14
 801e384:	d10e      	bne.n	801e3a4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801e386:	2301      	movs	r3, #1
 801e388:	2200      	movs	r2, #0
 801e38a:	2102      	movs	r1, #2
 801e38c:	2002      	movs	r0, #2
 801e38e:	f7ff fe7b 	bl	801e088 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e392:	79ba      	ldrb	r2, [r7, #6]
 801e394:	68fb      	ldr	r3, [r7, #12]
 801e396:	b2db      	uxtb	r3, r3
 801e398:	1ad3      	subs	r3, r2, r3
 801e39a:	b2db      	uxtb	r3, r3
 801e39c:	330e      	adds	r3, #14
 801e39e:	b2db      	uxtb	r3, r3
 801e3a0:	71bb      	strb	r3, [r7, #6]
 801e3a2:	e00d      	b.n	801e3c0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801e3a4:	2301      	movs	r3, #1
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	2107      	movs	r1, #7
 801e3aa:	2004      	movs	r0, #4
 801e3ac:	f7ff fe6c 	bl	801e088 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e3b0:	79ba      	ldrb	r2, [r7, #6]
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	b2db      	uxtb	r3, r3
 801e3b6:	1ad3      	subs	r3, r2, r3
 801e3b8:	b2db      	uxtb	r3, r3
 801e3ba:	3316      	adds	r3, #22
 801e3bc:	b2db      	uxtb	r3, r3
 801e3be:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801e3c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e3c4:	f113 0f09 	cmn.w	r3, #9
 801e3c8:	da01      	bge.n	801e3ce <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801e3ca:	23f7      	movs	r3, #247	; 0xf7
 801e3cc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801e3ce:	2138      	movs	r1, #56	; 0x38
 801e3d0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e3d4:	f000 fa2a 	bl	801e82c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801e3d8:	79bb      	ldrb	r3, [r7, #6]
 801e3da:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801e3dc:	797b      	ldrb	r3, [r7, #5]
 801e3de:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801e3e0:	f107 0308 	add.w	r3, r7, #8
 801e3e4:	2202      	movs	r2, #2
 801e3e6:	4619      	mov	r1, r3
 801e3e8:	208e      	movs	r0, #142	; 0x8e
 801e3ea:	f000 facf 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e3ee:	bf00      	nop
 801e3f0:	3710      	adds	r7, #16
 801e3f2:	46bd      	mov	sp, r7
 801e3f4:	bd80      	pop	{r7, pc}
	...

0801e3f8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801e3f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e3fc:	b086      	sub	sp, #24
 801e3fe:	af00      	add	r7, sp, #0
 801e400:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801e402:	2300      	movs	r3, #0
 801e404:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e406:	4a61      	ldr	r2, [pc, #388]	; (801e58c <SUBGRF_SetModulationParams+0x194>)
 801e408:	f107 0308 	add.w	r3, r7, #8
 801e40c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e410:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	781a      	ldrb	r2, [r3, #0]
 801e418:	4b5d      	ldr	r3, [pc, #372]	; (801e590 <SUBGRF_SetModulationParams+0x198>)
 801e41a:	781b      	ldrb	r3, [r3, #0]
 801e41c:	429a      	cmp	r2, r3
 801e41e:	d004      	beq.n	801e42a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	781b      	ldrb	r3, [r3, #0]
 801e424:	4618      	mov	r0, r3
 801e426:	f7ff fef3 	bl	801e210 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	781b      	ldrb	r3, [r3, #0]
 801e42e:	2b03      	cmp	r3, #3
 801e430:	f200 80a5 	bhi.w	801e57e <SUBGRF_SetModulationParams+0x186>
 801e434:	a201      	add	r2, pc, #4	; (adr r2, 801e43c <SUBGRF_SetModulationParams+0x44>)
 801e436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e43a:	bf00      	nop
 801e43c:	0801e44d 	.word	0x0801e44d
 801e440:	0801e50d 	.word	0x0801e50d
 801e444:	0801e4cf 	.word	0x0801e4cf
 801e448:	0801e53b 	.word	0x0801e53b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801e44c:	2308      	movs	r3, #8
 801e44e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	685b      	ldr	r3, [r3, #4]
 801e454:	4a4f      	ldr	r2, [pc, #316]	; (801e594 <SUBGRF_SetModulationParams+0x19c>)
 801e456:	fbb2 f3f3 	udiv	r3, r2, r3
 801e45a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e45c:	697b      	ldr	r3, [r7, #20]
 801e45e:	0c1b      	lsrs	r3, r3, #16
 801e460:	b2db      	uxtb	r3, r3
 801e462:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e464:	697b      	ldr	r3, [r7, #20]
 801e466:	0a1b      	lsrs	r3, r3, #8
 801e468:	b2db      	uxtb	r3, r3
 801e46a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e46c:	697b      	ldr	r3, [r7, #20]
 801e46e:	b2db      	uxtb	r3, r3
 801e470:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	7b1b      	ldrb	r3, [r3, #12]
 801e476:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	7b5b      	ldrb	r3, [r3, #13]
 801e47c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	689b      	ldr	r3, [r3, #8]
 801e482:	2200      	movs	r2, #0
 801e484:	461c      	mov	r4, r3
 801e486:	4615      	mov	r5, r2
 801e488:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e48c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e490:	4a41      	ldr	r2, [pc, #260]	; (801e598 <SUBGRF_SetModulationParams+0x1a0>)
 801e492:	f04f 0300 	mov.w	r3, #0
 801e496:	4640      	mov	r0, r8
 801e498:	4649      	mov	r1, r9
 801e49a:	f7e2 fe3b 	bl	8001114 <__aeabi_uldivmod>
 801e49e:	4602      	mov	r2, r0
 801e4a0:	460b      	mov	r3, r1
 801e4a2:	4613      	mov	r3, r2
 801e4a4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801e4a6:	697b      	ldr	r3, [r7, #20]
 801e4a8:	0c1b      	lsrs	r3, r3, #16
 801e4aa:	b2db      	uxtb	r3, r3
 801e4ac:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801e4ae:	697b      	ldr	r3, [r7, #20]
 801e4b0:	0a1b      	lsrs	r3, r3, #8
 801e4b2:	b2db      	uxtb	r3, r3
 801e4b4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801e4b6:	697b      	ldr	r3, [r7, #20]
 801e4b8:	b2db      	uxtb	r3, r3
 801e4ba:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e4bc:	7cfb      	ldrb	r3, [r7, #19]
 801e4be:	b29a      	uxth	r2, r3
 801e4c0:	f107 0308 	add.w	r3, r7, #8
 801e4c4:	4619      	mov	r1, r3
 801e4c6:	208b      	movs	r0, #139	; 0x8b
 801e4c8:	f000 fa60 	bl	801e98c <SUBGRF_WriteCommand>
        break;
 801e4cc:	e058      	b.n	801e580 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801e4ce:	2304      	movs	r3, #4
 801e4d0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	691b      	ldr	r3, [r3, #16]
 801e4d6:	4a2f      	ldr	r2, [pc, #188]	; (801e594 <SUBGRF_SetModulationParams+0x19c>)
 801e4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 801e4dc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e4de:	697b      	ldr	r3, [r7, #20]
 801e4e0:	0c1b      	lsrs	r3, r3, #16
 801e4e2:	b2db      	uxtb	r3, r3
 801e4e4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e4e6:	697b      	ldr	r3, [r7, #20]
 801e4e8:	0a1b      	lsrs	r3, r3, #8
 801e4ea:	b2db      	uxtb	r3, r3
 801e4ec:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e4ee:	697b      	ldr	r3, [r7, #20]
 801e4f0:	b2db      	uxtb	r3, r3
 801e4f2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	7d1b      	ldrb	r3, [r3, #20]
 801e4f8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e4fa:	7cfb      	ldrb	r3, [r7, #19]
 801e4fc:	b29a      	uxth	r2, r3
 801e4fe:	f107 0308 	add.w	r3, r7, #8
 801e502:	4619      	mov	r1, r3
 801e504:	208b      	movs	r0, #139	; 0x8b
 801e506:	f000 fa41 	bl	801e98c <SUBGRF_WriteCommand>
        break;
 801e50a:	e039      	b.n	801e580 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801e50c:	2304      	movs	r3, #4
 801e50e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	7e1b      	ldrb	r3, [r3, #24]
 801e514:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	7e5b      	ldrb	r3, [r3, #25]
 801e51a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	7e9b      	ldrb	r3, [r3, #26]
 801e520:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	7edb      	ldrb	r3, [r3, #27]
 801e526:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e528:	7cfb      	ldrb	r3, [r7, #19]
 801e52a:	b29a      	uxth	r2, r3
 801e52c:	f107 0308 	add.w	r3, r7, #8
 801e530:	4619      	mov	r1, r3
 801e532:	208b      	movs	r0, #139	; 0x8b
 801e534:	f000 fa2a 	bl	801e98c <SUBGRF_WriteCommand>

        break;
 801e538:	e022      	b.n	801e580 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801e53a:	2305      	movs	r3, #5
 801e53c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	685b      	ldr	r3, [r3, #4]
 801e542:	4a14      	ldr	r2, [pc, #80]	; (801e594 <SUBGRF_SetModulationParams+0x19c>)
 801e544:	fbb2 f3f3 	udiv	r3, r2, r3
 801e548:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e54a:	697b      	ldr	r3, [r7, #20]
 801e54c:	0c1b      	lsrs	r3, r3, #16
 801e54e:	b2db      	uxtb	r3, r3
 801e550:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e552:	697b      	ldr	r3, [r7, #20]
 801e554:	0a1b      	lsrs	r3, r3, #8
 801e556:	b2db      	uxtb	r3, r3
 801e558:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e55a:	697b      	ldr	r3, [r7, #20]
 801e55c:	b2db      	uxtb	r3, r3
 801e55e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	7b1b      	ldrb	r3, [r3, #12]
 801e564:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	7b5b      	ldrb	r3, [r3, #13]
 801e56a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e56c:	7cfb      	ldrb	r3, [r7, #19]
 801e56e:	b29a      	uxth	r2, r3
 801e570:	f107 0308 	add.w	r3, r7, #8
 801e574:	4619      	mov	r1, r3
 801e576:	208b      	movs	r0, #139	; 0x8b
 801e578:	f000 fa08 	bl	801e98c <SUBGRF_WriteCommand>
        break;
 801e57c:	e000      	b.n	801e580 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801e57e:	bf00      	nop
    }
}
 801e580:	bf00      	nop
 801e582:	3718      	adds	r7, #24
 801e584:	46bd      	mov	sp, r7
 801e586:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e58a:	bf00      	nop
 801e58c:	08021960 	.word	0x08021960
 801e590:	20001e59 	.word	0x20001e59
 801e594:	3d090000 	.word	0x3d090000
 801e598:	01e84800 	.word	0x01e84800

0801e59c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801e59c:	b580      	push	{r7, lr}
 801e59e:	b086      	sub	sp, #24
 801e5a0:	af00      	add	r7, sp, #0
 801e5a2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801e5a4:	2300      	movs	r3, #0
 801e5a6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e5a8:	4a48      	ldr	r2, [pc, #288]	; (801e6cc <SUBGRF_SetPacketParams+0x130>)
 801e5aa:	f107 030c 	add.w	r3, r7, #12
 801e5ae:	ca07      	ldmia	r2, {r0, r1, r2}
 801e5b0:	c303      	stmia	r3!, {r0, r1}
 801e5b2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	781a      	ldrb	r2, [r3, #0]
 801e5b8:	4b45      	ldr	r3, [pc, #276]	; (801e6d0 <SUBGRF_SetPacketParams+0x134>)
 801e5ba:	781b      	ldrb	r3, [r3, #0]
 801e5bc:	429a      	cmp	r2, r3
 801e5be:	d004      	beq.n	801e5ca <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	781b      	ldrb	r3, [r3, #0]
 801e5c4:	4618      	mov	r0, r3
 801e5c6:	f7ff fe23 	bl	801e210 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	781b      	ldrb	r3, [r3, #0]
 801e5ce:	2b03      	cmp	r3, #3
 801e5d0:	d878      	bhi.n	801e6c4 <SUBGRF_SetPacketParams+0x128>
 801e5d2:	a201      	add	r2, pc, #4	; (adr r2, 801e5d8 <SUBGRF_SetPacketParams+0x3c>)
 801e5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e5d8:	0801e5e9 	.word	0x0801e5e9
 801e5dc:	0801e679 	.word	0x0801e679
 801e5e0:	0801e66d 	.word	0x0801e66d
 801e5e4:	0801e5e9 	.word	0x0801e5e9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	7a5b      	ldrb	r3, [r3, #9]
 801e5ec:	2bf1      	cmp	r3, #241	; 0xf1
 801e5ee:	d10a      	bne.n	801e606 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801e5f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e5f4:	f7ff faaa 	bl	801db4c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801e5f8:	f248 0005 	movw	r0, #32773	; 0x8005
 801e5fc:	f7ff fac6 	bl	801db8c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801e600:	2302      	movs	r3, #2
 801e602:	75bb      	strb	r3, [r7, #22]
 801e604:	e011      	b.n	801e62a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	7a5b      	ldrb	r3, [r3, #9]
 801e60a:	2bf2      	cmp	r3, #242	; 0xf2
 801e60c:	d10a      	bne.n	801e624 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801e60e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801e612:	f7ff fa9b 	bl	801db4c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801e616:	f241 0021 	movw	r0, #4129	; 0x1021
 801e61a:	f7ff fab7 	bl	801db8c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801e61e:	2306      	movs	r3, #6
 801e620:	75bb      	strb	r3, [r7, #22]
 801e622:	e002      	b.n	801e62a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	7a5b      	ldrb	r3, [r3, #9]
 801e628:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801e62a:	2309      	movs	r3, #9
 801e62c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	885b      	ldrh	r3, [r3, #2]
 801e632:	0a1b      	lsrs	r3, r3, #8
 801e634:	b29b      	uxth	r3, r3
 801e636:	b2db      	uxtb	r3, r3
 801e638:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	885b      	ldrh	r3, [r3, #2]
 801e63e:	b2db      	uxtb	r3, r3
 801e640:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	791b      	ldrb	r3, [r3, #4]
 801e646:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	795b      	ldrb	r3, [r3, #5]
 801e64c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	799b      	ldrb	r3, [r3, #6]
 801e652:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	79db      	ldrb	r3, [r3, #7]
 801e658:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	7a1b      	ldrb	r3, [r3, #8]
 801e65e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801e660:	7dbb      	ldrb	r3, [r7, #22]
 801e662:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	7a9b      	ldrb	r3, [r3, #10]
 801e668:	753b      	strb	r3, [r7, #20]
        break;
 801e66a:	e022      	b.n	801e6b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801e66c:	2301      	movs	r3, #1
 801e66e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	7b1b      	ldrb	r3, [r3, #12]
 801e674:	733b      	strb	r3, [r7, #12]
        break;
 801e676:	e01c      	b.n	801e6b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801e678:	2306      	movs	r3, #6
 801e67a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	89db      	ldrh	r3, [r3, #14]
 801e680:	0a1b      	lsrs	r3, r3, #8
 801e682:	b29b      	uxth	r3, r3
 801e684:	b2db      	uxtb	r3, r3
 801e686:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	89db      	ldrh	r3, [r3, #14]
 801e68c:	b2db      	uxtb	r3, r3
 801e68e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	7c1a      	ldrb	r2, [r3, #16]
 801e694:	4b0f      	ldr	r3, [pc, #60]	; (801e6d4 <SUBGRF_SetPacketParams+0x138>)
 801e696:	4611      	mov	r1, r2
 801e698:	7019      	strb	r1, [r3, #0]
 801e69a:	4613      	mov	r3, r2
 801e69c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	7c5b      	ldrb	r3, [r3, #17]
 801e6a2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	7c9b      	ldrb	r3, [r3, #18]
 801e6a8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	7cdb      	ldrb	r3, [r3, #19]
 801e6ae:	747b      	strb	r3, [r7, #17]
        break;
 801e6b0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e6b2:	7dfb      	ldrb	r3, [r7, #23]
 801e6b4:	b29a      	uxth	r2, r3
 801e6b6:	f107 030c 	add.w	r3, r7, #12
 801e6ba:	4619      	mov	r1, r3
 801e6bc:	208c      	movs	r0, #140	; 0x8c
 801e6be:	f000 f965 	bl	801e98c <SUBGRF_WriteCommand>
 801e6c2:	e000      	b.n	801e6c6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801e6c4:	bf00      	nop
}
 801e6c6:	3718      	adds	r7, #24
 801e6c8:	46bd      	mov	sp, r7
 801e6ca:	bd80      	pop	{r7, pc}
 801e6cc:	08021968 	.word	0x08021968
 801e6d0:	20001e59 	.word	0x20001e59
 801e6d4:	20001e5a 	.word	0x20001e5a

0801e6d8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e6d8:	b580      	push	{r7, lr}
 801e6da:	b084      	sub	sp, #16
 801e6dc:	af00      	add	r7, sp, #0
 801e6de:	4603      	mov	r3, r0
 801e6e0:	460a      	mov	r2, r1
 801e6e2:	71fb      	strb	r3, [r7, #7]
 801e6e4:	4613      	mov	r3, r2
 801e6e6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e6e8:	79fb      	ldrb	r3, [r7, #7]
 801e6ea:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e6ec:	79bb      	ldrb	r3, [r7, #6]
 801e6ee:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e6f0:	f107 030c 	add.w	r3, r7, #12
 801e6f4:	2202      	movs	r2, #2
 801e6f6:	4619      	mov	r1, r3
 801e6f8:	208f      	movs	r0, #143	; 0x8f
 801e6fa:	f000 f947 	bl	801e98c <SUBGRF_WriteCommand>
}
 801e6fe:	bf00      	nop
 801e700:	3710      	adds	r7, #16
 801e702:	46bd      	mov	sp, r7
 801e704:	bd80      	pop	{r7, pc}

0801e706 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e706:	b580      	push	{r7, lr}
 801e708:	b082      	sub	sp, #8
 801e70a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e70c:	2300      	movs	r3, #0
 801e70e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e710:	1d3b      	adds	r3, r7, #4
 801e712:	2201      	movs	r2, #1
 801e714:	4619      	mov	r1, r3
 801e716:	2015      	movs	r0, #21
 801e718:	f000 f95a 	bl	801e9d0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e71c:	793b      	ldrb	r3, [r7, #4]
 801e71e:	425b      	negs	r3, r3
 801e720:	105b      	asrs	r3, r3, #1
 801e722:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e724:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e728:	4618      	mov	r0, r3
 801e72a:	3708      	adds	r7, #8
 801e72c:	46bd      	mov	sp, r7
 801e72e:	bd80      	pop	{r7, pc}

0801e730 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e730:	b580      	push	{r7, lr}
 801e732:	b084      	sub	sp, #16
 801e734:	af00      	add	r7, sp, #0
 801e736:	6078      	str	r0, [r7, #4]
 801e738:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e73a:	f107 030c 	add.w	r3, r7, #12
 801e73e:	2202      	movs	r2, #2
 801e740:	4619      	mov	r1, r3
 801e742:	2013      	movs	r0, #19
 801e744:	f000 f944 	bl	801e9d0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e748:	f7ff fd7e 	bl	801e248 <SUBGRF_GetPacketType>
 801e74c:	4603      	mov	r3, r0
 801e74e:	2b01      	cmp	r3, #1
 801e750:	d10d      	bne.n	801e76e <SUBGRF_GetRxBufferStatus+0x3e>
 801e752:	4b0c      	ldr	r3, [pc, #48]	; (801e784 <SUBGRF_GetRxBufferStatus+0x54>)
 801e754:	781b      	ldrb	r3, [r3, #0]
 801e756:	b2db      	uxtb	r3, r3
 801e758:	2b01      	cmp	r3, #1
 801e75a:	d108      	bne.n	801e76e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e75c:	f240 7002 	movw	r0, #1794	; 0x702
 801e760:	f000 f878 	bl	801e854 <SUBGRF_ReadRegister>
 801e764:	4603      	mov	r3, r0
 801e766:	461a      	mov	r2, r3
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	701a      	strb	r2, [r3, #0]
 801e76c:	e002      	b.n	801e774 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e76e:	7b3a      	ldrb	r2, [r7, #12]
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e774:	7b7a      	ldrb	r2, [r7, #13]
 801e776:	683b      	ldr	r3, [r7, #0]
 801e778:	701a      	strb	r2, [r3, #0]
}
 801e77a:	bf00      	nop
 801e77c:	3710      	adds	r7, #16
 801e77e:	46bd      	mov	sp, r7
 801e780:	bd80      	pop	{r7, pc}
 801e782:	bf00      	nop
 801e784:	20001e5a 	.word	0x20001e5a

0801e788 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e788:	b580      	push	{r7, lr}
 801e78a:	b084      	sub	sp, #16
 801e78c:	af00      	add	r7, sp, #0
 801e78e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e790:	f107 030c 	add.w	r3, r7, #12
 801e794:	2203      	movs	r2, #3
 801e796:	4619      	mov	r1, r3
 801e798:	2014      	movs	r0, #20
 801e79a:	f000 f919 	bl	801e9d0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e79e:	f7ff fd53 	bl	801e248 <SUBGRF_GetPacketType>
 801e7a2:	4603      	mov	r3, r0
 801e7a4:	461a      	mov	r2, r3
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	781b      	ldrb	r3, [r3, #0]
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d002      	beq.n	801e7b8 <SUBGRF_GetPacketStatus+0x30>
 801e7b2:	2b01      	cmp	r3, #1
 801e7b4:	d013      	beq.n	801e7de <SUBGRF_GetPacketStatus+0x56>
 801e7b6:	e02a      	b.n	801e80e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e7b8:	7b3a      	ldrb	r2, [r7, #12]
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e7be:	7b7b      	ldrb	r3, [r7, #13]
 801e7c0:	425b      	negs	r3, r3
 801e7c2:	105b      	asrs	r3, r3, #1
 801e7c4:	b25a      	sxtb	r2, r3
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e7ca:	7bbb      	ldrb	r3, [r7, #14]
 801e7cc:	425b      	negs	r3, r3
 801e7ce:	105b      	asrs	r3, r3, #1
 801e7d0:	b25a      	sxtb	r2, r3
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	2200      	movs	r2, #0
 801e7da:	609a      	str	r2, [r3, #8]
            break;
 801e7dc:	e020      	b.n	801e820 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e7de:	7b3b      	ldrb	r3, [r7, #12]
 801e7e0:	425b      	negs	r3, r3
 801e7e2:	105b      	asrs	r3, r3, #1
 801e7e4:	b25a      	sxtb	r2, r3
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e7ea:	7b7b      	ldrb	r3, [r7, #13]
 801e7ec:	b25b      	sxtb	r3, r3
 801e7ee:	3302      	adds	r3, #2
 801e7f0:	109b      	asrs	r3, r3, #2
 801e7f2:	b25a      	sxtb	r2, r3
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e7f8:	7bbb      	ldrb	r3, [r7, #14]
 801e7fa:	425b      	negs	r3, r3
 801e7fc:	105b      	asrs	r3, r3, #1
 801e7fe:	b25a      	sxtb	r2, r3
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e804:	4b08      	ldr	r3, [pc, #32]	; (801e828 <SUBGRF_GetPacketStatus+0xa0>)
 801e806:	681a      	ldr	r2, [r3, #0]
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	611a      	str	r2, [r3, #16]
            break;
 801e80c:	e008      	b.n	801e820 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e80e:	2214      	movs	r2, #20
 801e810:	2100      	movs	r1, #0
 801e812:	6878      	ldr	r0, [r7, #4]
 801e814:	f000 fc03 	bl	801f01e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	220f      	movs	r2, #15
 801e81c:	701a      	strb	r2, [r3, #0]
            break;
 801e81e:	bf00      	nop
    }
}
 801e820:	bf00      	nop
 801e822:	3710      	adds	r7, #16
 801e824:	46bd      	mov	sp, r7
 801e826:	bd80      	pop	{r7, pc}
 801e828:	20001e5c 	.word	0x20001e5c

0801e82c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e82c:	b580      	push	{r7, lr}
 801e82e:	b082      	sub	sp, #8
 801e830:	af00      	add	r7, sp, #0
 801e832:	4603      	mov	r3, r0
 801e834:	460a      	mov	r2, r1
 801e836:	80fb      	strh	r3, [r7, #6]
 801e838:	4613      	mov	r3, r2
 801e83a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e83c:	1d7a      	adds	r2, r7, #5
 801e83e:	88f9      	ldrh	r1, [r7, #6]
 801e840:	2301      	movs	r3, #1
 801e842:	4803      	ldr	r0, [pc, #12]	; (801e850 <SUBGRF_WriteRegister+0x24>)
 801e844:	f7ec fcba 	bl	800b1bc <HAL_SUBGHZ_WriteRegisters>
}
 801e848:	bf00      	nop
 801e84a:	3708      	adds	r7, #8
 801e84c:	46bd      	mov	sp, r7
 801e84e:	bd80      	pop	{r7, pc}
 801e850:	200004a0 	.word	0x200004a0

0801e854 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e854:	b580      	push	{r7, lr}
 801e856:	b084      	sub	sp, #16
 801e858:	af00      	add	r7, sp, #0
 801e85a:	4603      	mov	r3, r0
 801e85c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e85e:	f107 020f 	add.w	r2, r7, #15
 801e862:	88f9      	ldrh	r1, [r7, #6]
 801e864:	2301      	movs	r3, #1
 801e866:	4804      	ldr	r0, [pc, #16]	; (801e878 <SUBGRF_ReadRegister+0x24>)
 801e868:	f7ec fd07 	bl	800b27a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e86c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e86e:	4618      	mov	r0, r3
 801e870:	3710      	adds	r7, #16
 801e872:	46bd      	mov	sp, r7
 801e874:	bd80      	pop	{r7, pc}
 801e876:	bf00      	nop
 801e878:	200004a0 	.word	0x200004a0

0801e87c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e87c:	b580      	push	{r7, lr}
 801e87e:	b086      	sub	sp, #24
 801e880:	af00      	add	r7, sp, #0
 801e882:	4603      	mov	r3, r0
 801e884:	6039      	str	r1, [r7, #0]
 801e886:	80fb      	strh	r3, [r7, #6]
 801e888:	4613      	mov	r3, r2
 801e88a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e88c:	f3ef 8310 	mrs	r3, PRIMASK
 801e890:	60fb      	str	r3, [r7, #12]
  return(result);
 801e892:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e896:	b672      	cpsid	i
}
 801e898:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e89a:	88bb      	ldrh	r3, [r7, #4]
 801e89c:	88f9      	ldrh	r1, [r7, #6]
 801e89e:	683a      	ldr	r2, [r7, #0]
 801e8a0:	4806      	ldr	r0, [pc, #24]	; (801e8bc <SUBGRF_WriteRegisters+0x40>)
 801e8a2:	f7ec fc8b 	bl	800b1bc <HAL_SUBGHZ_WriteRegisters>
 801e8a6:	697b      	ldr	r3, [r7, #20]
 801e8a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8aa:	693b      	ldr	r3, [r7, #16]
 801e8ac:	f383 8810 	msr	PRIMASK, r3
}
 801e8b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e8b2:	bf00      	nop
 801e8b4:	3718      	adds	r7, #24
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	bd80      	pop	{r7, pc}
 801e8ba:	bf00      	nop
 801e8bc:	200004a0 	.word	0x200004a0

0801e8c0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e8c0:	b580      	push	{r7, lr}
 801e8c2:	b086      	sub	sp, #24
 801e8c4:	af00      	add	r7, sp, #0
 801e8c6:	4603      	mov	r3, r0
 801e8c8:	6039      	str	r1, [r7, #0]
 801e8ca:	80fb      	strh	r3, [r7, #6]
 801e8cc:	4613      	mov	r3, r2
 801e8ce:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8d0:	f3ef 8310 	mrs	r3, PRIMASK
 801e8d4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e8d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e8da:	b672      	cpsid	i
}
 801e8dc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e8de:	88bb      	ldrh	r3, [r7, #4]
 801e8e0:	88f9      	ldrh	r1, [r7, #6]
 801e8e2:	683a      	ldr	r2, [r7, #0]
 801e8e4:	4806      	ldr	r0, [pc, #24]	; (801e900 <SUBGRF_ReadRegisters+0x40>)
 801e8e6:	f7ec fcc8 	bl	800b27a <HAL_SUBGHZ_ReadRegisters>
 801e8ea:	697b      	ldr	r3, [r7, #20]
 801e8ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8ee:	693b      	ldr	r3, [r7, #16]
 801e8f0:	f383 8810 	msr	PRIMASK, r3
}
 801e8f4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e8f6:	bf00      	nop
 801e8f8:	3718      	adds	r7, #24
 801e8fa:	46bd      	mov	sp, r7
 801e8fc:	bd80      	pop	{r7, pc}
 801e8fe:	bf00      	nop
 801e900:	200004a0 	.word	0x200004a0

0801e904 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e904:	b580      	push	{r7, lr}
 801e906:	b086      	sub	sp, #24
 801e908:	af00      	add	r7, sp, #0
 801e90a:	4603      	mov	r3, r0
 801e90c:	6039      	str	r1, [r7, #0]
 801e90e:	71fb      	strb	r3, [r7, #7]
 801e910:	4613      	mov	r3, r2
 801e912:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e914:	f3ef 8310 	mrs	r3, PRIMASK
 801e918:	60fb      	str	r3, [r7, #12]
  return(result);
 801e91a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e91c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e91e:	b672      	cpsid	i
}
 801e920:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e922:	79bb      	ldrb	r3, [r7, #6]
 801e924:	b29b      	uxth	r3, r3
 801e926:	79f9      	ldrb	r1, [r7, #7]
 801e928:	683a      	ldr	r2, [r7, #0]
 801e92a:	4806      	ldr	r0, [pc, #24]	; (801e944 <SUBGRF_WriteBuffer+0x40>)
 801e92c:	f7ec fdb9 	bl	800b4a2 <HAL_SUBGHZ_WriteBuffer>
 801e930:	697b      	ldr	r3, [r7, #20]
 801e932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e934:	693b      	ldr	r3, [r7, #16]
 801e936:	f383 8810 	msr	PRIMASK, r3
}
 801e93a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e93c:	bf00      	nop
 801e93e:	3718      	adds	r7, #24
 801e940:	46bd      	mov	sp, r7
 801e942:	bd80      	pop	{r7, pc}
 801e944:	200004a0 	.word	0x200004a0

0801e948 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e948:	b580      	push	{r7, lr}
 801e94a:	b086      	sub	sp, #24
 801e94c:	af00      	add	r7, sp, #0
 801e94e:	4603      	mov	r3, r0
 801e950:	6039      	str	r1, [r7, #0]
 801e952:	71fb      	strb	r3, [r7, #7]
 801e954:	4613      	mov	r3, r2
 801e956:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e958:	f3ef 8310 	mrs	r3, PRIMASK
 801e95c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e95e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e960:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e962:	b672      	cpsid	i
}
 801e964:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e966:	79bb      	ldrb	r3, [r7, #6]
 801e968:	b29b      	uxth	r3, r3
 801e96a:	79f9      	ldrb	r1, [r7, #7]
 801e96c:	683a      	ldr	r2, [r7, #0]
 801e96e:	4806      	ldr	r0, [pc, #24]	; (801e988 <SUBGRF_ReadBuffer+0x40>)
 801e970:	f7ec fdea 	bl	800b548 <HAL_SUBGHZ_ReadBuffer>
 801e974:	697b      	ldr	r3, [r7, #20]
 801e976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e978:	693b      	ldr	r3, [r7, #16]
 801e97a:	f383 8810 	msr	PRIMASK, r3
}
 801e97e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e980:	bf00      	nop
 801e982:	3718      	adds	r7, #24
 801e984:	46bd      	mov	sp, r7
 801e986:	bd80      	pop	{r7, pc}
 801e988:	200004a0 	.word	0x200004a0

0801e98c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e98c:	b580      	push	{r7, lr}
 801e98e:	b086      	sub	sp, #24
 801e990:	af00      	add	r7, sp, #0
 801e992:	4603      	mov	r3, r0
 801e994:	6039      	str	r1, [r7, #0]
 801e996:	71fb      	strb	r3, [r7, #7]
 801e998:	4613      	mov	r3, r2
 801e99a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e99c:	f3ef 8310 	mrs	r3, PRIMASK
 801e9a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e9a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e9a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9a6:	b672      	cpsid	i
}
 801e9a8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e9aa:	88bb      	ldrh	r3, [r7, #4]
 801e9ac:	79f9      	ldrb	r1, [r7, #7]
 801e9ae:	683a      	ldr	r2, [r7, #0]
 801e9b0:	4806      	ldr	r0, [pc, #24]	; (801e9cc <SUBGRF_WriteCommand+0x40>)
 801e9b2:	f7ec fcc3 	bl	800b33c <HAL_SUBGHZ_ExecSetCmd>
 801e9b6:	697b      	ldr	r3, [r7, #20]
 801e9b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9ba:	693b      	ldr	r3, [r7, #16]
 801e9bc:	f383 8810 	msr	PRIMASK, r3
}
 801e9c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e9c2:	bf00      	nop
 801e9c4:	3718      	adds	r7, #24
 801e9c6:	46bd      	mov	sp, r7
 801e9c8:	bd80      	pop	{r7, pc}
 801e9ca:	bf00      	nop
 801e9cc:	200004a0 	.word	0x200004a0

0801e9d0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e9d0:	b580      	push	{r7, lr}
 801e9d2:	b086      	sub	sp, #24
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	4603      	mov	r3, r0
 801e9d8:	6039      	str	r1, [r7, #0]
 801e9da:	71fb      	strb	r3, [r7, #7]
 801e9dc:	4613      	mov	r3, r2
 801e9de:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9e0:	f3ef 8310 	mrs	r3, PRIMASK
 801e9e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e9e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e9e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9ea:	b672      	cpsid	i
}
 801e9ec:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e9ee:	88bb      	ldrh	r3, [r7, #4]
 801e9f0:	79f9      	ldrb	r1, [r7, #7]
 801e9f2:	683a      	ldr	r2, [r7, #0]
 801e9f4:	4806      	ldr	r0, [pc, #24]	; (801ea10 <SUBGRF_ReadCommand+0x40>)
 801e9f6:	f7ec fd00 	bl	800b3fa <HAL_SUBGHZ_ExecGetCmd>
 801e9fa:	697b      	ldr	r3, [r7, #20]
 801e9fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9fe:	693b      	ldr	r3, [r7, #16]
 801ea00:	f383 8810 	msr	PRIMASK, r3
}
 801ea04:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ea06:	bf00      	nop
 801ea08:	3718      	adds	r7, #24
 801ea0a:	46bd      	mov	sp, r7
 801ea0c:	bd80      	pop	{r7, pc}
 801ea0e:	bf00      	nop
 801ea10:	200004a0 	.word	0x200004a0

0801ea14 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801ea14:	b580      	push	{r7, lr}
 801ea16:	b084      	sub	sp, #16
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	4603      	mov	r3, r0
 801ea1c:	460a      	mov	r2, r1
 801ea1e:	71fb      	strb	r3, [r7, #7]
 801ea20:	4613      	mov	r3, r2
 801ea22:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801ea24:	2301      	movs	r3, #1
 801ea26:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801ea28:	79bb      	ldrb	r3, [r7, #6]
 801ea2a:	2b01      	cmp	r3, #1
 801ea2c:	d10d      	bne.n	801ea4a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801ea2e:	79fb      	ldrb	r3, [r7, #7]
 801ea30:	2b01      	cmp	r3, #1
 801ea32:	d104      	bne.n	801ea3e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801ea34:	2302      	movs	r3, #2
 801ea36:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801ea38:	2004      	movs	r0, #4
 801ea3a:	f000 f8ef 	bl	801ec1c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801ea3e:	79fb      	ldrb	r3, [r7, #7]
 801ea40:	2b02      	cmp	r3, #2
 801ea42:	d107      	bne.n	801ea54 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801ea44:	2303      	movs	r3, #3
 801ea46:	73fb      	strb	r3, [r7, #15]
 801ea48:	e004      	b.n	801ea54 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801ea4a:	79bb      	ldrb	r3, [r7, #6]
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d101      	bne.n	801ea54 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801ea50:	2301      	movs	r3, #1
 801ea52:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801ea54:	7bfb      	ldrb	r3, [r7, #15]
 801ea56:	4618      	mov	r0, r3
 801ea58:	f7f0 f995 	bl	800ed86 <RBI_ConfigRFSwitch>
}
 801ea5c:	bf00      	nop
 801ea5e:	3710      	adds	r7, #16
 801ea60:	46bd      	mov	sp, r7
 801ea62:	bd80      	pop	{r7, pc}

0801ea64 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801ea64:	b580      	push	{r7, lr}
 801ea66:	b084      	sub	sp, #16
 801ea68:	af00      	add	r7, sp, #0
 801ea6a:	4603      	mov	r3, r0
 801ea6c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801ea6e:	2301      	movs	r3, #1
 801ea70:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801ea72:	f7f0 f996 	bl	800eda2 <RBI_GetTxConfig>
 801ea76:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801ea78:	68bb      	ldr	r3, [r7, #8]
 801ea7a:	2b02      	cmp	r3, #2
 801ea7c:	d016      	beq.n	801eaac <SUBGRF_SetRfTxPower+0x48>
 801ea7e:	68bb      	ldr	r3, [r7, #8]
 801ea80:	2b02      	cmp	r3, #2
 801ea82:	dc16      	bgt.n	801eab2 <SUBGRF_SetRfTxPower+0x4e>
 801ea84:	68bb      	ldr	r3, [r7, #8]
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	d003      	beq.n	801ea92 <SUBGRF_SetRfTxPower+0x2e>
 801ea8a:	68bb      	ldr	r3, [r7, #8]
 801ea8c:	2b01      	cmp	r3, #1
 801ea8e:	d00a      	beq.n	801eaa6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801ea90:	e00f      	b.n	801eab2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801ea92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ea96:	2b0f      	cmp	r3, #15
 801ea98:	dd02      	ble.n	801eaa0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801ea9a:	2302      	movs	r3, #2
 801ea9c:	73fb      	strb	r3, [r7, #15]
            break;
 801ea9e:	e009      	b.n	801eab4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801eaa0:	2301      	movs	r3, #1
 801eaa2:	73fb      	strb	r3, [r7, #15]
            break;
 801eaa4:	e006      	b.n	801eab4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801eaa6:	2301      	movs	r3, #1
 801eaa8:	73fb      	strb	r3, [r7, #15]
            break;
 801eaaa:	e003      	b.n	801eab4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801eaac:	2302      	movs	r3, #2
 801eaae:	73fb      	strb	r3, [r7, #15]
            break;
 801eab0:	e000      	b.n	801eab4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801eab2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801eab4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801eab8:	7bfb      	ldrb	r3, [r7, #15]
 801eaba:	2202      	movs	r2, #2
 801eabc:	4618      	mov	r0, r3
 801eabe:	f7ff fbcd 	bl	801e25c <SUBGRF_SetTxParams>

    return paSelect;
 801eac2:	7bfb      	ldrb	r3, [r7, #15]
}
 801eac4:	4618      	mov	r0, r3
 801eac6:	3710      	adds	r7, #16
 801eac8:	46bd      	mov	sp, r7
 801eaca:	bd80      	pop	{r7, pc}

0801eacc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801eacc:	b480      	push	{r7}
 801eace:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801ead0:	2301      	movs	r3, #1
}
 801ead2:	4618      	mov	r0, r3
 801ead4:	46bd      	mov	sp, r7
 801ead6:	bc80      	pop	{r7}
 801ead8:	4770      	bx	lr
	...

0801eadc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eadc:	b580      	push	{r7, lr}
 801eade:	b082      	sub	sp, #8
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801eae4:	4b03      	ldr	r3, [pc, #12]	; (801eaf4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	2001      	movs	r0, #1
 801eaea:	4798      	blx	r3
}
 801eaec:	bf00      	nop
 801eaee:	3708      	adds	r7, #8
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	bd80      	pop	{r7, pc}
 801eaf4:	20001e64 	.word	0x20001e64

0801eaf8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eaf8:	b580      	push	{r7, lr}
 801eafa:	b082      	sub	sp, #8
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801eb00:	4b03      	ldr	r3, [pc, #12]	; (801eb10 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	2002      	movs	r0, #2
 801eb06:	4798      	blx	r3
}
 801eb08:	bf00      	nop
 801eb0a:	3708      	adds	r7, #8
 801eb0c:	46bd      	mov	sp, r7
 801eb0e:	bd80      	pop	{r7, pc}
 801eb10:	20001e64 	.word	0x20001e64

0801eb14 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801eb14:	b580      	push	{r7, lr}
 801eb16:	b082      	sub	sp, #8
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801eb1c:	4b03      	ldr	r3, [pc, #12]	; (801eb2c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801eb1e:	681b      	ldr	r3, [r3, #0]
 801eb20:	2040      	movs	r0, #64	; 0x40
 801eb22:	4798      	blx	r3
}
 801eb24:	bf00      	nop
 801eb26:	3708      	adds	r7, #8
 801eb28:	46bd      	mov	sp, r7
 801eb2a:	bd80      	pop	{r7, pc}
 801eb2c:	20001e64 	.word	0x20001e64

0801eb30 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801eb30:	b580      	push	{r7, lr}
 801eb32:	b082      	sub	sp, #8
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	6078      	str	r0, [r7, #4]
 801eb38:	460b      	mov	r3, r1
 801eb3a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801eb3c:	78fb      	ldrb	r3, [r7, #3]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d002      	beq.n	801eb48 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801eb42:	2b01      	cmp	r3, #1
 801eb44:	d005      	beq.n	801eb52 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801eb46:	e00a      	b.n	801eb5e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801eb48:	4b07      	ldr	r3, [pc, #28]	; (801eb68 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	2080      	movs	r0, #128	; 0x80
 801eb4e:	4798      	blx	r3
            break;
 801eb50:	e005      	b.n	801eb5e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801eb52:	4b05      	ldr	r3, [pc, #20]	; (801eb68 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801eb54:	681b      	ldr	r3, [r3, #0]
 801eb56:	f44f 7080 	mov.w	r0, #256	; 0x100
 801eb5a:	4798      	blx	r3
            break;
 801eb5c:	bf00      	nop
    }
}
 801eb5e:	bf00      	nop
 801eb60:	3708      	adds	r7, #8
 801eb62:	46bd      	mov	sp, r7
 801eb64:	bd80      	pop	{r7, pc}
 801eb66:	bf00      	nop
 801eb68:	20001e64 	.word	0x20001e64

0801eb6c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	b082      	sub	sp, #8
 801eb70:	af00      	add	r7, sp, #0
 801eb72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801eb74:	4b04      	ldr	r3, [pc, #16]	; (801eb88 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	f44f 7000 	mov.w	r0, #512	; 0x200
 801eb7c:	4798      	blx	r3
}
 801eb7e:	bf00      	nop
 801eb80:	3708      	adds	r7, #8
 801eb82:	46bd      	mov	sp, r7
 801eb84:	bd80      	pop	{r7, pc}
 801eb86:	bf00      	nop
 801eb88:	20001e64 	.word	0x20001e64

0801eb8c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b082      	sub	sp, #8
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801eb94:	4b03      	ldr	r3, [pc, #12]	; (801eba4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	2020      	movs	r0, #32
 801eb9a:	4798      	blx	r3
}
 801eb9c:	bf00      	nop
 801eb9e:	3708      	adds	r7, #8
 801eba0:	46bd      	mov	sp, r7
 801eba2:	bd80      	pop	{r7, pc}
 801eba4:	20001e64 	.word	0x20001e64

0801eba8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eba8:	b580      	push	{r7, lr}
 801ebaa:	b082      	sub	sp, #8
 801ebac:	af00      	add	r7, sp, #0
 801ebae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ebb0:	4b03      	ldr	r3, [pc, #12]	; (801ebc0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ebb2:	681b      	ldr	r3, [r3, #0]
 801ebb4:	2004      	movs	r0, #4
 801ebb6:	4798      	blx	r3
}
 801ebb8:	bf00      	nop
 801ebba:	3708      	adds	r7, #8
 801ebbc:	46bd      	mov	sp, r7
 801ebbe:	bd80      	pop	{r7, pc}
 801ebc0:	20001e64 	.word	0x20001e64

0801ebc4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ebc4:	b580      	push	{r7, lr}
 801ebc6:	b082      	sub	sp, #8
 801ebc8:	af00      	add	r7, sp, #0
 801ebca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801ebcc:	4b03      	ldr	r3, [pc, #12]	; (801ebdc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801ebce:	681b      	ldr	r3, [r3, #0]
 801ebd0:	2008      	movs	r0, #8
 801ebd2:	4798      	blx	r3
}
 801ebd4:	bf00      	nop
 801ebd6:	3708      	adds	r7, #8
 801ebd8:	46bd      	mov	sp, r7
 801ebda:	bd80      	pop	{r7, pc}
 801ebdc:	20001e64 	.word	0x20001e64

0801ebe0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ebe0:	b580      	push	{r7, lr}
 801ebe2:	b082      	sub	sp, #8
 801ebe4:	af00      	add	r7, sp, #0
 801ebe6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801ebe8:	4b03      	ldr	r3, [pc, #12]	; (801ebf8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	2010      	movs	r0, #16
 801ebee:	4798      	blx	r3
}
 801ebf0:	bf00      	nop
 801ebf2:	3708      	adds	r7, #8
 801ebf4:	46bd      	mov	sp, r7
 801ebf6:	bd80      	pop	{r7, pc}
 801ebf8:	20001e64 	.word	0x20001e64

0801ebfc <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ebfc:	b580      	push	{r7, lr}
 801ebfe:	b082      	sub	sp, #8
 801ec00:	af00      	add	r7, sp, #0
 801ec02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801ec04:	4b04      	ldr	r3, [pc, #16]	; (801ec18 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801ec0c:	4798      	blx	r3
}
 801ec0e:	bf00      	nop
 801ec10:	3708      	adds	r7, #8
 801ec12:	46bd      	mov	sp, r7
 801ec14:	bd80      	pop	{r7, pc}
 801ec16:	bf00      	nop
 801ec18:	20001e64 	.word	0x20001e64

0801ec1c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801ec1c:	b580      	push	{r7, lr}
 801ec1e:	b084      	sub	sp, #16
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	4603      	mov	r3, r0
 801ec24:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801ec26:	f7f0 f8ca 	bl	800edbe <RBI_IsDCDC>
 801ec2a:	4603      	mov	r3, r0
 801ec2c:	2b01      	cmp	r3, #1
 801ec2e:	d112      	bne.n	801ec56 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801ec30:	f640 1023 	movw	r0, #2339	; 0x923
 801ec34:	f7ff fe0e 	bl	801e854 <SUBGRF_ReadRegister>
 801ec38:	4603      	mov	r3, r0
 801ec3a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ec3c:	7bfb      	ldrb	r3, [r7, #15]
 801ec3e:	f023 0306 	bic.w	r3, r3, #6
 801ec42:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ec44:	7bfa      	ldrb	r2, [r7, #15]
 801ec46:	79fb      	ldrb	r3, [r7, #7]
 801ec48:	4313      	orrs	r3, r2
 801ec4a:	b2db      	uxtb	r3, r3
 801ec4c:	4619      	mov	r1, r3
 801ec4e:	f640 1023 	movw	r0, #2339	; 0x923
 801ec52:	f7ff fdeb 	bl	801e82c <SUBGRF_WriteRegister>
  }
}
 801ec56:	bf00      	nop
 801ec58:	3710      	adds	r7, #16
 801ec5a:	46bd      	mov	sp, r7
 801ec5c:	bd80      	pop	{r7, pc}
	...

0801ec60 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801ec60:	b480      	push	{r7}
 801ec62:	b085      	sub	sp, #20
 801ec64:	af00      	add	r7, sp, #0
 801ec66:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d101      	bne.n	801ec72 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801ec6e:	231f      	movs	r3, #31
 801ec70:	e016      	b.n	801eca0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ec72:	2300      	movs	r3, #0
 801ec74:	73fb      	strb	r3, [r7, #15]
 801ec76:	e00f      	b.n	801ec98 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801ec78:	7bfb      	ldrb	r3, [r7, #15]
 801ec7a:	4a0c      	ldr	r2, [pc, #48]	; (801ecac <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ec7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ec80:	687a      	ldr	r2, [r7, #4]
 801ec82:	429a      	cmp	r2, r3
 801ec84:	d205      	bcs.n	801ec92 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801ec86:	7bfb      	ldrb	r3, [r7, #15]
 801ec88:	4a08      	ldr	r2, [pc, #32]	; (801ecac <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ec8a:	00db      	lsls	r3, r3, #3
 801ec8c:	4413      	add	r3, r2
 801ec8e:	791b      	ldrb	r3, [r3, #4]
 801ec90:	e006      	b.n	801eca0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ec92:	7bfb      	ldrb	r3, [r7, #15]
 801ec94:	3301      	adds	r3, #1
 801ec96:	73fb      	strb	r3, [r7, #15]
 801ec98:	7bfb      	ldrb	r3, [r7, #15]
 801ec9a:	2b15      	cmp	r3, #21
 801ec9c:	d9ec      	bls.n	801ec78 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801ec9e:	e7fe      	b.n	801ec9e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801eca0:	4618      	mov	r0, r3
 801eca2:	3714      	adds	r7, #20
 801eca4:	46bd      	mov	sp, r7
 801eca6:	bc80      	pop	{r7}
 801eca8:	4770      	bx	lr
 801ecaa:	bf00      	nop
 801ecac:	08021fa4 	.word	0x08021fa4

0801ecb0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801ecb0:	b580      	push	{r7, lr}
 801ecb2:	b08a      	sub	sp, #40	; 0x28
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]
 801ecb8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801ecba:	4b35      	ldr	r3, [pc, #212]	; (801ed90 <SUBGRF_GetCFO+0xe0>)
 801ecbc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801ecbe:	f640 0007 	movw	r0, #2055	; 0x807
 801ecc2:	f7ff fdc7 	bl	801e854 <SUBGRF_ReadRegister>
 801ecc6:	4603      	mov	r3, r0
 801ecc8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801ecca:	7ffb      	ldrb	r3, [r7, #31]
 801eccc:	08db      	lsrs	r3, r3, #3
 801ecce:	b2db      	uxtb	r3, r3
 801ecd0:	f003 0303 	and.w	r3, r3, #3
 801ecd4:	3328      	adds	r3, #40	; 0x28
 801ecd6:	443b      	add	r3, r7
 801ecd8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801ecdc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801ecde:	7ffb      	ldrb	r3, [r7, #31]
 801ece0:	f003 0307 	and.w	r3, r3, #7
 801ece4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801ece6:	7fba      	ldrb	r2, [r7, #30]
 801ece8:	7f7b      	ldrb	r3, [r7, #29]
 801ecea:	3301      	adds	r3, #1
 801ecec:	fa02 f303 	lsl.w	r3, r2, r3
 801ecf0:	461a      	mov	r2, r3
 801ecf2:	4b28      	ldr	r3, [pc, #160]	; (801ed94 <SUBGRF_GetCFO+0xe4>)
 801ecf4:	fbb3 f3f2 	udiv	r3, r3, r2
 801ecf8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801ecfa:	69ba      	ldr	r2, [r7, #24]
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	fbb2 f3f3 	udiv	r3, r2, r3
 801ed02:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801ed04:	2301      	movs	r3, #1
 801ed06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801ed0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ed0e:	697a      	ldr	r2, [r7, #20]
 801ed10:	fb02 f303 	mul.w	r3, r2, r3
 801ed14:	2b07      	cmp	r3, #7
 801ed16:	d802      	bhi.n	801ed1e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801ed18:	2302      	movs	r3, #2
 801ed1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801ed1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ed22:	697a      	ldr	r2, [r7, #20]
 801ed24:	fb02 f303 	mul.w	r3, r2, r3
 801ed28:	2b03      	cmp	r3, #3
 801ed2a:	d802      	bhi.n	801ed32 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ed2c:	2304      	movs	r3, #4
 801ed2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ed32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ed36:	69bb      	ldr	r3, [r7, #24]
 801ed38:	fb02 f303 	mul.w	r3, r2, r3
 801ed3c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ed3e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801ed42:	f7ff fd87 	bl	801e854 <SUBGRF_ReadRegister>
 801ed46:	4603      	mov	r3, r0
 801ed48:	021b      	lsls	r3, r3, #8
 801ed4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801ed4e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801ed50:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801ed54:	f7ff fd7e 	bl	801e854 <SUBGRF_ReadRegister>
 801ed58:	4603      	mov	r3, r0
 801ed5a:	461a      	mov	r2, r3
 801ed5c:	6a3b      	ldr	r3, [r7, #32]
 801ed5e:	4313      	orrs	r3, r2
 801ed60:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ed62:	6a3b      	ldr	r3, [r7, #32]
 801ed64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d005      	beq.n	801ed78 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ed6c:	6a3b      	ldr	r3, [r7, #32]
 801ed6e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ed72:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ed76:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ed78:	693b      	ldr	r3, [r7, #16]
 801ed7a:	095b      	lsrs	r3, r3, #5
 801ed7c:	6a3a      	ldr	r2, [r7, #32]
 801ed7e:	fb02 f303 	mul.w	r3, r2, r3
 801ed82:	11da      	asrs	r2, r3, #7
 801ed84:	683b      	ldr	r3, [r7, #0]
 801ed86:	601a      	str	r2, [r3, #0]
}
 801ed88:	bf00      	nop
 801ed8a:	3728      	adds	r7, #40	; 0x28
 801ed8c:	46bd      	mov	sp, r7
 801ed8e:	bd80      	pop	{r7, pc}
 801ed90:	0c0a0804 	.word	0x0c0a0804
 801ed94:	01e84800 	.word	0x01e84800

0801ed98 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ed98:	b480      	push	{r7}
 801ed9a:	b087      	sub	sp, #28
 801ed9c:	af00      	add	r7, sp, #0
 801ed9e:	4603      	mov	r3, r0
 801eda0:	60b9      	str	r1, [r7, #8]
 801eda2:	607a      	str	r2, [r7, #4]
 801eda4:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801eda6:	2300      	movs	r3, #0
 801eda8:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801edaa:	f04f 33ff 	mov.w	r3, #4294967295
 801edae:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801edb0:	697b      	ldr	r3, [r7, #20]
}
 801edb2:	4618      	mov	r0, r3
 801edb4:	371c      	adds	r7, #28
 801edb6:	46bd      	mov	sp, r7
 801edb8:	bc80      	pop	{r7}
 801edba:	4770      	bx	lr

0801edbc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801edbc:	b480      	push	{r7}
 801edbe:	b087      	sub	sp, #28
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	4603      	mov	r3, r0
 801edc4:	60b9      	str	r1, [r7, #8]
 801edc6:	607a      	str	r2, [r7, #4]
 801edc8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801edca:	2300      	movs	r3, #0
 801edcc:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801edce:	f04f 33ff 	mov.w	r3, #4294967295
 801edd2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801edd4:	697b      	ldr	r3, [r7, #20]
}
 801edd6:	4618      	mov	r0, r3
 801edd8:	371c      	adds	r7, #28
 801edda:	46bd      	mov	sp, r7
 801eddc:	bc80      	pop	{r7}
 801edde:	4770      	bx	lr

0801ede0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ede0:	b480      	push	{r7}
 801ede2:	b085      	sub	sp, #20
 801ede4:	af00      	add	r7, sp, #0
 801ede6:	60f8      	str	r0, [r7, #12]
 801ede8:	60b9      	str	r1, [r7, #8]
 801edea:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801edec:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801edf0:	4618      	mov	r0, r3
 801edf2:	3714      	adds	r7, #20
 801edf4:	46bd      	mov	sp, r7
 801edf6:	bc80      	pop	{r7}
 801edf8:	4770      	bx	lr

0801edfa <RFW_DeInit>:

void RFW_DeInit( void )
{
 801edfa:	b480      	push	{r7}
 801edfc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801edfe:	bf00      	nop
 801ee00:	46bd      	mov	sp, r7
 801ee02:	bc80      	pop	{r7}
 801ee04:	4770      	bx	lr

0801ee06 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ee06:	b480      	push	{r7}
 801ee08:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ee0a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ee0c:	4618      	mov	r0, r3
 801ee0e:	46bd      	mov	sp, r7
 801ee10:	bc80      	pop	{r7}
 801ee12:	4770      	bx	lr

0801ee14 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ee14:	b480      	push	{r7}
 801ee16:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ee18:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ee1a:	4618      	mov	r0, r3
 801ee1c:	46bd      	mov	sp, r7
 801ee1e:	bc80      	pop	{r7}
 801ee20:	4770      	bx	lr

0801ee22 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ee22:	b480      	push	{r7}
 801ee24:	b083      	sub	sp, #12
 801ee26:	af00      	add	r7, sp, #0
 801ee28:	4603      	mov	r3, r0
 801ee2a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ee2c:	bf00      	nop
 801ee2e:	370c      	adds	r7, #12
 801ee30:	46bd      	mov	sp, r7
 801ee32:	bc80      	pop	{r7}
 801ee34:	4770      	bx	lr

0801ee36 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ee36:	b480      	push	{r7}
 801ee38:	b087      	sub	sp, #28
 801ee3a:	af00      	add	r7, sp, #0
 801ee3c:	60f8      	str	r0, [r7, #12]
 801ee3e:	460b      	mov	r3, r1
 801ee40:	607a      	str	r2, [r7, #4]
 801ee42:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ee44:	f04f 33ff 	mov.w	r3, #4294967295
 801ee48:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ee4a:	697b      	ldr	r3, [r7, #20]
}
 801ee4c:	4618      	mov	r0, r3
 801ee4e:	371c      	adds	r7, #28
 801ee50:	46bd      	mov	sp, r7
 801ee52:	bc80      	pop	{r7}
 801ee54:	4770      	bx	lr

0801ee56 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ee56:	b480      	push	{r7}
 801ee58:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ee5a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ee5e:	4618      	mov	r0, r3
 801ee60:	46bd      	mov	sp, r7
 801ee62:	bc80      	pop	{r7}
 801ee64:	4770      	bx	lr

0801ee66 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ee66:	b480      	push	{r7}
 801ee68:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ee6a:	bf00      	nop
 801ee6c:	46bd      	mov	sp, r7
 801ee6e:	bc80      	pop	{r7}
 801ee70:	4770      	bx	lr

0801ee72 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ee72:	b480      	push	{r7}
 801ee74:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ee76:	bf00      	nop
 801ee78:	46bd      	mov	sp, r7
 801ee7a:	bc80      	pop	{r7}
 801ee7c:	4770      	bx	lr

0801ee7e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ee7e:	b480      	push	{r7}
 801ee80:	b083      	sub	sp, #12
 801ee82:	af00      	add	r7, sp, #0
 801ee84:	4603      	mov	r3, r0
 801ee86:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ee88:	bf00      	nop
 801ee8a:	370c      	adds	r7, #12
 801ee8c:	46bd      	mov	sp, r7
 801ee8e:	bc80      	pop	{r7}
 801ee90:	4770      	bx	lr
	...

0801ee94 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ee94:	b480      	push	{r7}
 801ee96:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ee98:	4b04      	ldr	r3, [pc, #16]	; (801eeac <UTIL_LPM_Init+0x18>)
 801ee9a:	2200      	movs	r2, #0
 801ee9c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ee9e:	4b04      	ldr	r3, [pc, #16]	; (801eeb0 <UTIL_LPM_Init+0x1c>)
 801eea0:	2200      	movs	r2, #0
 801eea2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801eea4:	bf00      	nop
 801eea6:	46bd      	mov	sp, r7
 801eea8:	bc80      	pop	{r7}
 801eeaa:	4770      	bx	lr
 801eeac:	20001e68 	.word	0x20001e68
 801eeb0:	20001e6c 	.word	0x20001e6c

0801eeb4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801eeb4:	b480      	push	{r7}
 801eeb6:	b087      	sub	sp, #28
 801eeb8:	af00      	add	r7, sp, #0
 801eeba:	6078      	str	r0, [r7, #4]
 801eebc:	460b      	mov	r3, r1
 801eebe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eec0:	f3ef 8310 	mrs	r3, PRIMASK
 801eec4:	613b      	str	r3, [r7, #16]
  return(result);
 801eec6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801eec8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801eeca:	b672      	cpsid	i
}
 801eecc:	bf00      	nop
  
  switch( state )
 801eece:	78fb      	ldrb	r3, [r7, #3]
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	d008      	beq.n	801eee6 <UTIL_LPM_SetStopMode+0x32>
 801eed4:	2b01      	cmp	r3, #1
 801eed6:	d10e      	bne.n	801eef6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801eed8:	4b0d      	ldr	r3, [pc, #52]	; (801ef10 <UTIL_LPM_SetStopMode+0x5c>)
 801eeda:	681a      	ldr	r2, [r3, #0]
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	4313      	orrs	r3, r2
 801eee0:	4a0b      	ldr	r2, [pc, #44]	; (801ef10 <UTIL_LPM_SetStopMode+0x5c>)
 801eee2:	6013      	str	r3, [r2, #0]
      break;
 801eee4:	e008      	b.n	801eef8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	43da      	mvns	r2, r3
 801eeea:	4b09      	ldr	r3, [pc, #36]	; (801ef10 <UTIL_LPM_SetStopMode+0x5c>)
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	4013      	ands	r3, r2
 801eef0:	4a07      	ldr	r2, [pc, #28]	; (801ef10 <UTIL_LPM_SetStopMode+0x5c>)
 801eef2:	6013      	str	r3, [r2, #0]
      break;
 801eef4:	e000      	b.n	801eef8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801eef6:	bf00      	nop
 801eef8:	697b      	ldr	r3, [r7, #20]
 801eefa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eefc:	68fb      	ldr	r3, [r7, #12]
 801eefe:	f383 8810 	msr	PRIMASK, r3
}
 801ef02:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ef04:	bf00      	nop
 801ef06:	371c      	adds	r7, #28
 801ef08:	46bd      	mov	sp, r7
 801ef0a:	bc80      	pop	{r7}
 801ef0c:	4770      	bx	lr
 801ef0e:	bf00      	nop
 801ef10:	20001e68 	.word	0x20001e68

0801ef14 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ef14:	b480      	push	{r7}
 801ef16:	b087      	sub	sp, #28
 801ef18:	af00      	add	r7, sp, #0
 801ef1a:	6078      	str	r0, [r7, #4]
 801ef1c:	460b      	mov	r3, r1
 801ef1e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef20:	f3ef 8310 	mrs	r3, PRIMASK
 801ef24:	613b      	str	r3, [r7, #16]
  return(result);
 801ef26:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ef28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ef2a:	b672      	cpsid	i
}
 801ef2c:	bf00      	nop
  
  switch(state)
 801ef2e:	78fb      	ldrb	r3, [r7, #3]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d008      	beq.n	801ef46 <UTIL_LPM_SetOffMode+0x32>
 801ef34:	2b01      	cmp	r3, #1
 801ef36:	d10e      	bne.n	801ef56 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ef38:	4b0d      	ldr	r3, [pc, #52]	; (801ef70 <UTIL_LPM_SetOffMode+0x5c>)
 801ef3a:	681a      	ldr	r2, [r3, #0]
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	4313      	orrs	r3, r2
 801ef40:	4a0b      	ldr	r2, [pc, #44]	; (801ef70 <UTIL_LPM_SetOffMode+0x5c>)
 801ef42:	6013      	str	r3, [r2, #0]
      break;
 801ef44:	e008      	b.n	801ef58 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	43da      	mvns	r2, r3
 801ef4a:	4b09      	ldr	r3, [pc, #36]	; (801ef70 <UTIL_LPM_SetOffMode+0x5c>)
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	4013      	ands	r3, r2
 801ef50:	4a07      	ldr	r2, [pc, #28]	; (801ef70 <UTIL_LPM_SetOffMode+0x5c>)
 801ef52:	6013      	str	r3, [r2, #0]
      break;
 801ef54:	e000      	b.n	801ef58 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ef56:	bf00      	nop
 801ef58:	697b      	ldr	r3, [r7, #20]
 801ef5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	f383 8810 	msr	PRIMASK, r3
}
 801ef62:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ef64:	bf00      	nop
 801ef66:	371c      	adds	r7, #28
 801ef68:	46bd      	mov	sp, r7
 801ef6a:	bc80      	pop	{r7}
 801ef6c:	4770      	bx	lr
 801ef6e:	bf00      	nop
 801ef70:	20001e6c 	.word	0x20001e6c

0801ef74 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801ef74:	b580      	push	{r7, lr}
 801ef76:	b084      	sub	sp, #16
 801ef78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef7a:	f3ef 8310 	mrs	r3, PRIMASK
 801ef7e:	60bb      	str	r3, [r7, #8]
  return(result);
 801ef80:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ef82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ef84:	b672      	cpsid	i
}
 801ef86:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ef88:	4b12      	ldr	r3, [pc, #72]	; (801efd4 <UTIL_LPM_EnterLowPower+0x60>)
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d006      	beq.n	801ef9e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ef90:	4b11      	ldr	r3, [pc, #68]	; (801efd8 <UTIL_LPM_EnterLowPower+0x64>)
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ef96:	4b10      	ldr	r3, [pc, #64]	; (801efd8 <UTIL_LPM_EnterLowPower+0x64>)
 801ef98:	685b      	ldr	r3, [r3, #4]
 801ef9a:	4798      	blx	r3
 801ef9c:	e010      	b.n	801efc0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ef9e:	4b0f      	ldr	r3, [pc, #60]	; (801efdc <UTIL_LPM_EnterLowPower+0x68>)
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d006      	beq.n	801efb4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801efa6:	4b0c      	ldr	r3, [pc, #48]	; (801efd8 <UTIL_LPM_EnterLowPower+0x64>)
 801efa8:	689b      	ldr	r3, [r3, #8]
 801efaa:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801efac:	4b0a      	ldr	r3, [pc, #40]	; (801efd8 <UTIL_LPM_EnterLowPower+0x64>)
 801efae:	68db      	ldr	r3, [r3, #12]
 801efb0:	4798      	blx	r3
 801efb2:	e005      	b.n	801efc0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801efb4:	4b08      	ldr	r3, [pc, #32]	; (801efd8 <UTIL_LPM_EnterLowPower+0x64>)
 801efb6:	691b      	ldr	r3, [r3, #16]
 801efb8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801efba:	4b07      	ldr	r3, [pc, #28]	; (801efd8 <UTIL_LPM_EnterLowPower+0x64>)
 801efbc:	695b      	ldr	r3, [r3, #20]
 801efbe:	4798      	blx	r3
 801efc0:	68fb      	ldr	r3, [r7, #12]
 801efc2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	f383 8810 	msr	PRIMASK, r3
}
 801efca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801efcc:	bf00      	nop
 801efce:	3710      	adds	r7, #16
 801efd0:	46bd      	mov	sp, r7
 801efd2:	bd80      	pop	{r7, pc}
 801efd4:	20001e68 	.word	0x20001e68
 801efd8:	080219cc 	.word	0x080219cc
 801efdc:	20001e6c 	.word	0x20001e6c

0801efe0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801efe0:	b480      	push	{r7}
 801efe2:	b087      	sub	sp, #28
 801efe4:	af00      	add	r7, sp, #0
 801efe6:	60f8      	str	r0, [r7, #12]
 801efe8:	60b9      	str	r1, [r7, #8]
 801efea:	4613      	mov	r3, r2
 801efec:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801efee:	68fb      	ldr	r3, [r7, #12]
 801eff0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801eff2:	68bb      	ldr	r3, [r7, #8]
 801eff4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801eff6:	e007      	b.n	801f008 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801eff8:	693a      	ldr	r2, [r7, #16]
 801effa:	1c53      	adds	r3, r2, #1
 801effc:	613b      	str	r3, [r7, #16]
 801effe:	697b      	ldr	r3, [r7, #20]
 801f000:	1c59      	adds	r1, r3, #1
 801f002:	6179      	str	r1, [r7, #20]
 801f004:	7812      	ldrb	r2, [r2, #0]
 801f006:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801f008:	88fb      	ldrh	r3, [r7, #6]
 801f00a:	1e5a      	subs	r2, r3, #1
 801f00c:	80fa      	strh	r2, [r7, #6]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d1f2      	bne.n	801eff8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801f012:	bf00      	nop
 801f014:	bf00      	nop
 801f016:	371c      	adds	r7, #28
 801f018:	46bd      	mov	sp, r7
 801f01a:	bc80      	pop	{r7}
 801f01c:	4770      	bx	lr

0801f01e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801f01e:	b480      	push	{r7}
 801f020:	b085      	sub	sp, #20
 801f022:	af00      	add	r7, sp, #0
 801f024:	6078      	str	r0, [r7, #4]
 801f026:	460b      	mov	r3, r1
 801f028:	70fb      	strb	r3, [r7, #3]
 801f02a:	4613      	mov	r3, r2
 801f02c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801f032:	e004      	b.n	801f03e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801f034:	68fb      	ldr	r3, [r7, #12]
 801f036:	1c5a      	adds	r2, r3, #1
 801f038:	60fa      	str	r2, [r7, #12]
 801f03a:	78fa      	ldrb	r2, [r7, #3]
 801f03c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801f03e:	883b      	ldrh	r3, [r7, #0]
 801f040:	1e5a      	subs	r2, r3, #1
 801f042:	803a      	strh	r2, [r7, #0]
 801f044:	2b00      	cmp	r3, #0
 801f046:	d1f5      	bne.n	801f034 <UTIL_MEM_set_8+0x16>
  }
}
 801f048:	bf00      	nop
 801f04a:	bf00      	nop
 801f04c:	3714      	adds	r7, #20
 801f04e:	46bd      	mov	sp, r7
 801f050:	bc80      	pop	{r7}
 801f052:	4770      	bx	lr

0801f054 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801f054:	b082      	sub	sp, #8
 801f056:	b480      	push	{r7}
 801f058:	b087      	sub	sp, #28
 801f05a:	af00      	add	r7, sp, #0
 801f05c:	60f8      	str	r0, [r7, #12]
 801f05e:	1d38      	adds	r0, r7, #4
 801f060:	e880 0006 	stmia.w	r0, {r1, r2}
 801f064:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801f066:	2300      	movs	r3, #0
 801f068:	613b      	str	r3, [r7, #16]
 801f06a:	2300      	movs	r3, #0
 801f06c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801f06e:	687a      	ldr	r2, [r7, #4]
 801f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f072:	4413      	add	r3, r2
 801f074:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801f076:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f07a:	b29a      	uxth	r2, r3
 801f07c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f080:	b29b      	uxth	r3, r3
 801f082:	4413      	add	r3, r2
 801f084:	b29b      	uxth	r3, r3
 801f086:	b21b      	sxth	r3, r3
 801f088:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801f08a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f08e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801f092:	db0a      	blt.n	801f0aa <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801f094:	693b      	ldr	r3, [r7, #16]
 801f096:	3301      	adds	r3, #1
 801f098:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801f09a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f09e:	b29b      	uxth	r3, r3
 801f0a0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801f0a4:	b29b      	uxth	r3, r3
 801f0a6:	b21b      	sxth	r3, r3
 801f0a8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f0aa:	68fb      	ldr	r3, [r7, #12]
 801f0ac:	461a      	mov	r2, r3
 801f0ae:	f107 0310 	add.w	r3, r7, #16
 801f0b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f0b6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f0ba:	68f8      	ldr	r0, [r7, #12]
 801f0bc:	371c      	adds	r7, #28
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	bc80      	pop	{r7}
 801f0c2:	b002      	add	sp, #8
 801f0c4:	4770      	bx	lr

0801f0c6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801f0c6:	b082      	sub	sp, #8
 801f0c8:	b480      	push	{r7}
 801f0ca:	b087      	sub	sp, #28
 801f0cc:	af00      	add	r7, sp, #0
 801f0ce:	60f8      	str	r0, [r7, #12]
 801f0d0:	1d38      	adds	r0, r7, #4
 801f0d2:	e880 0006 	stmia.w	r0, {r1, r2}
 801f0d6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801f0d8:	2300      	movs	r3, #0
 801f0da:	613b      	str	r3, [r7, #16]
 801f0dc:	2300      	movs	r3, #0
 801f0de:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801f0e0:	687a      	ldr	r2, [r7, #4]
 801f0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0e4:	1ad3      	subs	r3, r2, r3
 801f0e6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801f0e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f0ec:	b29a      	uxth	r2, r3
 801f0ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f0f2:	b29b      	uxth	r3, r3
 801f0f4:	1ad3      	subs	r3, r2, r3
 801f0f6:	b29b      	uxth	r3, r3
 801f0f8:	b21b      	sxth	r3, r3
 801f0fa:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801f0fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f100:	2b00      	cmp	r3, #0
 801f102:	da0a      	bge.n	801f11a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801f104:	693b      	ldr	r3, [r7, #16]
 801f106:	3b01      	subs	r3, #1
 801f108:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801f10a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f10e:	b29b      	uxth	r3, r3
 801f110:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801f114:	b29b      	uxth	r3, r3
 801f116:	b21b      	sxth	r3, r3
 801f118:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f11a:	68fb      	ldr	r3, [r7, #12]
 801f11c:	461a      	mov	r2, r3
 801f11e:	f107 0310 	add.w	r3, r7, #16
 801f122:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f126:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f12a:	68f8      	ldr	r0, [r7, #12]
 801f12c:	371c      	adds	r7, #28
 801f12e:	46bd      	mov	sp, r7
 801f130:	bc80      	pop	{r7}
 801f132:	b002      	add	sp, #8
 801f134:	4770      	bx	lr
	...

0801f138 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801f138:	b580      	push	{r7, lr}
 801f13a:	b088      	sub	sp, #32
 801f13c:	af02      	add	r7, sp, #8
 801f13e:	463b      	mov	r3, r7
 801f140:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f144:	2300      	movs	r3, #0
 801f146:	60bb      	str	r3, [r7, #8]
 801f148:	2300      	movs	r3, #0
 801f14a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f14c:	4b10      	ldr	r3, [pc, #64]	; (801f190 <SysTimeSet+0x58>)
 801f14e:	691b      	ldr	r3, [r3, #16]
 801f150:	f107 0208 	add.w	r2, r7, #8
 801f154:	3204      	adds	r2, #4
 801f156:	4610      	mov	r0, r2
 801f158:	4798      	blx	r3
 801f15a:	4603      	mov	r3, r0
 801f15c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801f15e:	f107 0010 	add.w	r0, r7, #16
 801f162:	68fb      	ldr	r3, [r7, #12]
 801f164:	9300      	str	r3, [sp, #0]
 801f166:	68bb      	ldr	r3, [r7, #8]
 801f168:	463a      	mov	r2, r7
 801f16a:	ca06      	ldmia	r2, {r1, r2}
 801f16c:	f7ff ffab 	bl	801f0c6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801f170:	4b07      	ldr	r3, [pc, #28]	; (801f190 <SysTimeSet+0x58>)
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	693a      	ldr	r2, [r7, #16]
 801f176:	4610      	mov	r0, r2
 801f178:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801f17a:	4b05      	ldr	r3, [pc, #20]	; (801f190 <SysTimeSet+0x58>)
 801f17c:	689b      	ldr	r3, [r3, #8]
 801f17e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f182:	4610      	mov	r0, r2
 801f184:	4798      	blx	r3
}
 801f186:	bf00      	nop
 801f188:	3718      	adds	r7, #24
 801f18a:	46bd      	mov	sp, r7
 801f18c:	bd80      	pop	{r7, pc}
 801f18e:	bf00      	nop
 801f190:	08021ab0 	.word	0x08021ab0

0801f194 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801f194:	b580      	push	{r7, lr}
 801f196:	b08a      	sub	sp, #40	; 0x28
 801f198:	af02      	add	r7, sp, #8
 801f19a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f19c:	2300      	movs	r3, #0
 801f19e:	61bb      	str	r3, [r7, #24]
 801f1a0:	2300      	movs	r3, #0
 801f1a2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	613b      	str	r3, [r7, #16]
 801f1a8:	2300      	movs	r3, #0
 801f1aa:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f1ac:	4b14      	ldr	r3, [pc, #80]	; (801f200 <SysTimeGet+0x6c>)
 801f1ae:	691b      	ldr	r3, [r3, #16]
 801f1b0:	f107 0218 	add.w	r2, r7, #24
 801f1b4:	3204      	adds	r2, #4
 801f1b6:	4610      	mov	r0, r2
 801f1b8:	4798      	blx	r3
 801f1ba:	4603      	mov	r3, r0
 801f1bc:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f1be:	4b10      	ldr	r3, [pc, #64]	; (801f200 <SysTimeGet+0x6c>)
 801f1c0:	68db      	ldr	r3, [r3, #12]
 801f1c2:	4798      	blx	r3
 801f1c4:	4603      	mov	r3, r0
 801f1c6:	b21b      	sxth	r3, r3
 801f1c8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f1ca:	4b0d      	ldr	r3, [pc, #52]	; (801f200 <SysTimeGet+0x6c>)
 801f1cc:	685b      	ldr	r3, [r3, #4]
 801f1ce:	4798      	blx	r3
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801f1d4:	f107 0010 	add.w	r0, r7, #16
 801f1d8:	69fb      	ldr	r3, [r7, #28]
 801f1da:	9300      	str	r3, [sp, #0]
 801f1dc:	69bb      	ldr	r3, [r7, #24]
 801f1de:	f107 0208 	add.w	r2, r7, #8
 801f1e2:	ca06      	ldmia	r2, {r1, r2}
 801f1e4:	f7ff ff36 	bl	801f054 <SysTimeAdd>

  return sysTime;
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	461a      	mov	r2, r3
 801f1ec:	f107 0310 	add.w	r3, r7, #16
 801f1f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f1f4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f1f8:	6878      	ldr	r0, [r7, #4]
 801f1fa:	3720      	adds	r7, #32
 801f1fc:	46bd      	mov	sp, r7
 801f1fe:	bd80      	pop	{r7, pc}
 801f200:	08021ab0 	.word	0x08021ab0

0801f204 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801f204:	b580      	push	{r7, lr}
 801f206:	b084      	sub	sp, #16
 801f208:	af00      	add	r7, sp, #0
 801f20a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f20c:	2300      	movs	r3, #0
 801f20e:	60bb      	str	r3, [r7, #8]
 801f210:	2300      	movs	r3, #0
 801f212:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f214:	4b0a      	ldr	r3, [pc, #40]	; (801f240 <SysTimeGetMcuTime+0x3c>)
 801f216:	691b      	ldr	r3, [r3, #16]
 801f218:	f107 0208 	add.w	r2, r7, #8
 801f21c:	3204      	adds	r2, #4
 801f21e:	4610      	mov	r0, r2
 801f220:	4798      	blx	r3
 801f222:	4603      	mov	r3, r0
 801f224:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	461a      	mov	r2, r3
 801f22a:	f107 0308 	add.w	r3, r7, #8
 801f22e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f232:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f236:	6878      	ldr	r0, [r7, #4]
 801f238:	3710      	adds	r7, #16
 801f23a:	46bd      	mov	sp, r7
 801f23c:	bd80      	pop	{r7, pc}
 801f23e:	bf00      	nop
 801f240:	08021ab0 	.word	0x08021ab0

0801f244 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801f244:	b580      	push	{r7, lr}
 801f246:	b088      	sub	sp, #32
 801f248:	af02      	add	r7, sp, #8
 801f24a:	463b      	mov	r3, r7
 801f24c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f250:	4b0f      	ldr	r3, [pc, #60]	; (801f290 <SysTimeToMs+0x4c>)
 801f252:	68db      	ldr	r3, [r3, #12]
 801f254:	4798      	blx	r3
 801f256:	4603      	mov	r3, r0
 801f258:	b21b      	sxth	r3, r3
 801f25a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f25c:	4b0c      	ldr	r3, [pc, #48]	; (801f290 <SysTimeToMs+0x4c>)
 801f25e:	685b      	ldr	r3, [r3, #4]
 801f260:	4798      	blx	r3
 801f262:	4603      	mov	r3, r0
 801f264:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801f266:	f107 0008 	add.w	r0, r7, #8
 801f26a:	697b      	ldr	r3, [r7, #20]
 801f26c:	9300      	str	r3, [sp, #0]
 801f26e:	693b      	ldr	r3, [r7, #16]
 801f270:	463a      	mov	r2, r7
 801f272:	ca06      	ldmia	r2, {r1, r2}
 801f274:	f7ff ff27 	bl	801f0c6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801f278:	68bb      	ldr	r3, [r7, #8]
 801f27a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f27e:	fb02 f303 	mul.w	r3, r2, r3
 801f282:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801f286:	4413      	add	r3, r2
}
 801f288:	4618      	mov	r0, r3
 801f28a:	3718      	adds	r7, #24
 801f28c:	46bd      	mov	sp, r7
 801f28e:	bd80      	pop	{r7, pc}
 801f290:	08021ab0 	.word	0x08021ab0

0801f294 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801f294:	b580      	push	{r7, lr}
 801f296:	b08a      	sub	sp, #40	; 0x28
 801f298:	af02      	add	r7, sp, #8
 801f29a:	6078      	str	r0, [r7, #4]
 801f29c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801f29e:	683b      	ldr	r3, [r7, #0]
 801f2a0:	4a19      	ldr	r2, [pc, #100]	; (801f308 <SysTimeFromMs+0x74>)
 801f2a2:	fba2 2303 	umull	r2, r3, r2, r3
 801f2a6:	099b      	lsrs	r3, r3, #6
 801f2a8:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801f2aa:	69fb      	ldr	r3, [r7, #28]
 801f2ac:	617b      	str	r3, [r7, #20]
 801f2ae:	683b      	ldr	r3, [r7, #0]
 801f2b0:	b29a      	uxth	r2, r3
 801f2b2:	69fb      	ldr	r3, [r7, #28]
 801f2b4:	b29b      	uxth	r3, r3
 801f2b6:	4619      	mov	r1, r3
 801f2b8:	0149      	lsls	r1, r1, #5
 801f2ba:	1ac9      	subs	r1, r1, r3
 801f2bc:	0089      	lsls	r1, r1, #2
 801f2be:	440b      	add	r3, r1
 801f2c0:	00db      	lsls	r3, r3, #3
 801f2c2:	b29b      	uxth	r3, r3
 801f2c4:	1ad3      	subs	r3, r2, r3
 801f2c6:	b29b      	uxth	r3, r3
 801f2c8:	b21b      	sxth	r3, r3
 801f2ca:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801f2cc:	f107 030c 	add.w	r3, r7, #12
 801f2d0:	2200      	movs	r2, #0
 801f2d2:	601a      	str	r2, [r3, #0]
 801f2d4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f2d6:	4b0d      	ldr	r3, [pc, #52]	; (801f30c <SysTimeFromMs+0x78>)
 801f2d8:	68db      	ldr	r3, [r3, #12]
 801f2da:	4798      	blx	r3
 801f2dc:	4603      	mov	r3, r0
 801f2de:	b21b      	sxth	r3, r3
 801f2e0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f2e2:	4b0a      	ldr	r3, [pc, #40]	; (801f30c <SysTimeFromMs+0x78>)
 801f2e4:	685b      	ldr	r3, [r3, #4]
 801f2e6:	4798      	blx	r3
 801f2e8:	4603      	mov	r3, r0
 801f2ea:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801f2ec:	6878      	ldr	r0, [r7, #4]
 801f2ee:	693b      	ldr	r3, [r7, #16]
 801f2f0:	9300      	str	r3, [sp, #0]
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	f107 0214 	add.w	r2, r7, #20
 801f2f8:	ca06      	ldmia	r2, {r1, r2}
 801f2fa:	f7ff feab 	bl	801f054 <SysTimeAdd>
}
 801f2fe:	6878      	ldr	r0, [r7, #4]
 801f300:	3720      	adds	r7, #32
 801f302:	46bd      	mov	sp, r7
 801f304:	bd80      	pop	{r7, pc}
 801f306:	bf00      	nop
 801f308:	10624dd3 	.word	0x10624dd3
 801f30c:	08021ab0 	.word	0x08021ab0

0801f310 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801f310:	b480      	push	{r7}
 801f312:	b085      	sub	sp, #20
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
  int i = 0;
 801f318:	2300      	movs	r3, #0
 801f31a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801f31c:	e00e      	b.n	801f33c <ee_skip_atoi+0x2c>
 801f31e:	68fa      	ldr	r2, [r7, #12]
 801f320:	4613      	mov	r3, r2
 801f322:	009b      	lsls	r3, r3, #2
 801f324:	4413      	add	r3, r2
 801f326:	005b      	lsls	r3, r3, #1
 801f328:	4618      	mov	r0, r3
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	1c59      	adds	r1, r3, #1
 801f330:	687a      	ldr	r2, [r7, #4]
 801f332:	6011      	str	r1, [r2, #0]
 801f334:	781b      	ldrb	r3, [r3, #0]
 801f336:	4403      	add	r3, r0
 801f338:	3b30      	subs	r3, #48	; 0x30
 801f33a:	60fb      	str	r3, [r7, #12]
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	781b      	ldrb	r3, [r3, #0]
 801f342:	2b2f      	cmp	r3, #47	; 0x2f
 801f344:	d904      	bls.n	801f350 <ee_skip_atoi+0x40>
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	781b      	ldrb	r3, [r3, #0]
 801f34c:	2b39      	cmp	r3, #57	; 0x39
 801f34e:	d9e6      	bls.n	801f31e <ee_skip_atoi+0xe>
  return i;
 801f350:	68fb      	ldr	r3, [r7, #12]
}
 801f352:	4618      	mov	r0, r3
 801f354:	3714      	adds	r7, #20
 801f356:	46bd      	mov	sp, r7
 801f358:	bc80      	pop	{r7}
 801f35a:	4770      	bx	lr

0801f35c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801f35c:	b480      	push	{r7}
 801f35e:	b099      	sub	sp, #100	; 0x64
 801f360:	af00      	add	r7, sp, #0
 801f362:	60f8      	str	r0, [r7, #12]
 801f364:	60b9      	str	r1, [r7, #8]
 801f366:	607a      	str	r2, [r7, #4]
 801f368:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801f36a:	4b71      	ldr	r3, [pc, #452]	; (801f530 <ee_number+0x1d4>)
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801f370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f376:	2b00      	cmp	r3, #0
 801f378:	d002      	beq.n	801f380 <ee_number+0x24>
 801f37a:	4b6e      	ldr	r3, [pc, #440]	; (801f534 <ee_number+0x1d8>)
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801f380:	683b      	ldr	r3, [r7, #0]
 801f382:	2b01      	cmp	r3, #1
 801f384:	dd02      	ble.n	801f38c <ee_number+0x30>
 801f386:	683b      	ldr	r3, [r7, #0]
 801f388:	2b24      	cmp	r3, #36	; 0x24
 801f38a:	dd01      	ble.n	801f390 <ee_number+0x34>
 801f38c:	2300      	movs	r3, #0
 801f38e:	e0ca      	b.n	801f526 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801f390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f392:	f003 0301 	and.w	r3, r3, #1
 801f396:	2b00      	cmp	r3, #0
 801f398:	d001      	beq.n	801f39e <ee_number+0x42>
 801f39a:	2330      	movs	r3, #48	; 0x30
 801f39c:	e000      	b.n	801f3a0 <ee_number+0x44>
 801f39e:	2320      	movs	r3, #32
 801f3a0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801f3aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f3ac:	f003 0302 	and.w	r3, r3, #2
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d00b      	beq.n	801f3cc <ee_number+0x70>
  {
    if (num < 0)
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	da08      	bge.n	801f3cc <ee_number+0x70>
    {
      sign = '-';
 801f3ba:	232d      	movs	r3, #45	; 0x2d
 801f3bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	425b      	negs	r3, r3
 801f3c4:	607b      	str	r3, [r7, #4]
      size--;
 801f3c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f3c8:	3b01      	subs	r3, #1
 801f3ca:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801f3cc:	2300      	movs	r3, #0
 801f3ce:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	d11e      	bne.n	801f414 <ee_number+0xb8>
    tmp[i++] = '0';
 801f3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f3d8:	1c5a      	adds	r2, r3, #1
 801f3da:	657a      	str	r2, [r7, #84]	; 0x54
 801f3dc:	3360      	adds	r3, #96	; 0x60
 801f3de:	443b      	add	r3, r7
 801f3e0:	2230      	movs	r2, #48	; 0x30
 801f3e2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801f3e6:	e018      	b.n	801f41a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	683a      	ldr	r2, [r7, #0]
 801f3ec:	fbb3 f1f2 	udiv	r1, r3, r2
 801f3f0:	fb01 f202 	mul.w	r2, r1, r2
 801f3f4:	1a9b      	subs	r3, r3, r2
 801f3f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f3f8:	441a      	add	r2, r3
 801f3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f3fc:	1c59      	adds	r1, r3, #1
 801f3fe:	6579      	str	r1, [r7, #84]	; 0x54
 801f400:	7812      	ldrb	r2, [r2, #0]
 801f402:	3360      	adds	r3, #96	; 0x60
 801f404:	443b      	add	r3, r7
 801f406:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801f40a:	687a      	ldr	r2, [r7, #4]
 801f40c:	683b      	ldr	r3, [r7, #0]
 801f40e:	fbb2 f3f3 	udiv	r3, r2, r3
 801f412:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	2b00      	cmp	r3, #0
 801f418:	d1e6      	bne.n	801f3e8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801f41a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f41e:	429a      	cmp	r2, r3
 801f420:	dd01      	ble.n	801f426 <ee_number+0xca>
 801f422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f424:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801f426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f42a:	1ad3      	subs	r3, r2, r3
 801f42c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801f42e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f430:	f003 0301 	and.w	r3, r3, #1
 801f434:	2b00      	cmp	r3, #0
 801f436:	d112      	bne.n	801f45e <ee_number+0x102>
 801f438:	e00c      	b.n	801f454 <ee_number+0xf8>
 801f43a:	68fb      	ldr	r3, [r7, #12]
 801f43c:	1c5a      	adds	r2, r3, #1
 801f43e:	60fa      	str	r2, [r7, #12]
 801f440:	2220      	movs	r2, #32
 801f442:	701a      	strb	r2, [r3, #0]
 801f444:	68bb      	ldr	r3, [r7, #8]
 801f446:	3b01      	subs	r3, #1
 801f448:	60bb      	str	r3, [r7, #8]
 801f44a:	68bb      	ldr	r3, [r7, #8]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d101      	bne.n	801f454 <ee_number+0xf8>
 801f450:	68fb      	ldr	r3, [r7, #12]
 801f452:	e068      	b.n	801f526 <ee_number+0x1ca>
 801f454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f456:	1e5a      	subs	r2, r3, #1
 801f458:	66ba      	str	r2, [r7, #104]	; 0x68
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	dced      	bgt.n	801f43a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801f45e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f462:	2b00      	cmp	r3, #0
 801f464:	d01b      	beq.n	801f49e <ee_number+0x142>
 801f466:	68fb      	ldr	r3, [r7, #12]
 801f468:	1c5a      	adds	r2, r3, #1
 801f46a:	60fa      	str	r2, [r7, #12]
 801f46c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801f470:	701a      	strb	r2, [r3, #0]
 801f472:	68bb      	ldr	r3, [r7, #8]
 801f474:	3b01      	subs	r3, #1
 801f476:	60bb      	str	r3, [r7, #8]
 801f478:	68bb      	ldr	r3, [r7, #8]
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d10f      	bne.n	801f49e <ee_number+0x142>
 801f47e:	68fb      	ldr	r3, [r7, #12]
 801f480:	e051      	b.n	801f526 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801f482:	68fb      	ldr	r3, [r7, #12]
 801f484:	1c5a      	adds	r2, r3, #1
 801f486:	60fa      	str	r2, [r7, #12]
 801f488:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801f48c:	701a      	strb	r2, [r3, #0]
 801f48e:	68bb      	ldr	r3, [r7, #8]
 801f490:	3b01      	subs	r3, #1
 801f492:	60bb      	str	r3, [r7, #8]
 801f494:	68bb      	ldr	r3, [r7, #8]
 801f496:	2b00      	cmp	r3, #0
 801f498:	d101      	bne.n	801f49e <ee_number+0x142>
 801f49a:	68fb      	ldr	r3, [r7, #12]
 801f49c:	e043      	b.n	801f526 <ee_number+0x1ca>
 801f49e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f4a0:	1e5a      	subs	r2, r3, #1
 801f4a2:	66ba      	str	r2, [r7, #104]	; 0x68
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	dcec      	bgt.n	801f482 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801f4a8:	e00c      	b.n	801f4c4 <ee_number+0x168>
 801f4aa:	68fb      	ldr	r3, [r7, #12]
 801f4ac:	1c5a      	adds	r2, r3, #1
 801f4ae:	60fa      	str	r2, [r7, #12]
 801f4b0:	2230      	movs	r2, #48	; 0x30
 801f4b2:	701a      	strb	r2, [r3, #0]
 801f4b4:	68bb      	ldr	r3, [r7, #8]
 801f4b6:	3b01      	subs	r3, #1
 801f4b8:	60bb      	str	r3, [r7, #8]
 801f4ba:	68bb      	ldr	r3, [r7, #8]
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	d101      	bne.n	801f4c4 <ee_number+0x168>
 801f4c0:	68fb      	ldr	r3, [r7, #12]
 801f4c2:	e030      	b.n	801f526 <ee_number+0x1ca>
 801f4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f4c6:	1e5a      	subs	r2, r3, #1
 801f4c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f4ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f4cc:	429a      	cmp	r2, r3
 801f4ce:	dbec      	blt.n	801f4aa <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801f4d0:	e010      	b.n	801f4f4 <ee_number+0x198>
 801f4d2:	68fb      	ldr	r3, [r7, #12]
 801f4d4:	1c5a      	adds	r2, r3, #1
 801f4d6:	60fa      	str	r2, [r7, #12]
 801f4d8:	f107 0110 	add.w	r1, r7, #16
 801f4dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f4de:	440a      	add	r2, r1
 801f4e0:	7812      	ldrb	r2, [r2, #0]
 801f4e2:	701a      	strb	r2, [r3, #0]
 801f4e4:	68bb      	ldr	r3, [r7, #8]
 801f4e6:	3b01      	subs	r3, #1
 801f4e8:	60bb      	str	r3, [r7, #8]
 801f4ea:	68bb      	ldr	r3, [r7, #8]
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d101      	bne.n	801f4f4 <ee_number+0x198>
 801f4f0:	68fb      	ldr	r3, [r7, #12]
 801f4f2:	e018      	b.n	801f526 <ee_number+0x1ca>
 801f4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f4f6:	1e5a      	subs	r2, r3, #1
 801f4f8:	657a      	str	r2, [r7, #84]	; 0x54
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	dce9      	bgt.n	801f4d2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801f4fe:	e00c      	b.n	801f51a <ee_number+0x1be>
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	1c5a      	adds	r2, r3, #1
 801f504:	60fa      	str	r2, [r7, #12]
 801f506:	2220      	movs	r2, #32
 801f508:	701a      	strb	r2, [r3, #0]
 801f50a:	68bb      	ldr	r3, [r7, #8]
 801f50c:	3b01      	subs	r3, #1
 801f50e:	60bb      	str	r3, [r7, #8]
 801f510:	68bb      	ldr	r3, [r7, #8]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d101      	bne.n	801f51a <ee_number+0x1be>
 801f516:	68fb      	ldr	r3, [r7, #12]
 801f518:	e005      	b.n	801f526 <ee_number+0x1ca>
 801f51a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f51c:	1e5a      	subs	r2, r3, #1
 801f51e:	66ba      	str	r2, [r7, #104]	; 0x68
 801f520:	2b00      	cmp	r3, #0
 801f522:	dced      	bgt.n	801f500 <ee_number+0x1a4>

  return str;
 801f524:	68fb      	ldr	r3, [r7, #12]
}
 801f526:	4618      	mov	r0, r3
 801f528:	3764      	adds	r7, #100	; 0x64
 801f52a:	46bd      	mov	sp, r7
 801f52c:	bc80      	pop	{r7}
 801f52e:	4770      	bx	lr
 801f530:	20000138 	.word	0x20000138
 801f534:	2000013c 	.word	0x2000013c

0801f538 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801f538:	b580      	push	{r7, lr}
 801f53a:	b092      	sub	sp, #72	; 0x48
 801f53c:	af04      	add	r7, sp, #16
 801f53e:	60f8      	str	r0, [r7, #12]
 801f540:	60b9      	str	r1, [r7, #8]
 801f542:	607a      	str	r2, [r7, #4]
 801f544:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801f546:	68bb      	ldr	r3, [r7, #8]
 801f548:	2b00      	cmp	r3, #0
 801f54a:	dc01      	bgt.n	801f550 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801f54c:	2300      	movs	r3, #0
 801f54e:	e142      	b.n	801f7d6 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f554:	e12a      	b.n	801f7ac <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801f556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f558:	68fb      	ldr	r3, [r7, #12]
 801f55a:	1ad2      	subs	r2, r2, r3
 801f55c:	68bb      	ldr	r3, [r7, #8]
 801f55e:	3b01      	subs	r3, #1
 801f560:	429a      	cmp	r2, r3
 801f562:	f280 8131 	bge.w	801f7c8 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	781b      	ldrb	r3, [r3, #0]
 801f56a:	2b25      	cmp	r3, #37	; 0x25
 801f56c:	d006      	beq.n	801f57c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801f56e:	687a      	ldr	r2, [r7, #4]
 801f570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f572:	1c59      	adds	r1, r3, #1
 801f574:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f576:	7812      	ldrb	r2, [r2, #0]
 801f578:	701a      	strb	r2, [r3, #0]
      continue;
 801f57a:	e114      	b.n	801f7a6 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801f57c:	2300      	movs	r3, #0
 801f57e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	3301      	adds	r3, #1
 801f584:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	781b      	ldrb	r3, [r3, #0]
 801f58a:	2b30      	cmp	r3, #48	; 0x30
 801f58c:	d103      	bne.n	801f596 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801f58e:	6a3b      	ldr	r3, [r7, #32]
 801f590:	f043 0301 	orr.w	r3, r3, #1
 801f594:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801f596:	f04f 33ff 	mov.w	r3, #4294967295
 801f59a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	781b      	ldrb	r3, [r3, #0]
 801f5a0:	2b2f      	cmp	r3, #47	; 0x2f
 801f5a2:	d908      	bls.n	801f5b6 <tiny_vsnprintf_like+0x7e>
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	781b      	ldrb	r3, [r3, #0]
 801f5a8:	2b39      	cmp	r3, #57	; 0x39
 801f5aa:	d804      	bhi.n	801f5b6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801f5ac:	1d3b      	adds	r3, r7, #4
 801f5ae:	4618      	mov	r0, r3
 801f5b0:	f7ff feae 	bl	801f310 <ee_skip_atoi>
 801f5b4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801f5b6:	f04f 33ff 	mov.w	r3, #4294967295
 801f5ba:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801f5bc:	f04f 33ff 	mov.w	r3, #4294967295
 801f5c0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801f5c2:	230a      	movs	r3, #10
 801f5c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	781b      	ldrb	r3, [r3, #0]
 801f5ca:	3b58      	subs	r3, #88	; 0x58
 801f5cc:	2b20      	cmp	r3, #32
 801f5ce:	f200 8094 	bhi.w	801f6fa <tiny_vsnprintf_like+0x1c2>
 801f5d2:	a201      	add	r2, pc, #4	; (adr r2, 801f5d8 <tiny_vsnprintf_like+0xa0>)
 801f5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f5d8:	0801f6e3 	.word	0x0801f6e3
 801f5dc:	0801f6fb 	.word	0x0801f6fb
 801f5e0:	0801f6fb 	.word	0x0801f6fb
 801f5e4:	0801f6fb 	.word	0x0801f6fb
 801f5e8:	0801f6fb 	.word	0x0801f6fb
 801f5ec:	0801f6fb 	.word	0x0801f6fb
 801f5f0:	0801f6fb 	.word	0x0801f6fb
 801f5f4:	0801f6fb 	.word	0x0801f6fb
 801f5f8:	0801f6fb 	.word	0x0801f6fb
 801f5fc:	0801f6fb 	.word	0x0801f6fb
 801f600:	0801f6fb 	.word	0x0801f6fb
 801f604:	0801f667 	.word	0x0801f667
 801f608:	0801f6f1 	.word	0x0801f6f1
 801f60c:	0801f6fb 	.word	0x0801f6fb
 801f610:	0801f6fb 	.word	0x0801f6fb
 801f614:	0801f6fb 	.word	0x0801f6fb
 801f618:	0801f6fb 	.word	0x0801f6fb
 801f61c:	0801f6f1 	.word	0x0801f6f1
 801f620:	0801f6fb 	.word	0x0801f6fb
 801f624:	0801f6fb 	.word	0x0801f6fb
 801f628:	0801f6fb 	.word	0x0801f6fb
 801f62c:	0801f6fb 	.word	0x0801f6fb
 801f630:	0801f6fb 	.word	0x0801f6fb
 801f634:	0801f6fb 	.word	0x0801f6fb
 801f638:	0801f6fb 	.word	0x0801f6fb
 801f63c:	0801f6fb 	.word	0x0801f6fb
 801f640:	0801f6fb 	.word	0x0801f6fb
 801f644:	0801f687 	.word	0x0801f687
 801f648:	0801f6fb 	.word	0x0801f6fb
 801f64c:	0801f747 	.word	0x0801f747
 801f650:	0801f6fb 	.word	0x0801f6fb
 801f654:	0801f6fb 	.word	0x0801f6fb
 801f658:	0801f6eb 	.word	0x0801f6eb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801f65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f65e:	1c5a      	adds	r2, r3, #1
 801f660:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f662:	2220      	movs	r2, #32
 801f664:	701a      	strb	r2, [r3, #0]
 801f666:	69fb      	ldr	r3, [r7, #28]
 801f668:	3b01      	subs	r3, #1
 801f66a:	61fb      	str	r3, [r7, #28]
 801f66c:	69fb      	ldr	r3, [r7, #28]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	dcf4      	bgt.n	801f65c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801f672:	683b      	ldr	r3, [r7, #0]
 801f674:	1d1a      	adds	r2, r3, #4
 801f676:	603a      	str	r2, [r7, #0]
 801f678:	6819      	ldr	r1, [r3, #0]
 801f67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f67c:	1c5a      	adds	r2, r3, #1
 801f67e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f680:	b2ca      	uxtb	r2, r1
 801f682:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801f684:	e08f      	b.n	801f7a6 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801f686:	683b      	ldr	r3, [r7, #0]
 801f688:	1d1a      	adds	r2, r3, #4
 801f68a:	603a      	str	r2, [r7, #0]
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f692:	2b00      	cmp	r3, #0
 801f694:	d101      	bne.n	801f69a <tiny_vsnprintf_like+0x162>
 801f696:	4b52      	ldr	r3, [pc, #328]	; (801f7e0 <tiny_vsnprintf_like+0x2a8>)
 801f698:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801f69a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f69c:	f7e0 fd70 	bl	8000180 <strlen>
 801f6a0:	4603      	mov	r3, r0
 801f6a2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801f6a4:	e004      	b.n	801f6b0 <tiny_vsnprintf_like+0x178>
 801f6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6a8:	1c5a      	adds	r2, r3, #1
 801f6aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f6ac:	2220      	movs	r2, #32
 801f6ae:	701a      	strb	r2, [r3, #0]
 801f6b0:	69fb      	ldr	r3, [r7, #28]
 801f6b2:	1e5a      	subs	r2, r3, #1
 801f6b4:	61fa      	str	r2, [r7, #28]
 801f6b6:	693a      	ldr	r2, [r7, #16]
 801f6b8:	429a      	cmp	r2, r3
 801f6ba:	dbf4      	blt.n	801f6a6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801f6bc:	2300      	movs	r3, #0
 801f6be:	62bb      	str	r3, [r7, #40]	; 0x28
 801f6c0:	e00a      	b.n	801f6d8 <tiny_vsnprintf_like+0x1a0>
 801f6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f6c4:	1c53      	adds	r3, r2, #1
 801f6c6:	627b      	str	r3, [r7, #36]	; 0x24
 801f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6ca:	1c59      	adds	r1, r3, #1
 801f6cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f6ce:	7812      	ldrb	r2, [r2, #0]
 801f6d0:	701a      	strb	r2, [r3, #0]
 801f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6d4:	3301      	adds	r3, #1
 801f6d6:	62bb      	str	r3, [r7, #40]	; 0x28
 801f6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f6da:	693b      	ldr	r3, [r7, #16]
 801f6dc:	429a      	cmp	r2, r3
 801f6de:	dbf0      	blt.n	801f6c2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801f6e0:	e061      	b.n	801f7a6 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801f6e2:	6a3b      	ldr	r3, [r7, #32]
 801f6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f6e8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801f6ea:	2310      	movs	r3, #16
 801f6ec:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801f6ee:	e02d      	b.n	801f74c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801f6f0:	6a3b      	ldr	r3, [r7, #32]
 801f6f2:	f043 0302 	orr.w	r3, r3, #2
 801f6f6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801f6f8:	e025      	b.n	801f746 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	781b      	ldrb	r3, [r3, #0]
 801f6fe:	2b25      	cmp	r3, #37	; 0x25
 801f700:	d004      	beq.n	801f70c <tiny_vsnprintf_like+0x1d4>
 801f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f704:	1c5a      	adds	r2, r3, #1
 801f706:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f708:	2225      	movs	r2, #37	; 0x25
 801f70a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801f70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f70e:	68fb      	ldr	r3, [r7, #12]
 801f710:	1ad2      	subs	r2, r2, r3
 801f712:	68bb      	ldr	r3, [r7, #8]
 801f714:	3b01      	subs	r3, #1
 801f716:	429a      	cmp	r2, r3
 801f718:	da17      	bge.n	801f74a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	781b      	ldrb	r3, [r3, #0]
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d006      	beq.n	801f730 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801f722:	687a      	ldr	r2, [r7, #4]
 801f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f726:	1c59      	adds	r1, r3, #1
 801f728:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f72a:	7812      	ldrb	r2, [r2, #0]
 801f72c:	701a      	strb	r2, [r3, #0]
 801f72e:	e002      	b.n	801f736 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	3b01      	subs	r3, #1
 801f734:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801f736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f738:	68fb      	ldr	r3, [r7, #12]
 801f73a:	1ad2      	subs	r2, r2, r3
 801f73c:	68bb      	ldr	r3, [r7, #8]
 801f73e:	3b01      	subs	r3, #1
 801f740:	429a      	cmp	r2, r3
 801f742:	db2f      	blt.n	801f7a4 <tiny_vsnprintf_like+0x26c>
 801f744:	e002      	b.n	801f74c <tiny_vsnprintf_like+0x214>
        break;
 801f746:	bf00      	nop
 801f748:	e000      	b.n	801f74c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801f74a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801f74c:	697b      	ldr	r3, [r7, #20]
 801f74e:	2b6c      	cmp	r3, #108	; 0x6c
 801f750:	d105      	bne.n	801f75e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801f752:	683b      	ldr	r3, [r7, #0]
 801f754:	1d1a      	adds	r2, r3, #4
 801f756:	603a      	str	r2, [r7, #0]
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	637b      	str	r3, [r7, #52]	; 0x34
 801f75c:	e00f      	b.n	801f77e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801f75e:	6a3b      	ldr	r3, [r7, #32]
 801f760:	f003 0302 	and.w	r3, r3, #2
 801f764:	2b00      	cmp	r3, #0
 801f766:	d005      	beq.n	801f774 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801f768:	683b      	ldr	r3, [r7, #0]
 801f76a:	1d1a      	adds	r2, r3, #4
 801f76c:	603a      	str	r2, [r7, #0]
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	637b      	str	r3, [r7, #52]	; 0x34
 801f772:	e004      	b.n	801f77e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801f774:	683b      	ldr	r3, [r7, #0]
 801f776:	1d1a      	adds	r2, r3, #4
 801f778:	603a      	str	r2, [r7, #0]
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801f77e:	68bb      	ldr	r3, [r7, #8]
 801f780:	1e5a      	subs	r2, r3, #1
 801f782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f784:	68fb      	ldr	r3, [r7, #12]
 801f786:	1acb      	subs	r3, r1, r3
 801f788:	1ad1      	subs	r1, r2, r3
 801f78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f78c:	6a3b      	ldr	r3, [r7, #32]
 801f78e:	9302      	str	r3, [sp, #8]
 801f790:	69bb      	ldr	r3, [r7, #24]
 801f792:	9301      	str	r3, [sp, #4]
 801f794:	69fb      	ldr	r3, [r7, #28]
 801f796:	9300      	str	r3, [sp, #0]
 801f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f79c:	f7ff fdde 	bl	801f35c <ee_number>
 801f7a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f7a2:	e000      	b.n	801f7a6 <tiny_vsnprintf_like+0x26e>
        continue;
 801f7a4:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	3301      	adds	r3, #1
 801f7aa:	607b      	str	r3, [r7, #4]
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	781b      	ldrb	r3, [r3, #0]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	f47f aed0 	bne.w	801f556 <tiny_vsnprintf_like+0x1e>
 801f7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	1ad2      	subs	r2, r2, r3
 801f7bc:	68bb      	ldr	r3, [r7, #8]
 801f7be:	3b01      	subs	r3, #1
 801f7c0:	429a      	cmp	r2, r3
 801f7c2:	f6bf aec8 	bge.w	801f556 <tiny_vsnprintf_like+0x1e>
 801f7c6:	e000      	b.n	801f7ca <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801f7c8:	bf00      	nop
  }

  *str = '\0';
 801f7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7cc:	2200      	movs	r2, #0
 801f7ce:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801f7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f7d2:	68fb      	ldr	r3, [r7, #12]
 801f7d4:	1ad3      	subs	r3, r2, r3
}
 801f7d6:	4618      	mov	r0, r3
 801f7d8:	3738      	adds	r7, #56	; 0x38
 801f7da:	46bd      	mov	sp, r7
 801f7dc:	bd80      	pop	{r7, pc}
 801f7de:	bf00      	nop
 801f7e0:	080219c4 	.word	0x080219c4

0801f7e4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801f7e4:	b580      	push	{r7, lr}
 801f7e6:	b090      	sub	sp, #64	; 0x40
 801f7e8:	af00      	add	r7, sp, #0
 801f7ea:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801f7ec:	4b73      	ldr	r3, [pc, #460]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f7ee:	681b      	ldr	r3, [r3, #0]
 801f7f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801f7f2:	4b72      	ldr	r3, [pc, #456]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f7f4:	681a      	ldr	r2, [r3, #0]
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	4013      	ands	r3, r2
 801f7fa:	4a70      	ldr	r2, [pc, #448]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f7fc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801f7fe:	4b70      	ldr	r3, [pc, #448]	; (801f9c0 <UTIL_SEQ_Run+0x1dc>)
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801f804:	4b6f      	ldr	r3, [pc, #444]	; (801f9c4 <UTIL_SEQ_Run+0x1e0>)
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801f80a:	4b6f      	ldr	r3, [pc, #444]	; (801f9c8 <UTIL_SEQ_Run+0x1e4>)
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801f810:	4b6e      	ldr	r3, [pc, #440]	; (801f9cc <UTIL_SEQ_Run+0x1e8>)
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801f816:	e08d      	b.n	801f934 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801f818:	2300      	movs	r3, #0
 801f81a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801f81c:	e002      	b.n	801f824 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801f81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f820:	3301      	adds	r3, #1
 801f822:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801f824:	4a6a      	ldr	r2, [pc, #424]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f828:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f82e:	401a      	ands	r2, r3
 801f830:	4b62      	ldr	r3, [pc, #392]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	4013      	ands	r3, r2
 801f836:	2b00      	cmp	r3, #0
 801f838:	d0f1      	beq.n	801f81e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801f83a:	4a65      	ldr	r2, [pc, #404]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f83e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f844:	401a      	ands	r2, r3
 801f846:	4b5d      	ldr	r3, [pc, #372]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	4013      	ands	r3, r2
 801f84c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801f84e:	4a60      	ldr	r2, [pc, #384]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f852:	00db      	lsls	r3, r3, #3
 801f854:	4413      	add	r3, r2
 801f856:	685a      	ldr	r2, [r3, #4]
 801f858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f85a:	4013      	ands	r3, r2
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d106      	bne.n	801f86e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801f860:	4a5b      	ldr	r2, [pc, #364]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f864:	00db      	lsls	r3, r3, #3
 801f866:	4413      	add	r3, r2
 801f868:	f04f 32ff 	mov.w	r2, #4294967295
 801f86c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801f86e:	4a58      	ldr	r2, [pc, #352]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f872:	00db      	lsls	r3, r3, #3
 801f874:	4413      	add	r3, r2
 801f876:	685a      	ldr	r2, [r3, #4]
 801f878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f87a:	4013      	ands	r3, r2
 801f87c:	4618      	mov	r0, r3
 801f87e:	f000 f927 	bl	801fad0 <SEQ_BitPosition>
 801f882:	4603      	mov	r3, r0
 801f884:	461a      	mov	r2, r3
 801f886:	4b53      	ldr	r3, [pc, #332]	; (801f9d4 <UTIL_SEQ_Run+0x1f0>)
 801f888:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801f88a:	4a51      	ldr	r2, [pc, #324]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f88e:	00db      	lsls	r3, r3, #3
 801f890:	4413      	add	r3, r2
 801f892:	685a      	ldr	r2, [r3, #4]
 801f894:	4b4f      	ldr	r3, [pc, #316]	; (801f9d4 <UTIL_SEQ_Run+0x1f0>)
 801f896:	681b      	ldr	r3, [r3, #0]
 801f898:	2101      	movs	r1, #1
 801f89a:	fa01 f303 	lsl.w	r3, r1, r3
 801f89e:	43db      	mvns	r3, r3
 801f8a0:	401a      	ands	r2, r3
 801f8a2:	494b      	ldr	r1, [pc, #300]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f8a6:	00db      	lsls	r3, r3, #3
 801f8a8:	440b      	add	r3, r1
 801f8aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f8ac:	f3ef 8310 	mrs	r3, PRIMASK
 801f8b0:	61bb      	str	r3, [r7, #24]
  return(result);
 801f8b2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f8b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801f8b6:	b672      	cpsid	i
}
 801f8b8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801f8ba:	4b46      	ldr	r3, [pc, #280]	; (801f9d4 <UTIL_SEQ_Run+0x1f0>)
 801f8bc:	681b      	ldr	r3, [r3, #0]
 801f8be:	2201      	movs	r2, #1
 801f8c0:	fa02 f303 	lsl.w	r3, r2, r3
 801f8c4:	43da      	mvns	r2, r3
 801f8c6:	4b3e      	ldr	r3, [pc, #248]	; (801f9c0 <UTIL_SEQ_Run+0x1dc>)
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	4013      	ands	r3, r2
 801f8cc:	4a3c      	ldr	r2, [pc, #240]	; (801f9c0 <UTIL_SEQ_Run+0x1dc>)
 801f8ce:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801f8d0:	2301      	movs	r3, #1
 801f8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f8d4:	e013      	b.n	801f8fe <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801f8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f8d8:	3b01      	subs	r3, #1
 801f8da:	4a3d      	ldr	r2, [pc, #244]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f8dc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801f8e0:	4b3c      	ldr	r3, [pc, #240]	; (801f9d4 <UTIL_SEQ_Run+0x1f0>)
 801f8e2:	681b      	ldr	r3, [r3, #0]
 801f8e4:	2201      	movs	r2, #1
 801f8e6:	fa02 f303 	lsl.w	r3, r2, r3
 801f8ea:	43da      	mvns	r2, r3
 801f8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f8ee:	3b01      	subs	r3, #1
 801f8f0:	400a      	ands	r2, r1
 801f8f2:	4937      	ldr	r1, [pc, #220]	; (801f9d0 <UTIL_SEQ_Run+0x1ec>)
 801f8f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801f8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f8fa:	3b01      	subs	r3, #1
 801f8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f900:	2b00      	cmp	r3, #0
 801f902:	d1e8      	bne.n	801f8d6 <UTIL_SEQ_Run+0xf2>
 801f904:	6a3b      	ldr	r3, [r7, #32]
 801f906:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f908:	697b      	ldr	r3, [r7, #20]
 801f90a:	f383 8810 	msr	PRIMASK, r3
}
 801f90e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801f910:	4b30      	ldr	r3, [pc, #192]	; (801f9d4 <UTIL_SEQ_Run+0x1f0>)
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	4a30      	ldr	r2, [pc, #192]	; (801f9d8 <UTIL_SEQ_Run+0x1f4>)
 801f916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f91a:	4798      	blx	r3

    local_taskset = TaskSet;
 801f91c:	4b28      	ldr	r3, [pc, #160]	; (801f9c0 <UTIL_SEQ_Run+0x1dc>)
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801f922:	4b28      	ldr	r3, [pc, #160]	; (801f9c4 <UTIL_SEQ_Run+0x1e0>)
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801f928:	4b27      	ldr	r3, [pc, #156]	; (801f9c8 <UTIL_SEQ_Run+0x1e4>)
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801f92e:	4b27      	ldr	r3, [pc, #156]	; (801f9cc <UTIL_SEQ_Run+0x1e8>)
 801f930:	681b      	ldr	r3, [r3, #0]
 801f932:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801f934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f938:	401a      	ands	r2, r3
 801f93a:	4b20      	ldr	r3, [pc, #128]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	4013      	ands	r3, r2
 801f940:	2b00      	cmp	r3, #0
 801f942:	d005      	beq.n	801f950 <UTIL_SEQ_Run+0x16c>
 801f944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f948:	4013      	ands	r3, r2
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	f43f af64 	beq.w	801f818 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801f950:	4b20      	ldr	r3, [pc, #128]	; (801f9d4 <UTIL_SEQ_Run+0x1f0>)
 801f952:	f04f 32ff 	mov.w	r2, #4294967295
 801f956:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801f958:	f000 f8ae 	bl	801fab8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f95c:	f3ef 8310 	mrs	r3, PRIMASK
 801f960:	613b      	str	r3, [r7, #16]
  return(result);
 801f962:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801f964:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f966:	b672      	cpsid	i
}
 801f968:	bf00      	nop
  local_taskset = TaskSet;
 801f96a:	4b15      	ldr	r3, [pc, #84]	; (801f9c0 <UTIL_SEQ_Run+0x1dc>)
 801f96c:	681b      	ldr	r3, [r3, #0]
 801f96e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801f970:	4b14      	ldr	r3, [pc, #80]	; (801f9c4 <UTIL_SEQ_Run+0x1e0>)
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801f976:	4b14      	ldr	r3, [pc, #80]	; (801f9c8 <UTIL_SEQ_Run+0x1e4>)
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801f97c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f980:	401a      	ands	r2, r3
 801f982:	4b0e      	ldr	r3, [pc, #56]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	4013      	ands	r3, r2
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d107      	bne.n	801f99c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801f98c:	4b0f      	ldr	r3, [pc, #60]	; (801f9cc <UTIL_SEQ_Run+0x1e8>)
 801f98e:	681a      	ldr	r2, [r3, #0]
 801f990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f992:	4013      	ands	r3, r2
 801f994:	2b00      	cmp	r3, #0
 801f996:	d101      	bne.n	801f99c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801f998:	f7e2 fe38 	bl	800260c <UTIL_SEQ_Idle>
 801f99c:	69fb      	ldr	r3, [r7, #28]
 801f99e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f9a0:	68fb      	ldr	r3, [r7, #12]
 801f9a2:	f383 8810 	msr	PRIMASK, r3
}
 801f9a6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801f9a8:	f000 f88c 	bl	801fac4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801f9ac:	4a03      	ldr	r2, [pc, #12]	; (801f9bc <UTIL_SEQ_Run+0x1d8>)
 801f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9b0:	6013      	str	r3, [r2, #0]

  return;
 801f9b2:	bf00      	nop
}
 801f9b4:	3740      	adds	r7, #64	; 0x40
 801f9b6:	46bd      	mov	sp, r7
 801f9b8:	bd80      	pop	{r7, pc}
 801f9ba:	bf00      	nop
 801f9bc:	20000144 	.word	0x20000144
 801f9c0:	20001e70 	.word	0x20001e70
 801f9c4:	20001e74 	.word	0x20001e74
 801f9c8:	20000140 	.word	0x20000140
 801f9cc:	20001e78 	.word	0x20001e78
 801f9d0:	20001e90 	.word	0x20001e90
 801f9d4:	20001e7c 	.word	0x20001e7c
 801f9d8:	20001e80 	.word	0x20001e80

0801f9dc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f9dc:	b580      	push	{r7, lr}
 801f9de:	b088      	sub	sp, #32
 801f9e0:	af00      	add	r7, sp, #0
 801f9e2:	60f8      	str	r0, [r7, #12]
 801f9e4:	60b9      	str	r1, [r7, #8]
 801f9e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f9e8:	f3ef 8310 	mrs	r3, PRIMASK
 801f9ec:	617b      	str	r3, [r7, #20]
  return(result);
 801f9ee:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f9f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f9f2:	b672      	cpsid	i
}
 801f9f4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f9f6:	68f8      	ldr	r0, [r7, #12]
 801f9f8:	f000 f86a 	bl	801fad0 <SEQ_BitPosition>
 801f9fc:	4603      	mov	r3, r0
 801f9fe:	4619      	mov	r1, r3
 801fa00:	4a06      	ldr	r2, [pc, #24]	; (801fa1c <UTIL_SEQ_RegTask+0x40>)
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801fa08:	69fb      	ldr	r3, [r7, #28]
 801fa0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fa0c:	69bb      	ldr	r3, [r7, #24]
 801fa0e:	f383 8810 	msr	PRIMASK, r3
}
 801fa12:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801fa14:	bf00      	nop
}
 801fa16:	3720      	adds	r7, #32
 801fa18:	46bd      	mov	sp, r7
 801fa1a:	bd80      	pop	{r7, pc}
 801fa1c:	20001e80 	.word	0x20001e80

0801fa20 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801fa20:	b480      	push	{r7}
 801fa22:	b087      	sub	sp, #28
 801fa24:	af00      	add	r7, sp, #0
 801fa26:	6078      	str	r0, [r7, #4]
 801fa28:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fa2a:	f3ef 8310 	mrs	r3, PRIMASK
 801fa2e:	60fb      	str	r3, [r7, #12]
  return(result);
 801fa30:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801fa32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801fa34:	b672      	cpsid	i
}
 801fa36:	bf00      	nop

  TaskSet |= TaskId_bm;
 801fa38:	4b0d      	ldr	r3, [pc, #52]	; (801fa70 <UTIL_SEQ_SetTask+0x50>)
 801fa3a:	681a      	ldr	r2, [r3, #0]
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	4313      	orrs	r3, r2
 801fa40:	4a0b      	ldr	r2, [pc, #44]	; (801fa70 <UTIL_SEQ_SetTask+0x50>)
 801fa42:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801fa44:	4a0b      	ldr	r2, [pc, #44]	; (801fa74 <UTIL_SEQ_SetTask+0x54>)
 801fa46:	683b      	ldr	r3, [r7, #0]
 801fa48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801fa4c:	687b      	ldr	r3, [r7, #4]
 801fa4e:	431a      	orrs	r2, r3
 801fa50:	4908      	ldr	r1, [pc, #32]	; (801fa74 <UTIL_SEQ_SetTask+0x54>)
 801fa52:	683b      	ldr	r3, [r7, #0]
 801fa54:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801fa58:	697b      	ldr	r3, [r7, #20]
 801fa5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fa5c:	693b      	ldr	r3, [r7, #16]
 801fa5e:	f383 8810 	msr	PRIMASK, r3
}
 801fa62:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801fa64:	bf00      	nop
}
 801fa66:	371c      	adds	r7, #28
 801fa68:	46bd      	mov	sp, r7
 801fa6a:	bc80      	pop	{r7}
 801fa6c:	4770      	bx	lr
 801fa6e:	bf00      	nop
 801fa70:	20001e70 	.word	0x20001e70
 801fa74:	20001e90 	.word	0x20001e90

0801fa78 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801fa78:	b480      	push	{r7}
 801fa7a:	b087      	sub	sp, #28
 801fa7c:	af00      	add	r7, sp, #0
 801fa7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fa80:	f3ef 8310 	mrs	r3, PRIMASK
 801fa84:	60fb      	str	r3, [r7, #12]
  return(result);
 801fa86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801fa88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801fa8a:	b672      	cpsid	i
}
 801fa8c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	43da      	mvns	r2, r3
 801fa92:	4b08      	ldr	r3, [pc, #32]	; (801fab4 <UTIL_SEQ_PauseTask+0x3c>)
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	4013      	ands	r3, r2
 801fa98:	4a06      	ldr	r2, [pc, #24]	; (801fab4 <UTIL_SEQ_PauseTask+0x3c>)
 801fa9a:	6013      	str	r3, [r2, #0]
 801fa9c:	697b      	ldr	r3, [r7, #20]
 801fa9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801faa0:	693b      	ldr	r3, [r7, #16]
 801faa2:	f383 8810 	msr	PRIMASK, r3
}
 801faa6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801faa8:	bf00      	nop
}
 801faaa:	371c      	adds	r7, #28
 801faac:	46bd      	mov	sp, r7
 801faae:	bc80      	pop	{r7}
 801fab0:	4770      	bx	lr
 801fab2:	bf00      	nop
 801fab4:	20000140 	.word	0x20000140

0801fab8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801fab8:	b480      	push	{r7}
 801faba:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801fabc:	bf00      	nop
}
 801fabe:	46bd      	mov	sp, r7
 801fac0:	bc80      	pop	{r7}
 801fac2:	4770      	bx	lr

0801fac4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801fac4:	b480      	push	{r7}
 801fac6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801fac8:	bf00      	nop
}
 801faca:	46bd      	mov	sp, r7
 801facc:	bc80      	pop	{r7}
 801face:	4770      	bx	lr

0801fad0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801fad0:	b480      	push	{r7}
 801fad2:	b085      	sub	sp, #20
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801fad8:	2300      	movs	r3, #0
 801fada:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801fae0:	68bb      	ldr	r3, [r7, #8]
 801fae2:	0c1b      	lsrs	r3, r3, #16
 801fae4:	041b      	lsls	r3, r3, #16
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	d104      	bne.n	801faf4 <SEQ_BitPosition+0x24>
 801faea:	2310      	movs	r3, #16
 801faec:	73fb      	strb	r3, [r7, #15]
 801faee:	68bb      	ldr	r3, [r7, #8]
 801faf0:	041b      	lsls	r3, r3, #16
 801faf2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801faf4:	68bb      	ldr	r3, [r7, #8]
 801faf6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	d105      	bne.n	801fb0a <SEQ_BitPosition+0x3a>
 801fafe:	7bfb      	ldrb	r3, [r7, #15]
 801fb00:	3308      	adds	r3, #8
 801fb02:	73fb      	strb	r3, [r7, #15]
 801fb04:	68bb      	ldr	r3, [r7, #8]
 801fb06:	021b      	lsls	r3, r3, #8
 801fb08:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801fb0a:	68bb      	ldr	r3, [r7, #8]
 801fb0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d105      	bne.n	801fb20 <SEQ_BitPosition+0x50>
 801fb14:	7bfb      	ldrb	r3, [r7, #15]
 801fb16:	3304      	adds	r3, #4
 801fb18:	73fb      	strb	r3, [r7, #15]
 801fb1a:	68bb      	ldr	r3, [r7, #8]
 801fb1c:	011b      	lsls	r3, r3, #4
 801fb1e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801fb20:	68bb      	ldr	r3, [r7, #8]
 801fb22:	0f1b      	lsrs	r3, r3, #28
 801fb24:	4a06      	ldr	r2, [pc, #24]	; (801fb40 <SEQ_BitPosition+0x70>)
 801fb26:	5cd2      	ldrb	r2, [r2, r3]
 801fb28:	7bfb      	ldrb	r3, [r7, #15]
 801fb2a:	4413      	add	r3, r2
 801fb2c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801fb2e:	7bfb      	ldrb	r3, [r7, #15]
 801fb30:	f1c3 031f 	rsb	r3, r3, #31
 801fb34:	b2db      	uxtb	r3, r3
}
 801fb36:	4618      	mov	r0, r3
 801fb38:	3714      	adds	r7, #20
 801fb3a:	46bd      	mov	sp, r7
 801fb3c:	bc80      	pop	{r7}
 801fb3e:	4770      	bx	lr
 801fb40:	08022054 	.word	0x08022054

0801fb44 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801fb44:	b580      	push	{r7, lr}
 801fb46:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801fb48:	4b04      	ldr	r3, [pc, #16]	; (801fb5c <UTIL_TIMER_Init+0x18>)
 801fb4a:	2200      	movs	r2, #0
 801fb4c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801fb4e:	4b04      	ldr	r3, [pc, #16]	; (801fb60 <UTIL_TIMER_Init+0x1c>)
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	4798      	blx	r3
 801fb54:	4603      	mov	r3, r0
}
 801fb56:	4618      	mov	r0, r3
 801fb58:	bd80      	pop	{r7, pc}
 801fb5a:	bf00      	nop
 801fb5c:	20001e98 	.word	0x20001e98
 801fb60:	08021a84 	.word	0x08021a84

0801fb64 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801fb64:	b580      	push	{r7, lr}
 801fb66:	b084      	sub	sp, #16
 801fb68:	af00      	add	r7, sp, #0
 801fb6a:	60f8      	str	r0, [r7, #12]
 801fb6c:	60b9      	str	r1, [r7, #8]
 801fb6e:	603b      	str	r3, [r7, #0]
 801fb70:	4613      	mov	r3, r2
 801fb72:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d023      	beq.n	801fbc2 <UTIL_TIMER_Create+0x5e>
 801fb7a:	683b      	ldr	r3, [r7, #0]
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	d020      	beq.n	801fbc2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	2200      	movs	r2, #0
 801fb84:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801fb86:	4b11      	ldr	r3, [pc, #68]	; (801fbcc <UTIL_TIMER_Create+0x68>)
 801fb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb8a:	68b8      	ldr	r0, [r7, #8]
 801fb8c:	4798      	blx	r3
 801fb8e:	4602      	mov	r2, r0
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801fb94:	68fb      	ldr	r3, [r7, #12]
 801fb96:	2200      	movs	r2, #0
 801fb98:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801fb9a:	68fb      	ldr	r3, [r7, #12]
 801fb9c:	2200      	movs	r2, #0
 801fb9e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801fba0:	68fb      	ldr	r3, [r7, #12]
 801fba2:	2200      	movs	r2, #0
 801fba4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	683a      	ldr	r2, [r7, #0]
 801fbaa:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801fbac:	68fb      	ldr	r3, [r7, #12]
 801fbae:	69ba      	ldr	r2, [r7, #24]
 801fbb0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801fbb2:	68fb      	ldr	r3, [r7, #12]
 801fbb4:	79fa      	ldrb	r2, [r7, #7]
 801fbb6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801fbb8:	68fb      	ldr	r3, [r7, #12]
 801fbba:	2200      	movs	r2, #0
 801fbbc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801fbbe:	2300      	movs	r3, #0
 801fbc0:	e000      	b.n	801fbc4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801fbc2:	2301      	movs	r3, #1
  }
}
 801fbc4:	4618      	mov	r0, r3
 801fbc6:	3710      	adds	r7, #16
 801fbc8:	46bd      	mov	sp, r7
 801fbca:	bd80      	pop	{r7, pc}
 801fbcc:	08021a84 	.word	0x08021a84

0801fbd0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801fbd0:	b580      	push	{r7, lr}
 801fbd2:	b08a      	sub	sp, #40	; 0x28
 801fbd4:	af00      	add	r7, sp, #0
 801fbd6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fbd8:	2300      	movs	r3, #0
 801fbda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d056      	beq.n	801fc92 <UTIL_TIMER_Start+0xc2>
 801fbe4:	6878      	ldr	r0, [r7, #4]
 801fbe6:	f000 f9a9 	bl	801ff3c <TimerExists>
 801fbea:	4603      	mov	r3, r0
 801fbec:	f083 0301 	eor.w	r3, r3, #1
 801fbf0:	b2db      	uxtb	r3, r3
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d04d      	beq.n	801fc92 <UTIL_TIMER_Start+0xc2>
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	7a5b      	ldrb	r3, [r3, #9]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d149      	bne.n	801fc92 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fbfe:	f3ef 8310 	mrs	r3, PRIMASK
 801fc02:	613b      	str	r3, [r7, #16]
  return(result);
 801fc04:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fc06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801fc08:	b672      	cpsid	i
}
 801fc0a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	685b      	ldr	r3, [r3, #4]
 801fc10:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801fc12:	4b24      	ldr	r3, [pc, #144]	; (801fca4 <UTIL_TIMER_Start+0xd4>)
 801fc14:	6a1b      	ldr	r3, [r3, #32]
 801fc16:	4798      	blx	r3
 801fc18:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801fc1a:	6a3a      	ldr	r2, [r7, #32]
 801fc1c:	69bb      	ldr	r3, [r7, #24]
 801fc1e:	429a      	cmp	r2, r3
 801fc20:	d201      	bcs.n	801fc26 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801fc22:	69bb      	ldr	r3, [r7, #24]
 801fc24:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	6a3a      	ldr	r2, [r7, #32]
 801fc2a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801fc2c:	687b      	ldr	r3, [r7, #4]
 801fc2e:	2200      	movs	r2, #0
 801fc30:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	2201      	movs	r2, #1
 801fc36:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	2200      	movs	r2, #0
 801fc3c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801fc3e:	4b1a      	ldr	r3, [pc, #104]	; (801fca8 <UTIL_TIMER_Start+0xd8>)
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d106      	bne.n	801fc54 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801fc46:	4b17      	ldr	r3, [pc, #92]	; (801fca4 <UTIL_TIMER_Start+0xd4>)
 801fc48:	691b      	ldr	r3, [r3, #16]
 801fc4a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801fc4c:	6878      	ldr	r0, [r7, #4]
 801fc4e:	f000 f9eb 	bl	8020028 <TimerInsertNewHeadTimer>
 801fc52:	e017      	b.n	801fc84 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801fc54:	4b13      	ldr	r3, [pc, #76]	; (801fca4 <UTIL_TIMER_Start+0xd4>)
 801fc56:	699b      	ldr	r3, [r3, #24]
 801fc58:	4798      	blx	r3
 801fc5a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801fc5c:	687b      	ldr	r3, [r7, #4]
 801fc5e:	681a      	ldr	r2, [r3, #0]
 801fc60:	697b      	ldr	r3, [r7, #20]
 801fc62:	441a      	add	r2, r3
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	681a      	ldr	r2, [r3, #0]
 801fc6c:	4b0e      	ldr	r3, [pc, #56]	; (801fca8 <UTIL_TIMER_Start+0xd8>)
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	681b      	ldr	r3, [r3, #0]
 801fc72:	429a      	cmp	r2, r3
 801fc74:	d203      	bcs.n	801fc7e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801fc76:	6878      	ldr	r0, [r7, #4]
 801fc78:	f000 f9d6 	bl	8020028 <TimerInsertNewHeadTimer>
 801fc7c:	e002      	b.n	801fc84 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801fc7e:	6878      	ldr	r0, [r7, #4]
 801fc80:	f000 f9a2 	bl	801ffc8 <TimerInsertTimer>
 801fc84:	69fb      	ldr	r3, [r7, #28]
 801fc86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc88:	68fb      	ldr	r3, [r7, #12]
 801fc8a:	f383 8810 	msr	PRIMASK, r3
}
 801fc8e:	bf00      	nop
  {
 801fc90:	e002      	b.n	801fc98 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801fc92:	2301      	movs	r3, #1
 801fc94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801fc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801fc9c:	4618      	mov	r0, r3
 801fc9e:	3728      	adds	r7, #40	; 0x28
 801fca0:	46bd      	mov	sp, r7
 801fca2:	bd80      	pop	{r7, pc}
 801fca4:	08021a84 	.word	0x08021a84
 801fca8:	20001e98 	.word	0x20001e98

0801fcac <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801fcac:	b580      	push	{r7, lr}
 801fcae:	b088      	sub	sp, #32
 801fcb0:	af00      	add	r7, sp, #0
 801fcb2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d05b      	beq.n	801fd76 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fcbe:	f3ef 8310 	mrs	r3, PRIMASK
 801fcc2:	60fb      	str	r3, [r7, #12]
  return(result);
 801fcc4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fcc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801fcc8:	b672      	cpsid	i
}
 801fcca:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801fccc:	4b2d      	ldr	r3, [pc, #180]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801fcd2:	4b2c      	ldr	r3, [pc, #176]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	2201      	movs	r2, #1
 801fcdc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801fcde:	4b29      	ldr	r3, [pc, #164]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fce0:	681b      	ldr	r3, [r3, #0]
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d041      	beq.n	801fd6a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	2200      	movs	r2, #0
 801fcea:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801fcec:	4b25      	ldr	r3, [pc, #148]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fcee:	681b      	ldr	r3, [r3, #0]
 801fcf0:	687a      	ldr	r2, [r7, #4]
 801fcf2:	429a      	cmp	r2, r3
 801fcf4:	d134      	bne.n	801fd60 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801fcf6:	4b23      	ldr	r3, [pc, #140]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	2200      	movs	r2, #0
 801fcfc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801fcfe:	4b21      	ldr	r3, [pc, #132]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fd00:	681b      	ldr	r3, [r3, #0]
 801fd02:	695b      	ldr	r3, [r3, #20]
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d00a      	beq.n	801fd1e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801fd08:	4b1e      	ldr	r3, [pc, #120]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fd0a:	681b      	ldr	r3, [r3, #0]
 801fd0c:	695b      	ldr	r3, [r3, #20]
 801fd0e:	4a1d      	ldr	r2, [pc, #116]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fd10:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801fd12:	4b1c      	ldr	r3, [pc, #112]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fd14:	681b      	ldr	r3, [r3, #0]
 801fd16:	4618      	mov	r0, r3
 801fd18:	f000 f92c 	bl	801ff74 <TimerSetTimeout>
 801fd1c:	e023      	b.n	801fd66 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801fd1e:	4b1a      	ldr	r3, [pc, #104]	; (801fd88 <UTIL_TIMER_Stop+0xdc>)
 801fd20:	68db      	ldr	r3, [r3, #12]
 801fd22:	4798      	blx	r3
            TimerListHead = NULL;
 801fd24:	4b17      	ldr	r3, [pc, #92]	; (801fd84 <UTIL_TIMER_Stop+0xd8>)
 801fd26:	2200      	movs	r2, #0
 801fd28:	601a      	str	r2, [r3, #0]
 801fd2a:	e01c      	b.n	801fd66 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801fd2c:	697a      	ldr	r2, [r7, #20]
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	429a      	cmp	r2, r3
 801fd32:	d110      	bne.n	801fd56 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801fd34:	697b      	ldr	r3, [r7, #20]
 801fd36:	695b      	ldr	r3, [r3, #20]
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	d006      	beq.n	801fd4a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801fd3c:	697b      	ldr	r3, [r7, #20]
 801fd3e:	695b      	ldr	r3, [r3, #20]
 801fd40:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fd42:	69bb      	ldr	r3, [r7, #24]
 801fd44:	697a      	ldr	r2, [r7, #20]
 801fd46:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801fd48:	e00d      	b.n	801fd66 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801fd4a:	2300      	movs	r3, #0
 801fd4c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fd4e:	69bb      	ldr	r3, [r7, #24]
 801fd50:	697a      	ldr	r2, [r7, #20]
 801fd52:	615a      	str	r2, [r3, #20]
            break;
 801fd54:	e007      	b.n	801fd66 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801fd56:	697b      	ldr	r3, [r7, #20]
 801fd58:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801fd5a:	697b      	ldr	r3, [r7, #20]
 801fd5c:	695b      	ldr	r3, [r3, #20]
 801fd5e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801fd60:	697b      	ldr	r3, [r7, #20]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d1e2      	bne.n	801fd2c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801fd66:	2300      	movs	r3, #0
 801fd68:	77fb      	strb	r3, [r7, #31]
 801fd6a:	693b      	ldr	r3, [r7, #16]
 801fd6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fd6e:	68bb      	ldr	r3, [r7, #8]
 801fd70:	f383 8810 	msr	PRIMASK, r3
}
 801fd74:	e001      	b.n	801fd7a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801fd76:	2301      	movs	r3, #1
 801fd78:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801fd7a:	7ffb      	ldrb	r3, [r7, #31]
}
 801fd7c:	4618      	mov	r0, r3
 801fd7e:	3720      	adds	r7, #32
 801fd80:	46bd      	mov	sp, r7
 801fd82:	bd80      	pop	{r7, pc}
 801fd84:	20001e98 	.word	0x20001e98
 801fd88:	08021a84 	.word	0x08021a84

0801fd8c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801fd8c:	b580      	push	{r7, lr}
 801fd8e:	b084      	sub	sp, #16
 801fd90:	af00      	add	r7, sp, #0
 801fd92:	6078      	str	r0, [r7, #4]
 801fd94:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fd96:	2300      	movs	r3, #0
 801fd98:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d102      	bne.n	801fda6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801fda0:	2301      	movs	r3, #1
 801fda2:	73fb      	strb	r3, [r7, #15]
 801fda4:	e014      	b.n	801fdd0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801fda6:	4b0d      	ldr	r3, [pc, #52]	; (801fddc <UTIL_TIMER_SetPeriod+0x50>)
 801fda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdaa:	6838      	ldr	r0, [r7, #0]
 801fdac:	4798      	blx	r3
 801fdae:	4602      	mov	r2, r0
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801fdb4:	6878      	ldr	r0, [r7, #4]
 801fdb6:	f000 f8c1 	bl	801ff3c <TimerExists>
 801fdba:	4603      	mov	r3, r0
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d007      	beq.n	801fdd0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801fdc0:	6878      	ldr	r0, [r7, #4]
 801fdc2:	f7ff ff73 	bl	801fcac <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801fdc6:	6878      	ldr	r0, [r7, #4]
 801fdc8:	f7ff ff02 	bl	801fbd0 <UTIL_TIMER_Start>
 801fdcc:	4603      	mov	r3, r0
 801fdce:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801fdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 801fdd2:	4618      	mov	r0, r3
 801fdd4:	3710      	adds	r7, #16
 801fdd6:	46bd      	mov	sp, r7
 801fdd8:	bd80      	pop	{r7, pc}
 801fdda:	bf00      	nop
 801fddc:	08021a84 	.word	0x08021a84

0801fde0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801fde0:	b590      	push	{r4, r7, lr}
 801fde2:	b089      	sub	sp, #36	; 0x24
 801fde4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fde6:	f3ef 8310 	mrs	r3, PRIMASK
 801fdea:	60bb      	str	r3, [r7, #8]
  return(result);
 801fdec:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fdee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fdf0:	b672      	cpsid	i
}
 801fdf2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801fdf4:	4b38      	ldr	r3, [pc, #224]	; (801fed8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fdf6:	695b      	ldr	r3, [r3, #20]
 801fdf8:	4798      	blx	r3
 801fdfa:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801fdfc:	4b36      	ldr	r3, [pc, #216]	; (801fed8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fdfe:	691b      	ldr	r3, [r3, #16]
 801fe00:	4798      	blx	r3
 801fe02:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801fe04:	693a      	ldr	r2, [r7, #16]
 801fe06:	697b      	ldr	r3, [r7, #20]
 801fe08:	1ad3      	subs	r3, r2, r3
 801fe0a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801fe0c:	4b33      	ldr	r3, [pc, #204]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d037      	beq.n	801fe84 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801fe14:	4b31      	ldr	r3, [pc, #196]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801fe1a:	69fb      	ldr	r3, [r7, #28]
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	68fa      	ldr	r2, [r7, #12]
 801fe20:	429a      	cmp	r2, r3
 801fe22:	d206      	bcs.n	801fe32 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801fe24:	69fb      	ldr	r3, [r7, #28]
 801fe26:	681a      	ldr	r2, [r3, #0]
 801fe28:	68fb      	ldr	r3, [r7, #12]
 801fe2a:	1ad2      	subs	r2, r2, r3
 801fe2c:	69fb      	ldr	r3, [r7, #28]
 801fe2e:	601a      	str	r2, [r3, #0]
 801fe30:	e002      	b.n	801fe38 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801fe32:	69fb      	ldr	r3, [r7, #28]
 801fe34:	2200      	movs	r2, #0
 801fe36:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801fe38:	69fb      	ldr	r3, [r7, #28]
 801fe3a:	695b      	ldr	r3, [r3, #20]
 801fe3c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801fe3e:	69fb      	ldr	r3, [r7, #28]
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d1ea      	bne.n	801fe1a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fe44:	e01e      	b.n	801fe84 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801fe46:	4b25      	ldr	r3, [pc, #148]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801fe4c:	4b23      	ldr	r3, [pc, #140]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	695b      	ldr	r3, [r3, #20]
 801fe52:	4a22      	ldr	r2, [pc, #136]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe54:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801fe56:	69fb      	ldr	r3, [r7, #28]
 801fe58:	2200      	movs	r2, #0
 801fe5a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801fe5c:	69fb      	ldr	r3, [r7, #28]
 801fe5e:	2200      	movs	r2, #0
 801fe60:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801fe62:	69fb      	ldr	r3, [r7, #28]
 801fe64:	68db      	ldr	r3, [r3, #12]
 801fe66:	69fa      	ldr	r2, [r7, #28]
 801fe68:	6912      	ldr	r2, [r2, #16]
 801fe6a:	4610      	mov	r0, r2
 801fe6c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801fe6e:	69fb      	ldr	r3, [r7, #28]
 801fe70:	7adb      	ldrb	r3, [r3, #11]
 801fe72:	2b01      	cmp	r3, #1
 801fe74:	d106      	bne.n	801fe84 <UTIL_TIMER_IRQ_Handler+0xa4>
 801fe76:	69fb      	ldr	r3, [r7, #28]
 801fe78:	7a9b      	ldrb	r3, [r3, #10]
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d102      	bne.n	801fe84 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801fe7e:	69f8      	ldr	r0, [r7, #28]
 801fe80:	f7ff fea6 	bl	801fbd0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fe84:	4b15      	ldr	r3, [pc, #84]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d00d      	beq.n	801fea8 <UTIL_TIMER_IRQ_Handler+0xc8>
 801fe8c:	4b13      	ldr	r3, [pc, #76]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d0d7      	beq.n	801fe46 <UTIL_TIMER_IRQ_Handler+0x66>
 801fe96:	4b11      	ldr	r3, [pc, #68]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fe98:	681b      	ldr	r3, [r3, #0]
 801fe9a:	681c      	ldr	r4, [r3, #0]
 801fe9c:	4b0e      	ldr	r3, [pc, #56]	; (801fed8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fe9e:	699b      	ldr	r3, [r3, #24]
 801fea0:	4798      	blx	r3
 801fea2:	4603      	mov	r3, r0
 801fea4:	429c      	cmp	r4, r3
 801fea6:	d3ce      	bcc.n	801fe46 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801fea8:	4b0c      	ldr	r3, [pc, #48]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801feaa:	681b      	ldr	r3, [r3, #0]
 801feac:	2b00      	cmp	r3, #0
 801feae:	d009      	beq.n	801fec4 <UTIL_TIMER_IRQ_Handler+0xe4>
 801feb0:	4b0a      	ldr	r3, [pc, #40]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	7a1b      	ldrb	r3, [r3, #8]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d104      	bne.n	801fec4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801feba:	4b08      	ldr	r3, [pc, #32]	; (801fedc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	4618      	mov	r0, r3
 801fec0:	f000 f858 	bl	801ff74 <TimerSetTimeout>
 801fec4:	69bb      	ldr	r3, [r7, #24]
 801fec6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	f383 8810 	msr	PRIMASK, r3
}
 801fece:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801fed0:	bf00      	nop
 801fed2:	3724      	adds	r7, #36	; 0x24
 801fed4:	46bd      	mov	sp, r7
 801fed6:	bd90      	pop	{r4, r7, pc}
 801fed8:	08021a84 	.word	0x08021a84
 801fedc:	20001e98 	.word	0x20001e98

0801fee0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801fee0:	b580      	push	{r7, lr}
 801fee2:	b082      	sub	sp, #8
 801fee4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801fee6:	4b06      	ldr	r3, [pc, #24]	; (801ff00 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fee8:	69db      	ldr	r3, [r3, #28]
 801feea:	4798      	blx	r3
 801feec:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801feee:	4b04      	ldr	r3, [pc, #16]	; (801ff00 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fef2:	6878      	ldr	r0, [r7, #4]
 801fef4:	4798      	blx	r3
 801fef6:	4603      	mov	r3, r0
}
 801fef8:	4618      	mov	r0, r3
 801fefa:	3708      	adds	r7, #8
 801fefc:	46bd      	mov	sp, r7
 801fefe:	bd80      	pop	{r7, pc}
 801ff00:	08021a84 	.word	0x08021a84

0801ff04 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ff04:	b580      	push	{r7, lr}
 801ff06:	b084      	sub	sp, #16
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ff0c:	4b0a      	ldr	r3, [pc, #40]	; (801ff38 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ff0e:	69db      	ldr	r3, [r3, #28]
 801ff10:	4798      	blx	r3
 801ff12:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ff14:	4b08      	ldr	r3, [pc, #32]	; (801ff38 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ff16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff18:	6878      	ldr	r0, [r7, #4]
 801ff1a:	4798      	blx	r3
 801ff1c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ff1e:	4b06      	ldr	r3, [pc, #24]	; (801ff38 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ff20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff22:	68f9      	ldr	r1, [r7, #12]
 801ff24:	68ba      	ldr	r2, [r7, #8]
 801ff26:	1a8a      	subs	r2, r1, r2
 801ff28:	4610      	mov	r0, r2
 801ff2a:	4798      	blx	r3
 801ff2c:	4603      	mov	r3, r0
}
 801ff2e:	4618      	mov	r0, r3
 801ff30:	3710      	adds	r7, #16
 801ff32:	46bd      	mov	sp, r7
 801ff34:	bd80      	pop	{r7, pc}
 801ff36:	bf00      	nop
 801ff38:	08021a84 	.word	0x08021a84

0801ff3c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801ff3c:	b480      	push	{r7}
 801ff3e:	b085      	sub	sp, #20
 801ff40:	af00      	add	r7, sp, #0
 801ff42:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ff44:	4b0a      	ldr	r3, [pc, #40]	; (801ff70 <TimerExists+0x34>)
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801ff4a:	e008      	b.n	801ff5e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801ff4c:	68fa      	ldr	r2, [r7, #12]
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	429a      	cmp	r2, r3
 801ff52:	d101      	bne.n	801ff58 <TimerExists+0x1c>
    {
      return true;
 801ff54:	2301      	movs	r3, #1
 801ff56:	e006      	b.n	801ff66 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	695b      	ldr	r3, [r3, #20]
 801ff5c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801ff5e:	68fb      	ldr	r3, [r7, #12]
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d1f3      	bne.n	801ff4c <TimerExists+0x10>
  }
  return false;
 801ff64:	2300      	movs	r3, #0
}
 801ff66:	4618      	mov	r0, r3
 801ff68:	3714      	adds	r7, #20
 801ff6a:	46bd      	mov	sp, r7
 801ff6c:	bc80      	pop	{r7}
 801ff6e:	4770      	bx	lr
 801ff70:	20001e98 	.word	0x20001e98

0801ff74 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801ff74:	b590      	push	{r4, r7, lr}
 801ff76:	b085      	sub	sp, #20
 801ff78:	af00      	add	r7, sp, #0
 801ff7a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801ff7c:	4b11      	ldr	r3, [pc, #68]	; (801ffc4 <TimerSetTimeout+0x50>)
 801ff7e:	6a1b      	ldr	r3, [r3, #32]
 801ff80:	4798      	blx	r3
 801ff82:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	2201      	movs	r2, #1
 801ff88:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	681c      	ldr	r4, [r3, #0]
 801ff8e:	4b0d      	ldr	r3, [pc, #52]	; (801ffc4 <TimerSetTimeout+0x50>)
 801ff90:	699b      	ldr	r3, [r3, #24]
 801ff92:	4798      	blx	r3
 801ff94:	4602      	mov	r2, r0
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	4413      	add	r3, r2
 801ff9a:	429c      	cmp	r4, r3
 801ff9c:	d207      	bcs.n	801ffae <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ff9e:	4b09      	ldr	r3, [pc, #36]	; (801ffc4 <TimerSetTimeout+0x50>)
 801ffa0:	699b      	ldr	r3, [r3, #24]
 801ffa2:	4798      	blx	r3
 801ffa4:	4602      	mov	r2, r0
 801ffa6:	68fb      	ldr	r3, [r7, #12]
 801ffa8:	441a      	add	r2, r3
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ffae:	4b05      	ldr	r3, [pc, #20]	; (801ffc4 <TimerSetTimeout+0x50>)
 801ffb0:	689b      	ldr	r3, [r3, #8]
 801ffb2:	687a      	ldr	r2, [r7, #4]
 801ffb4:	6812      	ldr	r2, [r2, #0]
 801ffb6:	4610      	mov	r0, r2
 801ffb8:	4798      	blx	r3
}
 801ffba:	bf00      	nop
 801ffbc:	3714      	adds	r7, #20
 801ffbe:	46bd      	mov	sp, r7
 801ffc0:	bd90      	pop	{r4, r7, pc}
 801ffc2:	bf00      	nop
 801ffc4:	08021a84 	.word	0x08021a84

0801ffc8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801ffc8:	b480      	push	{r7}
 801ffca:	b085      	sub	sp, #20
 801ffcc:	af00      	add	r7, sp, #0
 801ffce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ffd0:	4b14      	ldr	r3, [pc, #80]	; (8020024 <TimerInsertTimer+0x5c>)
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801ffd6:	4b13      	ldr	r3, [pc, #76]	; (8020024 <TimerInsertTimer+0x5c>)
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	695b      	ldr	r3, [r3, #20]
 801ffdc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801ffde:	e012      	b.n	8020006 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	681a      	ldr	r2, [r3, #0]
 801ffe4:	68bb      	ldr	r3, [r7, #8]
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	429a      	cmp	r2, r3
 801ffea:	d905      	bls.n	801fff8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801ffec:	68bb      	ldr	r3, [r7, #8]
 801ffee:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801fff0:	68bb      	ldr	r3, [r7, #8]
 801fff2:	695b      	ldr	r3, [r3, #20]
 801fff4:	60bb      	str	r3, [r7, #8]
 801fff6:	e006      	b.n	8020006 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801fff8:	68fb      	ldr	r3, [r7, #12]
 801fffa:	687a      	ldr	r2, [r7, #4]
 801fffc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	68ba      	ldr	r2, [r7, #8]
 8020002:	615a      	str	r2, [r3, #20]
        return;
 8020004:	e009      	b.n	802001a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8020006:	68fb      	ldr	r3, [r7, #12]
 8020008:	695b      	ldr	r3, [r3, #20]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d1e8      	bne.n	801ffe0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 802000e:	68fb      	ldr	r3, [r7, #12]
 8020010:	687a      	ldr	r2, [r7, #4]
 8020012:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	2200      	movs	r2, #0
 8020018:	615a      	str	r2, [r3, #20]
}
 802001a:	3714      	adds	r7, #20
 802001c:	46bd      	mov	sp, r7
 802001e:	bc80      	pop	{r7}
 8020020:	4770      	bx	lr
 8020022:	bf00      	nop
 8020024:	20001e98 	.word	0x20001e98

08020028 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8020028:	b580      	push	{r7, lr}
 802002a:	b084      	sub	sp, #16
 802002c:	af00      	add	r7, sp, #0
 802002e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8020030:	4b0b      	ldr	r3, [pc, #44]	; (8020060 <TimerInsertNewHeadTimer+0x38>)
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8020036:	68fb      	ldr	r3, [r7, #12]
 8020038:	2b00      	cmp	r3, #0
 802003a:	d002      	beq.n	8020042 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 802003c:	68fb      	ldr	r3, [r7, #12]
 802003e:	2200      	movs	r2, #0
 8020040:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	68fa      	ldr	r2, [r7, #12]
 8020046:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8020048:	4a05      	ldr	r2, [pc, #20]	; (8020060 <TimerInsertNewHeadTimer+0x38>)
 802004a:	687b      	ldr	r3, [r7, #4]
 802004c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 802004e:	4b04      	ldr	r3, [pc, #16]	; (8020060 <TimerInsertNewHeadTimer+0x38>)
 8020050:	681b      	ldr	r3, [r3, #0]
 8020052:	4618      	mov	r0, r3
 8020054:	f7ff ff8e 	bl	801ff74 <TimerSetTimeout>
}
 8020058:	bf00      	nop
 802005a:	3710      	adds	r7, #16
 802005c:	46bd      	mov	sp, r7
 802005e:	bd80      	pop	{r7, pc}
 8020060:	20001e98 	.word	0x20001e98

08020064 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 8020064:	b580      	push	{r7, lr}
 8020066:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8020068:	2218      	movs	r2, #24
 802006a:	2100      	movs	r1, #0
 802006c:	4807      	ldr	r0, [pc, #28]	; (802008c <UTIL_ADV_TRACE_Init+0x28>)
 802006e:	f7fe ffd6 	bl	801f01e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8020072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020076:	2100      	movs	r1, #0
 8020078:	4805      	ldr	r0, [pc, #20]	; (8020090 <UTIL_ADV_TRACE_Init+0x2c>)
 802007a:	f7fe ffd0 	bl	801f01e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 802007e:	4b05      	ldr	r3, [pc, #20]	; (8020094 <UTIL_ADV_TRACE_Init+0x30>)
 8020080:	681b      	ldr	r3, [r3, #0]
 8020082:	4805      	ldr	r0, [pc, #20]	; (8020098 <UTIL_ADV_TRACE_Init+0x34>)
 8020084:	4798      	blx	r3
 8020086:	4603      	mov	r3, r0
}
 8020088:	4618      	mov	r0, r3
 802008a:	bd80      	pop	{r7, pc}
 802008c:	20001e9c 	.word	0x20001e9c
 8020090:	20001eb4 	.word	0x20001eb4
 8020094:	08021ac4 	.word	0x08021ac4
 8020098:	08020305 	.word	0x08020305

0802009c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 802009c:	b480      	push	{r7}
 802009e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80200a0:	4b06      	ldr	r3, [pc, #24]	; (80200bc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 80200a2:	8a5a      	ldrh	r2, [r3, #18]
 80200a4:	4b05      	ldr	r3, [pc, #20]	; (80200bc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 80200a6:	8a1b      	ldrh	r3, [r3, #16]
 80200a8:	429a      	cmp	r2, r3
 80200aa:	d101      	bne.n	80200b0 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 80200ac:	2301      	movs	r3, #1
 80200ae:	e000      	b.n	80200b2 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 80200b0:	2300      	movs	r3, #0
}
 80200b2:	4618      	mov	r0, r3
 80200b4:	46bd      	mov	sp, r7
 80200b6:	bc80      	pop	{r7}
 80200b8:	4770      	bx	lr
 80200ba:	bf00      	nop
 80200bc:	20001e9c 	.word	0x20001e9c

080200c0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 80200c0:	b408      	push	{r3}
 80200c2:	b580      	push	{r7, lr}
 80200c4:	b08d      	sub	sp, #52	; 0x34
 80200c6:	af00      	add	r7, sp, #0
 80200c8:	60f8      	str	r0, [r7, #12]
 80200ca:	60b9      	str	r1, [r7, #8]
 80200cc:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 80200ce:	2300      	movs	r3, #0
 80200d0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 80200d2:	2300      	movs	r3, #0
 80200d4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80200d6:	4b37      	ldr	r3, [pc, #220]	; (80201b4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80200d8:	7a1b      	ldrb	r3, [r3, #8]
 80200da:	461a      	mov	r2, r3
 80200dc:	68fb      	ldr	r3, [r7, #12]
 80200de:	4293      	cmp	r3, r2
 80200e0:	d902      	bls.n	80200e8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 80200e2:	f06f 0304 	mvn.w	r3, #4
 80200e6:	e05e      	b.n	80201a6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80200e8:	4b32      	ldr	r3, [pc, #200]	; (80201b4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80200ea:	68da      	ldr	r2, [r3, #12]
 80200ec:	68bb      	ldr	r3, [r7, #8]
 80200ee:	4013      	ands	r3, r2
 80200f0:	68ba      	ldr	r2, [r7, #8]
 80200f2:	429a      	cmp	r2, r3
 80200f4:	d002      	beq.n	80200fc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 80200f6:	f06f 0305 	mvn.w	r3, #5
 80200fa:	e054      	b.n	80201a6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80200fc:	4b2d      	ldr	r3, [pc, #180]	; (80201b4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80200fe:	685b      	ldr	r3, [r3, #4]
 8020100:	2b00      	cmp	r3, #0
 8020102:	d00a      	beq.n	802011a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	2b00      	cmp	r3, #0
 8020108:	d007      	beq.n	802011a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 802010a:	4b2a      	ldr	r3, [pc, #168]	; (80201b4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 802010c:	685b      	ldr	r3, [r3, #4]
 802010e:	f107 0116 	add.w	r1, r7, #22
 8020112:	f107 0218 	add.w	r2, r7, #24
 8020116:	4610      	mov	r0, r2
 8020118:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 802011a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802011e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8020120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020128:	4823      	ldr	r0, [pc, #140]	; (80201b8 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 802012a:	f7ff fa05 	bl	801f538 <tiny_vsnprintf_like>
 802012e:	4603      	mov	r3, r0
 8020130:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 8020132:	f000 f9f1 	bl	8020518 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8020136:	8afa      	ldrh	r2, [r7, #22]
 8020138:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802013a:	4413      	add	r3, r2
 802013c:	b29b      	uxth	r3, r3
 802013e:	f107 0214 	add.w	r2, r7, #20
 8020142:	4611      	mov	r1, r2
 8020144:	4618      	mov	r0, r3
 8020146:	f000 f969 	bl	802041c <TRACE_AllocateBufer>
 802014a:	4603      	mov	r3, r0
 802014c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020150:	d025      	beq.n	802019e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8020152:	2300      	movs	r3, #0
 8020154:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8020156:	e00e      	b.n	8020176 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8020158:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802015a:	8aba      	ldrh	r2, [r7, #20]
 802015c:	3330      	adds	r3, #48	; 0x30
 802015e:	443b      	add	r3, r7
 8020160:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8020164:	4b15      	ldr	r3, [pc, #84]	; (80201bc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8020166:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 8020168:	8abb      	ldrh	r3, [r7, #20]
 802016a:	3301      	adds	r3, #1
 802016c:	b29b      	uxth	r3, r3
 802016e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8020170:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8020172:	3301      	adds	r3, #1
 8020174:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8020176:	8afb      	ldrh	r3, [r7, #22]
 8020178:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802017a:	429a      	cmp	r2, r3
 802017c:	d3ec      	bcc.n	8020158 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 802017e:	8abb      	ldrh	r3, [r7, #20]
 8020180:	461a      	mov	r2, r3
 8020182:	4b0e      	ldr	r3, [pc, #56]	; (80201bc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8020184:	18d0      	adds	r0, r2, r3
 8020186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802018a:	f44f 7100 	mov.w	r1, #512	; 0x200
 802018e:	f7ff f9d3 	bl	801f538 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8020192:	f000 f9df 	bl	8020554 <TRACE_UnLock>

    return TRACE_Send();
 8020196:	f000 f831 	bl	80201fc <TRACE_Send>
 802019a:	4603      	mov	r3, r0
 802019c:	e003      	b.n	80201a6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 802019e:	f000 f9d9 	bl	8020554 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 80201a2:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 80201a6:	4618      	mov	r0, r3
 80201a8:	3734      	adds	r7, #52	; 0x34
 80201aa:	46bd      	mov	sp, r7
 80201ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80201b0:	b001      	add	sp, #4
 80201b2:	4770      	bx	lr
 80201b4:	20001e9c 	.word	0x20001e9c
 80201b8:	200022b4 	.word	0x200022b4
 80201bc:	20001eb4 	.word	0x20001eb4

080201c0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 80201c0:	b480      	push	{r7}
 80201c2:	b083      	sub	sp, #12
 80201c4:	af00      	add	r7, sp, #0
 80201c6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80201c8:	4a03      	ldr	r2, [pc, #12]	; (80201d8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	6053      	str	r3, [r2, #4]
}
 80201ce:	bf00      	nop
 80201d0:	370c      	adds	r7, #12
 80201d2:	46bd      	mov	sp, r7
 80201d4:	bc80      	pop	{r7}
 80201d6:	4770      	bx	lr
 80201d8:	20001e9c 	.word	0x20001e9c

080201dc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 80201dc:	b480      	push	{r7}
 80201de:	b083      	sub	sp, #12
 80201e0:	af00      	add	r7, sp, #0
 80201e2:	4603      	mov	r3, r0
 80201e4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80201e6:	4a04      	ldr	r2, [pc, #16]	; (80201f8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 80201e8:	79fb      	ldrb	r3, [r7, #7]
 80201ea:	7213      	strb	r3, [r2, #8]
}
 80201ec:	bf00      	nop
 80201ee:	370c      	adds	r7, #12
 80201f0:	46bd      	mov	sp, r7
 80201f2:	bc80      	pop	{r7}
 80201f4:	4770      	bx	lr
 80201f6:	bf00      	nop
 80201f8:	20001e9c 	.word	0x20001e9c

080201fc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 80201fc:	b580      	push	{r7, lr}
 80201fe:	b088      	sub	sp, #32
 8020200:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8020202:	2300      	movs	r3, #0
 8020204:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8020206:	2300      	movs	r3, #0
 8020208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802020a:	f3ef 8310 	mrs	r3, PRIMASK
 802020e:	613b      	str	r3, [r7, #16]
  return(result);
 8020210:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8020214:	b672      	cpsid	i
}
 8020216:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8020218:	f000 f9ba 	bl	8020590 <TRACE_IsLocked>
 802021c:	4603      	mov	r3, r0
 802021e:	2b00      	cmp	r3, #0
 8020220:	d15d      	bne.n	80202de <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8020222:	f000 f979 	bl	8020518 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8020226:	4b34      	ldr	r3, [pc, #208]	; (80202f8 <TRACE_Send+0xfc>)
 8020228:	8a1a      	ldrh	r2, [r3, #16]
 802022a:	4b33      	ldr	r3, [pc, #204]	; (80202f8 <TRACE_Send+0xfc>)
 802022c:	8a5b      	ldrh	r3, [r3, #18]
 802022e:	429a      	cmp	r2, r3
 8020230:	d04d      	beq.n	80202ce <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8020232:	4b31      	ldr	r3, [pc, #196]	; (80202f8 <TRACE_Send+0xfc>)
 8020234:	789b      	ldrb	r3, [r3, #2]
 8020236:	2b01      	cmp	r3, #1
 8020238:	d117      	bne.n	802026a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 802023a:	4b2f      	ldr	r3, [pc, #188]	; (80202f8 <TRACE_Send+0xfc>)
 802023c:	881a      	ldrh	r2, [r3, #0]
 802023e:	4b2e      	ldr	r3, [pc, #184]	; (80202f8 <TRACE_Send+0xfc>)
 8020240:	8a1b      	ldrh	r3, [r3, #16]
 8020242:	1ad3      	subs	r3, r2, r3
 8020244:	b29a      	uxth	r2, r3
 8020246:	4b2c      	ldr	r3, [pc, #176]	; (80202f8 <TRACE_Send+0xfc>)
 8020248:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 802024a:	4b2b      	ldr	r3, [pc, #172]	; (80202f8 <TRACE_Send+0xfc>)
 802024c:	2202      	movs	r2, #2
 802024e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8020250:	4b29      	ldr	r3, [pc, #164]	; (80202f8 <TRACE_Send+0xfc>)
 8020252:	2200      	movs	r2, #0
 8020254:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8020256:	4b28      	ldr	r3, [pc, #160]	; (80202f8 <TRACE_Send+0xfc>)
 8020258:	8a9b      	ldrh	r3, [r3, #20]
 802025a:	2b00      	cmp	r3, #0
 802025c:	d105      	bne.n	802026a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 802025e:	4b26      	ldr	r3, [pc, #152]	; (80202f8 <TRACE_Send+0xfc>)
 8020260:	2200      	movs	r2, #0
 8020262:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020264:	4b24      	ldr	r3, [pc, #144]	; (80202f8 <TRACE_Send+0xfc>)
 8020266:	2200      	movs	r2, #0
 8020268:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 802026a:	4b23      	ldr	r3, [pc, #140]	; (80202f8 <TRACE_Send+0xfc>)
 802026c:	789b      	ldrb	r3, [r3, #2]
 802026e:	2b00      	cmp	r3, #0
 8020270:	d115      	bne.n	802029e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020272:	4b21      	ldr	r3, [pc, #132]	; (80202f8 <TRACE_Send+0xfc>)
 8020274:	8a5a      	ldrh	r2, [r3, #18]
 8020276:	4b20      	ldr	r3, [pc, #128]	; (80202f8 <TRACE_Send+0xfc>)
 8020278:	8a1b      	ldrh	r3, [r3, #16]
 802027a:	429a      	cmp	r2, r3
 802027c:	d908      	bls.n	8020290 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 802027e:	4b1e      	ldr	r3, [pc, #120]	; (80202f8 <TRACE_Send+0xfc>)
 8020280:	8a5a      	ldrh	r2, [r3, #18]
 8020282:	4b1d      	ldr	r3, [pc, #116]	; (80202f8 <TRACE_Send+0xfc>)
 8020284:	8a1b      	ldrh	r3, [r3, #16]
 8020286:	1ad3      	subs	r3, r2, r3
 8020288:	b29a      	uxth	r2, r3
 802028a:	4b1b      	ldr	r3, [pc, #108]	; (80202f8 <TRACE_Send+0xfc>)
 802028c:	829a      	strh	r2, [r3, #20]
 802028e:	e006      	b.n	802029e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020290:	4b19      	ldr	r3, [pc, #100]	; (80202f8 <TRACE_Send+0xfc>)
 8020292:	8a1b      	ldrh	r3, [r3, #16]
 8020294:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020298:	b29a      	uxth	r2, r3
 802029a:	4b17      	ldr	r3, [pc, #92]	; (80202f8 <TRACE_Send+0xfc>)
 802029c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 802029e:	4b16      	ldr	r3, [pc, #88]	; (80202f8 <TRACE_Send+0xfc>)
 80202a0:	8a1b      	ldrh	r3, [r3, #16]
 80202a2:	461a      	mov	r2, r3
 80202a4:	4b15      	ldr	r3, [pc, #84]	; (80202fc <TRACE_Send+0x100>)
 80202a6:	4413      	add	r3, r2
 80202a8:	61bb      	str	r3, [r7, #24]
 80202aa:	697b      	ldr	r3, [r7, #20]
 80202ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202ae:	68fb      	ldr	r3, [r7, #12]
 80202b0:	f383 8810 	msr	PRIMASK, r3
}
 80202b4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 80202b6:	f7e2 faaf 	bl	8002818 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80202ba:	4b11      	ldr	r3, [pc, #68]	; (8020300 <TRACE_Send+0x104>)
 80202bc:	68db      	ldr	r3, [r3, #12]
 80202be:	4a0e      	ldr	r2, [pc, #56]	; (80202f8 <TRACE_Send+0xfc>)
 80202c0:	8a92      	ldrh	r2, [r2, #20]
 80202c2:	4611      	mov	r1, r2
 80202c4:	69b8      	ldr	r0, [r7, #24]
 80202c6:	4798      	blx	r3
 80202c8:	4603      	mov	r3, r0
 80202ca:	77fb      	strb	r3, [r7, #31]
 80202cc:	e00d      	b.n	80202ea <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 80202ce:	f000 f941 	bl	8020554 <TRACE_UnLock>
 80202d2:	697b      	ldr	r3, [r7, #20]
 80202d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202d6:	68bb      	ldr	r3, [r7, #8]
 80202d8:	f383 8810 	msr	PRIMASK, r3
}
 80202dc:	e005      	b.n	80202ea <TRACE_Send+0xee>
 80202de:	697b      	ldr	r3, [r7, #20]
 80202e0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202e2:	687b      	ldr	r3, [r7, #4]
 80202e4:	f383 8810 	msr	PRIMASK, r3
}
 80202e8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 80202ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80202ee:	4618      	mov	r0, r3
 80202f0:	3720      	adds	r7, #32
 80202f2:	46bd      	mov	sp, r7
 80202f4:	bd80      	pop	{r7, pc}
 80202f6:	bf00      	nop
 80202f8:	20001e9c 	.word	0x20001e9c
 80202fc:	20001eb4 	.word	0x20001eb4
 8020300:	08021ac4 	.word	0x08021ac4

08020304 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8020304:	b580      	push	{r7, lr}
 8020306:	b088      	sub	sp, #32
 8020308:	af00      	add	r7, sp, #0
 802030a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 802030c:	2300      	movs	r3, #0
 802030e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020310:	f3ef 8310 	mrs	r3, PRIMASK
 8020314:	617b      	str	r3, [r7, #20]
  return(result);
 8020316:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020318:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 802031a:	b672      	cpsid	i
}
 802031c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 802031e:	4b3c      	ldr	r3, [pc, #240]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020320:	789b      	ldrb	r3, [r3, #2]
 8020322:	2b02      	cmp	r3, #2
 8020324:	d106      	bne.n	8020334 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020326:	4b3a      	ldr	r3, [pc, #232]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020328:	2200      	movs	r2, #0
 802032a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 802032c:	4b38      	ldr	r3, [pc, #224]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 802032e:	2200      	movs	r2, #0
 8020330:	821a      	strh	r2, [r3, #16]
 8020332:	e00a      	b.n	802034a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8020334:	4b36      	ldr	r3, [pc, #216]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020336:	8a1a      	ldrh	r2, [r3, #16]
 8020338:	4b35      	ldr	r3, [pc, #212]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 802033a:	8a9b      	ldrh	r3, [r3, #20]
 802033c:	4413      	add	r3, r2
 802033e:	b29b      	uxth	r3, r3
 8020340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020344:	b29a      	uxth	r2, r3
 8020346:	4b32      	ldr	r3, [pc, #200]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020348:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 802034a:	4b31      	ldr	r3, [pc, #196]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 802034c:	8a1a      	ldrh	r2, [r3, #16]
 802034e:	4b30      	ldr	r3, [pc, #192]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020350:	8a5b      	ldrh	r3, [r3, #18]
 8020352:	429a      	cmp	r2, r3
 8020354:	d04d      	beq.n	80203f2 <TRACE_TxCpltCallback+0xee>
 8020356:	4b2e      	ldr	r3, [pc, #184]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020358:	8adb      	ldrh	r3, [r3, #22]
 802035a:	2b01      	cmp	r3, #1
 802035c:	d149      	bne.n	80203f2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 802035e:	4b2c      	ldr	r3, [pc, #176]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020360:	789b      	ldrb	r3, [r3, #2]
 8020362:	2b01      	cmp	r3, #1
 8020364:	d117      	bne.n	8020396 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8020366:	4b2a      	ldr	r3, [pc, #168]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020368:	881a      	ldrh	r2, [r3, #0]
 802036a:	4b29      	ldr	r3, [pc, #164]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 802036c:	8a1b      	ldrh	r3, [r3, #16]
 802036e:	1ad3      	subs	r3, r2, r3
 8020370:	b29a      	uxth	r2, r3
 8020372:	4b27      	ldr	r3, [pc, #156]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020374:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8020376:	4b26      	ldr	r3, [pc, #152]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020378:	2202      	movs	r2, #2
 802037a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 802037c:	4b24      	ldr	r3, [pc, #144]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 802037e:	2200      	movs	r2, #0
 8020380:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8020382:	4b23      	ldr	r3, [pc, #140]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020384:	8a9b      	ldrh	r3, [r3, #20]
 8020386:	2b00      	cmp	r3, #0
 8020388:	d105      	bne.n	8020396 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 802038a:	4b21      	ldr	r3, [pc, #132]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 802038c:	2200      	movs	r2, #0
 802038e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020390:	4b1f      	ldr	r3, [pc, #124]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020392:	2200      	movs	r2, #0
 8020394:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8020396:	4b1e      	ldr	r3, [pc, #120]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 8020398:	789b      	ldrb	r3, [r3, #2]
 802039a:	2b00      	cmp	r3, #0
 802039c:	d115      	bne.n	80203ca <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 802039e:	4b1c      	ldr	r3, [pc, #112]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203a0:	8a5a      	ldrh	r2, [r3, #18]
 80203a2:	4b1b      	ldr	r3, [pc, #108]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203a4:	8a1b      	ldrh	r3, [r3, #16]
 80203a6:	429a      	cmp	r2, r3
 80203a8:	d908      	bls.n	80203bc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80203aa:	4b19      	ldr	r3, [pc, #100]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203ac:	8a5a      	ldrh	r2, [r3, #18]
 80203ae:	4b18      	ldr	r3, [pc, #96]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203b0:	8a1b      	ldrh	r3, [r3, #16]
 80203b2:	1ad3      	subs	r3, r2, r3
 80203b4:	b29a      	uxth	r2, r3
 80203b6:	4b16      	ldr	r3, [pc, #88]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203b8:	829a      	strh	r2, [r3, #20]
 80203ba:	e006      	b.n	80203ca <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80203bc:	4b14      	ldr	r3, [pc, #80]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203be:	8a1b      	ldrh	r3, [r3, #16]
 80203c0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80203c4:	b29a      	uxth	r2, r3
 80203c6:	4b12      	ldr	r3, [pc, #72]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203c8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80203ca:	4b11      	ldr	r3, [pc, #68]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203cc:	8a1b      	ldrh	r3, [r3, #16]
 80203ce:	461a      	mov	r2, r3
 80203d0:	4b10      	ldr	r3, [pc, #64]	; (8020414 <TRACE_TxCpltCallback+0x110>)
 80203d2:	4413      	add	r3, r2
 80203d4:	61fb      	str	r3, [r7, #28]
 80203d6:	69bb      	ldr	r3, [r7, #24]
 80203d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80203da:	693b      	ldr	r3, [r7, #16]
 80203dc:	f383 8810 	msr	PRIMASK, r3
}
 80203e0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80203e2:	4b0d      	ldr	r3, [pc, #52]	; (8020418 <TRACE_TxCpltCallback+0x114>)
 80203e4:	68db      	ldr	r3, [r3, #12]
 80203e6:	4a0a      	ldr	r2, [pc, #40]	; (8020410 <TRACE_TxCpltCallback+0x10c>)
 80203e8:	8a92      	ldrh	r2, [r2, #20]
 80203ea:	4611      	mov	r1, r2
 80203ec:	69f8      	ldr	r0, [r7, #28]
 80203ee:	4798      	blx	r3
 80203f0:	e00a      	b.n	8020408 <TRACE_TxCpltCallback+0x104>
 80203f2:	69bb      	ldr	r3, [r7, #24]
 80203f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80203f6:	68fb      	ldr	r3, [r7, #12]
 80203f8:	f383 8810 	msr	PRIMASK, r3
}
 80203fc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 80203fe:	f7e2 fa13 	bl	8002828 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8020402:	f000 f8a7 	bl	8020554 <TRACE_UnLock>
  }
}
 8020406:	bf00      	nop
 8020408:	bf00      	nop
 802040a:	3720      	adds	r7, #32
 802040c:	46bd      	mov	sp, r7
 802040e:	bd80      	pop	{r7, pc}
 8020410:	20001e9c 	.word	0x20001e9c
 8020414:	20001eb4 	.word	0x20001eb4
 8020418:	08021ac4 	.word	0x08021ac4

0802041c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 802041c:	b480      	push	{r7}
 802041e:	b087      	sub	sp, #28
 8020420:	af00      	add	r7, sp, #0
 8020422:	4603      	mov	r3, r0
 8020424:	6039      	str	r1, [r7, #0]
 8020426:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8020428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802042c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802042e:	f3ef 8310 	mrs	r3, PRIMASK
 8020432:	60fb      	str	r3, [r7, #12]
  return(result);
 8020434:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020438:	b672      	cpsid	i
}
 802043a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 802043c:	4b35      	ldr	r3, [pc, #212]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 802043e:	8a5a      	ldrh	r2, [r3, #18]
 8020440:	4b34      	ldr	r3, [pc, #208]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 8020442:	8a1b      	ldrh	r3, [r3, #16]
 8020444:	429a      	cmp	r2, r3
 8020446:	d11b      	bne.n	8020480 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020448:	4b32      	ldr	r3, [pc, #200]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 802044a:	8a5b      	ldrh	r3, [r3, #18]
 802044c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020450:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8020452:	88fa      	ldrh	r2, [r7, #6]
 8020454:	8afb      	ldrh	r3, [r7, #22]
 8020456:	429a      	cmp	r2, r3
 8020458:	d33a      	bcc.n	80204d0 <TRACE_AllocateBufer+0xb4>
 802045a:	4b2e      	ldr	r3, [pc, #184]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 802045c:	8a1b      	ldrh	r3, [r3, #16]
 802045e:	88fa      	ldrh	r2, [r7, #6]
 8020460:	429a      	cmp	r2, r3
 8020462:	d235      	bcs.n	80204d0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020464:	4b2b      	ldr	r3, [pc, #172]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 8020466:	2201      	movs	r2, #1
 8020468:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 802046a:	4b2a      	ldr	r3, [pc, #168]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 802046c:	8a5a      	ldrh	r2, [r3, #18]
 802046e:	4b29      	ldr	r3, [pc, #164]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 8020470:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020472:	4b28      	ldr	r3, [pc, #160]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 8020474:	8a1b      	ldrh	r3, [r3, #16]
 8020476:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020478:	4b26      	ldr	r3, [pc, #152]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 802047a:	2200      	movs	r2, #0
 802047c:	825a      	strh	r2, [r3, #18]
 802047e:	e027      	b.n	80204d0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020480:	4b24      	ldr	r3, [pc, #144]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 8020482:	8a5a      	ldrh	r2, [r3, #18]
 8020484:	4b23      	ldr	r3, [pc, #140]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 8020486:	8a1b      	ldrh	r3, [r3, #16]
 8020488:	429a      	cmp	r2, r3
 802048a:	d91b      	bls.n	80204c4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 802048c:	4b21      	ldr	r3, [pc, #132]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 802048e:	8a5b      	ldrh	r3, [r3, #18]
 8020490:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020494:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8020496:	88fa      	ldrh	r2, [r7, #6]
 8020498:	8afb      	ldrh	r3, [r7, #22]
 802049a:	429a      	cmp	r2, r3
 802049c:	d318      	bcc.n	80204d0 <TRACE_AllocateBufer+0xb4>
 802049e:	4b1d      	ldr	r3, [pc, #116]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204a0:	8a1b      	ldrh	r3, [r3, #16]
 80204a2:	88fa      	ldrh	r2, [r7, #6]
 80204a4:	429a      	cmp	r2, r3
 80204a6:	d213      	bcs.n	80204d0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80204a8:	4b1a      	ldr	r3, [pc, #104]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204aa:	2201      	movs	r2, #1
 80204ac:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80204ae:	4b19      	ldr	r3, [pc, #100]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204b0:	8a5a      	ldrh	r2, [r3, #18]
 80204b2:	4b18      	ldr	r3, [pc, #96]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204b4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80204b6:	4b17      	ldr	r3, [pc, #92]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204b8:	8a1b      	ldrh	r3, [r3, #16]
 80204ba:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80204bc:	4b15      	ldr	r3, [pc, #84]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204be:	2200      	movs	r2, #0
 80204c0:	825a      	strh	r2, [r3, #18]
 80204c2:	e005      	b.n	80204d0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80204c4:	4b13      	ldr	r3, [pc, #76]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204c6:	8a1a      	ldrh	r2, [r3, #16]
 80204c8:	4b12      	ldr	r3, [pc, #72]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204ca:	8a5b      	ldrh	r3, [r3, #18]
 80204cc:	1ad3      	subs	r3, r2, r3
 80204ce:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80204d0:	8afa      	ldrh	r2, [r7, #22]
 80204d2:	88fb      	ldrh	r3, [r7, #6]
 80204d4:	429a      	cmp	r2, r3
 80204d6:	d90f      	bls.n	80204f8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80204d8:	4b0e      	ldr	r3, [pc, #56]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204da:	8a5a      	ldrh	r2, [r3, #18]
 80204dc:	683b      	ldr	r3, [r7, #0]
 80204de:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80204e0:	4b0c      	ldr	r3, [pc, #48]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204e2:	8a5a      	ldrh	r2, [r3, #18]
 80204e4:	88fb      	ldrh	r3, [r7, #6]
 80204e6:	4413      	add	r3, r2
 80204e8:	b29b      	uxth	r3, r3
 80204ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80204ee:	b29a      	uxth	r2, r3
 80204f0:	4b08      	ldr	r3, [pc, #32]	; (8020514 <TRACE_AllocateBufer+0xf8>)
 80204f2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 80204f4:	2300      	movs	r3, #0
 80204f6:	82bb      	strh	r3, [r7, #20]
 80204f8:	693b      	ldr	r3, [r7, #16]
 80204fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80204fc:	68bb      	ldr	r3, [r7, #8]
 80204fe:	f383 8810 	msr	PRIMASK, r3
}
 8020502:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8020504:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8020508:	4618      	mov	r0, r3
 802050a:	371c      	adds	r7, #28
 802050c:	46bd      	mov	sp, r7
 802050e:	bc80      	pop	{r7}
 8020510:	4770      	bx	lr
 8020512:	bf00      	nop
 8020514:	20001e9c 	.word	0x20001e9c

08020518 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8020518:	b480      	push	{r7}
 802051a:	b085      	sub	sp, #20
 802051c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802051e:	f3ef 8310 	mrs	r3, PRIMASK
 8020522:	607b      	str	r3, [r7, #4]
  return(result);
 8020524:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020526:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020528:	b672      	cpsid	i
}
 802052a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 802052c:	4b08      	ldr	r3, [pc, #32]	; (8020550 <TRACE_Lock+0x38>)
 802052e:	8adb      	ldrh	r3, [r3, #22]
 8020530:	3301      	adds	r3, #1
 8020532:	b29a      	uxth	r2, r3
 8020534:	4b06      	ldr	r3, [pc, #24]	; (8020550 <TRACE_Lock+0x38>)
 8020536:	82da      	strh	r2, [r3, #22]
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802053c:	68bb      	ldr	r3, [r7, #8]
 802053e:	f383 8810 	msr	PRIMASK, r3
}
 8020542:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020544:	bf00      	nop
 8020546:	3714      	adds	r7, #20
 8020548:	46bd      	mov	sp, r7
 802054a:	bc80      	pop	{r7}
 802054c:	4770      	bx	lr
 802054e:	bf00      	nop
 8020550:	20001e9c 	.word	0x20001e9c

08020554 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8020554:	b480      	push	{r7}
 8020556:	b085      	sub	sp, #20
 8020558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802055a:	f3ef 8310 	mrs	r3, PRIMASK
 802055e:	607b      	str	r3, [r7, #4]
  return(result);
 8020560:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020564:	b672      	cpsid	i
}
 8020566:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8020568:	4b08      	ldr	r3, [pc, #32]	; (802058c <TRACE_UnLock+0x38>)
 802056a:	8adb      	ldrh	r3, [r3, #22]
 802056c:	3b01      	subs	r3, #1
 802056e:	b29a      	uxth	r2, r3
 8020570:	4b06      	ldr	r3, [pc, #24]	; (802058c <TRACE_UnLock+0x38>)
 8020572:	82da      	strh	r2, [r3, #22]
 8020574:	68fb      	ldr	r3, [r7, #12]
 8020576:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020578:	68bb      	ldr	r3, [r7, #8]
 802057a:	f383 8810 	msr	PRIMASK, r3
}
 802057e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020580:	bf00      	nop
 8020582:	3714      	adds	r7, #20
 8020584:	46bd      	mov	sp, r7
 8020586:	bc80      	pop	{r7}
 8020588:	4770      	bx	lr
 802058a:	bf00      	nop
 802058c:	20001e9c 	.word	0x20001e9c

08020590 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8020590:	b480      	push	{r7}
 8020592:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8020594:	4b05      	ldr	r3, [pc, #20]	; (80205ac <TRACE_IsLocked+0x1c>)
 8020596:	8adb      	ldrh	r3, [r3, #22]
 8020598:	2b00      	cmp	r3, #0
 802059a:	bf14      	ite	ne
 802059c:	2301      	movne	r3, #1
 802059e:	2300      	moveq	r3, #0
 80205a0:	b2db      	uxtb	r3, r3
}
 80205a2:	4618      	mov	r0, r3
 80205a4:	46bd      	mov	sp, r7
 80205a6:	bc80      	pop	{r7}
 80205a8:	4770      	bx	lr
 80205aa:	bf00      	nop
 80205ac:	20001e9c 	.word	0x20001e9c

080205b0 <floor>:
 80205b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80205b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80205b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80205bc:	2e13      	cmp	r6, #19
 80205be:	4602      	mov	r2, r0
 80205c0:	460b      	mov	r3, r1
 80205c2:	4607      	mov	r7, r0
 80205c4:	460c      	mov	r4, r1
 80205c6:	4605      	mov	r5, r0
 80205c8:	dc33      	bgt.n	8020632 <floor+0x82>
 80205ca:	2e00      	cmp	r6, #0
 80205cc:	da14      	bge.n	80205f8 <floor+0x48>
 80205ce:	a334      	add	r3, pc, #208	; (adr r3, 80206a0 <floor+0xf0>)
 80205d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205d4:	f7df fe32 	bl	800023c <__adddf3>
 80205d8:	2200      	movs	r2, #0
 80205da:	2300      	movs	r3, #0
 80205dc:	f7e0 fa74 	bl	8000ac8 <__aeabi_dcmpgt>
 80205e0:	b138      	cbz	r0, 80205f2 <floor+0x42>
 80205e2:	2c00      	cmp	r4, #0
 80205e4:	da58      	bge.n	8020698 <floor+0xe8>
 80205e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80205ea:	431d      	orrs	r5, r3
 80205ec:	d001      	beq.n	80205f2 <floor+0x42>
 80205ee:	4c2e      	ldr	r4, [pc, #184]	; (80206a8 <floor+0xf8>)
 80205f0:	2500      	movs	r5, #0
 80205f2:	4623      	mov	r3, r4
 80205f4:	462f      	mov	r7, r5
 80205f6:	e025      	b.n	8020644 <floor+0x94>
 80205f8:	4a2c      	ldr	r2, [pc, #176]	; (80206ac <floor+0xfc>)
 80205fa:	fa42 f806 	asr.w	r8, r2, r6
 80205fe:	ea01 0208 	and.w	r2, r1, r8
 8020602:	4302      	orrs	r2, r0
 8020604:	d01e      	beq.n	8020644 <floor+0x94>
 8020606:	a326      	add	r3, pc, #152	; (adr r3, 80206a0 <floor+0xf0>)
 8020608:	e9d3 2300 	ldrd	r2, r3, [r3]
 802060c:	f7df fe16 	bl	800023c <__adddf3>
 8020610:	2200      	movs	r2, #0
 8020612:	2300      	movs	r3, #0
 8020614:	f7e0 fa58 	bl	8000ac8 <__aeabi_dcmpgt>
 8020618:	2800      	cmp	r0, #0
 802061a:	d0ea      	beq.n	80205f2 <floor+0x42>
 802061c:	2c00      	cmp	r4, #0
 802061e:	bfbe      	ittt	lt
 8020620:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020624:	fa43 f606 	asrlt.w	r6, r3, r6
 8020628:	19a4      	addlt	r4, r4, r6
 802062a:	ea24 0408 	bic.w	r4, r4, r8
 802062e:	2500      	movs	r5, #0
 8020630:	e7df      	b.n	80205f2 <floor+0x42>
 8020632:	2e33      	cmp	r6, #51	; 0x33
 8020634:	dd0a      	ble.n	802064c <floor+0x9c>
 8020636:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802063a:	d103      	bne.n	8020644 <floor+0x94>
 802063c:	f7df fdfe 	bl	800023c <__adddf3>
 8020640:	4607      	mov	r7, r0
 8020642:	460b      	mov	r3, r1
 8020644:	4638      	mov	r0, r7
 8020646:	4619      	mov	r1, r3
 8020648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802064c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8020650:	f04f 32ff 	mov.w	r2, #4294967295
 8020654:	fa22 f808 	lsr.w	r8, r2, r8
 8020658:	ea18 0f00 	tst.w	r8, r0
 802065c:	d0f2      	beq.n	8020644 <floor+0x94>
 802065e:	a310      	add	r3, pc, #64	; (adr r3, 80206a0 <floor+0xf0>)
 8020660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020664:	f7df fdea 	bl	800023c <__adddf3>
 8020668:	2200      	movs	r2, #0
 802066a:	2300      	movs	r3, #0
 802066c:	f7e0 fa2c 	bl	8000ac8 <__aeabi_dcmpgt>
 8020670:	2800      	cmp	r0, #0
 8020672:	d0be      	beq.n	80205f2 <floor+0x42>
 8020674:	2c00      	cmp	r4, #0
 8020676:	da02      	bge.n	802067e <floor+0xce>
 8020678:	2e14      	cmp	r6, #20
 802067a:	d103      	bne.n	8020684 <floor+0xd4>
 802067c:	3401      	adds	r4, #1
 802067e:	ea25 0508 	bic.w	r5, r5, r8
 8020682:	e7b6      	b.n	80205f2 <floor+0x42>
 8020684:	2301      	movs	r3, #1
 8020686:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802068a:	fa03 f606 	lsl.w	r6, r3, r6
 802068e:	4435      	add	r5, r6
 8020690:	42bd      	cmp	r5, r7
 8020692:	bf38      	it	cc
 8020694:	18e4      	addcc	r4, r4, r3
 8020696:	e7f2      	b.n	802067e <floor+0xce>
 8020698:	2500      	movs	r5, #0
 802069a:	462c      	mov	r4, r5
 802069c:	e7a9      	b.n	80205f2 <floor+0x42>
 802069e:	bf00      	nop
 80206a0:	8800759c 	.word	0x8800759c
 80206a4:	7e37e43c 	.word	0x7e37e43c
 80206a8:	bff00000 	.word	0xbff00000
 80206ac:	000fffff 	.word	0x000fffff

080206b0 <__errno>:
 80206b0:	4b01      	ldr	r3, [pc, #4]	; (80206b8 <__errno+0x8>)
 80206b2:	6818      	ldr	r0, [r3, #0]
 80206b4:	4770      	bx	lr
 80206b6:	bf00      	nop
 80206b8:	20000148 	.word	0x20000148

080206bc <__libc_init_array>:
 80206bc:	b570      	push	{r4, r5, r6, lr}
 80206be:	4d0d      	ldr	r5, [pc, #52]	; (80206f4 <__libc_init_array+0x38>)
 80206c0:	4c0d      	ldr	r4, [pc, #52]	; (80206f8 <__libc_init_array+0x3c>)
 80206c2:	1b64      	subs	r4, r4, r5
 80206c4:	10a4      	asrs	r4, r4, #2
 80206c6:	2600      	movs	r6, #0
 80206c8:	42a6      	cmp	r6, r4
 80206ca:	d109      	bne.n	80206e0 <__libc_init_array+0x24>
 80206cc:	4d0b      	ldr	r5, [pc, #44]	; (80206fc <__libc_init_array+0x40>)
 80206ce:	4c0c      	ldr	r4, [pc, #48]	; (8020700 <__libc_init_array+0x44>)
 80206d0:	f000 fc8c 	bl	8020fec <_init>
 80206d4:	1b64      	subs	r4, r4, r5
 80206d6:	10a4      	asrs	r4, r4, #2
 80206d8:	2600      	movs	r6, #0
 80206da:	42a6      	cmp	r6, r4
 80206dc:	d105      	bne.n	80206ea <__libc_init_array+0x2e>
 80206de:	bd70      	pop	{r4, r5, r6, pc}
 80206e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80206e4:	4798      	blx	r3
 80206e6:	3601      	adds	r6, #1
 80206e8:	e7ee      	b.n	80206c8 <__libc_init_array+0xc>
 80206ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80206ee:	4798      	blx	r3
 80206f0:	3601      	adds	r6, #1
 80206f2:	e7f2      	b.n	80206da <__libc_init_array+0x1e>
 80206f4:	08022178 	.word	0x08022178
 80206f8:	08022178 	.word	0x08022178
 80206fc:	08022178 	.word	0x08022178
 8020700:	08022180 	.word	0x08022180

08020704 <memcpy>:
 8020704:	440a      	add	r2, r1
 8020706:	4291      	cmp	r1, r2
 8020708:	f100 33ff 	add.w	r3, r0, #4294967295
 802070c:	d100      	bne.n	8020710 <memcpy+0xc>
 802070e:	4770      	bx	lr
 8020710:	b510      	push	{r4, lr}
 8020712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020716:	f803 4f01 	strb.w	r4, [r3, #1]!
 802071a:	4291      	cmp	r1, r2
 802071c:	d1f9      	bne.n	8020712 <memcpy+0xe>
 802071e:	bd10      	pop	{r4, pc}

08020720 <memset>:
 8020720:	4402      	add	r2, r0
 8020722:	4603      	mov	r3, r0
 8020724:	4293      	cmp	r3, r2
 8020726:	d100      	bne.n	802072a <memset+0xa>
 8020728:	4770      	bx	lr
 802072a:	f803 1b01 	strb.w	r1, [r3], #1
 802072e:	e7f9      	b.n	8020724 <memset+0x4>

08020730 <siprintf>:
 8020730:	b40e      	push	{r1, r2, r3}
 8020732:	b500      	push	{lr}
 8020734:	b09c      	sub	sp, #112	; 0x70
 8020736:	ab1d      	add	r3, sp, #116	; 0x74
 8020738:	9002      	str	r0, [sp, #8]
 802073a:	9006      	str	r0, [sp, #24]
 802073c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020740:	4809      	ldr	r0, [pc, #36]	; (8020768 <siprintf+0x38>)
 8020742:	9107      	str	r1, [sp, #28]
 8020744:	9104      	str	r1, [sp, #16]
 8020746:	4909      	ldr	r1, [pc, #36]	; (802076c <siprintf+0x3c>)
 8020748:	f853 2b04 	ldr.w	r2, [r3], #4
 802074c:	9105      	str	r1, [sp, #20]
 802074e:	6800      	ldr	r0, [r0, #0]
 8020750:	9301      	str	r3, [sp, #4]
 8020752:	a902      	add	r1, sp, #8
 8020754:	f000 f868 	bl	8020828 <_svfiprintf_r>
 8020758:	9b02      	ldr	r3, [sp, #8]
 802075a:	2200      	movs	r2, #0
 802075c:	701a      	strb	r2, [r3, #0]
 802075e:	b01c      	add	sp, #112	; 0x70
 8020760:	f85d eb04 	ldr.w	lr, [sp], #4
 8020764:	b003      	add	sp, #12
 8020766:	4770      	bx	lr
 8020768:	20000148 	.word	0x20000148
 802076c:	ffff0208 	.word	0xffff0208

08020770 <__ssputs_r>:
 8020770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020774:	688e      	ldr	r6, [r1, #8]
 8020776:	429e      	cmp	r6, r3
 8020778:	4682      	mov	sl, r0
 802077a:	460c      	mov	r4, r1
 802077c:	4690      	mov	r8, r2
 802077e:	461f      	mov	r7, r3
 8020780:	d838      	bhi.n	80207f4 <__ssputs_r+0x84>
 8020782:	898a      	ldrh	r2, [r1, #12]
 8020784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020788:	d032      	beq.n	80207f0 <__ssputs_r+0x80>
 802078a:	6825      	ldr	r5, [r4, #0]
 802078c:	6909      	ldr	r1, [r1, #16]
 802078e:	eba5 0901 	sub.w	r9, r5, r1
 8020792:	6965      	ldr	r5, [r4, #20]
 8020794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802079c:	3301      	adds	r3, #1
 802079e:	444b      	add	r3, r9
 80207a0:	106d      	asrs	r5, r5, #1
 80207a2:	429d      	cmp	r5, r3
 80207a4:	bf38      	it	cc
 80207a6:	461d      	movcc	r5, r3
 80207a8:	0553      	lsls	r3, r2, #21
 80207aa:	d531      	bpl.n	8020810 <__ssputs_r+0xa0>
 80207ac:	4629      	mov	r1, r5
 80207ae:	f000 fb53 	bl	8020e58 <_malloc_r>
 80207b2:	4606      	mov	r6, r0
 80207b4:	b950      	cbnz	r0, 80207cc <__ssputs_r+0x5c>
 80207b6:	230c      	movs	r3, #12
 80207b8:	f8ca 3000 	str.w	r3, [sl]
 80207bc:	89a3      	ldrh	r3, [r4, #12]
 80207be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80207c2:	81a3      	strh	r3, [r4, #12]
 80207c4:	f04f 30ff 	mov.w	r0, #4294967295
 80207c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80207cc:	6921      	ldr	r1, [r4, #16]
 80207ce:	464a      	mov	r2, r9
 80207d0:	f7ff ff98 	bl	8020704 <memcpy>
 80207d4:	89a3      	ldrh	r3, [r4, #12]
 80207d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80207da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80207de:	81a3      	strh	r3, [r4, #12]
 80207e0:	6126      	str	r6, [r4, #16]
 80207e2:	6165      	str	r5, [r4, #20]
 80207e4:	444e      	add	r6, r9
 80207e6:	eba5 0509 	sub.w	r5, r5, r9
 80207ea:	6026      	str	r6, [r4, #0]
 80207ec:	60a5      	str	r5, [r4, #8]
 80207ee:	463e      	mov	r6, r7
 80207f0:	42be      	cmp	r6, r7
 80207f2:	d900      	bls.n	80207f6 <__ssputs_r+0x86>
 80207f4:	463e      	mov	r6, r7
 80207f6:	6820      	ldr	r0, [r4, #0]
 80207f8:	4632      	mov	r2, r6
 80207fa:	4641      	mov	r1, r8
 80207fc:	f000 faa8 	bl	8020d50 <memmove>
 8020800:	68a3      	ldr	r3, [r4, #8]
 8020802:	1b9b      	subs	r3, r3, r6
 8020804:	60a3      	str	r3, [r4, #8]
 8020806:	6823      	ldr	r3, [r4, #0]
 8020808:	4433      	add	r3, r6
 802080a:	6023      	str	r3, [r4, #0]
 802080c:	2000      	movs	r0, #0
 802080e:	e7db      	b.n	80207c8 <__ssputs_r+0x58>
 8020810:	462a      	mov	r2, r5
 8020812:	f000 fb95 	bl	8020f40 <_realloc_r>
 8020816:	4606      	mov	r6, r0
 8020818:	2800      	cmp	r0, #0
 802081a:	d1e1      	bne.n	80207e0 <__ssputs_r+0x70>
 802081c:	6921      	ldr	r1, [r4, #16]
 802081e:	4650      	mov	r0, sl
 8020820:	f000 fab0 	bl	8020d84 <_free_r>
 8020824:	e7c7      	b.n	80207b6 <__ssputs_r+0x46>
	...

08020828 <_svfiprintf_r>:
 8020828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802082c:	4698      	mov	r8, r3
 802082e:	898b      	ldrh	r3, [r1, #12]
 8020830:	061b      	lsls	r3, r3, #24
 8020832:	b09d      	sub	sp, #116	; 0x74
 8020834:	4607      	mov	r7, r0
 8020836:	460d      	mov	r5, r1
 8020838:	4614      	mov	r4, r2
 802083a:	d50e      	bpl.n	802085a <_svfiprintf_r+0x32>
 802083c:	690b      	ldr	r3, [r1, #16]
 802083e:	b963      	cbnz	r3, 802085a <_svfiprintf_r+0x32>
 8020840:	2140      	movs	r1, #64	; 0x40
 8020842:	f000 fb09 	bl	8020e58 <_malloc_r>
 8020846:	6028      	str	r0, [r5, #0]
 8020848:	6128      	str	r0, [r5, #16]
 802084a:	b920      	cbnz	r0, 8020856 <_svfiprintf_r+0x2e>
 802084c:	230c      	movs	r3, #12
 802084e:	603b      	str	r3, [r7, #0]
 8020850:	f04f 30ff 	mov.w	r0, #4294967295
 8020854:	e0d1      	b.n	80209fa <_svfiprintf_r+0x1d2>
 8020856:	2340      	movs	r3, #64	; 0x40
 8020858:	616b      	str	r3, [r5, #20]
 802085a:	2300      	movs	r3, #0
 802085c:	9309      	str	r3, [sp, #36]	; 0x24
 802085e:	2320      	movs	r3, #32
 8020860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020864:	f8cd 800c 	str.w	r8, [sp, #12]
 8020868:	2330      	movs	r3, #48	; 0x30
 802086a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020a14 <_svfiprintf_r+0x1ec>
 802086e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020872:	f04f 0901 	mov.w	r9, #1
 8020876:	4623      	mov	r3, r4
 8020878:	469a      	mov	sl, r3
 802087a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802087e:	b10a      	cbz	r2, 8020884 <_svfiprintf_r+0x5c>
 8020880:	2a25      	cmp	r2, #37	; 0x25
 8020882:	d1f9      	bne.n	8020878 <_svfiprintf_r+0x50>
 8020884:	ebba 0b04 	subs.w	fp, sl, r4
 8020888:	d00b      	beq.n	80208a2 <_svfiprintf_r+0x7a>
 802088a:	465b      	mov	r3, fp
 802088c:	4622      	mov	r2, r4
 802088e:	4629      	mov	r1, r5
 8020890:	4638      	mov	r0, r7
 8020892:	f7ff ff6d 	bl	8020770 <__ssputs_r>
 8020896:	3001      	adds	r0, #1
 8020898:	f000 80aa 	beq.w	80209f0 <_svfiprintf_r+0x1c8>
 802089c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802089e:	445a      	add	r2, fp
 80208a0:	9209      	str	r2, [sp, #36]	; 0x24
 80208a2:	f89a 3000 	ldrb.w	r3, [sl]
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	f000 80a2 	beq.w	80209f0 <_svfiprintf_r+0x1c8>
 80208ac:	2300      	movs	r3, #0
 80208ae:	f04f 32ff 	mov.w	r2, #4294967295
 80208b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80208b6:	f10a 0a01 	add.w	sl, sl, #1
 80208ba:	9304      	str	r3, [sp, #16]
 80208bc:	9307      	str	r3, [sp, #28]
 80208be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80208c2:	931a      	str	r3, [sp, #104]	; 0x68
 80208c4:	4654      	mov	r4, sl
 80208c6:	2205      	movs	r2, #5
 80208c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80208cc:	4851      	ldr	r0, [pc, #324]	; (8020a14 <_svfiprintf_r+0x1ec>)
 80208ce:	f7df fc5f 	bl	8000190 <memchr>
 80208d2:	9a04      	ldr	r2, [sp, #16]
 80208d4:	b9d8      	cbnz	r0, 802090e <_svfiprintf_r+0xe6>
 80208d6:	06d0      	lsls	r0, r2, #27
 80208d8:	bf44      	itt	mi
 80208da:	2320      	movmi	r3, #32
 80208dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80208e0:	0711      	lsls	r1, r2, #28
 80208e2:	bf44      	itt	mi
 80208e4:	232b      	movmi	r3, #43	; 0x2b
 80208e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80208ea:	f89a 3000 	ldrb.w	r3, [sl]
 80208ee:	2b2a      	cmp	r3, #42	; 0x2a
 80208f0:	d015      	beq.n	802091e <_svfiprintf_r+0xf6>
 80208f2:	9a07      	ldr	r2, [sp, #28]
 80208f4:	4654      	mov	r4, sl
 80208f6:	2000      	movs	r0, #0
 80208f8:	f04f 0c0a 	mov.w	ip, #10
 80208fc:	4621      	mov	r1, r4
 80208fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020902:	3b30      	subs	r3, #48	; 0x30
 8020904:	2b09      	cmp	r3, #9
 8020906:	d94e      	bls.n	80209a6 <_svfiprintf_r+0x17e>
 8020908:	b1b0      	cbz	r0, 8020938 <_svfiprintf_r+0x110>
 802090a:	9207      	str	r2, [sp, #28]
 802090c:	e014      	b.n	8020938 <_svfiprintf_r+0x110>
 802090e:	eba0 0308 	sub.w	r3, r0, r8
 8020912:	fa09 f303 	lsl.w	r3, r9, r3
 8020916:	4313      	orrs	r3, r2
 8020918:	9304      	str	r3, [sp, #16]
 802091a:	46a2      	mov	sl, r4
 802091c:	e7d2      	b.n	80208c4 <_svfiprintf_r+0x9c>
 802091e:	9b03      	ldr	r3, [sp, #12]
 8020920:	1d19      	adds	r1, r3, #4
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	9103      	str	r1, [sp, #12]
 8020926:	2b00      	cmp	r3, #0
 8020928:	bfbb      	ittet	lt
 802092a:	425b      	neglt	r3, r3
 802092c:	f042 0202 	orrlt.w	r2, r2, #2
 8020930:	9307      	strge	r3, [sp, #28]
 8020932:	9307      	strlt	r3, [sp, #28]
 8020934:	bfb8      	it	lt
 8020936:	9204      	strlt	r2, [sp, #16]
 8020938:	7823      	ldrb	r3, [r4, #0]
 802093a:	2b2e      	cmp	r3, #46	; 0x2e
 802093c:	d10c      	bne.n	8020958 <_svfiprintf_r+0x130>
 802093e:	7863      	ldrb	r3, [r4, #1]
 8020940:	2b2a      	cmp	r3, #42	; 0x2a
 8020942:	d135      	bne.n	80209b0 <_svfiprintf_r+0x188>
 8020944:	9b03      	ldr	r3, [sp, #12]
 8020946:	1d1a      	adds	r2, r3, #4
 8020948:	681b      	ldr	r3, [r3, #0]
 802094a:	9203      	str	r2, [sp, #12]
 802094c:	2b00      	cmp	r3, #0
 802094e:	bfb8      	it	lt
 8020950:	f04f 33ff 	movlt.w	r3, #4294967295
 8020954:	3402      	adds	r4, #2
 8020956:	9305      	str	r3, [sp, #20]
 8020958:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8020a18 <_svfiprintf_r+0x1f0>
 802095c:	7821      	ldrb	r1, [r4, #0]
 802095e:	2203      	movs	r2, #3
 8020960:	4650      	mov	r0, sl
 8020962:	f7df fc15 	bl	8000190 <memchr>
 8020966:	b140      	cbz	r0, 802097a <_svfiprintf_r+0x152>
 8020968:	2340      	movs	r3, #64	; 0x40
 802096a:	eba0 000a 	sub.w	r0, r0, sl
 802096e:	fa03 f000 	lsl.w	r0, r3, r0
 8020972:	9b04      	ldr	r3, [sp, #16]
 8020974:	4303      	orrs	r3, r0
 8020976:	3401      	adds	r4, #1
 8020978:	9304      	str	r3, [sp, #16]
 802097a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802097e:	4827      	ldr	r0, [pc, #156]	; (8020a1c <_svfiprintf_r+0x1f4>)
 8020980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020984:	2206      	movs	r2, #6
 8020986:	f7df fc03 	bl	8000190 <memchr>
 802098a:	2800      	cmp	r0, #0
 802098c:	d038      	beq.n	8020a00 <_svfiprintf_r+0x1d8>
 802098e:	4b24      	ldr	r3, [pc, #144]	; (8020a20 <_svfiprintf_r+0x1f8>)
 8020990:	bb1b      	cbnz	r3, 80209da <_svfiprintf_r+0x1b2>
 8020992:	9b03      	ldr	r3, [sp, #12]
 8020994:	3307      	adds	r3, #7
 8020996:	f023 0307 	bic.w	r3, r3, #7
 802099a:	3308      	adds	r3, #8
 802099c:	9303      	str	r3, [sp, #12]
 802099e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209a0:	4433      	add	r3, r6
 80209a2:	9309      	str	r3, [sp, #36]	; 0x24
 80209a4:	e767      	b.n	8020876 <_svfiprintf_r+0x4e>
 80209a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80209aa:	460c      	mov	r4, r1
 80209ac:	2001      	movs	r0, #1
 80209ae:	e7a5      	b.n	80208fc <_svfiprintf_r+0xd4>
 80209b0:	2300      	movs	r3, #0
 80209b2:	3401      	adds	r4, #1
 80209b4:	9305      	str	r3, [sp, #20]
 80209b6:	4619      	mov	r1, r3
 80209b8:	f04f 0c0a 	mov.w	ip, #10
 80209bc:	4620      	mov	r0, r4
 80209be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80209c2:	3a30      	subs	r2, #48	; 0x30
 80209c4:	2a09      	cmp	r2, #9
 80209c6:	d903      	bls.n	80209d0 <_svfiprintf_r+0x1a8>
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d0c5      	beq.n	8020958 <_svfiprintf_r+0x130>
 80209cc:	9105      	str	r1, [sp, #20]
 80209ce:	e7c3      	b.n	8020958 <_svfiprintf_r+0x130>
 80209d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80209d4:	4604      	mov	r4, r0
 80209d6:	2301      	movs	r3, #1
 80209d8:	e7f0      	b.n	80209bc <_svfiprintf_r+0x194>
 80209da:	ab03      	add	r3, sp, #12
 80209dc:	9300      	str	r3, [sp, #0]
 80209de:	462a      	mov	r2, r5
 80209e0:	4b10      	ldr	r3, [pc, #64]	; (8020a24 <_svfiprintf_r+0x1fc>)
 80209e2:	a904      	add	r1, sp, #16
 80209e4:	4638      	mov	r0, r7
 80209e6:	f3af 8000 	nop.w
 80209ea:	1c42      	adds	r2, r0, #1
 80209ec:	4606      	mov	r6, r0
 80209ee:	d1d6      	bne.n	802099e <_svfiprintf_r+0x176>
 80209f0:	89ab      	ldrh	r3, [r5, #12]
 80209f2:	065b      	lsls	r3, r3, #25
 80209f4:	f53f af2c 	bmi.w	8020850 <_svfiprintf_r+0x28>
 80209f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80209fa:	b01d      	add	sp, #116	; 0x74
 80209fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a00:	ab03      	add	r3, sp, #12
 8020a02:	9300      	str	r3, [sp, #0]
 8020a04:	462a      	mov	r2, r5
 8020a06:	4b07      	ldr	r3, [pc, #28]	; (8020a24 <_svfiprintf_r+0x1fc>)
 8020a08:	a904      	add	r1, sp, #16
 8020a0a:	4638      	mov	r0, r7
 8020a0c:	f000 f87a 	bl	8020b04 <_printf_i>
 8020a10:	e7eb      	b.n	80209ea <_svfiprintf_r+0x1c2>
 8020a12:	bf00      	nop
 8020a14:	08022064 	.word	0x08022064
 8020a18:	0802206a 	.word	0x0802206a
 8020a1c:	0802206e 	.word	0x0802206e
 8020a20:	00000000 	.word	0x00000000
 8020a24:	08020771 	.word	0x08020771

08020a28 <_printf_common>:
 8020a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a2c:	4616      	mov	r6, r2
 8020a2e:	4699      	mov	r9, r3
 8020a30:	688a      	ldr	r2, [r1, #8]
 8020a32:	690b      	ldr	r3, [r1, #16]
 8020a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020a38:	4293      	cmp	r3, r2
 8020a3a:	bfb8      	it	lt
 8020a3c:	4613      	movlt	r3, r2
 8020a3e:	6033      	str	r3, [r6, #0]
 8020a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020a44:	4607      	mov	r7, r0
 8020a46:	460c      	mov	r4, r1
 8020a48:	b10a      	cbz	r2, 8020a4e <_printf_common+0x26>
 8020a4a:	3301      	adds	r3, #1
 8020a4c:	6033      	str	r3, [r6, #0]
 8020a4e:	6823      	ldr	r3, [r4, #0]
 8020a50:	0699      	lsls	r1, r3, #26
 8020a52:	bf42      	ittt	mi
 8020a54:	6833      	ldrmi	r3, [r6, #0]
 8020a56:	3302      	addmi	r3, #2
 8020a58:	6033      	strmi	r3, [r6, #0]
 8020a5a:	6825      	ldr	r5, [r4, #0]
 8020a5c:	f015 0506 	ands.w	r5, r5, #6
 8020a60:	d106      	bne.n	8020a70 <_printf_common+0x48>
 8020a62:	f104 0a19 	add.w	sl, r4, #25
 8020a66:	68e3      	ldr	r3, [r4, #12]
 8020a68:	6832      	ldr	r2, [r6, #0]
 8020a6a:	1a9b      	subs	r3, r3, r2
 8020a6c:	42ab      	cmp	r3, r5
 8020a6e:	dc26      	bgt.n	8020abe <_printf_common+0x96>
 8020a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020a74:	1e13      	subs	r3, r2, #0
 8020a76:	6822      	ldr	r2, [r4, #0]
 8020a78:	bf18      	it	ne
 8020a7a:	2301      	movne	r3, #1
 8020a7c:	0692      	lsls	r2, r2, #26
 8020a7e:	d42b      	bmi.n	8020ad8 <_printf_common+0xb0>
 8020a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020a84:	4649      	mov	r1, r9
 8020a86:	4638      	mov	r0, r7
 8020a88:	47c0      	blx	r8
 8020a8a:	3001      	adds	r0, #1
 8020a8c:	d01e      	beq.n	8020acc <_printf_common+0xa4>
 8020a8e:	6823      	ldr	r3, [r4, #0]
 8020a90:	68e5      	ldr	r5, [r4, #12]
 8020a92:	6832      	ldr	r2, [r6, #0]
 8020a94:	f003 0306 	and.w	r3, r3, #6
 8020a98:	2b04      	cmp	r3, #4
 8020a9a:	bf08      	it	eq
 8020a9c:	1aad      	subeq	r5, r5, r2
 8020a9e:	68a3      	ldr	r3, [r4, #8]
 8020aa0:	6922      	ldr	r2, [r4, #16]
 8020aa2:	bf0c      	ite	eq
 8020aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020aa8:	2500      	movne	r5, #0
 8020aaa:	4293      	cmp	r3, r2
 8020aac:	bfc4      	itt	gt
 8020aae:	1a9b      	subgt	r3, r3, r2
 8020ab0:	18ed      	addgt	r5, r5, r3
 8020ab2:	2600      	movs	r6, #0
 8020ab4:	341a      	adds	r4, #26
 8020ab6:	42b5      	cmp	r5, r6
 8020ab8:	d11a      	bne.n	8020af0 <_printf_common+0xc8>
 8020aba:	2000      	movs	r0, #0
 8020abc:	e008      	b.n	8020ad0 <_printf_common+0xa8>
 8020abe:	2301      	movs	r3, #1
 8020ac0:	4652      	mov	r2, sl
 8020ac2:	4649      	mov	r1, r9
 8020ac4:	4638      	mov	r0, r7
 8020ac6:	47c0      	blx	r8
 8020ac8:	3001      	adds	r0, #1
 8020aca:	d103      	bne.n	8020ad4 <_printf_common+0xac>
 8020acc:	f04f 30ff 	mov.w	r0, #4294967295
 8020ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ad4:	3501      	adds	r5, #1
 8020ad6:	e7c6      	b.n	8020a66 <_printf_common+0x3e>
 8020ad8:	18e1      	adds	r1, r4, r3
 8020ada:	1c5a      	adds	r2, r3, #1
 8020adc:	2030      	movs	r0, #48	; 0x30
 8020ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020ae2:	4422      	add	r2, r4
 8020ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020aec:	3302      	adds	r3, #2
 8020aee:	e7c7      	b.n	8020a80 <_printf_common+0x58>
 8020af0:	2301      	movs	r3, #1
 8020af2:	4622      	mov	r2, r4
 8020af4:	4649      	mov	r1, r9
 8020af6:	4638      	mov	r0, r7
 8020af8:	47c0      	blx	r8
 8020afa:	3001      	adds	r0, #1
 8020afc:	d0e6      	beq.n	8020acc <_printf_common+0xa4>
 8020afe:	3601      	adds	r6, #1
 8020b00:	e7d9      	b.n	8020ab6 <_printf_common+0x8e>
	...

08020b04 <_printf_i>:
 8020b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020b08:	7e0f      	ldrb	r7, [r1, #24]
 8020b0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020b0c:	2f78      	cmp	r7, #120	; 0x78
 8020b0e:	4691      	mov	r9, r2
 8020b10:	4680      	mov	r8, r0
 8020b12:	460c      	mov	r4, r1
 8020b14:	469a      	mov	sl, r3
 8020b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020b1a:	d807      	bhi.n	8020b2c <_printf_i+0x28>
 8020b1c:	2f62      	cmp	r7, #98	; 0x62
 8020b1e:	d80a      	bhi.n	8020b36 <_printf_i+0x32>
 8020b20:	2f00      	cmp	r7, #0
 8020b22:	f000 80d8 	beq.w	8020cd6 <_printf_i+0x1d2>
 8020b26:	2f58      	cmp	r7, #88	; 0x58
 8020b28:	f000 80a3 	beq.w	8020c72 <_printf_i+0x16e>
 8020b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020b34:	e03a      	b.n	8020bac <_printf_i+0xa8>
 8020b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020b3a:	2b15      	cmp	r3, #21
 8020b3c:	d8f6      	bhi.n	8020b2c <_printf_i+0x28>
 8020b3e:	a101      	add	r1, pc, #4	; (adr r1, 8020b44 <_printf_i+0x40>)
 8020b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020b44:	08020b9d 	.word	0x08020b9d
 8020b48:	08020bb1 	.word	0x08020bb1
 8020b4c:	08020b2d 	.word	0x08020b2d
 8020b50:	08020b2d 	.word	0x08020b2d
 8020b54:	08020b2d 	.word	0x08020b2d
 8020b58:	08020b2d 	.word	0x08020b2d
 8020b5c:	08020bb1 	.word	0x08020bb1
 8020b60:	08020b2d 	.word	0x08020b2d
 8020b64:	08020b2d 	.word	0x08020b2d
 8020b68:	08020b2d 	.word	0x08020b2d
 8020b6c:	08020b2d 	.word	0x08020b2d
 8020b70:	08020cbd 	.word	0x08020cbd
 8020b74:	08020be1 	.word	0x08020be1
 8020b78:	08020c9f 	.word	0x08020c9f
 8020b7c:	08020b2d 	.word	0x08020b2d
 8020b80:	08020b2d 	.word	0x08020b2d
 8020b84:	08020cdf 	.word	0x08020cdf
 8020b88:	08020b2d 	.word	0x08020b2d
 8020b8c:	08020be1 	.word	0x08020be1
 8020b90:	08020b2d 	.word	0x08020b2d
 8020b94:	08020b2d 	.word	0x08020b2d
 8020b98:	08020ca7 	.word	0x08020ca7
 8020b9c:	682b      	ldr	r3, [r5, #0]
 8020b9e:	1d1a      	adds	r2, r3, #4
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	602a      	str	r2, [r5, #0]
 8020ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020bac:	2301      	movs	r3, #1
 8020bae:	e0a3      	b.n	8020cf8 <_printf_i+0x1f4>
 8020bb0:	6820      	ldr	r0, [r4, #0]
 8020bb2:	6829      	ldr	r1, [r5, #0]
 8020bb4:	0606      	lsls	r6, r0, #24
 8020bb6:	f101 0304 	add.w	r3, r1, #4
 8020bba:	d50a      	bpl.n	8020bd2 <_printf_i+0xce>
 8020bbc:	680e      	ldr	r6, [r1, #0]
 8020bbe:	602b      	str	r3, [r5, #0]
 8020bc0:	2e00      	cmp	r6, #0
 8020bc2:	da03      	bge.n	8020bcc <_printf_i+0xc8>
 8020bc4:	232d      	movs	r3, #45	; 0x2d
 8020bc6:	4276      	negs	r6, r6
 8020bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020bcc:	485e      	ldr	r0, [pc, #376]	; (8020d48 <_printf_i+0x244>)
 8020bce:	230a      	movs	r3, #10
 8020bd0:	e019      	b.n	8020c06 <_printf_i+0x102>
 8020bd2:	680e      	ldr	r6, [r1, #0]
 8020bd4:	602b      	str	r3, [r5, #0]
 8020bd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020bda:	bf18      	it	ne
 8020bdc:	b236      	sxthne	r6, r6
 8020bde:	e7ef      	b.n	8020bc0 <_printf_i+0xbc>
 8020be0:	682b      	ldr	r3, [r5, #0]
 8020be2:	6820      	ldr	r0, [r4, #0]
 8020be4:	1d19      	adds	r1, r3, #4
 8020be6:	6029      	str	r1, [r5, #0]
 8020be8:	0601      	lsls	r1, r0, #24
 8020bea:	d501      	bpl.n	8020bf0 <_printf_i+0xec>
 8020bec:	681e      	ldr	r6, [r3, #0]
 8020bee:	e002      	b.n	8020bf6 <_printf_i+0xf2>
 8020bf0:	0646      	lsls	r6, r0, #25
 8020bf2:	d5fb      	bpl.n	8020bec <_printf_i+0xe8>
 8020bf4:	881e      	ldrh	r6, [r3, #0]
 8020bf6:	4854      	ldr	r0, [pc, #336]	; (8020d48 <_printf_i+0x244>)
 8020bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8020bfa:	bf0c      	ite	eq
 8020bfc:	2308      	moveq	r3, #8
 8020bfe:	230a      	movne	r3, #10
 8020c00:	2100      	movs	r1, #0
 8020c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020c06:	6865      	ldr	r5, [r4, #4]
 8020c08:	60a5      	str	r5, [r4, #8]
 8020c0a:	2d00      	cmp	r5, #0
 8020c0c:	bfa2      	ittt	ge
 8020c0e:	6821      	ldrge	r1, [r4, #0]
 8020c10:	f021 0104 	bicge.w	r1, r1, #4
 8020c14:	6021      	strge	r1, [r4, #0]
 8020c16:	b90e      	cbnz	r6, 8020c1c <_printf_i+0x118>
 8020c18:	2d00      	cmp	r5, #0
 8020c1a:	d04d      	beq.n	8020cb8 <_printf_i+0x1b4>
 8020c1c:	4615      	mov	r5, r2
 8020c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020c22:	fb03 6711 	mls	r7, r3, r1, r6
 8020c26:	5dc7      	ldrb	r7, [r0, r7]
 8020c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020c2c:	4637      	mov	r7, r6
 8020c2e:	42bb      	cmp	r3, r7
 8020c30:	460e      	mov	r6, r1
 8020c32:	d9f4      	bls.n	8020c1e <_printf_i+0x11a>
 8020c34:	2b08      	cmp	r3, #8
 8020c36:	d10b      	bne.n	8020c50 <_printf_i+0x14c>
 8020c38:	6823      	ldr	r3, [r4, #0]
 8020c3a:	07de      	lsls	r6, r3, #31
 8020c3c:	d508      	bpl.n	8020c50 <_printf_i+0x14c>
 8020c3e:	6923      	ldr	r3, [r4, #16]
 8020c40:	6861      	ldr	r1, [r4, #4]
 8020c42:	4299      	cmp	r1, r3
 8020c44:	bfde      	ittt	le
 8020c46:	2330      	movle	r3, #48	; 0x30
 8020c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020c50:	1b52      	subs	r2, r2, r5
 8020c52:	6122      	str	r2, [r4, #16]
 8020c54:	f8cd a000 	str.w	sl, [sp]
 8020c58:	464b      	mov	r3, r9
 8020c5a:	aa03      	add	r2, sp, #12
 8020c5c:	4621      	mov	r1, r4
 8020c5e:	4640      	mov	r0, r8
 8020c60:	f7ff fee2 	bl	8020a28 <_printf_common>
 8020c64:	3001      	adds	r0, #1
 8020c66:	d14c      	bne.n	8020d02 <_printf_i+0x1fe>
 8020c68:	f04f 30ff 	mov.w	r0, #4294967295
 8020c6c:	b004      	add	sp, #16
 8020c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c72:	4835      	ldr	r0, [pc, #212]	; (8020d48 <_printf_i+0x244>)
 8020c74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020c78:	6829      	ldr	r1, [r5, #0]
 8020c7a:	6823      	ldr	r3, [r4, #0]
 8020c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8020c80:	6029      	str	r1, [r5, #0]
 8020c82:	061d      	lsls	r5, r3, #24
 8020c84:	d514      	bpl.n	8020cb0 <_printf_i+0x1ac>
 8020c86:	07df      	lsls	r7, r3, #31
 8020c88:	bf44      	itt	mi
 8020c8a:	f043 0320 	orrmi.w	r3, r3, #32
 8020c8e:	6023      	strmi	r3, [r4, #0]
 8020c90:	b91e      	cbnz	r6, 8020c9a <_printf_i+0x196>
 8020c92:	6823      	ldr	r3, [r4, #0]
 8020c94:	f023 0320 	bic.w	r3, r3, #32
 8020c98:	6023      	str	r3, [r4, #0]
 8020c9a:	2310      	movs	r3, #16
 8020c9c:	e7b0      	b.n	8020c00 <_printf_i+0xfc>
 8020c9e:	6823      	ldr	r3, [r4, #0]
 8020ca0:	f043 0320 	orr.w	r3, r3, #32
 8020ca4:	6023      	str	r3, [r4, #0]
 8020ca6:	2378      	movs	r3, #120	; 0x78
 8020ca8:	4828      	ldr	r0, [pc, #160]	; (8020d4c <_printf_i+0x248>)
 8020caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020cae:	e7e3      	b.n	8020c78 <_printf_i+0x174>
 8020cb0:	0659      	lsls	r1, r3, #25
 8020cb2:	bf48      	it	mi
 8020cb4:	b2b6      	uxthmi	r6, r6
 8020cb6:	e7e6      	b.n	8020c86 <_printf_i+0x182>
 8020cb8:	4615      	mov	r5, r2
 8020cba:	e7bb      	b.n	8020c34 <_printf_i+0x130>
 8020cbc:	682b      	ldr	r3, [r5, #0]
 8020cbe:	6826      	ldr	r6, [r4, #0]
 8020cc0:	6961      	ldr	r1, [r4, #20]
 8020cc2:	1d18      	adds	r0, r3, #4
 8020cc4:	6028      	str	r0, [r5, #0]
 8020cc6:	0635      	lsls	r5, r6, #24
 8020cc8:	681b      	ldr	r3, [r3, #0]
 8020cca:	d501      	bpl.n	8020cd0 <_printf_i+0x1cc>
 8020ccc:	6019      	str	r1, [r3, #0]
 8020cce:	e002      	b.n	8020cd6 <_printf_i+0x1d2>
 8020cd0:	0670      	lsls	r0, r6, #25
 8020cd2:	d5fb      	bpl.n	8020ccc <_printf_i+0x1c8>
 8020cd4:	8019      	strh	r1, [r3, #0]
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	6123      	str	r3, [r4, #16]
 8020cda:	4615      	mov	r5, r2
 8020cdc:	e7ba      	b.n	8020c54 <_printf_i+0x150>
 8020cde:	682b      	ldr	r3, [r5, #0]
 8020ce0:	1d1a      	adds	r2, r3, #4
 8020ce2:	602a      	str	r2, [r5, #0]
 8020ce4:	681d      	ldr	r5, [r3, #0]
 8020ce6:	6862      	ldr	r2, [r4, #4]
 8020ce8:	2100      	movs	r1, #0
 8020cea:	4628      	mov	r0, r5
 8020cec:	f7df fa50 	bl	8000190 <memchr>
 8020cf0:	b108      	cbz	r0, 8020cf6 <_printf_i+0x1f2>
 8020cf2:	1b40      	subs	r0, r0, r5
 8020cf4:	6060      	str	r0, [r4, #4]
 8020cf6:	6863      	ldr	r3, [r4, #4]
 8020cf8:	6123      	str	r3, [r4, #16]
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020d00:	e7a8      	b.n	8020c54 <_printf_i+0x150>
 8020d02:	6923      	ldr	r3, [r4, #16]
 8020d04:	462a      	mov	r2, r5
 8020d06:	4649      	mov	r1, r9
 8020d08:	4640      	mov	r0, r8
 8020d0a:	47d0      	blx	sl
 8020d0c:	3001      	adds	r0, #1
 8020d0e:	d0ab      	beq.n	8020c68 <_printf_i+0x164>
 8020d10:	6823      	ldr	r3, [r4, #0]
 8020d12:	079b      	lsls	r3, r3, #30
 8020d14:	d413      	bmi.n	8020d3e <_printf_i+0x23a>
 8020d16:	68e0      	ldr	r0, [r4, #12]
 8020d18:	9b03      	ldr	r3, [sp, #12]
 8020d1a:	4298      	cmp	r0, r3
 8020d1c:	bfb8      	it	lt
 8020d1e:	4618      	movlt	r0, r3
 8020d20:	e7a4      	b.n	8020c6c <_printf_i+0x168>
 8020d22:	2301      	movs	r3, #1
 8020d24:	4632      	mov	r2, r6
 8020d26:	4649      	mov	r1, r9
 8020d28:	4640      	mov	r0, r8
 8020d2a:	47d0      	blx	sl
 8020d2c:	3001      	adds	r0, #1
 8020d2e:	d09b      	beq.n	8020c68 <_printf_i+0x164>
 8020d30:	3501      	adds	r5, #1
 8020d32:	68e3      	ldr	r3, [r4, #12]
 8020d34:	9903      	ldr	r1, [sp, #12]
 8020d36:	1a5b      	subs	r3, r3, r1
 8020d38:	42ab      	cmp	r3, r5
 8020d3a:	dcf2      	bgt.n	8020d22 <_printf_i+0x21e>
 8020d3c:	e7eb      	b.n	8020d16 <_printf_i+0x212>
 8020d3e:	2500      	movs	r5, #0
 8020d40:	f104 0619 	add.w	r6, r4, #25
 8020d44:	e7f5      	b.n	8020d32 <_printf_i+0x22e>
 8020d46:	bf00      	nop
 8020d48:	08022075 	.word	0x08022075
 8020d4c:	08022086 	.word	0x08022086

08020d50 <memmove>:
 8020d50:	4288      	cmp	r0, r1
 8020d52:	b510      	push	{r4, lr}
 8020d54:	eb01 0402 	add.w	r4, r1, r2
 8020d58:	d902      	bls.n	8020d60 <memmove+0x10>
 8020d5a:	4284      	cmp	r4, r0
 8020d5c:	4623      	mov	r3, r4
 8020d5e:	d807      	bhi.n	8020d70 <memmove+0x20>
 8020d60:	1e43      	subs	r3, r0, #1
 8020d62:	42a1      	cmp	r1, r4
 8020d64:	d008      	beq.n	8020d78 <memmove+0x28>
 8020d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020d6e:	e7f8      	b.n	8020d62 <memmove+0x12>
 8020d70:	4402      	add	r2, r0
 8020d72:	4601      	mov	r1, r0
 8020d74:	428a      	cmp	r2, r1
 8020d76:	d100      	bne.n	8020d7a <memmove+0x2a>
 8020d78:	bd10      	pop	{r4, pc}
 8020d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d82:	e7f7      	b.n	8020d74 <memmove+0x24>

08020d84 <_free_r>:
 8020d84:	b538      	push	{r3, r4, r5, lr}
 8020d86:	4605      	mov	r5, r0
 8020d88:	2900      	cmp	r1, #0
 8020d8a:	d041      	beq.n	8020e10 <_free_r+0x8c>
 8020d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020d90:	1f0c      	subs	r4, r1, #4
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	bfb8      	it	lt
 8020d96:	18e4      	addlt	r4, r4, r3
 8020d98:	f000 f912 	bl	8020fc0 <__malloc_lock>
 8020d9c:	4a1d      	ldr	r2, [pc, #116]	; (8020e14 <_free_r+0x90>)
 8020d9e:	6813      	ldr	r3, [r2, #0]
 8020da0:	b933      	cbnz	r3, 8020db0 <_free_r+0x2c>
 8020da2:	6063      	str	r3, [r4, #4]
 8020da4:	6014      	str	r4, [r2, #0]
 8020da6:	4628      	mov	r0, r5
 8020da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020dac:	f000 b90e 	b.w	8020fcc <__malloc_unlock>
 8020db0:	42a3      	cmp	r3, r4
 8020db2:	d908      	bls.n	8020dc6 <_free_r+0x42>
 8020db4:	6820      	ldr	r0, [r4, #0]
 8020db6:	1821      	adds	r1, r4, r0
 8020db8:	428b      	cmp	r3, r1
 8020dba:	bf01      	itttt	eq
 8020dbc:	6819      	ldreq	r1, [r3, #0]
 8020dbe:	685b      	ldreq	r3, [r3, #4]
 8020dc0:	1809      	addeq	r1, r1, r0
 8020dc2:	6021      	streq	r1, [r4, #0]
 8020dc4:	e7ed      	b.n	8020da2 <_free_r+0x1e>
 8020dc6:	461a      	mov	r2, r3
 8020dc8:	685b      	ldr	r3, [r3, #4]
 8020dca:	b10b      	cbz	r3, 8020dd0 <_free_r+0x4c>
 8020dcc:	42a3      	cmp	r3, r4
 8020dce:	d9fa      	bls.n	8020dc6 <_free_r+0x42>
 8020dd0:	6811      	ldr	r1, [r2, #0]
 8020dd2:	1850      	adds	r0, r2, r1
 8020dd4:	42a0      	cmp	r0, r4
 8020dd6:	d10b      	bne.n	8020df0 <_free_r+0x6c>
 8020dd8:	6820      	ldr	r0, [r4, #0]
 8020dda:	4401      	add	r1, r0
 8020ddc:	1850      	adds	r0, r2, r1
 8020dde:	4283      	cmp	r3, r0
 8020de0:	6011      	str	r1, [r2, #0]
 8020de2:	d1e0      	bne.n	8020da6 <_free_r+0x22>
 8020de4:	6818      	ldr	r0, [r3, #0]
 8020de6:	685b      	ldr	r3, [r3, #4]
 8020de8:	6053      	str	r3, [r2, #4]
 8020dea:	4401      	add	r1, r0
 8020dec:	6011      	str	r1, [r2, #0]
 8020dee:	e7da      	b.n	8020da6 <_free_r+0x22>
 8020df0:	d902      	bls.n	8020df8 <_free_r+0x74>
 8020df2:	230c      	movs	r3, #12
 8020df4:	602b      	str	r3, [r5, #0]
 8020df6:	e7d6      	b.n	8020da6 <_free_r+0x22>
 8020df8:	6820      	ldr	r0, [r4, #0]
 8020dfa:	1821      	adds	r1, r4, r0
 8020dfc:	428b      	cmp	r3, r1
 8020dfe:	bf04      	itt	eq
 8020e00:	6819      	ldreq	r1, [r3, #0]
 8020e02:	685b      	ldreq	r3, [r3, #4]
 8020e04:	6063      	str	r3, [r4, #4]
 8020e06:	bf04      	itt	eq
 8020e08:	1809      	addeq	r1, r1, r0
 8020e0a:	6021      	streq	r1, [r4, #0]
 8020e0c:	6054      	str	r4, [r2, #4]
 8020e0e:	e7ca      	b.n	8020da6 <_free_r+0x22>
 8020e10:	bd38      	pop	{r3, r4, r5, pc}
 8020e12:	bf00      	nop
 8020e14:	200024b4 	.word	0x200024b4

08020e18 <sbrk_aligned>:
 8020e18:	b570      	push	{r4, r5, r6, lr}
 8020e1a:	4e0e      	ldr	r6, [pc, #56]	; (8020e54 <sbrk_aligned+0x3c>)
 8020e1c:	460c      	mov	r4, r1
 8020e1e:	6831      	ldr	r1, [r6, #0]
 8020e20:	4605      	mov	r5, r0
 8020e22:	b911      	cbnz	r1, 8020e2a <sbrk_aligned+0x12>
 8020e24:	f000 f8bc 	bl	8020fa0 <_sbrk_r>
 8020e28:	6030      	str	r0, [r6, #0]
 8020e2a:	4621      	mov	r1, r4
 8020e2c:	4628      	mov	r0, r5
 8020e2e:	f000 f8b7 	bl	8020fa0 <_sbrk_r>
 8020e32:	1c43      	adds	r3, r0, #1
 8020e34:	d00a      	beq.n	8020e4c <sbrk_aligned+0x34>
 8020e36:	1cc4      	adds	r4, r0, #3
 8020e38:	f024 0403 	bic.w	r4, r4, #3
 8020e3c:	42a0      	cmp	r0, r4
 8020e3e:	d007      	beq.n	8020e50 <sbrk_aligned+0x38>
 8020e40:	1a21      	subs	r1, r4, r0
 8020e42:	4628      	mov	r0, r5
 8020e44:	f000 f8ac 	bl	8020fa0 <_sbrk_r>
 8020e48:	3001      	adds	r0, #1
 8020e4a:	d101      	bne.n	8020e50 <sbrk_aligned+0x38>
 8020e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8020e50:	4620      	mov	r0, r4
 8020e52:	bd70      	pop	{r4, r5, r6, pc}
 8020e54:	200024b8 	.word	0x200024b8

08020e58 <_malloc_r>:
 8020e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e5c:	1ccd      	adds	r5, r1, #3
 8020e5e:	f025 0503 	bic.w	r5, r5, #3
 8020e62:	3508      	adds	r5, #8
 8020e64:	2d0c      	cmp	r5, #12
 8020e66:	bf38      	it	cc
 8020e68:	250c      	movcc	r5, #12
 8020e6a:	2d00      	cmp	r5, #0
 8020e6c:	4607      	mov	r7, r0
 8020e6e:	db01      	blt.n	8020e74 <_malloc_r+0x1c>
 8020e70:	42a9      	cmp	r1, r5
 8020e72:	d905      	bls.n	8020e80 <_malloc_r+0x28>
 8020e74:	230c      	movs	r3, #12
 8020e76:	603b      	str	r3, [r7, #0]
 8020e78:	2600      	movs	r6, #0
 8020e7a:	4630      	mov	r0, r6
 8020e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e80:	4e2e      	ldr	r6, [pc, #184]	; (8020f3c <_malloc_r+0xe4>)
 8020e82:	f000 f89d 	bl	8020fc0 <__malloc_lock>
 8020e86:	6833      	ldr	r3, [r6, #0]
 8020e88:	461c      	mov	r4, r3
 8020e8a:	bb34      	cbnz	r4, 8020eda <_malloc_r+0x82>
 8020e8c:	4629      	mov	r1, r5
 8020e8e:	4638      	mov	r0, r7
 8020e90:	f7ff ffc2 	bl	8020e18 <sbrk_aligned>
 8020e94:	1c43      	adds	r3, r0, #1
 8020e96:	4604      	mov	r4, r0
 8020e98:	d14d      	bne.n	8020f36 <_malloc_r+0xde>
 8020e9a:	6834      	ldr	r4, [r6, #0]
 8020e9c:	4626      	mov	r6, r4
 8020e9e:	2e00      	cmp	r6, #0
 8020ea0:	d140      	bne.n	8020f24 <_malloc_r+0xcc>
 8020ea2:	6823      	ldr	r3, [r4, #0]
 8020ea4:	4631      	mov	r1, r6
 8020ea6:	4638      	mov	r0, r7
 8020ea8:	eb04 0803 	add.w	r8, r4, r3
 8020eac:	f000 f878 	bl	8020fa0 <_sbrk_r>
 8020eb0:	4580      	cmp	r8, r0
 8020eb2:	d13a      	bne.n	8020f2a <_malloc_r+0xd2>
 8020eb4:	6821      	ldr	r1, [r4, #0]
 8020eb6:	3503      	adds	r5, #3
 8020eb8:	1a6d      	subs	r5, r5, r1
 8020eba:	f025 0503 	bic.w	r5, r5, #3
 8020ebe:	3508      	adds	r5, #8
 8020ec0:	2d0c      	cmp	r5, #12
 8020ec2:	bf38      	it	cc
 8020ec4:	250c      	movcc	r5, #12
 8020ec6:	4629      	mov	r1, r5
 8020ec8:	4638      	mov	r0, r7
 8020eca:	f7ff ffa5 	bl	8020e18 <sbrk_aligned>
 8020ece:	3001      	adds	r0, #1
 8020ed0:	d02b      	beq.n	8020f2a <_malloc_r+0xd2>
 8020ed2:	6823      	ldr	r3, [r4, #0]
 8020ed4:	442b      	add	r3, r5
 8020ed6:	6023      	str	r3, [r4, #0]
 8020ed8:	e00e      	b.n	8020ef8 <_malloc_r+0xa0>
 8020eda:	6822      	ldr	r2, [r4, #0]
 8020edc:	1b52      	subs	r2, r2, r5
 8020ede:	d41e      	bmi.n	8020f1e <_malloc_r+0xc6>
 8020ee0:	2a0b      	cmp	r2, #11
 8020ee2:	d916      	bls.n	8020f12 <_malloc_r+0xba>
 8020ee4:	1961      	adds	r1, r4, r5
 8020ee6:	42a3      	cmp	r3, r4
 8020ee8:	6025      	str	r5, [r4, #0]
 8020eea:	bf18      	it	ne
 8020eec:	6059      	strne	r1, [r3, #4]
 8020eee:	6863      	ldr	r3, [r4, #4]
 8020ef0:	bf08      	it	eq
 8020ef2:	6031      	streq	r1, [r6, #0]
 8020ef4:	5162      	str	r2, [r4, r5]
 8020ef6:	604b      	str	r3, [r1, #4]
 8020ef8:	4638      	mov	r0, r7
 8020efa:	f104 060b 	add.w	r6, r4, #11
 8020efe:	f000 f865 	bl	8020fcc <__malloc_unlock>
 8020f02:	f026 0607 	bic.w	r6, r6, #7
 8020f06:	1d23      	adds	r3, r4, #4
 8020f08:	1af2      	subs	r2, r6, r3
 8020f0a:	d0b6      	beq.n	8020e7a <_malloc_r+0x22>
 8020f0c:	1b9b      	subs	r3, r3, r6
 8020f0e:	50a3      	str	r3, [r4, r2]
 8020f10:	e7b3      	b.n	8020e7a <_malloc_r+0x22>
 8020f12:	6862      	ldr	r2, [r4, #4]
 8020f14:	42a3      	cmp	r3, r4
 8020f16:	bf0c      	ite	eq
 8020f18:	6032      	streq	r2, [r6, #0]
 8020f1a:	605a      	strne	r2, [r3, #4]
 8020f1c:	e7ec      	b.n	8020ef8 <_malloc_r+0xa0>
 8020f1e:	4623      	mov	r3, r4
 8020f20:	6864      	ldr	r4, [r4, #4]
 8020f22:	e7b2      	b.n	8020e8a <_malloc_r+0x32>
 8020f24:	4634      	mov	r4, r6
 8020f26:	6876      	ldr	r6, [r6, #4]
 8020f28:	e7b9      	b.n	8020e9e <_malloc_r+0x46>
 8020f2a:	230c      	movs	r3, #12
 8020f2c:	603b      	str	r3, [r7, #0]
 8020f2e:	4638      	mov	r0, r7
 8020f30:	f000 f84c 	bl	8020fcc <__malloc_unlock>
 8020f34:	e7a1      	b.n	8020e7a <_malloc_r+0x22>
 8020f36:	6025      	str	r5, [r4, #0]
 8020f38:	e7de      	b.n	8020ef8 <_malloc_r+0xa0>
 8020f3a:	bf00      	nop
 8020f3c:	200024b4 	.word	0x200024b4

08020f40 <_realloc_r>:
 8020f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f44:	4680      	mov	r8, r0
 8020f46:	4614      	mov	r4, r2
 8020f48:	460e      	mov	r6, r1
 8020f4a:	b921      	cbnz	r1, 8020f56 <_realloc_r+0x16>
 8020f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020f50:	4611      	mov	r1, r2
 8020f52:	f7ff bf81 	b.w	8020e58 <_malloc_r>
 8020f56:	b92a      	cbnz	r2, 8020f64 <_realloc_r+0x24>
 8020f58:	f7ff ff14 	bl	8020d84 <_free_r>
 8020f5c:	4625      	mov	r5, r4
 8020f5e:	4628      	mov	r0, r5
 8020f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f64:	f000 f838 	bl	8020fd8 <_malloc_usable_size_r>
 8020f68:	4284      	cmp	r4, r0
 8020f6a:	4607      	mov	r7, r0
 8020f6c:	d802      	bhi.n	8020f74 <_realloc_r+0x34>
 8020f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020f72:	d812      	bhi.n	8020f9a <_realloc_r+0x5a>
 8020f74:	4621      	mov	r1, r4
 8020f76:	4640      	mov	r0, r8
 8020f78:	f7ff ff6e 	bl	8020e58 <_malloc_r>
 8020f7c:	4605      	mov	r5, r0
 8020f7e:	2800      	cmp	r0, #0
 8020f80:	d0ed      	beq.n	8020f5e <_realloc_r+0x1e>
 8020f82:	42bc      	cmp	r4, r7
 8020f84:	4622      	mov	r2, r4
 8020f86:	4631      	mov	r1, r6
 8020f88:	bf28      	it	cs
 8020f8a:	463a      	movcs	r2, r7
 8020f8c:	f7ff fbba 	bl	8020704 <memcpy>
 8020f90:	4631      	mov	r1, r6
 8020f92:	4640      	mov	r0, r8
 8020f94:	f7ff fef6 	bl	8020d84 <_free_r>
 8020f98:	e7e1      	b.n	8020f5e <_realloc_r+0x1e>
 8020f9a:	4635      	mov	r5, r6
 8020f9c:	e7df      	b.n	8020f5e <_realloc_r+0x1e>
	...

08020fa0 <_sbrk_r>:
 8020fa0:	b538      	push	{r3, r4, r5, lr}
 8020fa2:	4d06      	ldr	r5, [pc, #24]	; (8020fbc <_sbrk_r+0x1c>)
 8020fa4:	2300      	movs	r3, #0
 8020fa6:	4604      	mov	r4, r0
 8020fa8:	4608      	mov	r0, r1
 8020faa:	602b      	str	r3, [r5, #0]
 8020fac:	f7e1 fcdc 	bl	8002968 <_sbrk>
 8020fb0:	1c43      	adds	r3, r0, #1
 8020fb2:	d102      	bne.n	8020fba <_sbrk_r+0x1a>
 8020fb4:	682b      	ldr	r3, [r5, #0]
 8020fb6:	b103      	cbz	r3, 8020fba <_sbrk_r+0x1a>
 8020fb8:	6023      	str	r3, [r4, #0]
 8020fba:	bd38      	pop	{r3, r4, r5, pc}
 8020fbc:	200024bc 	.word	0x200024bc

08020fc0 <__malloc_lock>:
 8020fc0:	4801      	ldr	r0, [pc, #4]	; (8020fc8 <__malloc_lock+0x8>)
 8020fc2:	f000 b811 	b.w	8020fe8 <__retarget_lock_acquire_recursive>
 8020fc6:	bf00      	nop
 8020fc8:	200024c0 	.word	0x200024c0

08020fcc <__malloc_unlock>:
 8020fcc:	4801      	ldr	r0, [pc, #4]	; (8020fd4 <__malloc_unlock+0x8>)
 8020fce:	f000 b80c 	b.w	8020fea <__retarget_lock_release_recursive>
 8020fd2:	bf00      	nop
 8020fd4:	200024c0 	.word	0x200024c0

08020fd8 <_malloc_usable_size_r>:
 8020fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020fdc:	1f18      	subs	r0, r3, #4
 8020fde:	2b00      	cmp	r3, #0
 8020fe0:	bfbc      	itt	lt
 8020fe2:	580b      	ldrlt	r3, [r1, r0]
 8020fe4:	18c0      	addlt	r0, r0, r3
 8020fe6:	4770      	bx	lr

08020fe8 <__retarget_lock_acquire_recursive>:
 8020fe8:	4770      	bx	lr

08020fea <__retarget_lock_release_recursive>:
 8020fea:	4770      	bx	lr

08020fec <_init>:
 8020fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fee:	bf00      	nop
 8020ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ff2:	bc08      	pop	{r3}
 8020ff4:	469e      	mov	lr, r3
 8020ff6:	4770      	bx	lr

08020ff8 <_fini>:
 8020ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ffa:	bf00      	nop
 8020ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ffe:	bc08      	pop	{r3}
 8021000:	469e      	mov	lr, r3
 8021002:	4770      	bx	lr
